<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Building a Clubhouse clone with 100ms Javascript SDK</title>
      <author>Nilay Jayswal</author>
      <pubDate>Wed, 01 Dec 2021 06:03:22 +0000</pubDate>
      <link>https://dev.to/100mslive/building-a-clubhouse-clone-with-100ms-javascript-sdk-4bo1</link>
      <guid>https://dev.to/100mslive/building-a-clubhouse-clone-with-100ms-javascript-sdk-4bo1</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.100ms.live/"&gt;100ms&lt;/a&gt; offers a video conferencing infrastructure that provides web and mobile — native iOS and Android SDK, to add live video &amp;amp; audio conferencing to your applications.&lt;/p&gt;

&lt;p&gt;100ms is built by the same team that built live infrastructure at &lt;a href="https://www.hotstar.com/in/disneyplus"&gt;Disney&lt;/a&gt; and &lt;a href="https://web.facebook.com/?_rdc=1&amp;amp;_rdr"&gt;Facebook&lt;/a&gt;, so be sure that you are in safe hands.&lt;/p&gt;

&lt;p&gt;In this article, we will demonstrate the power of the &lt;a href="https://docs.100ms.live/javascript/v2/features/integration"&gt;100ms SDK&lt;/a&gt; by building a &lt;a href="https://www.joinclubhouse.com/"&gt;Clubhouse&lt;/a&gt; clone.&lt;/p&gt;

&lt;p&gt;Clubhouse is a revolutionary audio-based social media network that features chat rooms where users connect, listen, and learn from each other.  &lt;/p&gt;

&lt;p&gt;Let’s get started with creating our Clubhouse clone in the next section.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h2&gt;

&lt;p&gt;Our Clubhouse clone will be built with &lt;a href="https://parceljs.org/"&gt;Parcel&lt;/a&gt;, &lt;a href="https://docs.100ms.live/javascript/v2/features/integration"&gt;100ms JavaScript SDK&lt;/a&gt;, &lt;a href="https://tailwindcss.com/"&gt;Tailwind CSS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To get started, clone &lt;a href="https://github.com/lawrenceagles/clubhouse-jSDK-starter"&gt;this repository&lt;/a&gt; to get the starter files.&lt;/p&gt;

&lt;p&gt;Now you can run &lt;code&gt;npm install&lt;/code&gt; to install all dependencies and &lt;code&gt;npm start&lt;/code&gt; to start the dev server. After this we get:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HQzASTtw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zfkfut9ce9hm6o1onf8d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HQzASTtw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zfkfut9ce9hm6o1onf8d.png" alt="Image description" width="880" height="441"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note: the room section is not displayed because we added a &lt;code&gt;hidden&lt;/code&gt; class in the boilerplate above — in the element with &lt;code&gt;room-section&lt;/code&gt; id. We only want to display this view when the user joins a room — at that time we would hide the join form.&lt;/p&gt;

&lt;p&gt;In the next subsection, we will set up our 100ms credentials. Let’s jump in.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-100ms-credentials"&gt;
  &lt;/a&gt;
  Setting up 100ms credentials
&lt;/h2&gt;

&lt;p&gt;To use the 100ms SDK in our app, we need a &lt;code&gt;token_endpoint&lt;/code&gt; and a &lt;code&gt;room_id&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Since &lt;a href="https://en.parceljs.org/env.html"&gt;Parcel supports environment variables&lt;/a&gt;, create a &lt;code&gt;.env&lt;/code&gt; file in your app’s root directory and add the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;TOKEN_ENDPOINT=&amp;lt;!-- your token endpoint --&amp;gt;
ROOM_ID=&amp;lt;!-- your room id --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To get our &lt;code&gt;token_endpoint&lt;/code&gt;, register and &lt;a href="https://dashboard.100ms.live/login?__hstc=19694910.329979dc69ac6211c451a608deb47ead.1629813148407.1638280799524.1638335711945.143&amp;amp;__hssc=19694910.4.1638335711945&amp;amp;__hsfp=263881901"&gt;log in&lt;/a&gt; to your 100ms dashboard and go to the &lt;a href="https://dashboard.100ms.live/developer?__hstc=19694910.329979dc69ac6211c451a608deb47ead.1629813148407.1638280799524.1638335711945.143&amp;amp;__hssc=19694910.4.1638335711945&amp;amp;__hsfp=263881901"&gt;developer section&lt;/a&gt;. Copy the &lt;code&gt;token_endpoint&lt;/code&gt; and update the &lt;code&gt;.env&lt;/code&gt; file accordingly. Also, to get the &lt;code&gt;room_id&lt;/code&gt;  we need to create a room. But before we create a room, we first need to create a custom app and custom roles.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-custom-app"&gt;
  &lt;/a&gt;
  Create custom app
&lt;/h2&gt;

&lt;p&gt;After registration, you would redirect to your dashboard to create an app.&lt;/p&gt;

&lt;p&gt;Add a unique subdomain, and from the template, options choose the “Create your Own” option to create a custom template as seen below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t2-8g5Jj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g8p23u4em19z2409uazh.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t2-8g5Jj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g8p23u4em19z2409uazh.gif" alt="Image description" width="880" height="455"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-roles"&gt;
  &lt;/a&gt;
  Create Roles
&lt;/h2&gt;

&lt;p&gt;A role defines who a peer can see/hear, their permissions to mute/unmute someone, change someone's role, etc. Note a peer simply refers to a participant in the room — someone who has joined the room.&lt;/p&gt;

&lt;p&gt;Our clubhouse clone would have the following roles:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Listener — can only listen to others. To create this role, turn off all publish strategies and click save.&lt;/li&gt;
&lt;li&gt;Speaker — can listen and speak. Can mute and unmute himself. To create this role, turn off all publish strategies and leave only &lt;code&gt;can share audio&lt;/code&gt; on.&lt;/li&gt;
&lt;li&gt;Moderator — can do everything a speaker can do. Also, can mute/unmute others and change their role. To create this role, turn on only &lt;code&gt;can share audio&lt;/code&gt; as in speaker. And modify its permission by turning on &lt;code&gt;can change any participant's role&lt;/code&gt; and &lt;code&gt;can mute any participant&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now click on “Setup App”, and we have:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uz9abat2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/op4da8mh0yth9w76lq0k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uz9abat2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/op4da8mh0yth9w76lq0k.png" alt="Image description" width="880" height="470"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we can create our room.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-room"&gt;
  &lt;/a&gt;
  Create Room
&lt;/h2&gt;

&lt;p&gt;When users join a conference call, they are said to join a room. And these users are referred to as peers. &lt;/p&gt;

&lt;p&gt;To create a room, click on Rooms from the dashboard then Create Room as seen in the image below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--npcerkaI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j09lfxgomzptjk0oiufg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--npcerkaI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j09lfxgomzptjk0oiufg.png" alt="Image description" width="880" height="420"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now fill out the room details and click “Create Room” and you will be redirected to the room details page. From there, copy your &lt;code&gt;room_id&lt;/code&gt; and update the &lt;code&gt;.env&lt;/code&gt; file accordingly.&lt;/p&gt;

&lt;p&gt;Now that we have finished setting up our 100ms app, we can start building our application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-the-app"&gt;
  &lt;/a&gt;
  Building the App
&lt;/h2&gt;

&lt;p&gt;To use the 100ms JavaScript SDK we installed previously, there are three entities we need to be familiar with, from the &lt;a href="https://docs.100ms.live/javascript/v2/features/integration#java-script"&gt;documentation&lt;/a&gt; these hooks are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;hmsStore&lt;/code&gt; - this contains the complete state of the room at any given time. This includes, for example, participant details, messages, and track states.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;hmsActions&lt;/code&gt; - this is used to perform any action such as joining, muting, and sending a message.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;hmsNotifications&lt;/code&gt; - this can be used to get notified on peer join/leave and new messages to show toast notifications to the user.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To keep things clean, let’s set up our 100ms JavaScript SDK and grab all the needed DOM elements. Add the following code to your &lt;code&gt;app.js&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import {
    HMSReactiveStore,
    selectPeers,
    selectIsConnectedToRoom,
    selectIsLocalAudioEnabled
} from '@100mslive/hms-video-store';

const hms = new HMSReactiveStore();
const hmsStore = hms.getStore();
const hmsActions = hms.getHMSActions();

// Get DOM elements
const Form = document.querySelector('#join-form');
const FormView = document.querySelector('#join-section');
const RoomView = document.querySelector('#room-section');
const PeersContainer = document.querySelector('#peers-container');
const LeaveRoomBtn = document.querySelector('#leave-room-btn');
const AudioBtn = document.querySelector('#audio-btn');
const JoinBtn = document.querySelector('#join-btn');

// handle submit form

// handle join room view

// leave room

// display room

//handle mute/unmute peer
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can create the &lt;code&gt;join room&lt;/code&gt; view.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#joining-room"&gt;
  &lt;/a&gt;
  Joining Room
&lt;/h2&gt;

&lt;p&gt;Add the following code to your &lt;code&gt;index.html&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;form id="join-form" class="mt-8"&amp;gt;
    &amp;lt;div class="mx-auto max-w-lg "&amp;gt;
        &amp;lt;div class="py-1"&amp;gt;
            &amp;lt;span class="px-1 text-sm text-gray-600"&amp;gt;Username&amp;lt;/span&amp;gt;
            &amp;lt;input id="username" 
                   placeholder="Enter Username" 
                   name="username" 
                   type="text"
                   class="text-md block px-3 py-2 rounded-lg 
                          w-full bg-white border-2 border-gray-300 
                          placeholder-gray-600 shadow-md 
                          focus:placeholder-gray-500 focus:bg-white 
                          focus:border-gray-600 focus:outline-none" /&amp;gt;
        &amp;lt;/div&amp;gt;

        &amp;lt;div class="py-1"&amp;gt;
            &amp;lt;span class="px-1 text-sm text-gray-600"&amp;gt;Role&amp;lt;/span&amp;gt;
            &amp;lt;select id="roles"
                class="text-md block px-3 py-2 rounded-lg 
                       w-full bg-white border-2 border-gray-300 
                       placeholder-gray-600 shadow-md 
                       focus:placeholder-gray-500 focus:bg-white 
                       focus:border-gray-600 focus:outline-none"&amp;gt;
                &amp;lt;option&amp;gt;Speaker&amp;lt;/option&amp;gt;
                &amp;lt;option&amp;gt;Listener&amp;lt;/option&amp;gt;
                &amp;lt;option&amp;gt;Moderator&amp;lt;/option&amp;gt;
            &amp;lt;/select&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;button id="join-btn" type="submit"
            class="mt-3 text-lg font-semibold bg-gray-800 w-full 
                   text-white rounded-lg px-6 py-3 block shadow-xl 
                   hover:text-white hover:bg-black"&amp;gt;
            Join
        &amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The form above provides an input field for the username and a select option for the roles. We will handle submitting this form by adding the following code to the &lt;code&gt;app.js&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Form.addEventListener('submit', async function handleSubmit(e) {
    // prevents form reload
    e.preventDefault();
    // get input fields
    const userName = Form.elements['username'].value; // by name
    const role = Form.elements['roles'].value; // by name
    // simple validation
    if (!userName) return; // makes sure user enters a username
    JoinBtn.innerHTML = 'Loading...';
    try {
        // gets token
        const authToken = await getToken(role);
        // joins rooms
        hmsActions.join({
            userName,
            authToken,
            settings: {
                isAudioMuted: true
            }
        });
    } catch (error) {
        // handle error
        JoinBtn.innerHTML = 'Join';
        console.log('Token API Error', error);
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The code above gets the value of the form fields, gets an &lt;code&gt;authToken&lt;/code&gt; by calling the &lt;code&gt;getToken&lt;/code&gt; method, and joins the room by calling the join method in &lt;code&gt;hmsActions&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;The &lt;code&gt;getToken&lt;/code&gt; function is a utility function. We will use two utility functions for the purpose of this tutorial. Let's quickly create them.&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;src&lt;/code&gt; folder, create a utils folder and with the following files: &lt;code&gt;getToken.js&lt;/code&gt;, &lt;code&gt;createElem.js&lt;/code&gt;, and &lt;code&gt;index.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;getToken.js&lt;/code&gt; add the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { v4 as uuidv4 } from 'uuid';
const TOKEN_ENDPOINT = process.env.TOKEN_ENDPOINT;
const ROOM_ID = process.env.ROOM_ID;

const getToken = async (user_role) =&amp;gt; {
    const role = user_role.toLowerCase();
    const user_id = uuidv4();
    const room_id = ROOM_ID;
    const response = await fetch(`${TOKEN_ENDPOINT}api/token`, {
        method: 'POST',
        body: JSON.stringify({
            user_id,
            role,
            room_id
        })
    });
    const { token } = await response.json();
    return token;
};
export default getToken;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And in the &lt;code&gt;createElem.js&lt;/code&gt; add the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const createElem = () =&amp;gt; {}
export default createElem
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will update this when we are working on rendering peers to the view. But for now, let’s leave it as a noop.&lt;/p&gt;

&lt;p&gt;Next, in the &lt;code&gt;index.js&lt;/code&gt; file add the following code to export the above utility functions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import createElem from './createElem';
import getToken from './getToken';

export { createElem, getToken };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, we will import these functions in our &lt;code&gt;app.js&lt;/code&gt; file as seen below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import {
    HMSReactiveStore,
    selectPeers,
    selectIsConnectedToRoom,
    selectIsLocalAudioEnabled
} from '@100mslive/hms-video-store';
import { getToken, createElem } from '../utils';
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now when we run our server we get:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---U4tWbuf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pphq4y7cb69xvjfsdljm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---U4tWbuf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pphq4y7cb69xvjfsdljm.png" alt="Image description" width="880" height="441"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When a user joins a room, we want to hide this form and display the room view. And to do this add the following code to your &lt;code&gt;app.js&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function handleConnection(isConnected) {
    if (isConnected) {
        console.log('connected');
        // hides Form
        FormView.classList.toggle('hidden');
        // displays room
        RoomView.classList.toggle('hidden');
    } else {
        console.log('disconnected');
        // hides Form
        FormView.classList.toggle('hidden');
        // displays room
        RoomView.classList.toggle('hidden');
    }
}
// subscribe to room state
hmsStore.subscribe(handleConnection, selectIsConnectedToRoom);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the code above, we subscribed to the room state; consequently, &lt;code&gt;handleConnection&lt;/code&gt; is called whenever we join or leave a room. This is possible because &lt;code&gt;hmsStore&lt;/code&gt; is reactive and it enables us to register a state. The result of this is that the registered function is called whenever the selected state changes.&lt;/p&gt;

&lt;p&gt;To handle leaving a room add the following code to the &lt;code&gt;app.js&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function leaveRoom() {
    hmsActions.leave();
    JoinBtn.innerHTML = 'Join';
}
LeaveRoomBtn.addEventListener('click', leaveRoom);
window.onunload = leaveRoom;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The code above, calls the &lt;code&gt;leaveRoom&lt;/code&gt; function when the &lt;code&gt;LeaveRoomBtn&lt;/code&gt; is clicked to handle leaving a room. &lt;/p&gt;

&lt;p&gt;Note: call leave on &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onunload"&gt;window.onunload&lt;/a&gt; to handle when a user closes or refreshes the tab.&lt;/p&gt;

&lt;p&gt;Now we can join a room and we get:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CHCyhib_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fw1012erynd7w2g428d5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CHCyhib_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fw1012erynd7w2g428d5.png" alt="Image description" width="880" height="442"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Following this, all that is left is to create our room. Let’s do that in the next subsection.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-room"&gt;
  &lt;/a&gt;
  Create Room
&lt;/h2&gt;

&lt;p&gt;First, update the &lt;code&gt;createElem.js&lt;/code&gt; function with the code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// helper function to create html elements
function createElem(tag, attrs = {}, ...children) {
    const newElement = document.createElement(tag);
    Object.keys(attrs).forEach((key) =&amp;gt; {
        newElement.setAttribute(key, attrs[key]);
    });

    children.forEach((child) =&amp;gt; {
        newElement.append(child);
    });
    return newElement;
}
export default createElem;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will use this helper function to render the peers in a room. To do this, add the following code to the &lt;code&gt;app.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function renderPeers(peers) {
    PeersContainer.innerHTML = ''; // clears the container
    if (!peers) {
        // this allows us to make peer list an optional argument
        peers = hmsStore.getState(selectPeers);
    }
    peers.forEach((peer) =&amp;gt; {
        // creates an image tag
        const peerAvatar = createElem('img', {
            class: 'object-center object-cover w-full h-full',
            src: 'https://cdn.pixabay.com/photo/2013/07/13/10/07/man-156584_960_720.png',
            alt: 'photo'
        });

        // create a description paragrah tag with a text
        peerDesc = createElem(
            'p',
            {
                class: 'text-white font-bold'
            },
            peer.name + '-' + peer.roleName
        );
        const peerContainer = createElem(
            'div',
            {
                class:
                    'w-full bg-gray-900 rounded-lg sahdow-lg overflow-hidden flex flex-col justify-center items-center'
            },
            peerAvatar,
            peerDesc
        );

        // appends children
        PeersContainer.append(peerContainer);
    });
}
hmsStore.subscribe(renderPeers, selectPeers);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the &lt;code&gt;renderPeers&lt;/code&gt;  function above, &lt;code&gt;selectPeers&lt;/code&gt; gives us an array of peers — remote and your local peer, present in the room.&lt;/p&gt;

&lt;p&gt;Next, we create two HTML elements: &lt;code&gt;peerAvatar&lt;/code&gt; , and &lt;code&gt;peerDesc&lt;/code&gt; by using the &lt;code&gt;createElem&lt;/code&gt; helper function. And we appended these elements as children to &lt;code&gt;peerContainer&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Also, since we are subscribed to peer state, our view gets updated whenever something changes with any of the peers.&lt;/p&gt;

&lt;p&gt;Note, in our small contrived example above, we used a random avatar from &lt;a href="https://pixabay.com/"&gt;Pixabay&lt;/a&gt; as the &lt;code&gt;src&lt;/code&gt; for the &lt;code&gt;peerAvatar&lt;/code&gt; element. In a real situation, this should be the link to the user profile photo. &lt;/p&gt;

&lt;p&gt;Finally, we will handle mute/unmute by adding the following code to &lt;code&gt;app.js&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;AudioBtn.addEventListener('click', () =&amp;gt; {
    let audioEnabled = !hmsStore.getState(selectIsLocalAudioEnabled);
    AudioBtn.innerText = audioEnabled ? 'Mute' : 'Unmute';
    AudioBtn.classList.toggle('bg-green-600');
    AudioBtn.classList.toggle('bg-red-600');
    hmsActions.setLocalAudioEnabled(audioEnabled);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can test our app by running &lt;code&gt;npm start&lt;/code&gt;, filling out, and submitting the form. And after joining a room we get:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D3_VENkB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cyhwju02zzvwvcq7mavo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D3_VENkB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cyhwju02zzvwvcq7mavo.png" alt="Image description" width="880" height="441"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can mute/unmute yourself, and leave the room. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#role-change"&gt;
  &lt;/a&gt;
  Role change
&lt;/h2&gt;

&lt;p&gt;Our current setup does not support the “change role” feature, but in this section, we will add this feature. &lt;/p&gt;

&lt;p&gt;Currently, a listener can mute/unmute but it is best we hide this feature since the listener does not have publish permissions.&lt;/p&gt;

&lt;p&gt;So we need to upgrade our mute/unmute feature to work with roles. We will get the permissions of the local peer from the &lt;a href="https://docs.100ms.live/api-reference/javascript/v2/home/content#select-local-peer-role"&gt;selectLocalPeerRole&lt;/a&gt; variable but first, import it by updating &lt;code&gt;app.js&lt;/code&gt; as seen below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import {
    HMSReactiveStore,
    selectPeers,
    selectIsConnectedToRoom,
    selectIsLocalAudioEnabled,
    selectLocalPeerRole // imports selectLocalPeerRole
} from '@100mslive/hms-video-store';
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, update the &lt;code&gt;handleConnection&lt;/code&gt; function as seen below to hide the mute/unmute button from the listener update:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// handle join room view
function handleConnection(isConnected) {
    // get local peer role.
    const role = hmsStore.getState(selectLocalPeerRole);

    if (isConnected) {
        console.log('connected');

        //hides mute btn for listner
        if (role.name === 'listener') {
            AudioBtn.classList.add('hidden');
        }

        // hides Form
        FormView.classList.toggle('hidden');
        // displays room
        RoomView.classList.toggle('hidden');
    } else {
        console.log('disconnected');
        // hides Form
        FormView.classList.toggle('hidden');
        // displays room
        RoomView.classList.toggle('hidden');
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we will start working on the role change feature. &lt;/p&gt;

&lt;p&gt;Update the &lt;code&gt;renderPeer&lt;/code&gt; function’s forEach loop as seen below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...
    peers.forEach((peer) =&amp;gt; {
        // creates an image tag
        const peerAvatar = createElem('img', {
            class: 'object-center object-cover w-full h-full',
            src: 'https://cdn.pixabay.com/photo/2013/07/13/10/07/man-156584_960_720.png',
            alt: 'photo'
        });
        // create a description paragraph tag with a text
        const peerDesc = createElem(
            'p',
            {
                class: 'text-white font-bold'
            },
            `${peer.name}${peer.isLocal ? ' (You)' : ''}-${peer.roleName} `
        );
        // add mute/unmute list items
        const MuteItem = createElem(
            'li',
            { id: 'mute', class: 'cursor-pointer' },
            createElem(
                'span',
                {
                    'data-id': peer.id,
                    'data-islocal': peer.isLocal,
                    class: 'mute rounded-t bg-gray-200 hover:bg-gray-400 py-2 px-4 block'
                },
                'Unmute'
            )
        );
        const SpeakerItem = createElem(
            'li',
            { id: 'speaker', class: 'cursor-pointer' },
            createElem(
                'span',
                {
                    'data-id': peer.id,
                    class: 'speaker bg-gray-200 hover:bg-gray-400 py-2 px-4 block'
                },
                'Make speaker'
            )
        );
        const ListenerItem = createElem(
            'li',
            { id: 'listener', class: 'cursor-pointer' },
            createElem(
                'span',
                {
                    'data-id': peer.id,
                    class: 'listener rounded-b bg-gray-200 hover:bg-gray-400 py-2 px-4 block'
                },
                'Make listener'
            )
        );
        const menu = createElem(
            'button',
            { class: 'text-white font-bold text-3xl z-20 rounded inline-flex items-center' },
            '...'
        );
        const dropdown = createElem(
            'ul',
            { class: 'dropdown-menu absolute top-4 right-0 hidden text-gray-700 w-max pt-1 group-hover:block z-50' },
            MuteItem,
            SpeakerItem,
            ListenerItem
        );
        const menuContainer = createElem(
            'div',
            {
                class: `${peer.isLocal &amp;amp;&amp;amp; peer.roleName === 'listener'
                ? 'hidden'
                : ''} dropdown inline-block absolute top-0 right-8`
            },
            menu,
            dropdown
        );
        const peerContainer = createElem(
            'div',
            {
                class:
                    'relative w-full p-4 bg-gray-900 rounded-lg sahdow-lg overflow-hidden flex flex-col justify-center items-center'
            },
            menuContainer,
            peerAvatar,
            peerDesc
        );
        // appends children
        PeersContainer.append(peerContainer);
    });
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The code above creates the list items needed for the change role feature. And these are nested as children of &lt;code&gt;menuContainer&lt;/code&gt;.  Also, the &lt;code&gt;menuContainer&lt;/code&gt; is dynamically hidden if the local peer is a listener by adding the &lt;code&gt;hidden&lt;/code&gt; Tailwind CSS class. And this gives each user with publish permission, ellipses that display a list of actions. &lt;/p&gt;

&lt;p&gt;Thus a listener cannot mute/unmute as seen below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f_2EkxfY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8rwu5kkcc3hydi3r5nw7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f_2EkxfY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8rwu5kkcc3hydi3r5nw7.png" alt="Image description" width="880" height="441"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But a moderator can mute/unmute as seen below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8x4PAFwc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xl5i9hd8uuw54a0hp23i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8x4PAFwc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xl5i9hd8uuw54a0hp23i.png" alt="Image description" width="880" height="442"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also, we dynamically passed &lt;code&gt;peer.id&lt;/code&gt; and &lt;code&gt;peer.islocal&lt;/code&gt; by using the HTML 5 &lt;a href="https://developer.mozilla.org/en-US/docs/Learn/HTML/Howto/Use_data_attributes"&gt;data-*&lt;/a&gt; global attributes. This enables us to pass custom data needed for implementing the change role feature. &lt;/p&gt;

&lt;p&gt;We choose this pattern rather than setting up our event handlers within the forEach loop because this is cleaner and easier to understand. Also, setting up event handlers in a loop in JavaScript can easily lead to bugs because it requires us to add an event handler for each list item — DOM nodes and somehow bind this.&lt;/p&gt;

&lt;p&gt;We could use &lt;a href="https://javascript.info/event-delegation"&gt;event delegation&lt;/a&gt;; this pattern enables us to add only one event handler to a parent element which would analyze bubbled events to find a match on child elements.&lt;/p&gt;

&lt;p&gt;Add the following code at the button of &lt;code&gt;app.js&lt;/code&gt; :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// handle change role and mute/unmuter other peers
document.addEventListener(
    'click',
    function(event) {
        const role = hmsStore.getState(selectLocalPeerRole);
        // hanadle mute/unmute
        if (event.target.matches('.mute')) {
            if (role.name === 'listener') {
                alert('You do not have the permission to mute/unmute!');
                return;
            }
            if (
                role.name === 'speaker' &amp;amp;&amp;amp; 
                JSON.parse(event.target.dataset.islocal) === false) {
                alert(
                  'You do not have the permission to mute/unmute other peers!'
                );
                return;
            }
            let audioEnabled = !hmsStore.getState(selectIsLocalAudioEnabled);
            hmsActions.setLocalAudioEnabled(audioEnabled);
            event.target.innerText = audioEnabled ? 'Mute' : 'unmute';
        }

        // handle change role
        if (event.target.matches('.speaker')) {
            if (!role.permissions.changeRole) {
                alert('You do not have the permission to change role!');
                return;
            }
            hmsActions.changeRole(event.target.dataset.id, 'speaker', true);
        }

        if (event.target.matches('.listener')) {
            if (!role.permissions.changeRole) {
                alert('You do not have the permission to change role!');
                return;
            }
            hmsActions.changeRole(event.target.dataset.id, 'listener', true);
        }
    },
    false
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the code above we set up one event listener to handle all the mute and change role events.&lt;/p&gt;

&lt;p&gt;We get the clicked DOM element with &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/matches"&gt;event.target.matches&lt;/a&gt; and we get a peer’s permission using &lt;code&gt;role.permissions&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;From our implementation a listener cannot perform any action — he/she can only listen. A speaker can mute/unmute only himself and a moderator can mute/unmute himself and other peers. And he can also change the role of other peers.&lt;/p&gt;

&lt;p&gt;Now our final app looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9mVVNu2y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s01nrkhcjkq2itn557on.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9mVVNu2y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s01nrkhcjkq2itn557on.gif" alt="Image description" width="880" height="455"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;100ms is both powerful and easy to use. With a few clicks from the dashboard, we set up a custom app that we easily integrated into our app using the 100ms SDK.&lt;/p&gt;

&lt;p&gt;Interestingly, we have barely scratched the surface of what 100ms can do. Features such as screen share, RTMP streaming and recording, chat, and more can all be implemented by using this awesome infrastructure. &lt;/p&gt;

&lt;p&gt;You can &lt;a href="https://discord.com/invite/kGdmszyzq2"&gt;join the discord channel&lt;/a&gt; to learn more about 100ms or &lt;a href="https://dashboard.100ms.live/register?referrer=https://www.google.com/&amp;amp;__hstc=19694910.329979dc69ac6211c451a608deb47ead.1629813148407.1638280799524.1638335711945.143&amp;amp;__hssc=19694910.4.1638335711945&amp;amp;__hsfp=263881901"&gt;give it a try&lt;/a&gt; in your next app for free. Lastly, if you are interested in the source code of the final application, you can get it &lt;a href="https://github.com/lawrenceagles/clubhouse-100ms-jSDK"&gt;here&lt;/a&gt;.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Javascript snippets you need to know right now 🔥 - #4</title>
      <author>Abhiraj Bhowmick</author>
      <pubDate>Wed, 01 Dec 2021 05:42:40 +0000</pubDate>
      <link>https://dev.to/abhirajb/javascript-snippets-you-need-to-know-right-now-4-3a2l</link>
      <guid>https://dev.to/abhirajb/javascript-snippets-you-need-to-know-right-now-4-3a2l</guid>
      <description>&lt;p&gt;Hello my fellow readers!&lt;br&gt;
If you have really come this far in this series of posts, I would like to thank you for your support in reading all of the posts in this series. Thank you and do follow me on &lt;a href="https://twitter.com/rainboestrykr"&gt;Twitter&lt;/a&gt; for more tech content soon. Let's get started.&lt;/p&gt;



&lt;p&gt;1️⃣ Drop Elements&lt;br&gt;
This snippet returns a new array with n elements removed from the left.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;drop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;drop&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt; &lt;span class="c1"&gt;// [2,3]&lt;/span&gt;
&lt;span class="nx"&gt;drop&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// [3]&lt;/span&gt;
&lt;span class="nx"&gt;drop&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// []&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;2️⃣ dropRight&lt;br&gt;
This snippet returns a new array with n elements removed from the right.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dropRight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;dropRight&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt; &lt;span class="c1"&gt;// [1,2]&lt;/span&gt;
&lt;span class="nx"&gt;dropRight&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// [1]&lt;/span&gt;
&lt;span class="nx"&gt;dropRight&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// []&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;3️⃣ dropRightWhile&lt;br&gt;
This snippet removes elements from the right side of an array until the passed function returns true.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dropRightWhile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;func&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;dropRightWhile&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// [1, 2]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;4️⃣ dropWhile&lt;br&gt;
This snippet removes elements from an array until the passed function returns true.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dropWhile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;func&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;dropWhile&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// [3,4]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;5️⃣ elementContains&lt;br&gt;
This snippet checks whether the parent element contains the child.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;elementContains&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;child&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;elementContains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;head&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;title&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;elementContains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;body&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;body&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;6️⃣ Filter Duplicate Elements&lt;br&gt;
This snippet removes duplicate values in an array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;filterNonUnique&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastIndexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="nx"&gt;filterNonUnique&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt; &lt;span class="c1"&gt;// [1, 3, 5]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;7️⃣ findKey&lt;br&gt;
This snippet returns the first key that satisfies a given function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;findKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="nx"&gt;findKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;barney&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;active&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;fred&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;active&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;pebbles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;active&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;o&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;active&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 'barney'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;8️⃣ findLast&lt;br&gt;
This snippet returns the last element for which a given function returns a truthy value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;findLast&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;findLast&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;9️⃣ insertAfter&lt;br&gt;
This snippet can be used to insert an HTML string after the end of a particular element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;insertAfter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;htmlString&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insertAdjacentHTML&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;afterend&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;htmlString&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;insertAfter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;myId&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;p&amp;gt;after&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;div id="myId"&amp;gt;...&amp;lt;/div&amp;gt; &amp;lt;p&amp;gt;after&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;🔟 insertBefore&lt;br&gt;
This snippet can be used to insert an HTML string before a particular element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;insertBefore&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;htmlString&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insertAdjacentHTML&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;beforebegin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;htmlString&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;insertBefore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;myId&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;p&amp;gt;before&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;p&amp;gt;before&amp;lt;/p&amp;gt; &amp;lt;div id="myId"&amp;gt;...&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#thank-you-for-reading"&gt;
  &lt;/a&gt;
  Thank you for reading!
&lt;/h2&gt;

&lt;p&gt;Subscribe to my newsletter to never miss out on Product Launches and my top posts. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.getrevue.co/profile/abhiraj"&gt;Abhiraj's Dev-letter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Until next time,&lt;br&gt;
&lt;a href="https://abhiraj.glitch.me"&gt;Abhiraj&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Just Another (Average) Full Stack Web Project</title>
      <author>Amir Azhar</author>
      <pubDate>Wed, 01 Dec 2021 05:26:41 +0000</pubDate>
      <link>https://dev.to/amehpls/just-another-average-full-stack-web-project-1d93</link>
      <guid>https://dev.to/amehpls/just-another-average-full-stack-web-project-1d93</guid>
      <description>&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of Contents
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#background"&gt;Background&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#beginnings"&gt;Beginnings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tech-stack"&gt;Tech Stack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#initial-design"&gt;Initial Design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#challenges"&gt;Challenges&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#grand-finale"&gt;Grand Finale&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#reflections"&gt;Reflections&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;




&lt;h2&gt;
  &lt;a href="#background"&gt;
  &lt;/a&gt;
  Background.
&lt;/h2&gt;

&lt;p&gt;Back in 2019 when I first started delving into web development out of my own interest, I never had the opportunity (or rather, I was massively procrastinating) to start my own full stack web project. My past personal projects were always frontend-focused, using technologies like React or Bootstrap. I always found frontend development to be more enjoyable and captivating, as it allowed me to visualize my work and explore my creative side when designing interfaces.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;But it was time to get out of my comfort zone.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I started to dabble in backend technologies - ranging from MongoDB to Express - during the summer of 2021. I used this as an opportunity to learn more technology frameworks and tools, mainly through YouTube tutorials from &lt;a href="https://www.youtube.com/channel/UC29ju8bIPH5as8OGnQzwJyA"&gt;Traversy Media&lt;/a&gt; and &lt;a href="https://www.youtube.com/channel/UCQrQo7jTpOh8V9EDn9Tgnxg"&gt;Full Stack Junkie&lt;/a&gt;. It definitely brought me enjoyment, finally able to explore a whole different side to web development.&lt;/p&gt;

&lt;p&gt;It was not until my final year in National University of Singapore (NUS), August 2021, that I had the opportunity to create my very own full stack web project.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#beginnings"&gt;
  &lt;/a&gt;
  Beginnings.
&lt;/h2&gt;

&lt;p&gt;As Computer Engineering undergraduates in NUS, we had to complete the infamous CG4002 Capstone module. Why did I say infamous? Well, because this was our first project where we had to utilise all the knowledge and skills that we picked up over the past 3 years of our degree program. Embedded systems? &lt;em&gt;Yup&lt;/em&gt;. Socket programming? &lt;em&gt;Of course&lt;/em&gt;. Machine learning? &lt;em&gt;You bet&lt;/em&gt;. Vivado? &lt;em&gt;Absolutely hate it, but yes&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;I think you get the point.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It was a huge project with so many different components interacting with one another but luckily, we worked in groups, where each one of us played different roles, and became experts in our different fields. Of course, I picked the web development role. &lt;em&gt;Why would I be writing this post if there wasn't any web development.&lt;/em&gt; For just a bit of context, the problem statement of our project was:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A wearable system that detects and coaches dance moves of a dance group&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We were given total design freedom, albeit a few guidelines to follow. We could decide the direction of the project and how we wanted to execute it. For my web development component, also known as the dashboard, I had a few requirements to fulfil:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;How will the dashboard store, analyze, and display the data from&lt;br&gt;
the dancers in real-time? What analytics can you provide to coach the dancers? How can the dashboard handle many simultaneous  users? How will you assess user feedback of the dashboard?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Simply put, dancers would have wearables (with sensors) strapped to their wrists. The data will be used to predict what dance move a dancer is performing. I had to create a dashboard that would display the result of the machine learning model and also provide real-time data visualisation and analytics while the dancers performed their moves. For now, let's not worry about the details of the data pipeline between the other components and mine.  &lt;/p&gt;

&lt;p&gt;&lt;em&gt;It's finally time to delve into the web development part that you've all been waiting for.&lt;/em&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#tech-stack"&gt;
  &lt;/a&gt;
  Tech Stack.
&lt;/h2&gt;

&lt;p&gt;I opted for the MERN tech stack for my project. Let me briefly go through the different components in MERN and why I chose them. It has to be said that the entire web application, both the client and server, was run locally ob my own device.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;u&gt;M&lt;/u&gt;ongoDB&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;MongoDB is one of the most famous NoSQL database. Unlike traditional databases, MongoDB represents its information in a schemaless series of JSON-like documents, as opposed to the table and row format of relational systems such as PostgreSQL or MySQL. I picked it for 2 main reasons - (1) it allowed me to watch for real-time changes in the database using &lt;a href="https://docs.mongodb.com/manual/changeStreams/"&gt;Change Streams&lt;/a&gt; and (2) I had a complicated love-hate relationship with SQL.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;u&gt;E&lt;/u&gt;xpress&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Being a smart (and hard worker) I wanted to achieve my goals without having to write API functions or routes from scratch. Express comes to the rescue as a minimal web application framework that provides me with a myriad of HTTP utility methods and middleware, to ease the creation of APIs. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;u&gt;R&lt;/u&gt;eact&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Of course I picked React. What else would I have chosen? React is &lt;em&gt;obviously&lt;/em&gt; the most superior frontend tool. All jokes aside, I was most comfortable with React as compared to other technologies like Vue and Angular, due to my extensive exploration of the library back when I was developing my &lt;a href="//amir-azhar.com"&gt;personal web portfolio&lt;/a&gt;. (sorry for the shameless plug.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;u&gt;N&lt;/u&gt;ode&lt;/strong&gt;&lt;br&gt;
Using Node was essentially  a no brainer for me. Node would allow me to run JavaScript outside of the browser, hence, I am able to use it server side as well.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#initial-design"&gt;
  &lt;/a&gt;
  Initial Design.
&lt;/h2&gt;

&lt;p&gt;Having complete design freedom was definitely exciting, but it can be challenging because it may seem directionless at times. Thankfully, I tried to develop a proper workflow so that I could achieve an extraordinary end result.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;I first started to look for &lt;u&gt;inspiration&lt;/u&gt; on this amazing website, &lt;a href="//dribbble.com"&gt;Dribbble&lt;/a&gt;. They had TONS of user-submitted  designs and animations which I then used to generate my own ideas.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next, I sent out a simple preliminary &lt;u&gt;survey&lt;/u&gt; to my group mates, friends and family. I would then use these (un)overwhelming responses to develop use cases, user stories, and feature lists, all centered around the users.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Last step was the exciting part, which involved the &lt;u&gt;designing&lt;/u&gt; of the UI. Thankfully, I had paid for the entire Adobe Creative Suite which included Adobe Xd, which allowed me to create simple mockups.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GhoOITp6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ih4dl1wbdh4xs7ucs88n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GhoOITp6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ih4dl1wbdh4xs7ucs88n.png" alt="Adobe Xd Mockups" width="880" height="709"&gt;&lt;/a&gt; &lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#challenges"&gt;
  &lt;/a&gt;
  Challenges.
&lt;/h2&gt;

&lt;p&gt;Considering it was my first full stack web project, I was met with quite a few challenges, which was to be expected from a newbie like me. Although I had Teaching Assistants and Professors that could guide my process, I wanted to be as independent as possible. This meant spending countless of sleepless nights debugging, re-designing and scouring the depths of StackOverflow. Here are just a few challenges I faced during the development of the application and I how I tried to overcome them or simply just ignore them (ignorance is bliss).&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;u&gt;MongoDB&lt;/u&gt; provides a cloud-based solution, MongoDB Atlas, which handles all the complexity of deploying, managing, and handling of deployments on a cloud service provider of our choice. All I thought I had to do was to just set up the endpoints on my server that would connect to the cloud database and I would be good to go. &lt;em&gt;Boy was I wrong.&lt;/em&gt; Unfortunately, there were troubles connecting to the cloud service on the FPGA that we deployed to run ML predictions and send results to the database. The FPGA was sitting in a lab in campus (we had to connect to it remotely) throughout the course of the project and was connected to the campus network. The network apparently had a certain firewall which I never managed to get around. However, a workaround was to set up the MongoDB server locally on my laptop. Since I was staying on campus, my laptop and the FPGA would be on the same network!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I definitely had troubles displaying &lt;u&gt;real-time graphs&lt;/u&gt; on screen. Despite having MongoDB's Change Streams and &lt;a href="https://socket.io/"&gt;Socket.io&lt;/a&gt; to aid in my real-time streaming, I still faced troubles. The issue was that, my database was receiving data at frequency of 30Hz and my server would then vomit out the data at the same rate to the frontend, resulting in major latency issues. An easy fix I thought of was to sample the incoming data, reducing the frequency to only about 5Hz. On deciding the sampling rate, it was about finding the sweet spot between having minimal latency, and still meeting the requirement of 'real-time'.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The biggest obstacle I faced was the &lt;u&gt;lack of time&lt;/u&gt;. It was nearing the final evaluation but I had submissions for other modules to focus on too. My dashboard was mostly done, except for the sign up, login and logout functionalities. It was a shame as I spent quite a considerable amount of time learning about authentication using &lt;a href="https://jwt.io/introduction"&gt;JSON Web Tokens (JWT)&lt;/a&gt;, and &lt;a href="https://redux.js.org/"&gt;Redux&lt;/a&gt; to manage and keep track of the state of the application. Since this was originally a 'Nice to Have', I decided to forgo the functionality and simplify the authentication process with just simple conditional checks and password encryption with &lt;a href="https://www.npmjs.com/package/bcrypt"&gt;bcrypt&lt;/a&gt;. I was definitely not proud of it, but considering it was not even a project requirement, and just something I wanted to have fun with, I was not too bummed for long.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;h2&gt;
  &lt;a href="#grand-finale"&gt;
  &lt;/a&gt;
  Grand Finale.
&lt;/h2&gt;

&lt;p&gt;After almost 4 months of painstaking hard work, it was finally done. Our final evaluation went very smoothly, with the dashboard performing as it should. Since I had to show only a small part of my website during the evaluation, I thought maybe I could shamelessly show off my masterpiece here.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Enjoy&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/aE_SYE_DMt4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Here are just some of the tools and npm packages I used in making some of the components of my dashboard:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.blobmaker.app/"&gt;Blobmaker&lt;/a&gt; - A free web design tool to help quickly create random, unique, and organic-looking SVG shapes.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://nivo.rocks/components"&gt;Nivo&lt;/a&gt; - A library that provides a myriad of highly customisable data visualisation tools.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.material-ui-datatables.com/"&gt;Material UI DataTables&lt;/a&gt; - A simple data table component that comes with features like filtering, view/hide columns, search and many more.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://react-bootstrap.github.io/"&gt;React Bootstrap&lt;/a&gt; - A library that provides many easy-to-use and highly customisable components, essential in any modern web application.&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#reflections"&gt;
  &lt;/a&gt;
  Reflections.
&lt;/h2&gt;

&lt;p&gt;Was I happy with my work? &lt;em&gt;Absolutely&lt;/em&gt;. Could I have done more? &lt;em&gt;Maybe?&lt;/em&gt; When all is said and done, I believed that it was a great experience finally doing a deep dive on the different aspects of full stack web development. From exploring my misconceptions in React to understanding how HTTP requests work, I definitely learned a lot throughout this journey. This project showed me that backend development was definitely not my cup of tea and I still had a very soft spot for frontend development. I would like to give a shoutout to my lovely groupmates Andrew, Billy, Jess, Jiayi and Alex for being such great teammates and for making my CG4002 journey memorable. To others, this project may seem trivial and simple, but it was definitely a stepping stone for me in becoming a proficient web developer.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Here's to many more projects!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>react</category>
    </item>
    <item>
      <title>How to create a Twitter bot in python</title>
      <author>Praveen Kumar</author>
      <pubDate>Wed, 01 Dec 2021 05:07:58 +0000</pubDate>
      <link>https://dev.to/abipravi/how-to-create-a-twitter-bot-in-python-1024</link>
      <guid>https://dev.to/abipravi/how-to-create-a-twitter-bot-in-python-1024</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wsDHLa0j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6845g5yr2sf8pz0oy1oo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wsDHLa0j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6845g5yr2sf8pz0oy1oo.png" alt="Image description" width="800" height="533"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this article, we will learn how to create a Twitter bot using a module called &lt;code&gt;simpletwitter&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7HecuIoB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/td0gl0jr8bm62gstsel4.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7HecuIoB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/td0gl0jr8bm62gstsel4.gif" alt="Image description" width="498" height="192"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Install the simpletwitter module&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;pip install simpletwitter&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a8sbyN-X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3y9n6hywuniosof7t2ln.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a8sbyN-X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3y9n6hywuniosof7t2ln.gif" alt="Image description" width="200" height="270"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;Yes we have successfully installed the module&lt;/p&gt;

&lt;p&gt;Now get into the code,&lt;/p&gt;

&lt;p&gt;&lt;code&gt;from simpletwitter import SimpleTwitter&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Create an instance for the class SimpleTwitter&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;email = "Twitter_User_Email_Address"

password = "Twitter_Password"

user_name = "Abipravi1" 
#here i have entered my twitter username but you need to enter your's in this case

no_of_tweets = 10 
#this value is necessary how many no of tweets you want to perform operation

bot = SimpleTwitter(email, password, no_of_tweets, user_name)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's all we set up all the necessary requirements, Now let us go and perform the Twitter operations…..&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Sy7NhRvD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/esp6nal4gh6yyxtdajpv.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Sy7NhRvD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/esp6nal4gh6yyxtdajpv.gif" alt="Image description" width="498" height="298"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;hashtags = ['#abipravi', #pythonmodule', '#twitter_bot']
tweetmessage = "My first tweet by simple twitter"
bot.login() 
# to login into the account
bot.like_tweet(hashtags) 
# like the tweet
bot.unlike_liked_tweets(5) 
# unlike the liked tweet
bot.tweet(tweetmessage) 
# put some tweet
bot.only_like_top_tweet(hashtags)
# this will like only the trending tweet
bot.retweet(hashtags) 
# retweet some tweets based on particular hashtags
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally We have have it......&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FSXUDKAK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/esthup6mgmrt25erkya7.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FSXUDKAK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/esthup6mgmrt25erkya7.gif" alt="Image description" width="498" height="280"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We have made our own Twitter bot&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Full Code:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from simpletwitter import SimpleTwitter

email = "Twitter_User_Email_Address"

password = "Twitter_Password"

user_name = "Abipravi1" 
#here i have entered my twitter username but you need to enter your's in this case

no_of_tweets = 10 
#this value is necessary how many no of tweets you want to perform operation

bot = SimpleTwitter(email, password, no_of_tweets, user_name)
#Creating Instance

hashtags = ['#abipravi', #pythonmodule', '#twitter_bot']

tweetmessage = "My first tweet by simple twitter"

bot.login() 
# to login into the account

bot.like_tweet(hashtags) 
# like the tweet

bot.unlike_liked_tweets(5) 
# unlike the liked tweet

bot.tweet(tweetmessage) 
# put some tweet

bot.only_like_top_tweet(hashtags)
# this will like only the trending tweet

bot.retweet(hashtags) 
# retweet some tweets based on particular hashtags
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;**_Thanks for reading&lt;/p&gt;

&lt;p&gt;If You like this post make sure you follow us on_**&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.instagram.com/praveenkumar_abipravi/"&gt;Instagram&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/ABIPRAVI1"&gt;Twitter&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.linkedin.com/in/praveen-kumar-9b09441b7/"&gt;Linked In&lt;br&gt;
&lt;/a&gt;&lt;a href="https://medium.com/r/?url=https%3A%2F%2Fabipraviii.blogspot.com%2F"&gt;BlogPost&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Building a coordinate system in CSS and HTML</title>
      <author>Alvaro Montoro</author>
      <pubDate>Wed, 01 Dec 2021 04:00:41 +0000</pubDate>
      <link>https://dev.to/alvaromontoro/building-a-coordinate-system-in-css-and-html-pc7</link>
      <guid>https://dev.to/alvaromontoro/building-a-coordinate-system-in-css-and-html-pc7</guid>
      <description>&lt;p&gt;I developed a dynamic &lt;a href="https://en.wikipedia.org/wiki/Cartesian_coordinate_system"&gt;cartesian coordinate system&lt;/a&gt;. It may be a bit basic, but I find it interesting because you can plug in many different functions and display the points correctly. All while having some interesting features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Customizable&lt;/strong&gt;: pick the colors, size, ranges, center of the system, etc.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Responsive&lt;/strong&gt;: 100% of the parent width by default, but it can have relative/absolute sizes.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Easy-to-use&lt;/strong&gt;: straightforward translation of functions to CSS.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Lightweight&lt;/strong&gt;: 35 lines of CSS and a line of HTML for each point to be displayed. No JavaScript.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Yes, you read right: it doesn't use JavaScript to do the function calculations. Instead, it's all in CSS with the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/calc()"&gt;&lt;code&gt;calc()&lt;/code&gt; method&lt;/a&gt;.&lt;/p&gt;




&lt;p&gt;Article contents:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#introduction"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-code"&gt;The Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#variables"&gt;Variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#examples-and-demos"&gt;Examples and Demos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#accessibility"&gt;Accessibility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what-next"&gt;What's next?&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;A weekend in September –Yes, I've had the article written since then but never published it 😳–, I woke up early, and taking advantage that everyone else in the house was still sleeping, I decided to play with HTML and CSS. Looking at Twitter, I found this tweet by &lt;a href="https://twitter.com/LeaVerou"&gt;Lea Verou&lt;/a&gt;:&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pQcAGwKT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FAJjcRdUUAMVJwq.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--gKdn_y3U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/584963092120899586/TxkxQ7Y5_normal.png" alt="Lea Verou profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Lea Verou
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @leaverou
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Ever struggled to transform a range of values of a custom property to a different range of values via calc()?&lt;br&gt;&lt;br&gt;I made a little app for that!&lt;br&gt;&lt;a href="https://t.co/cY7KvzuQvF"&gt;codepen.io/leaverou/pen/b…&lt;/a&gt;&lt;br&gt;&lt;br&gt;(Hopefully I can write a detailed blog post once I’m less busy) 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      17:59 PM - 25 Sep 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1441824672199241737" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1441824672199241737" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1441824672199241737" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;She uses &lt;code&gt;calc()&lt;/code&gt; to generate a range of values following a linear function. It is an interesting approach that uses &lt;code&gt;calc()&lt;/code&gt; combined with custom properties (I've also seen it done by &lt;a href="https://twitter.com/anatudor"&gt;Ana Tudor&lt;/a&gt; and &lt;a href="https://twitter.com/ChallengesCss"&gt;Temani Afif&lt;/a&gt;, among others). I wanted to try something like this too. Maybe create an example using a quadratic function. Then one thing led to another, and the demo started growing.&lt;/p&gt;

&lt;p&gt;First, I built a basic graph of a cartesian system with a quadratic function with just HTML and CSS. All the values were hardcoded, so it was too specific. Then, I tried to make it more and more generic to match as many functions as possible: linear, quadratics, cubic, etc., and it worked. It scaled pretty well to the new operations. And it wasn't a complex demo either.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-code"&gt;
  &lt;/a&gt;
  The Code
&lt;/h2&gt;

&lt;p&gt;The whole code for the cartesian system fits in &lt;strong&gt;fewer than 40 lines of CSS code&lt;/strong&gt;! And that's taking into account the use of &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/--*"&gt;CSS custom properties&lt;/a&gt; that made the whole thing a bit lengthy (but more customizable, so it's a give-and-take situation.)&lt;/p&gt;

&lt;p&gt;Here is the CSS code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nc"&gt;.css-ccs&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;--c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="na"&gt;--cx&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="na"&gt;--cy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="na"&gt;--dsize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="na"&gt;--dcolor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#369&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="na"&gt;--size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="na"&gt;aspect-ratio&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nf"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;#0000&lt;/span&gt; &lt;span class="nf"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;#0008&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="nf"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="nf"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="nb"&gt;right&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;#0000&lt;/span&gt; &lt;span class="nf"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;cx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;#0008&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="nf"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;cx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="nf"&gt;repeating-linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;#0002&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.5px&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;#0000&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="nf"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.5px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;#0002&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="nf"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="nf"&gt;repeating-linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="nb"&gt;right&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;#0002&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.5px&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;#0000&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="nf"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.5px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;#0002&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="nf"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.css-ccs.no-overflow&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.css-css&lt;/span&gt; &lt;span class="nc"&gt;.dot&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;--translationUnit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="na"&gt;--translationX&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;translationUnit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;cx&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="na"&gt;--translationY&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;translationUnit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="cm"&gt;/* Vertical is "flipped" in CSS: higher values go down! Do negative! */&lt;/span&gt;
  &lt;span class="na"&gt;--y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;translationY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;translationUnit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;dsize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;dsize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;dcolor&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;translationX&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;translationUnit&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That &lt;code&gt;.css-ccs&lt;/code&gt; code will generate the axes and the guidelines, while the &lt;code&gt;.dot&lt;/code&gt; sets the stage for the function later.&lt;/p&gt;

&lt;p&gt;As for the HTML, we will need an element with class &lt;code&gt;css-ccs&lt;/code&gt; (CSS Cartesian Coordinates System) that will contain other elements of class &lt;code&gt;dot&lt;/code&gt; that will set the &lt;code&gt;x&lt;/code&gt; value in the &lt;code&gt;style&lt;/code&gt;. Something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"css-ccs"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"dot"&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"--x: -3;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"dot"&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"--x: 0;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"dot"&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"--x: 1;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"dot"&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"--x: 2;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ideally, I would have loved to have something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;figure&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;figcaption&amp;gt;&lt;/span&gt;Graph Title&lt;span class="nt"&gt;&amp;lt;/figcaption&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;output&lt;/span&gt; &lt;span class="na"&gt;data-x=&lt;/span&gt;&lt;span class="s"&gt;"-3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/output&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;output&lt;/span&gt; &lt;span class="na"&gt;data-x=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/output&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;output&lt;/span&gt; &lt;span class="na"&gt;data-x=&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/output&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;output&lt;/span&gt; &lt;span class="na"&gt;data-x=&lt;/span&gt;&lt;span class="s"&gt;"2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/output&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/figure&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And while I will eventually change the tags, not all of the changes are possible. &lt;code&gt;data-x&lt;/code&gt; would be the best way for indicating the &lt;code&gt;x&lt;/code&gt; value: a data attribute for a piece of data instead of a "styling variable." Unfortunately, CSS doesn't currently support reading the data attributes and passing the value to a custom property. So the custom property will do for now.&lt;/p&gt;

&lt;p&gt;Finally,  we need to &lt;em&gt;plug in&lt;/em&gt; the function to the graph. It will go for the &lt;code&gt;.dot&lt;/code&gt; class and be (kind of) straightforward: we will define a &lt;code&gt;--function&lt;/code&gt; custom property in the dot with a &lt;code&gt;calc()&lt;/code&gt; with the function. That's it.&lt;/p&gt;

&lt;p&gt;The catch? CSS doesn't have powers (&lt;a href="https://drafts.csswg.org/css-values/#calc-func"&gt;or many other types of operations for that matter)&lt;/a&gt;, so to do something like x&lt;sup&gt;2&lt;/sup&gt;, we will need to multiply x by x (x*x). We have x in the &lt;code&gt;--x&lt;/code&gt; custom property, so we will need to do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nc"&gt;.my-chart&lt;/span&gt; &lt;span class="nc"&gt;.dot&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/**
   * x^2 = x * x = var(--x) * var(--x)
   */&lt;/span&gt;
  &lt;span class="na"&gt;--function&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A bit lengthy and verbose, but still simple and not too difficult to read.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#variables"&gt;
  &lt;/a&gt;
  Variables
&lt;/h2&gt;

&lt;p&gt;We can customize the graph, passing some CSS variables to the chart itself (the container) and individually to each dot.&lt;/p&gt;

&lt;p&gt;These are the variables for the container:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Default&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--c&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;Number. Size of the diagram (in total "cells"). It must be a positive number.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--cx&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;Number. Position of the x-axis in the diagram. It must be an integer. It should be positive and less or equal to &lt;code&gt;--c&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--cy&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;Number. Position of the y-axis in the diagram. It must be an integer. It should be positive and less or equal to &lt;code&gt;--c&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--dsize&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;Number. Size of the dots in pixels. It must be positive and greater than zero.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--dcolor&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;#369&lt;/td&gt;
&lt;td&gt;Color. Color of the dots (any color format).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--size&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;100%&lt;/td&gt;
&lt;td&gt;Length. Width of the coordinate system. It can be absolute or relative to the parent.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Thanks to the CSS cascade, we can redefine some of those values individually for each dot. Additionally, we have to pass the x value for the dots:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Default&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--dsize&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;Number. Size of the dots in pixels. It must be positive and greater than zero.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--dcolor&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;#369&lt;/td&gt;
&lt;td&gt;Color. Color of the dots (any color format).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--x&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;Number. Required. Value of the &lt;code&gt;x&lt;/code&gt; to be passed to the function and represented in the graph.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#examples-and-demos"&gt;
  &lt;/a&gt;
  Examples and Demos
&lt;/h2&gt;

&lt;p&gt;Here there are some examples of plotted graphs with CSS using this method:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#linear-function-x-3"&gt;
  &lt;/a&gt;
  Linear function: x - 3
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nn"&gt;#axis_x-3&lt;/span&gt; &lt;span class="nc"&gt;.dot&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/**
   * f(x) = x - 3
   *        x = var(--x)
   */&lt;/span&gt;
  &lt;span class="na"&gt;--function&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/powQdMq?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#quadratic-function-x2-5"&gt;
  &lt;/a&gt;
  Quadratic function: x&lt;sup&gt;2&lt;/sup&gt; - 5
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nn"&gt;#axis_x2-5&lt;/span&gt; &lt;span class="nc"&gt;.dot&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/**
   * f(x) = x^2 - 5
   *        x^2 = var(--x) * var(--x)
   */&lt;/span&gt;
  &lt;span class="na"&gt;--function&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/vYZQWMg?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cubic-function-04x3-525x-4"&gt;
  &lt;/a&gt;
  Cubic function: 0.4x&lt;sup&gt;3&lt;/sup&gt; - 5.25x - 4
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nn"&gt;#axis_04x3_525x_4&lt;/span&gt; &lt;span class="nc"&gt;.dot&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/**
   * f(x) = 0.4x^3 - 5.25x - 4
   *        0.4x^3 = var(--x) * var(--x) * var(--x)
   *         5.25x = 5.25 * var(--x)
   */&lt;/span&gt;
  &lt;span class="na"&gt;--function&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.4&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="mi"&gt;.25&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/xxrQPJK?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reciprocal-square-function-1-x2"&gt;
  &lt;/a&gt;
  Reciprocal square function: 1 / x&lt;sup&gt;2&lt;/sup&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nn"&gt;#axis_1_x2&lt;/span&gt; &lt;span class="nc"&gt;.dot&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/**
   * f(x) = 1 / x^2
   *        x^2 = var(--x) * var(--x)
   */&lt;/span&gt;
  &lt;span class="na"&gt;--function&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/Rwgqxwg?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#accessibility"&gt;
  &lt;/a&gt;
  Accessibility
&lt;/h2&gt;

&lt;p&gt;The graphs may look nice, but they present some accessibility challenges. The whole chart is empty, so we should &lt;em&gt;at least&lt;/em&gt; add an &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-label_attribute"&gt;&lt;code&gt;aria-label&lt;/code&gt; with a description of the content&lt;/a&gt;. Also, a role would be nice. Adding a &lt;code&gt;role&lt;/code&gt; of "img" or "figure" would help announce the graph correctly to assistive technologies.&lt;/p&gt;

&lt;p&gt;Even better, we could use the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/figure"&gt;&lt;code&gt;&amp;lt;figure&amp;gt;&lt;/code&gt;/&lt;code&gt;&amp;lt;figcaption&amp;gt;&lt;/code&gt; tags&lt;/a&gt;. But then, we would need to do some CSS gymnastics because the background will take 100% of the container, and some overlap may happen.&lt;/p&gt;

&lt;p&gt;As for the data points, right now, they are &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;, but more semantic tags would better describe what these elements are. (For example, &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/output"&gt;&lt;code&gt;&amp;lt;output&amp;gt;&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/data"&gt;&lt;code&gt;&amp;lt;data&amp;gt;&lt;/code&gt;&lt;/a&gt;, or &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/samp"&gt;&lt;code&gt;&amp;lt;samp&amp;gt;&lt;/code&gt;&lt;/a&gt;.)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"css-ccs"&lt;/span&gt; 
     &lt;span class="na"&gt;role=&lt;/span&gt;&lt;span class="s"&gt;"img"&lt;/span&gt; 
     &lt;span class="na"&gt;aria-label=&lt;/span&gt;&lt;span class="s"&gt;"Cartesian coordinate system representing the function ... with points at ..."&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Apart from that, the points don't have any information, and it would be nice to have some data on hover/focus. If/When we do that, we'll need to take into account the accessibility of both states, so there are good alternatives for assistive technology users.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-next"&gt;
  &lt;/a&gt;
  What next
&lt;/h2&gt;

&lt;p&gt;While the CSS works fine and it is a nice experiment, it lacks many key features. Some of them can be added or simulated with HTML and CSS, but others require JavaScript. Still, our little coordinates systems are lightweight and straightforward.&lt;/p&gt;

&lt;p&gt;CSS's limitations also restrict the graphs. CSS math function list is growing (&lt;code&gt;min&lt;/code&gt;, &lt;code&gt;max&lt;/code&gt;, &lt;code&gt;clamp&lt;/code&gt;, etc.), and we can simulate some common operations (&lt;a href="https://css-tricks.com/using-absolute-value-sign-rounding-and-modulo-in-css-today/"&gt;as Ana Tudor shows in her articles&lt;/a&gt;, but there are still many math calculations that cannot be done just with CSS, and that will limit us.&lt;/p&gt;

&lt;p&gt;Probably not something to keep building into a library, but it could be helpful for drawing small examples and doesn't require a heavy external library (I'll take 40 short lines of CSS vs. a 100KB bundle of JS). Plus it was fun to develop and figure out.&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>webdev</category>
      <category>showdev</category>
    </item>
    <item>
      <title>10 Best Practices Every React Developer Should Follow</title>
      <author>DhiWise</author>
      <pubDate>Wed, 01 Dec 2021 03:38:39 +0000</pubDate>
      <link>https://dev.to/dhiwise/10-best-practices-every-react-developer-should-follow-a15</link>
      <guid>https://dev.to/dhiwise/10-best-practices-every-react-developer-should-follow-a15</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Boo-hQ1W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2900/1%2ASP2KT-Sa92azgnhjsNj7mw.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Boo-hQ1W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2900/1%2ASP2KT-Sa92azgnhjsNj7mw.jpeg" alt="React.js best practices" width="880" height="449"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Writing a clean react code is definitely a hard task for any new developer but using React best practices will gradually build up your confidence to write better code in the easiest and fastest way.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;In this article, we are going to focus on the 10 best practices every react developer should follow to be a better developer.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;React is an easy-to-use, declarative, and component-based framework used for building highly interactive user interfaces. It is a popular frontend technology introduced by Facebook, which currently has 8 million users worldwide.&lt;/p&gt;

&lt;p&gt;However, for developers, it is crucial to follow some fundamental practices concerning the technology to get complete advantage of its features and to keep code clean and organized.&lt;/p&gt;

&lt;p&gt;For example, In React you can reuse code and design components that save developers time. But while creating components developers need to follow some basic rules to make it reusable, otherwise, it can lead to a complete mess.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-break-larger-components-into-smaller-ones"&gt;
  &lt;/a&gt;
  &lt;strong&gt;1. Break larger components into smaller ones&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;To make components reusable, break the larger component into smaller ones. That means instead of putting multiple functionalities in one component create one component that will be responsible for single functionality, the principle is called as “single responsibility principle”.&lt;/p&gt;

&lt;p&gt;Separating components will help us to read, maintain, debug, reuse and scale code in long run, as the project keeps on getting bigger and bigger with time due to the addition of new features.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-use-functional-components-instead-of-classes"&gt;
  &lt;/a&gt;
  &lt;strong&gt;2. Use Functional Components instead of classes&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;If you are new to react you might get confused about what to use, functional component or class component.&lt;/p&gt;

&lt;p&gt;Here is the answer!&lt;/p&gt;

&lt;p&gt;Functional components are the stateless component that simply accepts data and display the output in some form, while Class components are stateful components that implement logic and state.&lt;/p&gt;

&lt;p&gt;If you are writing the presentational component which doesn’t need to access the lifecycle method or have its own component state then you should use a functional component. On the other hand, if you need to manage the state then use the class component.&lt;/p&gt;

&lt;p&gt;Here are the benefits of using Functional components:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;They are easy to test, debug and refactor as they are written in plain Javascript functions without state and lifecycle hooks.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reduce the number of lines of code&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Eliminate the use of ‘this’&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#3-choose-styledcomponent-over-other-cssinjs-libraries"&gt;
  &lt;/a&gt;
  &lt;strong&gt;3. Choose styled-component over other CSS-in-JS libraries&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Style-Component is one of the most preferred libraries that provides an easy way to use CSS in modern JavaScript. It enables developers to write CSS which is nicely isolated per component while preserving the full power of cascading.&lt;/p&gt;

&lt;p&gt;Some pros of using style components are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Gives freedom to build a custom component with CSS&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Enforce the use of props in the place of classes&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Supports server-side rendering with stylesheet rehydration&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Can perform unit testing with Jest Styled Component- A set of utilities to test style components with Jest.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#4-follow-react-way-to-create-separate-folders-for-all-files-related-to-each-component"&gt;
  &lt;/a&gt;
  &lt;strong&gt;4. Follow React way to Create separate folders for all files related to each component&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Follow the React way of structuring a React app. A properly maintained folder and file structure help you to understand project flow and simplify code maintenance and extraction to any other project.&lt;/p&gt;

&lt;p&gt;Organize files according to components, if there are several small components used by another big component, keep all the related components within that another component folder only and maintain the same hierarchy in the entire project.&lt;/p&gt;

&lt;p&gt;For example, the &lt;strong&gt;Form&lt;/strong&gt; component has small components such as CSS files, icons, images, tests, and other sub-components all these should be placed in one folder.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-avoid-using-indexes-as-a-key-props"&gt;
  &lt;/a&gt;
  &lt;strong&gt;5. Avoid using Indexes as a Key Props&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;According to React document, Key props help react to identify which item has been changed, added, or removed. Therefore, the key should be given to the element inside the array to give the elements a stable identity.&lt;/p&gt;

&lt;p&gt;So what will happen if you use indexes as key props?&lt;/p&gt;

&lt;p&gt;React uses key props to determine what to render or re-render, as react doesn’t waste time in rerendering duplicates. Thus, when the two elements have the same key one will be omitted by the React.&lt;/p&gt;

&lt;p&gt;Another thing to worry about is, React also re-renders elements whose key has changed for a specific element content though the actual content hasn’t been changed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-use-default-props-and-prop-types"&gt;
  &lt;/a&gt;
  &lt;strong&gt;6. Use default props and prop types&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;In JavaScript, you can not set the variable and parameter to a particular type. So there is a chance of variable type misinterpretation.&lt;/p&gt;

&lt;p&gt;Further, JavaScrip doesn’t allow setting default properties to the objects or components, or to specifying which properties are required and which are optional in React. This will lead to an issue if you forget to assign property to an object or component that is required.&lt;/p&gt;

&lt;p&gt;Both the above problem can be solved using prop type and default props. It also helps to improve your code quality making it much safer and faster to test and debug.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-avoid-using-props-at-initial-state-components"&gt;
  &lt;/a&gt;
  &lt;strong&gt;7. Avoid using props at initial state components&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Using props to generate the initial state component often leads to duplication of “source of truth.” This is because &lt;em&gt;getInitialstate&lt;/em&gt; is only invoked once, at the time when the components are first created.&lt;/p&gt;

&lt;p&gt;When you make the changes to the props next time on the component, it remains unchanged because the previous value will not be updated. The problem can be solved by avoiding the use of props at the initial state.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-isolate-stateful-aspects-from-rendering"&gt;
  &lt;/a&gt;
  &lt;strong&gt;8. Isolate stateful aspects from rendering&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;React components can be stateful or stateless. The stateful components keep track of changing data while the stateless components always render the same data.&lt;/p&gt;

&lt;p&gt;To minimize the component complexity it is always a good practice to isolate your stateful data-loading logic from the rendering stateless logic.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-always-follow-naming-conventions"&gt;
  &lt;/a&gt;
  &lt;strong&gt;9. Always follow naming conventions&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Following naming conventions ensures users know how to name digital assets so that they will remain consistent and correct. They help in file organization and management, without naming convention handling code assets can be very difficult.&lt;/p&gt;

&lt;p&gt;In react, there are mainly three naming conventions,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The component should be PascalCase&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Elements that need key should be unique&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Methods should be written in camelCase and not be application-specific&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#10-write-tests-for-the-entire-code"&gt;
  &lt;/a&gt;
  10. Write tests for the entire code
&lt;/h2&gt;

&lt;p&gt;Testing ensures code integrity. Therefore it is good practice to create a Test directory within your component’s directory to perform all the required tests and ensure that the addition of new code will not break the existing functionality.&lt;/p&gt;

&lt;p&gt;You can perform,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Unit Testing to check individual components of React application.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Integration Testing to check if different pieces of models are working well together.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;End to end testing to check the entire application flow.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#summing-up"&gt;
  &lt;/a&gt;
  Summing up:
&lt;/h2&gt;

&lt;p&gt;Here we have covered the 10 best practices React developers should follow to implement clean code, simplify code maintenance and testing.&lt;/p&gt;

&lt;p&gt;Hope all these best practices will help you to create a clean and well-organized React project and avoid any issues in the long run.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Check out my other useful blogs,&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://ravisojitra.medium.com/advanced-roadmap-for-react-js-developers-3a40ce4174b9"&gt;Advanced React Roadmap&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://ravisojitra.medium.com/react-component-patterns-805a60b88dba"&gt;React Component Patterns&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://ravisojitra.medium.com/advanced-javascript-design-patterns-6812f3286585"&gt;Advanced Javascript Design Patterns&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://ravisojitra.medium.com/state-management-in-react-with-redux-toolkit-bba750a692d9"&gt;State management with Redux toolkit&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;“If you are finding the best way to build a quality web or mobile application then start using DhiWise- The world’s first ProCode platform to speed up your app development supporting latest technologies such as Flutter, React, Node, Kotlin, iOS, and Laravel.”&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Start using &lt;a href="https://app.dhiwise.com/"&gt;DhiWise &lt;/a&gt;today and to know more about DhiWise &lt;a href="https://hubs.la/H0_-wmC0"&gt;Click here&lt;/a&gt;!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>javascript</category>
      <category>react</category>
      <category>programming</category>
    </item>
    <item>
      <title>Technical SEO Advice from an Industry Veteran</title>
      <author>SaaS.Group</author>
      <pubDate>Wed, 01 Dec 2021 03:17:32 +0000</pubDate>
      <link>https://dev.to/zoltan/technical-seo-advice-from-an-industry-veteran-jf3</link>
      <guid>https://dev.to/zoltan/technical-seo-advice-from-an-industry-veteran-jf3</guid>
      <description>&lt;p&gt;It’s not that often that you meet experienced marketers who are nice people and also good at their jobs at the same time.&lt;/p&gt;

&lt;p&gt;Dave Davies is an SEO veteran we featured in our &lt;a href="https://prerender.io/technical-seo-experts-to-follow/"&gt;25 Technical SEO Experts on Twitter roundup&lt;/a&gt; who has been in the industry for longer than almost anyone. Davies has been writing about SEO topics as a contributor to Search Engine Journal and Search Engine Watch for over a decade. He is the founder of &lt;a href="http://www.beanstalk.com/"&gt;Beanstalk Marketing&lt;/a&gt; and is currently the Lead SEO at &lt;a href="https://wandb.ai/site"&gt;Weights &amp;amp; Biases&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Apart from being a skilled SEO professional, Davies is also knowledgeable about web development and machine learning topics. As such, Davies has a more intimate understanding of the relationship between internet users and search engines better than nearly anyone else in the field today.&lt;/p&gt;

&lt;p&gt;Davies isn’t just an SEO expert with technical chops either – he loves sharing his knowledge and using his experience to make the industry better for everyone. That coupled with his affable personality and sense of humor make him widely respected in the SEO world.&lt;/p&gt;

&lt;p&gt;We sat down with Davies to ask him about technical SEO, the relationship between Google and smaller brands, and where he thinks the next core algorithm update might have in store. Here’s what he has to say.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F4-SPI_S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ucarecdn.com/f2f0624b-3ac1-441c-b070-417805b85315/" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F4-SPI_S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ucarecdn.com/f2f0624b-3ac1-441c-b070-417805b85315/" alt="Screen Shot 2021-11-30 at 10.02.05 PM.png" width="880" height="659"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I. Google’s official stance is that &lt;a href="https://prerender.io/common-javascript-seo-problems/"&gt;Googlebot can crawl and index Javascript&lt;/a&gt; without any issues. The available studies out there show that although technically true, it takes them longer and uses more resources – meaning Javascript SPAs exhaust their crawl budget quickly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#youve-been-in-the-seo-industry-longer-than-almost-anyone-what-is-your-opinion-on-this"&gt;
  &lt;/a&gt;
  &lt;strong&gt;You’ve been in the SEO industry longer than almost anyone. What is your opinion on this?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;They are wrong.&lt;/p&gt;

&lt;p&gt;I am right now working for a company that has a SPA website that uses prerendering and let me tell you, whenever the slightest thing goes wrong I see it very clearly in the rankings and the caches.&lt;/p&gt;

&lt;p&gt;I noticed just a couple of months ago a &lt;a href="https://twitter.com/beanstalkim/status/1425856004542042112"&gt;hiccup at Google with prerendering&lt;/a&gt;, which was followed pretty closely with a &lt;a href="https://twitter.com/beanstalkim/status/1427298877737209857"&gt;lag in the coverage reports&lt;/a&gt; and a &lt;a href="https://www.seroundtable.com/google-opens-indexing-bugs-reporting-tool-31943.html"&gt;form to submit indexing bugs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In short, I do think they’re working on it – but they’re still a ways off from this being true, and I’m not sure that the solution will ever be &lt;a href="https://prerender.io/crawl-budget-seo/"&gt;crawling&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;II. In recent years it’s become harder and harder for small businesses and startups to get visibility on Google SERPs because of algorithm changes that favor established brands that already have an audience and a web presence. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-can-google-do-to-better-support-smaller-businesses-and-startups-and-be-their-advocates"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What can Google do to better support smaller businesses and startups and be their advocates?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;While I understand the context of the question and sentiment, when I really think about it I’m not sure that’s true.&lt;/p&gt;

&lt;p&gt;Yes, when we’re fighting battles with national brands on their turf (national SERPs) it does often come to this, but Google is giving local businesses a lot of new tools and visibility options. The national brands can play there, as applicable – but it’s a lot harder for them to stand out and they don’t seem as favored by traditional metrics.&lt;/p&gt;

&lt;p&gt;So if small businesses focus on local markets, which many do, they have serious advantages if they know how to take them. For smaller businesses tackling national markets against sites like Amazon and Walmart, it is true they’ll be fighting an uphill battle. &lt;/p&gt;

&lt;p&gt;They need to find a sub-niche to start, where keywords are easier and start there. In that context, not a lot has changed over the years.&lt;/p&gt;

&lt;p&gt;III. Many SEO professionals make the mistake of making the Google gods happy at the expense of user experience. &lt;/p&gt;

&lt;p&gt;This is a fundamentally flawed approach because Google’s mission statement focuses on the user – to provide the user with the best possible result for a given query.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-we-solve-for-the-user-instead-how-do-we-make-that-userfirst-mentality-the-conventional-wisdom-in-seo"&gt;
  &lt;/a&gt;
  &lt;strong&gt;How do we solve for the user instead? How do we make that user-first mentality the conventional wisdom in SEO?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;I have a very short answer to this question because I think we often make it more difficult than it has to be.&lt;/p&gt;

&lt;p&gt;Create the content the user wants. Deliver it in the format they want it in. And make sure Google understands that you’ve done that.&lt;/p&gt;

&lt;p&gt;To expand a twitch:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create the content the user wants&lt;/strong&gt; – Think about the user as the person entering the query, not your customer. Think about all the things a person entering that query might be looking for and deliver as many as you can while keeping the content clean. With that, you maximize the probability that you will satisfy a user, and that’s what Google wants you to do.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Deliver it in the format they want it in&lt;/strong&gt; – If they want a video, give them a video. They all want it fast. They all want it secure. They all want to be able to access it on any device from any location. Give people what they want, and you’ll be ahead of the next rule Google throws at you.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;And make sure Google understands that you’ve done that&lt;/strong&gt; – Make sure you link between your pages logically, add schema where applicable, etc. You’ve done the work for the user, do a bit more to make sure Google understands it, and you’ll be well on your way.&lt;/p&gt;

&lt;p&gt;IV. Even if we take Google’s word for it that their web crawler can crawl and render Javascript, there’s no guarantee that websites made using Javascript frameworks will be well-optimized for both users and search engines.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-the-single-most-important-thing-that-webmasters-and-technical-seo-experts-can-do-to-make-sure-their-javascript-web-applications-are-welloptimized-for-search"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What is the single most important thing that webmasters and technical SEO experts can do to make sure their Javascript web applications are well-optimized for search?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Monitor. Monitor. Monitor.&lt;/p&gt;

&lt;p&gt;Set up alerts on key pages to run daily and alert you to an unexpected drop.&lt;/p&gt;

&lt;p&gt;Manually check pages not just with a crawler, but inspect the cache and inspect the code produced by testing your URL in Google Search Console – see how it renders. Check a variety of pages and page types. Just because one part of the page is fine, doesn’t necessarily mean it all is.&lt;/p&gt;

&lt;p&gt;Beyond that, make sure you have a good dev and good technology.&lt;/p&gt;

&lt;p&gt;V. You’ve been covering Google core algorithm updates on Search Engine Journal for years.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-do-you-anticipate-the-next-core-algorithm-update-to-focus-on-and-why-whats-missing-in-the-way-google-ranks-and-categorizes-web-pages-that-isnt-there-already"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What do you anticipate the next core algorithm update to focus on, and why? What’s missing in the way Google ranks and categorizes web pages that isn’t there already?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;This question really got me thinking. &lt;/p&gt;

&lt;p&gt;I think as far as core updates go, the next series will likely focus on infrastructure and keeping an increasingly complex arrangement of pieces working together.&lt;/p&gt;

&lt;p&gt;We’re watching &lt;a href="https://blog.google/products/search/introducing-mum/"&gt;MUM&lt;/a&gt; starting to get used in the wild, and we’ve heard about &lt;a href="https://blog.google/technology/ai/lamda/"&gt;LamDA&lt;/a&gt;. We’ve read about KELM and the potential it has in creating a more reliable and “honest” picture of the world. &lt;/p&gt;

&lt;p&gt;What we don’t read a lot about (mainly because it’s boring and we don’t want to) is the technology behind it. &lt;a href="https://ai.googleblog.com/2021/05/kelm-integrating-knowledge-graphs-with.html"&gt;KELM&lt;/a&gt; would add verified facts to a picture of the world Google has created from a different system (MUM, for example). Great, but how do you get those two parts communicating and sharing information?&lt;/p&gt;

&lt;p&gt;This is, to me, the biggest of their challenges and why I suspect it will be the focus on their core updates for the foreseeable future.&lt;/p&gt;

&lt;p&gt;I’ve started reading some of the papers on some of the technologies behind the technologies we hear about. &lt;/p&gt;

&lt;p&gt;How &lt;a href="https://wandb.ai/onlineinference/byt5/reports/ByT5-What-It-Might-Mean-For-SEO--Vmlldzo4NzY1NzE"&gt;ByT5&lt;/a&gt; can improve understanding content in a noisy environment (where noise may be something like misspelled words on social media, etc) by moving away from tokens and working byte-to-byte which required a lot to overcome the hurdle of ballooning the compute time.&lt;/p&gt;

&lt;p&gt;Or how &lt;a href="https://wandb.ai/onlineinference/flan/reports/Google-Bakes-A-FLAN-Improved-Zero-Shot-Learning-For-NLP--VmlldzoxMDE0MDEx"&gt;Google FLAN&lt;/a&gt; improves zero-shot NLP across domains (where domains are not sites, but rather tasks) so a system trained on classifying sentiment (for example) can be used to improve a translation model with little additional training required for the new task.&lt;/p&gt;

&lt;p&gt;This, in my mind, is what the core updates need to deal with.&lt;/p&gt;

&lt;p&gt;VI.  Many web developers lack even a basic understanding of SEO. That creates problems down the line when SEO problems become ignored or buried under legacy code which makes them harder to diagnose and fix. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#as-an-seo-veteran-with-web-development-credentials-what-do-you-think-we-can-do-to-bridge-that-gap-how-can-web-developers-make-sure-that-an-seo-infrastructure-is-in-place-from-the-moment-they-begin-development-on-the-other-side-what-can-marketing-teams-do-to-make-the-developers-jobs-easier"&gt;
  &lt;/a&gt;
  &lt;strong&gt;As an SEO veteran with web development credentials, what do you think we can do to bridge that gap? How can web developers make sure that an SEO infrastructure is in place from the moment they begin development? On the other side, what can marketing teams do to make the developers’ jobs easier?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;I honestly believe it’s a two-way street. &lt;/p&gt;

&lt;p&gt;When I was cutting my teeth I used Dreamweaver 4 to put content into tables and upload them page-by-page. I learned a lot on my way, but the pace of change in dev and SEO meant I needed to choose a path and I was never a developer so I stuck with SEO.&lt;/p&gt;

&lt;p&gt;Yes I can still throw together a decent WordPress site, and probably edit the themes without breaking anything, but I wouldn’t consider myself even an intermediate dev. And it’s great that I know that. &lt;/p&gt;

&lt;p&gt;That history and ability though, I think makes me a bit better than some at understanding how to communicate with developers.&lt;/p&gt;

&lt;p&gt;I can’t count the number of times I’ve outlined my needs and how to solve a problem to a capable developer, only to have it bite me in the butt when they followed by instructions to unexpected results.&lt;/p&gt;

&lt;p&gt;Now I isolate what the problem is, describe and send screenshots of how I know and how I’ll know when it’s fixed to the developer, and while I might include a potential fix I found – I try to be clear that it is for illustrative purposes only.&lt;/p&gt;

&lt;p&gt;9 times out of 10, if you are working with a good developer they’ll be able to think of solutions you never would and often solve additional problems you might not have known you had.&lt;/p&gt;

&lt;p&gt;Respect them, respect their knowledge and they will respect yours.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>ux</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Developing A Game Engine with Perl: Part 5 - 32bit -&gt; 64bit &amp; Perl's Storable</title>
      <author>Shawn Holland</author>
      <pubDate>Wed, 01 Dec 2021 03:14:32 +0000</pubDate>
      <link>https://dev.to/ansigameengine/developing-a-game-engine-with-perl-part-5-32bit-64bit-perls-storable-5l8</link>
      <guid>https://dev.to/ansigameengine/developing-a-game-engine-with-perl-part-5-32bit-64bit-perls-storable-5l8</guid>
      <description>&lt;p&gt;&lt;a href="https://dev.to/ansigameengine/developing-a-game-engine-with-perl-part-2-mouse-input-43nj"&gt;If you haven't heard already...&lt;/a&gt; &lt;strong&gt;I DO NOT KNOW WHAT I AM DOING.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you want to start reading from the beginning. Check out the &lt;a href="https://dev.to/ansigameengine/developing-a-game-engine-with-perl-3b8"&gt;first article in this series&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Continuing on with the &lt;a href="https://dev.to/ansigameengine/developing-a-game-engine-with-perl-part-4-uefi-vs-opensuse-installer-5e1c"&gt;last article&lt;/a&gt; let's talk about changing system architecture and how that can affect Perl code, specifically &lt;a href="https://perldoc.perl.org/Storable"&gt;Storable&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Mouse Input Support&lt;/li&gt;
&lt;li&gt;Hardware Failure&lt;/li&gt;
&lt;li&gt;Server Upgrade&lt;/li&gt;
&lt;li&gt;UEFI vs OpenSuSE Installer&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;32bit -&amp;gt; 64bit &amp;amp; Perl's Storable&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After the old server had &lt;a href="https://dev.to/ansigameengine/developing-a-game-engine-with-perl-part-3-hardware-failure-server-upgrade-on1"&gt;HDD failures&lt;/a&gt; and finally &lt;a href="https://dev.to/ansigameengine/developing-a-game-engine-with-perl-part-4-uefi-vs-opensuse-installer-5e1c"&gt;managing to upgrade&lt;/a&gt; to the new server, I eagerly began getting all the services and software installed to test the engine on new hardware. I was quickly meet with an error I have never seen before.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Byte order is not compatible at /usr/lib/perl5/5.34.0/x86_64-linux-thread-multi/Storable.pm&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;After doing some quick reading, I came to understand that Perl uses architecture specific ways to save content to files when using Storable. Specifically if you use &lt;code&gt;lock_store&lt;/code&gt; and &lt;code&gt;store&lt;/code&gt;. These are part of Perl's core system and what I use throughout the engine for working with the file structure.&lt;/p&gt;

&lt;p&gt;I had to carefully re-read the perldoc's to discover that you can avoid architecture incompatibility by simply using &lt;code&gt;nstore&lt;/code&gt; and &lt;code&gt;lock_nstore&lt;/code&gt; The method you use for retrieving the stored files doesn't matter, only when storing the data into files does it matter.&lt;/p&gt;

&lt;p&gt;I tried to find ways of being able to convert the stored files from 32bit architecture to 64bit, but ultimately the only real option was to use the old server to re-store the files with lock_nstore.&lt;/p&gt;

&lt;p&gt;Luckily the old PC was still working, and I was able to modify the code and re-store all the files. The change and usage was simple:&lt;/p&gt;

&lt;p&gt;I had to change my use statement from:&lt;br&gt;
&lt;code&gt;use Storable qw(lock_store lock_retrieve);&lt;/code&gt;&lt;br&gt;
to&lt;br&gt;
&lt;code&gt;use Storable qw(lock_nstore lock_retrieve)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And to re-store I changed my code from this:&lt;br&gt;
&lt;code&gt;lock_store($data_ref, $dir_location);&lt;/code&gt;&lt;br&gt;
to&lt;br&gt;
&lt;code&gt;lock_nstore($data_ref, $dir_location);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Have you ever had to write code for architecture compatibility? Or fix code migrated from one architecture to another? What do you prefer for storing data to files in Perl?&lt;/p&gt;

&lt;p&gt;If you have any suggestions or comments please share constructively. Also please visit our social media pages for lots of fun videos and pictures showing the game engine in action. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.instagram.com/ANSIGameEngine/"&gt;ANSI Game Engine on Instagram&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.facebook.com/ANSIGameEngine"&gt;ANSI Game Engine on Facebook&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/ansigameengine/developing-a-game-engine-with-perl-part-4-uefi-vs-opensuse-installer-5e1c"&gt;Prev &amp;lt;&amp;lt; Part 4 - UEFI vs OpenSuSE Installer&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;&lt;em&gt;Next &amp;gt;&amp;gt; Coming Soon&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Cheers!&lt;br&gt;
Shawn&lt;/p&gt;

</description>
      <category>perl</category>
      <category>gamedev</category>
      <category>linux</category>
      <category>devjournal</category>
    </item>
    <item>
      <title>Developing A Game Engine with Perl : Part  4 - UEFI vs OpenSuSE Installer</title>
      <author>Shawn Holland</author>
      <pubDate>Wed, 01 Dec 2021 02:34:10 +0000</pubDate>
      <link>https://dev.to/ansigameengine/developing-a-game-engine-with-perl-part-4-uefi-vs-opensuse-installer-5e1c</link>
      <guid>https://dev.to/ansigameengine/developing-a-game-engine-with-perl-part-4-uefi-vs-opensuse-installer-5e1c</guid>
      <description>&lt;p&gt;&lt;a href="https://dev.to/ansigameengine/developing-a-game-engine-with-perl-part-2-mouse-input-43nj"&gt;I'm still learning&lt;/a&gt; so remember... &lt;strong&gt;I DO NOT KNOW WHAT I AM DOING.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you want to start reading from the beginning. Check out the &lt;a href="https://dev.to/ansigameengine/developing-a-game-engine-with-perl-3b8"&gt;first article in this series&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Continuing on with the &lt;a href="https://dev.to/ansigameengine/developing-a-game-engine-with-perl-part-3-hardware-failure-server-upgrade-on1"&gt;last article&lt;/a&gt; let's talk about old hardware with &lt;a href="https://en.wikipedia.org/wiki/Unified_Extensible_Firmware_Interface"&gt;UEFI&lt;/a&gt;. It can be difficult (for me) to know how to get &lt;a href="https://www.opensuse.org/"&gt;Linux OpenSuSE&lt;/a&gt; installed properly.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Mouse Input Support&lt;/li&gt;
&lt;li&gt;Hardware Failure&lt;/li&gt;
&lt;li&gt;Server Upgrade&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;UEFI vs OpenSuSE Installer&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;32bit -&amp;gt; 64bit &amp;amp; Perl's Storable&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#a-small-computer-and-almost-destroying-it"&gt;
  &lt;/a&gt;
  A small computer and almost destroying it...
&lt;/h2&gt;

&lt;p&gt;The last server's hard drive died, and I happen to have this old, but better, computer. It was in pieces, sitting in a box for a long time. Putting it back together was not easy. This &lt;a href="https://www.acer.com/ac/en/US/content/support-product/3916?b=1&amp;amp;pn=DT.SLQAA.001"&gt;Aspire X1470&lt;/a&gt; is a small form factor design, meaning there is no room to spare. Also meaning if your computer has been sitting around in a box, in pieces for a long time, and its' frame gets bent... well that means it's going to be very difficult to get it back together. I managed to rip off a chip heatsink in the process. I tell ya, my stomach turned right over... but luckily it went back on and seems to be holding and working fine.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#uefi-vs-opensuse-installer"&gt;
  &lt;/a&gt;
  UEFI vs OpenSuSE Installer
&lt;/h2&gt;

&lt;p&gt;This is where things get interesting. After finally getting the computer together, I downloaded the OpenSuSE ISO for 64bit. I went with &lt;a href="https://get.opensuse.org/tumbleweed"&gt;Tumbleweed&lt;/a&gt; again. It worked well with the last server, so I'll just go with what I know. Tumbleweed is a &lt;a href="https://en.wikipedia.org/wiki/Rolling_release"&gt;rolling release linux&lt;/a&gt;, which means I shouldn't have to reinstall when a new version is released and I should still stay up to date. I created a &lt;a href="https://askubuntu.com/questions/1335903/make-a-full-bootable-usb-stick-with-gnome-disk-utility"&gt;bootable USB from ISO in Ubuntu 20.04&lt;/a&gt; (My Desktop). Booted the new computer, installed OpenSuSE, and was happy... until I tried to reboot.&lt;/p&gt;

&lt;p&gt;When I rebooted, I pulled out the USB stick and the BIOS said no boot drives. I knew of UEFI, and started reading. I found that in /boot/efi/ there was no EFI directory. If you don't know anything about UEFI (No worries, neither do I) ..apparently there is supposed to be a Fat32 partition marked as type EFI. The BIOS checks for this location and attempts to load the OS this way as apposed to using the &lt;a href="https://en.wikipedia.org/wiki/Master_boot_record"&gt;MBR&lt;/a&gt; for booting like in the old days. &lt;/p&gt;

&lt;p&gt;Here is what it looks like now in the server using &lt;a href="https://man7.org/linux/man-pages/man8/fdisk.8.html"&gt;fdisk&lt;/a&gt; to look at the partitions and &lt;a href="https://linux.die.net/man/1/tree"&gt;tree&lt;/a&gt; to look at the directory structure:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;localhost:/ # fdisk -l
Device          Start        End    Sectors  Size Type
/dev/sda1        2048    1050623    1048576  512M EFI System
/dev/sda2     1050624 2893709311 2892658688  1.3T Linux filesystem
/dev/sda3  2893709312 2930277134   36567823 17.4G Linux swap

localhost:/ # tree /boot/efi/
/boot/efi/
└── EFI
    ├── boot
    │   ├── MokManager.efi
    │   ├── bootx64.efi
    │   └── fallback.efi
    └── opensuse
        ├── MokManager.efi
        ├── boot.csv
        ├── grub.cfg
        ├── grub.efi
        ├── grubx64.efi
        └── shim.efi

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You may need to scroll right to see the partition type EFI.&lt;/p&gt;

&lt;p&gt;Well, this is what was &lt;strong&gt;NOT&lt;/strong&gt; happening when I installed. I tried several different ways to get it to do an EFI install, but it kept doing it MBR style. The difficult thing is I didn't know what to ask google, and every time I had to try a new install method, it took about an hour to do the install, just to check and find out that it was wrong.&lt;/p&gt;

&lt;p&gt;I knew that the installer wasn't loading in EFI mode and was running in legacy mode, but I didn't know how to switch it manually, and why it was choosing legacy in the first place. I checked the BIOS for booting options, and there just wasn't anything that would force it to boot from a HDD's MBR. I also didn't want to do a firmware update, I just wanted to code and get this install done.&lt;/p&gt;

&lt;p&gt;Finally.... the answer was the BIOS just sucks. For some reason it prioritizes legacy mode on USB booting and I could only get it to chose an EFI boot from USB by manually loading it in the boot menu with F12. Allowing it to choose the USB for booting always resulted in legacy mode, regardless of the settings specified in the BIOS. Of course OpenSuSE's installer will not allow you to switch to EFI if you are in legacy mode. Also it does not make it obvious for the uninitiated to know that it is in legacy (MBR) mode. &lt;/p&gt;

&lt;p&gt;I managed to find an obscure article that said &lt;strong&gt;&lt;code&gt;"If you see the options for pressing F keys at the bottom of the install screen, then it's legacy mode"&lt;/code&gt;&lt;/strong&gt; That one little piece of information is all I needed to understand what was happening. I saw that every time I booted into the OpenSuSE installer there were F key options at the bottom. That's when I realized that the BIOS wasn't booting from the USB's EFI partition. After realizing this, I used a manual BIOS boot, picked the correct USB boot drive (of course the BIOS displays both EFI and Legacy USB boot drives with the same name) I got the correct install screen, the EFI boot options were all there. The install went really easy at this point and is up and running now for a few days with no issues.&lt;/p&gt;

&lt;p&gt;Have you ever worked with small form factor computers? What sort of disaster stories, or success stories have you had? Also what about installing an OS with UEFI vs MBR, what sort of experiences have you had?&lt;/p&gt;

&lt;p&gt;If you have any suggestions or comments please share constructively. Also please visit our social media pages for lots of fun videos and pictures showing the game engine in action. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.instagram.com/ANSIGameEngine/"&gt;ANSI Game Engine on Instagram&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.facebook.com/ANSIGameEngine"&gt;ANSI Game Engine on Facebook&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/ansigameengine/developing-a-game-engine-with-perl-part-3-hardware-failure-server-upgrade-on1"&gt;Prev &amp;lt;&amp;lt; Part 3 - Hardware Failure &amp;amp; Server Upgrade&lt;/a&gt;&lt;br&gt;
&lt;a href="https://dev.to/ansigameengine/developing-a-game-engine-with-perl-part-5-32bit-64bit-perls-storable-5l8"&gt;Next &amp;gt;&amp;gt; Part 5 - 32bit -&amp;gt; 64bit &amp;amp; Perl's Storable&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cheers!&lt;br&gt;
Shawn&lt;/p&gt;

</description>
      <category>perl</category>
      <category>gamedev</category>
      <category>linux</category>
      <category>devjournal</category>
    </item>
    <item>
      <title>EVOLVING TECHNOLOGY AND IT'S IMPORTANCE </title>
      <author>Avinash Kumar</author>
      <pubDate>Wed, 01 Dec 2021 01:57:56 +0000</pubDate>
      <link>https://dev.to/darkxenium/evolving-technology-and-its-importance-22gm</link>
      <guid>https://dev.to/darkxenium/evolving-technology-and-its-importance-22gm</guid>
      <description>&lt;h5&gt;
  &lt;a href="#the-main-goal-of-technology-which-brings-together-tools-to-promote-development-use-and-information-exchange-is-to-make-tasks-easier-and-to-solve-many-of-humanitys-problems-we-must-emphasise-how-beneficial-technology-is-to-our-lives-as-it-advances-and-makes-our-lives-even-more-convenient"&gt;
  &lt;/a&gt;
  The main goal of technology, which brings together tools to promote development, use, and information exchange, is to make tasks easier and to solve many of humanity's problems. We must emphasise how beneficial technology is to our lives as it advances and makes our lives even more convenient.
&lt;/h5&gt;

&lt;p&gt;Some technologies that can be worked upon:-&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Controlled Artificial Intelligence&lt;/li&gt;
&lt;li&gt;Better machine learning and Nano tech&lt;/li&gt;
&lt;li&gt;Secured networks&lt;/li&gt;
&lt;/ol&gt;

&lt;h5&gt;
  &lt;a href="#also-technology-is-evolving-according-to-the-law-of-demand-we-basically-build-and-improve-what-the-market-wants-to-buy-for-me-this-is-an-outofcontrol-way-of-evolving-we-become-more-and-more-disconnected-from-nature-and-rely-more-on-dependable-tech-for-example-thanks-to-technological-advances-humans-now-are-more-educated-than-ever-before-but-that-knowledge-is-not-generally-used-whereas-a-few-decades-and-even-centuries-ago-people-where-less-educated-but-were-wiser-they-could-make-better-use-of-the-knowledge-they-had-and-better-use-of-their-mental-and-physical-abilities"&gt;
  &lt;/a&gt;
  Also, technology is evolving according to the law of demand! We basically build and improve what the market wants to buy! For me this is an 'out-of-control' way of evolving. We become more and more disconnected from nature and rely more on "dependable" tech. For example, thanks to technological advances humans now are more educated than ever before. But that knowledge is not generally used. Whereas a few decades and even centuries ago, people where less educated, but were wiser, they could make better use of the knowledge they had, and better use of their mental and physical abilities.
&lt;/h5&gt;

&lt;h5&gt;
  &lt;a href="#technology-also-helps-us-communicate-more-efficiently-and-effectively-with-others-who-are-spread-out-over-large-distances-and-its-always-developing-new-ways-of-doing-things-that-make-life-easier-or-bring-us-closer-together-whether-its-through-video-chat-social-media-or-even-just-taking-pictures-with-your-phone-and-posting-them-online-but-on-the-other-hand-there-are-some-people-who-think-technology-should-be-used-less-so-we-can-spend-more-time-interacting-with-each-other-facetoface-or-in-real-life-as-they-call-it-they-argue-that-technology-is-making-us-lazier-because-we-dont-have-to-make-as-much-effort-to-contact-people-or-do-things-and-they-also-say-that-the-new-way-we-communicate-online-can-lead-to-misunderstandings-and-fights-because-it-is-so-easy-for-others-to-misinterpret-the-way-you-mean-something"&gt;
  &lt;/a&gt;
  Technology also helps us communicate more efficiently and effectively with others who are spread out over large distances. And it's always developing new ways of doing things that make life easier or bring us closer together whether it's through video chat, social media, or even just taking pictures with your phone and posting them online. But on the other hand, there are some people who think technology should be used less so we can spend more time interacting with each other face-to-face, or "in real life" as they call it. They argue that technology is making us lazier because we don't have to make as much effort to contact people or do things. And they also say that the new way we communicate online can lead to misunderstandings and fights because it is so easy for others to misinterpret the way you mean something.
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qQ4WelUA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://thumbs.gfycat.com/PortlyGraveHen-size_restricted.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qQ4WelUA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://thumbs.gfycat.com/PortlyGraveHen-size_restricted.gif" alt="person panting" width="338" height="249"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>techtalks</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>CI/CD for .net 6, using GitHub actions</title>
      <author>Russ Hammett</author>
      <pubDate>Wed, 01 Dec 2021 01:50:51 +0000</pubDate>
      <link>https://dev.to/kritner/cicd-for-net-6-using-github-actions-1kln</link>
      <guid>https://dev.to/kritner/cicd-for-net-6-using-github-actions-1kln</guid>
      <description>&lt;p&gt;With the publishing of &lt;a href="https://github.com/OrleansContrib/Orleans.SyncWork/"&gt;Orleans.SyncWork&lt;/a&gt;, I’ve had the opportunity to explore GitHub actions - which is a way to automate workflows. Here’s some of my first experience into the “action” (groan).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#automated-workflow"&gt;
  &lt;/a&gt;
  Automated workflow
&lt;/h2&gt;

&lt;p&gt;First things first, what even is a workflow, and what does it mean to automate one? Well dear potential reader, a workflow is nothing more than a set of steps taken to complete a task.&lt;/p&gt;

&lt;p&gt;From &lt;a href="https://en.wikipedia.org/wiki/Workflow"&gt;Wikipedia&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A workflow consists of an orchestrated and repeatable pattern of activity, enabled by the systematic organization of resources into processes that transform materials, provide services, or process information. It can be depicted as a sequence of operations, the work of a person or group, the work of an organization of staff, or one or more simple or complex mechanisms.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can think of a workflow as the steps taken to accomplish “something”. That “something” can be any number of things, related to any number of subjects. In the context of this post, we’ll be mostly covering workflows as it relates to a build and release pipeline, also commonly referred to as continuous integration (CI) and continuous delivery (CD).&lt;/p&gt;

&lt;p&gt;I’d like to cover both the CI and CD aspects of the &lt;a href="https://github.com/OrleansContrib/Orleans.SyncWork/"&gt;Orleans.SyncWork&lt;/a&gt;, so let’s get started.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-youll-probably-need"&gt;
  &lt;/a&gt;
  What you’ll (probably) need
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Experience working with a &lt;a href="https://docs.microsoft.com/en-us/dotnet/core/tools/"&gt;CLI&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/2018/12/06/getting-started-with-xunit/"&gt;Unit tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;An idea of the steps that you need to take in order to build, test, and deploy your code. If these steps are already in your head in the form of CLI commands, then you’re already most of the way there!&lt;/li&gt;
&lt;li&gt;Some patience in getting your workflow properly laid out&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#continuous-integration"&gt;
  &lt;/a&gt;
  Continuous Integration
&lt;/h2&gt;

&lt;p&gt;Before you’re able to deploy code through a work flow (continuous delivery), you need to be able to integrate it safely into your main/trunk. For dotnet, through a handful of CLI commands, the building and testing of code is pretty straight forward. Doing CI has the added benefit of bringing up a brand new environment for builds, each and every time, a similar idea to why I’ve been a proponent of &lt;a href="https://dev.to/2015/01/21/And-its-like-whats-the-deal-with-build-servers"&gt;build servers&lt;/a&gt; for so long.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#build"&gt;
  &lt;/a&gt;
  Build
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dotnet build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The above command is the minimum you need to build either a solution file or project file on the dotnet side of things. From a continuous integration perspective, you may want to throw a few flags onto the command, such as:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dotnet build --configuration release
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;and things of that nature, see what’s available to you with the &lt;a href="https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-build"&gt;dotnet build&lt;/a&gt; documentation.&lt;/p&gt;

&lt;p&gt;That could look like this from the CLI:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iwSqpM3L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.kritner.com/2021/11/29/cicd-for-net6-with-github-actions/dotnetBuild.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iwSqpM3L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.kritner.com/2021/11/29/cicd-for-net6-with-github-actions/dotnetBuild.PNG" alt="dotnet build" width="880" height="465"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#test"&gt;
  &lt;/a&gt;
  Test
&lt;/h3&gt;

&lt;p&gt;Next is testing. I’ve probably already said it too many times, but &lt;a href="https://dev.to/2018/12/06/getting-started-with-xunit/"&gt;test your code&lt;/a&gt;! Especially if you’re building libraries! Tests help ensure that the code you’re writing does what you say it does. Additionally tests be used as “documentation” in a way, if the tests are named well, and are invoking the code in a similar manner to how your consumer will use it, they’ll be in a better place to get started using what you’ve delivered.&lt;/p&gt;

&lt;p&gt;Like the &lt;a href="#build"&gt;build&lt;/a&gt; command, the test command is quite straightforward as well:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dotnet test
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Of course the above is the absolute bare minimum command, there are lots of parameters that can be passed to &lt;a href="https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-test"&gt;dotnet test&lt;/a&gt; as well.&lt;/p&gt;

&lt;p&gt;A test run could look like this from the CLI:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P20n5QGr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.kritner.com/2021/11/29/cicd-for-net6-with-github-actions/dotnetTest.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P20n5QGr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.kritner.com/2021/11/29/cicd-for-net6-with-github-actions/dotnetTest.PNG" alt="dotnet test" width="880" height="554"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#ci-action"&gt;
  &lt;/a&gt;
  CI Action
&lt;/h3&gt;

&lt;p&gt;With the above &lt;code&gt;dotnet build&lt;/code&gt; and &lt;code&gt;dotnet test&lt;/code&gt; commands, we have &lt;em&gt;most&lt;/em&gt; of what we’ll need to put together an action to build and test our code, automatically!&lt;/p&gt;

&lt;p&gt;There is lots of good information, even some specific to .net testing on the &lt;a href="https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net"&gt;documentation&lt;/a&gt;. I pretty much used the documentation as a starting point, and ended up with this…&lt;/p&gt;

&lt;p&gt;.github/workflows/ci.yml:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Build and test&lt;/span&gt;

&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;pull_request&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;main&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;

    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;

    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;fetch-depth&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Setup .NET&lt;/span&gt;
      &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/setup-dotnet@v1&lt;/span&gt;
      &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;dotnet-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;6.0.x&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Restore dependencies&lt;/span&gt;
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;dotnet restore&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Build&lt;/span&gt;
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;dotnet build -c Release --no-restore&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Test&lt;/span&gt;
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;dotnet test -c Release --no-build --verbosity normal --filter "Category!=LongRunning"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The above file should be mostly straightforward, first we give a name to our workflow with &lt;code&gt;name&lt;/code&gt;, specify the triggers for the workflow, in this case “on pull requests against the main branch”. The file then goes on to define the job “build”, which specifies an OS to run on, then steps. The steps do a few things of note:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Checkout the code, placing it into the ubuntu instance that is being utilized from the step previous&lt;/li&gt;
&lt;li&gt;Setup .NET with a prebuilt action&lt;/li&gt;
&lt;li&gt;restore dependencies

&lt;ul&gt;
&lt;li&gt;This is an explicit step, rather than implicit from our previous &lt;code&gt;dotnet build&lt;/code&gt; command, as if this &lt;em&gt;explicit&lt;/em&gt; restore step were to fail, we’d more quickly know at what point of the build there is a failure&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;build the solution file at the project root&lt;/li&gt;
&lt;li&gt;finally test the code&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We have a few new flags in our build and test commands, namely specifying a configuration of release, and don’t restore/build on steps after those steps having already occurred. One final note is the &lt;code&gt;--filter "Category!=LongRunning"&lt;/code&gt; - I was having trouble with the test runner getting through the tests I had laid out. They took 3 minutes to run locally, but ran for over 25 minutes on the build agent. Due to this fact, I added some classifications of “category” to the longer running tests, and excluded them from the test run in the above ci.yml file.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#continuous-delivery"&gt;
  &lt;/a&gt;
  Continuous Delivery
&lt;/h2&gt;

&lt;p&gt;Continuous delivery is a lot like continuous integration, and builds on top of it. I’m of the thinking that CD should do everything CI should do, or perhaps even better, actually rely on the CI, rather than redefining the steps in your CICD like I ended up doing. That was a bit rambly, but CD should do everything CI should do, except with the additional step of actually &lt;em&gt;delivering&lt;/em&gt; (deploying/pushing) the code as a part of its workflow.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#delivery-complexities"&gt;
  &lt;/a&gt;
  Delivery Complexities
&lt;/h3&gt;

&lt;p&gt;That delivery part can have a lot of nuance to it that ups the complexity by a significant amount when compared to just “CI”. What does it mean to actually deliver code? Well, that could depend a lot on what type of code you’re actually delivering. In my case, I’m delivering a NuGet package, which has its own complexities, but what else is there? Well the other obvious thing that comes to mind is a web site / web api, one which could potentially have database changes to roll out in addition to the code. This to me, has the potential to be worlds more complex than just pushing a NuGet package up. How do you not only handle failures, but detect them and roll back, in the case of something going wrong with either you web push or database push? Perhaps I’ll be able to explore that one day, but for now, let’s get back to the NuGet package.&lt;/p&gt;

&lt;p&gt;So, is there a complexity with delivering a NuGet package? Yes. NuGet package versioning can be a big undertaking when it comes to manual deployments, much less CD; as there is a requirement of NuGet packages being immutable. Does this mean that for &lt;em&gt;every&lt;/em&gt; check in, on &lt;em&gt;every&lt;/em&gt; potential branch that will be pushed to NuGet, you need to update some text file or code to indicate the next built version? That was my initial thinking, but thankfully that is not the case with the help of &lt;a href="https://github.com/dotnet/Nerdbank.GitVersioning/"&gt;Nerdbank.GitVersioning&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I don’t think I have my CICD set up &lt;em&gt;exactly&lt;/em&gt; how I’ll end up having it, but for right now it works. I installed the NerdBank.GitVersioning tool and package, and now for each build, I get a unique version number for the NuGet package upon build. I can toggle between prerelease or release packages, and can even publish “nightly” builds that contain a commit hash on them, all in the name of uniquely identifiable NuGet packages.&lt;/p&gt;

&lt;p&gt;There was a fair amount of setup, that in some ways I’m still working through, but this article is already getting long enough, take a look at the PR(s) if you’re curious: &lt;a href="https://github.com/OrleansContrib/Orleans.SyncWork/pull/8"&gt;https://github.com/OrleansContrib/Orleans.SyncWork/pull/8&lt;/a&gt; and &lt;a href="https://github.com/OrleansContrib/Orleans.SyncWork/pull/13"&gt;https://github.com/OrleansContrib/Orleans.SyncWork/pull/13&lt;/a&gt;. The “tldr” of it is, &lt;code&gt;nbgv&lt;/code&gt; tooling uses the git history to rev the version number being used during builds, allowing for unique build numbers each time the CI/CD fires.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#cd-action"&gt;
  &lt;/a&gt;
  CD Action
&lt;/h3&gt;

&lt;p&gt;There’s been a fair amount of information so far, but between our CI action and the information about GitVersioning, we have everything we need to put together a “first pass” cicd.yml. For CI, we were doing builds/tests against PRs to main. For CD, we’ll want to do delivery when code is &lt;em&gt;pushed&lt;/em&gt; to main, as well as branches that begin with “RELEASE/v*”. My thinking here is that since we’ll be integrating often into main (theoretically), we don’t necessarily want to create full “new release packages” for &lt;em&gt;every&lt;/em&gt; commit to main. We could however, create “prerelease” NuGet packages to main for each commit, making those changes available to the NuGet feed, but them not being labeled as a release version. Otherwise I have Nerdbank.GitVersioning set up to release “release” versions of packages from the “RELEASE/v*” branches.&lt;/p&gt;

&lt;p&gt;The CD action file itself will look &lt;em&gt;very&lt;/em&gt; similar to the CI one, just with the few additions of &lt;code&gt;dotnet nuget...&lt;/code&gt; commands, shown below:&lt;/p&gt;

&lt;p&gt;.github/workflows/cicd.yml&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Build, test, and deploy&lt;/span&gt;

&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;main'&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;RELEASE/v**'&lt;/span&gt;


&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;

    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;

    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;fetch-depth&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Setup .NET&lt;/span&gt;
      &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/setup-dotnet@v1&lt;/span&gt;
      &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;dotnet-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;6.0.x&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Restore dependencies&lt;/span&gt;
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;dotnet restore&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Build&lt;/span&gt;
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;dotnet build -c Release --no-restore&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Test&lt;/span&gt;
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;dotnet test -c Release --no-restore --no-build --verbosity normal --filter "Category!=LongRunning"&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Pack&lt;/span&gt;
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;dotnet pack src/Orleans.SyncWork/Orleans.SyncWork.csproj -c Release --no-restore --no-build --include-symbols -p:SymbolPackageFormat=snupkg -o .&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Push to NuGet&lt;/span&gt;
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;dotnet nuget push *.nupkg --skip-duplicate -s https://api.nuget.org/v3/index.json -k ${{secrets.NUGET_API_KEY}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;In the above, you’ll notice that it’s more than 50% “the same file” as CI. I was going to potentially look into &lt;a href="https://docs.github.com/en/actions/creating-actions/creating-a-composite-action"&gt;composite actions&lt;/a&gt; as some point, so see if I could instead “chain” CI and CD, rather than redefining the CI within the CD file; but I’ve not yet had a chance to explore that.&lt;/p&gt;

&lt;p&gt;Aside from the change to the “on” event (pull_request -&amp;gt; push), there are two new commands at the bottom &lt;code&gt;dotnet pack&lt;/code&gt; and &lt;code&gt;dotnet nuget push&lt;/code&gt;. The &lt;code&gt;dotnet pack&lt;/code&gt; command is used to “package” up the project specified into a “.nupkg” file (and snupkg in this case for symbols). Finally the &lt;code&gt;dotnet nuget push&lt;/code&gt; command is used to push those newly packed NuGet package(s) to the feed specified of nuget.org. On this command you’ll also see the &lt;code&gt;{{secrets.NUGET_API_KEY}}&lt;/code&gt; portion of the command, this is defined as a &lt;a href="https://docs.github.com/en/actions/security-guides/encrypted-secrets"&gt;repository secret&lt;/a&gt; and it can be used to pass “secret” information to things like workflows, in this case it’s my NuGet API key. These secrets can be set from the repository “Settings” -&amp;gt; “Secrets”:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FGM-9o8y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.kritner.com/2021/11/29/cicd-for-net6-with-github-actions/secrets.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FGM-9o8y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.kritner.com/2021/11/29/cicd-for-net6-with-github-actions/secrets.PNG" alt="Repository secrets" width="880" height="483"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#still-to-do"&gt;
  &lt;/a&gt;
  Still to do
&lt;/h2&gt;

&lt;p&gt;The “putting out a release branch” is still a bit of a manual step for me. I need to run &lt;code&gt;nbgv prepare-release&lt;/code&gt; from my &lt;em&gt;local&lt;/em&gt; environment, then push up the subsequently created “RELEASE/v*” branch and updated new pre-release version that is created under main.&lt;/p&gt;

&lt;p&gt;That may not have made sense.&lt;/p&gt;

&lt;p&gt;If I’m working in main with a prerelease version of “1.0-prerelease”, when I &lt;code&gt;nbgv prepare-release&lt;/code&gt;, main will be (as an example) updated to “1.1-prerelease” with a branch called “RELEASE/v1.0” created having a release version of “1.0”. The push of these two changes will &lt;em&gt;currently&lt;/em&gt; build a new prerelease package of “1.1-prerelease” and release package of “1.0”, both of which will contain “the same content” at the time of being pushed.&lt;/p&gt;

&lt;p&gt;I’m not sure how I feel about the above. I like the automatic build and deploying of packages, but I don’t like having to create the release locally. I could conceivably create a manually dispatched workflow that did this release preparation for me, but then there’d still be the slight strangeness around immediately pushing out a prerelease package with no changes in comparison to the “previous” pre-release package built, and the new release package being built. I’m not sure what the “right flow” is quite yet, what I have right now &lt;em&gt;does work&lt;/em&gt;, it just seems a &lt;em&gt;bit&lt;/em&gt; messy.&lt;/p&gt;

&lt;p&gt;Perhaps I’ll eventually look into workflows more like this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CI - continues to be run on PRs to main&lt;/li&gt;
&lt;li&gt;CICD - can be executed against the main branch and “RELEASE/v*” branches, but is not done automatically as it currently is

&lt;ul&gt;
&lt;li&gt;I’m not sure about this part, main and the release should theoretically always be deployable, but do I really want to deploy &lt;em&gt;every&lt;/em&gt; time there’s a change to main…?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Prepare release workflow - with this workflow, I’d want to do the “local” steps I currently take for preparing a release, but do it through a github action.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#my-workflow"&gt;
  &lt;/a&gt;
  My Workflow
&lt;/h3&gt;

&lt;p&gt;I wasn't sure if the literal sections were required, so here they are, "My Workflow" I think was pretty well described above, hopefully!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Maintainer Must-Haves&lt;/li&gt;
&lt;li&gt;DIY Deployments&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#yaml-file-or-link-to-code"&gt;
  &lt;/a&gt;
  Yaml File or Link to Code
&lt;/h3&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/OrleansContrib"&gt;
        OrleansContrib
      &lt;/a&gt; / &lt;a href="https://github.com/OrleansContrib/Orleans.SyncWork"&gt;
        Orleans.SyncWork
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      This package's intention is to expose an abstract base class to allow https://github.com/dotnet/orleans/ to work with long running CPU bound synchronous work, without becoming overloaded.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a href="https://github.com/OrleansContrib/Orleans.SyncWork/actions/workflows/ci.yml"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9zzctpIc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/OrleansContrib/Orleans.SyncWork/actions/workflows/ci.yml/badge.svg%3Fbranch%3Dmain" alt="Build and test"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/24a99d174915d0ec40b2da403887a290a9f4a6cf3efce4589ea0d2ffe3695305/68747470733a2f2f696d672e736869656c64732e696f2f6e756765742f762f4f726c65616e732e53796e63576f726b"&gt;&lt;img src="https://camo.githubusercontent.com/24a99d174915d0ec40b2da403887a290a9f4a6cf3efce4589ea0d2ffe3695305/68747470733a2f2f696d672e736869656c64732e696f2f6e756765742f762f4f726c65616e732e53796e63576f726b" alt="Latest NuGet Version"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/52c7ebae760533f1af15049aa1474d964e4974a7735b2246f11d16ec668f4cff/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f4f726c65616e73436f6e747269622f4f726c65616e732e53796e63576f726b"&gt;&lt;img src="https://camo.githubusercontent.com/52c7ebae760533f1af15049aa1474d964e4974a7735b2246f11d16ec668f4cff/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f4f726c65616e73436f6e747269622f4f726c65616e732e53796e63576f726b" alt="License"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This package's intention is to expose an abstract base class to allow &lt;a href="https://github.com/dotnet/orleans/"&gt;Orleans&lt;/a&gt; to work with long running, CPU bound, synchronous work, without becoming overloaded.&lt;/p&gt;
&lt;p&gt;Built with an open source &lt;a href="https://jb.gg/OpenSourceSupport" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IkfQt7Xu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/OrleansContrib/Orleans.SyncWorkdocs/images/Rider_icon.svg" width="25" height="25"&gt;&lt;/a&gt; license, thanks Jetbrains!&lt;/p&gt;
&lt;h2&gt;
Project Overview&lt;/h2&gt;
&lt;p&gt;There are several projects within this repository, all with the idea of demonstrating and/or testing the claim that the NuGet package &lt;a href="https://www.nuget.org/packages/Orleans.SyncWork/" rel="nofollow"&gt;https://www.nuget.org/packages/Orleans.SyncWork/&lt;/a&gt; does what it is claimed it does.&lt;/p&gt;
&lt;p&gt;The projects in this repository include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/OrleansContrib/Orleans.SyncWork#orleanssyncwork"&gt;Orleans.SyncWork&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/OrleansContrib/Orleans.SyncWork#orleanssyncworktests"&gt;Orleans.SyncWork.Tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/OrleansContrib/Orleans.SyncWork#orleanssyncworkdemoapi"&gt;Orleans.SyncWork.Demo.Api&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/OrleansContrib/Orleans.SyncWork#orleanssyncworkdemoapibenchmark"&gt;Orleans.SyncWork.Demo.Api.Benchmark&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/OrleansContrib/Orleans.SyncWork#orleanssyncworkdemoservices"&gt;Orleans.SyncWork.Demo.Services&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
Orleans.SyncWork&lt;/h3&gt;
&lt;p&gt;The meat and potatoes of the project.  This project contains the abstraction of "Long Running, CPU bound, Synchronous work" in the form of an abstract base class &lt;a href="https://github.com/OrleansContrib/Orleans.SyncWork/blob/main/src/Orleans.SyncWork/SyncWorker.cs"&gt;SyncWorker&lt;/a&gt;; which implements an interface &lt;a href="https://github.com/OrleansContrib/Orleans.SyncWork/blob/main/src/Orleans.SyncWork/ISyncWorker.cs"&gt;ISyncWorker&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When long running work is identified, you can extend the base class &lt;code&gt;SyncWorker&lt;/code&gt;, providing a &lt;code&gt;TRequest&lt;/code&gt; and &lt;code&gt;TResponse&lt;/code&gt; unique to the long running work.  This allows you to create as many &lt;code&gt;ISyncWork&amp;lt;TRequest, TResponse&amp;gt;&lt;/code&gt; implementations as necessary, for all…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/OrleansContrib/Orleans.SyncWork"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/OrleansContrib/Orleans.SyncWork"&gt;Orleans.SyncWork on GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Workflow"&gt;Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/dotnet/core/tools/"&gt;CLI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/2015/01/21/And-its-like-whats-the-deal-with-build-servers"&gt;And it’s like what’s the deal with build servers?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/2018/12/06/getting-started-with-xunit/"&gt;Getting started with XUnit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-build"&gt;dotnet build&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-test"&gt;dotnet test&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net"&gt;Building and Testing with .NET using GitHub actions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/Nerdbank.GitVersioning/"&gt;Nerdbank.GitVersioning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.github.com/en/actions/creating-actions/creating-a-composite-action"&gt;GitHub Composite Actions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.github.com/en/actions/security-guides/encrypted-secrets"&gt;GitHub Encrypted Secrets&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>csharp</category>
      <category>dotnet</category>
      <category>github</category>
      <category>actionshackathon21</category>
    </item>
    <item>
      <title>Things to know about Artificial intelligence</title>
      <author>Mark Vassilevskiy</author>
      <pubDate>Wed, 01 Dec 2021 01:50:38 +0000</pubDate>
      <link>https://dev.to/markfusion/things-to-know-about-artificial-intelligence-5dc7</link>
      <guid>https://dev.to/markfusion/things-to-know-about-artificial-intelligence-5dc7</guid>
      <description>&lt;p&gt;In the future, Artificial Intelligence will be everywhere. AI is a &lt;br&gt;
computer system that can think for itself and make decisions about how to solve problems. It's becoming more advanced as time goes on. In this blog post, we will look at some of the things you need to know before AI becomes a part of your everyday life before it's too late.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#ai-is-not-humankind-robot"&gt;
  &lt;/a&gt;
  AI is not Humankind Robot
&lt;/h2&gt;

&lt;p&gt;If you think that AI thinks and growing as fast as people do, so you're wrong, it's doing it much faster than you can even imagine. To be what you're right now you need several years, while AI doing it probably in 1 day or even in a less period of time. &lt;/p&gt;

&lt;p&gt;AI can help you much more than you think. For example, AI currently helps doctors to diagnose diseases better, or AI researchers helping scientists from NASA to do something that they couldn't even imagine before the AI era.&lt;/p&gt;

&lt;p&gt;Why I'm telling you this? Because time will run fast and you won't even notice how AI will be implemented in all spheres of your life and work. I'm not saying that it will be an apocalypse and there will be terminators walking on the street (However, it can be so) AI will surely make your life much easier, for instance, you can already use some services like Upscaler of Image, Generator of Music, and even AI that is helping you to write articles like this one.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#you-have-to-catch-the-train"&gt;
  &lt;/a&gt;
  You have to catch the train
&lt;/h2&gt;

&lt;p&gt;Probably this information could sound too futuristic and AI will not be everywhere, but I'm telling you that it's already here. So before AI takes your job think twice about what can be done with AI in this sphere if there is such an opportunity. &lt;/p&gt;

&lt;p&gt;There're still many things that we can't do with AI such as a great design for your website. Yeah, you can say that there's already one but it's horrible and can't replace usual freelances who are making designs&lt;/p&gt;

&lt;p&gt;There are many specialties that you can choose from, including but not limited to: Security, Blockchain Technology &amp;amp; More, Trading and Investing Strategies. There's a strong emphasis on security this year as well since it was last year's theme. In addition, there are several directions in which the term "Neural Network" might be used - these&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#be-prepared-for-the-future"&gt;
  &lt;/a&gt;
  Be prepared for the future
&lt;/h2&gt;

&lt;p&gt;As we discussed AI doing everything faster than Humankind, so probably prepare yourself to live in the AI era. AI will help to do everything much easier and faster, so old technologies like PCs or laptops won't be needed probably soon. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dont-forget-about-ethics"&gt;
  &lt;/a&gt;
  Don't forget about ethics
&lt;/h2&gt;

&lt;p&gt;One of the things that you need to know before AI is taking over our lives completely is ethical issues with AI. AI doing it fast, but not always correctly. It can easily make a mistake and learn from it, but if AI starts doing unethical things just stop working. So probably think about ethical issues.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fears"&gt;
  &lt;/a&gt;
  Fears
&lt;/h2&gt;

&lt;p&gt;We don't know what will be in the future and maybe terminators will destroy all humans or something like that. For example, such influencers like Elon Musk, Bill Gates, and others think that AI can be a very dangerous thing because if it's growing so fast, it can easily rethink itself and several rules that it had in original code, and who knows that will be next.  AI already doing all the crazy things, like AI that is flying drones or AI that beat humans in games.&lt;/p&gt;

&lt;p&gt;So these are some of the important things to know about AI before it's everywhere and you can't do anything about it anymore. Before AI takes over our life we should understand what AI really is and how helpful it will be for us? So think twice if this technology helps people or destroy them especially old technologies.&lt;/p&gt;

&lt;p&gt;AI will probably take your job so try to learn something new because soon there won't be any jobs at least not with the usual salary. Think carefully about which area suits you best so when AI comes out you can use its benefits instead of getting into trouble.&lt;/p&gt;




</description>
      <category>ai</category>
      <category>machinelearning</category>
      <category>career</category>
      <category>computerscience</category>
    </item>
  </channel>
</rss>
