<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>What technologies should you know to become a Front-End Developer in 2022.</title>
      <author>Nourdine Labib</author>
      <pubDate>Sat, 15 Jan 2022 13:43:57 +0000</pubDate>
      <link>https://dev.to/nourdinedev/what-technologies-should-you-know-to-become-a-front-end-developer-in-2022-hci</link>
      <guid>https://dev.to/nourdinedev/what-technologies-should-you-know-to-become-a-front-end-developer-in-2022-hci</guid>
      <description>&lt;p&gt;In this article, I will show you everything you need to know to start a career as a Front-end developers in 2022, from the common tools to the advance technologies you will need to learn if you are considering becoming a Front-end developers.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-fundamentals"&gt;
  &lt;/a&gt;
  The fundamentals.
&lt;/h1&gt;

&lt;p&gt;There are three technologies that every web developer should know, &lt;strong&gt;HTML&lt;/strong&gt;, &lt;strong&gt;CSS&lt;/strong&gt; and &lt;strong&gt;JavaScript&lt;/strong&gt;, and these technologies are the three building blocks that you'll find in any website. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#html"&gt;
  &lt;/a&gt;
  HTML.
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Qgp8gNtz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/29tnnbrzjz95yynjmzcu.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qgp8gNtz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/29tnnbrzjz95yynjmzcu.jpg" alt="HTML" width="880" height="528"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;Hyper Text Markup Language&lt;/strong&gt;, or &lt;strong&gt;HTML&lt;/strong&gt; is the standard markup language for documents designed to be displayed in a web browser, &lt;strong&gt;HTML&lt;/strong&gt; is essentially the “skeleton” for your website. &lt;strong&gt;HTML&lt;/strong&gt; is how you structure your website. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#css"&gt;
  &lt;/a&gt;
  CSS.
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8jVGMK-r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rh1umtpqpvjakc6ocf71.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8jVGMK-r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rh1umtpqpvjakc6ocf71.png" alt="CSS" width="880" height="528"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cascading Style Sheets&lt;/strong&gt;, or &lt;strong&gt;CSS&lt;/strong&gt; is a style sheet language used for describing the presentation of a document written in a markup language such as &lt;strong&gt;HTML&lt;/strong&gt;, &lt;strong&gt;CSS&lt;/strong&gt; is responsible for giving &lt;strong&gt;HTML&lt;/strong&gt; documents and webpages a face. In other words, it describes how an &lt;strong&gt;HTML&lt;/strong&gt; page should look. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#javascript"&gt;
  &lt;/a&gt;
  JavaScript.
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4-nSyIlm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xtzpcep2nru3mv6vrxgu.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4-nSyIlm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xtzpcep2nru3mv6vrxgu.jpg" alt="JavaScript" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;, often abbreviated &lt;strong&gt;JS&lt;/strong&gt;, is a programming language that is one of the core technologies of the World Wide Web, alongside &lt;strong&gt;HTML&lt;/strong&gt; and &lt;strong&gt;CSS&lt;/strong&gt;. Over &lt;strong&gt;97%&lt;/strong&gt; of websites use &lt;strong&gt;JavaScript&lt;/strong&gt; on the client side for web page behavior.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#dive-into-frontend-development"&gt;
  &lt;/a&gt;
  Dive into front-end development.
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#git-and-github"&gt;
  &lt;/a&gt;
  Git and GitHub.
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_PwXnUkD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kfz3w0nubem1ndc6ya26.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_PwXnUkD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kfz3w0nubem1ndc6ya26.png" alt="Git and GitHub" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://git-scm.com"&gt;Git&lt;/a&gt;&lt;/strong&gt; is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com"&gt;GitHub&lt;/a&gt;&lt;/strong&gt; is a provider of internet hosting for software development and version control using Git. It offers the distributed version control and source code management functionality of Git, plus its own features.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#npm"&gt;
  &lt;/a&gt;
  npm
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---pxpghtg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h6i1ci8o3yeqqk87iwl6.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---pxpghtg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h6i1ci8o3yeqqk87iwl6.jpg" alt="npm" width="880" height="588"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.npmjs.com"&gt;npm&lt;/a&gt;&lt;/strong&gt; is a package manager for the JavaScript programming language maintained by npm, Inc. npm is the default package manager for the JavaScript runtime environment Node.js.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sass"&gt;
  &lt;/a&gt;
  Sass
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B1TvDGUp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hop7ytfavbu52466kdfz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B1TvDGUp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hop7ytfavbu52466kdfz.png" alt="Sass" width="683" height="342"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://sass-lang.com"&gt;Sass&lt;/a&gt;&lt;/strong&gt; is a preprocessor scripting language that is interpreted or compiled into Cascading Style Sheets. It lets you write maintainable CSS and provides features like variable, nesting, mixins, extension, functions, loops, conditionals and so on.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tailwind-css"&gt;
  &lt;/a&gt;
  Tailwind CSS
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K8GdBIz2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b5drejxxbo7sxjkmz3gd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K8GdBIz2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b5drejxxbo7sxjkmz3gd.png" alt="Tailwind CSS" width="880" height="427"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://dev.toTailwind%20CSS"&gt;Tailwind CSS&lt;/a&gt;&lt;/strong&gt; is a CSS Framework that provides atomic CSS classes to help you style components e.g. flex, pt-4, text-center and rotate-90 that can be composed to build any design, directly in your markup.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#react"&gt;
  &lt;/a&gt;
  React
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DVAh2mET--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zvrvbyiat76p1idx0j02.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DVAh2mET--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zvrvbyiat76p1idx0j02.jpg" alt="React" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://reactjs.org"&gt;React&lt;/a&gt;&lt;/strong&gt; is the most popular front-end JavaScript library for building user interfaces. React can also render on the server using Node and power mobile apps using React Native.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#chakra-ui"&gt;
  &lt;/a&gt;
  Chakra UI
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CQhNDDwS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4biol65vigty70z739ha.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CQhNDDwS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4biol65vigty70z739ha.png" alt="Chakra UI" width="880" height="462"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://chakra-ui.com"&gt;Chakra UI&lt;/a&gt;&lt;/strong&gt; is a simple, modular and accessible component library that gives you the building blocks you need to build your React applications.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#redux"&gt;
  &lt;/a&gt;
  Redux
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hVhMPE4x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u4khilxo0q9cw9bwr6nv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hVhMPE4x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u4khilxo0q9cw9bwr6nv.png" alt="Redux" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://redux.js.org"&gt;Redux&lt;/a&gt;&lt;/strong&gt; is a predictable state container for JavaScript apps. It helps you write applications that behave consistently, run in different environments (client, server, and native), and are easy to test. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nextjs"&gt;
  &lt;/a&gt;
  Next.js
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DN0MheIZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ba6eks8ybauab09oxhmj.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DN0MheIZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ba6eks8ybauab09oxhmj.jpeg" alt="Next.js" width="650" height="366"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="//Next.js"&gt;Next.js&lt;/a&gt;&lt;/strong&gt; is an open-source development framework built on top of Node.js enabling React based web applications functionalities such as server-side rendering and generating static websites.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#typescript"&gt;
  &lt;/a&gt;
  Typescript
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7C1rk-C9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tw3xhib6y8x0qdm7fmof.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7C1rk-C9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tw3xhib6y8x0qdm7fmof.png" alt="Typescript" width="880" height="462"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.typescriptlang.org"&gt;TypeScript&lt;/a&gt; is a strongly typed programming language that builds on JavaScript, giving you better tooling at any scale.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;There are more and more technologies out there, and you will use some of them based on your projects needs. Based on my opinion the best skill you should have is the ability to read documentations, because technologies change and gets updated day by day, so as a developer, you never going to stop learning.&lt;/p&gt;

&lt;p&gt;If you want a more detailed roadmaps check out &lt;strong&gt;&lt;a href="https://roadmap.sh"&gt;roadmap.sh&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Emmet Shortcuts You Should Know</title>
      <author>Junaid Shaikh</author>
      <pubDate>Sat, 15 Jan 2022 13:23:54 +0000</pubDate>
      <link>https://dev.to/junaidshaikhjs/emmet-shortcuts-you-should-know-pl2</link>
      <guid>https://dev.to/junaidshaikhjs/emmet-shortcuts-you-should-know-pl2</guid>
      <description>&lt;p&gt;Hey readers  👋&lt;/p&gt;

&lt;p&gt;This is my first post on DEV, I hope you all will love it. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;In this post, we will look at some of the useful Emmet shortcuts. Though there are tons of Emmet shortcuts, we will be looking at major and useful ones. &lt;/p&gt;

&lt;p&gt;Before getting started, what Emmet actually is? As per &lt;a href="https://emmet.io/"&gt;official website&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Emmet is a plugin for many popular text editors which greatly improves HTML &amp;amp; CSS workflow&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That's right. Emmet helps you to improve your HTML and CSS workflow, we will look at how. You have been using Emmet if you are using VS Code ( Duh, who doesn’t use VS Code? )  &lt;/p&gt;

&lt;p&gt;Okay, without further ado, let’s get started. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#html-boilerplate"&gt;
  &lt;/a&gt;
  HTML Boilerplate
&lt;/h2&gt;

&lt;p&gt;You can type ( ! ) and hit enter to get the HTML boilerplate&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oj-ApErT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dzizfreh77tvxy9lzdzb.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oj-ApErT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dzizfreh77tvxy9lzdzb.gif" alt="HTML Boilerplate" width="880" height="330"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The same can be achieved by &lt;code&gt;html:5&lt;/code&gt; but as a developer, we love to type fewer characters.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nesting-operators"&gt;
  &lt;/a&gt;
  Nesting Operators
&lt;/h2&gt;

&lt;p&gt;Nesting operators will help you to generate HTML elements that may be nested or can be placed as a sibling or you can add text and generate numbers too. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#child-gt"&gt;
  &lt;/a&gt;
  Child:  &amp;gt;
&lt;/h3&gt;

&lt;p&gt;The child (&amp;gt;) operator can be used to nest elements inside each other.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;nav&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dQYNllFv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dv8tw2vbkokvc4xh7zd9.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dQYNllFv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dv8tw2vbkokvc4xh7zd9.gif" alt="child operator" width="880" height="330"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sibling-"&gt;
  &lt;/a&gt;
  Sibling:  +
&lt;/h3&gt;

&lt;p&gt;Let’s say you need to place three elements as siblings, use + operator to achieve this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;header&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nt"&gt;main&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nt"&gt;footer&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3L8puDOw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2k0s71iqnwtbv1pq4ujm.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3L8puDOw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2k0s71iqnwtbv1pq4ujm.gif" alt="Sibling Operator" width="880" height="330"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#climb-up-"&gt;
  &lt;/a&gt;
  Climb up:  ^
&lt;/h3&gt;

&lt;p&gt;What if you need to climb one stage up? We are nesting element using child (&amp;gt;) operator but with ( ^ ) operator you can go one step up.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;header+main&amp;gt;section&amp;gt;article^h1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vd_QfzZD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/57qceui9xo31b91bgigs.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vd_QfzZD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/57qceui9xo31b91bgigs.gif" alt="Climb up operator" width="880" height="330"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here we are inserting &lt;code&gt;section&lt;/code&gt; and &lt;code&gt;article&lt;/code&gt; inside of &lt;code&gt;main&lt;/code&gt; but we want to add &lt;code&gt;h1&lt;/code&gt; nested inside the &lt;code&gt;main&lt;/code&gt; and sibling of &lt;code&gt;section&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#multiplication-"&gt;
  &lt;/a&gt;
  Multiplication:  *
&lt;/h3&gt;

&lt;p&gt;My favorite one. Using this operator we can specify how many elements we want.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;ol&amp;gt;li*5
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8Au4Dd7D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mlumlv9vu5yerjjx3trq.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8Au4Dd7D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mlumlv9vu5yerjjx3trq.gif" alt="Multiplication Operator" width="880" height="273"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#grouping-"&gt;
  &lt;/a&gt;
  Grouping: ()
&lt;/h3&gt;

&lt;p&gt;Grouping allows us to create complex markup. It basically considers a group a single element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;header&amp;gt;(nav&amp;gt;ul&amp;gt;li*5)+main+footer
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OKAPyzPp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vyn1rhphdrgqh5uvjuky.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OKAPyzPp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vyn1rhphdrgqh5uvjuky.gif" alt="Grouping Operator" width="880" height="273"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can also multiply the group and it will return the group multiple time&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;dl&amp;gt;(dt+dd)*3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#attribute-operators"&gt;
  &lt;/a&gt;
  Attribute Operators
&lt;/h2&gt;

&lt;p&gt;Emmet allows you to set the attributes for your HTML elements.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#id-and-class"&gt;
  &lt;/a&gt;
  ID and Class
&lt;/h3&gt;

&lt;p&gt;To set the ID on your HTML element use # and for class attribute use dot ( . )&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;div.container&amp;gt;h1#heading 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3JqQrEBW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/21ugidmk1mqx7av45i8l.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3JqQrEBW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/21ugidmk1mqx7av45i8l.gif" alt="Adding ID and Classes" width="880" height="273"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#custom-attributes"&gt;
  &lt;/a&gt;
  Custom Attributes
&lt;/h3&gt;

&lt;p&gt;Just like the attribute selector in CSS, we can use Emmet to set the custom attribute&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;input[type='text']
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P66j3T-D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/alhl5bwo7vz8alahtybc.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P66j3T-D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/alhl5bwo7vz8alahtybc.gif" alt="Custom Attributes" width="880" height="273"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We can specify as many attributes as we want.&lt;/li&gt;
&lt;li&gt;We also don’t need to add value to the attribute, providing only attribute names will generate elements with empty attributes.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#text-"&gt;
  &lt;/a&gt;
  Text - {}
&lt;/h2&gt;

&lt;p&gt;The last shortcut we will be looking at is adding text content in the element. And also the lorem ipsum text generation. &lt;/p&gt;

&lt;p&gt;Use {} to add text and &lt;code&gt;lorem&lt;/code&gt; keyword to add the dummy text&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;p{lorem}

p&amp;gt;lorem10
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y-r2tHk6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3z6q665eu5vihtm0e04y.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y-r2tHk6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3z6q665eu5vihtm0e04y.gif" alt="Text Operator" width="880" height="273"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#css"&gt;
  &lt;/a&gt;
  CSS
&lt;/h2&gt;

&lt;p&gt;Emmet provides a lot of CSS abbreviations to write faster. It will be tiresome to add all of them here.  I will link the cheat sheet at the end of the article. &lt;/p&gt;

&lt;p&gt;Some of the examples of CSS are &lt;code&gt;pos&lt;/code&gt; get converted into &lt;code&gt;position: relative&lt;/code&gt; you can also specify which position value you need like &lt;code&gt;pos:a&lt;/code&gt; it will give &lt;code&gt;position: absolute&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;Similarly, there are shortcuts for margin and padding, border, outline, box-sizing, and so on. &lt;/p&gt;




&lt;p&gt;Awesome! You reached the end of this article. Thank you for taking the time to read this. &lt;/p&gt;

&lt;p&gt;If you liked this article, you will love my tweets. I share useful tips around web development and resources to learn the same. &lt;/p&gt;

&lt;p&gt;You can follow me on &lt;a href="https://twitter.com/junaidshaikh_js"&gt;Twitter&lt;/a&gt; or connect with me on &lt;a href="https://www.linkedin.com/in/junaidshaikhjs/"&gt;LinkedIn&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Here is the &lt;a href="https://docs.emmet.io/cheat-sheet/"&gt;cheatsheet&lt;/a&gt; I was talking about. &lt;/p&gt;

&lt;p&gt;Keep coding 😃&lt;/p&gt;

&lt;p&gt;You can support this article here...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/junaidshaikhjs"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zQj764Ae--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/default-orange.png" alt="Buy Me A Coffee" width="434" height="100"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>vscode</category>
      <category>webdev</category>
      <category>html</category>
    </item>
    <item>
      <title>Nu Shell and Databricks</title>
      <author>Darren Fuller</author>
      <pubDate>Sat, 15 Jan 2022 12:59:57 +0000</pubDate>
      <link>https://dev.to/dazfuller/nu-shell-and-databricks-4eof</link>
      <guid>https://dev.to/dazfuller/nu-shell-and-databricks-4eof</guid>
      <description>&lt;p&gt;I'm a big fan of the command line. It's often something that can seem daunting to people at first, but with a little time and patience you can often speed up many tasks just by knowing some useful commands and how to chain them together.&lt;/p&gt;

&lt;p&gt;Most of the time I'm in Powershell which, thanks to &lt;a href="https://github.com/powershell/powershell"&gt;Powershell Core&lt;/a&gt;, is now cross-platform and incredibly powerful. But I'm finding myself also using &lt;a href="https://www.nushell.sh/"&gt;Nu&lt;/a&gt; more and more. In both shells I also use the &lt;a href="https://docs.databricks.com/dev-tools/cli/index.html"&gt;Databricks CLI&lt;/a&gt; a lot. Want to check the status of jobs? Use the CLI. Want to upload and download data? Use the CLI. And so on.&lt;/p&gt;

&lt;p&gt;Whilst the Databricks CLI is useful, there's times where I want a little more power over it. Such as, using the CLI to find a Databricks runtime version which is under Long Term Support (LTS) and is &lt;a href="https://databricks.com/product/photon"&gt;Photon&lt;/a&gt; enabled. So, I can do this using, for instance, the Databricks CLI and some &lt;a href="https://stedolan.github.io/jq/"&gt;jq&lt;/a&gt;. But I'm also lazy and wanted something that's a bit easier to query, and displays nicer, and is easier to output to something like CSV afterwards.&lt;/p&gt;

&lt;p&gt;Well, I can get all of that from Nushell. The only downside is that it's quite a few commands to get the data into the right shape to make querying it easy. So, instead, lets do the tedious bits and save them as a &lt;a href="https://www.nushell.sh/book/configuration.html"&gt;command aliases&lt;/a&gt;. So, lets fire up Nushell and give it a go.&lt;/p&gt;

&lt;p&gt;First up, lets find our config file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; config path
C:&lt;span class="se"&gt;\U&lt;/span&gt;sers&lt;span class="se"&gt;\D&lt;/span&gt;arrenFuller&lt;span class="se"&gt;\A&lt;/span&gt;ppData&lt;span class="se"&gt;\R&lt;/span&gt;oaming&lt;span class="se"&gt;\n&lt;/span&gt;ushell&lt;span class="se"&gt;\n&lt;/span&gt;u&lt;span class="se"&gt;\c&lt;/span&gt;onfig&lt;span class="se"&gt;\c&lt;/span&gt;onfig.toml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yours will look different to this, but this is the file we need to add our command aliases to.&lt;/p&gt;

&lt;p&gt;Now, lets work out what our command looks like. I want to create a command that calls the Databricks CLI for the runtime versions and adds some useful information such as if it's an LTS version. So what does that look like?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  databricks clusters spark-versions 
    | from json 
    | get versions 
    | insert isLTS &lt;span class="o"&gt;{&lt;/span&gt; get name | str contains &lt;span class="s2"&gt;"LTS"&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; 
    | insert isML &lt;span class="o"&gt;{&lt;/span&gt; get name | str contains &lt;span class="s2"&gt;"ML"&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; 
    | insert photonEnabled &lt;span class="o"&gt;{&lt;/span&gt; get name | str contains &lt;span class="nt"&gt;-i&lt;/span&gt; &lt;span class="s2"&gt;"Photon"&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
    | insert details &lt;span class="o"&gt;{&lt;/span&gt; get name | parse &lt;span class="s2"&gt;"{runtime} (includes Apache Spark {spark},{remainder}"&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
    | insert runtime &lt;span class="o"&gt;{&lt;/span&gt; get details.runtime &lt;span class="o"&gt;}&lt;/span&gt; 
    | insert spark &lt;span class="o"&gt;{&lt;/span&gt; get details.spark &lt;span class="o"&gt;}&lt;/span&gt;
    | reject details
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I've put that over multiple lines to make it easier to read, but if you want to run it you'll need to have it all on the same line, like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; databricks clusters spark-versions | from json | get versions | insert isLTS &lt;span class="o"&gt;{&lt;/span&gt; get name | str contains &lt;span class="s2"&gt;"LTS"&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; | insert isML &lt;span class="o"&gt;{&lt;/span&gt; get name | str contains &lt;span class="s2"&gt;"ML"&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; | insert photonEnabled &lt;span class="o"&gt;{&lt;/span&gt; get name | str contains &lt;span class="nt"&gt;-i&lt;/span&gt; &lt;span class="s2"&gt;"Photon"&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; | insert details &lt;span class="o"&gt;{&lt;/span&gt; get name | parse &lt;span class="s2"&gt;"{runtime} (includes Apache Spark {spark},{remainder}"&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; | insert runtime &lt;span class="o"&gt;{&lt;/span&gt; get details.runtime &lt;span class="o"&gt;}&lt;/span&gt; | insert spark &lt;span class="o"&gt;{&lt;/span&gt; get details.spark &lt;span class="o"&gt;}&lt;/span&gt; | reject details
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So what's it doing? Lets break it down a bit.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;command&lt;/th&gt;
&lt;th&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;databricks clusters spark-versions&lt;/td&gt;
&lt;td&gt;Run the Databricks CLI to get the available runtime information&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;from json&lt;/td&gt;
&lt;td&gt;Parses the response from JSON as a table&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;get versions&lt;/td&gt;
&lt;td&gt;Gets the "version" part of the response object&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;insert isLTS { get name&lt;/td&gt;
&lt;td&gt;str contains "LTS" }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;insert isML { get name&lt;/td&gt;
&lt;td&gt;str contains "ML" }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;insert photonEnabled { get name&lt;/td&gt;
&lt;td&gt;str contains -i "Photon"&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;insert details { get name&lt;/td&gt;
&lt;td&gt;parse "{runtime} (includes Apache Spark {spark},{remainder}"&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;insert runtime { get details.runtime }&lt;/td&gt;
&lt;td&gt;Adds a new "runtime" column by getting the runtime information from the details column&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;insert spark { get details.spark }&lt;/td&gt;
&lt;td&gt;Adds a new "spark" column by getting the spark version information from the details column&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;reject detail&lt;/td&gt;
&lt;td&gt;Removes the "details" column&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;That's a lot of commands to run each time, so lets instead save this as a command alias in our config file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight toml"&gt;&lt;code&gt;&lt;span class="py"&gt;startup&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s"&gt;"alias dbx-runtimes = ( databricks clusters spark-versions | from json | get versions | insert isLTS { get name | str contains &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s"&gt;LTS&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s"&gt; } | insert isML { get name | str contains &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s"&gt;ML&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s"&gt; } | insert photonEnabled { get name | str contains -i &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s"&gt;Photon&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s"&gt; } | insert details { get name | parse &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s"&gt;{runtime} (includes Apache Spark {spark},{remainder}&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s"&gt; } | insert runtime { get details.runtime } | insert spark { get details.spark } | reject details )"&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here I've aliased the command with the name &lt;code&gt;dbx-runtimes&lt;/code&gt;. I've also had to escape the double-quotation marks. But now that we have this we can run all of the above by simply calling the alias.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; dbx-runtimes
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;────┬──────────────────────────────────┬────────────────────────────────────────────────────────────────────┬───────┬───────┬───────────────┬────────────────────────────┬───────
 #  │               key                │                                name                                │ isLTS │ isML  │ photonEnabled │          runtime           │ spark
────┼──────────────────────────────────┼────────────────────────────────────────────────────────────────────┼───────┼───────┼───────────────┼────────────────────────────┼───────
  0 │ 6.4.x-esr-scala2.11              │ 6.4 Extended Support (includes Apache Spark 2.4.5, Scala 2.11)     │ false │ false │ false         │ 6.4 Extended Support       │ 2.4.5
  1 │ 7.3.x-cpu-ml-scala2.12           │ 7.3 LTS ML (includes Apache Spark 3.0.1, Scala 2.12)               │ true  │ true  │ false         │ 7.3 LTS ML                 │ 3.0.1
  2 │ 7.3.x-hls-scala2.12              │ 7.3 LTS Genomics (includes Apache Spark 3.0.1, Scala 2.12)         │ true  │ false │ false         │ 7.3 LTS Genomics           │ 3.0.1
  3 │ 10.2.x-gpu-ml-scala2.12          │ 10.2 ML (includes Apache Spark 3.2.0, GPU, Scala 2.12)             │ false │ true  │ false         │ 10.2 ML                    │ 3.2.0
  4 │ 7.3.x-gpu-ml-scala2.12           │ 7.3 LTS ML (includes Apache Spark 3.0.1, GPU, Scala 2.12)          │ true  │ true  │ false         │ 7.3 LTS ML                 │ 3.0.1
  5 │ 8.4.x-photon-scala2.12           │ 8.4 Photon (includes Apache Spark 3.1.2, Scala 2.12)               │ false │ false │ true          │ 8.4 Photon                 │ 3.1.2
  6 │ 10.1.x-photon-scala2.12          │ 10.1 Photon (includes Apache Spark 3.2.0, Scala 2.12)              │ false │ false │ true          │ 10.1 Photon                │ 3.2.0
  7 │ 9.1.x-photon-scala2.12           │ 9.1 LTS Photon (includes Apache Spark 3.1.2, Scala 2.12)           │ true  │ false │ true          │ 9.1 LTS Photon             │ 3.1.2
  8 │ 10.2.x-photon-scala2.12          │ 10.2 Photon (includes Apache Spark 3.2.0, Scala 2.12)              │ false │ false │ true          │ 10.2 Photon                │ 3.2.0
  9 │ 8.3.x-scala2.12                  │ 8.3 (includes Apache Spark 3.1.1, Scala 2.12)                      │ false │ false │ false         │ 8.3                        │ 3.1.1
 10 │ 9.0.x-photon-scala2.12           │ 9.0 Photon (includes Apache Spark 3.1.2, Scala 2.12)               │ false │ false │ true          │ 9.0 Photon                 │ 3.1.2
 11 │ 8.4.x-cpu-ml-scala2.12           │ 8.4 ML (includes Apache Spark 3.1.2, Scala 2.12)                   │ false │ true  │ false         │ 8.4 ML                     │ 3.1.2
 12 │ 10.1.x-gpu-ml-scala2.12          │ 10.1 ML (includes Apache Spark 3.2.0, GPU, Scala 2.12)             │ false │ true  │ false         │ 10.1 ML                    │ 3.2.0
 13 │ 9.1.x-scala2.12                  │ 9.1 LTS (includes Apache Spark 3.1.2, Scala 2.12)                  │ true  │ false │ false         │ 9.1 LTS                    │ 3.1.2
 14 │ 10.0.x-cpu-ml-scala2.12          │ 10.0 ML (includes Apache Spark 3.2.0, Scala 2.12)                  │ false │ true  │ false         │ 10.0 ML                    │ 3.2.0
 15 │ 9.0.x-gpu-ml-scala2.12           │ 9.0 ML (includes Apache Spark 3.1.2, GPU, Scala 2.12)              │ false │ true  │ false         │ 9.0 ML                     │ 3.1.2
 16 │ 9.0.x-scala2.12                  │ 9.0 (includes Apache Spark 3.1.2, Scala 2.12)                      │ false │ false │ false         │ 9.0                        │ 3.1.2
 17 │ 8.3.x-cpu-ml-scala2.12           │ 8.3 ML (includes Apache Spark 3.1.1, Scala 2.12)                   │ false │ true  │ false         │ 8.3 ML                     │ 3.1.1
 18 │ 10.1.x-cpu-ml-scala2.12          │ 10.1 ML (includes Apache Spark 3.2.0, Scala 2.12)                  │ false │ true  │ false         │ 10.1 ML                    │ 3.2.0
 19 │ 10.0.x-scala2.12                 │ 10.0 (includes Apache Spark 3.2.0, Scala 2.12)                     │ false │ false │ false         │ 10.0                       │ 3.2.0
 20 │ apache-spark-2.4.x-esr-scala2.11 │ Light 2.4 Extended Support (includes Apache Spark 2.4, Scala 2.11) │ false │ false │ false         │ Light 2.4 Extended Support │ 2.4
 21 │ 10.1.x-scala2.12                 │ 10.1 (includes Apache Spark 3.2.0, Scala 2.12)                     │ false │ false │ false         │ 10.1                       │ 3.2.0
 22 │ 9.1.x-cpu-ml-scala2.12           │ 9.1 LTS ML (includes Apache Spark 3.1.2, Scala 2.12)               │ true  │ true  │ false         │ 9.1 LTS ML                 │ 3.1.2
 23 │ 10.2.x-scala2.12                 │ 10.2 (includes Apache Spark 3.2.0, Scala 2.12)                     │ false │ false │ false         │ 10.2                       │ 3.2.0
 24 │ 10.2.x-cpu-ml-scala2.12          │ 10.2 ML (includes Apache Spark 3.2.0, Scala 2.12)                  │ false │ true  │ false         │ 10.2 ML                    │ 3.2.0
 25 │ 8.3.x-photon-scala2.12           │ 8.3 Photon (includes Apache Spark 3.1.1, Scala 2.12)               │ false │ false │ true          │ 8.3 Photon                 │ 3.1.1
 26 │ 10.0.x-photon-scala2.12          │ 10.0 Photon (includes Apache Spark 3.2.0, Scala 2.12)              │ false │ false │ true          │ 10.0 Photon                │ 3.2.0
 27 │ 10.0.x-gpu-ml-scala2.12          │ 10.0 ML (includes Apache Spark 3.2.0, GPU, Scala 2.12)             │ false │ true  │ false         │ 10.0 ML                    │ 3.2.0
 28 │ 8.4.x-scala2.12                  │ 8.4 (includes Apache Spark 3.1.2, Scala 2.12)                      │ false │ false │ false         │ 8.4                        │ 3.1.2
 29 │ 9.1.x-gpu-ml-scala2.12           │ 9.1 LTS ML (includes Apache Spark 3.1.2, GPU, Scala 2.12)          │ true  │ true  │ false         │ 9.1 LTS ML                 │ 3.1.2
 30 │ apache-spark-2.4.x-scala2.11     │ Light 2.4 (includes Apache Spark 2.4, Scala 2.11)                  │ false │ false │ false         │ Light 2.4                  │ 2.4
 31 │ 7.3.x-scala2.12                  │ 7.3 LTS (includes Apache Spark 3.0.1, Scala 2.12)                  │ true  │ false │ false         │ 7.3 LTS                    │ 3.0.1
 32 │ 8.4.x-gpu-ml-scala2.12           │ 8.4 ML (includes Apache Spark 3.1.2, GPU, Scala 2.12)              │ false │ true  │ false         │ 8.4 ML                     │ 3.1.2
 33 │ 9.0.x-cpu-ml-scala2.12           │ 9.0 ML (includes Apache Spark 3.1.2, Scala 2.12)                   │ false │ true  │ false         │ 9.0 ML                     │ 3.1.2
 34 │ 8.3.x-gpu-ml-scala2.12           │ 8.3 ML (includes Apache Spark 3.1.1, GPU, Scala 2.12)              │ false │ true  │ false         │ 8.3 ML                     │ 3.1.1
────┴──────────────────────────────────┴────────────────────────────────────────────────────────────────────┴───────┴───────┴───────────────┴────────────────────────────┴───────
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Your output might look different depending on when you run the command.&lt;/p&gt;

&lt;p&gt;But from this we can now start adding in some filters to get to the records we want. So if I want to find all of the runtimes which are Long Term Support but aren't ML instances I can do the following.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; dbx-runtimes | where isLTS | where isML &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nv"&gt;$false&lt;/span&gt; | sort-by key
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;───┬────────────────────────┬────────────────────────────────────────────────────────────┬───────┬───────┬───────────────┬──────────────────┬───────
 # │          key           │                            name                            │ isLTS │ isML  │ photonEnabled │     runtime      │ spark
───┼────────────────────────┼────────────────────────────────────────────────────────────┼───────┼───────┼───────────────┼──────────────────┼───────
 0 │ 7.3.x-hls-scala2.12    │ 7.3 LTS Genomics (includes Apache Spark 3.0.1, Scala 2.12) │ true  │ false │ false         │ 7.3 LTS Genomics │ 3.0.1
 1 │ 7.3.x-scala2.12        │ 7.3 LTS (includes Apache Spark 3.0.1, Scala 2.12)          │ true  │ false │ false         │ 7.3 LTS          │ 3.0.1
 2 │ 9.1.x-photon-scala2.12 │ 9.1 LTS Photon (includes Apache Spark 3.1.2, Scala 2.12)   │ true  │ false │ true          │ 9.1 LTS Photon   │ 3.1.2
 3 │ 9.1.x-scala2.12        │ 9.1 LTS (includes Apache Spark 3.1.2, Scala 2.12)          │ true  │ false │ false         │ 9.1 LTS          │ 3.1.2
───┴────────────────────────┴────────────────────────────────────────────────────────────┴───────┴───────┴───────────────┴──────────────────┴───────
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A lot simpler to read, and very easy to now work with. And if I want to save the results I could just add &lt;code&gt;| save runtimes.csv&lt;/code&gt; and I'll have a csv with the same data in it.&lt;/p&gt;

&lt;p&gt;I've done the same with the Databricks cluster node types as well, though that is a lot less complex than the above one, but it makes being able to query for the information a lot simpler. And with Nushell providing great features for filtering, displaying, and getting data, it's a smooth and easy workflow. &lt;/p&gt;

</description>
      <category>nushell</category>
      <category>databricks</category>
      <category>commandline</category>
      <category>nu</category>
    </item>
    <item>
      <title>How to Commit like a Boss</title>
      <author>Gourav Singh Rawat</author>
      <pubDate>Sat, 15 Jan 2022 12:39:03 +0000</pubDate>
      <link>https://dev.to/seek4samurai/how-to-commit-like-a-boss-jf0</link>
      <guid>https://dev.to/seek4samurai/how-to-commit-like-a-boss-jf0</guid>
      <description>&lt;h2&gt;
  &lt;a href="#whats-committing-anyways"&gt;
  &lt;/a&gt;
  What's Committing anyways?
&lt;/h2&gt;

&lt;p&gt;Well committing in here refers to staging up the changes that you make in your local machine and far from this pushing it to the branch where other teammates can get themselves update with what you've done in project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-is-it-to-learn-committing-cant-you-commit-just-right-away"&gt;
  &lt;/a&gt;
  Why is it to learn committing, can't you commit just right away?
&lt;/h2&gt;

&lt;p&gt;No, talking about myself I generally work on different projects almost daily. And which lead to change in programming environment.&lt;br&gt;
By this I mean like if you're working on some project and commits some changes with some message that might not be very descriptive and you switch to some other work.&lt;/p&gt;

&lt;p&gt;When you return back to the older project to work on it again, you might need to get familiar with what you did last time and what changes have already been made by your teammates(if you have any :P) before you actually start to work.&lt;/p&gt;

&lt;p&gt;This leads to confusion and reduced in degree of DRY rule.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-right-way-to-commitcommunication"&gt;
  &lt;/a&gt;
  The right way to commit/communication
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Commenting as you work&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When you're doing some work on a project make sure you place comments on what these lines of code do. This slowly but surely increases the productivity of you and your team when they return to work, as it reminds the programmer about things rather than understanding them him/herself.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Writing less but more&lt;/strong&gt;&lt;br&gt;
Writing a message during your commit gives idea about what this commit does and contributes to. So, giving a write message counts +1 towards productivity.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-not-to-do"&gt;
  &lt;/a&gt;
  What not to do
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Don't commit after every changes&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It's recommended that you commit once you're sure you'd commit your work. Completing a section of work and doing commits in order always benefits.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don't write weird and non-sense messages&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Committing a small yet informative message is necessary. It doesn't have to be a whole novel.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git commit -m "today i changed some theme colors and added few of mine because your colors suck I fkin hated them so i got rid of them. Apart from this I also added a Palette section it's was a hell lot of work i better get a raise :P"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Instead&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git commit -m "added Palette section &amp;amp; few theme changes"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Hope you find this informative.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>beginners</category>
      <category>productivity</category>
      <category>github</category>
    </item>
    <item>
      <title>Is random() really random ?</title>
      <author>Prakhar Tandon</author>
      <pubDate>Sat, 15 Jan 2022 12:16:04 +0000</pubDate>
      <link>https://dev.to/prakhart111/are-random-really-random--23if</link>
      <guid>https://dev.to/prakhart111/are-random-really-random--23if</guid>
      <description>&lt;p&gt;Okay I admit, I am obsessed with all this "random" concept, my third article on this at dev community.&lt;br&gt;
 As we all know, computers are dumb machines, they just follow some algorithms, steps programmer tells them to do. So how can a computer randomly generate a number then? And even more importantly, on what basis we say something is actually random? &lt;br&gt;
 I spent this week researching over these questions that arose in my mind, and this article will be kind-of summary about that. So follow me for more of such content and connect with me on Twitter as well! (&lt;em&gt;self endorsement is important&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;So first let's dive into the basic stuff. We all must have used &lt;code&gt;Math.random()&lt;/code&gt; in JavaScript or &lt;code&gt;srand()&lt;/code&gt; and &lt;code&gt;rand()&lt;/code&gt; in C++ and similar counter-parts in all other languages. So how do they really work ?&lt;/p&gt;

&lt;p&gt;These functions use some pre-defined algorithms to generate a random number. And as you might have got the question, "if it's predefined procedure, then how can it be really random ?"&lt;br&gt;
Well yes, they aren't &lt;strong&gt;TRULY Random&lt;/strong&gt;, they are called &lt;strong&gt;PSUEDO Random Number Generators&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If you want to dive deep into the algorithms of the same, here is one : &lt;a href="https://en.wikipedia.org/wiki/Linear_congruential_generator"&gt;Linear congruential generator&lt;/a&gt;&lt;br&gt;
 The method represents one of the oldest and best-known pseudo random number generator algorithms.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Also if you want me to write over these algorithms in simple words, do let me know in the comment section or my Twitter:)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So lets get back to our point, then how can we generate Truly Random number?&lt;br&gt;
 And even before this, why we actually need one? What’s the purpose of all this True Random thing ?&lt;/p&gt;

&lt;p&gt;Well, randomness has a lot of applications in real life. Say for instance you are making a Dice game as your project, you will need a random() to generate a number in the dice. In previous times and still in general purposes, things such as a coin flip or a dice are supposed to be random or say fair for all parties involved. But is it really ?&lt;/p&gt;

&lt;p&gt;Let’s have a look at Physics behind a coin flip. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;There are multiple factors on which the result of coin flip may depend -&lt;br&gt;
1) Which face is currently at the top&lt;br&gt;
2) The weight distribution of the coin&lt;br&gt;
3) The angular velocity and torque provided while flipping&lt;br&gt;
4) The linear velocity and acceleration&lt;br&gt;
5) Air density, pressure, humidity, air speed.&lt;br&gt;
6) The friction coefficient of the floor where the coin lands and so on !!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There dozens of such factors involved in a simple coin flip, which makes it difficult to predict or manipulate the result, but it’s difficult, not Impossible ! &lt;/p&gt;

&lt;p&gt;Here’s an news article about that : &lt;a href="https://www.newscientist.com/article/dn1748-euro-coin-accused-of-unfair-flipping/?ignored=irrelevant"&gt;Euro coin accused of unfair flipping&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What makes such things feel random to us is the complexities involved, which are difficult for a normal person to solve.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;And another very major and important application of randomness is Cryptography!&lt;br&gt;
I will cover this one in my next article ( Link coming soon )&lt;br&gt;
&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;OKAY so just answer the question! How can we get Truly Random Numbers !!&lt;/p&gt;

&lt;p&gt;Simple answer is &lt;strong&gt;“EXTERNAL ENTROPY”&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;So, what’s entropy? Entropy is the measurement of uncertainty or disorder in a system. Good entropy comes from the surrounding environment which is unpredictable and chaotic. You can think of entropy as the amount of surprise found in the result of a randomised process: the higher the entropy, the lesser is the certainty found in the result.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Atmospheric noise, cosmic radiations, quantum particles are currently the best physical ways to do so.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In computing, a hardware random number generator (HRNG) or true random number generator (TRNG) is a device that generates random numbers from a physical process, rather than by means of an algorithm. Such devices are often based on microscopic phenomena that generate low-level, statistically random "noise" signals, such as thermal noise, the photoelectric effect, involving a beam splitter, and other quantum phenomena.&lt;/p&gt;

&lt;p&gt;Again even these phenomenons are not 100% Truly Random ( this is debatable though ), but the thousands of factors involved in their calculations make them almost impossible to predict. For measuring these factors, we require external specialised hardware for the same.&lt;/p&gt;

&lt;p&gt;You can have a look at RANDOM.ORG that claims to offers true random numbers to anyone on the Internet. The randomness comes from atmospheric noise, which for many purposes is better than the pseudo-random number algorithms typically used in computer programs.&lt;br&gt;
Here’s the link : &lt;a href="https://random.org"&gt;https://random.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are some other methods as well like mouse movements, delay between keyboard presses etc.&lt;br&gt;
You can also have a look at these generators, who claim to be Truly random :&lt;br&gt;
The following (non-exhaustive) list of websites claim to provide random numbers generated from a truly random source&lt;/p&gt;

&lt;p&gt;1) Australian National University :  QRNG( quantum random number generator ) : &lt;a href="https://qrng.anu.edu.au/"&gt;https://qrng.anu.edu.au/&lt;/a&gt;&lt;br&gt;
2) Humboldt University of Berlin : QRNG( quantum random number generator ) :&lt;br&gt;
&lt;a href="https://qrng.physik.hu-berlin.de/"&gt;https://qrng.physik.hu-berlin.de/&lt;/a&gt;&lt;br&gt;
3) HotBits : Generated by radioactive decay :&lt;br&gt;
&lt;a href="https://www.fourmilab.ch/hotbits/"&gt;https://www.fourmilab.ch/hotbits/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can read about the theory behind their generators on their websites, I am not including those here, as it will make this article quite complicated ( it might be already for some of you ).&lt;/p&gt;

&lt;p&gt;Thanks for your patience !&lt;br&gt;
If you found this article useful, Share this !&lt;br&gt;
It took a lot of time and efforts for this one, and yes, this topic isn’t done yet, stay tuned for the next  article on this series, that will focus on Cryptographic aspect of randomness.&lt;/p&gt;

&lt;p&gt;Connect With Me :&lt;br&gt;
&lt;a href="https://twitter.com/PrakharTandon29"&gt;Twitter&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/prakhart111"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And recently as a hobbie, I have started photography, you can have a look at that here :&lt;br&gt;
&lt;a href="https://instagram.com/official.prakhart"&gt;Instagram&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>22+ FREE JavaScript eBooks you should read</title>
      <author>devdefinitive</author>
      <pubDate>Sat, 15 Jan 2022 12:09:36 +0000</pubDate>
      <link>https://dev.to/devdefinitive/22-free-javascript-ebooks-you-should-read-55g</link>
      <guid>https://dev.to/devdefinitive/22-free-javascript-ebooks-you-should-read-55g</guid>
      <description>&lt;p&gt;JavaScript is a  programming language that permits you to carry out complex highlights on website pages — each time a site page accomplishes something beyond stay there and show static data for you to take a gander at — showing convenient substance refreshes, intuitive guides and so on — you can wager that JavaScript is presumably included. It is the third layer of the layer of standard web innovations, two of which (HTML and CSS).&lt;/p&gt;

&lt;p&gt;Let's look into 23 JavaScript eBooks. &lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#a-tiny-introduction-to-javascript-with-exercises-and-puzzles"&gt;
  &lt;/a&gt;
  &lt;a href="https://gumroad.com/l/eARLn"&gt;A Tiny Introduction to JavaScript with Exercises and Puzzles&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Join Matthew MacDonald, author of too-many-tech-books-to-count, as he enters the world of JavaScript—accompanied by friendly ninjas, cheating goblins, and at least one rude wizard. Develop your skills with 35 interactive exercises on CodePen. There's no setup required (a web browser is all you need).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#single-page-in-depth"&gt;
  &lt;/a&gt;
  &lt;a href="http://singlepageappbook.com/"&gt;Single page in depth&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;JavaScript eBook mostly focusing on design patterns. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#js-for-cats"&gt;
  &lt;/a&gt;
  &lt;a href="http://jsforcats.com/"&gt;JS For Cats&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;JavaScript introduction for Cats. Actually for humans😂 if you can understand the cat talk. Just kidding this is amazing. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#impatient-js"&gt;
  &lt;/a&gt;
  &lt;a href="https://exploringjs.com/impatient-js/index.html"&gt;Impatient JS&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cwbEDD7J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://exploringjs.com/impatient-js/img-homepage/cover-homepage.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cwbEDD7J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://exploringjs.com/impatient-js/img-homepage/cover-homepage.jpg" alt="" width="525" height="750"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This book makes JavaScript less challenging to learn for newcomers, by offering a modern view that is as consistent as possible.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#deep-javascript"&gt;
  &lt;/a&gt;
  &lt;a href="https://exploringjs.com/deep-js/index.html"&gt;Deep JavaScript&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f25wY5yG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://exploringjs.com/deep-js/img-homepage/cover-homepage.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f25wY5yG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://exploringjs.com/deep-js/img-homepage/cover-homepage.jpg" alt=" " width="525" height="750"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This book dives deeply into JavaScript. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#coffeescript-cookbook"&gt;
  &lt;/a&gt;
  &lt;a href="https://coffeescript-cookbook.github.io/"&gt;CoffeeScript Cookbook&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;CoffeeScript Recipes, Examples and Tutorials by Community to Community. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#exploring-es2016-and-es2017"&gt;
  &lt;/a&gt;
  &lt;a href="https://exploringjs.com/es2016-es2017/index.html"&gt;Exploring ES2016 and ES2017&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Covers what’s new in ECMAScript 2016 and ECMAScript 2017. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#typescript-succintly"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.syncfusion.com/succinctly-free-ebooks/typescript"&gt;TypeScript Succintly&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;The broad appropriation of JavaScript for application advancement, and the capacity to utilize HTML and JavaScript to make Windows Store applications, has made JavaScript an indispensable piece of the Windows improvement biological system. Microsoft has accomplished broad work to make JavaScript simpler to utilize. Microsoft's TypeScript expands numerous recognizable highlights of .NET programming to JavaScript. &lt;/p&gt;

&lt;p&gt;With TypeScript Succinctly by Steve Fenton, you will figure out how TypeScript gives discretionary static composing and classes to JavaScript advancement, how to make and load modules, and how to work with existing JavaScript libraries through encompassing affirmations. TypeScript is even altogether incorporated with Visual Studio to give the autocompletion and type checking you are generally alright with.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#javascript-succintly"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.syncfusion.com/succinctly-free-ebooks/javascript"&gt;JavaScript Succintly&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;JavaScript Succinctly was composed to give perusers an exact, brief assessment of JavaScript objects and their supporting subtleties, like complex qualities, crude qualities, scope, legacy, the head item, and that's just the beginning. In case you're a transitional JavaScript designer and need to cement your comprehension of the language, or on the off chance that you've just utilized JavaScript underneath the mantle of libraries like jQuery or Prototype, this is the book for you.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-javascript-beginners-handbook"&gt;
  &lt;/a&gt;
  &lt;a href="https://flaviocopes.com/page/javascript-handbook/"&gt;The JavaScript Beginner's Handbook&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_FpWn4AI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d33wubrfki0l68.cloudfront.net/1b52390784d6cedf3b7c0046f6ba317ad574cdcb/fd59c/img/book-javascript.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_FpWn4AI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d33wubrfki0l68.cloudfront.net/1b52390784d6cedf3b7c0046f6ba317ad574cdcb/fd59c/img/book-javascript.png" alt="" width="880" height="647"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;JavaScript handook written for beginner who have completed learning CSS. This eBook goes zero to intermediate. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#speaking-javascript"&gt;
  &lt;/a&gt;
  &lt;a href="http://speakingjs.com/es5/"&gt;Speaking JavaScript&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;This is a book for software engineers who are committed to JavaScript and furthermore for the individuals who are beginning their profession at amateur JavaScript getting the hang of (counting moderate level). This book is an astounding asset, reference and furthermore goes about as a Handbook ! &lt;/p&gt;

&lt;p&gt;I would prescribe this any individual who needs to take in JavaScript from the scratch and furthermore the individuals who are now in the JavaScript Development Field. This book is compact and point by point clarifying everything from base. Notwithstanding, do observe that this book does exclude ES 6 module and Node.js. This book is just for JavaScript gaining from the center.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#javascript-the-right-way"&gt;
  &lt;/a&gt;
  &lt;a href="http://jstherightway.org/"&gt;JavaScript the right way&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;This is an aide proposed to acquaint new designers with JavaScript and assist experienced engineers with learning its accepted procedures. &lt;/p&gt;

&lt;p&gt;In spite of the name, this aide doesn't really signify "the lone way" to do JavaScript. &lt;/p&gt;

&lt;p&gt;We simply accumulate every one of the articles, tips, and deceives from top engineers and put it here. Since it comes from uncommon people, we could say that it is "the correct way", or the most ideal approach to do as such.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#javascript-es2015-enlightenment"&gt;
  &lt;/a&gt;
  &lt;a href="https://frontendmasters.com/books/javascript-enlightenment/"&gt;JavaScript (ES2015+) Enlightenment&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;The substance of this book are for designers who are working in a codebase utilizing present day React, Vue, or Angular code and discover ongoing JavaScript language refreshes/proposition to cause an excessive amount of indirection. As well as, designers who need to bore into memory the most recent and most ordinarily utilized JavaScript refreshes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#d3-tips-and-tricks"&gt;
  &lt;/a&gt;
  &lt;a href="https://leanpub.com/D3-Tips-and-Tricks/read"&gt;D3 tips and tricks&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;More then 400+ pages comprising of D3 tips and tricks. D3.js is JavaScript library for producing dynamic, interactive data visualizations in web browsers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#javascript-garden"&gt;
  &lt;/a&gt;
  &lt;a href="https://bonsaiden.github.io/JavaScript-Garden/"&gt;JavaScript garden&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;JavaScript Garden is a developing assortment of documentation about the most particular pieces of the JavaScript programming language. It offers guidance to stay away from basic errors and inconspicuous bugs, just as execution issues and terrible practices, that non-master JavaScript developers may experience on their undertakings into the profundities of the language. &lt;/p&gt;

&lt;p&gt;JavaScript Garden doesn't intend to show you JavaScript. Previous information on the language is emphatically prescribed to comprehend the themes canvassed in this aide. To become familiar with the nuts and bolts of the language, if it's not too much trouble, head over to the great aide on the Mozilla Developer Network.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#modular-javascript"&gt;
  &lt;/a&gt;
  &lt;a href="https://addyosmani.com/writing-modular-js/"&gt;Modular JavaScript&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;In this article Addy Osmani has shown 3 formats to write modular JavaScript. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#js-in-10mins"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/spencertipping/js-in-ten-minutes"&gt;JS IN 10mins&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;A quick intro to JavaScript advance only if you know basics of JavaScript. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#jquery-succinctlyhttpswwwsyncfusioncomsuccinctlyfreeebooksjquery"&gt;
  &lt;/a&gt;
  [jQuery Succinctly](&lt;a href="https://www.syncfusion.com/succinctly-free-ebooks/jquery"&gt;https://www.syncfusion.com/succinctly-free-ebooks/jquery&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;jQuery Succinctly was kept in touch with express, quite expeditiously, the ideas vital for middle and progressed jQuery advancement. Its motivation is to impart in you, the peruser, rehearses that jQuery engineers take as normal information. Every section contains ideas fundamental to turning into a prepared jQuery engineer.)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#human-javascript"&gt;
  &lt;/a&gt;
  &lt;a href="http://read.humanjavascript.com/ch01-introduction.html"&gt;Human JavaScript&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;You can find out about JavaScript, the language, somewhere else. Its great parts, terrible parts, and revolting parts are all around archived. This is a book about a particular arrangement of devices, examples, and approaches that we feel are enhanced for individuals. These methodologies empower our group to rapidly assemble and convey excellent JavaScript applications for people.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#javascript-challenges-ebook"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/tcorral/javascript-challenges-book"&gt;JavaScript Challenges eBook&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Challenge yourself learning and understanding the most obscure and tricky parts of Javascript. This book will provoke you to learn and comprehend the most dark and interesting pieces of Javascript. &lt;/p&gt;

&lt;p&gt;To play out all that that you would  be able to prescribe you not to swindle investigating arrangements before you propose one.  This book can be utilized as a learning asset for Javascript preparing on the off chance that you need, however if it's not too much trouble, send a tweet prescribing us to others.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ydkjs"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/getify/You-Dont-Know-JS"&gt;YDKJS&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;A book series on JavaScript. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#eloquent-javascript"&gt;
  &lt;/a&gt;
  &lt;a href="https://eloquentjavascript.net/"&gt;Eloquent JavaScript&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RQ0ItrPF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://eloquentjavascript.net/img/cover.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RQ0ItrPF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://eloquentjavascript.net/img/cover.jpg" alt="" width="465" height="640"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This book is exceptional in that it begins with JavaScript as a programming language, and keeps digging further a lot into how the language functions - however without addressing the program model until a few sections in. It comes at JavaScript absolutely as a programming language first, then, at that point getting into its uses (which incorporate program programming) later. &lt;/p&gt;

&lt;p&gt;The writer composes conversationally, and clarifies ideas exhaustively, yet in addition in a way that bode well without utilizing specialized language (or if there is specialized language, that is clarified too). I was searching for a book that I could prescribe to first time JavaScript software engineers, and this is has become the book that best the rundown.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tackling-ts"&gt;
  &lt;/a&gt;
  &lt;a href="https://exploringjs.com/tackling-ts/index.html"&gt;Tackling TS&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H6nEpNIB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://exploringjs.com/tackling-ts/img-homepage/cover-homepage.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H6nEpNIB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://exploringjs.com/tackling-ts/img-homepage/cover-homepage.jpg" alt=" " width="525" height="750"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Part 1 is a quick start for TypeScript that teaches you the essentials quickly.&lt;br&gt;
Part 2 digs deeper into the language and covers many important topics in detail.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#background-remover"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.slazzer.com/"&gt;Background Remover&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j_3z8uRn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640235351891/N3ezG4pNk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j_3z8uRn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640235351891/N3ezG4pNk.png" alt="frame_generic_dark.png" width="880" height="466"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Slazzer is an AI-based photograph editing application that can without much of a stretch eliminate or change the foundation in your pictures. This instrument is not difficult to utilize and is great for online advertisers who routinely manage photographs and are hoping to save time, cash, and exertion.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Key Features&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Utilizing this tool is speedy and simple as you don't need to manually edit the photograph while eliminating or changing the foundation. One more beneficial thing here is that the entire course of background editing essentially begins with transferring a picture and sitting tight for a couple of moments just to get the moment result.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pricing&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Paid plan starts at $13 per month for 100 credits. The free version offers low-resolution images.**&lt;/p&gt;




&lt;p&gt;Thanks for looking into Resources. Hope you love it. Please share with the community thanks🚀&lt;/p&gt;

&lt;p&gt;Credits: &lt;/p&gt;

&lt;p&gt;For images -&amp;gt; Their respective websites &lt;br&gt;&lt;br&gt;
For some content -&amp;gt; Their respective website&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Explicit is better than tricks</title>
      <author>NRF</author>
      <pubDate>Sat, 15 Jan 2022 12:01:25 +0000</pubDate>
      <link>https://dev.to/nrf/explicit-is-better-than-tricks-b5a</link>
      <guid>https://dev.to/nrf/explicit-is-better-than-tricks-b5a</guid>
      <description>&lt;p&gt;When writing code, it is always better to be as explicit as possible instead of going for tricks. This concept is best explained by examples so let's get right into it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-double-bang-logical-not"&gt;
  &lt;/a&gt;
  The double bang !! (logical NOT)
&lt;/h2&gt;

&lt;p&gt;This one is by far the most common "trick" in the JavaScript world. So much so that it is actually taught to developers as they learn about logical operators in JavaScript and can be found in Mozilla's official documentation (MDN). If you wish to obtain a primitive boolean (&lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;) from a non-boolean entity, you can use the logical NOT operator as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;primitiveBoolean&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="nx"&gt;notABoolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If &lt;code&gt;notABoolean&lt;/code&gt; is truthy in the example above, &lt;code&gt;primitiveBoolean&lt;/code&gt; will contain the value &lt;code&gt;true&lt;/code&gt; and if it is falsy, &lt;code&gt;primitiveBoolean&lt;/code&gt; will be &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can get the same results by using the &lt;code&gt;Boolean()&lt;/code&gt; function and get a much more readable version of the code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;primitiveBoolean&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;notABoolean&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Does the double bang way provide any benefit? The correct answer is no, but it does carry the disadvantage of making your code less readable. This trick (like many others) works because of JavaScript's type coercion. Let's look at the spec to see how the logical NOT operator (!) works.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FPsqPUpv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/la7eb8l86r1g5eifu533.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FPsqPUpv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/la7eb8l86r1g5eifu533.png" alt="spec for logical not operator" width="467" height="255"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-logical-not-operator"&gt;Click here&lt;/a&gt; to see the spec's page.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As can be seen, after the expression is evaluated and a final value is obtained, this final value is passed through an algorithm to get the final value's boolean equivalent. This algorithm is represented by &lt;code&gt;ToBoolean()&lt;/code&gt; in the spec and is basically just a series of conditions to determine the boolean equivalent of a value (you can see the exact steps by clicking on &lt;code&gt;ToBoolean&lt;/code&gt; on the spec's page). Once this is done, next step is what the NOT operator is supposed to do: return &lt;code&gt;false&lt;/code&gt; if the evaluated value is &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;true&lt;/code&gt; otherwise. The second NOT operator then inverts this value to finally give the correct result (and we end up with the double bang !!).&lt;/p&gt;

&lt;p&gt;Now let's see how the &lt;code&gt;Boolean()&lt;/code&gt; function works.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iwiP_qFp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/28rnrika1fylzl3exqj1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iwiP_qFp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/28rnrika1fylzl3exqj1.png" alt="spec for boolean function" width="747" height="282"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://tc39.es/ecma262/#sec-boolean-objects"&gt;Click here&lt;/a&gt; to see the spec's page.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So when &lt;code&gt;Boolean()&lt;/code&gt; is called as a function, as opposed to a constructor (i.e. with the &lt;code&gt;new&lt;/code&gt; keyword), it performs a simple type conversion. This type conversion is done using the same algorithm, &lt;code&gt;ToBoolean()&lt;/code&gt;, discussed above.&lt;/p&gt;

&lt;p&gt;In both cases, your code is performing the same task behind the scenes. If anything, the double bang trick has an extra step of inverting the value obtained by the first operation. While using &lt;code&gt;Boolean()&lt;/code&gt; results in a much more elegant and readable code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-unary-operator"&gt;
  &lt;/a&gt;
  The unary + operator
&lt;/h2&gt;

&lt;p&gt;Wish to convert a string representation of a number to an actual number? Just precede it with a &lt;code&gt;+&lt;/code&gt; like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;123&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;myData&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// output: "number"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This gives us even more obscure code than the double bang trick discussed above. Still, this might prove to be controversial as even the MDN docs say that this is the "preferred" method to convert a string to a number. Let's look at the alternative:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;123&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;myData&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// output: "number"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Just as we had used &lt;code&gt;Boolean()&lt;/code&gt; as a function to get a primitive boolean value, we have used &lt;code&gt;Number()&lt;/code&gt; as a function here to convert the string to a number. The details behind the scenes here are exactly the same as before except the fact that instead of &lt;code&gt;ToBoolean&lt;/code&gt;, the algorithm used for type conversion is called &lt;code&gt;ToNumber&lt;/code&gt; in this case.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://tc39.es/ecma262/#sec-unary-plus-operator"&gt;Click here&lt;/a&gt; to see the spec of unary + operator&lt;/p&gt;

&lt;p&gt;&lt;a href="https://tc39.es/ecma262/#sec-number-constructor-number-value"&gt;Click here&lt;/a&gt; to see the spec of &lt;code&gt;Number()&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The MDN docs say that using the unary + operator is the fastest method but the specs tell us a different story. Both &lt;code&gt;+&lt;/code&gt; and &lt;code&gt;Number()&lt;/code&gt; use the exact same algorithm to do the type conversion but the latter results in a much more readable code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-magic-numbers"&gt;
  &lt;/a&gt;
  The magic numbers
&lt;/h2&gt;

&lt;p&gt;This one isn't related to type conversion but is seen relatively frequently. Magic numbers are the use of numbers directly in your code. It is more preferable to declare a well-named variable and assign it the desired value than to use the number directly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Password must be more than 5 characters long&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Considering the code above, a much better approach would be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MIN_PASSWORD_LENGTH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;MIN_PASSWORD_LENGTH&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Password must be more than &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;MIN_PASSWORD_LENGTH&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; characters long`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first and obvious advantage here is that the code is now much more readable. Another potential advantage would be in the case where the same constraint is utilized in multiple places (which happens fairly often). If the constraint later changes, you'll only have to update it at one location.&lt;/p&gt;

&lt;p&gt;If there is a direct number in your code, strongly consider declaring a constant and using it instead. Most of the times this will be the correct approach. Although there are some edge cases where using the number directly might be the preferable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;transactions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// show transactions&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// show msg: "No transactions"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code is perfectly readable and there seems to be no reason to declare a separate variable for the value 0.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;When writing code, readability should be a priority. The tricks/shortcuts usually add no benefit, performance or otherwise, and make the code considerably less readable. So, always go for a more explicit option.&lt;/p&gt;




&lt;p&gt;👉🏻 Subscribe to my newsletter: &lt;a href="https://www.bracketsinstitute.com/newsletter-subscription"&gt;click here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;👉🏻 Follow me on twitter: &lt;a href="https://twitter.com/therealnrf"&gt;click here&lt;/a&gt;&lt;/p&gt;




</description>
      <category>javascript</category>
      <category>programming</category>
      <category>beginners</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Using BoltDB as internal database 💾</title>
      <author>Yusuf Turhan Papurcu</author>
      <pubDate>Sat, 15 Jan 2022 11:30:46 +0000</pubDate>
      <link>https://dev.to/go/using-boltdb-as-internal-database-39bd</link>
      <guid>https://dev.to/go/using-boltdb-as-internal-database-39bd</guid>
      <description>&lt;p&gt;If you are looking for a small database for your fun project, I have something you might like. It is small, works as a key-value store and it's pure go.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-bolt"&gt;
  &lt;/a&gt;
  What is Bolt?
&lt;/h3&gt;

&lt;p&gt;Bolt is a pure Go key/value store inspired by Howard Chu's LMDB project. The goal of the project is to provide a simple, fast, and reliable database for projects that don't require a full database server such as Postgres or MySQL.&lt;/p&gt;

&lt;p&gt;Since Bolt is meant to be used as such a low-level piece of functionality, simplicity is key. The API will be small and only focus on getting values and setting values. That's it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-use-bolt"&gt;
  &lt;/a&gt;
  How to use Bolt?
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#installing"&gt;
  &lt;/a&gt;
  Installing
&lt;/h4&gt;

&lt;p&gt;Bolt doesn't need any install other than &lt;code&gt;go get&lt;/code&gt;. It just works as a library. So your only need is adding it to &lt;code&gt;go.mod&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;go get github.com/boltdb/bolt&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#creating-database"&gt;
  &lt;/a&gt;
  Creating database
&lt;/h4&gt;

&lt;p&gt;After you can create your database like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;bolt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"my.db"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0600&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;bolt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Options&lt;/span&gt;&lt;span class="p"&gt;{})&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In here you can add timeout to your database. Or you can set readonly if you don't need writing into. Just set them in &lt;code&gt;&amp;amp;bolt.Options{}&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#writing-into-database"&gt;
  &lt;/a&gt;
  Writing into database
&lt;/h4&gt;

&lt;p&gt;You need to create bucket first. After than you can write your key/value data into bucket. Also &lt;code&gt;tx.CreateBucketIfNotExists([]byte)&lt;/code&gt; function is life saver.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tx&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;bolt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Tx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;bucket&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;tx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateBucketIfNotExists&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"todo"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Errorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"create bucket: %s"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;bucket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Put&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"task-1"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Test BoltDB"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you have a bucket already you can write into it like this. Caution checking bucket is nil is important. Because if you try to use &lt;code&gt;Put&lt;/code&gt; on nil bucket your program will panic.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tx&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;bolt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Tx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;bucket&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;tx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Bucket&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"todo"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;bucket&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Errorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"get bucket: FAILED"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;bucket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Put&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"task-1"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Test BoltDB additions"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#querying-data-from-database"&gt;
  &lt;/a&gt;
  Querying data from database
&lt;/h4&gt;

&lt;p&gt;Querying is as simple as writing. Just call your bucket and ask it for your data.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;View&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tx&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;bolt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Tx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;tx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Bucket&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"todo"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Errorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"get bucket: FAILED"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"task-1"&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
        &lt;span class="c"&gt;// should return nil to complete the transaction&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And here is simple way to iterate on all keys in one bucket.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;View&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tx&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;bolt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Tx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;tx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Bucket&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"todo"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Errorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"get bucket: FAILED"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="c"&gt;// we need cursor for iteration&lt;/span&gt;
        &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Cursor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;First&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Next&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Key: "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;" Value: "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="c"&gt;// should return nil to complete the transaction&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Bolt is a pure Go key/value store&lt;/li&gt;
&lt;li&gt;Bolt is native go library&lt;/li&gt;
&lt;li&gt;Bolt is supported everywhere which go is supported&lt;/li&gt;
&lt;li&gt;Creating, Writing and Querying inside Bolt is really easy.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#simple-and-powerful-toolkit-for-boltdb"&gt;
  &lt;/a&gt;
  Simple and powerful toolkit for BoltDB
&lt;/h3&gt;

&lt;p&gt;Storm is a simple and powerful toolkit for BoltDB. Basically, Storm provides indexes, a wide range of methods to store and fetch data, an advanced query system, and much more.&lt;br&gt;
GitHub: &lt;a href="https://github.com/asdine/storm"&gt;https://github.com/asdine/storm&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#future-readings"&gt;
  &lt;/a&gt;
  Future Readings
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://awmanoj.github.io/2016/08/03/using-boltdb-as-a-fast-persistent-kv-store/"&gt;https://awmanoj.github.io/2016/08/03/using-boltdb-as-a-fast-persistent-kv-store/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://santoshk.dev/posts/2020/introduction-to-boltdb/"&gt;https://santoshk.dev/posts/2020/introduction-to-boltdb/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>go</category>
      <category>database</category>
      <category>programming</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Try Andy's Desk</title>
      <author>Andrés Villarreal</author>
      <pubDate>Sat, 15 Jan 2022 10:35:29 +0000</pubDate>
      <link>https://dev.to/kaeruct/try-andys-desk-5d17</link>
      <guid>https://dev.to/kaeruct/try-andys-desk-5d17</guid>
      <description>&lt;p&gt;LINK: &lt;a href="https://desk.glitchy.website/"&gt;https://desk.glitchy.website/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J8d4o79K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4vg8ahjrmlkbthyat6u7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J8d4o79K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4vg8ahjrmlkbthyat6u7.png" alt="Image description" width="880" height="418"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a nostalgic (and not very faithful) recreation of the Windows 7 desktop UI.&lt;/p&gt;

&lt;p&gt;The code is intentionally not too polished, as this is a project I work on for fun.&lt;/p&gt;

&lt;p&gt;Things might be buggy but that's part of the fun.&lt;/p&gt;

&lt;p&gt;You WILL find weird hacks and work-arounds and lots of inefficient stuff.&lt;/p&gt;

&lt;p&gt;One of my main goals with this project was to build it as fast as possible. I managed this by integrating as many existing projects/code as I could find. Of course, everything is credited if you open &lt;code&gt;CREDITS.txt&lt;/code&gt;. You can also take a look at the source code for more information!&lt;/p&gt;

&lt;p&gt;You can find the repo here: &lt;a href="https://github.com/KaeruCT/desk.glitchy.website"&gt;https://github.com/KaeruCT/desk.glitchy.website&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>programming</category>
      <category>desktop</category>
    </item>
    <item>
      <title>Build and Deploy a URL Shortener using NodeJS, Firebase, and Heroku</title>
      <author>Fredrick Emmanuel</author>
      <pubDate>Sat, 15 Jan 2022 10:24:08 +0000</pubDate>
      <link>https://dev.to/divofred/build-and-deploy-url-shortener-using-nodejs-firebase-and-heroku-155k</link>
      <guid>https://dev.to/divofred/build-and-deploy-url-shortener-using-nodejs-firebase-and-heroku-155k</guid>
      <description>&lt;p&gt;&lt;strong&gt;Uniform Resource Locator&lt;/strong&gt; (URL), also referred to as web address, is a specific type of &lt;a href="https://en.wikipedia.org/wiki/Uniform_Resource_Identifier"&gt;URI&lt;/a&gt; that specifies the address of  web resources on a computer network.&lt;/p&gt;

&lt;p&gt;A URL basically consists of a Scheme (&lt;code&gt;https://&lt;/code&gt;), a Host-Name (&lt;code&gt;dev.to&lt;/code&gt;), and a Path (&lt;code&gt;/divofred&lt;/code&gt;). Sometimes, a URL can contain Parameters and Anchors.&lt;/p&gt;

&lt;p&gt;All these put together makes the URL long and not decent. This calls for a URL Shortener.&lt;/p&gt;

&lt;p&gt;As the name implies, URL Shortener helps to reduce the length of the web address while retaining the address to the web resources of the URL.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#goal"&gt;
  &lt;/a&gt;
  Goal
&lt;/h2&gt;

&lt;p&gt;In this tutorial, you will learn how to shorten URLs, store these short URLs in Firebase, and Deploy the Application to Heroku.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Knowledge in NodeJS and ES6 Syntax&lt;/li&gt;
&lt;li&gt;A Text Editor preferably Visual Studio code.&lt;/li&gt;
&lt;li&gt;Firebase Account&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h2&gt;

&lt;p&gt;Here is the link to the &lt;a href="https://github.com/divofred/short-url"&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Please note that this tutorial is a modification of &lt;a href="https://www.youtube.com/watch?v=Z57566JBaZQ"&gt;Traversy's YouTube Video&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Run &lt;code&gt;npm init&lt;/code&gt; in your terminal to initialize our project.&lt;/p&gt;

&lt;p&gt;Let's install the dependencies that we will use in this tutorial:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i express firebase shortid valid-url nodemon
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;firebase&lt;/code&gt; connects our application to firebase database.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;shortid&lt;/code&gt;  creates the &lt;code&gt;short-url&lt;/code&gt; code.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;valid-url&lt;/code&gt; validates the URLs that are sent to our API.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setting-up-firebase"&gt;
  &lt;/a&gt;
  Setting up Firebase
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;To get started with firebase, you need to own a &lt;a href="https://gmail.com"&gt;Gmail&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#creating-a-project"&gt;
  &lt;/a&gt;
  Creating a Project
&lt;/h3&gt;

&lt;p&gt;Open your browser and navigate to &lt;a href="https://console.firebase.google.com"&gt;Firebase Official Website&lt;/a&gt; and create a project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XCfhBzgK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s252c8ym4lmc5foe9qvr.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XCfhBzgK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s252c8ym4lmc5foe9qvr.jpg" alt="Firebase_Homepage" width="880" height="396"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Choose a name for the project:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WNHhPSkP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i8a0dtnykj8w04m0ufr3.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WNHhPSkP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i8a0dtnykj8w04m0ufr3.jpg" alt="Project_Name" width="727" height="553"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Google Analytics would not be necessary for our project, toggle it off and Create a project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f5ATj8_M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/587aacgiv63vxk9dsiee.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f5ATj8_M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/587aacgiv63vxk9dsiee.jpg" alt="Google Analytics" width="769" height="690"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After successfully creating a new project you will be brought to the screen below. When you click continue, you will be redirected to your dashboard.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ysLSkllg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/st4ugqhal3py802wfell.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ysLSkllg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/st4ugqhal3py802wfell.jpg" alt="click_continue" width="334" height="399"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#getting-our-projects-details"&gt;
  &lt;/a&gt;
  Getting our Projects Details
&lt;/h3&gt;

&lt;p&gt;We need our &lt;code&gt;Web API key&lt;/code&gt; from our dashboard to connect our application to Firebase. &lt;/p&gt;

&lt;p&gt;On the sidebar, click on &lt;code&gt;Authentication&lt;/code&gt; and &lt;code&gt;Get Started&lt;/code&gt;. This automatically generates our &lt;code&gt;Web API key&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Click on the &lt;code&gt;settings icon&lt;/code&gt; on the sidebar and click on &lt;code&gt;Project settings&lt;/code&gt; to get our projects Details.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C-bBFhMV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8m73l2t3nd5fd17hl2if.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C-bBFhMV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8m73l2t3nd5fd17hl2if.jpg" alt="Projects_details" width="880" height="380"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setting-up-the-server"&gt;
  &lt;/a&gt;
  Setting up the server
&lt;/h3&gt;

&lt;p&gt;Let's set up an &lt;code&gt;express&lt;/code&gt; listening event, that will listen for a connection to port &lt;code&gt;5000&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Create a new file named &lt;code&gt;server.js&lt;/code&gt; and open it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Sever running at port &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#shortening-links"&gt;
  &lt;/a&gt;
  Shortening Links
&lt;/h2&gt;

&lt;p&gt;We will have two files, one for generating the &lt;code&gt;URL Code&lt;/code&gt; and the other for redirecting the shortened URL to the long URL.&lt;/p&gt;

&lt;p&gt;Create a new folder named &lt;code&gt;routes&lt;/code&gt; and add two new files named &lt;code&gt;index.js&lt;/code&gt; and &lt;code&gt;url.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Open up &lt;code&gt;url.js&lt;/code&gt; to create the short URL:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;valid_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;valid-url&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;shortid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;shortid&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Shorten&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;longURL&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;baseURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http://localhost:5000&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// Check base URL&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;valid_url&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isUri&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;baseURL&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;401&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;success&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Invalid base URL&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;urlCode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;shortid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;generate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/shorten&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Shorten&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will get the &lt;code&gt;longURL&lt;/code&gt; from the body and specify the &lt;code&gt;baseURL&lt;/code&gt; of our application which is &lt;code&gt;http://localhost:5000&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We used the package &lt;code&gt;valid-url&lt;/code&gt; to check if the &lt;code&gt;baseURL&lt;/code&gt; we specified is valid. If it is not valid, we will send a status code of &lt;code&gt;401&lt;/code&gt; else, we will randomly generate a &lt;code&gt;urlCode&lt;/code&gt; using the &lt;code&gt;shortid&lt;/code&gt; package.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#connecting-our-application-to-firebase-database"&gt;
  &lt;/a&gt;
  Connecting our application to Firebase Database
&lt;/h3&gt;

&lt;p&gt;In your dashboard, click on &lt;code&gt;Realtime Database&lt;/code&gt; and create a new &lt;code&gt;web database&lt;/code&gt;. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;To create a new web database click on an icon that looks like &lt;code&gt;&amp;lt;/&amp;gt;&lt;/code&gt; ]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Create a new folder in our project's root directory named &lt;code&gt;firebase&lt;/code&gt; and add &lt;code&gt;fb_connect.js&lt;/code&gt; to it.&lt;/p&gt;

&lt;p&gt;Open &lt;code&gt;fb_connect.js&lt;/code&gt; to connect to our Database:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;initializeApp&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;firebase/app&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;initializeApp&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;apiKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;authDomain&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;projectID.firebaseapp.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="c1"&gt;//authDomain: "short-url-4e0b5.firebaseapp.com",&lt;/span&gt;
  &lt;span class="na"&gt;projectId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;projectID&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="c1"&gt;//projectId: "short-url-4e0b5"&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From &lt;code&gt;Project settings&lt;/code&gt; in your dashboard, insert your &lt;code&gt;apiKey&lt;/code&gt; and &lt;code&gt;projectID&lt;/code&gt; in the above code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#saving-data"&gt;
  &lt;/a&gt;
  Saving Data
&lt;/h3&gt;

&lt;p&gt;Before we can save data in our database, we also need to check the validity of the &lt;code&gt;longURL&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;url.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../firebase/fb_connect&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getDatabase&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;firebase/database&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;database&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getDatabase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;urlCode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;shortid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;generate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="c1"&gt;// Check long URL&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;valid_url&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isUri&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;longURL&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;shortURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;baseURL&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;urlCode&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ofirebase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;database&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;url/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;urlCode&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;longURL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;//From the body&lt;/span&gt;
        &lt;span class="nx"&gt;shortURL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;urlCode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;success&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Inserted Successfully &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="nx"&gt;ofirebase&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;401&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;success&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Invalid longURL&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/shorten&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Shorten&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We initialized our app, imported it into our &lt;code&gt;url.js&lt;/code&gt; file, and used it to set up our database. We also required some &lt;code&gt;firebase database&lt;/code&gt; functions. &lt;/p&gt;

&lt;p&gt;The &lt;code&gt;ref&lt;/code&gt; function takes in the instance of our database, the name of the collection we want to add the data to, and the &lt;code&gt;id&lt;/code&gt; of each row (which we specified as the &lt;code&gt;urlCode&lt;/code&gt;). &lt;/p&gt;

&lt;p&gt;The &lt;code&gt;set&lt;/code&gt; function takes in the &lt;code&gt;ref&lt;/code&gt; function and the data we want to add to the database.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#redirecting-users-to-the-long-url"&gt;
  &lt;/a&gt;
  Redirecting users to the Long URL
&lt;/h3&gt;

&lt;p&gt;Open up the &lt;code&gt;index.js&lt;/code&gt; file inside the &lt;code&gt;routes&lt;/code&gt; folder:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;index.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../firebase/fb_connect&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getDatabase&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;firebase/database&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dbRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;getDatabase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/:code&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dbRef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`url/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;snapshot&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;snapshot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;redirecting&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;longURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;snapshot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;longURL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;longURL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;
          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;404&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;success&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;URL doesn't exist&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;success&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will get the &lt;code&gt;urlCode&lt;/code&gt; from the parameter, use that &lt;code&gt;urlCode&lt;/code&gt; to get the &lt;code&gt;LongURL&lt;/code&gt; from our database, and redirect the user to the &lt;code&gt;LongURL&lt;/code&gt;. If the &lt;code&gt;urlCode&lt;/code&gt; doesn't exist, we will send a status code of &lt;code&gt;404&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let's set up a middleware in our &lt;code&gt;server.js&lt;/code&gt; file that uses our &lt;code&gt;url.js&lt;/code&gt; and &lt;code&gt;index.js&lt;/code&gt; file to navigate to specific routes.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;server.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./routes/index&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/api&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./routes/url&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;If you encounter any error or have any questions, send a message in the comment section or refer to the &lt;a href="https://github.com/divofred/short-url"&gt;GitHub repo&lt;/a&gt; for this tutorial.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#deploying-to-heroku"&gt;
  &lt;/a&gt;
  Deploying to Heroku
&lt;/h2&gt;

&lt;p&gt;You will need to &lt;a href="https://signup.heroku.com/"&gt;create an account&lt;/a&gt; with Heroku or&lt;a href="https://id.heroku.com/"&gt; Sign in&lt;/a&gt; if you already have one.&lt;/p&gt;

&lt;p&gt;After Signing in, you will be redirected to your &lt;a href="https://dashboard.heroku.com/apps"&gt;dashboard&lt;/a&gt;. Click on &lt;code&gt;New&lt;/code&gt; at the top-right corner of the page and click &lt;a href="https://dashboard.heroku.com/new-app?org=personal-apps"&gt;&lt;code&gt;create new app&lt;/code&gt;&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1pBHQ-7O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8zwptbxks268jf517dww.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1pBHQ-7O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8zwptbxks268jf517dww.jpg" alt="Heroku1" width="880" height="137"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Choose a unique name for the application and create the app:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UJx1SFgf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bv9aynvousttv2in4kaz.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UJx1SFgf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bv9aynvousttv2in4kaz.jpg" alt="Heroku2" width="742" height="413"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Download and Install &lt;a href="https://devcenter.heroku.com/articles/heroku-cli"&gt;Heroku's CLI&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After Installing Heroku's CLI, log in to Heroku in your terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;heroku login
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will prompt for a Login in your browser.&lt;/p&gt;

&lt;p&gt;If you get an error like &lt;code&gt;Ip address mismatch&lt;/code&gt;, run this code instead:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;heroku login &lt;span class="nt"&gt;-i&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will ask you to put your Heroku's login details in your terminal.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Any other error? send a message in the comment section.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's deploy our app to Heroku&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git init
heroku git:remote &lt;span class="nt"&gt;-a&lt;/span&gt; divofred-short-url
git add &lt;span class="nb"&gt;.&lt;/span&gt;
git commit &lt;span class="nt"&gt;-am&lt;/span&gt; &lt;span class="s2"&gt;"make it better"&lt;/span&gt;
git push heroku master
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#changing-our-raw-baseurl-endraw-"&gt;
  &lt;/a&gt;
  Changing our &lt;code&gt;baseURL&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Since our project has gone from Local to Production, we need to change the &lt;code&gt;baseURL&lt;/code&gt; to the URL of our Heroku's app.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;url.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;baseURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://divofred-short-url.herokuapp.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can use Postman to test our application:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hs3_h_TE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0l1pywfz9z32z0652tat.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hs3_h_TE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0l1pywfz9z32z0652tat.jpg" alt="Postman" width="880" height="432"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We have successfully built a URL Shortener using Node, Firebase Database, and Heroku as our Hosting Platform.&lt;/p&gt;

&lt;p&gt;Please submit any question or contributions to the comment section.&lt;/p&gt;

&lt;p&gt;You can make a POST request from your Front-end application to our API.&lt;/p&gt;

&lt;p&gt;Here is the link to the &lt;a href="https://github.com/divofred/short-url"&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Till We Cross Path, I remain Fredrick Emmanuel (divofred)😁😁❤❤.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Interviewer's Favorite: Event Bubbling</title>
      <author>Mohd Shahid</author>
      <pubDate>Sat, 15 Jan 2022 10:23:25 +0000</pubDate>
      <link>https://dev.to/sidmirza4/interviewers-favorite-event-bubbling-787</link>
      <guid>https://dev.to/sidmirza4/interviewers-favorite-event-bubbling-787</guid>
      <description>&lt;p&gt;Hello everyone 👋&lt;/p&gt;

&lt;p&gt;It's been a long time since I published my last article. I got busy in learning deployment, AWS, Docker, Kubernetes, etcetera, which I will share here as well, so be tuned! 👀&lt;/p&gt;

&lt;p&gt;Today's article is gonna be about 'events', more specifically 'event bubbling'.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-get-started"&gt;
  &lt;/a&gt;
  Let's get started 🚀
&lt;/h2&gt;

&lt;p&gt;Before starting the article I want you to familiarize with the word 'event' in JS. Those who are already familiar can skip the introduction section.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#what-is-an-event-"&gt;
  &lt;/a&gt;
  What is an event 🤔?
&lt;/h3&gt;

&lt;p&gt;One of the most important questions that an interviewer asks around JS and DOM, is about 'events'.&lt;br&gt;
When you start learning JS and playing with DOM (Document Object Model), you may hear/read the word 'event', so what is it?&lt;br&gt;&lt;br&gt;
In simple language when a user interact with the webpage in any way like click of a mouse button (left or right), pressing a keyboard button, form submission etc. These interactions are called 'events'.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#why-events-are-important-"&gt;
  &lt;/a&gt;
  Why 'events' are important 💭?
&lt;/h3&gt;

&lt;p&gt;If you want to become a better front-end developer or a web developer in general, you really need to understand behind the scenes of what happens when user interacts with the web page.&lt;br&gt;&lt;br&gt;
Almost all the questions in the interview about DOM revolves around 'events'.&lt;br&gt;&lt;br&gt;
Now, when a user do something on the webpage that causes an event to happen you can capture that event and do some specific task accordingly. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#what-is-event-bubbling-"&gt;
  &lt;/a&gt;
  What is 'Event Bubbling' 🙄?
&lt;/h3&gt;

&lt;p&gt;With 'event' you will hear/read some more terms like 'Event Capturing', 'Event Propagation', and 'Event Bubbling'. Well, as you already know this article is gonna be about 'event bubbling', which is, without a doubt, is the most important.&lt;br&gt;&lt;br&gt;
Consider the following code snippet.  👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example if you click on an &lt;code&gt;li&lt;/code&gt; element, it will occur as if the click happened on its parent &lt;code&gt;ul&lt;/code&gt; and all the other parents above it.&lt;br&gt;&lt;br&gt;
This is because the event bubbles up from the element it happened to all of its parents. It is called event bubbling.&lt;br&gt;&lt;br&gt;
Confusing 😵 right?&lt;br&gt;&lt;br&gt;
To visualize this I am creating a simple web page and attaching event listeners to &lt;code&gt;div&lt;/code&gt;, &lt;code&gt;ul&lt;/code&gt; and &lt;code&gt;li&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"list__container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;ul&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"list"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"list__item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;List item 1&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"list__item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;List item 2&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;                  
    &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"list__item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;List item 3&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is how it would look in in the inspector 👇  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sOErFZgN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u3ut8dgzyo698x3whcet.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sOErFZgN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u3ut8dgzyo698x3whcet.png" alt="event-bubbling-web-page" width="432" height="388"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now the magic of JS begins 💥&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;listContainer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.list__container&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.list&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;listItems&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelectorAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.list__item&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// on click changing the item's background color to be red.&lt;/span&gt;
&lt;span class="nx"&gt;listItems&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;listItem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;listItem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// `this` referes to the `li` element which was clicked.&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;backgroundColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;red&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The result 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WlVzeSlb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bo2ypvtzf82v18f89dg9.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WlVzeSlb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bo2ypvtzf82v18f89dg9.gif" alt="click-on-list" width="880" height="565"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Everything is working as expected right 👀?&lt;br&gt;
...&lt;br&gt;
Now let's add event listeners to &lt;code&gt;div&lt;/code&gt; and &lt;code&gt;ul&lt;/code&gt;. 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// click event to `div`&lt;/span&gt;
&lt;span class="nx"&gt;listContainer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;backgroundColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;yellow&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// click event on `ul`&lt;/span&gt;
&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;backgroundColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;green&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The result 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zbFZTX_j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2kr9ytrcazoruuf088oj.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zbFZTX_j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2kr9ytrcazoruuf088oj.gif" alt="change-color-ul-div" width="880" height="505"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🤯 I know you might be thinking, 'Woah, wait Shahid, you never clicked on &lt;code&gt;ul&lt;/code&gt; or &lt;code&gt;div&lt;/code&gt; why the hell their background color changed 🤔?'&lt;br&gt;&lt;br&gt;
The answer is: 'Event Bubbling'.&lt;br&gt;&lt;br&gt;
When you click an element the event is bubbled up to all of its parent and it seems that the click is happened on each of its parent.&lt;br&gt;&lt;br&gt;
We can make some cool shit using the power of event bubbling, but that is out of the scope of this article.&lt;br&gt;&lt;br&gt;
If you want me to write more (and show more example) on event bubbling, please leave a comment below ⬇️.&lt;br&gt;&lt;br&gt;
Thanks a lot for reading this article. 💓&lt;br&gt;
Follow me &lt;a href="https://twitter.com/sidmirza4"&gt;twitter&lt;/a&gt; to show some love ❣️&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Day 78 of 100 Days of Code &amp; Scrum: Digital Marketing Services, Interview Practice, and Reviewing</title>
      <author>Rammina</author>
      <pubDate>Sat, 15 Jan 2022 09:53:30 +0000</pubDate>
      <link>https://dev.to/rammina/day-78-of-100-days-of-code-scrum-digital-marketing-services-interview-practice-and-reviewing-208j</link>
      <guid>https://dev.to/rammina/day-78-of-100-days-of-code-scrum-digital-marketing-services-interview-practice-and-reviewing-208j</guid>
      <description>&lt;p&gt;Happy weekend, everyone!&lt;/p&gt;

&lt;p&gt;Another productive day for me. I worked on my website, practiced for interviews, and reviewed Node.js as well as other backend concepts and tools.&lt;/p&gt;

&lt;p&gt;I finished building another page for my website today, which was about the Digital Marketing Services. The design and layout are similar to the Web Development Services page, which kind of works for now. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ht58LG3i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/un87ipw2zjh8qtadlq63.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ht58LG3i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/un87ipw2zjh8qtadlq63.png" alt="Rammina Digital Marketing Services" width="880" height="466"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I only have one more page left for the Services pages, which I'm looking forward to finish in the coming days.&lt;/p&gt;

&lt;p&gt;Anyway, let's move on to my daily report!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#yesterday"&gt;
  &lt;/a&gt;
  Yesterday
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;I finished building the Web Development Services page for my &lt;a href="https://www.rammina.com"&gt;web development site&lt;/a&gt; and continued to learn more about Scrum.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#today"&gt;
  &lt;/a&gt;
  Today
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#company-website"&gt;
  &lt;/a&gt;
  Company Website
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;finished the Digital Marketing Services page.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#nextjs"&gt;
  &lt;/a&gt;
  Next.js
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;reviewed various data fetching techniques and patterns in Next.js.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#scrum"&gt;
  &lt;/a&gt;
  Scrum
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;read this article, &lt;a href="https://www.scrum.org/resources/blog/scrum-trenches-sprint-goal"&gt;Scrum from the Trenches - the Sprint Goal&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#interview-practice"&gt;
  &lt;/a&gt;
  Interview Practice
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;did some mock interviewing for my technical interviews next week.&lt;/li&gt;
&lt;li&gt;reviewed Node.js and other backend concepts.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thank you for reading! Have a good day!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9gNNIpK9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9ayfxxxaz2g2hfcqbsk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9gNNIpK9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9ayfxxxaz2g2hfcqbsk.png" alt="Rammina Thank You Banner" width="880" height="293"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resourcesrecommended-readings"&gt;
  &lt;/a&gt;
  Resources/Recommended Readings
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://scrumguides.org/scrum-guide.html"&gt;The 2020 Scrum Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.udemy.com/course/nextjs-react-the-complete-guide/"&gt;Next.js &amp;amp; React by Maximilian Schwarzmüller&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nextjs.org/docs/getting-started"&gt;Next.js official documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://swr.vercel.app/"&gt;SWR official documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.scrum.org/resources/blog/scrum-trenches-sprint-goal"&gt;Scrum from the trenches - the Sprint Goal&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  DISCLAIMER
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;This is not a guide&lt;/strong&gt;, it is just me sharing my experiences and learnings. This post only expresses my thoughts and opinions (based on my limited knowledge) and is in no way a substitute for actual references. If I ever make a mistake or if you disagree, I would appreciate corrections in the comments!&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#other-media"&gt;
  &lt;/a&gt;
  Other Media
&lt;/h2&gt;

&lt;p&gt;Feel free to reach out to me in other media!&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;a href="https://www.rammina.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BK-zilS2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/rammina/image/upload/v1638444046/rammina-button-128_x9ginu.png" alt="Rammina Logo" width="128" height="50"&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;a href="https://twitter.com/RamminaR"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C341ckO3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/rammina/image/upload/v1636792959/twitter-logo_laoyfu_pdbagm.png" alt="Twitter logo" width="128" height="50"&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;a href="https://github.com/Rammina"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u4ZlXeay--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/rammina/image/upload/v1636795051/GitHub-Emblem2_epcp8r.png" alt="Github logo" width="128" height="50"&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>productivity</category>
    </item>
  </channel>
</rss>
