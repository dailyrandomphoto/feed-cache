<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Some useful tools for a web developer.</title>
      <author>Naman vyas</author>
      <pubDate>Mon, 16 Aug 2021 21:46:43 +0000</pubDate>
      <link>https://dev.to/namanvyas/some-useful-tools-for-a-web-developer-3d1f</link>
      <guid>https://dev.to/namanvyas/some-useful-tools-for-a-web-developer-3d1f</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_ayKh_1z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7ilbkvjdezhbxpuet0ka.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_ayKh_1z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7ilbkvjdezhbxpuet0ka.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;wappalyzer:&lt;/p&gt;

&lt;p&gt;wappalyzer is a chrome extension to find out the technology stack of any website. Instantly reveal the technology stack any website, such as CMS, ecommerce platform or payment processor, as well as company and contact details.&lt;br&gt;
&lt;a href="https://chrome.google.com/webstore/detail/wappalyzer/gppongmhjkpfnbhagpmjfkannfbllamg?hl=en"&gt;Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m2Khu7pm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cqpauljgaqmalmvb06j9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m2Khu7pm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cqpauljgaqmalmvb06j9.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;LogoTester by &lt;a href="http://thework.market:"&gt;http://thework.market:&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;LogoTester instantly checks if your logo is up to the top industry standards. It checks industry standards in your logo like - Uniqueness, Scalability, Background tolerance, Colors.&lt;br&gt;
&lt;a href="https://logotester.thework.market/"&gt;Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BUqFuT9r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vo32uoum9002ptngiw85.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BUqFuT9r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vo32uoum9002ptngiw85.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fake Filler:&lt;/p&gt;

&lt;p&gt;It's another useful chrome extension. Fake Filler is THE form filler to fill all input fields on a page with randomly generated fake data. This productivity-boosting extension is a must for developers and testers who work with forms.&lt;br&gt;
&lt;a href="https://chrome.google.com/webstore/detail/fake-filler/bnjjngeaknajbdcgpfkgnonkmififhfo?hl=en"&gt;Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x7wshfna--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/62scbcbhq4n4qd0qxs3w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x7wshfna--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/62scbcbhq4n4qd0qxs3w.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;WhatTheFont:&lt;/p&gt;

&lt;p&gt;With this web tool, you can find a font with just an image. WhatTheFont uses deep learning to search our collection of over 133,000 font styles and find the best match for the fonts in your photo.&lt;br&gt;
&lt;a href="https://www.myfonts.com/WhatTheFont/"&gt;Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JGghw64T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/csyej3kha3bthvg5h2vq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JGghw64T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/csyej3kha3bthvg5h2vq.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://remove.bg:"&gt;http://remove.bg:&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://Remove.bg"&gt;http://Remove.bg&lt;/a&gt; removes backgrounds from photos Automatically. You just have to upload your photo and wait for a few seconds and boom you got your background removed images without all that photoshop efforts.&lt;br&gt;
&lt;a href="https://www.remove.bg/"&gt;Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for reading :)&lt;/p&gt;

</description>
      <category>tooling</category>
      <category>webdev</category>
      <category>writing</category>
    </item>
    <item>
      <title>HOW I WILL USE KODECAMP AND WIN HNG TROPHY.</title>
      <author>Dev-Tonia</author>
      <pubDate>Mon, 16 Aug 2021 21:32:17 +0000</pubDate>
      <link>https://dev.to/devtonia/how-i-will-use-kodecamp-and-win-hng-trophy-3lp5</link>
      <guid>https://dev.to/devtonia/how-i-will-use-kodecamp-and-win-hng-trophy-3lp5</guid>
      <description>&lt;p&gt;During my last post,  I told you how I was accepted into the &lt;strong&gt;HNGi8&lt;/strong&gt; internship and my plan to win the HNG trophy which is the T-shirt.&lt;/p&gt;

&lt;p&gt;After some much wondering on the internet trying to find a helping hand on my journey on the ongoing HNG internship, I came across &lt;strong&gt;KODECAMP&lt;/strong&gt; I immediately hop into their Bootcamp as it is running the same time with the HNGI8 internship, you know it's a bonus for me as I will be learning and at same participating on the on going internship.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why I Joined KODECAMP BootCamp.&lt;/strong&gt;&lt;br&gt;
The program will run for 16 weeks, so may the end of the 16 weeks I want to &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Master my act in Frontend development.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Be able to take on any project that was thrown my way with fear. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I have been battling impostor syndrome, by the expiration of the 16 weeks, impostor syndrome is no longer part of me. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It will give the right focus during the ongoing internship as I will be standing on their training to tackle all the tasks thrown my way during the HNGi8 internship. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The truth is that by the end of the internship and this current Bootcamp I'm jumping into a job as a web developer majoring mainly on the frontend stack using REACT. . &lt;/p&gt;

&lt;p&gt;Stay as I will be updating on my journey from the internship and the Bootcamp.. &lt;/p&gt;

</description>
    </item>
    <item>
      <title>My Journey Into Web Development</title>
      <author>Oladipupo Adanikin</author>
      <pubDate>Mon, 16 Aug 2021 21:25:13 +0000</pubDate>
      <link>https://dev.to/deeppsy/my-journey-into-web-development-73n</link>
      <guid>https://dev.to/deeppsy/my-journey-into-web-development-73n</guid>
      <description>&lt;p&gt;Hi.&lt;/p&gt;

&lt;p&gt;I'm Dipo and welcome to my little talk about how my journey into web development has been for about 6 months. &lt;/p&gt;

&lt;p&gt;I am actually writing this article because of an internship role Im currently interested in. And that's the HNG Internship. Many Nigerians and some non-nigerians are familiar with this internship. Anyone can sign up for this internship using this link: &lt;a href="https://internship.zuri.team"&gt;https://internship.zuri.team&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To move from the stage I currently am, I was required to make this write-up as I typically don't like writing. But, here goes nothing.&lt;/p&gt;

&lt;p&gt;Like everybody else who is into software engineering, I started my learning from freecodecamp as it it completely free to use and easily accessible to anyone. But, I honestly got bored and wanted more. So I went on Udemy to look for courses that would help me and I found Colt Steele's bootcamp course into web dev. Here's a link to help if you feel like checking it out &lt;a href="https://www.udemy.com/course/the-web-developer-bootcamp/"&gt;https://www.udemy.com/course/the-web-developer-bootcamp/&lt;/a&gt;. The course covers foundational topics such as HTML, CSS and JavaScript for it's frontend section and for backend, it used NodeJS which really solidify my JavaScript understand.&lt;/p&gt;

&lt;p&gt;I completed this course in 3 months and by then I had done so many projects and also pushed to GitHub. If you're reading this and you don't know what GitHub is. It is a cloud platform that allows developers push their code online whether to a private or public folder. It basically makes life easy for us to share code as developers. Here's a link to help you start out  &lt;a href="https://youtu.be/DVRQoVRzMIY"&gt;https://youtu.be/DVRQoVRzMIY&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Also, developing for the often means we are working with some sort of design and these days there are many softwares used out there to create design. Examples are Figma, Adobe XD and so on.&lt;/p&gt;

&lt;p&gt;Figma is widely used and fairly easy to understand and I'd recommend watching this video to understand what goes on there &lt;a href="https://youtu.be/1MbQaYCCzzI"&gt;https://youtu.be/1MbQaYCCzzI&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I think it would be unfair to you reading this if I don't tell you why I decided to do this internship. Studying and building things alone can be a bit*h and it is often recommended that you learn with people so you can really test out your knowledge on stuff. So, at the end the 8 weeks internship, I hope to have networked with a lot of people in and out of my current technology stack and to give me the confidence to work on project that are genuinely mine. Not something from YouTube or some capstone project at the end of a course.&lt;/p&gt;

&lt;p&gt;So yeah. If you stuck around to this point of the article you're and OG, and I appreciate it. Thank you so much for you time. I hope you learnt a little bit.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>My Training process In KodeCamp</title>
      <author>daveeedu</author>
      <pubDate>Mon, 16 Aug 2021 21:23:34 +0000</pubDate>
      <link>https://dev.to/daveeedu/my-training-process-in-kodecamp-2f7a</link>
      <guid>https://dev.to/daveeedu/my-training-process-in-kodecamp-2f7a</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;I am David Edu, certified in Data analytics/Business Intelligence, presently pursuing a career in decision making using Data science. I'm fascinated about the application of machine learning in solving real life problems and Artificial intelligence in general. My hobbies include Coding, reading, gaming, and networking.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#my-stack"&gt;
  &lt;/a&gt;
  My Stack
&lt;/h1&gt;

&lt;p&gt;Front-End&lt;br&gt;
Python&lt;/p&gt;

&lt;p&gt;I am currently undergoing a web Front-End training course with KodeCamp. KodeCamp is a tech training platform that provides training tracks in web Front-End dev, Back-End dev and UI/UX designs. The training is designed to last for 12 weeks and during this time my goals are to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Advance my html and css skills&lt;/li&gt;
&lt;li&gt;Get hands on experience by applying my skills on real life 
projects.&lt;/li&gt;
&lt;li&gt;Networking with industry experts and fellow tech enthusiasts.&lt;/li&gt;
&lt;li&gt;Building up my digital portfolio.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Thank you for reading my second article, I will be posting updates on the training process.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Website Setup Essentials</title>
      <author>PRIM4T</author>
      <pubDate>Mon, 16 Aug 2021 21:23:21 +0000</pubDate>
      <link>https://dev.to/prim4t/website-setup-essentials-447o</link>
      <guid>https://dev.to/prim4t/website-setup-essentials-447o</guid>
      <description>&lt;h5&gt;
  &lt;a href="#everything-you-need-to-start-your-minimal-fast-and-secure-blog"&gt;
  &lt;/a&gt;
  Everything you need to start your minimal, fast and secure Blog
&lt;/h5&gt;

&lt;p&gt;&lt;a&gt; &lt;img src="https://i.giphy.com/media/ZgTR3UQ9XAWDvqy9jv/giphy.gif"&gt; &lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a&gt; &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wFrOX1Ev--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://upload.wikimedia.org/wikipedia/commons/b/bf/GradientPurpleBlue.png"&gt; &lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#envelope-register-email-mailfence-criptext"&gt;
  &lt;/a&gt;
  ✉️ Register E-Mail: &lt;strong&gt;&lt;a href="https://mailfence.com"&gt;Mailfence&lt;/a&gt;&lt;/strong&gt; | &lt;strong&gt;&lt;a href="https://criptext.com"&gt;Criptext&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#link-get-git-github-gitlab"&gt;
  &lt;/a&gt;
  🔗 Get Git: &lt;strong&gt;&lt;a href="https://github.com"&gt;GitHub&lt;/a&gt;&lt;/strong&gt; | &lt;strong&gt;&lt;a href="https://gitlab.com"&gt;GitLab&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#computer-host-your-git-netlify-vercel"&gt;
  &lt;/a&gt;
  💻 Host your Git:  &lt;strong&gt;&lt;a href="https://netlify.com"&gt;Netlify&lt;/a&gt;&lt;/strong&gt; | &lt;strong&gt;&lt;a href="https://vercel.com"&gt;Vercel&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#globewithmeridians-register-domain-namecheap-unstoppabled"&gt;
  &lt;/a&gt;
  🌐 Register Domain : &lt;strong&gt;&lt;a href="https://namecheap.com"&gt;Namecheap&lt;/a&gt;&lt;/strong&gt; | &lt;strong&gt;&lt;a href="https://unstoppabledomains.com/r/151ba14a0087436"&gt;UnstoppableD...&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#art-get-a-themetemplate-hugo-jekyll-gatsby"&gt;
  &lt;/a&gt;
  🎨 Get a Theme/Template: &lt;a href="https://themes.gohugo.io"&gt;Hugo&lt;/a&gt; | &lt;a href="https://jamstackthemes.dev/ssg/jekyll/"&gt;Jekyll&lt;/a&gt; | &lt;a href="https://themejam.gatsbyjs.org/showcase"&gt;Gatsby&lt;/a&gt;
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Chalk&lt;/th&gt;
&lt;th&gt;TeXt&lt;/th&gt;
&lt;th&gt;Anatole&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/nielsenramon/chalk"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CHMQAOYQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/nielsenramon/chalk/master/_assets/images/documentation/chalk-intro%25402x.png" alt="Chalk"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/kitian616/jekyll-TeXt-theme"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_BHosNlt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/kitian616/jekyll-TeXt-theme/master/screenshots/TeXt-home.jpg" alt="TeXt"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/lxndrblz/anatole"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kLXt34Jo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/lxndrblz/anatole/master/images/screenshot.png" alt="Anatole"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#useful-tools-and-links"&gt;
  &lt;/a&gt;
  Useful Tools and links:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Emoji | &lt;a href="https://emojipedia.org/"&gt;Emojipedia.org&lt;/a&gt; | &lt;a href="https://gist.github.com/rxaviers/7360908"&gt;on Github&lt;/a&gt;| &lt;a href="https://dev.to/nikolab/complete-list-of-github-markdown-emoji-markup-5aia"&gt;on Dev.to&lt;/a&gt; | 😄 😁 😢&lt;/li&gt;
&lt;li&gt;Icons | &lt;a href="https://simpleicons.org/?q=netl"&gt;Simpleicons.org&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;Gif Libraries | &lt;a href="https://gifs.joelglovier.com/"&gt;on Github&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;Badge | &lt;a href="https://shields.io/category/social"&gt;Shield.io&lt;/a&gt; | &lt;a href="https://github.com/aleen42/badges"&gt;Aleen42&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;Pictures/Photos | &lt;a href="https://www.pexels.com/"&gt;Pexels&lt;/a&gt; | &lt;a href="https://commons.wikimedia.org/wiki/Category:Images"&gt;Wikipedia&lt;/a&gt; | 📷&lt;/li&gt;
&lt;li&gt;Markdown Editors | &lt;a href="https://jbt.github.io/markdown-editor/"&gt;jbt&lt;/a&gt; | &lt;a href="https://coolmarkdowneditor.org/"&gt;Cool&lt;/a&gt; | &lt;a href="https://upmath.me/"&gt;Upmath&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; List of Static Site generators | &lt;a href="https://jamstack.org/generators/"&gt;Jamstack.org&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Automation | &lt;a href="https://www.integromat.com"&gt;Integromat&lt;/a&gt; | &lt;a href="https://zapier.com/"&gt;zapier&lt;/a&gt; | &lt;a href="https://ifttt.com/"&gt;ifttt&lt;/a&gt; | ⚙️ &lt;/li&gt;
&lt;li&gt;Cross blog | &lt;a href="https://www.dev.to"&gt;Dev.to&lt;/a&gt; | &lt;a href="https://medium.com/"&gt;Medium&lt;/a&gt; | 📝&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a&gt; &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wFrOX1Ev--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://upload.wikimedia.org/wikipedia/commons/b/bf/GradientPurpleBlue.png"&gt; &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Web Setup Essentials from &lt;a href="https://www.youtube.com/channel/UCMhW7mC8faCqTcRKbO0c7Cw"&gt;Primitive Tutorials&lt;/a&gt; \&lt;br&gt;
Feel free &lt;a href="https://github.com/prim4t/Web-Setup-Essentials"&gt;contribute!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.paypal.me/prim4tdotart"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PMi5QXbp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/PayPal-tip%2520me-1462ab.svg%3Flogo%3Dpaypal" alt="Tip Me via PayPal"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://raw.githubusercontent.com/kitian616/jekyll-TeXt-theme/master/docs/assets/images/3Fkufxcw2xd8HnaRJBNK4ccdtkUDyyNu4V.jpg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--86NSAtQW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/Bitcoin-tip%2520me-f7931a.svg%3Flogo%3Dbitcoin" alt="Tip Me via Bitcoin"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>static</category>
      <category>blog</category>
      <category>hugo</category>
      <category>markdown</category>
    </item>
    <item>
      <title>What Is a URL? 🔗</title>
      <author>Anton</author>
      <pubDate>Mon, 16 Aug 2021 21:21:47 +0000</pubDate>
      <link>https://dev.to/therceman/what-is-a-url-3j9d</link>
      <guid>https://dev.to/therceman/what-is-a-url-3j9d</guid>
      <description>&lt;p&gt;URL (Uniform Resource Locator) is the so-called address of the desired resource on the internet that consists of multiple components/parts. &lt;/p&gt;

&lt;p&gt;Let's take a look at the following URL&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://admin:pass@a.b.example.com:888/users/index.php?q=bob&amp;amp;role=2#info
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This URL consist of the following components:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Scheme        &lt;code&gt;https://&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Authority    &lt;code&gt;admin:pass@&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Host             &lt;code&gt;a.b.example.com&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Port             &lt;code&gt;888&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Path            &lt;code&gt;users/index.php&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Query          &lt;code&gt;q=bob&amp;amp;role=2&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Hash             &lt;code&gt;#info&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#scheme-component"&gt;
  &lt;/a&gt;
  Scheme component
&lt;/h2&gt;




&lt;p&gt;&lt;strong&gt;Alternative naming:&lt;/strong&gt;  Protocol&lt;br&gt;
&lt;strong&gt;Required:&lt;/strong&gt; Yes&lt;br&gt;
&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;https://&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The scheme specifies which application will be used by a web server (app on Windows/i0S/Android) to open a URL. &lt;/p&gt;

&lt;p&gt;For example, opening a URL with the scheme &lt;code&gt;mailto://&lt;/code&gt; will open your webmail application.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Common examples: &lt;code&gt;https://&lt;/code&gt;, &lt;code&gt;http://&lt;/code&gt; , &lt;code&gt;ftp://&lt;/code&gt;, &lt;code&gt;mailto://&lt;/code&gt;, &lt;code&gt;file://&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Custom app examples: &lt;code&gt;facetime://&lt;/code&gt;, &lt;code&gt;slack://&lt;/code&gt;, &lt;code&gt;steam://&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Browser specific examples: &lt;code&gt;about://&lt;/code&gt;, &lt;code&gt;chrome://&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Additional browser examples: &lt;code&gt;data://&lt;/code&gt;, &lt;code&gt;javascript://&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#authority-component"&gt;
  &lt;/a&gt;
  Authority component
&lt;/h2&gt;




&lt;p&gt;&lt;strong&gt;Alternative naming:&lt;/strong&gt; HTTP authentication, credentials, authorization&lt;br&gt;
&lt;strong&gt;Required:&lt;/strong&gt; No&lt;br&gt;
&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;admin:pass@&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Basic authorization to a web/app resource indicated by  &lt;code&gt;@&lt;/code&gt; (at) sign.&lt;br&gt;
Login &lt;code&gt;admin&lt;/code&gt; is separated from password &lt;code&gt;pass&lt;/code&gt; using &lt;code&gt;:&lt;/code&gt; (colon) sign&lt;br&gt;
In some cases password is optional (e.g. &lt;code&gt;https://admin@example.com&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#host-component"&gt;
  &lt;/a&gt;
  Host component
&lt;/h2&gt;




&lt;p&gt;&lt;strong&gt;Alternative naming:&lt;/strong&gt; Hostname&lt;br&gt;
&lt;strong&gt;Required:&lt;/strong&gt; Yes&lt;br&gt;
&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;a.b.example.com&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The Host consists of multiple domain names separated by &lt;code&gt;.&lt;/code&gt; (dot) sign.&lt;br&gt;
Domain name with level &amp;gt; 2 is called sub-domain&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;a&lt;/code&gt;                   - fourth-level domain (sub-domain)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;b&lt;/code&gt;                   - third-level domain (sub-domain). &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;example&lt;/code&gt;    - second-level domain (domain name)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;com&lt;/code&gt;            - top/first-level domain (TLD)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The host can be an IP address in IPv4 (e.g. &lt;code&gt;193.184.216.34&lt;/code&gt;)&lt;br&gt;
or IPv6 (e.g. &lt;code&gt;[2a00:1450:400e:80a::200e]&lt;/code&gt;) format&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#port-component"&gt;
  &lt;/a&gt;
  Port component
&lt;/h2&gt;




&lt;p&gt;&lt;strong&gt;Required:&lt;/strong&gt; Yes&lt;br&gt;
&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;888&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The port component indicates which server we are referring to on the target host&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;:&lt;/code&gt; (colon) sign indicates port component usage. &lt;code&gt;888&lt;/code&gt; is the port number&lt;/p&gt;

&lt;p&gt;The server can accept connections on multiple ports. E.g. port numbers &lt;code&gt;80&lt;/code&gt; and &lt;code&gt;443&lt;/code&gt; can be used by a single server:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;80&lt;/code&gt;   - port number is used for basic web connection&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;443&lt;/code&gt; - port number is used for secure (TLS/SSL) web connection&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The port &lt;code&gt;:443&lt;/code&gt; or &lt;code&gt;:80&lt;/code&gt; is omitted when a web page has &lt;code&gt;https://&lt;/code&gt; or &lt;code&gt;http://&lt;/code&gt; scheme&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#path-component"&gt;
  &lt;/a&gt;
  Path component
&lt;/h2&gt;




&lt;p&gt;&lt;strong&gt;Required:&lt;/strong&gt; No&lt;br&gt;
&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;/users/index.php&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Usually the Path component indicates a path to target file on a server&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;/&lt;/code&gt;                 -  the root path/folder. Let's imagine it is called &lt;code&gt;htdocs&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;users&lt;/code&gt;              -  folder named &lt;code&gt;users&lt;/code&gt; inside of &lt;code&gt;htdocs&lt;/code&gt; folder&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;/index.php&lt;/code&gt; - file named &lt;code&gt;index.php&lt;/code&gt; inside of &lt;code&gt;users&lt;/code&gt; folder&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In some cases, the Path component can use custom mapping/scheme/rewrite rule. The path segments can be linked to a function/method in different files on a server:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;/users/list&lt;/code&gt;         - function &lt;code&gt;list&lt;/code&gt; in &lt;code&gt;users.php&lt;/code&gt; file.&lt;br&gt;
&lt;em&gt;show list of all users&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;/users/1/read&lt;/code&gt; - function &lt;code&gt;read&lt;/code&gt; with argument &lt;code&gt;ID&lt;/code&gt; in &lt;code&gt;users.php&lt;/code&gt; file. &lt;br&gt;
&lt;em&gt;show info of user with ID = 1&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;/users/images&lt;/code&gt; - function &lt;code&gt;users&lt;/code&gt; in &lt;code&gt;image-collection.php&lt;/code&gt; file. &lt;br&gt;
&lt;em&gt;show images of all users&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#query-component"&gt;
  &lt;/a&gt;
  Query component
&lt;/h2&gt;




&lt;p&gt;&lt;strong&gt;Alternative naming:&lt;/strong&gt; Query string, Search string&lt;br&gt;
&lt;strong&gt;Required:&lt;/strong&gt; No&lt;br&gt;
&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;?q=bob&amp;amp;role=2&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The Query component always starts with a &lt;code&gt;?&lt;/code&gt; (question) sign. &lt;br&gt;
It consists of key-value pairs. The value is assigned to a key using the &lt;code&gt;=&lt;/code&gt; (equals) sign. &lt;br&gt;
&lt;br&gt; Key-value pairs are separated using &lt;code&gt;&amp;amp;&lt;/code&gt; (ampersand) sign.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;?&lt;/code&gt;       - starting symbol that indicates presence of Query component &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;q&lt;/code&gt;       - the first key&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;=&lt;/code&gt;       - the sign, that assigns first value to a first key&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;bob&lt;/code&gt;   -  the first value&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;&amp;amp;&lt;/code&gt;       -  the key and value pair separator&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;role&lt;/code&gt;  - the second key&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;=&lt;/code&gt;       - the sign, that assigns second value to a second key&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;2&lt;/code&gt;       - the second value&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Example of logic behind this query: &lt;em&gt;get all users named &lt;code&gt;bob&lt;/code&gt; with role ID &lt;code&gt;2&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hash-component"&gt;
  &lt;/a&gt;
  Hash component
&lt;/h2&gt;




&lt;p&gt;&lt;strong&gt;Alternative naming:&lt;/strong&gt; Anchor&lt;br&gt;
&lt;strong&gt;Required:&lt;/strong&gt; No&lt;br&gt;
&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;#info&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Usually used by client-side scripting language named &lt;code&gt;Javascript&lt;/code&gt;&lt;br&gt;
By default - the browser will make a focus on an element with &lt;code&gt;id&lt;/code&gt; after &lt;code&gt;#&lt;/code&gt; (hash) sign. In our case, the focus will be made on an element with ID &lt;code&gt;info&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;#&lt;/code&gt;      - starting symbol that indicates the presence of Hash component&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;info&lt;/code&gt; - the value of a Hash component&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example of logic behind this hash: &lt;em&gt;show tab with basic info for found users&lt;/em&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Thanks for reading 👍&lt;/p&gt;

&lt;p&gt;Follow me on Twitter - &lt;a href="https://twitter.com/therceman"&gt;https://twitter.com/therceman&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>codenewbie</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How to Build Java Applications Today: August 16, 2021</title>
      <author>Karsten Silz</author>
      <pubDate>Mon, 16 Aug 2021 21:21:21 +0000</pubDate>
      <link>https://dev.to/ksilz/how-to-build-java-applications-today-august-16-2021-32je</link>
      <guid>https://dev.to/ksilz/how-to-build-java-applications-today-august-16-2021-32je</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;p&gt;Will Project Loom kill reactive programming, more VS Code Java improvements, JDK Mission Control 8.1.0, Spring Data 2021.0.4 &amp;amp; 2020.0.12, Quarkus 2.1.2, Micronaut 2.5.12.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#readme"&gt;
  &lt;/a&gt;
  README
&lt;/h2&gt;

&lt;p&gt;This is &lt;strong&gt;issue #49&lt;/strong&gt; of my weekly newsletter, “How To Build Java Applications Today”. I read all the Java newsletters, so &lt;strong&gt;you&lt;/strong&gt; don’t have to! And it’s “Java news with a smile”.&lt;/p&gt;

&lt;p&gt;If you like my newsletter, then &lt;a href="https://bpfnl.substack.com"&gt;subscribe to it on Substack&lt;/a&gt;! Or read it on &lt;a href="https://dev.to/ksilz/series/11995"&gt;dev.to&lt;/a&gt;,  the &lt;a href="https://thejavacafe.com/ksilz/series/1"&gt;Java Cafe&lt;/a&gt;, or &lt;a href="https://ksilz.medium.com"&gt;Medium&lt;/a&gt;. Even better: Share it with people who may be interested.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#quote-of-the-week"&gt;
  &lt;/a&gt;
  Quote of the Week
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Venture backed companies fail when they run out of money. Bootstrappers fail when they run out of motivation.&lt;/em&gt;&lt;br&gt;
&lt;a href="https://twitter.com/robwalling/status/1397568680880443393"&gt;Rob Walling&lt;/a&gt;, a &lt;a href="https://en.wikipedia.org/wiki/Rob_Walling"&gt;serial entrepreneur&lt;/a&gt;, has a point - but bootstrappers need money, too.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#standup"&gt;
  &lt;/a&gt;
  Stand-Up
&lt;/h2&gt;

&lt;p&gt;It’s still August, it’s still vacation time, and there’s still not much happening in Java land. So I hope my readers enjoy the sun and their vacation! And that’s almost an excuse for not reading newsletters like this, “almost” being the important word here! 😉&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#code-review"&gt;
  &lt;/a&gt;
  Code Review
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#issue-48-from-august-9-2021"&gt;
  &lt;/a&gt;
  Issue 48 from August 9, 2021
&lt;/h3&gt;

&lt;p&gt;I wrote &lt;a href="https://bpfnl.substack.com/p/how-to-build-java-applications-today-3b0"&gt;last week&lt;/a&gt; that Java climbed to #2 in the RedMonk Ranking. That is true. I also noted that Java is ahead of Python. That is false: Java and Python share the #2 spot.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#advertisement"&gt;
  &lt;/a&gt;
  ADVERTISEMENT
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#22-years-of-fullstack-java-for-hire-next-january"&gt;
  &lt;/a&gt;
  22 YEARS OF FULL-STACK JAVA FOR HIRE NEXT JANUARY
&lt;/h3&gt;

&lt;p&gt;I’m a full-stack Java developer with 22 years of experience, looking for a project in January 2022, in Milton Keynes, London, or remote. I’ll work as a contractor or fixed-term employee but don’t take permanent positions. &lt;/p&gt;

&lt;p&gt;Interested? Then check out my resume &amp;amp; work samples!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://ksilz.com/"&gt;CHECK OUT MY RESUME &amp;amp; WORK SAMPLES &lt;/a&gt;&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#bookmarks"&gt;
  &lt;/a&gt;
  Bookmarks
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#java"&gt;
  &lt;/a&gt;
  Java
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#will-project-loom-kill-reactive-programming"&gt;
  &lt;/a&gt;
  Will Project Loom Kill Reactive Programming?
&lt;/h4&gt;

&lt;p&gt;Oracle’s &lt;a href="https://wiki.openjdk.java.net/display/loom/Main"&gt;Project Loom&lt;/a&gt; reinvents threads in Java. That’s why it competes with reactive programming in Java. Project lead Ron Pressler claimed last year, as a fact, that “&lt;a href="https://youtu.be/EDVesJ-yJ6U?t=902"&gt;not many people like&lt;/a&gt;” reactive programming. Earlier this year, he was more mellowed, saying that Project Loom exists because debugging a reactive program is so much harder (see &lt;a href="https://bpfnl.substack.com/p/how-to-build-java-applications-today-068"&gt;issue #39&lt;/a&gt;, section “Why Do We Need Project Loom?”).&lt;/p&gt;

&lt;p&gt;Well, now we’re back to fighting words: Brian Goetz, the architect for the Java language at Oracle, says that “&lt;a href="https://youtu.be/9si7gK94gLo?t=1163"&gt;Project Loom will kill reactive programming&lt;/a&gt;”. Like Ron before, Brian argues that reactive programming scales nicely but is too difficult to program. And once Java threads and their simple usage scale nicely, too, we don’t need reactive programming anymore.&lt;/p&gt;

&lt;p&gt;Here’s the part I don’t understand: With reactive streams, a &lt;a href="https://www.baeldung.com/reactor-core"&gt;consumer receives multiple values over time from a producer&lt;/a&gt;. And the consumer can tell the producer to slow down (“backpressure”). These seem like useful abstractions. Do they disappear with Project Loom? Or will they be a library on top of Project Loom?&lt;/p&gt;

&lt;p&gt;Meanwhile, Ron Pressler gave an insight into why Project Loom &lt;a href="https://youtu.be/EO9oMiL1fFo?t=2133"&gt;“just” reimplemented Java threads&lt;/a&gt;: Java threads have the advantage over “async/await” that the runtime &lt;a href="https://youtu.be/EO9oMiL1fFo?t=921"&gt;can switch between threads everywhere in the code&lt;/a&gt; except for a critical section (“synchronized”). And Oracle can do Project Loom because they &lt;a href="https://youtu.be/EO9oMiL1fFo?t=1101"&gt;can change the internal JVM representation of a thread&lt;/a&gt;. Finally, he described “structured concurrency” as a &lt;a href="https://youtu.be/EO9oMiL1fFo?t=2651"&gt;future Loom feature&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;try (var execute =
  Executors.newVirtualThreadExecutor(factory)
           .withDeadline(Instant.now().plusSeconds(30))) {
    executor.submit(task1);
    executor.submit(task2);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So here we’re submitting two tasks in parallel, wait for both of them to finish, and cancel if we’re not finished within 30 seconds. Today, this requires additional libraries.&lt;/p&gt;

&lt;p&gt;So, when can we try Project Loom? “Soon” is what both said. So that means a preview in Java 18 next March at the earliest, possibly only Java 19 in September 2022. Then it will take probably at least two releases to get finalized. My guess is 2023 for Project Loom in production. Now, most organizations only use the Java LTS releases, so they’ll get their hands on Project Loom in September 2024 with Java 23.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/9si7gK94gLo"&gt;Brian Goetz interview&lt;/a&gt;, &lt;a href="https://youtu.be/EO9oMiL1fFo"&gt;Ron Pressler presentation&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#tools"&gt;
  &lt;/a&gt;
  Tools
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#more-vs-code-java-improvements"&gt;
  &lt;/a&gt;
  More VS Code Java Improvements
&lt;/h4&gt;

&lt;p&gt;Last month I wrote an &lt;a href="https://www.infoq.com/news/2021/07/visual-studio-code-java-ide"&gt;InfoQ article&lt;/a&gt; about how Microsoft’s Visual Studio Code (VS Code) boosted its Java IDE capabilities. Well, Microsoft didn’t stop there: The July release of VS Code makes it easier to run, view and search tests in Java. And from the department of “Duh!”: Microsoft “realized that Maven dependency conflict can be tricky to handle”, so they improved the display of Maven conflict resolution.&lt;/p&gt;

&lt;p&gt;But there’s more: The &lt;a href="https://devblogs.microsoft.com/java/java-on-visual-studio-code-update-june-2021/"&gt;roadmap for the rest of the year&lt;/a&gt; includes a better edit/compile/debug cycle, support for Gradle, more Java versions and Spring for Remote Development(using a container or remote machine &lt;a href="https://code.visualstudio.com/docs/remote/remote-overview"&gt;as a development environment&lt;/a&gt;), and support for Project Loom (see above).&lt;/p&gt;

&lt;p&gt;So it seems VS Code could be a serious competitor for Eclipse and Netbeans early next year. I recently switched from JetBrains WebStorm to VS Code for website development and like VS Code. It certainly feels snappier than WebStorm to me. And unlike JetBrains IDEs, it can update most plugins without a complete restart - yay!&lt;/p&gt;

&lt;p&gt;Another benefit of VS Code for us Java developers could be convenient support for other languages: Python, Rust, Go, … - all in one IDE. It’s probably more robust than what Eclipse currently offers. And with JetBrains, we’d have to run &lt;a href="https://www.jetbrains.com/products/#type=ide"&gt;multiple  IDEs&lt;/a&gt; that - I think - don’t share plugins, configuration settings, or keyboard shortcuts by default.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://foojay.io/today/vs-code-java-july-2021-update-new-testing-experience-maven-improvements-and-product-roadmap-progress-update/"&gt;July update&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#releases"&gt;
  &lt;/a&gt;
  Releases
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#jdk-mission-control-810"&gt;
  &lt;/a&gt;
  JDK Mission Control 8.1.0
&lt;/h4&gt;

&lt;p&gt;This tool visualizes Java Flight Recorder (JFR) data and therefore helps to profile Java in production (see &lt;a href="https://bpfnl.substack.com/p/how-to-build-java-applications-today-b5c"&gt;issue #43&lt;/a&gt;, section “Free Java Production Profiling To Whither Away?”). It now needs Java 11+ and Eclipse 2021-03 to run and reads in JFR data about 25% faster. It also recognizes the memory allocation JFR event from Java 16 (see &lt;a href="https://bpfnl.substack.com/p/how-to-build-java-applications-today-b38"&gt;issue #25&lt;/a&gt;, section “Profiling in Production?”) and has a new view for constant values in the JFR recording.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://foojay.io/today/jdk-mission-control-8-1-0-released/"&gt;Announcement&lt;/a&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#spring-data-202104-amp-2020012"&gt;
  &lt;/a&gt;
  Spring Data 2021.0.4 &amp;amp; 2020.0.12
&lt;/h4&gt;

&lt;p&gt;Both these libraries require (?) the upcoming Spring Boot 2.4.10 and 2.5.4 releases. It’s business as usual: Bug fixes and dependency upgrades for the 15 (version 2021.0.4) / 16 (2020.0.12) sub-projects, all listed on the announcement page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://spring.io/blog/2021/08/12/spring-data-2021-0-4-and-2020-0-12-released"&gt;Announcement&lt;/a&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#quarkus-212"&gt;
  &lt;/a&gt;
  Quarkus 2.1.2
&lt;/h4&gt;

&lt;p&gt;Quarkus marches on with another bugfix release. The changelog has &lt;a href="https://github.com/quarkusio/quarkus/releases/tag/2.1.2.Final"&gt;35 entries&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://quarkus.io/blog/quarkus-2-1-2-final-released/"&gt;Announcement&lt;/a&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#micronaut-2512"&gt;
  &lt;/a&gt;
  Micronaut 2.5.12
&lt;/h4&gt;

&lt;p&gt;Quarkus isn’t the only Spring Boot challenger in town, though it probably is the fastest-releasing one: This minor release from &lt;a href="https://micronaut.io"&gt;Micronaut&lt;/a&gt; has seven changes, mostly documentation updates.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/micronaut-projects/micronaut-core/releases/tag/v2.5.12"&gt;Changelog&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#about"&gt;
  &lt;/a&gt;
  About
&lt;/h2&gt;

&lt;p&gt;Karsten Silz is the author of this newsletter. He is a full-stack web &amp;amp; mobile developer with 22 years of Java experience, author, speaker, and marathon runner. Karsten got a Master's degree in Computer Science at the Dresden University of Technology (Germany) in 1996.&lt;/p&gt;

&lt;p&gt;Karsten has worked in Europe and the US. He co-founded a software start-up in the US in 2004. Karsten led product development for 13 years and left after the company was sold successfully. He co-founded the UK SaaS start-up "&lt;a href="https://yourhomeingoodhands.co.uk/"&gt;Your Home in Good Hands&lt;/a&gt;" as CTO in 2020. Since 2019, Karsten also works as a contractor in the UK.&lt;/p&gt;

&lt;p&gt;Karsten has &lt;a href="https://bpfnl.substack.com/"&gt;this newsletter&lt;/a&gt;, a &lt;a href="https://betterprojectsfaster.com/"&gt;developer website&lt;/a&gt;, and a &lt;a href="https://ksilz.com/"&gt;contractor site&lt;/a&gt;. He's on &lt;a href="https://www.linkedin.com/in/ksilz/"&gt;LinkedIn&lt;/a&gt;, &lt;a href="https://twitter.com/karsilz"&gt;Twitter&lt;/a&gt;, and &lt;a href="https://github.com/ksilz"&gt;GitHub&lt;/a&gt;. Karsten is also an &lt;a href="https://www.infoq.com/profile/Karsten-Silz"&gt;author at InfoQ&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>java</category>
      <category>bpf</category>
    </item>
    <item>
      <title>Team Topologies: Organizing Business and Technology Teams </title>
      <author>Conor Bronsdon</author>
      <pubDate>Mon, 16 Aug 2021 21:14:06 +0000</pubDate>
      <link>https://dev.to/linearb/team-topologies-organizing-business-and-technology-teams-kb7</link>
      <guid>https://dev.to/linearb/team-topologies-organizing-business-and-technology-teams-kb7</guid>
      <description>&lt;p&gt;Effective software teams are essential for any organization to deliver value continuously and sustainably. But how do you build the best team organization for your specific goals, culture, and needs?&lt;/p&gt;

&lt;p&gt;In the first episode of a two-part series, Matthew Skelton and Manuel Pais, authors of the new book &lt;a href="https://teamtopologies.com/book"&gt;Team Topologies: Organizing Business and Technology Teams for Fast Flow&lt;/a&gt;, join Dev Interrupted to share their secrets to successful team patterns and organization design. They also discuss how to build adaptive team models capable of evolving with technological change and organizational maturity.&lt;/p&gt;

&lt;p&gt;Both guests are DevOps leaders: Matthew coined the term “Team Topologies” and carries a Master’s Degree in Neuroscience from Oxford University while Manuel is a DevOps thought leader and co-founder of DevOps Lisbon.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#listen-to-the-full-episode"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Listen to the full episode&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/3YIQL38DKwllRP5ZRgl7BP"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#episode-highlights-include"&gt;
  &lt;/a&gt;
  Episode Highlights Include:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The four fundamental types of teams&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Why a fast flow of change should be the goal&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How to achieve faster flow and more effective feedback loops&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Why handoffs between teams are a bad idea&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What are “stream-aligned” teams?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How to think about trust boundaries between remote teams&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9tnnePBE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3w8a1hz1i2wtcigszwu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9tnnePBE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3w8a1hz1i2wtcigszwu.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you haven't already heard&lt;/strong&gt;, Dev Interrupted is partnering with Dzone to host &lt;strong&gt;INTERACT:&lt;/strong&gt; An interactive, community-driven, digital conference on September 30th - by engineering leaders, for engineering leaders. 1 day, 10 speakers, 100s of engineers and engineering leaders, all free.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#register-now"&gt;
  &lt;/a&gt;
  &lt;a href="https://devinterrupted.com/event/interact/"&gt;Register Now&lt;/a&gt;
&lt;/h2&gt;




&lt;h2&gt;
  &lt;a href="#join-the-dev-interrupted-server"&gt;
  &lt;/a&gt;
  Join the Dev Interrupted Server
&lt;/h2&gt;

&lt;p&gt;With over 1500 members, the Dev Interrupted Discord Community is the best place for Engineering Leaders to engage in daily conversation. No sales people allowed. &lt;a href="https://discord.com/invite/devinterrupted"&gt;Join the community &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q0DNmje9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2878/0%2Awut45_ZDwqsc279f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q0DNmje9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2878/0%2Awut45_ZDwqsc279f.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Originally published at &lt;a href="https://devinterrupted.com/podcast/team-topologies-1-organizing-business-and-technology-teams/"&gt;https://devinterrupted.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>devops</category>
      <category>techtalks</category>
      <category>culture</category>
      <category>management</category>
    </item>
    <item>
      <title>Bitdefender: My Honest Review</title>
      <author>Maxim King</author>
      <pubDate>Mon, 16 Aug 2021 20:30:02 +0000</pubDate>
      <link>https://dev.to/maximking1/bitdefender-my-honest-review-2haj</link>
      <guid>https://dev.to/maximking1/bitdefender-my-honest-review-2haj</guid>
      <description>&lt;p&gt;Bitdefender is a exceptional AntiVirus for Windows, it starts around $29.99 (This is the on sale price) and the Total Security Home Plan starts at $44.99 on sale. In this review I will be testing using the Total Security Home Plan.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h2&gt;

&lt;p&gt;Bitdefender offers some great Protection Features for securing your devices, all plans include there Real Time Protection, Network Threats Prevention, Threat Defender, Multi-Layer Ransomware Protection and there VPN (200MB Of Daily Traffic). The Total Security Plan I’m using has a few each features such as the AntiSpam and the Anti-Theft.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#free-plan"&gt;
  &lt;/a&gt;
  Free Plan
&lt;/h2&gt;

&lt;p&gt;You can download there Free Plan from &lt;a href="https://www.bitdefender.com/toolbox/"&gt;https://www.bitdefender.com/toolbox/&lt;/a&gt; it includes all the features above expect the Network Protection, Ransomewere Protection, Rescue Environment, AutoPoilt (Auto Recommendations) and VPN all the details can be found here: &lt;a href="https://www.bitdefender.com/solutions/free.html"&gt;https://www.bitdefender.com/solutions/free.html&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#detection-tests"&gt;
  &lt;/a&gt;
  Detection Tests
&lt;/h2&gt;

&lt;p&gt;When testing out Bitdefender on my Windows 10 Virtual Machine with 10GB RAM, 4 Virtual Cores and VMWare Workstaion Pro. I got a 10 Websites which had malware on, 9 out of the 10 websites were detcted and blocked. When downloading a coulple Malware Samples i got the same results as expetected it blocked all samples i tested on the machine which were live. For anybody looking for a reasonably priced windows AntiVirus i would suggest getting it while on sale.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bitdefender-vpn"&gt;
  &lt;/a&gt;
  Bitdefender VPN
&lt;/h2&gt;

&lt;p&gt;The Bitdefender VPN is a good addon for the Bitdefender Package, it offers the use off over 48 Locations, i used the United Kingdom servers and had great preformane but the speeds were affected a bit. Still not a massive issue but does knock a couple of MBPS of your Internet.. &lt;/p&gt;

</description>
      <category>bitdefender</category>
      <category>antivirus</category>
      <category>security</category>
      <category>cybersecurity</category>
    </item>
    <item>
      <title>Webpack in 1 minute</title>
      <author>Rishabh Singh ⚡</author>
      <pubDate>Mon, 16 Aug 2021 20:21:24 +0000</pubDate>
      <link>https://dev.to/mindninjax/webpack-in-1-minute-140h</link>
      <guid>https://dev.to/mindninjax/webpack-in-1-minute-140h</guid>
      <description>&lt;p&gt;If you're a web developer, then it's likely that you've heard the term - Webpack. What is Webpack and how does it fit into modern web development?&lt;/p&gt;

&lt;p&gt;That's what you'll learn in a few minutes! Keep reading!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--urNQBkTS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2A5PpB0JEPdB30wER8_XWuIQ.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--urNQBkTS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2A5PpB0JEPdB30wER8_XWuIQ.jpeg" alt="https://miro.medium.com/max/1400/1*5PpB0JEPdB30wER8_XWuIQ.jpeg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In general, Webpack is a module bundler for JavaScript applications.&lt;/p&gt;

&lt;p&gt;Still unclear? I'll break it down for you!&lt;/p&gt;

&lt;p&gt;Web applications usually have many files, such as images, assets, dependencies, HTML files, style sheets, etc.&lt;/p&gt;

&lt;p&gt;Whenever we want the web app to be loaded on a browser, the browser first must download all these files. As a result, the browser may have difficulty maintaining the order of script tags to avoid breaking dependent code, etc.&lt;/p&gt;

&lt;p&gt;Thanks to the ES6 release, now we have Webpack which simply takes all of these related files and bundles them into one, reducing the number of files and making the downloading task simple &amp;amp; less error prone.&lt;/p&gt;

&lt;p&gt;That's all!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#connect-with-me"&gt;
  &lt;/a&gt;
  Connect with me
&lt;/h2&gt;

&lt;p&gt;Feel free to connect with me on &lt;a href="https://twitter.com/mindninjaX"&gt;Twitter&lt;/a&gt;, &lt;a href="https://www.linkedin.com/in/mindninjax/"&gt;LinkedIn&lt;/a&gt; &amp;amp; &lt;a href="https://github.com/mindninjaX"&gt;GitHub&lt;/a&gt; for more awesome content like this. &lt;/p&gt;

&lt;p&gt;Post a comment/discussion here for any feedback or queries &amp;amp; promise I will try my best to help you :D&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#support"&gt;
  &lt;/a&gt;
  Support
&lt;/h2&gt;

&lt;p&gt;Thank you so much for reading! I hope you learnt something new today. Please leave a like, a lovely comment or feedback &amp;amp; also consider following me as I regularly post useful &amp;amp; informative articles to help you become a better programmer. &lt;/p&gt;

&lt;p&gt;If you like my work please consider &lt;a href="https://buymeacoff.ee/mindninjaX"&gt;Buying me a Coffee&lt;/a&gt; so that I can bring more projects, more articles for you.&lt;/p&gt;



&lt;center&gt;&lt;a href="https://buymeacoff.ee/mindninjaX"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SNezDmj5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5irx7eny4412etlwnc64.png" alt="https://dev-to-uploads.s3.amazonaws.com/i/5irx7eny4412etlwnc64.png"&gt;&lt;/a&gt;&lt;/center&gt;

</description>
      <category>webpack</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>react</category>
    </item>
    <item>
      <title>SE Internship Log[3] </title>
      <author>Ruheni Alex</author>
      <pubDate>Mon, 16 Aug 2021 19:59:00 +0000</pubDate>
      <link>https://dev.to/ruheni/se-internship-log-3-16am</link>
      <guid>https://dev.to/ruheni/se-internship-log-3-16am</guid>
      <description>&lt;p&gt;Hello there internet stranger, 👋🏽&lt;/p&gt;

&lt;p&gt;This is the 4th installment of the Software  Engineering(SE) Log.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#technical-skills"&gt;
  &lt;/a&gt;
  Technical Skills
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#toolbox"&gt;
  &lt;/a&gt;
  Toolbox 🧰
&lt;/h3&gt;

&lt;p&gt;This week, I'll share a some libraries/ tools I discovered that I found helpful:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#tsnode-raw-require-endraw-flag"&gt;
  &lt;/a&gt;
  ts-node &lt;code&gt;--require&lt;/code&gt; flag
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://www.npmjs.com/package/ts-node"&gt;&lt;code&gt;ts-node&lt;/code&gt;&lt;/a&gt;transforms TypeScript into JavaScript, which is executed in Node.js.&lt;/p&gt;

&lt;p&gt;A useful flag I discovered is the &lt;code&gt;-r&lt;/code&gt;/ &lt;code&gt;--require&lt;/code&gt; that enables you to execute a file with an export (aka a module):&lt;/p&gt;

&lt;p&gt;For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// path to file on your computer: /src/hello.ts&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sayHello&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello there&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can execute this file by running:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx ts-node &lt;span class="nt"&gt;-r&lt;/span&gt; ./src/hello.ts
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#reading-and-writing-files-with-raw-fsjetpack-endraw-"&gt;
  &lt;/a&gt;
  Reading and writing files with &lt;code&gt;fs-jetpack&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://www.npmjs.com/package/fs-jetpack"&gt;&lt;code&gt;fs-jetpack&lt;/code&gt;&lt;/a&gt; is a utility library that makes interacting with the file-system delightful.&lt;br&gt;
This can be the CRUD of files and directories - creating, reading, updating and deleting.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#soft-skills"&gt;
  &lt;/a&gt;
  Soft Skills
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#consistency"&gt;
  &lt;/a&gt;
  Consistency
&lt;/h3&gt;

&lt;p&gt;Sometimes – or most times – software engineering gets tough. Tasks may be daunting, issues may be vague, or sometimes getting help/ feedback on a task may take a little longer than expected.&lt;/p&gt;

&lt;p&gt;It's frustrating. The feeling sucks!&lt;/p&gt;

&lt;p&gt;The frustration is part of the learning/ growth process.&lt;/p&gt;

&lt;p&gt;There will be days you will crush it! &lt;/p&gt;

&lt;p&gt;And sometimes, the simplest of tasks can seem impossible.&lt;/p&gt;

&lt;p&gt;What matters the most is showing up and making an attempt to fix and a bug, close an issue, or just give feedback on a project. &lt;/p&gt;

&lt;p&gt;A hack that I use to "trick" my brain to getting it done is starting with the simplest task to build up some momentum. For example, opening VS Code, starting the app server, and breaking something to try fix it.&lt;/p&gt;

&lt;p&gt;Or, take a break. It's totally fine.&lt;/p&gt;

&lt;p&gt;I've discovered that I get most of my eureka moments when I take a walk, I'm in the shower or lying on the bed &lt;em&gt;– thinking about the finality of death and how life is meaningless and we're all going to die someday and nothing we do matters.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;💡&lt;/p&gt;

&lt;p&gt;Till next week. ✌🏽&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Your first Introduction to TypeScript</title>
      <author>Eric The Coder</author>
      <pubDate>Mon, 16 Aug 2021 19:54:52 +0000</pubDate>
      <link>https://dev.to/ericchapman/your-first-introduction-to-typescript-3p6h</link>
      <guid>https://dev.to/ericchapman/your-first-introduction-to-typescript-3p6h</guid>
      <description>&lt;p&gt;Follow me on Twitter: &lt;a href="https://twitter.com/EricTheCoder_"&gt;https://twitter.com/EricTheCoder_&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-typescript"&gt;
  &lt;/a&gt;
  What is Typescript?
&lt;/h2&gt;

&lt;p&gt;TypeScript is a javascript superset&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#is-typescript-the-same-as-javascript"&gt;
  &lt;/a&gt;
  Is TypeScript the same as Javascript?
&lt;/h2&gt;

&lt;p&gt;Yes and No. TypeScript has been created by Microsoft and is built on top of javascript. &lt;/p&gt;

&lt;p&gt;In short, it is the same as Javascript but with added features.&lt;/p&gt;

&lt;p&gt;Everything you know from Javascript will be useful in TypeScript. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#which-one-should-i-learn-first"&gt;
  &lt;/a&gt;
  Which one should I learn first?
&lt;/h2&gt;

&lt;p&gt;You definitively learn Javascript first. If you don't know Javascript, you will have a hard time learning and understanding TypeScript.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-create-a-new-language-javascript-is-ok-isnt-it"&gt;
  &lt;/a&gt;
  Why create a new language? Javascript is ok, isn't it?
&lt;/h2&gt;

&lt;p&gt;When people start using JavaScript in complex applications, they quickly realize that JavaScript became hard to work in terms of OOP and difficult to find some bugs.&lt;/p&gt;

&lt;p&gt;TypeScript was developed by Microsoft to bridge this gap. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-what-exactly-typescript-adds-to-javascript"&gt;
  &lt;/a&gt;
  So what exactly TypeScript adds to javascript?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Powerful type system&lt;/li&gt;
&lt;li&gt;Type error checking at development time&lt;/li&gt;
&lt;li&gt;Better Object-Oriented Programming&lt;/li&gt;
&lt;li&gt;New features like Interfaces, Generics, etc.&lt;/li&gt;
&lt;li&gt;Meta-Programming like Decorators&lt;/li&gt;
&lt;li&gt;Compile to javascript that can run on an older browser&lt;/li&gt;
&lt;li&gt;Code Auto-completion in the editor&lt;/li&gt;
&lt;li&gt;And more...&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#anything-else-i-should-know"&gt;
  &lt;/a&gt;
  Anything else I should know?
&lt;/h2&gt;

&lt;p&gt;TypeScript does not run in the browser or with node.js like Javascript. To execute, TypeScript needs to be converted/compile to Javascript. &lt;/p&gt;

&lt;p&gt;Using TypeScript involves the use of a compiler. For example, if you have a file name app.ts, TypeScript compiler will create the javascript equivalent app.js. That one will be used to run your app.&lt;/p&gt;

&lt;p&gt;So that is why we say TypeScript help at development time. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-install-and-use-typescript-compiler"&gt;
  &lt;/a&gt;
  How to install and use TypeScript compiler
&lt;/h2&gt;

&lt;p&gt;You can install TypeScript globally on your dev machine with this command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npm install -g typescript
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To executer the compiler&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ tsc app.js

// or watch mode
$ tsc app.js -w
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In watch mode TypeScript will automatically re-compile your app.ts in app.js on every save.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#typescript-config"&gt;
  &lt;/a&gt;
  TypeScript config?
&lt;/h2&gt;

&lt;p&gt;There is a lot of config/setting available for TypeScript. I will not cover those in this introduction article but just want to let you know that TypeScript settings are store in a file called tsconfig.json. You can create this file with&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ tsc --int
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#typescript-101"&gt;
  &lt;/a&gt;
  TypeScript 101
&lt;/h2&gt;

&lt;p&gt;You will now learn how to use basic TypeScript features&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#core-types"&gt;
  &lt;/a&gt;
  Core Types
&lt;/h3&gt;

&lt;p&gt;One of the most valuable features of TypeScript is the type system. In TypeScript you can assign a type to a variable and TypeScript compiler will throw an error if anywhere in your code that type is not respected.&lt;/p&gt;

&lt;p&gt;To understand what type, we will do a TypeScript vs Javascript comparison.&lt;/p&gt;

&lt;p&gt;Here a regular Javascript code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;num1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;       &lt;span class="c1"&gt;// 30&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;10&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;// 1020&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example, result1 will be 30 and result2 will be 1020&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#why-result2-is-not-30"&gt;
  &lt;/a&gt;
  Why result2 is not 30?
&lt;/h4&gt;

&lt;p&gt;Since you supply double quotes, Javascript thinks your parameters are string and so execute the code with that logic without reporting any error.&lt;/p&gt;

&lt;p&gt;Now imagine the kind of damage this error could do in an accounting application. Finding that kind of bug in a 100k lines of code web application is very hard, very frustrating, and time-consuming.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#typescript-to-the-rescue"&gt;
  &lt;/a&gt;
  TypeScript to the rescue!
&lt;/h4&gt;

&lt;p&gt;Let's use the same code above but in TypeScript&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function add(num1: number, num2: number) {
  return num1 + num2
}

const result1 = add(10, 20).       // 30
const result2 = add("10", "20")  // editor/compile error
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The only difference is the :number type added after the parameter name&lt;/p&gt;

&lt;p&gt;In this exemple, the 'const result2 = add("10", "20")' line will report an error in the code editor and when compiling.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#type-inference"&gt;
  &lt;/a&gt;
  Type inference
&lt;/h3&gt;

&lt;p&gt;When a variable is initialized TypeScript can infer/detect the type of the variable automaticaly&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;99.95&lt;/span&gt;
&lt;span class="c1"&gt;// same as&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;amount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;99.95&lt;/span&gt; &lt;span class="c1"&gt;// best practice&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Both variables will be of type number.  The best practice is to let the TypeScript inference do its job since we set the initial value ourselves. That helps avoids repetitive code.&lt;/p&gt;

&lt;p&gt;Note that we only specify the type when the variable is not initialized with a value&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;
&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello World&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#object-type"&gt;
  &lt;/a&gt;
  object Type
&lt;/h3&gt;

&lt;p&gt;TypeScript will also infer the object type automatically&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mike Taylor&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;45&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Will result in TypeScript object type&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mike Taylor&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;45&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#array-type"&gt;
  &lt;/a&gt;
  Array type
&lt;/h3&gt;

&lt;p&gt;The syntax to declare an array is: type&lt;a href="https://dev.totype%20followed%20by%20the%20bracket%20%5B%5D"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;names&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mike&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Paul&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;amounts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#tuple-type"&gt;
  &lt;/a&gt;
  Tuple type
&lt;/h3&gt;

&lt;p&gt;Use when we need a fixed number of values in an array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;names&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mike&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#emun-type"&gt;
  &lt;/a&gt;
  Emun type
&lt;/h3&gt;

&lt;p&gt;Enum is mainly used to assign names to constants&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kr"&gt;enum&lt;/span&gt; &lt;span class="nx"&gt;Role&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ADMIN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;READ_ONLY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;AUTHOR&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Role&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ADMIN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also specify the key (key can be any type)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kr"&gt;enum&lt;/span&gt; &lt;span class="nx"&gt;Role&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ADMIN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;READ_ONLY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;AUTHOR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Role&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ADMIN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 100&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#any-type"&gt;
  &lt;/a&gt;
  Any type
&lt;/h3&gt;

&lt;p&gt;Use any as a fallback if you really don't know the type.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;any&lt;/span&gt;
&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;
&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello World&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that this is not a good practice. Try to avoid it!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#union-type"&gt;
  &lt;/a&gt;
  union type
&lt;/h3&gt;

&lt;p&gt;A variable can be flexible and be assigned with two type&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;combine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;item2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;item1&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;number&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;item2&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;number&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;item2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;item2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The syntax for union type is:  type2 | type2&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#type-alias"&gt;
  &lt;/a&gt;
  Type Alias
&lt;/h3&gt;

&lt;p&gt;We can create a custom type that will act as an alias for example a union type&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Dual&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Dual&lt;/span&gt;

&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#object-type-alias"&gt;
  &lt;/a&gt;
  object type alias
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mike&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// the syntax is then simplyfy&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;loadUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="nx"&gt;something&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// instead of&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;loadUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;stringl&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="nx"&gt;something&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#function-return-type"&gt;
  &lt;/a&gt;
  Function return type
&lt;/h3&gt;

&lt;p&gt;We can specify the return type of a function&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;num1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#void-return-type"&gt;
  &lt;/a&gt;
  Void return type
&lt;/h3&gt;

&lt;p&gt;When a function don't return any value TypeScript will infer the function to be type 'void'&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;displayMessage&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hi there&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#function-type"&gt;
  &lt;/a&gt;
  Function type
&lt;/h3&gt;

&lt;p&gt;The declaring syntax is: (var: type, var: type) ⇒ return type&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;num1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Function&lt;/span&gt;

&lt;span class="c1"&gt;// or more specific&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;
&lt;span class="nx"&gt;calc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#unknown-type"&gt;
  &lt;/a&gt;
  Unknown type
&lt;/h3&gt;

&lt;p&gt;Variable of type unknown will not be assignable except if we check the typeof the assignment.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;userInput&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;unknown&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;userInput&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;userName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;userInout&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#oop-in-typescript"&gt;
  &lt;/a&gt;
  OOP in TypeScript
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#class-declaration"&gt;
  &lt;/a&gt;
  class declaration
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Product&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;price&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;product1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;iPad&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#shorthand-properties-initialization"&gt;
  &lt;/a&gt;
  Shorthand properties initialization
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Product&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;product1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;iPad&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#access-modifiers-private-public-readonly-protected"&gt;
  &lt;/a&gt;
  Access Modifiers (private, public, readonly, protected)
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Product&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kr"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kr"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;price&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kr"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;displayProduct&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;product1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;iPad&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The public keyword is optional because that's the default modifier if none supply.&lt;/p&gt;

&lt;p&gt;p*&lt;em&gt;ublic&lt;/em&gt;* mean a variable or function available outside of the class&lt;/p&gt;

&lt;p&gt;p*&lt;em&gt;rivate&lt;/em&gt;* is for variables or functions not available outside of the class&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;readonly&lt;/strong&gt; is to variables private and readonly&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Protected&lt;/strong&gt; is for variables or functions available only inside the class or subclass&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#inherits"&gt;
  &lt;/a&gt;
  Inherits
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Friends&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#getters-and-setters"&gt;
  &lt;/a&gt;
  Getters and Setters
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Friend&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#static-properties-and-methods"&gt;
  &lt;/a&gt;
  Static properties and methods
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Product&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;defaultName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Product x&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;display&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;defaultName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;iPad&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#interface"&gt;
  &lt;/a&gt;
  interface
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;IsPerson&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;speak&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;me&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;IsPerson&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mike&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;speak&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;customer&lt;/span&gt; &lt;span class="kr"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;IsPerson&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kr"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;
  &lt;span class="kr"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kr"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;speak&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#generics"&gt;
  &lt;/a&gt;
  Generics
&lt;/h2&gt;

&lt;p&gt;When writing programs, one of the most important aspects is to build reusable components. This ensures that the program is flexible as well as scalable in the long term.&lt;/p&gt;

&lt;p&gt;Generics offer a way to create reusable components. Generics provide a way to make components work with any data type and not restrict to one data type. So, components can be called or used with a variety of data types. &lt;/p&gt;

&lt;p&gt;For example, if we want to create an interface with a data property that can contain a different object type&lt;/p&gt;

&lt;p&gt;First create the interface&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &amp;lt;T&amp;gt; is a placeholder for the type that will be added by TypeScript at compile time&lt;/p&gt;

&lt;p&gt;You can then use the generic interface in your code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;person1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mike&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Info about person&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// or&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;person1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mike&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Info about person&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;info2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example, the same interface has been used to store string and strings arrays.&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
