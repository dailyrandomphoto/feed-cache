<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>#30DaysofAppwrite : Installation</title>
      <author>Damodar Lohani</author>
      <pubDate>Sun, 02 May 2021 12:16:31 +0000</pubDate>
      <link>https://dev.to/appwrite/installing-appwrite-366o</link>
      <guid>https://dev.to/appwrite/installing-appwrite-366o</guid>
      <description>&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h2&gt;

&lt;p&gt;Appwrite is an open-source, self-hosted Backend-as-a-Service that makes app development &lt;strong&gt;easier&lt;/strong&gt; with a suite of SDKs and APIs to accelerate app development. &lt;a href="http://30days.appwrite.io/"&gt;#30DaysOfAppwrite&lt;/a&gt; is a month long event focused on giving developers a walkthrough of all of Appwrite's features, starting from the basics to more advanced features like cloud functions! Alongside we will also be building a fully featured Medium Clone to demonstrate how these concepts can be applied when building a real world app. We also have some exciting prizes for developers who follow along with us!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installing-appwrite"&gt;
  &lt;/a&gt;
  Installing Appwrite
&lt;/h2&gt;

&lt;p&gt;Let's kick off Day 2 of &lt;code&gt;#30DaysofAppwrite&lt;/code&gt; by discussing the first step of your Appwrite journey: &lt;strong&gt;Installing Appwrite&lt;/strong&gt;. We'll cover the different ways to install Appwrite, as well as some tips to debug common issues you may face during the installation.&lt;br&gt;
Appwrite uses Docker to install and run its services, so we can install Appwrite on any system that supports Docker, including MacOS, Linux and Windows. To develop locally on our machine, we need to first install Docker. If you have not already installed Docker, please visit the &lt;a href="https://docs.docker.com/engine/install/"&gt;Docker official installation docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Installing Appwrite on any platform is as simple as running a single command in the terminal/command prompt. We just need to choose the right command for our platform. Below are the installation commands for different platforms.&lt;br&gt;
Make sure you use the latest appwrite version from &lt;a href="https://appwrite.io/docs/installation"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#linux-macos-and-any-unix-compatible-machine"&gt;
  &lt;/a&gt;
  Linux, MacOS and any Unix Compatible Machine
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker run &lt;span class="nt"&gt;-it&lt;/span&gt; &lt;span class="nt"&gt;--rm&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--volume&lt;/span&gt; /var/run/docker.sock:/var/run/docker.sock &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--volume&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;/appwrite:/usr/src/code/appwrite:rw &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--entrypoint&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"install"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    appwrite/appwrite:0.7.2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#windows"&gt;
  &lt;/a&gt;
  Windows
&lt;/h2&gt;

&lt;p&gt;If you are on command prompt use&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="n"&gt;docker&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;-it&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;--rm&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;^&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;--volume&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;//var/run/docker.sock:/var/run/docker.sock&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;^&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;--volume&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"%cd%"&lt;/span&gt;&lt;span class="n"&gt;/appwrite:/usr/src/code/appwrite:rw&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;^&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;--entrypoint&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"install"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;^&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;appwrite/appwrite:0.7.2&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you are on powershell use&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="n"&gt;docker&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;-it&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;--rm&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;--volume&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;/var/run/docker.sock:/var/run/docker.sock&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;--volume&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;${pwd}&lt;/span&gt;&lt;span class="n"&gt;/appwrite:/usr/src/code/appwrite:rw&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;--entrypoint&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"install"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;appwrite/appwrite:0.7.2&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#possible-errors"&gt;
  &lt;/a&gt;
  Possible Errors
&lt;/h2&gt;

&lt;p&gt;If you run into issues during installation, here are some common problems to investigate. First make sure you have enough disk space and RAM to run Appwrite. Appwrite requires at least 1 CPU core and 512MB (2GB Recommended) of RAM. If ClamAV is installed, 2GB of RAM is required since ClamAV uses at least 1GB on its own. If your system doesn't have enough memory or CPU power, your installation may terminate without any information or error message. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Do note that ClamAV can be disabled if you are running low on resources. You can follow &lt;a href="https://dev.to/appwrite/learn-how-to-disable-clamav-in-your-appwrite-stack-and-reduce-memory-usage-2e37"&gt;this guide&lt;/a&gt; to learn how.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Another common error that might occur during installation is caused by the Docker Hub pull rate limits. The installation script needs to pull the &lt;code&gt;appwrite/appwrite&lt;/code&gt; Docker image from Docker Hub, so if you are not signed in to Docker Hub, you might run into this error. To resolve this error, you just need to login to Docker Hub using &lt;code&gt;docker login&lt;/code&gt; command. For more information visit the &lt;a href="https://docs.docker.com/docker-hub/download-rate-limit/"&gt;official Docker docs&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#upgrading-appwrite"&gt;
  &lt;/a&gt;
  Upgrading Appwrite
&lt;/h2&gt;

&lt;p&gt;If you already have an Appwrite server running and want to upgrade to new version, the Appwrite migration tool is there to help. In order to upgrade Appwrite, make sure you are on the same folder you ran your Appwrite installation script previously. This folder should contain a folder &lt;code&gt;appwrite&lt;/code&gt; inside which there should be your &lt;code&gt;docker-compose.yml&lt;/code&gt; and &lt;code&gt;.env&lt;/code&gt; files. Run the installation for the next version from the folder containing the &lt;code&gt;appwrite&lt;/code&gt; folder. Once you successfully install the new version, then you can run the migration tool. &lt;strong&gt;Make sure to backup your data, your &lt;code&gt;docker-compose.yml&lt;/code&gt; file and &lt;code&gt;.env&lt;/code&gt; file and settings before running the migration.&lt;/strong&gt;&lt;br&gt;
You can run the migration tool using the following command from the folder containing your &lt;code&gt;docker-compose.yml&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker-compose &lt;span class="nb"&gt;exec &lt;/span&gt;appwrite migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;More information on upgrading and migration can be found in the &lt;a href="https://appwrite.io/docs/upgrade"&gt;official docs&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installing-appwrite-on-cloud-providers"&gt;
  &lt;/a&gt;
  Installing Appwrite on Cloud Providers
&lt;/h2&gt;

&lt;p&gt;Installing Appwrite on cloud providers is not much different than installing locally. We can deploy Linux virtual machines on any cloud providers and then follow the UNIX installation code to install Appwrite.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#checking-the-health-of-your-appwrite-installation"&gt;
  &lt;/a&gt;
  Checking the Health of Your Appwrite Installation
&lt;/h2&gt;

&lt;p&gt;Once you have successfully installed Appwrite, you can check the health and status of your Appwrite server. In order to run initial checks, you can use Appwrite's &lt;code&gt;doctor&lt;/code&gt; command, executed via &lt;code&gt;docker-compose exec appwrite doctor&lt;/code&gt;. This command should be run from the directory you installed Appwrite in, where your &lt;code&gt;docker-compose.yml&lt;/code&gt; file exists.&lt;/p&gt;

&lt;p&gt;Running this command will show you the details of your Appwrite Server and status of various services.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8HsEN3T9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zb07wpesz9pinu4jwbp9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8HsEN3T9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zb07wpesz9pinu4jwbp9.png" alt="Appwrite Doctor"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#checking-the-logs"&gt;
  &lt;/a&gt;
  Checking the logs
&lt;/h2&gt;

&lt;p&gt;If you look at the &lt;code&gt;docker-compose.yml&lt;/code&gt; file, you can see the list of various different services. Whenever you have an issue, you can look into the logs of each service or the logs of whole stack. Still from the same directory containing your &lt;code&gt;docker-compose.yml&lt;/code&gt; file, you can run the following commands to view the logs.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;docker-compose logs&lt;/code&gt; : To view the logs of all the services together&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;docker-compose logs &amp;lt;name_of_the_service&amp;gt;&lt;/code&gt;: To view the logs of the individual service.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#credits"&gt;
  &lt;/a&gt;
  Credits
&lt;/h2&gt;

&lt;p&gt;We hope you liked this write up. You can follow &lt;a href="https://twitter.com/search?q=%2330daysofappwrite"&gt;#30DaysOfAppwrite&lt;/a&gt; on Social Media to keep up with all of our posts. The complete event timeline can be found &lt;a href="http://30days.appwrite.io"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://appwrite.io/discord"&gt;Discord Server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://appwrite.io/"&gt;Appwrite Homepage&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/appwrite"&gt;Appwrite's Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Feel free to reach out to us on Discord if you would like to learn more about Appwrite, Aliens or Unicorns 🦄. Stay tuned for tomorrow's article! Until then 👋&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Advice for new web designers</title>
      <author>mrtechobsessed</author>
      <pubDate>Sun, 02 May 2021 12:13:10 +0000</pubDate>
      <link>https://dev.to/echo_creations/advice-for-new-web-designers-1od6</link>
      <guid>https://dev.to/echo_creations/advice-for-new-web-designers-1od6</guid>
      <description>&lt;p&gt;Hi, how are you? I'm 15 years old and have always been into technology. Web design &amp;amp; development is something that's always interested me, and I have always messed around with it creating multiple html, CSS and JavaScript projects. I recently started using WordPress and made my first website for a relative, after that I got a few more bookings, and now I have five websites for my portfolio. I was wondering, as a beginner, if any of you had any advice for a beginner starting out with web design &amp;amp; development. How do you get inspiration for the design and UI of a website? How did you find your first clients? I'm open for any advice you can share! 😏&lt;/p&gt;

&lt;p&gt;For my websites, I use WordPress, Elementor, I also often add some coding to my websites just to spice things up and to do things you can't usually do with Elementor.&lt;/p&gt;

&lt;p&gt;Here is my website if you want to check it out: &lt;a href="https://echocreations.co.uk"&gt;https://echocreations.co.uk&lt;/a&gt;&lt;br&gt;
Although the mobile view still isn't finished as I have been too busy with my first few clients websites.&lt;/p&gt;

&lt;p&gt;Thanks so much!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Daily Share Price Notifications using Python, SQL and Africas Talking - Part One </title>
      <author>Zoo Codes</author>
      <pubDate>Sun, 02 May 2021 11:16:37 +0000</pubDate>
      <link>https://dev.to/ken_mwaura1/daily-share-price-notifications-using-python-sql-and-africas-talking-part-one-17p</link>
      <guid>https://dev.to/ken_mwaura1/daily-share-price-notifications-using-python-sql-and-africas-talking-part-one-17p</guid>
      <description>&lt;p&gt;On a hot dry afternoon we sat discussing investment avenues during this pandemic, we realized they are limited. However, we kept coming back to shares as a solid medium to explore. This presented a good project idea as well as a good opportunity to learn more about workings of the financial sector. Here in Kenya, the main bourse is the Nairobi Stock Exchange(NSE), there are about 60+ companies listed on the exchange as of 2021. The NSE operates from Monday from Friday from 9.00 am to 3.00 pm except holidays. The main aim of this article is to develop a web scraper, and a notification script to notify us when certain ticker reaches a specific price or alternatively above a certain price threshold.&lt;/p&gt;

&lt;p&gt;Having done web scraping projects before, I have researched an extensive list of libraries and frameworks and other tools. You can check out my write-up on a &lt;a href="https://dev.to/ken_mwaura1/daily-news-scraper-and-sms-notifications-part-one-15m9"&gt;news scraper&lt;/a&gt;. I had a little experience with using &lt;a href="https://docs.scrapy.org/en/latest/"&gt;scrapy&lt;/a&gt; and seemed like the perfect fit for this project. Scrapy is a web scraping framework thus it makes assumptions on how to handle certain aspects ranging from folder structure to its own cli and storing data. &lt;/p&gt;

&lt;p&gt;This makes it great for structuring large projects or even multiple scrapers in one project. However, it also has a steep learning curve but the in-depth documentation and fairly large community more than makes up for it. For storing data usually a JSON file would be adequate, but a database ensures it'll be easy to persist and query data later on. We'll be making use of Postgresql, mainly because I used already in other &lt;a href="https://dev.to/ken_mwaura1/automate-customer-rewards-using-python-postgresql-and-africas-talking-9dj"&gt;projects&lt;/a&gt; and serves our needs nicely. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites-before-getting-started"&gt;
  &lt;/a&gt;
  Prerequisites before getting started
&lt;/h2&gt;

&lt;p&gt;To follow along this post and code the same features. You're going to need a few things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Python and pip (I am currently using 3.9.2) Any version above 3.5 should work.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An &lt;a href="https://account.africastalking.com/auth/register/"&gt;Africas Talking account&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Api Key and username from your account. Create an app and take note of the api key.&lt;br&gt;
Once you've got the above sorted :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Create a new directory and change into it.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;
         &lt;span class="nb"&gt;mkdir &lt;/span&gt;nse_scraper
         &lt;span class="nb"&gt;cd &lt;/span&gt;nse_scraper 

&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create a new virtual environment for the project or activate the previous one.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Using python package manager(pip), install: beautifulsoup4, scrapy, africastalking python sdk, python-dotenv library,&lt;br&gt;&lt;br&gt;
sqlachemy and psycopg2 libraries.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Save the installed libraries in a requirements.txt file&lt;br&gt;&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre class="highlight python"&gt;&lt;code&gt;
       &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;venv&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;
       &lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="nb"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;activate&lt;/span&gt;
       &lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;africastalking&lt;/span&gt; &lt;span class="n"&gt;beautifulsoup4&lt;/span&gt; &lt;span class="n"&gt;scrapy&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dotenv&lt;/span&gt; &lt;span class="n"&gt;sqlachemy&lt;/span&gt; &lt;span class="n"&gt;psycopg2&lt;/span&gt;  
       &lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;freeze&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;requirements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As mentioned above we are using Postgresql as our database of choice hence we need a library to interface with the database, psycopg2 is a good option although there are&lt;br&gt;
others. Although not necessary we'll be making use of   &lt;a href="https://www.sqlalchemy.org/"&gt;SqlAlchemy&lt;/a&gt; as our Object Relation Mapper(ORM). This allows us to use python objects (classes, functions) to make transactions instead of raw SQL.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Install Postgresql database to save all of our scraped data. Depending on which platform you code on, you could do it natively on your system. Personally I am using &lt;a href="https://www.docker.com/"&gt;docker&lt;/a&gt; as it is easy to manage containers and prevents my system from being cluttered. 
This &lt;a href="https://blog.crunchydata.com/blog/easy-postgresql-12-and-pgadmin-4-setup-with-docker"&gt;article&lt;/a&gt; is an awesome resource on how to get Postgresql and pgadmin4  installed as containers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Alternatively, check the finished code on &lt;a href="https://github.com/KenMwaura1/stock-price-scraper"&gt;Github&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#spiders-everywhere"&gt;
  &lt;/a&gt;
  Spiders Everywhere
&lt;/h2&gt;

&lt;p&gt;Scrapy operates on the concept of spiders, we define our own custom spiders to crawl and scrape data. &lt;br&gt;
Scrapy has its commands that makes creating a project and a spider(s) quick and easy. &lt;br&gt;
Now we will create a scrapy project, generate a spider with the required boilerplate code using the cli.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;scrapy&lt;/span&gt; &lt;span class="n"&gt;startproject&lt;/span&gt; &lt;span class="n"&gt;nse_scraper&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Running the startproject command will create a folder with the structure outlined below. There is a top folder with the project name (nse_scraper) that contains the Scrapy configuration and a subfolder with the same name containing the actual crawling code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;python-projects &lt;span class="nv"&gt;$ &lt;/span&gt;tree nse_scraper
nse_scraper
├── nse_scraper
│   ├── __init__.py
│   ├── items.py
│   ├── middlewares.py
│   ├── pipelines.py
│   ├── settings.py
│   └── spiders
│       └── __init__.py
└── scrapy.cfg

2 directories, 7 files
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;NB: I don't want to go into too much detail about Scrapy because there are many tutorials for the tool online, and because I normally use requests with lxml to make (very simple) data crawlers. &lt;br&gt;
Many people prefer to use BeautifulSoup or other higher level data crawl libraries so feel free to go for that. &lt;br&gt;
I picked Scrapy in this particular case because it creates a nice scaffold when working with crawlers and databases but this can be completely done from scratch as well.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;nse_scraper&lt;/span&gt; 
&lt;span class="n"&gt;scrapy&lt;/span&gt; &lt;span class="n"&gt;genspider&lt;/span&gt; &lt;span class="n"&gt;afx_scraper&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;afx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kwayisi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nseke&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="n"&gt;Created&lt;/span&gt; &lt;span class="n"&gt;spider&lt;/span&gt; &lt;span class="s"&gt;'afx_scraper'&lt;/span&gt; &lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt; &lt;span class="s"&gt;'basic'&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;nse_scraper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;spiders&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;afx_scraper&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You could choose to not use the generator and write the Scrapy files yourself but for simplicity I use the boilerplate that comes with Scrapy. &lt;br&gt;
Now navigate to the top level project folder and create the spider (&lt;em&gt;afx_scraper&lt;/em&gt;) using &lt;code&gt;genspider&lt;/code&gt;. In my case I will be crawling data from afx.kwayisi.org about NSE share prices. There is the main &lt;a href="https://www.nse.co.ke/"&gt;nse website&lt;/a&gt;&lt;br&gt;
or even &lt;a href="http://mystocks.co.ke/"&gt;mystocks website&lt;/a&gt;, however both require a subscription to get real time stock quotes. Since this project is meant to be a DIY scraper with minimal costs, afx was the most viable option. As a bonus they structure their data in a table and regularly update the prices. &lt;/p&gt;

&lt;p&gt;If we take a look at the file structure again inside the &lt;em&gt;spiders&lt;/em&gt; folder, a new file &lt;em&gt;afx_scraper.py&lt;/em&gt; has been created.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;python-projects/nse_scraper &lt;span class="nv"&gt;$ &lt;/span&gt;tree
&lt;span class="nb"&gt;.&lt;/span&gt;
├── nse_scraper 
│   ├── __init__.py
│   ├── items.py
│   ├── middlewares.py
│   ├── pipelines.py
│   ├── settings.py
│   └── spiders
│       ├── __init__.py
│       └── afx_scraper.py 
└── scrapy.cfg
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The content of &lt;code&gt;afx_scraper.py&lt;/code&gt; is the minimum code required to get started with crawling data.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#afx_scraper.py 
&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;scrapy&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AfxScraperSpider&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scrapy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Spider&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'afx_scraper'&lt;/span&gt;
    &lt;span class="n"&gt;allowed_domains&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'https://afx.kwayisi.org'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;start_urls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'https://afx.kwayisi.org/nseke/'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#scraper-setup"&gt;
  &lt;/a&gt;
  Scraper Setup
&lt;/h2&gt;

&lt;p&gt;The first element we want to crawl is the table element holding all the data, we then loop through and get each ticker symbol, share name and price. The code to get data is added to the &lt;code&gt;parse&lt;/code&gt; function. Looking through the developer tools inside our browser we see that &lt;code&gt;table&lt;/code&gt; element has a &lt;code&gt;tbody&lt;/code&gt; element that holds &lt;code&gt;tr&lt;/code&gt; elements. This refers to table row html element, each row contains &lt;code&gt;td&lt;/code&gt; elements. This refers to table data element. this is element we want to scrape. &lt;/p&gt;

&lt;p&gt;Scrapy allows for two ways of selecting elements in a html document: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Using CSS selectors&lt;/li&gt;
&lt;li&gt;Using Xpath. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We'll start off with using CSS selector as its straightforward. We assign a &lt;code&gt;row&lt;/code&gt; variable to the code referencing the row of data. Due to the nature of how the individual data is displayed (similar html tags) we need to use xpath to extract data.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#afx_scraper.py
&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Processing: "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# Extract data using css selectors
&lt;/span&gt;        &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;css&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'table tbody tr '&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# use XPath and regular expressions to extract stock name and price
&lt;/span&gt;        &lt;span class="n"&gt;raw_ticker_symbol&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'td[1]'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'[A-Z].*'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;raw_stock_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'td[2]'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'[A-Z].*'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;raw_stock_price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'td[4]'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'[0-9].*'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# create a function to remove html tags from the returned list
&lt;/span&gt;        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;raw_ticker_symbol&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For each row above we use xpath to extract the required elements. The result is a combined list of data including data from the top table including top gainers and losers. Inorder to filter out what we dont need, we use &lt;a href="https://docs.python.org/3/library/re.html"&gt;regular expressions&lt;/a&gt;. In the case of &lt;code&gt;raw_ticker_symbol&lt;/code&gt; and &lt;code&gt;raw_stock_price&lt;/code&gt; we only need alphabetic letters thus we pass along &lt;code&gt;[A-Z].*&lt;/code&gt; rules to our regex. As for our price data, we need integers we pass &lt;code&gt;[0-9].*&lt;/code&gt; as our regex rule.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#creepy-crawlers"&gt;
  &lt;/a&gt;
  Creepy Crawlers
&lt;/h4&gt;

&lt;p&gt;Now the scraper is ready to be executed and retrieve the items. Run the crawler and verify that it is returning indeed the items that you would expect. There is no output that stores the items yet but the log tells me that there were 66 items that actually had a symbol, name and the price defined ('item_scraped_count': 66,). Note that I set the loglevel to INFO to prevent an information overload in the console.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;2021-04-30 23:02:09 &lt;span class="o"&gt;[&lt;/span&gt;scrapy.utils.log] INFO: Scrapy 2.4.1 started &lt;span class="o"&gt;(&lt;/span&gt;bot: nse_scraper&lt;span class="o"&gt;)&lt;/span&gt;
2021-04-30 23:02:09 &lt;span class="o"&gt;[&lt;/span&gt;scrapy.utils.log] INFO: Versions: lxml 4.6.3.0, libxml2 2.9.10, cssselect 1.1.0, parsel 1.6.0, w3lib 1.22.0, Twisted 21.2.0, Python 3.9.4 &lt;span class="o"&gt;(&lt;/span&gt;default, Apr 20 2021, 15:51:38&lt;span class="o"&gt;)&lt;/span&gt; - &lt;span class="o"&gt;[&lt;/span&gt;GCC 10.2.0], pyOpenSSL 20.0.1 &lt;span class="o"&gt;(&lt;/span&gt;OpenSSL 1.1.1k  25 Mar 2021&lt;span class="o"&gt;)&lt;/span&gt;, cryptography 3.4.7, Platform Linux-5.11.14-147-tkg-bmq-x86_64-with-glibc2.33
2021-04-30 23:02:09 &lt;span class="o"&gt;[&lt;/span&gt;scrapy.crawler] INFO: Overridden settings:
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'BOT_NAME'&lt;/span&gt;: &lt;span class="s1"&gt;'nse_scraper'&lt;/span&gt;,
 &lt;span class="s1"&gt;'EDITOR'&lt;/span&gt;: &lt;span class="s1"&gt;'/usr/bin/micro'&lt;/span&gt;,
 &lt;span class="s1"&gt;'LOG_LEVEL'&lt;/span&gt;: &lt;span class="s1"&gt;'INFO'&lt;/span&gt;,
 &lt;span class="s1"&gt;'NEWSPIDER_MODULE'&lt;/span&gt;: &lt;span class="s1"&gt;'nse_scraper.spiders'&lt;/span&gt;,
 &lt;span class="s1"&gt;'SPIDER_MODULES'&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'nse_scraper.spiders'&lt;/span&gt;&lt;span class="o"&gt;]}&lt;/span&gt;
2021-04-30 23:02:09 &lt;span class="o"&gt;[&lt;/span&gt;scrapy.extensions.telnet] INFO: Telnet Password: 616b228b56a699b0
2021-04-30 23:02:09 &lt;span class="o"&gt;[&lt;/span&gt;scrapy.middleware] INFO: Enabled extensions:
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'scrapy.extensions.corestats.CoreStats'&lt;/span&gt;,
 &lt;span class="s1"&gt;'scrapy.extensions.telnet.TelnetConsole'&lt;/span&gt;,
 &lt;span class="s1"&gt;'scrapy.extensions.memusage.MemoryUsage'&lt;/span&gt;,
 &lt;span class="s1"&gt;'scrapy.extensions.feedexport.FeedExporter'&lt;/span&gt;,
 &lt;span class="s1"&gt;'scrapy.extensions.logstats.LogStats'&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
2021-04-30 23:02:09 &lt;span class="o"&gt;[&lt;/span&gt;scrapy.middleware] INFO: Enabled downloader middlewares:
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'scrapy.downloadermiddlewares.httpauth.HttpAuthMiddleware'&lt;/span&gt;,
 &lt;span class="s1"&gt;'scrapy.downloadermiddlewares.downloadtimeout.DownloadTimeoutMiddleware'&lt;/span&gt;,
 &lt;span class="s1"&gt;'scrapy.downloadermiddlewares.defaultheaders.DefaultHeadersMiddleware'&lt;/span&gt;,
 &lt;span class="s1"&gt;'scrapy.downloadermiddlewares.useragent.UserAgentMiddleware'&lt;/span&gt;,
 &lt;span class="s1"&gt;'scrapy.downloadermiddlewares.retry.RetryMiddleware'&lt;/span&gt;,
 &lt;span class="s1"&gt;'scrapy.downloadermiddlewares.redirect.MetaRefreshMiddleware'&lt;/span&gt;,
 &lt;span class="s1"&gt;'scrapy.downloadermiddlewares.httpcompression.HttpCompressionMiddleware'&lt;/span&gt;,
 &lt;span class="s1"&gt;'scrapy.downloadermiddlewares.redirect.RedirectMiddleware'&lt;/span&gt;,
 &lt;span class="s1"&gt;'scrapy.downloadermiddlewares.cookies.CookiesMiddleware'&lt;/span&gt;,
 &lt;span class="s1"&gt;'scrapy.downloadermiddlewares.httpproxy.HttpProxyMiddleware'&lt;/span&gt;,
 &lt;span class="s1"&gt;'scrapy.downloadermiddlewares.stats.DownloaderStats'&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
2021-04-30 23:02:09 &lt;span class="o"&gt;[&lt;/span&gt;scrapy.middleware] INFO: Enabled spider middlewares:
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'scrapy.spidermiddlewares.httperror.HttpErrorMiddleware'&lt;/span&gt;,
 &lt;span class="s1"&gt;'scrapy.spidermiddlewares.offsite.OffsiteMiddleware'&lt;/span&gt;,
 &lt;span class="s1"&gt;'scrapy.spidermiddlewares.referer.RefererMiddleware'&lt;/span&gt;,
 &lt;span class="s1"&gt;'scrapy.spidermiddlewares.urllength.UrlLengthMiddleware'&lt;/span&gt;,
 &lt;span class="s1"&gt;'scrapy.spidermiddlewares.depth.DepthMiddleware'&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
2021-04-30 23:02:09 &lt;span class="o"&gt;[&lt;/span&gt;scrapy.middleware] INFO: Enabled item pipelines:
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'nse_scraper.pipelines.NseScraperPipeline'&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
2021-04-30 23:02:09 &lt;span class="o"&gt;[&lt;/span&gt;scrapy.core.engine] INFO: Spider opened
2021-04-30 23:02:09 &lt;span class="o"&gt;[&lt;/span&gt;scrapy.extensions.logstats] INFO: Crawled 0 pages &lt;span class="o"&gt;(&lt;/span&gt;at 0 pages/min&lt;span class="o"&gt;)&lt;/span&gt;, scraped 0 items &lt;span class="o"&gt;(&lt;/span&gt;at 0 items/min&lt;span class="o"&gt;)&lt;/span&gt;
2021-04-30 23:02:09 &lt;span class="o"&gt;[&lt;/span&gt;py.warnings] WARNING: /home/zoo/.pyenv/versions/stock-price-scraper/lib/python3.9/site-packages/scrapy/spidermiddlewares/offsite.py:65: URLWarning: allowed_domains accepts only domains, not URLs. Ignoring URL entry https://afx.kwayisi.org &lt;span class="k"&gt;in &lt;/span&gt;allowed_domains.
  warnings.warn&lt;span class="o"&gt;(&lt;/span&gt;message, URLWarning&lt;span class="o"&gt;)&lt;/span&gt;

2021-04-30 23:02:09 &lt;span class="o"&gt;[&lt;/span&gt;scrapy.extensions.telnet] INFO: Telnet console listening on 127.0.0.1:6023
Processing: https://afx.kwayisi.org/nseke/
2021-04-30 23:02:17 &lt;span class="o"&gt;[&lt;/span&gt;scrapy.core.engine] INFO: Closing spider &lt;span class="o"&gt;(&lt;/span&gt;finished&lt;span class="o"&gt;)&lt;/span&gt;
2021-04-30 23:02:17 &lt;span class="o"&gt;[&lt;/span&gt;scrapy.extensions.feedexport] INFO: Stored json feed &lt;span class="o"&gt;(&lt;/span&gt;66 items&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;: test.json
2021-04-30 23:02:17 &lt;span class="o"&gt;[&lt;/span&gt;scrapy.statscollectors] INFO: Dumping Scrapy stats:
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'downloader/request_bytes'&lt;/span&gt;: 443,
 &lt;span class="s1"&gt;'downloader/request_count'&lt;/span&gt;: 2,
 &lt;span class="s1"&gt;'downloader/request_method_count/GET'&lt;/span&gt;: 2,
 &lt;span class="s1"&gt;'downloader/response_bytes'&lt;/span&gt;: 9754,
 &lt;span class="s1"&gt;'downloader/response_count'&lt;/span&gt;: 2,
 &lt;span class="s1"&gt;'downloader/response_status_count/200'&lt;/span&gt;: 1,
 &lt;span class="s1"&gt;'downloader/response_status_count/301'&lt;/span&gt;: 1,
 &lt;span class="s1"&gt;'elapsed_time_seconds'&lt;/span&gt;: 7.457298,
 &lt;span class="s1"&gt;'finish_reason'&lt;/span&gt;: &lt;span class="s1"&gt;'finished'&lt;/span&gt;,
 &lt;span class="s1"&gt;'finish_time'&lt;/span&gt;: datetime.datetime&lt;span class="o"&gt;(&lt;/span&gt;2021, 4, 30, 20, 2, 17, 77130&lt;span class="o"&gt;)&lt;/span&gt;,
 &lt;span class="s1"&gt;'item_scraped_count'&lt;/span&gt;: 66,
 &lt;span class="s1"&gt;'log_count/INFO'&lt;/span&gt;: 11,
 &lt;span class="s1"&gt;'log_count/WARNING'&lt;/span&gt;: 1,
 &lt;span class="s1"&gt;'memusage/max'&lt;/span&gt;: 75550720,
 &lt;span class="s1"&gt;'memusage/startup'&lt;/span&gt;: 75550720,
 &lt;span class="s1"&gt;'response_received_count'&lt;/span&gt;: 1,
 &lt;span class="s1"&gt;'scheduler/dequeued'&lt;/span&gt;: 2,
 &lt;span class="s1"&gt;'scheduler/dequeued/memory'&lt;/span&gt;: 2,
 &lt;span class="s1"&gt;'scheduler/enqueued'&lt;/span&gt;: 2,
 &lt;span class="s1"&gt;'scheduler/enqueued/memory'&lt;/span&gt;: 2,
 &lt;span class="s1"&gt;'start_time'&lt;/span&gt;: datetime.datetime&lt;span class="o"&gt;(&lt;/span&gt;2021, 4, 30, 20, 2, 9, 619832&lt;span class="o"&gt;)}&lt;/span&gt;
2021-04-30 23:02:17 &lt;span class="o"&gt;[&lt;/span&gt;scrapy.core.engine] INFO: Spider closed &lt;span class="o"&gt;(&lt;/span&gt;finished&lt;span class="o"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#lets-clean-the-data"&gt;
  &lt;/a&gt;
  Lets Clean the data!
&lt;/h3&gt;

&lt;p&gt;The data we get is not usable in its current format as it contains html tags, classes, &lt;br&gt;
attributes etc. Thus we need to clean it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#afx_scraper.py
#import BeautifulSoup at the top of the file
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bs4&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;

&lt;span class="c1"&gt;# create a function to remove html tags from the returned list 
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;clean_stock_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;raw_name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;clean_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;raw_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"lxml"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;
            &lt;span class="n"&gt;clean_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;clean_name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;clean_name&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;clean_stock_price&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;raw_price&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;clean_price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;raw_price&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"lxml"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;clean_price&lt;/span&gt;

 &lt;span class="c1"&gt;# Use list comprehension to unpack required values 
&lt;/span&gt;&lt;span class="n"&gt;stock_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;clean_stock_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;r_name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;raw_stock_name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;stock_price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;clean_stock_price&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r_price&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;r_price&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;raw_stock_price&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;stock_symbol&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;clean_stock_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r_symbol&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;r_symbol&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;raw_ticker_symbol&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;# using list slicing to remove the unnecessary data
&lt;/span&gt;&lt;span class="n"&gt;stock_symbol&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;stock_symbol&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
&lt;span class="n"&gt;cleaned_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stock_symbol&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stock_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stock_price&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;cleaned_data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;scraped_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;'ticker'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="s"&gt;'price'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;# yield info to scrapy
&lt;/span&gt;    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;scraped_data&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We first import BeautifulSoup library from the bs4 package. This will give us an easier time cleaning the data. The first function &lt;code&gt;clean_stock_name()&lt;/code&gt; accepts a value &lt;code&gt;raw_name&lt;/code&gt;, we then call the BeautifulSoup constructor, pass our value as &lt;br&gt;
an argument, we then specify &lt;em&gt;lxml&lt;/em&gt; as our parser. For further details on how Beautiful Soup works and different parsers, &lt;a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/#installing-a-parser"&gt;check out the documentation&lt;/a&gt;. We then specify we want only the text and assign it to our &lt;code&gt;clean_name&lt;/code&gt; variable. While cleaning the name, we still had additional characters that we didn't need, thus we call the &lt;code&gt;.split()&lt;/code&gt; method and return the required string.&lt;/p&gt;

&lt;p&gt;The second function &lt;code&gt;clean_stock_name()&lt;/code&gt; pretty much repeats the process outlined above with the only adjustment is we don't need the extra step of adding the string split method.&lt;/p&gt;

&lt;p&gt;We then call the functions on the each value of &lt;code&gt;raw_ticker_symbol&lt;/code&gt;, &lt;code&gt;raw_name&lt;/code&gt; and &lt;code&gt;raw_stock_price&lt;/code&gt;. We proceed to assign the result to appropriately named variables: &lt;code&gt;stock_symbol&lt;/code&gt;, &lt;code&gt;stock_price&lt;/code&gt; and &lt;code&gt;stock_name&lt;/code&gt;. The stock symbol returns additional characters than we need hence we do list slicing to get the correct length of characters and assign it to the variable.  We use the zip function to create a list of all of the data retrieved. Finally we create a dictionary &lt;code&gt;scraped_data&lt;/code&gt; and assign relevant keys to the value of cleaned data. By using the &lt;code&gt;yield&lt;/code&gt; keyword our parse function is now generator thus able to return values when needed. This is especially &lt;br&gt;
critical to performance when crawling multiple pages. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#lets-store-all-the-data"&gt;
  &lt;/a&gt;
  Lets Store all the Data!
&lt;/h2&gt;

&lt;p&gt;First of all I define the schema of the element that I am crawling in the &lt;em&gt;items.py.&lt;/em&gt; &lt;br&gt;
There is no fancy schema yet but this can obviously be improved in the future when more items are being retrieved and the actual datatypes do make a difference.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# items.py
# See documentation in:
# https://docs.scrapy.org/en/latest/topics/items.html
&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;scrapy.item&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Field&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;NseScraperItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# define the fields for your item here like:
&lt;/span&gt;    &lt;span class="n"&gt;stock_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Field&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;stock_price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Field&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;stock_symbol&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Field&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;em&gt;middlewares.py&lt;/em&gt; is left untouched for the project. The important bit for storing data in a database is inside models.py. As described before I use SQLAlchemy to connect to the PostgreSQL database. The database details are stored in &lt;em&gt;settings.py&lt;/em&gt; (see below) and are used to create the SQLAlchemy engine. I define the Items model with the three fields and use the create_items_table to create the table.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# nse_scraper/nse_scraper/models.py
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Float&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;create_engine&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy.engine.base&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Engine&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;scrapy.utils.project&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_project_settings&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy.ext.declarative&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;declarative_base&lt;/span&gt;


&lt;span class="n"&gt;Base&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;declarative_base&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;db_connect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Engine&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;"""
    Creates database connection using database settings from settings.py.
    Returns sqlalchemy engine instance
    """&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;create_engine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;get_project_settings&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"DATABASE"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_items_table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Engine&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s"&gt;"""
    Create the Items table
    """&lt;/span&gt;
    &lt;span class="n"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;StockData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s"&gt;"""
    Defines the items model
    """&lt;/span&gt;

    &lt;span class="n"&gt;__tablename__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"stock_data"&lt;/span&gt;

    &lt;span class="nb"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;primary_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;autoincrement&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;stock_ticker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"stock_ticker"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;stock_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"stock_name"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;stock_price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"stock_price"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Float&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inside the &lt;em&gt;pipelines.py&lt;/em&gt; the spider is connected to the database. When the pipeline is started it will initalize the database and create the engine, create the table and setup a SQLAlchemy session. The &lt;code&gt;process_item&lt;/code&gt; function is part of the default code and is executed for every yielded item in the scraper. In this case it means it will be triggered every time a stock is retrieved with a ticker, name and price. Remember to always commit() when adding (or removing) items to the table.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# nse_scraper/nse_scraper/pipelines.py
# Define your item pipelines here
&lt;/span&gt;
&lt;span class="c1"&gt;# Don't forget to add your pipeline to the ITEM_PIPELINES setting
# See: https://docs.scrapy.org/en/latest/topics/item-pipeline.html
&lt;/span&gt;

&lt;span class="c1"&gt;# useful for handling different item types with a single interface
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy.orm&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;sessionmaker&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;nse_scraper.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;StockData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;create_items_table&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db_connect&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;NseScraperPipeline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="s"&gt;"""
        Initializes database connection and sessionmaker.
        Creates stock_data table
        """&lt;/span&gt;
        &lt;span class="n"&gt;engine&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db_connect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;create_items_table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Session&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sessionmaker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;process_item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;spider&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="s"&gt;"""
        process item and store to database
        """&lt;/span&gt;
        &lt;span class="n"&gt;session&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Session&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;stock_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;StockData&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;stock_data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stock_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;stock_data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stock_price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"price"&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;','&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;stock_data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stock_ticker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"ticker"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stock_data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="c1"&gt;# query again
&lt;/span&gt;            &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;StockData&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="c1"&gt;# print(obj.stock_ticker)
&lt;/span&gt;        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="nb"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rollback&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"we have a problem, houston &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt;
        &lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, the &lt;em&gt;settings.py&lt;/em&gt; is short and contains the information for the crawler. &lt;br&gt;
The only items I have added are the DATABASE and LOG_LEVEL variables. You could choose to add your security details in this file but I would recommend to keep them secret and store them elsewhere. I have used a &lt;code&gt;.env&lt;/code&gt; file to store my credentials then used the &lt;code&gt;python-dotenv&lt;/code&gt; library to retrieve them. Note: The &lt;code&gt;.env&lt;/code&gt; should be in the same folder as the &lt;em&gt;settings.py&lt;/em&gt; file or specify file path in the brackets.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# nse_scraper/nse_scraper/settings.py 
# Scrapy settings for nse_scraper project
&lt;/span&gt;
&lt;span class="c1"&gt;# For simplicity, this file contains only settings considered important or
# commonly used. You can find more settings consulting the documentation:
#
#     https://docs.scrapy.org/en/latest/topics/settings.html
#     https://docs.scrapy.org/en/latest/topics/downloader-middleware.html
#     https://docs.scrapy.org/en/latest/topics/spider-middleware.html
&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;dotenv&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;load_dotenv&lt;/span&gt;

&lt;span class="n"&gt;load_dotenv&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;BOT_NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'nse_scraper'&lt;/span&gt;

&lt;span class="n"&gt;SPIDER_MODULES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'nse_scraper.spiders'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;NEWSPIDER_MODULE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'nse_scraper.spiders'&lt;/span&gt;

&lt;span class="c1"&gt;# POSTGRES SETTINGS
&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"POSTGRES_HOST"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"POSTGRES_PORT"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"POSTGRES_USER"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"POSTGRES_PASS"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;database&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"POSTGRES_DB"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;drivername&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"postgresql"&lt;/span&gt;
&lt;span class="n"&gt;DATABASE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;drivername&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;://&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;:&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;@&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;:&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;

&lt;span class="c1"&gt;# Configure item pipelines
# See https://docs.scrapy.org/en/latest/topics/item-pipeline.html
&lt;/span&gt;&lt;span class="n"&gt;ITEM_PIPELINES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;'nse_scraper.pipelines.NseScraperPipeline'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;LOG_LEVEL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"INFO"&lt;/span&gt;
&lt;span class="c1"&gt;# Crawl responsibly by identifying yourself (and your website) on the user-agent
# USER_AGENT = 'nse_scraper (+http://www.yourdomain.com)'
&lt;/span&gt;
&lt;span class="c1"&gt;# Obey robots.txt rules
&lt;/span&gt;&lt;span class="n"&gt;ROBOTSTXT_OBEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Your scraper is now ready to run it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;scrapy&lt;/span&gt; &lt;span class="n"&gt;crawl&lt;/span&gt; &lt;span class="n"&gt;afx_scraper&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should now see stock data in your database. Optionally you could output to &lt;br&gt;
a json file to quickly preview the data retrieved.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;scrapy&lt;/span&gt; &lt;span class="n"&gt;crawl&lt;/span&gt; &lt;span class="n"&gt;afx_scraper&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="n"&gt;stock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This article was originally meant to cover setup, data scraping and notification, however its already long and its easier break it down to two parts. Part two will cover: Database queries, sms notification using africas talking, deployment and scheduling of the web scraper. &lt;/p&gt;

</description>
      <category>python</category>
      <category>tutorial</category>
      <category>postgres</category>
      <category>sql</category>
    </item>
    <item>
      <title>Automate the hell out of your code</title>
      <author>Kinanee Samson</author>
      <pubDate>Sun, 02 May 2021 10:54:45 +0000</pubDate>
      <link>https://dev.to/kalashin1/automate-the-hell-out-of-your-code-3j42</link>
      <guid>https://dev.to/kalashin1/automate-the-hell-out-of-your-code-3j42</guid>
      <description>&lt;h1&gt;
  &lt;a href="#automate-the-hell-out-of-your-code"&gt;
  &lt;/a&gt;
  Automate the hell out of your code
&lt;/h1&gt;

&lt;p&gt;When you hear of automation what comes to your mind? Software automation involves all practices that is geared towards using your coding skills and resources to avoid doing repetitive tasks manually and instead we write a script that handles all the repetitive tasks enabling us to be more productive, ship our code faster and actually focus on writing code. In this article i am going to be introducing you to the concept of software automation, we will look at CI/CD, don't worry if you have no idea what those abbreviations mean, by the time you are done with this article, you will be able to automate the hell out of your code. Well let's get started.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bring-your-own-repo"&gt;
  &lt;/a&gt;
  Bring your own Repo
&lt;/h3&gt;

&lt;p&gt;For you to follow along with this article you need to create a github repository or you can use one you already created in the past. I will be using github actions to automate our code, you can also use circle CI if that's what you are comfortable with. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-a-github-workflow"&gt;
  &lt;/a&gt;
  Create a github Workflow
&lt;/h3&gt;

&lt;p&gt;To create a github workflow, inside the root directory of your current working directory create a folder named .github and inside it create a workflows directory, it is inside this workflows directory that we will actually write the code that will handle our CI for us.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;------&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;github&lt;/span&gt;&lt;span class="o"&gt;/-----&lt;/span&gt;&lt;span class="nx"&gt;workflows&lt;/span&gt;&lt;span class="o"&gt;/-----&lt;/span&gt;&lt;span class="nx"&gt;integrate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;yml&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Github uses a yml file for it's workflows, every file that ends with a &lt;code&gt;.yml&lt;/code&gt; extension will be treated as a workflow by github and upon whatever condition we specify inside that file github will automatically run the workflow, just know every workflow should have the following syntax; see the github actions &lt;a href="https://docs.github.com/en/actions/quickstart"&gt;documentary&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;WE SPECIFFY THE NAME OF THE JOB&lt;/span&gt;

&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;                                 &lt;span class="c1"&gt;# Which event to trigger this workflow&lt;/span&gt;
 &lt;span class="na"&gt;github_event&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;                      &lt;span class="c1"&gt;# e.g pull, pull_request, push, commit etc&lt;/span&gt;
   &lt;span class="na"&gt;banches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;branch_to_run_workflow_on&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;another_branch&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;


&lt;span class="c1"&gt;# A workflow run is made up of one or more jobs that can run sequentially or in parallel&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; 
  &lt;span class="na"&gt;give_the_job_a_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;

    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;machine_to_run_on&lt;/span&gt;      &lt;span class="c1"&gt;# ubuntu-latest, windows-latest, macos-latest&lt;/span&gt;

    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;use_already_defined_workflow&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;terminal command&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;another terminal command&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#what-is-continuous-integration-ci"&gt;
  &lt;/a&gt;
  What is Continuous Integration CI?
&lt;/h3&gt;

&lt;p&gt;Continuous integration is a software development principle that suggests that developers should write small chunks of code and when they push this code to their repository the code should be automatically tested by a script that runs on a remote machine, automating the process of adding new code to the code base. This automates software testing thus increasing the developers productivity and keeping their focus on writing code that passes the tests. &lt;/p&gt;

&lt;p&gt;let's edit our &lt;code&gt;integrate.yml&lt;/code&gt; to create a workflow that will automatically test our code whenever there is a pull request on the repository&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# This workflow will run on every pull request to the master branch, &lt;/span&gt;

&lt;span class="c1"&gt;# This is the name of the workflow, every workflow needs a name&lt;/span&gt;
&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;NODE CONTINOUS INTEGRATION WORKFLOW&lt;/span&gt; 

&lt;span class="c1"&gt;# Here we specify on which action in the repository that we want to run this workflow, e.g push, pull_request, commit, pull e.t.c&lt;/span&gt;

&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;pull_request&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;master&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# we define one or more jobs, every workflow should have a job, we can give each job a name&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;automate_our_testing&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; 

  &lt;span class="c1"&gt;# we need to tell it which machine to run the job on&lt;/span&gt;
  &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;

  &lt;span class="c1"&gt;# Steps represent a sequence of tasks that will be executed as part of the job&lt;/span&gt;

  &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;         &lt;span class="c1"&gt;#This pulls our code to the remote machine&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/setup-node@v2&lt;/span&gt;       &lt;span class="c1"&gt;# This setsup node js on the machine&lt;/span&gt;
      &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; 
        &lt;span class="na"&gt;node-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;npm ci&lt;/span&gt;                   &lt;span class="c1"&gt;# installs our project dependencies&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;npm run build&lt;/span&gt;                &lt;span class="c1"&gt;# builds the project&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;npm test&lt;/span&gt;                 &lt;span class="c1"&gt;# runs our test command&lt;/span&gt;
      &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;CI&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you created this file locally on your computer, you can save it, commit it and then push it up to github. Once that is done, go to the actions tab, you should see this workflow listed there. If you make one or two changes to your code base and push it up the repo, make a pull request, go back to the actions tab you should see this workflow running and you can obtain information about each step in the workflow. The cool thing is that if our tests fail, we get a log where we can inspect each step in the job to know what broke down, fix it and push it back to the repo and our workflow will run again becuase we have an open pull request and if all test passes successfully we will see check next to each step, then we can merge the pull request. That's continuous integration taken care of.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-continuous-deployment-cd"&gt;
  &lt;/a&gt;
  What is Continuous Deployment CD?
&lt;/h3&gt;

&lt;p&gt;If continuous integration is adding new chunks of code to the code base, then CD is about automating the building and  deploying our code to the production environment, this ensures that the production environment is kept in sync with the latest features in the code base.  You can read this &lt;a href="https://www.cloudbees.com/continuous-delivery/continuous-integration"&gt;article&lt;/a&gt; for more on CI/CD. &lt;br&gt;
I use firebase hosting, so we can define a workflow that builds and deploys our code to firebase hosting rather than having to do that ourselves. &lt;/p&gt;

&lt;p&gt;But we have one or two issues we have to deal with, normally we can deploy code to firebase from our computer because we are logged in from the terminal, but how do we authorize a remote CI server to do this? open up a terminal and run the following command &lt;code&gt;firebase login:ci&lt;/code&gt; it will throw back a FIREBASE_TOKEN that we can use to authenticate CI servers. We need to add this token to github so github can securely encrypt it for us and we can call it as a variable, rather hard coding it inside the workflow which can lead to security issues and concern.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Open github and the repo you would like to add this CD workflow&lt;/li&gt;
&lt;li&gt;navigate to settings&lt;/li&gt;
&lt;li&gt;under settings click on secrets&lt;/li&gt;
&lt;li&gt;click add new secrete&lt;/li&gt;
&lt;li&gt;give it a name of FIREBASE_TOKEN&lt;/li&gt;
&lt;li&gt;paste the token firebase gave us as the value of the secrete&lt;/li&gt;
&lt;li&gt;click add secrete.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On your local machine we need to create another workflow to handle this deployment, create a new file and name it whatever you like, am going to call it build.yml&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;------&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;github&lt;/span&gt;&lt;span class="o"&gt;/-----&lt;/span&gt;&lt;span class="nx"&gt;workflows&lt;/span&gt;&lt;span class="o"&gt;/-----&lt;/span&gt;&lt;span class="nx"&gt;integrate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;yml&lt;/span&gt;
                               &lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="nx"&gt;build&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;yml&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It should have the following content&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# This workflow runs on every push/merge to the master branch&lt;/span&gt;

&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;FIREBASE_DEPLOY&lt;/span&gt;

&lt;span class="c1"&gt;# Controls when the action will run. &lt;/span&gt;

&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="c1"&gt;# Triggers the workflow on push or pull request events but only for the master branch&lt;/span&gt;
  &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;master&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt;

  &lt;span class="c1"&gt;# Allows you to run this workflow manually from the Actions tab&lt;/span&gt;

  &lt;span class="na"&gt;workflow_dispatch&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;


&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="c1"&gt;# This workflow contains a single job called "build"&lt;/span&gt;
  &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# The type of runner that the job will run on&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;


    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;       &lt;span class="c1"&gt;# import our files to the remote CI server&lt;/span&gt;

      &lt;span class="c1"&gt;# Runs a single command using the runners shell&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Use Node.js version &lt;/span&gt;&lt;span class="m"&gt;12&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/setup-node@v2&lt;/span&gt;     &lt;span class="c1"&gt;# using node js&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;node-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;npm ci&lt;/span&gt;                     &lt;span class="c1"&gt;# clean install of our dependencies&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;npm run build&lt;/span&gt;              &lt;span class="c1"&gt;# building our project&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;GitHub Action for Firebase&lt;/span&gt;  
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;w9jds/firebase-action@v2.0.0&lt;/span&gt;  &lt;span class="c1"&gt;# predefined workflow for firebase&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;args&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;deploy --only hosting&lt;/span&gt;       &lt;span class="c1"&gt;# deploying only hosting&lt;/span&gt;
        &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;FIREBASE_TOKEN&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.FIREBASE_TOKEN }}&lt;/span&gt;  
          &lt;span class="c1"&gt;# using our secrete token to authenticate the remote CI to push code to firebase hosting&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now if we push code directly to the master branch or we merge in a pull request from the master branch, this workflow will automatically be triggered, deploying our code to firebase, but i don't expect everyone to use firebase, sometimes i deploy to netlify too, but i just used firebase as an instance to help you get started. I recommend that you watch this &lt;a href="https://youtu.be/eB0nUzAI7M8"&gt;video&lt;/a&gt; to learn other things you can do with github actions.&lt;/p&gt;

&lt;p&gt;That's it for this article, i hope you find this interesting and learn something, feel free to leave a comment below&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>github</category>
      <category>productivity</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Best VS code extensions used for web development</title>
      <author>Unnati Bamania</author>
      <pubDate>Sun, 02 May 2021 10:46:24 +0000</pubDate>
      <link>https://dev.to/commentme/best-vs-code-extensions-used-for-web-development-426</link>
      <guid>https://dev.to/commentme/best-vs-code-extensions-used-for-web-development-426</guid>
      <description>&lt;p&gt;VS Code is one of the best and lightweight code editors. The dark theme and variety of extensions that very developer-friendly. This article mentions best vs code extensions which can help developers to coder faster and cleaner. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thunder-client"&gt;
  &lt;/a&gt;
  Thunder Client
&lt;/h2&gt;

&lt;p&gt;Say bye to Postman once you've installed this extension. This extension helps to make API calls on VS code. All you've to do is go to the extension section and install the &lt;em&gt;thunder client&lt;/em&gt; extension. You'll find a small electrifying icon on the left-hand side. Click on it and you're good to go. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ie060c3t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hjnsr7shpj3kz4rlzjem.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ie060c3t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hjnsr7shpj3kz4rlzjem.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wrXvttqB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9fc7vgl4h5pu3csz3xlz.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wrXvttqB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9fc7vgl4h5pu3csz3xlz.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#markdown-all-in-one"&gt;
  &lt;/a&gt;
  Markdown All in One
&lt;/h2&gt;

&lt;p&gt;It would be nice if your complete markdown, which includes auto-preview, shortcuts, autocomplete, were managed by a single extension. With this extension, you can have a live preview of your markdown, and using shortcuts like &lt;em&gt;ctrl+b&lt;/em&gt; and &lt;em&gt;ctrl+i&lt;/em&gt; makes preparing markdowns less excruciating. &lt;br&gt;
&lt;strong&gt;For live preview use command ctrl + shift + k + v.&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5aWZQxWm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4xirx2pr79egt2b2kc3a.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5aWZQxWm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4xirx2pr79egt2b2kc3a.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prettier"&gt;
  &lt;/a&gt;
  Prettier
&lt;/h2&gt;

&lt;p&gt;Developers are most often troubled by the commas and colons or by adjusting the code properly. Prettier code extension manages the code format and aligns it properly so that the code looks &lt;strong&gt;pretty&lt;/strong&gt;. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Fad2Hlfp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3fobn338n24c2mv1mrmu.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Fad2Hlfp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3fobn338n24c2mv1mrmu.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#css-peek"&gt;
  &lt;/a&gt;
  CSS Peek
&lt;/h2&gt;

&lt;p&gt;CSS Peek extension is a handy extension to check for CSS code while typing HTML tags. When you hover over the class name and hit control then you get the CSS code of that class. On clicking on the class it will take you the code on the CSS page. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I19t98a6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i9ppec1i7aidv4ocpztm.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I19t98a6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i9ppec1i7aidv4ocpztm.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#live-server"&gt;
  &lt;/a&gt;
  Live Server
&lt;/h2&gt;

&lt;p&gt;This server helps to reload the page after saving the code. While previewing the saved code you need not refresh the page manually. It reloads the page and shows to output for recently saved code.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Db9Mn9JH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/edw855oqj987rplod6fu.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Db9Mn9JH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/edw855oqj987rplod6fu.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#emmet"&gt;
  &lt;/a&gt;
  Emmet
&lt;/h2&gt;

&lt;p&gt;Most of the time it's boring to write the complete HTML tag with head and title and other tags within the head tag. Emmet extension gives the initial code for HTML pages. When you type&lt;br&gt;
&lt;br&gt;
 &lt;code&gt;!+tab&lt;/code&gt;&lt;br&gt;
&lt;br&gt;
 You get the initial code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#auto-rename-tag"&gt;
  &lt;/a&gt;
  Auto Rename Tag
&lt;/h2&gt;

&lt;p&gt;This is a very powerful and useful extension for web developers. It auto-completes the ending tag same as the starting one and vice versa. This extension is also useful for React applications.&lt;/p&gt;

&lt;p&gt;There are a lot of other VS code extensions which are very handy if you know any please do mention them down in the comment section.&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>watercooler</category>
      <category>webdev</category>
      <category>codequality</category>
    </item>
    <item>
      <title>Solution: Course Schedule III</title>
      <author>seanpgallivan</author>
      <pubDate>Sun, 02 May 2021 10:42:59 +0000</pubDate>
      <link>https://dev.to/seanpgallivan/solution-course-schedule-iii-48hn</link>
      <guid>https://dev.to/seanpgallivan/solution-course-schedule-iii-48hn</guid>
      <description>&lt;p&gt;&lt;em&gt;This is part of a series of Leetcode solution explanations (&lt;a href="https://dev.to/seanpgallivan/leetcode-solutions-index-57fl"&gt;index&lt;/a&gt;). If you liked this solution or found it useful,&lt;/em&gt; &lt;strong&gt;&lt;em&gt;please like&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;this post and/or&lt;/em&gt; &lt;strong&gt;&lt;em&gt;upvote&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;&lt;a href="https://leetcode.com/problems/course-schedule-iii/discuss/1187504"&gt;my solution post on Leetcode's forums&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#leetcode-problem-630-hard-course-schedule-iii"&gt;
  &lt;/a&gt;
  &lt;a href="https://leetcode.com/problems/course-schedule-iii/"&gt;Leetcode Problem #630 (&lt;em&gt;Hard&lt;/em&gt;): Course Schedule III&lt;/a&gt;
&lt;/h4&gt;




&lt;h4&gt;
  &lt;a href="#description"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Description:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;There are &lt;code&gt;n&lt;/code&gt; different online courses numbered from &lt;code&gt;1&lt;/code&gt; to &lt;code&gt;n&lt;/code&gt;. You are given an array &lt;code&gt;courses&lt;/code&gt; where &lt;code&gt;courses[i] = [duration&amp;lt;i&amp;gt;, lastDay&amp;lt;i&amp;gt;]&lt;/code&gt; indicate that the &lt;code&gt;i'th&lt;/code&gt; course should be taken &lt;strong&gt;continuously&lt;/strong&gt; for &lt;code&gt;duration&amp;lt;i&amp;gt;&lt;/code&gt; days and must be finished before or on &lt;code&gt;lastDay&amp;lt;i&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You will start on the &lt;code&gt;1st&lt;/code&gt; day and you cannot take two or more courses simultaneously.&lt;/p&gt;

&lt;p&gt;Return &lt;em&gt;the maximum number of courses that you can take&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Examples:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 1:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;courses = [[100,200],[200,1300],[1000,1250],[2000,3200]]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Explanation:&lt;/td&gt;
&lt;td&gt;There are totally 4 courses, but you can take 3 courses at most:&lt;br&gt;&lt;br&gt;First, take the 1st course, it costs 100 days so you will finish it on the 100th day, and ready to take the next course on the 101st day.&lt;br&gt;&lt;br&gt;Second, take the 3rd course, it costs 1000 days so you will finish it on the 1100th day, and ready to take the next course on the 1101st day.&lt;br&gt;&lt;br&gt;Third, take the 2nd course, it costs 200 days so you will finish it on the 1300th day.&lt;br&gt;&lt;br&gt;The 4th course cannot be taken now, since you will finish it on the 3300th day, which exceeds the closed date.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 2:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;courses = [[1,2]]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 3:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;courses = [[3,2],[4,3]]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#constraints"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Constraints:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= courses.length &amp;lt;= 10^4&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= durationi, lastDayi &amp;lt;= 10^4&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#idea"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Idea:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;If we think of this problem in a larger sense, we can envision a slightly more simplistic situation without the issues of the last day cutoff for each course. In that scenario, we could quite easily add up all the course durations, then selectively remove the courses with the longest remaining duration until we've found the ideal number of courses that will fit into our desired timeframe.&lt;/p&gt;

&lt;p&gt;The trouble here, of course, is that we &lt;em&gt;do&lt;/em&gt; have cutoffs for each course, which means we can no longer fill the entire time before removing courses. Instead, we'll have to selectively backtrack and remove courses as we iterate through the input array (&lt;strong&gt;C&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;As is often the case in a scheduling-type problem, this leads to a particular issue: we'll want to sort the data in two distinctly different ways. Since we'll be progressing through &lt;strong&gt;C&lt;/strong&gt; as if we're progressing through time, we'll want to sort &lt;strong&gt;C&lt;/strong&gt; based on the courses' cutoffs (&lt;strong&gt;end&lt;/strong&gt;), but when we backtrack to potentially remove a course, we'll want to sort the courses we've accepted by their duration (&lt;strong&gt;dur&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;The need for a data structure that will maintain its sort through insertions and max value removals means that we're looking for a &lt;strong&gt;max priority queue&lt;/strong&gt; or &lt;strong&gt;max-heap&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Once we've sorted &lt;strong&gt;C&lt;/strong&gt; and set up our max priority queue or heap (&lt;strong&gt;pq&lt;/strong&gt;/&lt;strong&gt;heap&lt;/strong&gt;), it's simply a matter of iterating through &lt;strong&gt;C&lt;/strong&gt;, adding the courses to &lt;strong&gt;pq&lt;/strong&gt;/&lt;strong&gt;heap&lt;/strong&gt;, and then removing the max duration course as necessary to stay underneath the current &lt;strong&gt;end&lt;/strong&gt; value with our accumulated duration (&lt;strong&gt;total&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;In order to minimize unnecessary insertions/removals, we can perform a few basic conditional checks to tell if they're necessary. If the current course will already fit, we can just add it, or if the current course is a better fit than our longest course, then we can swap them.&lt;/p&gt;

&lt;p&gt;Then, once we reach the end of &lt;strong&gt;C&lt;/strong&gt;, &lt;strong&gt;pq&lt;/strong&gt;/&lt;strong&gt;heap&lt;/strong&gt; should contain all the non-discarded courses, so we can &lt;strong&gt;return&lt;/strong&gt; its size as our answer.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Time Complexity: O(N * log N)&lt;/strong&gt; where &lt;strong&gt;N&lt;/strong&gt; is the length of &lt;strong&gt;C&lt;/strong&gt;, due to both the sort and the priority queue / heap implementation&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Space Complexity: O(N)&lt;/strong&gt; due to the priority queue / heap data&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h4&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Implementation:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;In this instance, the &lt;strong&gt;MaxPriorityQueue()&lt;/strong&gt; npm for Javascript was actually competitively performant compared to a &lt;strong&gt;custom max-heap&lt;/strong&gt; structure.&lt;/p&gt;

&lt;p&gt;To avoid having to use a &lt;strong&gt;custom comparator&lt;/strong&gt; for Python, which defaults to a &lt;strong&gt;min heap&lt;/strong&gt;, we can just switch the sign before insertion and after extraction to mimic a &lt;strong&gt;max heap&lt;/strong&gt;.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#javascript-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Javascript Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;scheduleCourse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;C&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pq&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;MaxPriorityQueue&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;priority&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;dur&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;C&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dur&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;dur&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;enqueue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dur&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;front&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;pq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;front&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;dur&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;dur&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;pq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dequeue&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;enqueue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dur&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;pq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#python-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Python Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;scheduleCourse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;dur&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;el&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;el&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;dur&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;dur&lt;/span&gt;
                &lt;span class="n"&gt;heappush&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dur&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;heap&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dur&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;dur&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;heappop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;heappush&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dur&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#java-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Java Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;scheduleCourse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[][]&lt;/span&gt; &lt;span class="no"&gt;C&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;Arrays&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sort&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="no"&gt;C&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]);&lt;/span&gt;
        &lt;span class="nc"&gt;PriorityQueue&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pq&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;PriorityQueue&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;((&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;course&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="no"&gt;C&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;dur&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;course&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;],&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;course&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dur&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;dur&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                &lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dur&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;peek&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dur&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;dur&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;poll&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
                &lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dur&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#c-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;C++ Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;scheduleCourse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="p"&gt;[](&lt;/span&gt;&lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];});&lt;/span&gt;
        &lt;span class="n"&gt;priority_queue&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;course&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;dur&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;course&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;course&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dur&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
                &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;dur&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dur&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;top&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dur&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;dur&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;top&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dur&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>algorithms</category>
      <category>javascript</category>
      <category>java</category>
      <category>python</category>
    </item>
    <item>
      <title>5 simple ways to improve your website UI (for developers) 🎨🖥️</title>
      <author>Pulkit Jasti</author>
      <pubDate>Sun, 02 May 2021 10:26:38 +0000</pubDate>
      <link>https://dev.to/pulkit_jasti_8f40f769391b/5-simple-ways-to-improve-your-website-ui-for-developers-6p2</link>
      <guid>https://dev.to/pulkit_jasti_8f40f769391b/5-simple-ways-to-improve-your-website-ui-for-developers-6p2</guid>
      <description>&lt;p&gt;I have noticed that a lot of developers are pretty good at the coding part of a project but struggle with design. They tend to think they don't have a natural talent for design and aesthetics.&lt;/p&gt;

&lt;p&gt;A lot of search engine results and articles that I have come across either give a vague idea or they're detailed and would require a lot of time and practice to understand and implement.&lt;/p&gt;

&lt;p&gt;So I've created a small list of tips that will help developers who want to make their interfaces look great without spending too much time worrying about complex design principles.&lt;/p&gt;

&lt;p&gt;Before we get started, it's imperative that we get one thing clear, the methods and practices that I have mentioned below are not just for websites, they can be used with any other sort of interfaces and technologies.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
     &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#1-consistency"&gt;
  &lt;/a&gt;
  1. Consistency
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PAsUoTwZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618732633614/lMBRkgi2L.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PAsUoTwZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618732633614/lMBRkgi2L.png" alt="consistency.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Stick to a similar aesthetic throughout your interface to make it look uniform. Most people use CSS frameworks like  &lt;a href="https://getbootstrap.com/"&gt;Bootstrap&lt;/a&gt; to combat this issue, which is not a bad idea if you are just learning to code, However, using frameworks like bootstrap will only make your projects look like all the other projects out there.&lt;br&gt;
&lt;br&gt;
You can use  &lt;a href="https://www.w3schools.com/css/css3_variables.asp"&gt;CSS Variables&lt;/a&gt;  very effectively to create a set of rules/constraints for a particular project. For example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:root {
    --primary-color: #2b2923;
    --accent-color: #f4be1a;
    --image-ratio: 16/9;
    --box-shadow: 0 1px 3px rgba(0,0,0,0.12),
                              0 1px 2px rgba(0,0,0,0.24);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;br&gt;
If you are using a CSS pre processor like &lt;a href="https://sass-lang.com/"&gt;Sass&lt;/a&gt; / &lt;a href="http://lesscss.org/"&gt;Less&lt;/a&gt;, which I strongly recommend you do, then you can create  &lt;a href="https://www.w3schools.com/sass/sass_mixin_include.asp"&gt;Mixins&lt;/a&gt;  to achieve this. For example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// A mixin to have the same card styling through out the page
@mixin card {
        box-shadow: rgba(100, 100, 111, 0.2) 0px 7px 29px 0px;
        padding: 20px;
        margin: 30px;
}

div { @include card(); }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// A mixin to reset list styling
@mixin list-reset {
        margin: 0;
        padding: 0;
        list-style: none;
}

ul { @include list-reset(); }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;&lt;strong&gt;Alternatively, you can also use one of these Design Systems/UI libraries.&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; &lt;a href="https://material.io/develop/web"&gt;Material design&lt;/a&gt;  by Google&lt;/li&gt;
&lt;li&gt; &lt;a href="https://polaris.shopify.com/"&gt;Polaris&lt;/a&gt;  by Shopify&lt;/li&gt;
&lt;li&gt; &lt;a href="https://baseweb.design/"&gt;Base Web&lt;/a&gt; by Uber&lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.microsoft.com/design/fluent/"&gt;Fluent&lt;/a&gt; by Microsoft &lt;/li&gt;
&lt;/ol&gt;


&lt;h3&gt;
  &lt;a href="#2-hierarchy"&gt;
  &lt;/a&gt;
  2. Hierarchy
&lt;/h3&gt;

&lt;p&gt;Visual hierarchy is one of the most important things to look out for when building an interface because it could either make or break your whole user experience. By using visual hierarchy, you'll be able to draw and focus the user's eye on the most important elements of the page. When used effectively, it can drastically reduce the amount of effort required to use your interface.&lt;/p&gt;

&lt;p&gt;You can achieve a good visual hierarchy by simply highlighting the element you want the user to focus on by manipulating these characteristics&lt;br&gt;
&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Size and scale&lt;/strong&gt; - Size is a very basic characteristic of an element that can help give an element more importance than others. Increasing the size of an element is the easiest way to focus the user's attention on a particular element. Similarly, the size of the less important elements can be reduced.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gJF4-vSf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618749155832/GZ03X1Hv_.png" alt="scale.png"&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Color and contrast&lt;/strong&gt; - Contrast is basically how far away 2 colors are on the color wheel from each other. More the contrast between the two elements, the more distinct they will look. So, to use this effectively for most common interfaces, the contrast between the background and the element that you want the user to focus on should be higher than all the other elements around. For example, have a look at this Call to action button. Since the contract is high, it stands out and grabs the user's attention easily.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fXZkKMIH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618750166257/zxK2mH53w.png" alt="contrast.png"&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;*There are many other characteristics of an element that can be manipulated to create a very effective visual hierarchy. I found the ones mentioned above are the simplest to understand and use.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
     &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#3-colors"&gt;
  &lt;/a&gt;
  3. Colors
&lt;/h3&gt;

&lt;p&gt;Colors are the first thing that people notice when they visit your site. Every website project needs a specific set of colors that will be used throughout the interface. This is called a color scheme. Without a color scheme, your interfaces will lack consistency and hence people would not want to stay longer on your page. Color schemes are a key component in any interface because they help define a brand's identity, for example, look at brands like Facebook, Snapchat, Instagram. They have a distinct color scheme that triggers certain emotions and associations in the user's eye.&lt;/p&gt;

&lt;p&gt;Now the simplest way to get some good color palettes is taking the help of one of these amazing tools with thousands of free to use color palettes created by the community.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://coolors.co/"&gt;coolors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://colorhunt.co/"&gt;colorhunt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://colormind.io/"&gt;colormind&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;But if you have the time and you want to make your own color palette, then you can use one of these 3 types of color schemes that are simplest to create and look great for all kinds of  interfaces(there are others)&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c2Fr0mRM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618689273047/c_1-YYHvN.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c2Fr0mRM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618689273047/c_1-YYHvN.png" alt="color-schemes.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Monochrome&lt;/strong&gt; - A monochromatic color scheme is based on a single color (hue) and all the other colors in the palette are just different shades obtained by changing saturation and lightness.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Complementary&lt;/strong&gt; - 2 colors present on the opposite side of the color wheel to each other, form a complementary color scheme.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Triadic&lt;/strong&gt; - A triadic color scheme consists of three colors that are equally distant from each other in the color wheel.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br&gt;
If you want to know more about colors and different types of color schemes, I'd suggest watching this &lt;a href="https://youtu.be/AvgCkHrcj90"&gt;amazing video&lt;/a&gt;  on &lt;strong&gt;Color Theory&lt;/strong&gt; by a YouTube channel called  &lt;a href="https://www.youtube.com/c/FlowStudio/"&gt;Flow Studio&lt;/a&gt; .&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
&lt;strong&gt;Personal Tip:&lt;/strong&gt; Try not to use the default colors like black, red, blue, green, yellow, etc. because these colors are harsh on the eyes. Prefer to use lighter shades that are comforting to the eyes. If you are using VS Code, then you can simply hover the cursor over a color, and then the color picker will appear. You can then drag the selector to easily select a lighter shade.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
     &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#4-font"&gt;
  &lt;/a&gt;
  4. Font
&lt;/h3&gt;

&lt;p&gt;When it comes to fonts, less is more. A golden rule is to use not more than 2 fonts in one project. We can get deeper into the subject of fonts, also called typography, but for the sake of simplicity let's stick to the basics.&lt;br&gt;&lt;br&gt;
&lt;strong&gt;These are outdated and overused fonts so avoid them:&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
Comic Sans, Papyrus, Times, New Roman, Arial, Courier New, Kristen ITC, Impact, Jokerman, Copperplate Gothic, Calibri, Courier, Brush Script, Souvenir, Curlz, Lobster (yeah that's font name)&lt;br&gt;
Instead, use these fonts which look modern and minimal, and are not overused&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Instead, use these fonts which look modern and minimal, and are not overused&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; &lt;a href="https://fonts.google.com/specimen/Playfair+Display"&gt;Playfair Display&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.wfonts.com/font/bell-gothic-std"&gt;Bell gothic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://freefontsfamily.com/helvetica-font-family/"&gt;Helvetica&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cofonts.com/avant-garde-font/"&gt;Avant Garde&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fonts.google.com/specimen/Montserrat"&gt;Montserrat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fonts.google.com/specimen/Josefin+Sans"&gt;Josefin Sans&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.futurafree.com/downloads/futura-font/"&gt;Futura&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://freefontsvault.com/rockwell-font-download-free/"&gt;Rockwell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://freefontsvault.com/bembo-font-download-free/"&gt;Bembo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.fontspace.com/bodoniflf-font-f1202"&gt;Bodoni&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://freefontsvault.com/sabon-font-download-free/"&gt;Sabon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://freefontsvault.com/akzidenz-grotesk-font-download-free/"&gt;Akzidenz-Grotesk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fonts.adobe.com/fonts/adobe-garamond"&gt;Garamond&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.myfonts.com/fonts/latinotype/recoleta/regular-demo/"&gt;Recoleta&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.atipofoundry.com/fonts/argesta"&gt;Argesta&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br&gt;
&lt;strong&gt;You can use this piece of code to use a downloaded font in your website&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@font-face {
  font-family: fontName;
  src: url(font_file.woff);
}

h1 {
  font-family: fontName;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;br&gt;
&lt;strong&gt;Bonus typography tip&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
Use text stroke on heading and important text that you want to highlight.&lt;br&gt;&lt;br&gt;
What is text stroke? Text stroke is the border around each letter in a text.&lt;br&gt;&lt;br&gt;
It gives the interface a sleek and modern look. And it can be achieved using a single line of code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;h1 {
    -webkit-text-stroke: 2px red;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;h3&gt;
  &lt;a href="#5-spacing"&gt;
  &lt;/a&gt;
  5. Spacing
&lt;/h3&gt;

&lt;p&gt;Last but not least, spacing. A good user interface should be clean and uncluttered, making it easy for users to understand and focus their attention on the important parts of the page. Spacing lets the users know that the elements closer to each other are related and vice versa. But this is something that most people get wrong because of which their interfaces are too cluttered and unorganized, which makes users leave the page soon. Therefore, make sure you give your layouts enough breathing room to make them look clean and easy to navigate.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--guH_wC_K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618743759948/fg6j4yROI.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--guH_wC_K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618743759948/fg6j4yROI.png" alt="spacing.png"&gt;&lt;/a&gt;&lt;br&gt;
*There are tons of examples of user interfaces with bad spacing. Have a look at them to get a clear understanding of how to use spacing effectively.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
Keep in mind that all the points mentioned above are only guidelines and suggestions (crafted for beginners) and it does not mean that your design won't turn out well if you go against these tips. A truly talented designer would let no rules and constraints limit their creativity and imagination.&lt;br&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#contact-me"&gt;
  &lt;/a&gt;
  Contact Me:
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://linktr.ee/pulkit_jasti"&gt;Linktree&lt;/a&gt;&lt;br&gt;
&lt;a href="https://medium.com/@pulkit.jasti"&gt;My Blog&lt;/a&gt;&lt;br&gt;
&lt;a href="https://pulkit-jasti.github.io/portfolio-main/"&gt;My Portfolio&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/JastiPulkit"&gt;Twitter&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/pulkit-jasti"&gt;GitHub&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.linkedin.com/in/pulkit-jasti/"&gt;LinkedIn&lt;/a&gt;&lt;/p&gt;

</description>
      <category>ux</category>
      <category>uiweekly</category>
      <category>webdev</category>
      <category>design</category>
    </item>
    <item>
      <title>Top 5 Operations for Python Lists</title>
      <author>UdayKiran137</author>
      <pubDate>Sun, 02 May 2021 10:11:17 +0000</pubDate>
      <link>https://dev.to/udaykiran137/top-5-operations-for-python-lists-38b8</link>
      <guid>https://dev.to/udaykiran137/top-5-operations-for-python-lists-38b8</guid>
      <description>&lt;p&gt;A list is an ordered collection of Python objects. As a mutable data type, lists are often used to store data that are subject to change at the runtime. Another advantageous feature of lists is that the allowance of having duplicate elements.&lt;br&gt;
Because of these features, lists are probably the most used data structure in any Python project. In this article, I will share the top 5 operations for the use of Python lists with you.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Construction&lt;/strong&gt;&lt;br&gt;
The first apparent operation is how we create lists.&lt;/p&gt;

&lt;p&gt;I) The easiest way will be just listing composing elements inside a pair of square brackets. We use commas to separate these items. Optionally, we can use this declaration with the * operator if we want to repeat a particular list for specific times.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Code
&amp;gt;&amp;gt;&amp;gt; # Create an empty list
&amp;gt;&amp;gt;&amp;gt; empty_list = []
&amp;gt;&amp;gt;&amp;gt; # A list of numbers
&amp;gt;&amp;gt;&amp;gt; numbers = [1, 2, 3, 4, 5]
&amp;gt;&amp;gt;&amp;gt; # Use * operator
&amp;gt;&amp;gt;&amp;gt; triples = [1, 2, 3] * 3
&amp;gt;&amp;gt;&amp;gt; triples
[1, 2, 3, 1, 2, 3, 1, 2, 3] 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;II) &lt;strong&gt;We can also create lists by slicing existing lists&lt;/strong&gt;. Some examples are shown below. One quick note, these slicing operations return lists as their return values, but just to make code snippets of the present article look clear, I don’t typically assign these lists to variables such that the Python interpreter will print them automatically.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Code
&amp;gt;&amp;gt;&amp;gt; # Suppose we have the following list to begin with
&amp;gt;&amp;gt;&amp;gt; list0 = [0, 2, 4, 6, 8, 10, 12, 14]
&amp;gt;&amp;gt;&amp;gt; # Create a list of the same elements
&amp;gt;&amp;gt;&amp;gt; list0[:] # This is equivalent to list0.copy()
[0, 2, 4, 6, 8, 10, 12, 14]
&amp;gt;&amp;gt;&amp;gt; # Specify the start, end, and step 
&amp;gt;&amp;gt;&amp;gt; list0[1:8:2]
[2, 6, 10, 14]
&amp;gt;&amp;gt;&amp;gt; # Create a list of the reverse order
&amp;gt;&amp;gt;&amp;gt; list0[::-1]
[14, 12, 10, 8, 6, 4, 2, 0]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;III) More generally, we can use the &lt;strong&gt;list()&lt;/strong&gt; function that creates lists from any iterable, such as tuples and dictionaries. When nothing is set, the list() function will create an empty list.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Code
&amp;gt;&amp;gt;&amp;gt; # from range
&amp;gt;&amp;gt;&amp;gt; list(range(4))
[0, 1, 2, 3]
&amp;gt;&amp;gt;&amp;gt; # from tuple
&amp;gt;&amp;gt;&amp;gt; list((5, 4, 3))
[5, 4, 3]
&amp;gt;&amp;gt;&amp;gt; # from dictionary
&amp;gt;&amp;gt;&amp;gt; list({'zero': 0, 'one': 1, 'two': 2})
['zero', 'one', 'two']
&amp;gt;&amp;gt;&amp;gt; # from map object
&amp;gt;&amp;gt;&amp;gt; list(map(len, ['one', 'hello', 'world!']))
[3, 5, 6]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;IV) Another convenient way is to use the list comprehension. The general format is &lt;strong&gt;[expression for ele in iterable if condition]&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Code
&amp;gt;&amp;gt;&amp;gt; # Create a list of squares
&amp;gt;&amp;gt;&amp;gt; [x*x for x in range(5)]
[0, 1, 4, 9, 16]
&amp;gt;&amp;gt;&amp;gt; # Create a list of even numbers
&amp;gt;&amp;gt;&amp;gt; [x for x in range(10) if x%2 == 0]
[0, 2, 4, 6, 8]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;2. Access Elements&lt;/strong&gt;&lt;br&gt;
When we work with lists, we need to access individual elements or elements within a range.&lt;/p&gt;

&lt;p&gt;I) We can access &lt;strong&gt;individual elements&lt;/strong&gt; using &lt;strong&gt;indexing&lt;/strong&gt;. Typically, we use zero-based indexing that counts from the left. Alternatively, we can use reverse indexing, which counts from the right and begins with -1.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Code
&amp;gt;&amp;gt;&amp;gt; numbers = [1, 4, 5, 7, 9, 13]
&amp;gt;&amp;gt;&amp;gt; # Forward Indexing
&amp;gt;&amp;gt;&amp;gt; numbers[2]
5
&amp;gt;&amp;gt;&amp;gt; # Reverse Indexing
&amp;gt;&amp;gt;&amp;gt; numbers[-1]
13
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;II) We can access individual and a range of elements by unpacking. It’s pretty much like unpacking a tuple (i.e., a, b = (‘code’, 404)), and we can use * and _ to have a more powerful unpacking&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Code
&amp;gt;&amp;gt;&amp;gt; pets = ['Dog', 'Cat', 'Turtle', 'Snake', 'Hamster']
&amp;gt;&amp;gt;&amp;gt; # when we're only interested in the first and last element
&amp;gt;&amp;gt;&amp;gt; a, *_, b = pets
&amp;gt;&amp;gt;&amp;gt; # elements as a list and two last elements
&amp;gt;&amp;gt;&amp;gt; *c, d, e = pets
&amp;gt;&amp;gt;&amp;gt; print(f'a: {a}, b: {b}, c: {c}, d: {d}, e: {e}')
a: Dog, b: Hamster, c: ['Dog', 'Cat', 'Turtle'], d: Snake, e: Hamster
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;III) We can access multiple elements using slicing. It’s discussed in the above section when we use slicing to create new lists&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Code
&amp;gt;&amp;gt;&amp;gt; numbers = list(range(20))
&amp;gt;&amp;gt;&amp;gt; # Get even numbers
&amp;gt;&amp;gt;&amp;gt; numbers[::2]
[0, 2, 4, 6, 8, 10, 12, 14, 16, 18]
&amp;gt;&amp;gt;&amp;gt; # Get odd numbers
&amp;gt;&amp;gt;&amp;gt; numbers[1::2]
[1, 3, 5, 7, 9, 11, 13, 15, 17, 19]
&amp;gt;&amp;gt;&amp;gt; # Get some numbers in the middle
&amp;gt;&amp;gt;&amp;gt; numbers[5:9]
[5, 6, 7, 8]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;IV) We can access a random element in the list. It can be done using random.choice() function. Please note that this function is available in the random module.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Code
&amp;gt;&amp;gt;&amp;gt; import random
&amp;gt;&amp;gt;&amp;gt; lottery_tickets = ['A0049', 'A0050', 'A0051', 'A0052', 'A0053']
&amp;gt;&amp;gt;&amp;gt; # draw the winning ticket
&amp;gt;&amp;gt;&amp;gt; random.choice(lottery_tickets)
'A0050'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;V) We can find the index of a particular object. To do that, we can use the index() method. Please note that we’ll encounter an error if the object isn’t on the list.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Code
&amp;gt;&amp;gt;&amp;gt; students = ['John', 'Mike', 'Jennifer', 'Joe']
&amp;gt;&amp;gt;&amp;gt; # when an object exist
&amp;gt;&amp;gt;&amp;gt; students.index('Mike')
1
&amp;gt;&amp;gt;&amp;gt; # when an object doesn't exist
&amp;gt;&amp;gt;&amp;gt; students.index('Mary')
Traceback (most recent call last):
  File "&amp;lt;stdin&amp;gt;", line 1, in &amp;lt;module&amp;gt;
ValueError: 'Mary' is not in list
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;3. Conditionals&lt;/strong&gt;&lt;br&gt;
Certain operations rely on whether a particular condition is met or not. There are multiple possible conditions that pertain to lists in Python.&lt;/p&gt;

&lt;p&gt;I) We can check if a list is empty. When a list isn’t empty, it is evaluated as True. When it’s empty, using the not keyword will make the evaluation True. In other words, an empty list is evaluated as False.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Code
&amp;gt;&amp;gt;&amp;gt; some_list = [1, 2]
&amp;gt;&amp;gt;&amp;gt; empty_list = []
&amp;gt;&amp;gt;&amp;gt; if some_list:
...     print('This is not an empty list')
... 
This is not an empty list
&amp;gt;&amp;gt;&amp;gt; if not empty_list:
...     print('This is to negate an empty list')
... 
This is to negate an empty list
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;II) We can check if an element is in the list. To do that, we can use the item in the list expression. To negate it, we can use not in.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Code
&amp;gt;&amp;gt;&amp;gt; activities = ['soccer', 'tennis', 'swim', 'karate']
&amp;gt;&amp;gt;&amp;gt; # check if something is in the list
&amp;gt;&amp;gt;&amp;gt; 'tennis' in activities
True
&amp;gt;&amp;gt;&amp;gt; # check if something is not in the list
&amp;gt;&amp;gt;&amp;gt; 'swim' not in activities
False
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;III) We can check if the list contains all the elements of another list. We can take advantage of some built-in functionalities of the set datatype.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Code
&amp;gt;&amp;gt;&amp;gt; larger_list = [7, 8, 9, 17, 18, 19]
&amp;gt;&amp;gt;&amp;gt; smaller_list = [8, 9, 18, 19]
&amp;gt;&amp;gt;&amp;gt; # use the issuperset function
&amp;gt;&amp;gt;&amp;gt; set(larger_list).issuperset(set(smaller_list))
True
&amp;gt;&amp;gt;&amp;gt; # use the issubset function
&amp;gt;&amp;gt;&amp;gt; set(smaller_list).issubset(set(larger_list))
True
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;IV) We can check if the list contains any elements of another list. Similarly, as above, the set data type has built-in functionalities for this operation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Code
&amp;gt;&amp;gt;&amp;gt; large_list = [7, 8, 9, 17, 18, 19]
&amp;gt;&amp;gt;&amp;gt; small_list0 = [9, 28, 29]
&amp;gt;&amp;gt;&amp;gt; small_list1 = [28, 29]
&amp;gt;&amp;gt;&amp;gt; # use the intersection function
&amp;gt;&amp;gt;&amp;gt; bool(set(large_list).intersection(set(small_list0)))
True
&amp;gt;&amp;gt;&amp;gt; bool(set(large_list).intersection(set(small_list1)))
False
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;4. Modify Elements&lt;/strong&gt;&lt;br&gt;
One major feature of lists is their mutability, which means we can modify their elements, such as adding and removing items.&lt;/p&gt;

&lt;p&gt;I) We can append an element at the end or insert one at a particular index using the append() and insert() methods, respectively&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Code
&amp;gt;&amp;gt;&amp;gt; existing_numbers = [2, 4, 6, 8]
&amp;gt;&amp;gt;&amp;gt; # append an element at the end
&amp;gt;&amp;gt;&amp;gt; existing_numbers.append(10)
&amp;gt;&amp;gt;&amp;gt; existing_numbers
[2, 4, 6, 8, 10]
&amp;gt;&amp;gt;&amp;gt; # insert an element at an index
&amp;gt;&amp;gt;&amp;gt; existing_numbers.insert(0, 0)
&amp;gt;&amp;gt;&amp;gt; existing_numbers
[0, 2, 4, 6, 8, 10]

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;II) We can extend the list by appending multiple elements using the extend() method, which takes in an iterable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Code
&amp;gt;&amp;gt;&amp;gt; numbers_to_extend = [1, 3, 5]
&amp;gt;&amp;gt;&amp;gt; # extend the list with another list
&amp;gt;&amp;gt;&amp;gt; numbers_to_extend.extend([7, 9])
&amp;gt;&amp;gt;&amp;gt; numbers_to_extend
[1, 3, 5, 7, 9]
&amp;gt;&amp;gt;&amp;gt; # extend the list with a tuple
&amp;gt;&amp;gt;&amp;gt; numbers_to_extend.extend((11, 13))
&amp;gt;&amp;gt;&amp;gt; numbers_to_extend
[1, 3, 5, 7, 9, 11, 13]

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;III) We can replace certain elements directly. It can be achieved by assignment to the element at an index or elements within a range.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Code
&amp;gt;&amp;gt;&amp;gt; numbers_to_replace = [1, 2, 3, 5]
&amp;gt;&amp;gt;&amp;gt; # replace an element
&amp;gt;&amp;gt;&amp;gt; numbers_to_replace[3] = 4
&amp;gt;&amp;gt;&amp;gt; numbers_to_replace
[1, 2, 3, 4]
&amp;gt;&amp;gt;&amp;gt; # replace a range of elements
&amp;gt;&amp;gt;&amp;gt; numbers_to_replace[1:3] = [0, 0]
&amp;gt;&amp;gt;&amp;gt; numbers_to_replace
[1, 0, 0, 4]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;IV) &lt;strong&gt;We can remove an element using the remove(), pop(), and del methods&lt;/strong&gt;. The remove() method removes the matching element at its first occurrence, the pop() method removes the element at the optionally specified index, and the default index is -1 (i.e., the last one), and the del statement removes an element with its index specified. Another thing to note is that the pop() method returns the value, while the other two return None.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Code
&amp;gt;&amp;gt;&amp;gt; numbers_to_remove = [1, 2, 3, 4, 5, 6]
&amp;gt;&amp;gt;&amp;gt; # using the remove()
&amp;gt;&amp;gt;&amp;gt; numbers_to_remove.remove(3)
&amp;gt;&amp;gt;&amp;gt; numbers_to_remove
[1, 2, 4, 5, 6]
&amp;gt;&amp;gt;&amp;gt; # using the pop()
&amp;gt;&amp;gt;&amp;gt; numbers_to_remove.pop(1)
2
&amp;gt;&amp;gt;&amp;gt; numbers_to_remove
[1, 4, 5, 6]
&amp;gt;&amp;gt;&amp;gt; # using the del statement
&amp;gt;&amp;gt;&amp;gt; del numbers_to_remove[-1]
&amp;gt;&amp;gt;&amp;gt; numbers_to_remove
[1, 4, 5]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;V) &lt;strong&gt;We can remove multiple elements using the clear() and del methods&lt;/strong&gt;. The clear() method removes all the elements of the list, and the del statement removes multiple elements with the range specified. Another handy way to remove all elements in the list is to assign the variable with an empty list.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Code
&amp;gt;&amp;gt;&amp;gt; # using clear
&amp;gt;&amp;gt;&amp;gt; numbers_to_clear = [3, 7, 8, 9, 10]
&amp;gt;&amp;gt;&amp;gt; numbers_to_clear.clear()
&amp;gt;&amp;gt;&amp;gt; numbers_to_clear
[]
&amp;gt;&amp;gt;&amp;gt; # using del
&amp;gt;&amp;gt;&amp;gt; numbers_to_del = [3, 7, 8, 9, 10]
&amp;gt;&amp;gt;&amp;gt; del numbers_to_del[2:]
&amp;gt;&amp;gt;&amp;gt; numbers_to_del
[3, 7]
&amp;gt;&amp;gt;&amp;gt; # using the re-assignment; note that this doesn't actually clear the old list
&amp;gt;&amp;gt;&amp;gt; numbers_to_reassign = [3, 4, 5]
&amp;gt;&amp;gt;&amp;gt; numbers_to_reassign = []
&amp;gt;&amp;gt;&amp;gt; numbers_to_reassign
[]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;VI) We can change the order of the list. Some common ways include sorting the list, reversing the list, and shuffling the list.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Code
&amp;gt;&amp;gt;&amp;gt; numbers_to_order = [7, 9, -11, 4, 0, -13]
&amp;gt;&amp;gt;&amp;gt; # sort the list
&amp;gt;&amp;gt;&amp;gt; numbers_to_order.sort()
&amp;gt;&amp;gt;&amp;gt; numbers_to_order
[-13, -11, 0, 4, 7, 9]
&amp;gt;&amp;gt;&amp;gt; numbers_to_order.sort(key=lambda x: abs(x))
&amp;gt;&amp;gt;&amp;gt; numbers_to_order
[0, 4, 7, 9, -11, -13]
&amp;gt;&amp;gt;&amp;gt; # shuffle the list
&amp;gt;&amp;gt;&amp;gt; import random
&amp;gt;&amp;gt;&amp;gt; random.shuffle(numbers_to_order)
&amp;gt;&amp;gt;&amp;gt; numbers_to_order
[0, 9, -11, -13, 4, 7]
&amp;gt;&amp;gt;&amp;gt; # reverse the list
&amp;gt;&amp;gt;&amp;gt; numbers_to_order[::-1]
[7, 4, -13, -11, 9, 0]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;5. Iteration&lt;/strong&gt;&lt;br&gt;
It’s a prevalent task that we need to perform certain operations by going through the list’s elements, which is termed iteration.&lt;/p&gt;

&lt;p&gt;I) We can iterate a list directly. Lists are iterables in Python, and thus we can iterate a list in a for loop directly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Code
&amp;gt;&amp;gt;&amp;gt; pets = ['Dog', 'Cat', 'Bird']
&amp;gt;&amp;gt;&amp;gt; for pet in pets:
...     print(pet)
... 
Dog
Cat
Bird
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;II) &lt;strong&gt;We can iterate a list using the enumerate() function&lt;/strong&gt;. This function allows us to track the count of the iteration. Optionally, we can set the start argument to specify the start number for the counting.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Code
&amp;gt;&amp;gt;&amp;gt; activities = ['soccer', 'karate', 'basketball']
&amp;gt;&amp;gt;&amp;gt; for i, activity in enumerate(activities, start=1):
...     print(f'Day {i}: {activity}')
... 
Day 1: soccer
Day 2: karate
Day 3: basketball
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;III) We can iterate a list using the reversed() function. This function allows us to iterate the list using the reverse order.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Code
&amp;gt;&amp;gt;&amp;gt; arrivals = ['John', 'Mike', 'Jennifer']
&amp;gt;&amp;gt;&amp;gt; for student in reversed(arrivals):
...     print(student)
... 
Jennifer
Mike
John
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Conclusions for the 5 topics&lt;/strong&gt;&lt;br&gt;
This article summarizes the most common operations for Python lists. Here are some quick takeaways so that you can understand the topic in these 5 sentences&lt;br&gt;
Hope you like it &lt;/p&gt;

&lt;p&gt;1) We can construct lists by listing the items, using the list() function, and working with existing ones.&lt;br&gt;
2) We can access individual and multiple items using indexing and ranges.&lt;br&gt;
3) We can check whether the list has a particular item and its emptiness and relationship with other lists.&lt;br&gt;
4) We can append, insert, and remove one or more elements. Besides, we can change the order of lists.&lt;br&gt;
5) We can iterate lists using themselves and in combination with the enumerate() and reversed() functions.&lt;/p&gt;

</description>
      <category>python</category>
      <category>lists</category>
      <category>programming</category>
      <category>opensource</category>
    </item>
    <item>
      <title>I need some ideas about the new era of technology as a new developer in the world of programing </title>
      <author>RUHANGABAHO</author>
      <pubDate>Sun, 02 May 2021 10:01:17 +0000</pubDate>
      <link>https://dev.to/ruhangabahoriddickson/i-need-some-ideas-about-the-new-era-of-technology-as-a-new-developer-in-the-world-of-programing-2k0m</link>
      <guid>https://dev.to/ruhangabahoriddickson/i-need-some-ideas-about-the-new-era-of-technology-as-a-new-developer-in-the-world-of-programing-2k0m</guid>
      <description>&lt;p&gt;all that I need is the cooperation of members from different people that will make a global village that can have and generate same and useful ideas that are developmental in the future.&lt;br&gt;
Am RUHANGABAHO DICKSON and I would like to get some group of people that have a knowledge about either html, java, python or c programming and if you have knowledge try to share with others so that you can also gain some skills from them.&lt;br&gt;
you should know that it is all about practice that will improve your skills mostly in the computing world that is prevailing now. &lt;br&gt;
nothing is impossible on the side of a programmer.&lt;/p&gt;

&lt;p&gt;looking forward to hear from you.&lt;br&gt;
Thanks.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>devops</category>
      <category>database</category>
    </item>
    <item>
      <title>Continuous Deployment on Shared Hosting with GitHub Actions</title>
      <author>Madalitso Nyemba</author>
      <pubDate>Sun, 02 May 2021 09:32:46 +0000</pubDate>
      <link>https://dev.to/madalitsonyemba/continuous-deployment-on-shared-hosting-with-github-actions-5agi</link>
      <guid>https://dev.to/madalitsonyemba/continuous-deployment-on-shared-hosting-with-github-actions-5agi</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;In this fast-paced world, where everything seems to be happening quickly, it is paramount for early as well as frequent deployment of websites/apps to keep up with the competition. There are various ways of deploying your web apps to your server but will shall be looking at how GitHub actions can help us continuously deploy our web app with minimal effort. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-continuous-deployment"&gt;
  &lt;/a&gt;
  What is Continuous Deployment
&lt;/h2&gt;

&lt;p&gt;First of all, what is continuous deployment you ask? According to &lt;a href="https://searchitoperations.techtarget.com/definition/continuous-deployment"&gt;Search IT operations&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Continuous deployment is a strategy for software releases wherein any code commit that passes the automated testing phase is automatically released into the production environment, making changes that are visible to the software's users.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We will not cover tests in this post (but in a later post). As you can see from the definition, simply commit and then all your changes are on the production server.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-shared-hosting"&gt;
  &lt;/a&gt;
  What is Shared Hosting
&lt;/h2&gt;

&lt;p&gt;There are different hosting choices with the popular ones now being shared hosting and cloud hosting. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A shared web hosting service is a web hosting service where many websites reside on one web server connected to the Internet.&lt;br&gt;
This is the cheapest way to host your website since the different users split the cost of the web server but it also has drawbacks since the resources are split across a number of users as well.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I have been using shared hosting for a long time and I got bored with transferring my files via FTP every time I made changes. I then resorted to using &lt;a href="https://github.com/"&gt;GitHub&lt;/a&gt; where I pushed my code to the repo then pulled it from my shared hosting. I still was not satisfied. I used &lt;a href="https://github.com/git-ftp/git-ftp/blob/master/man/git-ftp.1.md"&gt;GitFtp&lt;/a&gt; which was alright. Until I learned about CI/CD in my &lt;a href="https://azubiafrica.org/"&gt;Azubi Africa&lt;/a&gt; class.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#github-actions-to-the-rescue"&gt;
  &lt;/a&gt;
  GitHub Actions to the rescue
&lt;/h2&gt;

&lt;p&gt;After further research, came across GitHub actions. According to their &lt;a href="https://docs.github.com/en/actions"&gt;site&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Automate, customize, and execute your software development workflows right in your repository with GitHub Actions. You can discover, create, and share actions to perform any job you'd like, including CI/CD, and combine actions in a completely customized workflow.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#the-workflow"&gt;
  &lt;/a&gt;
  The Workflow
&lt;/h2&gt;

&lt;p&gt;Let us get to the juicy bit by doing some actual work.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setting-up-github-actions"&gt;
  &lt;/a&gt;
  Setting up GitHub actions
&lt;/h3&gt;

&lt;p&gt;(This is assuming you already have a repository in your GitHub account that you want to link to your shared hosting. if not, click &lt;a href="https://docs.github.com/en/github/getting-started-with-github/create-a-repo"&gt;here&lt;/a&gt;).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Open your repository on GitHub and head over to &lt;code&gt;Actions&lt;/code&gt; tab.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RO4o-n0L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3nz2r7n2ol9lmdoufieb.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RO4o-n0L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3nz2r7n2ol9lmdoufieb.PNG" alt="Actions tab" title="Press the actions tab"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click on the &lt;code&gt;set up a workflow yourself →&lt;/code&gt; as shown below.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YNM7lETl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a75hv8mivxjewwrx3z6o.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YNM7lETl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a75hv8mivxjewwrx3z6o.PNG" alt="Set up workflow yourself" title="Press the set up a workflow yourself"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Delete all the contents of main.yml on the page as shown below:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3gZPEdg4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zh0zns1emgnoflkerjip.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3gZPEdg4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zh0zns1emgnoflkerjip.PNG" alt="Delete contents" title="Delete all contents in the main.yml file"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Replace the file with below contents (note this is for a project in Laravel with a Vue frontend)&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Deploy Site on push&lt;/span&gt;
&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;master&lt;/span&gt;
&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;web-deploy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Deploy&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Get the latest code&lt;/span&gt;
      &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2.3.2&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/setup-node@master&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Installing project dependencies&lt;/span&gt;
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;npm install&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Building the project&lt;/span&gt;
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;npm run production&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Copy .env&lt;/span&gt;
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;php -r "file_exists('.env') || copy('.env.example', '.env');"&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Setup PHP&lt;/span&gt;
      &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;shivammathur/setup-php@v2&lt;/span&gt;
      &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;php-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;8.0'&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Install Dependencies&lt;/span&gt;
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;composer update --ignore-platform-reqs&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Generate key&lt;/span&gt;
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;php artisan key:generate&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Directory Permissions&lt;/span&gt;
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;chmod -R 777 storage bootstrap/cache&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;📂 Sync files&lt;/span&gt;
      &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;SamKirkland/FTP-Deploy-Action@4.0.0&lt;/span&gt;
      &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;server&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.LARAVEL_SITE_SERVER}}&lt;/span&gt;
        &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.LARAVEL_SITE_USER}}&lt;/span&gt;
        &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.LARAVEL_SITE_PASS}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let me now explain block by block what is going on&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Deploy Site on push&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the name of the workflow. GitHub displays the names of your workflows on your repository’s actions page after you write it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;master&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is where the GitHub action system is told when to run the workflow. The above snippet triggers the workflow when one pushes to the &lt;code&gt;master branch&lt;/code&gt;. For more on the On key, click &lt;a href="https://docs.github.com/en/actions/learn-github-actions/introduction-to-github-actions#:~:text=GitHub%20Actions%20are%20event%2Ddriven,executes%20a%20software%20testing%20script."&gt;here&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;web-deploy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Deploy&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;jobs&lt;/em&gt; - Groups together all the jobs that run in the workflow file.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;web-deploy&lt;/em&gt; - Defines the name of the web-deploy job stored within the jobs section.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;runs-on: ubuntu-latest&lt;/em&gt; - Configures the job to run on an Ubuntu Linux runner. This means that the job will execute on a fresh virtual machine hosted by GitHub.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Get the latest code&lt;/span&gt;
      &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2.3.2&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/setup-node@master&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Installing project dependencies&lt;/span&gt;
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;npm install&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Building the project&lt;/span&gt;
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;npm run production&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Remember that the steps are inside the job block.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;steps&lt;/em&gt; - Groups together all the steps that run in the web-deploy job. Each item nested under this section is a separate action or shell command.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;name&lt;/em&gt; - For identification of the separate action.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;uses: actions/&lt;a href="mailto:checkout@v2.3.2"&gt;checkout@v2.3.2&lt;/a&gt;&lt;/em&gt; - The uses keyword tells the job to retrieve v2 of the community action named actions/&lt;a href="mailto:checkout@v2.3.2"&gt;checkout@v2.3.2&lt;/a&gt;. This is an action that checks out your repository and downloads it to the runner, allowing you to run actions against your code (such as testing tools). You must use the checkout action any time your workflow will run against the repository's code or you are using an action defined in the repository.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;uses: actions/setup-node@master&lt;/em&gt; - This action installs the node software package on the runner, giving you access to the npm command.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;run: npm install&lt;/em&gt; - The run keyword tells the job to execute a command on the runner. In this case, you are using npm to install the package node dependecies.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;run: npm run production&lt;/em&gt; - This builds the Vue frontend project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Copy .env&lt;/span&gt;
      &lt;span class="s"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;php -r "file_exists('.env') || copy('.env.example', '.env');"&lt;/span&gt;
    &lt;span class="s"&gt;- name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Setup PHP&lt;/span&gt;
      &lt;span class="s"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;shivammathur/setup-php@v2&lt;/span&gt;
      &lt;span class="s"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;php-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;8.0'&lt;/span&gt;
  &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Install Dependencies&lt;/span&gt;
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;composer update --ignore-platform-reqs&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Generate key&lt;/span&gt;
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;php artisan key:generate&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Directory Permissions&lt;/span&gt;
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;chmod -R 777 storage bootstrap/cache&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;run: php -r "file_exists('.env') || copy('.env.example', '.env');&lt;/em&gt; - This creates a .env file if it does not already exist (this is important as this is automatically added to the .gitignore file).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;shivammathur/setup-php@v2&lt;/span&gt;
      &lt;span class="s"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;php-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;8.0'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This action installs php on the runner, giving you access to php version 8.0.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;run: composer update --ignore-platform-reqs&lt;/em&gt; - This is used to install and update the composer packages.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;run: php artisan key:generate&lt;/em&gt; - This generates a key for the Laravel project.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;run: chmod -R 777 storage bootstrap/cache&lt;/em&gt; - This changes permissions for the specified folder.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;📂 Sync files&lt;/span&gt;
      &lt;span class="s"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;SamKirkland/FTP-Deploy-Action@4.0.0&lt;/span&gt;
      &lt;span class="s"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;server&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.LARAVEL_SITE_SERVER}}&lt;/span&gt;
        &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.LARAVEL_SITE_USER}}&lt;/span&gt;
        &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.LARAVEL_SITE_PASS}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is where the files are now transferred to the shared hosting server. Get your FTP details from your &lt;a href="https://docs.cpanel.net/cpanel/files/ftp-accounts/"&gt;shared hosting&lt;/a&gt;. Then go to &lt;code&gt;your repo&amp;gt;settings&amp;gt;secrets&lt;/code&gt; then add the three secrets namely: server, username and then password. This action is courtesy of &lt;a href="https://github.com/SamKirkland/FTP-Deploy-Action"&gt;SamKirkland&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For more information on GitHub actions, &lt;a href="https://docs.github.com/en/actions/learn-github-actions/introduction-to-github-actions#:~:text=GitHub%20Actions%20are%20event%2Ddriven,executes%20a%20software%20testing%20script."&gt;click here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enjoy 😎&lt;/p&gt;

</description>
      <category>github</category>
      <category>laravel</category>
      <category>devops</category>
      <category>vue</category>
    </item>
    <item>
      <title>A Really Simple Intro to Context in React</title>
      <author>Laura Todd</author>
      <pubDate>Sun, 02 May 2021 09:28:53 +0000</pubDate>
      <link>https://dev.to/lauratoddcodes/a-really-simple-intro-to-context-in-react-6g1</link>
      <guid>https://dev.to/lauratoddcodes/a-really-simple-intro-to-context-in-react-6g1</guid>
      <description>&lt;p&gt;In this post, I'll take you through a simple example of using React's context API to pass information between components.&lt;/p&gt;

&lt;p&gt;Let's say we have a simple app with two components - one is an input (in this case a dropdown menu) and one which displays the result of the input.&lt;/p&gt;

&lt;p&gt;Here's the structure of the app -&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8aJnw3aX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d64tk2980o5jz098n58k.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8aJnw3aX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d64tk2980o5jz098n58k.jpg" alt="App structure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And we want to pass information between the siblings like so -&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vKKD6neG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/65g2zhunyr6oquxwpvj5.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vKKD6neG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/65g2zhunyr6oquxwpvj5.jpg" alt="Passing data between siblings"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Please note:&lt;/strong&gt; In reality, a far simpler way of passing information between siblings is by lifting state. I'm just using this example to keep things simple - you would only really use Context if the structure were more complex and you were having to pass props through a number of components. You can see my post about lifting state &lt;a href="https://dev.to/lauratoddcodes/a-really-simple-intro-to-lifting-state-in-react-1fli"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here's what we're aiming for -&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KDZFRWL3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4dtgbi8cwkv48ijgii37.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KDZFRWL3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4dtgbi8cwkv48ijgii37.jpg" alt="Final result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The selected item from the dropdown menu appears below in the Result component.&lt;/p&gt;

&lt;p&gt;You can find the starting code &lt;a href="https://github.com/LauraToddCode/using-context/tree/starting-code/src"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The first thing we want to do is create a new file in our 'src' folder called Context.js -&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B-zpSAni--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ipt707l4ksby8s8m52hw.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B-zpSAni--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ipt707l4ksby8s8m52hw.jpg" alt="src files"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the Context.js file, import React and { createContext }. Then create a variable to contain createContext(). You can call the variable whatever you like but it's standard practice to use the word 'Context' within the name.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j7l7vFdr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mslavm2xpws9xg9fgt4k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j7l7vFdr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mslavm2xpws9xg9fgt4k.png" alt="import createContext"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, create a class component called 'Provider'. Within the provider, we need to initialise the state of the 'season' value. We'll just initialise it to an empty string as it doesn't have a default value.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vTadTEQK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o4x3untoxfy1eifufyl9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vTadTEQK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o4x3untoxfy1eifufyl9.png" alt="Provider component"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then, within the render, we want to return our provider. We do this by adding  tags (if you named your context something different, then use this name for the first part of the tag). Inside the tags, add {this.props.children}.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GwBEg2KJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7dyselt4gnz0rstdpfl7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GwBEg2KJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7dyselt4gnz0rstdpfl7.png" alt="add context.provider tags"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This class will live at the top level of our application and will store all the data that we want to share with other components. In order to do this, we need to add a value to the &lt;code&gt;&amp;lt;Context.Provider&amp;gt;&lt;/code&gt; tags.&lt;/p&gt;

&lt;p&gt;Within the value, we want to set state to be 'this.state'. Then, we'll add the function that we want to use to handle the change when the user selects an option from the dropdown menu. So, we'll add a handleChange function which sets the state of 'season' to 'event.target.value' (the option selected from the dropdown).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w2MB9qxx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4o6qjyw3ue984zzbuvfa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w2MB9qxx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4o6qjyw3ue984zzbuvfa.png" alt="Add handleChange function"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, we need to go over to the index.js file and add the Context. &lt;/p&gt;

&lt;p&gt;First, import { Provider } from the Context file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VJ7c-lHJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/as5pk6e40vsum7hav0tz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VJ7c-lHJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/as5pk6e40vsum7hav0tz.png" alt="import provider"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then, wrap the App in &lt;code&gt;&amp;lt;Provider&amp;gt;&lt;/code&gt; tags. This will ensure that the entire app has access to data in the Context file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8DeXc4Md--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nznnrrgxwfbqzrvxerim.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8DeXc4Md--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nznnrrgxwfbqzrvxerim.png" alt="wrap app in provider tags"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, lets go over to our Input.js file and import { Context } from our Context file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zadlPTrT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p74l4ptt2u4p9likgtzr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zadlPTrT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p74l4ptt2u4p9likgtzr.png" alt="import context"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, wrap the dropdown menu in &lt;code&gt;&amp;lt;Context.Consumer&amp;gt;&lt;/code&gt; tags. This will allow the dropdown menu to access data from the Context file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QdWvfCA_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ayl1dcs0wm6tcvsgyhsl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QdWvfCA_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ayl1dcs0wm6tcvsgyhsl.png" alt="wrap dropdown in context.consumer"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, we need to add the handleChange function that we created earlier in the Context file to the dropdown menu. &lt;/p&gt;

&lt;p&gt;To do this, we create an anonymous function with context in the parameters. Then we can add an onChange event listener to the &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; tag and set the value to {context.handleChange}.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v7TtihDw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fnut6wbo5r789zma8p3b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v7TtihDw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fnut6wbo5r789zma8p3b.png" alt="add onchange event listener"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, we need to go over to the Result.js file and allow it to access the state of 'season'.&lt;/p&gt;

&lt;p&gt;We need to repeat the same steps we used for the Input.js file of importing { Context }, wrapping the component in &lt;code&gt;&amp;lt;Context.Consumer&amp;gt;&lt;/code&gt; tags and creating an anonymous function.&lt;/p&gt;

&lt;p&gt;This time though, we want to display the current state of 'season'. We do this by adding {context.state.season} within some paragraph tags.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xf8Q4uJm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0mnp0qcs5vmvql5v8kvx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xf8Q4uJm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0mnp0qcs5vmvql5v8kvx.png" alt="add season state to paragraph tags"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's it! Now when you select an option from the dropdown menu, it should display below.&lt;/p&gt;

&lt;p&gt;You can check your final code &lt;a href="https://github.com/LauraToddCode/using-context/tree/master/src"&gt;here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>react</category>
      <category>context</category>
      <category>components</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Undo your last git mistake with ugit</title>
      <author>Bhupesh Varshney 👾</author>
      <pubDate>Sun, 02 May 2021 08:00:53 +0000</pubDate>
      <link>https://dev.to/bhupesh/undo-your-last-git-mistake-with-ugit-3kln</link>
      <guid>https://dev.to/bhupesh/undo-your-last-git-mistake-with-ugit-3kln</guid>
      <description>&lt;p&gt;So I have been working on this little tool called &lt;a href="https://github.com/Bhupesh-V/ugit"&gt;&lt;strong&gt;ugit&lt;/strong&gt;&lt;/a&gt; (and was finally able to release a stable version), the goal is to make it easier for beginner to intermediate git users to undo their last (accidental) git command. Because we are not perfect and commit mistakes.&lt;/p&gt;

&lt;p&gt;“Oh wait I deleted the &lt;em&gt;auth-jwt&lt;/em&gt; branch without merging!! fuck”&lt;br&gt;&lt;br&gt;
&lt;em&gt;Opens browser&lt;/em&gt;&lt;br&gt;&lt;br&gt;
“How to restore deleted branch”&lt;br&gt;&lt;br&gt;
&lt;em&gt;Wastes 5 minutes reading the thread,&lt;/em&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Brain context switch, losses focus&lt;/em&gt;&lt;br&gt;&lt;br&gt;
“Aarrgh, Git sucks”&lt;/p&gt;

&lt;p&gt;Failure is a good way to learn something new but how many times are you going to mess up with git, if your ultimate goal is to deliver the new feature in your startup as fast as possible, huh? Git is great but it’s not really good with developer experience (DX).&lt;/p&gt;

&lt;p&gt;Yo bhupesh, I can just you know &lt;em&gt;alias&lt;/em&gt; this command. Oh cool, good luck remembering that alias after 1 month when you fuck-up again.&lt;/p&gt;

&lt;p&gt;If you are in the gang of getting things done, adding &lt;strong&gt;ugit&lt;/strong&gt; might be a good choice for you.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Bhupesh-V"&gt;
        Bhupesh-V
      &lt;/a&gt; / &lt;a href="https://github.com/Bhupesh-V/ugit"&gt;
        ugit
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      🚨️ ugit helps you undo your last git command with grace. Your damage control git buddy
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
ugit&lt;/h1&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/34342551/115037937-a608d800-9eec-11eb-88a9-252da7d6f507.png"&gt;&lt;img alt="ugit logo" height="100px" src="https://res.cloudinary.com/practicaldev/image/fetch/s--FjBfTvje--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/34342551/115037937-a608d800-9eec-11eb-88a9-252da7d6f507.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
&lt;code&gt;Undo your last oopsie 🙈️ in git with ease&lt;/code&gt;
&lt;/h4&gt;
&lt;p&gt;
  &lt;a href="https://github.com/Bhupesh-V/ugit/blob/master/LICENSE"&gt;
    &lt;img alt="License: MIT" src="https://camo.githubusercontent.com/d0c4f329325913dc80e868cce90186ce92143e28d3b2cbfb66e1e45abf149e98/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f426875706573682d562f75676974"&gt;
  &lt;/a&gt;
  &lt;a href="https://raw.githubusercontent.com/Bhupesh-V/ugit/master/"&gt;
    &lt;img alt="platform support linux and macos" src="https://camo.githubusercontent.com/e23bd4e11e8aef909a9ff2c12990ee4ae7bf8583da60df079eda588fb2469a16/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f706c6174666f726d2d474e552f4c696e757820253743204d61634f532d626c7565"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/ellerbrock/open-source-badges"&gt;
    &lt;img alt="bash love" src="https://res.cloudinary.com/practicaldev/image/fetch/s--_QXTYKQz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/ellerbrock/open-source-badges/master/badges/bash-v1/bash.png"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/bhupeshimself" rel="nofollow"&gt;
    &lt;img alt="Twitter: bhupeshimself" src="https://camo.githubusercontent.com/8191a674bed748b85e1bd7c9320ec24a9c9c8c6e32bc924ae1d7db0377527411/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f666f6c6c6f772f62687570657368696d73656c662e7376673f7374796c653d736f6369616c"&gt;
  &lt;/a&gt;
  &lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/34342551/114261429-1ea4fb80-99f8-11eb-92b4-66315a65b854.gif"&gt;&lt;img alt="ugit demo gif" src="https://res.cloudinary.com/practicaldev/image/fetch/s--KvFKlzIt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://user-images.githubusercontent.com/34342551/114261429-1ea4fb80-99f8-11eb-92b4-66315a65b854.gif"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h2&gt;
Why &lt;code&gt;ugit&lt;/code&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;You did an accidental &lt;code&gt;git&lt;/code&gt; command you didn't want to.&lt;/li&gt;
&lt;li&gt;You don't want to waste your time searching on &lt;em&gt;how to undo ...&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Because ugit is cool&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
What's in the box&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;ugit&lt;/code&gt; supports undoing following operations, some are a WIP. If you know of any other operations that can be undone and is not in the list, make sure to send a quick PR 💛️&lt;/p&gt;
&lt;ul class="contains-task-list"&gt;
&lt;li class="task-list-item"&gt;
 Undo &lt;code&gt;git commit&lt;/code&gt;
&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Undo &lt;code&gt;git add&lt;/code&gt;
&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Undo &lt;code&gt;git push&lt;/code&gt;
&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Undo &lt;code&gt;git branch -D&lt;/code&gt; (branch delete)&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Undo &lt;code&gt;git pull&lt;/code&gt;
&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Undo &lt;code&gt;git reset&lt;/code&gt;
&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Undo &lt;code&gt;git tag -d&lt;/code&gt; (tag delete)&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Undo &lt;code&gt;git stash apply&lt;/code&gt;
&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Undo &lt;code&gt;git stash pop/drop/clear&lt;/code&gt;
&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Undo accidental file delete (Restore a deleted file after a commit)&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Undo (Restore) a file to a previous version&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Undo &lt;code&gt;git merge&lt;/code&gt;
&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Undo &lt;code&gt;git tag&lt;/code&gt; (rename a tag)&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Undo &lt;code&gt;git rebase&lt;/code&gt;
&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Undo &lt;code&gt;git cherry-pick&lt;/code&gt;
&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Undo &lt;code&gt;git worktree remove&lt;/code&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/Bhupesh-V/ugit"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
Ok enough talking.
&lt;h2&gt;
  &lt;a href="#what-is-raw-ugit-endraw-"&gt;
  &lt;/a&gt;
  What is &lt;code&gt;ugit&lt;/code&gt;?
&lt;/h2&gt;

&lt;p&gt;It’s just a simple shell script with guided programmatic steps to undo your last git command, powered by FZF built for people who live and work with terminals every day.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#guided-tutorials"&gt;
  &lt;/a&gt;
  Guided Tutorials
&lt;/h2&gt;

&lt;p&gt;Below are some GIF demos of undoing some git operations, the list is long (around 17 scenarios) but I am only demonstrating some common ones.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#undoing-raw-git-add-endraw-"&gt;
  &lt;/a&gt;
  Undoing &lt;code&gt;git add&lt;/code&gt;
&lt;/h3&gt;


  


&lt;h3&gt;
  &lt;a href="#undoing-raw-git-branch-d-endraw-restore-deleted-branch"&gt;
  &lt;/a&gt;
  Undoing &lt;code&gt;git branch -D&lt;/code&gt; (Restore deleted branch)
&lt;/h3&gt;


  


&lt;h2&gt;
  &lt;a href="#undoingrestoring-file-to-previous-version"&gt;
  &lt;/a&gt;
  Undoing/Restoring file to previous version
&lt;/h2&gt;


  


&lt;h3&gt;
  &lt;a href="#undoing-raw-git-merge-endraw-"&gt;
  &lt;/a&gt;
  Undoing &lt;code&gt;git merge&lt;/code&gt;
&lt;/h3&gt;


  


&lt;h3&gt;
  &lt;a href="#i-dont-like-your-stupid-script"&gt;
  &lt;/a&gt;
  I don’t like your stupid script
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WtrVD5RW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/bhupesh/blog_content_pics/sed-doggo_e7RD-mM7L.webp" class="article-body-image-wrapper"&gt;&lt;img alt="sad dogo crying" src="https://res.cloudinary.com/practicaldev/image/fetch/s--WtrVD5RW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/bhupesh/blog_content_pics/sed-doggo_e7RD-mM7L.webp"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cool, I mean we are still friends right?? Friends help friends avoid git mistakes, that’s why I wrote an accompanying text guide on &lt;a href="https://bhupesh.gitbook.io/notes/git/how-to-undo-anything-in-git"&gt;How to undo anything in Git&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Share it with your friends, co-workers. No hard feelings&lt;/p&gt;

&lt;p&gt;Peace ✌️&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>git</category>
      <category>github</category>
      <category>productivity</category>
    </item>
  </channel>
</rss>
