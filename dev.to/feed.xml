<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Charts in Vue3</title>
      <author>Alexandru Ghiura</author>
      <pubDate>Fri, 21 May 2021 13:36:34 +0000</pubDate>
      <link>https://dev.to/ghalex/charts-in-vue3-25a0</link>
      <guid>https://dev.to/ghalex/charts-in-vue3-25a0</guid>
      <description>&lt;p&gt;Hello 👋 !&lt;/p&gt;

&lt;p&gt;Today I want to talk about charts, more specifically charts in Vue 3.&lt;/p&gt;

&lt;p&gt;Recently I had to add some charts to my latest project so I had to find a good library that will allow me to do this easily &amp;amp; fast.&lt;/p&gt;

&lt;p&gt;I already used &lt;a href="https://d3js.org/"&gt;D3&lt;/a&gt; multiple times and considered an industry-standard, but I wanted something more simple for the start that could still offer me some customization if I want to do that in the future.&lt;/p&gt;

&lt;p&gt;After some research this were my &lt;strong&gt;top 3 candidates&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;D3&lt;/li&gt;
&lt;li&gt;ApexCharts&lt;/li&gt;
&lt;li&gt;Chart.js&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The issue I had with &lt;strong&gt;ApexCharts&lt;/strong&gt; &amp;amp; &lt;strong&gt;Chart.js&lt;/strong&gt; was that you need to use a library that is a wrapper for the core library plus the configuration for the charts was cumbersome and I had problems trying to do any kind of customization.&lt;/p&gt;

&lt;p&gt;I was expecting to find a library like &lt;a href="https://recharts.org/en-US/"&gt;Recharts&lt;/a&gt; where you compose components to write your chart and the rendering part is handled by the framework, in my case by Vue, but I couldn’t find it.&lt;/p&gt;

&lt;p&gt;This made me choose &lt;strong&gt;D3&lt;/strong&gt;. The problem here was that I had to write a lot of code to get simple charts so I decided to write a new chart library for Vue 3.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hello-vue3charts"&gt;
  &lt;/a&gt;
  Hello, Vue3-Charts
&lt;/h2&gt;

&lt;p&gt;The library is called &lt;a href="http://vue3charts.org/"&gt;Vue3-Charts&lt;/a&gt; and it is build with 3 core concepts in mind:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;💡 Intuitive&lt;/li&gt;
&lt;li&gt;🔌 Extensible&lt;/li&gt;
&lt;li&gt;📦 Extremely easy to use&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;The core idea is&lt;/strong&gt;: If you want a simple chart, the library should be very intuitive and easy to use but if you need more complicated layers and customization the library should provide that too.&lt;/p&gt;

&lt;p&gt;To do that the library is build with this in mind and everything is a &lt;code&gt;layer&lt;/code&gt; or a &lt;code&gt;widget&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The library comes with some built-in layers (&lt;code&gt;Line&lt;/code&gt;, &lt;code&gt;Bar&lt;/code&gt;, &lt;code&gt;Area&lt;/code&gt;, etc…) but you can easily write your own layers using the power of Vue3 &lt;a href="https://v3.vuejs.org/api/composition-api.html"&gt;composition API&lt;/a&gt;. Check &lt;a href="https://vue3charts.org/docs/custom-layer"&gt;this example&lt;/a&gt; in the &lt;a href="https://vue3charts.org/docs/getting-started"&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here is a simple responsive &lt;strong&gt;LineChart&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;Responsive&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"w-full"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;template&lt;/span&gt; &lt;span class="na"&gt;#main&lt;/span&gt;&lt;span class="err"&gt;="&lt;/span&gt;{ width }"&amp;gt;
      &lt;span class="nt"&gt;&amp;lt;Chart&lt;/span&gt; &lt;span class="na"&gt;:size=&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;{ width, height: 420 }" :data="data"&amp;gt;
        &lt;span class="nt"&gt;&amp;lt;template&lt;/span&gt; &lt;span class="na"&gt;#layers&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;Line&lt;/span&gt; &lt;span class="na"&gt;:dataKeys=&lt;/span&gt;&lt;span class="s"&gt;"['name', 'pl']"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/Chart&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/Responsive&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"ts"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;defineComponent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Responsive&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Chart&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Line&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue3-charts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;plByMonth&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@/data&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;defineComponent&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;LineChart&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;components&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Responsive&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Chart&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Line&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;plByMonth&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;direction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;horizontal&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;margin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;direction&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;margin&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see you just write Vue components to build your charts simple and easy to read.&lt;/p&gt;

&lt;p&gt;The library is still in progress but you can check the documentation here:&lt;br&gt;
&lt;a href="https://vue3charts.org/"&gt;https://vue3charts.org/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And the GitHub repository here:&lt;br&gt;
&lt;a href="https://github.com/ghalex/vue3-charts"&gt;https://github.com/ghalex/vue3-charts&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you have any suggestions please let me know.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thank-you-so-much-for-reading"&gt;
  &lt;/a&gt;
  Thank you so much for reading!
&lt;/h2&gt;

&lt;p&gt;If there is anything &lt;strong&gt;I can do to help&lt;/strong&gt;, please reach out on my Twitter &lt;a class="mentioned-user" href="https://dev.to/ghalex"&gt;@ghalex&lt;/a&gt;
 and check out my &lt;a href="https://ghalex.com"&gt;blog&lt;/a&gt; for more articles.&lt;/p&gt;

&lt;p&gt;Have a nice day!&lt;/p&gt;

</description>
      <category>vue</category>
      <category>vue3</category>
      <category>d3</category>
    </item>
    <item>
      <title>Is there a way to have custom typecasting in GoLang?</title>
      <author>Calin Baenen</author>
      <pubDate>Fri, 21 May 2021 13:26:48 +0000</pubDate>
      <link>https://dev.to/baenencalin/is-there-a-way-to-have-custom-typecasting-in-golang-383b</link>
      <guid>https://dev.to/baenencalin/is-there-a-way-to-have-custom-typecasting-in-golang-383b</guid>
      <description>&lt;p&gt;I know there is typecasting in GoLang, such as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;long&lt;/span&gt; &lt;span class="kt"&gt;int64&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;ulong&lt;/span&gt; &lt;span class="kt"&gt;uint64&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="n"&gt;long&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;39486&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;i16&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;int64&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;ui16&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;uint64&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i16&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;150&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;125&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;68&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;66&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But is there a way to add them to interface/struct types?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;IJType&lt;/span&gt; &lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="c"&gt;/* ... */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;JByte&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="c"&gt;/* Implements IJType */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Is there a way I could make a constructor, like in the following?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="n"&gt;JByte&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;JByte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt; &lt;span class="c"&gt;/*byte*/&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c"&gt;// -&amp;gt; JByte(byte) -&amp;gt; JByte {/* ... */}&lt;/span&gt;
&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c"&gt;// 255.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>go</category>
      <category>beginners</category>
      <category>watercooler</category>
      <category>help</category>
    </item>
    <item>
      <title>Setting up an Angular 12 workspace with Nx and GitHub Actions</title>
      <author>Lars Gyrup Brink Nielsen</author>
      <pubDate>Fri, 21 May 2021 13:21:54 +0000</pubDate>
      <link>https://dev.to/this-is-learning/setting-up-an-angular-12-workspace-with-nx-and-github-actions-32l5</link>
      <guid>https://dev.to/this-is-learning/setting-up-an-angular-12-workspace-with-nx-and-github-actions-32l5</guid>
      <description>&lt;p&gt;In this episode of Nx After Dark, we're creating an Nx workspace for an Angular 12 app called Energy Insights. We're also setting up a GitHub Actions workflow and connecting it to Nx Cloud.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/g5AoLY3jqD4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Follow the instructions below to set up a similar workspace or browse the end result at &lt;a href="https://github.com/LayZeeDK/energy-insights"&gt;github/LayZeeDK/energy-insights&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Node.js 14.x&lt;/li&gt;
&lt;li&gt;PNPM&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Note that there's currently an issue with using Cypress with PNPM. Let me know if you figure out how to fix it. Until then, remove Cypress from the workspace or use either Yarn or NPM.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#create-nx-workspace"&gt;
  &lt;/a&gt;
  Create Nx workspace
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Install the Nx workspace generator&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;pnpm&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;install&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;--global&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;create-nx-workspace&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="c"&gt;# Generate a blank Nx workspace&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;pnpm&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;nx-workspace&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;my-workspace&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;--preset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;empty&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;--pm&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pnpm&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;--npm-scope&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;my-workspace&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;--nx-cloud&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#configure-nx-workspace"&gt;
  &lt;/a&gt;
  Configure Nx workspace
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Install the "json" utility&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;npm&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;install&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;--global&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="c"&gt;# Set the base branch to "main"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;-I&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;-f&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;nx.json&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;-e&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"this.affected.defaultBase = 'main';"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#add-angular-capability"&gt;
  &lt;/a&gt;
  Add Angular capability
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Add Angular capability&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;pnpm&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;--save-dev&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nx"&gt;nrwl/angular&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="c"&gt;# Initialize Angular workspace&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;nx&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;generate&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nx"&gt;nrwl/angular:init&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#generate-angular-app-project"&gt;
  &lt;/a&gt;
  Generate Angular app project
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Generate Angular app project&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;nx&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;generate&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;my-app&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;See the video for examples of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Setting up generator defaults&lt;/li&gt;
&lt;li&gt;Creating a GitHub Actions CI workflow&lt;/li&gt;
&lt;li&gt;Setting up GitHub workflow triggers&lt;/li&gt;
&lt;li&gt;Connecting Nx Cloud for distributed computation caching&lt;/li&gt;
&lt;li&gt;Remove Cypress&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>nx</category>
      <category>angular</category>
      <category>github</category>
      <category>githubactions</category>
    </item>
    <item>
      <title>Hey I just made this cool pen...</title>
      <author>Siddharth</author>
      <pubDate>Fri, 21 May 2021 13:20:54 +0000</pubDate>
      <link>https://dev.to/siddharthshyniben/hey-i-just-made-this-cool-pen-201j</link>
      <guid>https://dev.to/siddharthshyniben/hey-i-just-made-this-cool-pen-201j</guid>
      <description>&lt;p&gt;You can check it out &lt;a href="https://codepen.io/SiddharthShyniben/full/eYvgoxm"&gt;here&lt;/a&gt;. You sure will love it!&lt;/p&gt;

&lt;p&gt;And I won't put details here. It's a surprise...&lt;/p&gt;

</description>
    </item>
    <item>
      <title>What is the difference between Library vs Framework?</title>
      <author>Rohit Singh Rana</author>
      <pubDate>Fri, 21 May 2021 12:51:38 +0000</pubDate>
      <link>https://dev.to/rohitrana/what-is-the-difference-between-library-vs-framework-174n</link>
      <guid>https://dev.to/rohitrana/what-is-the-difference-between-library-vs-framework-174n</guid>
      <description>&lt;p&gt;While the terms Library and Framework may sound similar, they both work differently. &lt;/p&gt;

&lt;p&gt;Many people use these two words interchangeably without knowing the profound meaning behind them.&lt;/p&gt;

&lt;p&gt;Before we dig into the key differences between Library and Framework, let's look at the common purpose that they both serve.&lt;/p&gt;

&lt;p&gt;Both Library and Framework are code written by some developer to solve a complicated problem efficiently.&lt;/p&gt;

&lt;p&gt;They both give you an excellent approach to write DRY (don't repeat yourself) code.&lt;/p&gt;

&lt;p&gt;Their purpose was to increase the reusability of the code so that you can use the same piece of code or functions again in your various project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-library"&gt;
  &lt;/a&gt;
  What is Library?
&lt;/h2&gt;

&lt;p&gt;A Library is a set of code that was previously written by a developer that you can call when you are building your project. &lt;/p&gt;

&lt;p&gt;In Library, you import or call specific methods that you need for your project.&lt;/p&gt;

&lt;p&gt;In simple words, a bunch of code packed together that can be used repeatedly is known as Library.&lt;/p&gt;

&lt;p&gt;Reusability is one of the main reasons to use libraries.&lt;/p&gt;

&lt;p&gt;Let's understand this more clearly with the help of an example. &lt;/p&gt;

&lt;p&gt;Think of you as a carpenter who needs to build a table.&lt;/p&gt;

&lt;p&gt;Now, you can build a table without the help of tools, but it's time-consuming and a long process.&lt;/p&gt;

&lt;p&gt;Whereas, if you choose the correct tools, you'll be able to build a table more quickly and that too without any hardship.&lt;/p&gt;

&lt;p&gt;Think of here tools as a library. You can write your program without them.&lt;/p&gt;

&lt;p&gt;But it will be a long process, and chances are your program will get buggy, while if you use Library, it'll be much easier for you to work with the program. &lt;/p&gt;

&lt;p&gt;For example, if you use the in-built JavaScript fetch () method to fetch the data from API and you feel that it's not the ideal solution.&lt;/p&gt;

&lt;p&gt;Then you can use  &lt;a href="https://www.npmjs.com/package/axios"&gt;Axios&lt;/a&gt;  Library for the same purpose to make your work easier.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;axios.post('/login', {
  firstName: 'Monica',
  lastName: 'robinson '
})
.then((response) =&amp;gt; {
  console.log(response);
}, (error) =&amp;gt; {
  console.log(error);
});

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Some common examples of Library are:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/rohitrana/why-react-is-winning-over-angular-2n7g"&gt;&lt;strong&gt;React&lt;/strong&gt; &lt;/a&gt; &lt;/p&gt;

&lt;p&gt;React is a JavaScript library for building user interfaces.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Redux&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Redux is an open-source JavaScript library for managing application state.&lt;br&gt;
It's most commonly used with React &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Three.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It's another super cool JavaScript library used to create and display 3d computer graphics.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lodash&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Lodash is a JavaScript library that provides utility functions for common programming tasks.&lt;/p&gt;

&lt;p&gt;It's more of a productivity kit in node.js &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;jQuery&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;jQuery is a JavaScript library that does the things like event handling and HTML document manipulation.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-is-framework"&gt;
  &lt;/a&gt;
  What is Framework?
&lt;/h2&gt;

&lt;p&gt;A framework is a supporting structure that gives shape to your code.&lt;/p&gt;

&lt;p&gt;In the Framework, you have to fill the structure accordingly with your code.&lt;/p&gt;

&lt;p&gt;There is a specific structure for a particular framework that you have to follow, and it's generally more restrictive than Library.&lt;/p&gt;

&lt;p&gt;One thing to remember here is that frameworks sometimes get quite large, so they may also use the Library.&lt;/p&gt;

&lt;p&gt;But the Framework doesn't necessarily have to use Library.&lt;/p&gt;

&lt;p&gt;Let's get back to our carpenter and table example for a better understanding of the Framework.&lt;/p&gt;

&lt;p&gt;Here, if you want to build a table, then you need a model or skeleton for how the table looks, like the table has four legs and a top slab.&lt;/p&gt;

&lt;p&gt;Now, this is the core structure of the table and you have to work accordingly to build the table.&lt;/p&gt;

&lt;p&gt;Similar to this, Framework also provides the structure, and you have to write the code accordingly. &lt;/p&gt;

&lt;p&gt;Let's take the example of &lt;a href="https://expressjs.com/"&gt;Express&lt;/a&gt;  and understand the restrictive nature of the Framework.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var express = require('express')
var app = express()


app.get('/', function (req, res) {
  res.send('welcome to dev.to!! ')
})
app.post('/', function (req, res) {
  res.send('POST request to the dev.to homepage')
})


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here express is designed in such a way that it is going to look only for specific methods (get/post) and specific parameters.&lt;/p&gt;

&lt;p&gt;You can't name the methods whatever you want to, and you have to name the methods as per the documentation.&lt;/p&gt;

&lt;p&gt;Some common examples of Framework are:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/rohitrana/why-react-is-winning-over-angular-2n7g"&gt;&lt;strong&gt;Angular&lt;/strong&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Angular is a JavaScript framework for web and mobile development.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Django&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Django is a fully featured server-side web framework written in &lt;br&gt;
Python.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Express&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Express is a minimal and flexible Node.js web application framework that provides a robust set of features for web and mobile applications.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rails&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Rails is a web application development framework written in the Ruby programming language.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Spring&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Spring Framework is an open-source framework for building web applications with Java as a programming language.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#key-difference-between-library-vs-framework"&gt;
  &lt;/a&gt;
  Key Difference between Library vs Framework
&lt;/h2&gt;

&lt;p&gt;The main key difference between the Library and Framework is something known as &lt;a href="https://www.programcreek.com/2011/09/what-is-the-difference-between-a-java-library-and-a-framework/#:~:text=The%20key%20difference%20between%20a,a%20collection%20of%20class%20definitions."&gt;inversion of control.&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Let's understand this inversion of control more in detail.&lt;/p&gt;

&lt;p&gt;When you import a library, you have to call the specific methods or functions of your choice so, and it's up to you when and where to call the Library.&lt;/p&gt;

&lt;p&gt;Here, you are in charge of flow.&lt;/p&gt;

&lt;p&gt;On the other hand, Framework itself makes a call to your code and provide you with some space to write down details.&lt;/p&gt;

&lt;p&gt;So, while using framework your framework is in charge of flow. &lt;/p&gt;

&lt;p&gt;In Library, your code is going to call the Library whereas, in Framework, your code is being called by Framework.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I know it's getting too confusing but stay with me. I'll end this with one last crucial point.&lt;/p&gt;

&lt;p&gt;Here is a simple thing to remember Framework is often more restrictive and generally have a more set of rules.&lt;/p&gt;

&lt;p&gt;Whereas, Library is not bounded by many rules.&lt;/p&gt;

&lt;p&gt;I hope you get a broader perspective of what's the difference between Library and Framework.&lt;/p&gt;

&lt;p&gt;If you find my work interesting and worth reading you can appreciate me on  &lt;a href="https://twitter.com/_RohitRana"&gt;&lt;strong&gt;Twitter&lt;/strong&gt;&lt;/a&gt; and &lt;a href="https://www.linkedin.com/in/rohit-rana17/"&gt; &lt;strong&gt;LinkedIn&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;All kinds of Feedback are welcomed in comments. &lt;/p&gt;

</description>
      <category>beginners</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>html</category>
    </item>
    <item>
      <title>CSS Animation Libraries</title>
      <author>bhargavkumar7031</author>
      <pubDate>Fri, 21 May 2021 12:31:13 +0000</pubDate>
      <link>https://dev.to/bhargavkumar7031/css-animation-libraries-np1</link>
      <guid>https://dev.to/bhargavkumar7031/css-animation-libraries-np1</guid>
      <description>&lt;h3&gt;
  &lt;a href="#animatecss"&gt;
  &lt;/a&gt;
  &lt;a href="https://animate.style/"&gt;Animate.css&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Animate.css is a library of ready-to-use, cross-browser animations for use in your web projects. Great for emphasis, home pages, sliders, and attention-guiding hints.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#animista"&gt;
  &lt;/a&gt;
  &lt;a href="https://animista.net/"&gt;Animista&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Animista is a CSS animation library and a playground where you can play with a collection of ready-made CSS animations and download only those you will use.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hovercss"&gt;
  &lt;/a&gt;
  &lt;a href="https://ianlunn.github.io/Hover/"&gt;Hover.css&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;A collection of CSS3 powered hover effects to be applied to links, buttons, logos, SVG, featured images and so on. Easily apply to your own elements, modify or just use for inspiration. Available in CSS, Sass, and LESS.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#magic-animation"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.minimamente.com/project/magic/"&gt;Magic Animation&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;CSS3 Animations with special effects built using SCSS and javascript&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>css</category>
    </item>
    <item>
      <title>How long does it take to learn to code?</title>
      <author>Coderslang: Become a Software Engineer</author>
      <pubDate>Fri, 21 May 2021 12:28:16 +0000</pubDate>
      <link>https://dev.to/coderslang/how-long-does-it-take-to-learn-to-code-576a</link>
      <guid>https://dev.to/coderslang/how-long-does-it-take-to-learn-to-code-576a</guid>
      <description>&lt;p&gt;In one word, &lt;strong&gt;FOREVER&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;You might think I am exaggerating, but &lt;a href="https://js.coderslang.com"&gt;learning to code&lt;/a&gt; is an iterative and lifelong process. Every day new technologies are being developed to optimize old workflows or introduce new and more efficient workflows. Staying up to date with these technological advances and breakthroughs is important to stay relevant to the ever-changing workplace landscape.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#first-steps"&gt;
  &lt;/a&gt;
  First Steps
&lt;/h2&gt;

&lt;p&gt;Let's backtrack for a moment, if you are a beginner just starting on your &lt;strong&gt;coding&lt;/strong&gt; journey or someone learning to &lt;strong&gt;code&lt;/strong&gt;, coming to know that learning to &lt;strong&gt;code&lt;/strong&gt; is a journey, not a destination could seem quite daunting and might deter you from carrying on, but stay with me. Learning to &lt;strong&gt;code&lt;/strong&gt; is highly dependent on what your aim is, what you want to do with your skills after you learn to &lt;strong&gt;code&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If you are learning to &lt;strong&gt;code&lt;/strong&gt; as a hobby, your aim could be learning the basics of &lt;strong&gt;programming&lt;/strong&gt;, then try out a bunch of avenues in &lt;strong&gt;coding&lt;/strong&gt; and pick the niche that resonates the best with you. If you picked up &lt;strong&gt;coding&lt;/strong&gt; for professional enhancement or switching careers, you might want to focus on developing the skills that are in high demand and can be picked up fast like &lt;strong&gt;Web Development&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#learning-never-stops"&gt;
  &lt;/a&gt;
  Learning never stops
&lt;/h2&gt;

&lt;p&gt;If you want to build the software of your dreams, after &lt;a href="https://js.coderslang.com/sign-in"&gt;learning the basics&lt;/a&gt;, you should break down the features of the software and then focus on learning those technologies only.&lt;/p&gt;

&lt;p&gt;One of the things to keep in mind is you will face a plethora of challenges, especially at the beginning: &lt;em&gt;when you don't know what you don't know&lt;/em&gt;. But as you practice more and gain more experience, you will discover more ways on how to write good quality &lt;strong&gt;code&lt;/strong&gt;. Going from this weird mix of single letter functions and variables:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;f1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;f2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;f1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="nx"&gt;f1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

&lt;span class="nx"&gt;f2&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;to this high quality, self-explaining &lt;strong&gt;code&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dateList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;recordDate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;dateList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;displayDates&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dateList&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;recordDate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="nx"&gt;recordDate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

&lt;span class="nx"&gt;displayDates&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Both pieces of code do the same thing, but one is far more understandable just in a glance. This will take time, but as long as you keep going you will definitely get there.&lt;/p&gt;

&lt;p&gt;As you progress through your journey you will also learn about the conventions and good practices for the tools and technologies you are using such as usage of &lt;em&gt;snake case&lt;/em&gt; in &lt;strong&gt;Python&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;snake_case_object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;some_function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and &lt;em&gt;camel case&lt;/em&gt; in &lt;strong&gt;JavaScript&lt;/strong&gt; and &lt;strong&gt;TypeScript&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;camelCaseObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;someFunction&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since &lt;strong&gt;coding&lt;/strong&gt; is a journey, make sure you are enjoying the journey. If you are not enjoying the journey choosing a different path is always an option, but make sure that you don't just run after a new shiny object whenever you come across one or the going gets hard, put in 100% of your effort because if you put in half-hearted work, the results you get will be half-hearted as well.&lt;/p&gt;

&lt;p&gt;By changing paths I mean if you are highly enthusiastic about &lt;strong&gt;Artificial intelligence, Machine Learning, and Big Data&lt;/strong&gt;, if you try &lt;strong&gt;BlockChain Development&lt;/strong&gt;, it's highly likely that you would not enjoy the process, or if you are a visual person like me, you would be better off pursuing &lt;strong&gt;Front End Web Development&lt;/strong&gt; or &lt;strong&gt;App Development&lt;/strong&gt; than diving into the field of &lt;strong&gt;Artificial intelligence&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Coding&lt;/strong&gt; is truly a vast and wonderful domain, which offers you &lt;a href="https://js.coderslang.com"&gt;endless possibilities&lt;/a&gt; from making a script to automate mundane tasks to enable everyday people to change the world by creating new pieces of software like &lt;strong&gt;Google&lt;/strong&gt; and &lt;strong&gt;Facebook&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#chase-your-dreams"&gt;
  &lt;/a&gt;
  Chase your dreams
&lt;/h2&gt;

&lt;p&gt;One of the key ingredients of &lt;strong&gt;coding&lt;/strong&gt; is it enables common folks to change the trajectory of where the world is headed, such as the landing of a helicopter on Mars during Mars Helicopter Mission 2020 by &lt;strong&gt;NASA&lt;/strong&gt; was facilitated by almost &lt;em&gt;12,000&lt;/em&gt; people from all around the world contributing to &lt;strong&gt;Open Source Projects&lt;/strong&gt; on &lt;strong&gt;GitHub&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;You can also leave a mark on this world using &lt;strong&gt;programming&lt;/strong&gt; as a tool to achieve your dreams. The process of learning to code is not easy, &lt;em&gt;just like anything worthwhile in life&lt;/em&gt;, but it definitely highly satisfying and financially rewarding as well. Another perk is having such a large number of sub-domains that enables any developer to switch over to another field as he or she seems fit.&lt;/p&gt;

&lt;p&gt;If you start off on this journey and keep putting one foot in front of the other even when challenges and difficulties show up, you will make it!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://js.coderslang.com"&gt;Learn Full-Stack JavaScript&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Build a Serverless Data API with AppSync and DynamoDB</title>
      <author>Tom Milner</author>
      <pubDate>Fri, 21 May 2021 12:19:26 +0000</pubDate>
      <link>https://dev.to/tom_millner/build-a-serverless-data-api-with-appsync-and-dynamodb-3jmi</link>
      <guid>https://dev.to/tom_millner/build-a-serverless-data-api-with-appsync-and-dynamodb-3jmi</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;Please find below a tutorial to create a serverless data api using AWS DynamoDB as the backend data store and AWS AppSync to create a GraphQL interface. All the steps and code samples shared are defined in YAML. I've used the AWS SAM syntax where it's supported and CloudFormation where not. SAM does not provide any syntax for AppSync but the good thing about SAM is that you can still use it to build and deploy a template that contains CloudFormation. This means that while you don't get the shorthand that SAM provides for other services you can continue to use the same SAM setup and commands. I think there is good scope for SAM to support AppSync in the same way it supports API Gateway and I hope that AWS adds it in the future.&lt;/p&gt;

&lt;p&gt;You will need the AWS SAM CLI installed on your machine to complete this tutorial. If you don't have it, you can follow the instruction provided by AWS in this link.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install.html"&gt;https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have kept this example very simple but it is still powerful. The application outlined allows the creation, update, delete and selection of a JSON document through a GraphQL interface. The document is stored in a map datatype in DynamoDB and indexed with a partition key and sort key. With some clever thinking around how you construct these keys, it can have many applications. You can use composite Each item (record) in DynamoDB can be up to 400kb so you can also store quite a lot of data per item.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-dynamodb-create-your-table"&gt;
  &lt;/a&gt;
  1) DynamoDB - create your table.
&lt;/h2&gt;

&lt;p&gt;This table will be the backend data store for the API. APIName is  a parameter passed into the template that will be re-used as table name and API name. As DynamoDB is a NoSQL database, you don't need to define the schema upfront, only the primary key columns. The column to store the JSON will be added on writing the first item to the table.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;  &lt;span class="na"&gt;DynamoDBTable&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::DynamoDB::Table&lt;/span&gt;
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;TableName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="s"&gt;APIName&lt;/span&gt;
      &lt;span class="na"&gt;ProvisionedThroughput&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;WriteCapacityUnits&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;
        &lt;span class="na"&gt;ReadCapacityUnits&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;
      &lt;span class="na"&gt;AttributeDefinitions&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;AttributeName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;pk1"&lt;/span&gt;
          &lt;span class="na"&gt;AttributeType&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;S"&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;AttributeName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;sk1"&lt;/span&gt;
          &lt;span class="na"&gt;AttributeType&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;S"&lt;/span&gt;
      &lt;span class="na"&gt;KeySchema&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;AttributeName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;pk1"&lt;/span&gt;
          &lt;span class="na"&gt;KeyType&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;HASH"&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;AttributeName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;sk1"&lt;/span&gt;
          &lt;span class="na"&gt;KeyType&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;RANGE"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-iam"&gt;
  &lt;/a&gt;
  2) IAM
&lt;/h2&gt;

&lt;p&gt;You need to create a number of AWS IAM Policies and Roles to allow AppSync to access both the DynamoDB table and log to CloudWatch.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#21-appsync-to-dynamodb"&gt;
  &lt;/a&gt;
  2.1) AppSync to DynamoDB
&lt;/h3&gt;

&lt;p&gt;This policy will allow the attached principle to query the DynamoDB table created. The CloudFormation Sub function allows you construct a single string from multiple inputs. If you wish to reference variables in the Sub function they need to be wrapped in ${}. Keeping to the principle of least privilege, I have included only the actions needed by the resolvers in AppSync and no others.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;  &lt;span class="na"&gt;PolicyDynamoDB&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::IAM::ManagedPolicy&lt;/span&gt;
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;Path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/service-role/&lt;/span&gt;
      &lt;span class="na"&gt;PolicyDocument&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;Version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;2012-10-17&lt;/span&gt;
        &lt;span class="na"&gt;Statement&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;Effect&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Allow&lt;/span&gt;
            &lt;span class="na"&gt;Action&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
              &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;dynamodb:Query&lt;/span&gt;
              &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;dynamodb:GetItem&lt;/span&gt;
              &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;dynamodb:PutItem&lt;/span&gt;
              &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;dynamodb:DeleteItem&lt;/span&gt;
            &lt;span class="na"&gt;Resource&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
              &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="kt"&gt;!Sub&lt;/span&gt; &lt;span class="s"&gt;arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBTable}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using sts:AssumeRole, attach the policy created to the AppSync service by creating a new role.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;  &lt;span class="na"&gt;RoleAppSyncDynamoDB&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::IAM::Role&lt;/span&gt;
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;ManagedPolicyArns&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="s"&gt;PolicyDynamoDB&lt;/span&gt;
      &lt;span class="na"&gt;AssumeRolePolicyDocument&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;Version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;2012-10-17&lt;/span&gt;
        &lt;span class="na"&gt;Statement&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;Effect&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Allow&lt;/span&gt;
            &lt;span class="na"&gt;Action&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
              &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;sts:AssumeRole&lt;/span&gt;
            &lt;span class="na"&gt;Principal&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
              &lt;span class="na"&gt;Service&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;appsync.amazonaws.com&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#22-log-to-cloudwatch"&gt;
  &lt;/a&gt;
  2.2) Log to CloudWatch
&lt;/h3&gt;

&lt;p&gt;To allow AppSync access CloudWatch, you use sts:AssumeRole to attach the provided AWSAppSyncPushToCloudWatchLogs policy to the AppSync service. This is an AWS Managed Policy that you can use when creating a new role. Once the AppSync service assumes the role, it will have access to create log groups and streams and log events to CloudWatch.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;  &lt;span class="na"&gt;RoleAppSyncCloudWatch&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::IAM::Role&lt;/span&gt;
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;ManagedPolicyArns&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;arn:aws:iam::aws:policy/service-role/AWSAppSyncPushToCloudWatchLogs"&lt;/span&gt;
      &lt;span class="na"&gt;AssumeRolePolicyDocument&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;Version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;2012-10-17&lt;/span&gt;
        &lt;span class="na"&gt;Statement&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;Effect&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Allow&lt;/span&gt;
            &lt;span class="na"&gt;Action&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
              &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;sts:AssumeRole&lt;/span&gt;
            &lt;span class="na"&gt;Principal&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
              &lt;span class="na"&gt;Service&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;appsync.amazonaws.com&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That is the IAM resources and DynamoDB table created. Now we can start on creating the AppSync resources.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-appsync"&gt;
  &lt;/a&gt;
  3) AppSync
&lt;/h2&gt;

&lt;p&gt;Now we can start on the AppSync resources. You need to create the following resources to have a fully working API:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;API Header - holder for the API components below with details of name, authentication and monitoring level.&lt;/li&gt;
&lt;li&gt;API schema – This is where the API definition is modeled in a GraphQL schema definition language (SDL)&lt;/li&gt;
&lt;li&gt;DataSource – A datasource is the component that provides the details about where the data is stored.&lt;/li&gt;
&lt;li&gt;Resolvers – Resolvers link the parts of the schema with the matching data sources. They also provide any transformation necessary between the two using Apache Velocity Template Language (VTL).&lt;/li&gt;
&lt;li&gt;API Key - In this tutorial, I am using an API Key to control access to the API. You can also use IAM or Cognito.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It does seem like a lot to specify and I think there is opportunity for SAM to abstract some of this away as it does for API Gateway. Through the console, you can create a new AppSync API with a wizard by pointing it at a DynamoDB table so it's really just getting something similar in an IAC format. As of now, you have to specify each of these individually with CloudFormation.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#31-api-header"&gt;
  &lt;/a&gt;
  3.1) API Header
&lt;/h3&gt;

&lt;p&gt;This resource creates the API header using the passed in parameter, the same one we used for the DynamoDB TableName parameter. The LogConfig section sets up CloudWatch logging using the role we created earlier. I have set it to the highest level of logging but you can reduce it down is this is too much by adjusting the parameters of the ExcludeVerboseContent and FieldLogLevel properties. Reduce the amount of logs written by setting FieldLogLevel to NONE, ERROR or ALL.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;  &lt;span class="na"&gt;GraphQLApi&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::AppSync::GraphQLApi&lt;/span&gt;
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;Name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="s"&gt;APIName&lt;/span&gt;
      &lt;span class="na"&gt;AuthenticationType&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;API_KEY&lt;/span&gt;
      &lt;span class="na"&gt;LogConfig&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;CloudWatchLogsRoleArn&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!GetAtt&lt;/span&gt; &lt;span class="s"&gt;RoleAppSyncCloudWatch.Arn&lt;/span&gt;
        &lt;span class="na"&gt;ExcludeVerboseContent&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;FALSE&lt;/span&gt;
        &lt;span class="na"&gt;FieldLogLevel&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ALL&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#32-api-schema"&gt;
  &lt;/a&gt;
  3.2) API Schema
&lt;/h3&gt;

&lt;p&gt;The GraphQL schema is fundamental to all GraphQL platforms. This can be embedded directly in the YAML template or stored in S3 and referenced within the template. I have left it in the template for simplicity.&lt;br&gt;
Within the schema, you are specifying the data types and the mutation and query interfaces. Query is using for reading data out of the API and mutations are for manipulating the underlying data. Each of the mutations and the readData query all operate on a single record. The readAllPKData query will return all items for a particular pk1 value. Depending on how you are indexing the JSON item, you could for example use this query to return all child records for a particular parent key.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;  &lt;span class="na"&gt;GraphQLApiSchema&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::AppSync::GraphQLSchema&lt;/span&gt;
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;ApiId&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!GetAtt&lt;/span&gt; &lt;span class="s"&gt;GraphQLApi.ApiId&lt;/span&gt;
      &lt;span class="na"&gt;Definition&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
        &lt;span class="s"&gt;schema {&lt;/span&gt;
          &lt;span class="s"&gt;query: Query&lt;/span&gt;
          &lt;span class="s"&gt;mutation: Mutation&lt;/span&gt;
        &lt;span class="s"&gt;}&lt;/span&gt;
        &lt;span class="s"&gt;type Data {&lt;/span&gt;
          &lt;span class="s"&gt;data: [AWSJSON]&lt;/span&gt;
          &lt;span class="s"&gt;pk1: String&lt;/span&gt;
          &lt;span class="s"&gt;sk1: String&lt;/span&gt;
        &lt;span class="s"&gt;}&lt;/span&gt;
        &lt;span class="s"&gt;type DataCollection {&lt;/span&gt;
          &lt;span class="s"&gt;items: [Data]&lt;/span&gt;
          &lt;span class="s"&gt;nextToken: String&lt;/span&gt;
        &lt;span class="s"&gt;}&lt;/span&gt;
        &lt;span class="s"&gt;input WriteDataInput {&lt;/span&gt;
          &lt;span class="s"&gt;pk1: String!&lt;/span&gt;
          &lt;span class="s"&gt;sk1: String!&lt;/span&gt;
          &lt;span class="s"&gt;data: [AWSJSON]!&lt;/span&gt;
        &lt;span class="s"&gt;}&lt;/span&gt;
        &lt;span class="s"&gt;input UpdateDataInput {&lt;/span&gt;
          &lt;span class="s"&gt;pk1: String!&lt;/span&gt;
          &lt;span class="s"&gt;sk1: String!&lt;/span&gt;
          &lt;span class="s"&gt;data: [AWSJSON]!&lt;/span&gt;
        &lt;span class="s"&gt;}&lt;/span&gt;
        &lt;span class="s"&gt;type Mutation {&lt;/span&gt;
          &lt;span class="s"&gt;writeData(input: WriteDataInput!): Data&lt;/span&gt;
          &lt;span class="s"&gt;updateData(input: UpdateDataInput!): Data&lt;/span&gt;
          &lt;span class="s"&gt;deleteData(pk1: String!, sk1: String!): Data&lt;/span&gt;
        &lt;span class="s"&gt;}&lt;/span&gt;
        &lt;span class="s"&gt;type Query {&lt;/span&gt;
          &lt;span class="s"&gt;readData(pk1: String!, sk1: String!): Data&lt;/span&gt;
          &lt;span class="s"&gt;readAllPKData(pk1: String!): DataCollection&lt;/span&gt;
        &lt;span class="s"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#33-datasource"&gt;
  &lt;/a&gt;
  3.3) DataSource
&lt;/h3&gt;

&lt;p&gt;Once the API is created, we can attach the DynamoDB table as the data source for the resolvers. This tutorial only specifies one data source but the beauty of GraphQL is that you can have multiple data sources within the same API. AppSync also supports Aurora, AWS Elasticsearch Service and Lambda as native data sources. You can also reference other AWS services via a Lambda data source.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;  &lt;span class="na"&gt;GraphQLDataSource&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::AppSync::DataSource&lt;/span&gt;
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;ApiId&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!GetAtt&lt;/span&gt; &lt;span class="s"&gt;GraphQLApi.ApiId&lt;/span&gt;
      &lt;span class="na"&gt;Name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="s"&gt;APIName&lt;/span&gt;
      &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AMAZON_DYNAMODB&lt;/span&gt;
      &lt;span class="na"&gt;ServiceRoleArn&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!GetAtt&lt;/span&gt; &lt;span class="s"&gt;RoleAppSyncDynamoDB.Arn&lt;/span&gt;
      &lt;span class="na"&gt;DynamoDBConfig&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; 
        &lt;span class="na"&gt;TableName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="s"&gt;DynamoDBTable&lt;/span&gt;
        &lt;span class="na"&gt;AwsRegion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Sub&lt;/span&gt; &lt;span class="s"&gt;${AWS::Region}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#34-resolvers"&gt;
  &lt;/a&gt;
  3.4) Resolvers
&lt;/h3&gt;

&lt;p&gt;Resolvers contain the logic mapping each query and mutation to an underlying data source with any transformation or logic needed. The name of the query or mutation is specified in the FieldName parameter. You can only attach one datasource per resolver. Resolvers use a scripting language called Apache Velocity Template Language (VTL) to encode any logic. The RequestMappingTemplate parameter specifies any transformation between the request and datasource. The ResponseMappingTemplate specifies any transformation between the datasource and response.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;  &lt;span class="na"&gt;AppSyncResolverReadData&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::AppSync::Resolver&lt;/span&gt;
    &lt;span class="na"&gt;DependsOn&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;GraphQLApiSchema&lt;/span&gt;
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;ApiId&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!GetAtt&lt;/span&gt; &lt;span class="s"&gt;GraphQLApi.ApiId&lt;/span&gt;
      &lt;span class="na"&gt;TypeName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Query&lt;/span&gt;
      &lt;span class="na"&gt;FieldName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;readData&lt;/span&gt;
      &lt;span class="na"&gt;DataSourceName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!GetAtt&lt;/span&gt; &lt;span class="s"&gt;GraphQLDataSource.Name&lt;/span&gt;
      &lt;span class="na"&gt;RequestMappingTemplate&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="s"&gt;{&lt;/span&gt;
          &lt;span class="s"&gt;"version": "2017-02-28",&lt;/span&gt;
          &lt;span class="s"&gt;"operation": "GetItem",&lt;/span&gt;
          &lt;span class="s"&gt;"key": {&lt;/span&gt;
            &lt;span class="s"&gt;"pk1": $util.dynamodb.toDynamoDBJson($ctx.args.pk1),&lt;/span&gt;
            &lt;span class="s"&gt;"sk1": $util.dynamodb.toDynamoDBJson($ctx.args.sk1),&lt;/span&gt;
          &lt;span class="s"&gt;},&lt;/span&gt;
        &lt;span class="s"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;ResponseMappingTemplate&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;$util.toJson($context.result)&lt;/span&gt;

  &lt;span class="na"&gt;AppSyncResolverReadAllPKData&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::AppSync::Resolver&lt;/span&gt;
    &lt;span class="na"&gt;DependsOn&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;GraphQLApiSchema&lt;/span&gt;
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;ApiId&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!GetAtt&lt;/span&gt; &lt;span class="s"&gt;GraphQLApi.ApiId&lt;/span&gt;
      &lt;span class="na"&gt;TypeName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Query&lt;/span&gt;
      &lt;span class="na"&gt;FieldName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;readAllPKData&lt;/span&gt;
      &lt;span class="na"&gt;DataSourceName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!GetAtt&lt;/span&gt; &lt;span class="s"&gt;GraphQLDataSource.Name&lt;/span&gt;
      &lt;span class="na"&gt;RequestMappingTemplate&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="s"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;"version" : "2017-02-28",&lt;/span&gt;
            &lt;span class="s"&gt;"operation" : "Query",&lt;/span&gt;
            &lt;span class="s"&gt;"query" : {&lt;/span&gt;
                &lt;span class="s"&gt;"expression": "pk1 = :pk1",&lt;/span&gt;
                &lt;span class="s"&gt;"expressionValues" : {&lt;/span&gt;
                    &lt;span class="s"&gt;":pk1" : $util.dynamodb.toDynamoDBJson($ctx.args.pk1),&lt;/span&gt;
                &lt;span class="s"&gt;}&lt;/span&gt;
            &lt;span class="s"&gt;}&lt;/span&gt;
        &lt;span class="s"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;ResponseMappingTemplate&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;$util.toJson($context.result)&lt;/span&gt;

  &lt;span class="na"&gt;AppSyncResolverWriteData&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::AppSync::Resolver&lt;/span&gt;
    &lt;span class="na"&gt;DependsOn&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;GraphQLApiSchema&lt;/span&gt;
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;ApiId&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!GetAtt&lt;/span&gt; &lt;span class="s"&gt;GraphQLApi.ApiId&lt;/span&gt;
      &lt;span class="na"&gt;TypeName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Mutation&lt;/span&gt;
      &lt;span class="na"&gt;FieldName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;writeData&lt;/span&gt;
      &lt;span class="na"&gt;DataSourceName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!GetAtt&lt;/span&gt; &lt;span class="s"&gt;GraphQLDataSource.Name&lt;/span&gt;
      &lt;span class="na"&gt;RequestMappingTemplate&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="s"&gt;{&lt;/span&gt;
          &lt;span class="s"&gt;"version": "2017-02-28",&lt;/span&gt;
          &lt;span class="s"&gt;"operation": "PutItem",&lt;/span&gt;
          &lt;span class="s"&gt;"key": {&lt;/span&gt;
            &lt;span class="s"&gt;"pk1": $util.dynamodb.toDynamoDBJson($ctx.args.input.pk1),&lt;/span&gt;
            &lt;span class="s"&gt;"sk1": $util.dynamodb.toDynamoDBJson($ctx.args.input.sk1),&lt;/span&gt;
          &lt;span class="s"&gt;},&lt;/span&gt;
          &lt;span class="s"&gt;"attributeValues": $util.dynamodb.toMapValuesJson($ctx.args.input),&lt;/span&gt;
          &lt;span class="s"&gt;"condition": {&lt;/span&gt;
            &lt;span class="s"&gt;"expression": "attribute_not_exists(#pk1) AND attribute_not_exists(#sk1)",&lt;/span&gt;
            &lt;span class="s"&gt;"expressionNames": {&lt;/span&gt;
              &lt;span class="s"&gt;"#pk1": "pk1",&lt;/span&gt;
              &lt;span class="s"&gt;"#sk1": "sk1",&lt;/span&gt;
            &lt;span class="s"&gt;},&lt;/span&gt;
          &lt;span class="s"&gt;},&lt;/span&gt;
        &lt;span class="s"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;ResponseMappingTemplate&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;$util.toJson($context.result)&lt;/span&gt;

  &lt;span class="na"&gt;AppSyncResolverUpdateData&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::AppSync::Resolver&lt;/span&gt;
    &lt;span class="na"&gt;DependsOn&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;GraphQLApiSchema&lt;/span&gt;
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;ApiId&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!GetAtt&lt;/span&gt; &lt;span class="s"&gt;GraphQLApi.ApiId&lt;/span&gt;
      &lt;span class="na"&gt;TypeName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Mutation&lt;/span&gt;
      &lt;span class="na"&gt;FieldName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;updateData&lt;/span&gt;
      &lt;span class="na"&gt;DataSourceName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!GetAtt&lt;/span&gt; &lt;span class="s"&gt;GraphQLDataSource.Name&lt;/span&gt;
      &lt;span class="na"&gt;RequestMappingTemplate&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="s"&gt;{&lt;/span&gt;
          &lt;span class="s"&gt;"version": "2017-02-28",&lt;/span&gt;
          &lt;span class="s"&gt;"operation": "PutItem",&lt;/span&gt;
          &lt;span class="s"&gt;"key": {&lt;/span&gt;
            &lt;span class="s"&gt;"pk1": $util.dynamodb.toDynamoDBJson($ctx.args.input.pk1),&lt;/span&gt;
            &lt;span class="s"&gt;"sk1": $util.dynamodb.toDynamoDBJson($ctx.args.input.sk1),&lt;/span&gt;
          &lt;span class="s"&gt;},&lt;/span&gt;
          &lt;span class="s"&gt;"attributeValues": $util.dynamodb.toMapValuesJson($ctx.args.input),&lt;/span&gt;
        &lt;span class="s"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;ResponseMappingTemplate&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;$util.toJson($context.result)&lt;/span&gt;

  &lt;span class="na"&gt;AppSyncResolverDeleteData&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::AppSync::Resolver&lt;/span&gt;
    &lt;span class="na"&gt;DependsOn&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;GraphQLApiSchema&lt;/span&gt;
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;ApiId&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!GetAtt&lt;/span&gt; &lt;span class="s"&gt;GraphQLApi.ApiId&lt;/span&gt;
      &lt;span class="na"&gt;TypeName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Mutation&lt;/span&gt;
      &lt;span class="na"&gt;FieldName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;deleteData&lt;/span&gt;
      &lt;span class="na"&gt;DataSourceName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!GetAtt&lt;/span&gt; &lt;span class="s"&gt;GraphQLDataSource.Name&lt;/span&gt;
      &lt;span class="na"&gt;RequestMappingTemplate&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="s"&gt;{&lt;/span&gt;
          &lt;span class="s"&gt;"version": "2017-02-28",&lt;/span&gt;
          &lt;span class="s"&gt;"operation": "DeleteItem",&lt;/span&gt;
          &lt;span class="s"&gt;"key": {&lt;/span&gt;
            &lt;span class="s"&gt;"pk1": $util.dynamodb.toDynamoDBJson($ctx.args.pk1),&lt;/span&gt;
            &lt;span class="s"&gt;"sk1": $util.dynamodb.toDynamoDBJson($ctx.args.sk1),&lt;/span&gt;
          &lt;span class="s"&gt;},&lt;/span&gt;
        &lt;span class="s"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;ResponseMappingTemplate&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;$util.toJson($context.result)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#35-apikey"&gt;
  &lt;/a&gt;
  3.5) APIKey
&lt;/h3&gt;

&lt;p&gt;Access to the API is controlled by an API Key. AppSync also supports access via AWS Cognito and IAM. The length of time the key is valid for is controlled by parameter and it is in Epoch time. You basically pass in a number that maps to the Epoch time of when you want it to expire.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;  &lt;span class="na"&gt;AppSyncAPIKey&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::AppSync::ApiKey&lt;/span&gt;
      &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;ApiId&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!GetAtt&lt;/span&gt; &lt;span class="s"&gt;GraphQLApi.ApiId&lt;/span&gt;
        &lt;span class="na"&gt;Expires&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="s"&gt;APIKeyExpiration&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#4-parameters"&gt;
  &lt;/a&gt;
  4) Parameters
&lt;/h2&gt;

&lt;p&gt;APIName and APIKeyExpiration must be supplied at the time of deployment. APIName is used to generate name of API and the DynamoDB source table.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;Parameters&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;APIName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;String&lt;/span&gt;
  &lt;span class="na"&gt;APIKeyExpiration&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Number&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#5-output"&gt;
  &lt;/a&gt;
  5) Output
&lt;/h2&gt;

&lt;p&gt;To use the API, you'll need the API Key and GraphQL URL. These will be output at the end of the SAM deployment.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;Outputs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;APIKey&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;API Key&lt;/span&gt;
    &lt;span class="na"&gt;Value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!GetAtt&lt;/span&gt; &lt;span class="s"&gt;AppSyncAPIKey.ApiKey&lt;/span&gt;

  &lt;span class="na"&gt;GraphQL&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;GraphQL URL&lt;/span&gt;
    &lt;span class="na"&gt;Value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!GetAtt&lt;/span&gt; &lt;span class="s"&gt;GraphQLApi.GraphQLUrl&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#6-testing"&gt;
  &lt;/a&gt;
  6) Testing
&lt;/h2&gt;

&lt;p&gt;Using the APIKey and URL output from the SAM template, you can call the API. I've formatted examples of the inputs below that should help you.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#61-mutations"&gt;
  &lt;/a&gt;
  6.1) Mutations
&lt;/h3&gt;

&lt;p&gt;Use this example to write data to the API. Use Query Variables in the next section to specify input data.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight graphql"&gt;&lt;code&gt;&lt;span class="k"&gt;mutation&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$WriteDataInput&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;WriteDataInput&lt;/span&gt;&lt;span class="p"&gt;!,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$UpdateDataInput&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;UpdateDataInput&lt;/span&gt;&lt;span class="p"&gt;!)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="n"&gt;writeData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$WriteDataInput&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;pk1&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;sk1&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;updateData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$UpdateDataInput&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;pk1&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;sk1&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;deleteData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pk1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"DBS"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sk1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"6"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;pk1&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;sk1&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#62-query-variables"&gt;
  &lt;/a&gt;
  6.2) Query Variables
&lt;/h3&gt;

&lt;p&gt;Construct your input data using Query Variables.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight graphql"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="n"&gt;UpdateDataInput&lt;/span&gt;&lt;span class="err"&gt;":&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="n"&gt;pk1&lt;/span&gt;&lt;span class="err"&gt;":&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="n"&gt;DBS&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="n"&gt;sk1&lt;/span&gt;&lt;span class="err"&gt;":&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;"3"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="err"&gt;":&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;\"&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="err"&gt;\":&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;\"&lt;/span&gt;&lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="err"&gt;\":&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;\"&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="err"&gt;\":\"0\"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="err"&gt;\"&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="err"&gt;\":&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;\"&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="err"&gt;\":\"&lt;/span&gt;&lt;span class="n"&gt;Add&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;replicas&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="err"&gt;.\"&lt;/span&gt;&lt;span class="p"&gt;}}}&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;\"&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="err"&gt;\":&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;\"&lt;/span&gt;&lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="err"&gt;\":&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;\"&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="err"&gt;\":\"0\"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="err"&gt;\"&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="err"&gt;\":&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;\"&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="err"&gt;\":\"&lt;/span&gt;&lt;span class="n"&gt;Put&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;an&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Elasticache&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Redis&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;front&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="err"&gt;.\"&lt;/span&gt;&lt;span class="p"&gt;}}}&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;\"&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="err"&gt;\":&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;\"&lt;/span&gt;&lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="err"&gt;\":&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;\"&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="err"&gt;\":\"1\"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="err"&gt;\"&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="err"&gt;\":&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;\"&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="err"&gt;\":\"&lt;/span&gt;&lt;span class="n"&gt;Put&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;an&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Amazon&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SQS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;front&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="err"&gt;.\"&lt;/span&gt;&lt;span class="p"&gt;}}}&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;\"&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="err"&gt;\":&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;\"&lt;/span&gt;&lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="err"&gt;\":&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;\"&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="err"&gt;\":\"0\"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="err"&gt;\"&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="err"&gt;\":&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;\"&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="err"&gt;\":\"&lt;/span&gt;&lt;span class="n"&gt;Put&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;an&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Elasticache&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Memcached&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;front&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="err"&gt;.\"&lt;/span&gt;&lt;span class="p"&gt;}}}&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="n"&gt;WriteDataInput&lt;/span&gt;&lt;span class="err"&gt;":&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="n"&gt;pk1&lt;/span&gt;&lt;span class="err"&gt;":&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="n"&gt;DBS&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="n"&gt;sk1&lt;/span&gt;&lt;span class="err"&gt;":&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;"4"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="err"&gt;":&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;\"&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="err"&gt;\":&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;\"&lt;/span&gt;&lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="err"&gt;\":&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;\"&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="err"&gt;\":\"0\"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="err"&gt;\"&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="err"&gt;\":&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;\"&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="err"&gt;\":\"&lt;/span&gt;&lt;span class="n"&gt;Add&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;replicas&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="err"&gt;.\"&lt;/span&gt;&lt;span class="p"&gt;}}}&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;\"&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="err"&gt;\":&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;\"&lt;/span&gt;&lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="err"&gt;\":&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;\"&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="err"&gt;\":\"0\"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="err"&gt;\"&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="err"&gt;\":&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;\"&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="err"&gt;\":\"&lt;/span&gt;&lt;span class="n"&gt;Put&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;an&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Elasticache&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Redis&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;front&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="err"&gt;.\"&lt;/span&gt;&lt;span class="p"&gt;}}}&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;\"&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="err"&gt;\":&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;\"&lt;/span&gt;&lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="err"&gt;\":&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;\"&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="err"&gt;\":\"1\"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="err"&gt;\"&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="err"&gt;\":&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;\"&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="err"&gt;\":\"&lt;/span&gt;&lt;span class="n"&gt;Put&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;an&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Amazon&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SQS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;front&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="err"&gt;.\"&lt;/span&gt;&lt;span class="p"&gt;}}}&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;\"&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="err"&gt;\":&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;\"&lt;/span&gt;&lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="err"&gt;\":&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;\"&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="err"&gt;\":\"0\"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="err"&gt;\"&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="err"&gt;\":&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;\"&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="err"&gt;\":\"&lt;/span&gt;&lt;span class="n"&gt;Put&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;an&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Elasticache&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Memcached&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;front&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="err"&gt;.\"&lt;/span&gt;&lt;span class="p"&gt;}}}&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#63-query"&gt;
  &lt;/a&gt;
  6.3) Query
&lt;/h3&gt;

&lt;p&gt;Use these examples to read data via the API.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight graphql"&gt;&lt;code&gt;&lt;span class="k"&gt;query&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;readData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pk1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"DBS"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sk1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;pk1&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;sk1&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;readAllPKData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pk1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"DBS"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;nextToken&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="n"&gt;pk1&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="n"&gt;sk1&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#7-conclusion"&gt;
  &lt;/a&gt;
  7) Conclusion
&lt;/h2&gt;

&lt;p&gt;You can find the full template.yaml in this GitHub repo:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/thomasmilner/serverlessdataapi"&gt;https://github.com/thomasmilner/serverlessdataapi&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I would like to credit &lt;a href="https://twitter.com/sbstjn?s=20"&gt;https://twitter.com/sbstjn?s=20&lt;/a&gt; and his repo as an excellent reference in helping me put this together.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/sbstjn/appsync-example-dynamodb"&gt;https://github.com/sbstjn/appsync-example-dynamodb&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please reach out with any comments or questions you may have. I'm always happy to help.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>graphql</category>
      <category>serverless</category>
      <category>dynamodb</category>
    </item>
    <item>
      <title>Day 2/30 : Neumorphism Login &amp; Sign Up Form using HTML and CSS</title>
      <author>Somanath Goudar</author>
      <pubDate>Fri, 21 May 2021 12:10:40 +0000</pubDate>
      <link>https://dev.to/somanathgoudar/day-2-30-neumorphism-login-sign-up-form-using-html-and-css-28j5</link>
      <guid>https://dev.to/somanathgoudar/day-2-30-neumorphism-login-sign-up-form-using-html-and-css-28j5</guid>
      <description>&lt;p&gt;Welcome to Day 2 of this &lt;a href="https://dev.to/somanathgoudar/30dayschallenge-30-days-extreme-html-css-challenge-50k1"&gt;Challenge&lt;/a&gt;. This is what I created today. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;➜ Here is the Demo :&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C_5ssZFj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://1.bp.blogspot.com/-ro2lDij149A/YKOWQnFq7dI/AAAAAAAAAAw/obQR0rgBf8sd582jz0dUBilZouy2UNVKwCLcBGAsYHQ/s600/p2.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C_5ssZFj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://1.bp.blogspot.com/-ro2lDij149A/YKOWQnFq7dI/AAAAAAAAAAw/obQR0rgBf8sd582jz0dUBilZouy2UNVKwCLcBGAsYHQ/s600/p2.gif" alt="Neumorphism Login &amp;amp; Sign Up Form"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;➜ Video Tutorial :&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/A8OBtZR9Msw"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;strong&gt;➜ Source Code :&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://www.mrwebwolf.com/2021/05/neumorphism-login-and-sign-up-form.html"&gt;https://www.mrwebwolf.com/2021/05/neumorphism-login-and-sign-up-form.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;➜ Instagram Post and Reel for Day 2 :&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://www.instagram.com/future_coderss/"&gt;See Post and Reel&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;Hey, If You don't know what is happening here. Don't Worry, I am doing a crazy challenge 😅. Read More about it from the post below.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/somanathgoudar" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KnNEMcDo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--15QGQnyq--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/600953/fdee0195-6d25-410d-9d97-c10ffaa4eb7d.jpeg" alt="somanathgoudar image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/somanathgoudar/30dayschallenge-30-days-extreme-html-css-challenge-50k1" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;🤯 30DaysChallenge - 30 Days Extreme HTML &amp;amp; CSS CHALLENGE 🤯&lt;/h2&gt;
      &lt;h3&gt;Somanath Goudar ・ May 19 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#frontend&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#30daysofcode&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Support Me :&lt;/strong&gt;&lt;br&gt;
👉 Buy me a Coffee: &lt;a href="https://www.buymeacoffee.com/somanathgoudar"&gt;https://www.buymeacoffee.com/somanathgoudar&lt;/a&gt;&lt;br&gt;
👉 &lt;a href="https://www.instagram.com/somanath_goudar/"&gt;Follow Me on Instagram&lt;/a&gt;&lt;br&gt;
👉 &lt;a href="https://www.instagram.com/future_coderss/"&gt;Follow Future Coders on Instagram&lt;/a&gt;&lt;br&gt;
👉 &lt;a href="https://www.youtube.com/channel/UC_nTrhTr5fnBGjOxnkPUmmA"&gt;Subscribe to My Main Channel&lt;/a&gt;&lt;br&gt;
👉 &lt;a href="https://www.youtube.com/channel/UCzGSyMOf2jPt1MkNBB3SJ3g"&gt;Subscribe to Channel Created for this Challenge&lt;/a&gt;&lt;/p&gt;




</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>JS interview in 2 minutes / pure vs impure functions</title>
      <author>Nikita Kozlov</author>
      <pubDate>Fri, 21 May 2021 11:40:55 +0000</pubDate>
      <link>https://dev.to/kozlovzxc/js-interview-in-2-minutes-pure-vs-impure-functions-22om</link>
      <guid>https://dev.to/kozlovzxc/js-interview-in-2-minutes-pure-vs-impure-functions-22om</guid>
      <description>&lt;p&gt;&lt;strong&gt;Question:&lt;/strong&gt;&lt;br&gt;
Explain the difference between pure and impure functions. What are the side effects?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Quick answer:&lt;/strong&gt;&lt;br&gt;
A pure function is a function that returns the same result for the same arguments, also this function doesn't have any side effects.&lt;/p&gt;

&lt;p&gt;The side-effect is then function modify any data outside of its current scope.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Longer answer:&lt;/strong&gt;&lt;br&gt;
We can start with side effects, basically, this means that if you have some environment and you run a function with a side effect, something will be changed by this function in this environment.&lt;/p&gt;

&lt;p&gt;Possible examples are -  writing to file, displaying something to the user, making HTTP requests, modifying global variables, emitting events, ...&lt;/p&gt;

&lt;p&gt;
  off the top
  &lt;p&gt;If I understand &lt;a href="https://en.wikipedia.org/wiki/Side_effect_(computer_science)"&gt;wiki definition&lt;/a&gt; of side effects, this means that reading environment doesn't actually count as a side-effect, does it? &lt;/p&gt;

&lt;p&gt;Is function which reads current time - function with side effects?&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;As for repeatable results, it is simpler to just give an example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;mult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;getProp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All these functions are repeatable because they are providing the same result over the same arguments.&lt;/p&gt;

&lt;p&gt;Btw there are no side effects -&amp;gt; they are pure ✨&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Real-life applications:&lt;/strong&gt;&lt;br&gt;
Pure functions significantly simplify testing and debugging, also helps to reuse code easier.&lt;/p&gt;

&lt;p&gt;If you don't depend on the environment it will be ridiculously easy to write tests. &lt;/p&gt;

&lt;p&gt;Same for reusability, everyone should prefer just using something over setting the environment -&amp;gt; using something -&amp;gt; cleaning the environment.&lt;/p&gt;

&lt;p&gt;Can you spot the issue here? 🔎&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="c1"&gt;// some regular headers&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getAuthData&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
  &lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;Authorization&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/data&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;externalService&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http://other.service/api&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;data1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getAuthData&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;data2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;externalService&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Resources:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://en.wikipedia.org/wiki/Pure_function"&gt;wiki/pure_functinos&lt;/a&gt;&lt;br&gt;
&lt;a href="https://en.wikipedia.org/wiki/Side_effect_(computer_science)"&gt;wiki/side_effect&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Other posts:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/kozlovzxc/js-interview-in-2-minutes-closure-3hi6"&gt;JS interview in 2 minutes / Closure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/kozlovzxc/js-interview-in-2-minutes-currying-2hko"&gt;JS interview in 2 minutes / Currying 🥘&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/kozlovzxc/js-interview-in-2-minutes-promise-4fhl"&gt;JS interview in 2 minutes / Promise
&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Btw, I will post more fun stuff here and on &lt;a href="https://twitter.com/kozlovzxc"&gt;Twitter&lt;/a&gt;. Let's be friends 👋&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>beginners</category>
      <category>career</category>
    </item>
    <item>
      <title>Using Cache-Control and CDNs to Improve Performance and Reduce Latency</title>
      <author>Edouard Bonlieu</author>
      <pubDate>Fri, 21 May 2021 11:34:29 +0000</pubDate>
      <link>https://dev.to/koyeb/using-cache-control-and-cdns-to-improve-performance-and-reduce-latency-77n</link>
      <guid>https://dev.to/koyeb/using-cache-control-and-cdns-to-improve-performance-and-reduce-latency-77n</guid>
      <description>&lt;p&gt;We believe latency and caching are crucial subjects we need to talk about. Loading times are a critical component in the user's experience for all apps and&lt;br&gt;
websites: &lt;strong&gt;new pages and screens should load in less than a second&lt;/strong&gt; for&lt;br&gt;
end-users to have a smooth experience.&lt;/p&gt;

&lt;p&gt;At Koyeb, we provide a global edge network with a built-in CDN to help you&lt;br&gt;
achieve that with &lt;em&gt;caching&lt;/em&gt; and &lt;em&gt;TLS termination at the edge&lt;/em&gt;, but there is an important topic which is always your&lt;br&gt;
responsibility when you use a CDN: &lt;code&gt;Cache-Control&lt;/code&gt;&lt;br&gt;
HTTP headers.&lt;/p&gt;

&lt;p&gt;In this post, we review how caching works and dive into &lt;code&gt;Cache-Control&lt;/code&gt; HTTP headers, which are&lt;br&gt;
used to configure how your content is cached across the internet and end-user&lt;br&gt;
devices. We will explore how to configure them and what guidelines to follow&lt;br&gt;
when using them.&lt;/p&gt;

&lt;p&gt;Getting caching right can be tricky and getting it wrong is headache-inducing.&lt;br&gt;
Learning about it is even more critical now that over 50% of the internet's traffic is&lt;br&gt;
served towards mobile devices where interactions are highly latency-sensitive&lt;br&gt;
and long loading times will trigger high bounce rates.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#caching-types-benefits-and-overview"&gt;Caching Types, Benefits, and Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-cache-control-directives"&gt;The Cache-Control Directives&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cache-invalidation"&gt;Cache Invalidation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#configuring-cache-control-for-your-sites-and-resources"&gt;Configuring Cache-Control for your Sites and Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#caching-types-benefits-and-overview"&gt;
  &lt;/a&gt;
  Caching Types, Benefits, and Overview
&lt;/h2&gt;

&lt;p&gt;Caching technologies temporarily store data between origin servers and&lt;br&gt;
end-users to improve site performance and reduce latency for the requests of your web services and apps.&lt;/p&gt;

&lt;p&gt;At a high level, &lt;code&gt;Cache-Control&lt;/code&gt; is an HTTP header that specifies caching policies for client requests and server responses. These policies, which are configured parameters, determine how resources are cached, where, and their time-to-live before expiring. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Cacheable&lt;/strong&gt; refers to whether the content can be stored in cached;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Where&lt;/strong&gt; is important given cache can exist locally in a browser or in a server;&lt;/li&gt;
&lt;li&gt;and &lt;strong&gt;time-to-live&lt;/strong&gt; is the amount of time content is considered fresh.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#types-of-web-caches"&gt;
  &lt;/a&gt;
  Types of Web Caches
&lt;/h3&gt;

&lt;p&gt;It is important to understand there are 3 main locations where content is cached:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Gateway Caches&lt;/strong&gt; - They are a component of your infrastructure designed to
increase your application performance. Koyeb provides Gateway Caches, also called &lt;strong&gt;Reverse
Proxy Cache&lt;/strong&gt;, in 55 locations across the globe as part of its edge network.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Proxy Caches&lt;/strong&gt; - Deployed by businesses or internet service providers
(ISPs) to create a type of shared cache. These caches reduce latency and network
traffic to your origin server but you have no direct control over them. HTTP
Headers are critical to indicating what they can cache.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Browser Caches&lt;/strong&gt; - Use a part of the hard drive or memory of the end-user
device to store a copy according to the application's cache settings.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;
  &lt;a href="#cache-benefits"&gt;
  &lt;/a&gt;
  Cache Benefits
&lt;/h3&gt;

&lt;p&gt;There are 3 key benefits to caching: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Reduce response time&lt;/strong&gt;: Caching improves response time by storing rendered pages and
assets in a location nearer to your end-users. When content is served from a
cache, it removes the compute time needed to render
the page and reduces the network round
trip time needed to hit the server.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Reduce load on your application&lt;/strong&gt;: By serving cached assets directly from the
CDN or the browser, you reduce the number of requests that hit your origin
servers and infrastructure.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Reduce bandwidth costs&lt;/strong&gt;: Important if your website generates a lot of traffic.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;
  &lt;a href="#broad-overview-of-how-caching-works"&gt;
  &lt;/a&gt;
  Broad Overview of How Caching Works
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LvG5lslG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.koyeb.com/static/images/blog/cache-flow.svg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LvG5lslG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.koyeb.com/static/images/blog/cache-flow.svg" alt="cache schema"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-cachecontrol-directives"&gt;
  &lt;/a&gt;
  The Cache-Control Directives
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#http-11-improved-caching-possibilities-with-cachecontrol"&gt;
  &lt;/a&gt;
  HTTP 1.1 improved caching possibilities with Cache-Control
&lt;/h3&gt;

&lt;p&gt;Before diving into how to use &lt;code&gt;Cache-Control&lt;/code&gt;, it is helpful to review briefly the history of configuring cache.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#http-10-caching-limitations"&gt;
  &lt;/a&gt;
  HTTP 1.0 Caching Limitations
&lt;/h4&gt;

&lt;p&gt;With HTTP 1.0, caching headers were limited to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Expires:&lt;/code&gt; This is an age limitation for cached content, and it is configured to a specific date and time. It is an absolute limit that is not relative to the client's request.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;Expires&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Mon&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt; &lt;span class="nx"&gt;Apr&lt;/span&gt; &lt;span class="mi"&gt;2021&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;59&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt; &lt;span class="nx"&gt;GMT&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Pragma: no-cache&lt;/code&gt; This is a no-cache meta tag that does not necessarily keep a web page fresh.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
  &lt;a href="#http-11-new-caching-headers"&gt;
  &lt;/a&gt;
  HTTP 1.1 New Caching Headers
&lt;/h4&gt;

&lt;p&gt;The release of HTTP 1.1 addressed the limitations of caching with &lt;code&gt;Expires:&lt;/code&gt; and &lt;code&gt;Pragma: no-cache&lt;/code&gt; by adding a new class of headers, &lt;code&gt;Cache-Control&lt;/code&gt;.  These new headers offer more control over their content than previously possible with HTTP 1.0.&lt;/p&gt;

&lt;p&gt;Depending on your needs, you can use multiple &lt;code&gt;Cache-Control&lt;/code&gt; directives by separating each of them with a comma.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;Cache&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Control&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;public&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;stale&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;revalidate&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;180&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Below is a non-exhaustive list of the different request and response directives you can use for &lt;code&gt;Cache-Control&lt;/code&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#request-directives-for-cachecontrol"&gt;
  &lt;/a&gt;
  Request Directives for Cache-Control
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Expiration&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;max-age&lt;/code&gt; - The maximum number of seconds a representation is considered fresh. This time limit is relative to the client's request whereas the time limit of &lt;code&gt;Expires&lt;/code&gt; is absolute. If both headers are used, &lt;code&gt;max-age&lt;/code&gt; takes priority over &lt;code&gt;Expires&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;Cache&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Control&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3600&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Note: &lt;code&gt;max-age&lt;/code&gt; is an improvement from &lt;code&gt;expires&lt;/code&gt; given that it is a relative time-to-live for each request. The relativity of the &lt;code&gt;max-age&lt;/code&gt; directive mitigates for unintentional DDoS or spikes in traffic.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;max-stale&lt;/code&gt; - The maximum number of seconds a client will accept a stale response. &lt;em&gt;A stale response is a response that is older than the time specified by &lt;code&gt;max-age&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;min-fresh&lt;/code&gt; - The minimum number of seconds a client wants a response to be fresh. &lt;em&gt;A cache is fresh as long as the amount of time of max-age has not expired.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;no-cache&lt;/code&gt; - The stored response must be validated with the origin server before being used. This is a good option if important information on your site changes, but you still want the benefits of caching. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;no-store&lt;/code&gt; - Blocks a cached copy from being stored anywhere, be it in a local cache, a browser, or third-party proxy. This directive forces each request to travel to the origin server to access the content. It is expensive and slower, but it does guarantee up-to-date content. &lt;em&gt;Important note: this directive cannot be used with other directives.&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Extension&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;stale-if-error&lt;/code&gt;- If there is an error during a check for a fresh response, this is the number of seconds the client will accept a stale response. If the number of seconds has not been surpassed, &lt;code&gt;stale-if-error&lt;/code&gt; returns a cached response.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#response-directives-for-cachecontrol"&gt;
  &lt;/a&gt;
  Response Directives for Cache-Control
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Caching&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;private&lt;/code&gt; - The response can only be stored on a browser's response. Use this directive when the content is meant for a specific end-user. For example, an individual email account.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;public&lt;/code&gt; - The response can be stored on any cache. Use this directive when anyone can see the content. For example, a product's pricing page.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;no-cache&lt;/code&gt; - The stored response must be validated with the origin server before being used. This is a good option if important information on your site is updated, but you still want the benefits of caching. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;no-store&lt;/code&gt; - Blocks a cached copy from being stored anywhere, be it in a local cache, a browser, or third-party proxy. This directive cannot be used with other directives.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Expiration&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;max-age&lt;/code&gt; - The number of seconds after the initial request that a representation is considered fresh. This is relative compared to &lt;code&gt;Expires&lt;/code&gt;, which is absolute. &lt;code&gt;max-age&lt;/code&gt; takes priority over &lt;code&gt;Expires&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: &lt;code&gt;max-age&lt;/code&gt; is an improvement from &lt;code&gt;expires&lt;/code&gt; given that it is a relative time for each request rather than an absolute expiration date shared across clients. The &lt;code&gt;max-age&lt;/code&gt; directive mitigates for unintentional DDoS or spikes in traffic and is indifferent towards the clocks or timezones for each client.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;s-maxage&lt;/code&gt; - Like &lt;code&gt;max-age&lt;/code&gt;, but only for shared proxies, like CDN providers.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;must-revalidate&lt;/code&gt; - Forces request to validate with the origin server.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;proxy-revalidate&lt;/code&gt; - Like &lt;code&gt;must-validate&lt;/code&gt; but only for proxy caches, not private caches.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Extension&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;stale-while-revalidate&lt;/code&gt; - Used with &lt;code&gt;max-age&lt;/code&gt;, it is the number of seconds a client will accept a stale response. &lt;/p&gt;

&lt;p&gt;When a client request comes in for content, &lt;code&gt;max-age&lt;/code&gt; is used to determine if the response can be cached content. If the &lt;code&gt;max-age&lt;/code&gt; time has expired, &lt;code&gt;stale-while-revalidate&lt;/code&gt; is used to determine if the request will accept &lt;em&gt;stale&lt;/em&gt; content.&lt;/p&gt;

&lt;p&gt;This directive strikes a balance between loading cached content quickly and ensuring fresh content. It is most often used with asynchronous background workers to check for fresh content.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Important note: you can only use this cache-control header with Chrome and Firefox. Other browsers will ignore this header and only use &lt;code&gt;max-age&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;stale-if-error&lt;/code&gt;- Returns a cached response if an error is encountered, regardless of the content's freshness.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#validators"&gt;
  &lt;/a&gt;
  Validators
&lt;/h3&gt;

&lt;p&gt;Validators check changes between the cached copies and the files at the origin server. If the content is valid, the client's request does not need to be sent all the way to the origin server.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Last-Modified&lt;/code&gt; - Sent by the origin server in its response, &lt;code&gt;Last-Modified&lt;/code&gt; marks the last modification to the resource. This validator is often used alongside the &lt;code&gt;Expires&lt;/code&gt; header.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;Last&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Modified&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Fri&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="nx"&gt;Jan&lt;/span&gt; &lt;span class="mi"&gt;2021&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt; &lt;span class="nx"&gt;GMT&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;If-Modified-Since&lt;/code&gt; - This is a conditional validator that is sent by the client to check when the file was last changed to determine if the cached content matches what exists at the origin server. If the cached content matches what exists at the origin server, the origin server returns a 304 to say it is ok to return the cached copy.&lt;/p&gt;

&lt;p&gt;In addition to &lt;code&gt;Cache-Control&lt;/code&gt; headers, HTTP 1.1 also introduced a new validator: &lt;/p&gt;

&lt;p&gt;&lt;code&gt;ETag&lt;/code&gt; - The entity tag hashes a file byte by byte to create a digital fingerprint of the file. These unique identifiers determine if the cached content in a browser matches the content at the origin server.&lt;/p&gt;

&lt;p&gt;Once a response, be it an ETag or conditional validator, is validated with the origin server, the origin server returns a &lt;code&gt;304 Not Modified&lt;/code&gt; response to the client. See &lt;a href="#broad-overview-of-how-caching-works"&gt;illustration&lt;/a&gt; for more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cache-invalidation"&gt;
  &lt;/a&gt;
  Cache Invalidation
&lt;/h2&gt;

&lt;p&gt;Cache invalidation is a way to remove or update an object from the cache before its scheduled expiration time. It is usually reserved for special circumstances, as the best practice remains to configure an appropriate expiration time for your cacheable content with &lt;code&gt;s-maxage&lt;/code&gt;. &lt;br&gt;
There are &lt;/p&gt;

&lt;p&gt;Higher &lt;code&gt;private&lt;/code&gt; time limits make it difficult to update content cached in local browsers Google provides a comprehensive &lt;a href="https://cloud.google.com/cdn/docs/cache-invalidation-overview"&gt;cache invalidation overview&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configuring-cachecontrol-for-your-sites-and-resources"&gt;
  &lt;/a&gt;
  Configuring Cache-Control for your sites and resources
&lt;/h2&gt;

&lt;p&gt;There are lots of options for configuring a &lt;code&gt;Cache-Control&lt;/code&gt; header. While there is not necessarily a standard, there are best practices that can guide you when configuring &lt;code&gt;Cache-Control&lt;/code&gt; for your websites.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OGYA5oNg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.koyeb.com/static/images/blog/cache-control-tree-diagram.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OGYA5oNg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.koyeb.com/static/images/blog/cache-control-tree-diagram.png" alt="Tree Diagram Cache-Control"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cache-use-cases-a-matter-of-how-often-you-update-your-resources"&gt;
  &lt;/a&gt;
  Cache Use Cases: A matter of how often you update your resources
&lt;/h3&gt;

&lt;p&gt;You'll want to configure your &lt;code&gt;Cache-Control&lt;/code&gt; duration parameters depending on how frequently data is updated on the origin server. For resources that do not change so often, you could set the &lt;code&gt;max-age&lt;/code&gt; directive to 86400 seconds (equal to 24 hours) or even 31536000 seconds (equal to 1 year). In any case, another practice you'll want to keep in mind is keeping &lt;code&gt;max-age&lt;/code&gt; for &lt;code&gt;private&lt;/code&gt; and browser caches short while setting larger time-to-live values for &lt;code&gt;s-maxage&lt;/code&gt; and &lt;code&gt;public&lt;/code&gt;. Again, higher &lt;code&gt;private&lt;/code&gt; time limits make it difficult to update content cached in local browsers.&lt;/p&gt;

&lt;p&gt;Below is a table we've prepared outlining best practices for real-world examples.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cachecontrol-use-case-examples"&gt;
  &lt;/a&gt;
  Cache-Control Use Case Examples
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Use Case&lt;/th&gt;
&lt;th&gt;Best Cache Practice&lt;/th&gt;
&lt;th&gt;Example Cache-Control&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Static assets like images or fonts.&lt;/td&gt;
&lt;td&gt;Public cache control to cache the information on proxy servers.&lt;/td&gt;
&lt;td&gt;Cache-Control: public, max-age=31536000, immutable&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Resources such as documents, images that are only available for one particular user or for authorized users.&lt;/td&gt;
&lt;td&gt;Cache on browsers, not on proxy servers.&lt;/td&gt;
&lt;td&gt;Cache-Control: private, max-age=3600&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Content that changes, but not rapidly, and where multiple users will request the same content i.e., apps for news headlines or weather conditions.&lt;/td&gt;
&lt;td&gt;Public cache to proxy servers with the possibility to fetch stale content.&lt;/td&gt;
&lt;td&gt;Cache-Control: max-age=360, stale-while-revalidate=1200&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Prevent returning errors if the origin server is unreachable when cache needs to be revalidated.&lt;/td&gt;
&lt;td&gt;Use stale-if-error to continue serving the page resources beyond the time expiration of the resource.&lt;/td&gt;
&lt;td&gt;Cache-Control: public, max-age=3600, stale-if-error=900&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Dynamic content on social media feeds.&lt;/td&gt;
&lt;td&gt;Never cache this data.&lt;/td&gt;
&lt;td&gt;Cache-Control: no-store&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Content that should be revalidated before being rendered.&lt;/td&gt;
&lt;td&gt;Guarantee the freshest content without sending a new response every time.&lt;/td&gt;
&lt;td&gt;Cache-Control: public, no-cache&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Cached resources on your application deployed on Koyeb that require to be invalidated when a new version is deployed.&lt;/td&gt;
&lt;td&gt;Cache at the edge as Koyeb invalidates the cache each time a new deployment occurs.&lt;/td&gt;
&lt;td&gt;Cache-Control: s-maxage: 2592000&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#caching-with-cdns-increases-performance"&gt;
  &lt;/a&gt;
  Caching with CDNs increases performance
&lt;/h3&gt;

&lt;p&gt;Since CDNs store cached copies of your site and app in their network of data centers and proxy servers, CDNs shorten the distance between your users around the world and the server where your site or app is hosted on. &lt;/p&gt;

&lt;p&gt;In addition to improving the latency experienced by your end-users, CDNs increase the performance of your sites and apps because gateway caching reduces the traffic that reaches the origin server. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#global-loadbalancing-and-builtin-cdn-with-the-koyeb-serverless-platform"&gt;
  &lt;/a&gt;
  Global load-balancing and built-in CDN with the Koyeb Serverless Platform
&lt;/h3&gt;

&lt;p&gt;All serverless deployments on Koyeb benefit from the platform's native global load-balancing and CDN. Traffic is routed through the nearest edge location for the end-user to reduce delivery latency.&lt;/p&gt;

&lt;p&gt;Koyeb is a developer-friendly serverless platform that hosts web apps and services, Docker containers, APIs, event-driven functions, cron jobs, and more!&lt;/p&gt;

&lt;p&gt;Thanks to native support of popular languages and built-in Docker container deployment, you can use Koyeb's serverless platform to deploy your projects.&lt;/p&gt;

&lt;p&gt;With Koyeb, you can scale like internet giants without their budget. See the &lt;a href="///www.koyeb.com/blog/going-serverless-implications-benefits-and-challenges"&gt;benefits of going serverless&lt;/a&gt;, get started by &lt;a href="////app.koyeb.com/auth/signin"&gt;signing up&lt;/a&gt; today and joining us on &lt;a href="////slack.koyeb.com/"&gt;Slack&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>tutorial</category>
      <category>performance</category>
      <category>productivity</category>
    </item>
    <item>
      <title>How the new 'One Of Many' Laravel relationship made my project 600 times faster</title>
      <author>Nicolas Bailly</author>
      <pubDate>Fri, 21 May 2021 11:31:51 +0000</pubDate>
      <link>https://dev.to/nicolus/how-the-new-one-of-many-laravel-relationship-made-my-project-600-times-faster-27ll</link>
      <guid>https://dev.to/nicolus/how-the-new-one-of-many-laravel-relationship-made-my-project-600-times-faster-27ll</guid>
      <description>&lt;p&gt;When a framework is as mature as Laravel, most new features tend to become subtle improvements, "nice to haves", or something that covers an edge case that you might encounter someday... But sometimes there's a feature that makes you think "That's what I've been waiting for !".&lt;/p&gt;

&lt;p&gt;That's precisely what happened to me when the &lt;a href="https://laravel-news.com/one-of-many-eloquent-relationship"&gt;'One Of Many' relationships was added to Laravel 8.42&lt;/a&gt; a few days ago. And I'm pretty sure I'm not the only one since it solves a pretty common problem : getting the latest item out of a One To Many relationships.&lt;/p&gt;

&lt;p&gt;For example maybe you have a table where you write each time a user logs-in, and you want to get their latest login ? Or maybe an object that has to go through several steps in a workflow and you want to get its current status ? How convenient would it be to be able to just call &lt;code&gt;$user-&amp;gt;latestLogin()&lt;/code&gt; or &lt;code&gt;$order-&amp;gt;currentStatus()&lt;/code&gt; ?&lt;/p&gt;

&lt;p&gt;until now it was of course doable, but it was either really tedious or had a very high performance impact. Let me give you an example&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#my-monitoring-app"&gt;
  &lt;/a&gt;
  My Monitoring app
&lt;/h2&gt;

&lt;p&gt;One of my current pet projects is a very simple monitoring app, that allows a user to enter a few URLs that the service will "ping" every minute, and send a text message if it becomes unavailable. The main (and only) page looks like this :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n0KMLdZE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/arfn1dlnuw451r81o0cp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n0KMLdZE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/arfn1dlnuw451r81o0cp.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have a grand total of 3 models in the app :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;User&lt;/strong&gt; : A Laravel user&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Url&lt;/strong&gt; : A URL to monitor (a user can have many URLs)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Check&lt;/strong&gt; : A check that was made on a URL (a URL has many checks)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The controller for this view is really simple and the most simple approach would be something like that :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Request&lt;/span&gt; &lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$urls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;user&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;response&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'urls.index'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'urls'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$urls&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then in the view we create a table with each row looking like this :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="k"&gt;foreach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$urls&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;tr&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;td&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;$url&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;td&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;td&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;$url&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;td&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;td&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;$url&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;latestCheck&lt;/span&gt;&lt;span class="o"&gt;?-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;td&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;tr&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="k"&gt;endforeach&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And of course, I need to make latestCheck a relationship that can be queried, so I just added it in my URL model like so :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;latestCheck&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;HasOne&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;hasOne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Check&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;latest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'id'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That works.&lt;/p&gt;

&lt;p&gt;Well it kind of works. We have our results but we also have an issue called the "n+1 queries" problem, because every time we call latestCheck in the view, it will actually trigger an SQL query to get the latest check for that URL. It's very obvious when using Clockwork :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--scnkNI66--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h60cz8omwad3tme4xcys.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--scnkNI66--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h60cz8omwad3tme4xcys.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, we have 10 URLS to monitor so we make 10 SELECT queries on the &lt;em&gt;checks&lt;/em&gt; table, but if we had 100 we'd have 100 queries which would be significantly slower. Even as it is the page takes 600ms to load which is way too long for something simple as that.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note : The subsequent queries are faster and faster. That's because for this test I seeded the checks for each URL one after the other, so the checks for the 10th URL will be higher in the table, and be found much faster. That's not really what would happen in production.&lt;/em&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#eager-loading-to-the-rescue-"&gt;
  &lt;/a&gt;
  Eager loading to the rescue !
&lt;/h2&gt;

&lt;p&gt;Luckily Laravel provides us with a way to avoid this "n+1 queries" problem : eager loading. We can tell it to load all the elements of a relationships in one query by using the &lt;code&gt;-&amp;gt;with()&lt;/code&gt; method like so :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$urls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;user&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'latestCheck'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And sure enough, we now have only one query :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jQv9OoH5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pkffaxowspdsofx70no2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jQv9OoH5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pkffaxowspdsofx70no2.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And now our page displays in... WHAAAAAAT ? 20 seconds ? And it's using 480MB of memory ? that can't be right. What's happening ?&lt;/p&gt;

&lt;p&gt;Looking at the query, it doesn't seem to have any kind of "LIMIT" statement :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="nv"&gt;`checks`&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="nv"&gt;`checks`&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;`url_id`&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="nv"&gt;`id`&lt;/span&gt; &lt;span class="k"&gt;DESC&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will fetch ALL of the checks for those 10 URLS, and apparently Laravel is then working on a collection to extract the first check from each URL, except in my case it's a collection of 500000 items so it takes a lot of time and a lot of memory. &lt;strong&gt;So in our case it turns out that eager loading is actually much slower than lazy loading.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is very unsatisfying but going back to lazy loading was our best option with Eloquent prior to Laravel 8.42. If we wanted better performance the only other way was to ditch Eloquent and write our own query with &lt;code&gt;JOIN&lt;/code&gt; and &lt;code&gt;MAX()&lt;/code&gt; to get the latest check.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#latestofmany-relationship-to-the-rescue-"&gt;
  &lt;/a&gt;
  LatestOfMany Relationship to the Rescue !
&lt;/h2&gt;

&lt;p&gt;Fortunately we now have a much better solution, we can just rewrite that relationship with a small change :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;latestCheck&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;hasOne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Check&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;latestOfMany&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We replaced &lt;code&gt;latest()&lt;/code&gt; with &lt;code&gt;latestOfMany()&lt;/code&gt;, and now Laravel will make the proper SQL query behind the scene :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rNkjRqqG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ax8diz4u5svom0bg8ez9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rNkjRqqG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ax8diz4u5svom0bg8ez9.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that's much better ! We went from 600ms (or 20000ms with eager loading) to less than 30ms (which &lt;em&gt;is&lt;/em&gt; over 600 times faster than the worst case scenario), and we do have only one query that fetches just what we need :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;EXPLAIN&lt;/span&gt; &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="nv"&gt;`checks`&lt;/span&gt;
  &lt;span class="k"&gt;inner&lt;/span&gt; &lt;span class="k"&gt;join&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;MAX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;`checks`&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;`url_id`&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="nv"&gt;`checks`&lt;/span&gt;
    &lt;span class="k"&gt;GROUP&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="nv"&gt;`checks`&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;`url_id`&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;`latestCheck`&lt;/span&gt;
  &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="nv"&gt;`latestCheck`&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;`id`&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;`checks`&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;`id`&lt;/span&gt;
  &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="nv"&gt;`latestCheck`&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;`url_id`&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;`checks`&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;`url_id`&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="nv"&gt;`checks`&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;`url_id`&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's really not something I'd want to write in raw SQL or the Query Builder if I don't have to, so it's really nice to have it available in one method !&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;That's all there is to it really. Whenever you want the latest occurrence of a relationship you can use this new method and it will automatically be much faster while keeping your code clean and readable !&lt;/p&gt;

&lt;p&gt;Let us know if you've had similar experiences, or maybe a more original use case for these new relationships ?&lt;/p&gt;

</description>
    </item>
  </channel>
</rss>
