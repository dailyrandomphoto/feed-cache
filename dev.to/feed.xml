<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>GitHub stars matter! Here is why</title>
      <author>Ali Khajeh-Hosseini</author>
      <pubDate>Tue, 11 May 2021 20:59:11 +0000</pubDate>
      <link>https://dev.to/infracost/github-stars-matter-here-is-why-n8c</link>
      <guid>https://dev.to/infracost/github-stars-matter-here-is-why-n8c</guid>
      <description>&lt;p&gt;As &lt;a href="https://infracost.io"&gt;Infracost&lt;/a&gt; has hit 3,000 GitHub stars 🎉, I wanted to share some thoughts as to why GitHub stars matter.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-do-people-star-repos"&gt;
  &lt;/a&gt;
  Why do people star repos?
&lt;/h3&gt;

&lt;p&gt;There are two main reasons why people star GitHub projects:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Bookmarks&lt;/strong&gt;: some people star GitHub repos to bookmark them for later use. For example I can see the repos I've starred[1] and search within them for a keyword or sort them by how recently I starred them, or how active the project has been recently.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Show support or appreciation&lt;/strong&gt;: others star repos to show support or appreciation, similar to how "likes" are used in social media sites. This is a social signal, and it's very important in the very early stages of open source projects, acting as a feedback loop for project creators. Knowing that other people have seen the project and cared enough to click on the Star button can create motivation for the creators to continue working on the project initially.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The latter is why I personally star projects. Regardless of whether I've used the project in the past, using it just now, plan to use it, or think it's a cool idea, I want the project creator to know that I like what they're doing. Terraform and Pulumi are projects that I recently starred to show support.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#benefits-of-repo-stars"&gt;
  &lt;/a&gt;
  Benefits of repo stars
&lt;/h3&gt;

&lt;p&gt;The main benefit of repo stars is creating confidence and a good first impression of the project. That in turn helps with the project &lt;strong&gt;getting users&lt;/strong&gt;, and to a lesser extent contributors.&lt;/p&gt;

&lt;p&gt;A 2018 academic research survey of over 700 developers found that "three out of four developers consider the number of stars before using or contributing to GitHub projects"[2]. GitHub stars are not the only metric that matters though. A project's activity level, for example its last release or commit, and its ease of use, for example the quality of its documentation, are also important factors in helping projects get users.&lt;/p&gt;

&lt;p&gt;I say to a lesser extent as contributing, by creating a GitHub issue or submitting a pull request, requires significantly more effort than starring a repo. People who only star a repo are probably not yet active community members but they might become active in the future. This is why the Orbit Model classifies them as Observers[3], as they can act as the top-of-funnel for growing users and contributors.  hugely popular &lt;/p&gt;

&lt;p&gt;In addition to helping projects get users, GitHub stars can help the project creators &lt;strong&gt;meet investors&lt;/strong&gt; who are familiar with open source. Early on in Infracost's journey, we were surprised to get cold emails from VCs congratulating us on our star count. After speaking with a few, it became clear that they either had systems in place to monitor stars[4], or had analysts who reviewed Trending Repos on GitHub for potential investment opportunities[5]. Some have gone even further. For example, the VC firm Runa Capital, who invested in Nginx and MariaDB, has started to track the fastest growing open source startups using GitHub stars and forks. Infracost was recently placed 5th on the ROSS Index[6].&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jDQRPH7w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a8cxn7mh20h87r3d6rsq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jDQRPH7w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a8cxn7mh20h87r3d6rsq.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#future-of-github-stars"&gt;
  &lt;/a&gt;
  Future of GitHub stars
&lt;/h3&gt;

&lt;p&gt;A16Z's Martin Casado thinks that there is a big trend towards bottom-up strategies in business-to-business (B2B) software that will shape the entire B2B landscape in the next 10 years[7]. I wonder if in the same way that social media influencers are changing how products are marketed and sold, GitHub influencers (someone with many GitHub followers) will change how enterprise software is marketed and sold? Developer Advocates are currently using Twitter and LinkedIn, but GitHub has a "follow" and a "status update" feature too. Will those remain as a simple way to get updates on code-related activities? Or could they be extended to enable GitHub influencers to post their demos, talks and blogs into the GitHub activity feed? Will companies be able to buy ads on GitHub and promote their open source projects?&lt;/p&gt;

&lt;p&gt;Over to you - what have you learnt about GitHub stars, and how do you think they'll change in the future? I hang out on &lt;a href="https://twitter.com/AliKhajeh"&gt;Twitter&lt;/a&gt;...&lt;/p&gt;




&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/alikhajeh1?tab=stars"&gt;https://github.com/alikhajeh1?tab=stars&lt;/a&gt;, this is a public page, so you can see the repos that any GitHub user has starred.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;H. Borges and M. Tulio Valente, "What's in a GitHub Star? Understanding Repository Starring Practices in a Social Coding Platform," Journal of Systems and Software, vol. 146, pp. 112–129, 2018. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;a href="https://github.com/orbit-love/orbit-model"&gt;Orbit Model&lt;/a&gt; is implemented via the Orbit product, which can be used to measure and grow open source communities.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://openbase.com"&gt;Openbase&lt;/a&gt; helps developers choose the right JavaScript package with more languages coming soon. See the &lt;a href="https://openbase.com/js/react"&gt;React&lt;/a&gt; page to get an idea of the kinds of metrics they collect.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/trending"&gt;https://github.com/trending&lt;/a&gt;, Infracost has hit the Go trending page a few times.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://runacap.com/ross-index/"&gt;https://runacap.com/ross-index/&lt;/a&gt;, Infracost was placed 5th in the fastest-growing open-source startups in Q4 2020.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=fK5YUIS86SY"&gt;Growth, Sales, and a New Era of B2B&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>github</category>
      <category>startup</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Mock static methods with Mockito - Java Unit Testing</title>
      <author>Maxime Guilbert</author>
      <pubDate>Tue, 11 May 2021 20:46:52 +0000</pubDate>
      <link>https://dev.to/adaendra/mock-static-methods-with-mockito-java-unit-testing-189</link>
      <guid>https://dev.to/adaendra/mock-static-methods-with-mockito-java-unit-testing-189</guid>
      <description>&lt;p&gt;One of the most frustrating element when I am doing the Unit tests in Java is to not be able to mock static methods. &lt;/p&gt;

&lt;p&gt;Sure, during a long time we got PowerMock. But, since JUnit5, PowerMock wasn't compatible and we were unable to continue with it.&lt;/p&gt;




&lt;p&gt;But now, we have this feature included in Mockito! &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dependencies"&gt;
  &lt;/a&gt;
  Dependencies
&lt;/h2&gt;

&lt;p&gt;First, you have to add the &lt;strong&gt;mockito-inline&lt;/strong&gt; library. &lt;em&gt;(You can use any version up to 3.4.0)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Here is an exemple with Maven&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.mockito&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;mockito-inline&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;3.9.0&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;test&lt;span class="nt"&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#writing-test"&gt;
  &lt;/a&gt;
  Writing test
&lt;/h2&gt;

&lt;p&gt;To mock a static method, you have to create a &lt;strong&gt;mockStatic&lt;/strong&gt; of the class with the static method, and declare the event you want to apply to your mock.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;example&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nd"&gt;@Test&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;MockedStatic&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;LoggerFactory&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;loggerFactoryMock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Mockito&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;mockStatic&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;LoggerFactory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;loggerFactoryMock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;when&lt;/span&gt;&lt;span class="o"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;LoggerFactory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getLogger&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;any&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Class&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;))).&lt;/span&gt;&lt;span class="na"&gt;thenReturn&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loggerMock&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;span class="o"&gt;...&lt;/span&gt;
            &lt;span class="n"&gt;verify&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loggerMock&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)).&lt;/span&gt;&lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Err message test"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, you just have to run your tests!&lt;/p&gt;




&lt;p&gt;I hope it will help you!&lt;/p&gt;

</description>
      <category>java</category>
      <category>todayilearned</category>
    </item>
    <item>
      <title>React, TypeScript, and TDD</title>
      <author>Paul Everitt</author>
      <pubDate>Tue, 11 May 2021 20:04:21 +0000</pubDate>
      <link>https://dev.to/pauleveritt/react-typescript-and-tdd-1ne7</link>
      <guid>https://dev.to/pauleveritt/react-typescript-and-tdd-1ne7</guid>
      <description>&lt;p&gt;ReactJS is wildly popular and thus wildly supported. TypeScript is increasingly popular, and thus increasingly supported.&lt;/p&gt;

&lt;p&gt;The two together? Getting a lot better. Those two, in the context of test-driven development, combined with smart tooling? It's hard to find accurate learning materials.&lt;/p&gt;

&lt;p&gt;That three-part combination -- React, TypeScript, and TDD -- is the topic of this series. This article is a Part 1 summary of a 10-part &lt;a href="https://www.jetbrains.com/webstorm/guide/tutorials/react_typescript_tdd/project_setup/"&gt;video/text/code tutorial on React, TypeScript, and TDD&lt;/a&gt;. In two later installments, we’ll recap later steps from the tutorial.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-testdriven-development"&gt;
  &lt;/a&gt;
  Why Test-Driven Development?
&lt;/h2&gt;

&lt;p&gt;Eat your vegetables!&lt;/p&gt;

&lt;p&gt;Test-driven development, or TDD, is pitched as a way to do extra work up front, to improve quality and save time later on. Most people, when told that, hear: “Blah blah &lt;strong&gt;extra work&lt;/strong&gt; blah blah blah” and take a pass.&lt;/p&gt;

&lt;p&gt;This tutorial series tries to pitch test-first in a different light: it’s &lt;strong&gt;faster&lt;/strong&gt; and more &lt;strong&gt;joyful&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Why is it &lt;strong&gt;faster&lt;/strong&gt;? I’m writing a React component, and I want to see if it works. I leave my editor, go to my browser, click around in the universe, hope I didn’t break something in another route/view. With the style of development pitched in this article, you stay in your smart editor, in the few lines of test code, and watch as things gradually start working.&lt;/p&gt;

&lt;p&gt;And don’t even get me started on debugging during component development, aka &lt;code&gt;console.log&lt;/code&gt;. Instead, you sit in your test, running under NodeJS, and set breakpoints, as all the gods in the multiverse intended.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Joyful&lt;/strong&gt;? &lt;em&gt;Testing&lt;/em&gt;? &lt;/p&gt;

&lt;p&gt;That’s a big claim. But it’s true. Instead of breaking your mental “flow” going between tools and contexts, you stay in your IDE, where you have muscle memory atop muscle memory. Code on the left, test on the right, test output at the bottom.&lt;/p&gt;

&lt;p&gt;Mess something up? You’ll &lt;em&gt;fail faster&lt;/em&gt; with a broken test or even an IDE squiggly thanks to TypeScript. If you broke something that isn’t the URL being hot reloaded by create-react-app, you’ll know that too. It’s a feeling -- really, I’m not just saying this -- of calm, methodical progress.&lt;/p&gt;

&lt;p&gt;Of course, you also get your vegetables into the bargain.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h2&gt;

&lt;p&gt;I won’t belabor the details of getting started: it’s in the &lt;a href="https://www.jetbrains.com/webstorm/guide/tutorials/react_typescript_tdd/project_setup/"&gt;tutorial step&lt;/a&gt; and quite familiar to anybody who has used &lt;a href="https://create-react-app.dev"&gt;Create React App&lt;/a&gt;. Still, to get oriented, I’ll show a few things.&lt;/p&gt;

&lt;p&gt;What is Create React App (CRA)? Modern React, like anything in frontend development, has gotten awfully fiddly. CRA is a scaffold to create new React projects, using a known set of working packages.&lt;/p&gt;

&lt;p&gt;You could master the hundreds of npm packages and configuration yourself, &lt;em&gt;and&lt;/em&gt; keep them up-to-date as things change. CRA not only generates a working project for you, it moves the ongoing configuration &lt;em&gt;into their package&lt;/em&gt;. Meaning, they will keep it working. (Terms and conditions apply, consult a doctor before tinkering, offer not valid if you eject.)&lt;/p&gt;

&lt;p&gt;Creating a new project using npx (the npm command to fetch and run a package) is easy:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;npx create-react-app my-app &lt;span class="nt"&gt;--template&lt;/span&gt; typescript
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Modern IDEs probably automate this for you as part of the New Project wizard.&lt;/p&gt;

&lt;p&gt;npx will then fetch the create-react-app package, run it, and pass the template argument saying to generate a package that uses TypeScript. You’ll probably get a laugh out of this self-aware log message:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;Installing packages. This might take a couple of minutes.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The command also initializes a git repo, creates a &lt;code&gt;package.json&lt;/code&gt;, and does the equivalent of npm install for your generated package. At the time of this writing, the result is a mere 1,063 entries in the &lt;code&gt;node_modules&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;Thank you CRA for owning all that.&lt;/p&gt;

&lt;p&gt;You now have a working Hello World in React and TypeScript. To see it in action, run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Your IDE probably has a pointy-clicky way to run this. For example in WebStorm and other IntelliJ IDEs:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AecWWQJG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.jetbrains.com/webstorm/guide/static/5f4c67b9ebb6b64ee278d543c670414d/efc66/npm_tool_window.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AecWWQJG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.jetbrains.com/webstorm/guide/static/5f4c67b9ebb6b64ee278d543c670414d/efc66/npm_tool_window.png" alt="npm run start"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You’ll see some log messages as the dev server starts, and a browser will open at &lt;code&gt;http://localhost:3000&lt;/code&gt; -- convenient!&lt;/p&gt;

&lt;p&gt;Where did “start” come from? Take a look at the “scripts” block in the generated package.json file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"start": "react-scripts start",
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It’s a shortcut to a console script provided by CRA.&lt;/p&gt;

&lt;p&gt;But wait, there’s more! With the dev server still running, open &lt;code&gt;src/App.tsx&lt;/code&gt; and some text in the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;, then save. In a second or two, your browser shows the update. CRA is watching for changes, transparently executes the four trillion instructions to change the frontend code, and does a smart reload with the browser.&lt;/p&gt;

&lt;p&gt;If you look at all of &lt;code&gt;package.json&lt;/code&gt;, you’ll see that it is quite compact.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"react_ts_tdd"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"0.1.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"private"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"dependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"@testing-library/jest-dom"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^5.11.4"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"@testing-library/react"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^11.1.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"@testing-library/user-event"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^12.1.10"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"@types/jest"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^26.0.15"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"@types/node"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^12.0.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"@types/react"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^17.0.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"@types/react-dom"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^17.0.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"react"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^17.0.2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"react-dom"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^17.0.2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"react-scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"4.0.3"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"typescript"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^4.1.2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"web-vitals"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^1.0.1"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"react-scripts start"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"react-scripts build"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"test"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"react-scripts test"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"eject"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"react-scripts eject"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"eslintConfig"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"extends"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"react-app"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"react-app/jest"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"browserslist"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"production"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"&amp;gt;0.2%"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"not dead"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"not op_mini all"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"development"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"last 1 chrome version"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"last 1 firefox version"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"last 1 safari version"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Well, “compact” relative to the amount of work it is doing.&lt;/p&gt;

&lt;p&gt;The genius of create-react-app lies in moving a bunch of "What the hell is this?" configuration files, into its packages. Thus, they own those decisions and complexity. You can then upgrade those packages and gain new/fixed wiring of all the JavaScript build tools.&lt;/p&gt;

&lt;p&gt;Let’s run one more of the scripts CRA provided:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;npm run-script build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This takes a while, as it hyper-optimizes a generated React site/app in the &lt;code&gt;build&lt;/code&gt; directory. This can then be deployed to a server.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hello-test"&gt;
  &lt;/a&gt;
  Hello Test
&lt;/h2&gt;

&lt;p&gt;“You got me excited about testing, no testing, where’s the testing!” You’re right! Let’s do some testing, following &lt;a href="https://www.jetbrains.com/webstorm/guide/tutorials/react_typescript_tdd/testing/"&gt;the tutorial step that covers this&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;First, some background. I know, I know, I’ll get to a test soon.&lt;/p&gt;

&lt;p&gt;CRA is opinionated. It chooses important packages, generates the configuration, and keeps the setup working. For testing, &lt;a href="https://create-react-app.dev/docs/running-tests"&gt;CRA has made&lt;/a&gt; three important choices:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://jestjs.io/"&gt;Jest&lt;/a&gt; as the test runner&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/tmpvar/jsdom"&gt;jsdom&lt;/a&gt; as a simulated browser&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/testing-library/react-testing-library"&gt;react-testing-library&lt;/a&gt; for test helpers and an assertion library&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Enough ceremony. Let’s run the tests:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;npm run-script &lt;span class="nb"&gt;test&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It’s running under the watcher, so it tells you it doesn’t have any tests that have changed, based on Git:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rsVjIPv3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mz7fi3e7o7u7k8d8hynk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rsVjIPv3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mz7fi3e7o7u7k8d8hynk.png" alt="Watched No Changes"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Open &lt;code&gt;src/app/App.tsx&lt;/code&gt; and change &lt;code&gt;save to reload&lt;/code&gt; to &lt;code&gt;save to reload!!&lt;/code&gt;. You’ll see output the looks something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--livH7cKq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xq8cr480qygsujtdl1ls.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--livH7cKq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xq8cr480qygsujtdl1ls.png" alt="Watched Changed"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The watcher has some options to limit what it looks for, which really helps productivity. This time, change “Learn React” in &lt;code&gt;src/App.tsx&lt;/code&gt; to say “Master React”. The watcher re-runs the tests, which now &lt;em&gt;fail&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XosrSUAZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z783fhv2g9y7vw9kmy6f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XosrSUAZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z783fhv2g9y7vw9kmy6f.png" alt="Watched Failed"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In an IDE you might get a richer way to look at this. For example, in WebStorm, here’s what the failing test runner looks like:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TS7Iis2v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rsce6vd5w73zz5fmtpfq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TS7Iis2v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rsce6vd5w73zz5fmtpfq.png" alt="In An IDE"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What’s really happening here? What’s executing? As mentioned earlier, CRA uses Jest as a test running. That makes Jest a...wait for it...test &lt;em&gt;runner&lt;/em&gt;. It provides configuration, command flags (such as the watcher), ways to find tests, etc. It also &lt;a href="https://jestjs.io/docs/configuration#testenvironment-string"&gt;bundles jsdom as the pre-configured test environment&lt;/a&gt;, which is a long way to say “browser.”&lt;/p&gt;

&lt;p&gt;jsdom is really neat. It’s a fake browser, written in JS, that runs in NodeJS and pretends to render your markup and execute your JavaScript. It’s a super-fast, unobtrusive alternative to Chrome firing up for each test.&lt;/p&gt;

&lt;p&gt;Jest also uses &lt;a href="https://testing-library.com"&gt;testing-library&lt;/a&gt; -- specifically, its React integration -- for the format of the tests and the assertions where you check that the code works. &lt;/p&gt;

&lt;p&gt;What does that look like? What does an actual &lt;em&gt;test&lt;/em&gt; look like? Here is the test that Create React App generates by default:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@testing-library/react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;renders learn react link&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;linkElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/learn react/i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;linkElement&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toBeInTheDocument&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We’ll see more down below when we really get into TDD. But for now...this is a nice way to work: staying in your editor and failing faster.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#debugging-during-testing-with-nodejs"&gt;
  &lt;/a&gt;
  Debugging During Testing With NodeJS
&lt;/h2&gt;

&lt;p&gt;We’ve already shown a lot, enough that -- at least for me -- is really compelling for working this “test-first” way. But there’s one more part that clearly beats the alternative: debugging. This is covered in the &lt;a href="https://www.jetbrains.com/webstorm/guide/tutorials/react_typescript_tdd/nodejs_debugging/"&gt;text and video for the tutorial step&lt;/a&gt; on this section. This section shows integration with a particular tool (WebStorm) but concepts apply elsewhere.&lt;/p&gt;

&lt;p&gt;Imagine, instead of just an &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; with a label, we wanted a function that calculated the “greeting”. This function might take an argument for the name to say hello to, and we want to uppercase that name.&lt;/p&gt;

&lt;p&gt;We could write the function and insert the call in the heading. Let’s write a test first:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;generates a label&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;React&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello REACT&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The test fails: we haven’t written a label function. In fact, our tool gave us a warning, saying we haven't even imported it:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_u7Gsle9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/38qx7h8gz01kzt8xwsqn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_u7Gsle9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/38qx7h8gz01kzt8xwsqn.png" alt="Missing Label"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let’s now write that &lt;code&gt;label&lt;/code&gt; function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`Hello &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once we import it in &lt;code&gt;src/App.test.tsx&lt;/code&gt;, the tests now pass again. That’s great, but if we pass it an integer instead of a string:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;generates a label&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello REACT&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;...the test will get angry:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vX84nABG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cq06rcysue612ve2e0yk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vX84nABG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cq06rcysue612ve2e0yk.png" alt="Integer"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let’s say we can’t easily figure out the problem. Rather than sprinkling &lt;code&gt;console.log&lt;/code&gt; everywhere, we can use...the debugger! Set a breakpoint on the line in the test:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x8vkhpmQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x0p2jup0qvwo36pinz8t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x8vkhpmQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x0p2jup0qvwo36pinz8t.png" alt="Breakpoint"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now run the tests, but executing under the debugger:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yJOixvPb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/opjjq6s2cn7b61vopkin.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yJOixvPb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/opjjq6s2cn7b61vopkin.png" alt="Run Under Debugger"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Execution will stop on this line in the test. You can choose “Step Into” to jump into the label function and then poke around interactively. You then discover -- duh, integers don’t have a &lt;code&gt;toUpperCase&lt;/code&gt; method:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5NJ2wH1T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5qiu3fk6nh95u7ln9ghx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5NJ2wH1T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5qiu3fk6nh95u7ln9ghx.png" alt="Stop At Breakpoint"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In fact, TypeScript was warning us about this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ddm3YtE2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mzfhr5aty8o733q9z3iu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ddm3YtE2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mzfhr5aty8o733q9z3iu.png" alt="TypeScript Warning"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As a way to help guard against this, and to “fail faster” in the future, add type information to the name argument for the &lt;code&gt;label&lt;/code&gt; function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`Hello &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Debugging during test writing -- and staying in NodeJS, thus in your tool -- is super-productive. It’s much more productive than &lt;code&gt;console.log&lt;/code&gt; the universe, or using the browser debugger.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Writing React components is usually an iterative process: write some code, switch to the browser, click around. When you have problems and need to poke around, it’s...complicated.&lt;/p&gt;

&lt;p&gt;The combination of TypeScript, test-first, and smarter tooling gives an alternative. One where you “fail faster” and stay in the flow, code with confidence -- and dare I say, have more fun.&lt;/p&gt;

&lt;p&gt;In this first part we set the scene. As the tutorial shows, we’ll get into real component development in the next two parts.&lt;/p&gt;

</description>
      <category>react</category>
      <category>typescript</category>
      <category>testing</category>
    </item>
    <item>
      <title>First week of the 365 Days Of Blogging Challenge!</title>
      <author>Patryk Jeziorowski</author>
      <pubDate>Tue, 11 May 2021 19:53:30 +0000</pubDate>
      <link>https://dev.to/pjeziorowski/first-week-of-the-365-days-of-blogging-challenge-4f18</link>
      <guid>https://dev.to/pjeziorowski/first-week-of-the-365-days-of-blogging-challenge-4f18</guid>
      <description>&lt;p&gt;So, &lt;a href="https://dev.to/pjeziorowski/365-days-of-blogging-challenge-or-i-transfer-1000-to-your-bank-account-5dj9"&gt;in the previous post&lt;/a&gt; I announced the challenge of blogging daily for the next 365 days or sending $1000 to a random person chosen from the comments section. &lt;/p&gt;

&lt;p&gt;After doing it I received tons of comments (hopefully not just because of the potential easy $ you may win if I fail :D) about what am I going to write about, about the quantity and quality of the articles and so on. &lt;/p&gt;

&lt;p&gt;A few fellow dev.to members suggested that I should substitute the goal of "1 article daily" by "x words daily" to make sure the published articles are high quality.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quality-over-quantity"&gt;
  &lt;/a&gt;
  Quality over quantity
&lt;/h2&gt;

&lt;p&gt;I agree that goal of writing "X amount of words daily" may lead to higher quality posts, so I decided to follow the suggestions I got in the comments section, and instead of publishing 1 article a day, I'll be writing 500 words daily, or 3500 words weekly. &lt;/p&gt;

&lt;p&gt;This is a quite aggressive goal - as @InHuoOfficial mentioned &lt;a href="https://dev.to/inhuofficial/comment/1ecdi"&gt;in his comment&lt;/a&gt;, this would result in writing basically two novels in one year (over 180K words!).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#topics-of-the-posts"&gt;
  &lt;/a&gt;
  Topics of the posts
&lt;/h2&gt;

&lt;p&gt;To answer all the questions I had about topics of the articles - I'll be writing about things I'm currently working on at &lt;a href="https://www.qovery.com/"&gt;startup I help to build&lt;/a&gt;, about things I'm currently learning, about things I'm interested in. &lt;/p&gt;

&lt;p&gt;I'm a pretty geeky tech person, so it's going to all revolve around software, programming and tech topics. You may also expect stuff about productivity, biohacking, and basically anything that may help you in your tech journey.&lt;/p&gt;

&lt;p&gt;If this challenge goes well, I'll also describe my case study and show you how I managed to write and publish consistently over such a long time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#writing-in-public-amp-transparency"&gt;
  &lt;/a&gt;
  Writing in Public &amp;amp; Transparency
&lt;/h2&gt;

&lt;p&gt;To keep the challenge fair and give you visibility into the process, besides publishing articles, I'll be publishing drafts of posts to a &lt;a href="https://github.com/pjeziorowski/cyberwritings/tree/main/content/drafts"&gt;public Github repository&lt;/a&gt; (which is the repo of my private blog BTW). &lt;/p&gt;

&lt;p&gt;You'll be able to track what I'm working on, topics of following articles, number of words or whatever you want to know about my writing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#changes-in-the-challenge"&gt;
  &lt;/a&gt;
  Changes in the challenge
&lt;/h2&gt;

&lt;p&gt;So, as I previously mentioned, I'm changing the numbers in the challenge - instead of publishing 1 article a day, I'll write 500 words a day, 3500 words a week, over 180k words (2 novels!) a year. I'll do the counting, reporting and tracking if I meet the challenge's goals every week during the weekend. &lt;/p&gt;

&lt;p&gt;If you want to be informed about progress and the results (and also about the potential $1000 winner in case I fail), you can &lt;a href="https://app.getresponse.com/site2/patrykjeziorowski/?u=yXSNe&amp;amp;webforms_id=BaviR"&gt;sign up to the newsletter&lt;/a&gt; I quickly created for the purpose of this challenge.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stay-up-to-date"&gt;
  &lt;/a&gt;
  Stay up to date
&lt;/h2&gt;

&lt;p&gt;Besides the newsletter, I'll publish all the articles (and challenge updates) here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/pjeziorowski"&gt;https://dev.to/pjeziorowski&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cyberwritings.com"&gt;https://cyberwritings.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.cyberwritings.com"&gt;https://medium.cyberwritings.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hashnode.cyberwritings.com"&gt;https://hashnode.cyberwritings.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And drafts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/pjeziorowski/cyberwritings/tree/main/content/drafts"&gt;https://github.com/pjeziorowski/cyberwritings/tree/main/content/drafts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#it-all-starts-this-week"&gt;
  &lt;/a&gt;
  It all starts this week!
&lt;/h2&gt;

&lt;p&gt;Please let me know what do you think about the changes and the form of the challenge. I'll try to constantly improve the process, but I'd also like to start the challenge ASAP (this week), so any feedback now is highly appreciated! &lt;/p&gt;

</description>
      <category>productivity</category>
      <category>webdev</category>
    </item>
    <item>
      <title>First Job As A Web Developer</title>
      <author>Michael Duffy</author>
      <pubDate>Tue, 11 May 2021 19:45:41 +0000</pubDate>
      <link>https://dev.to/michaelduffy1/first-job-as-a-web-developer-3l92</link>
      <guid>https://dev.to/michaelduffy1/first-job-as-a-web-developer-3l92</guid>
      <description>&lt;p&gt;Since my first few posts here I was in the last few months of my HND Software Development course at college. My next steps were to apply for university and try my luck at applying for any developer positions that were available. (just chancing my luck to even get an interview)&lt;/p&gt;

&lt;p&gt;After many different applications I got a conditional offer for a course at university and i got an interview for a web developer position.&lt;/p&gt;

&lt;p&gt;The 1st interview was fairly relaxed and just about getting to know me as a person and what I was doing at that moment in time.&lt;/p&gt;

&lt;p&gt;I got offered a 2nd interview and this was more technical as I had to design and code a homepage for them and then present my designs. (both interviews were done remotely as COVID)&lt;/p&gt;

&lt;p&gt;I got mixed up with the interview times due to a MS Teams meeting error which said my meeting was an hour earlier than i first knew. Panic set in as I emailed the employer telling them I had made a mistake and got mixed up but it turned out was just a mixup on MS Teams.&lt;/p&gt;

&lt;p&gt;After the stress wore off I presented my designs and all went well. I was told that I would be informed later that day of any decisions regarding the web developer position.&lt;/p&gt;

&lt;p&gt;I got called a few hours later and was offered the job !!! &lt;br&gt;
I am just beginning my professional career within web development and will be journalling it through this forum.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>motivation</category>
      <category>career</category>
    </item>
    <item>
      <title>How to start in Automation Testing ✍</title>
      <author>Pablo Hernández Castillo</author>
      <pubDate>Tue, 11 May 2021 19:24:50 +0000</pubDate>
      <link>https://dev.to/pablotz/how-to-start-in-automation-testing-641</link>
      <guid>https://dev.to/pablotz/how-to-start-in-automation-testing-641</guid>
      <description>&lt;p&gt;Ahhhh ... The world of &lt;strong&gt;testing&lt;/strong&gt;, is a place that can sometimes be full of chaos and sometimes it is the most peaceful place in the world.&lt;/p&gt;

&lt;p&gt;We cannot deny that development tests are our daily bread, all additions or changes made to our software should be tested (in theory 😝), all development flow tests should be something implicit and not be something let it be taken lightly or left for last.&lt;/p&gt;

&lt;p&gt;So taking this into consideration, this is where the automated tests start. We have all done tests after some change and validate if this had been done correctly; What automated tests provide us is that in the event that we are trying to validate a login, for example, entering username and password hundreds of times to verify that it is working, may be a matter that takes us, although not long, It can build up causing us to fall behind in some of our other tasks.&lt;/p&gt;

&lt;p&gt;Automated tests help us to handle this in a simple way, with a simple script (now we will research a more about this), we can create a test which makes our validation tasks much easier. And perhaps we can think that this type of tests are only necessary for systems which are very huge, but this could not be further from the truth, because although we have a simple system which only consults an API and shows it, the Automated tests can allow us to execute infinite number of times in a period of time, and with this we validate if the call and query to the API is working correctly.&lt;/p&gt;

&lt;p&gt;Automation is not further from as we know it, it will take care of doing the steps that we would normally do, that means that we must have a flow of steps to follow to complete a test, this is important to mention, since when We normally carry out tests, we do not take into account what steps we are following to validate that action, creating these tests also allows us to realize the flows that our systems have.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#previous-knowledge"&gt;
  &lt;/a&gt;
  Previous knowledge 🧠
&lt;/h2&gt;

&lt;p&gt;The creation of tests is extremely important therefore, we must know what flows we are going to apply and what steps are going to be followed, if we do not define this beforehand, it may take us even more time to want to develop tests in an improvised way.&lt;/p&gt;

&lt;p&gt;Fortunately, automated tests can be developed in multiple languages, we can use anything from Python to Javascript, so with just having some knowledge in one of these languages we can start developing this automation.&lt;/p&gt;

&lt;p&gt;In the case of the tests carried out on Front-End we can investigate about &lt;a href="https://www.javatpoint.com/what-is-xpath"&gt;X-Path&lt;/a&gt; or &lt;a href="https://www.w3schools.com/css/css_selectors.asp"&gt;CSS Selector&lt;/a&gt; To make use of the automation of elements found on our page.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tools-for-testing"&gt;
  &lt;/a&gt;
  Tools (for testing) 🔨
&lt;/h2&gt;

&lt;p&gt;The most famous testing framework is &lt;a href="https://www.guru99.com/introduction-to-selenium.html"&gt;SELENIUM&lt;/a&gt; this framework is in multiple languages. Some advantages of Selenium over other types of frameworks is the use of Selenium Grid, which allows us to execute multiple tests simultaneously in a very simple way.&lt;/p&gt;

&lt;p&gt;Regarding the Javascript side, although we have Selenium, there are different types of tools, perhaps a little more updated, as is the case with Cypress, which is a tool that is constantly updated and provides us with a visual aid for the creation of the testing and selection of items on our page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NBq77s7s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l6lb5v5z71q8k9cm6695.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NBq77s7s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l6lb5v5z71q8k9cm6695.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cypress in the same way that Selenium gives us the ability to run tests in parallel with its &lt;a href="https://www.cypress.io/dashboard/"&gt;Dashboard&lt;/a&gt; but that topic for another article.&lt;/p&gt;

&lt;p&gt;Other tools that I also recommend knowing a bit are &lt;a href="https://mochajs.org/"&gt;Mocha&lt;/a&gt; and &lt;a href="https://cucumber.io/"&gt;Cucumber&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions 🔴
&lt;/h2&gt;

&lt;p&gt;As we have seen, there are different automation tools and the one found in multiple languages helps us to go much further into learning this type of technology.&lt;/p&gt;

&lt;p&gt;The tests in the development flow can be something very undervalued, however, they can assure us the quality of our systems.&lt;/p&gt;

&lt;p&gt;So, what are you waiting for, automation is a very fun world with a lot of information to know much more.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Keep coding&lt;/strong&gt; 😎&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>python</category>
      <category>selenium</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Iniciar en el mundo del TESTING AUTOMATIZADO ✍</title>
      <author>Pablo Hernández Castillo</author>
      <pubDate>Tue, 11 May 2021 19:21:59 +0000</pubDate>
      <link>https://dev.to/pablotz/iniciar-en-el-mundo-del-testing-automatizado-3n1h</link>
      <guid>https://dev.to/pablotz/iniciar-en-el-mundo-del-testing-automatizado-3n1h</guid>
      <description>&lt;p&gt;Ahhhh... El mundo del &lt;strong&gt;testing&lt;/strong&gt;, es un lugar que a veces puede estar lleno de caos y algunas otras es el lugar más pacifico del mundo.&lt;/p&gt;

&lt;p&gt;No podemos negar que las pruebas en el desarrollo son nuestro pan de cada día, todo añadido o cambio realizado en nuestro software debería de ser probado (en teoría 😝), en todo flujo de desarrollo las pruebas debería de ser algo implícito y no ser algo que se tome a la ligera o se deje para el final.&lt;/p&gt;

&lt;p&gt;Entonces teniendo esto en consideración, de aquí parten las pruebas automatizadas. Todos hemos realizado pruebas después de algún cambio y validar si este se había hecho correctamente; lo que nos proporcionan las pruebas automatizadas es que en el caso de que estemos intentando validar un login por ejemplo, el ingresar usuario y contraseña cientos de veces para comprobar que este funcionando, puede ser una cuestión que nos lleve, si bien no mucho tiempo, se puede acumular causando que nos retrasemos en alguna otra de nuestras tareas.&lt;/p&gt;

&lt;p&gt;Las pruebas automatizadas nos ayudan a manejar esto de forma sencilla, con un simple script (ahora conoceremos un poco más de esto), podemos crear una prueba la cual haga nuestras tareas de validaciones mucho más sencillas. Y tal vez podamos pensar que este tipo de pruebas solo sean necesarias para sistemas los cuales sean muy grandes, pero esto no puede estar más alejado de la verdad, pues aunque tengamos un sistema sencillo el cual solo consulta a una API y la muestra, las pruebas automatizadas nos pueden permitir que se ejecute X cantidad de veces en un lapso, y con esto validamos si la llamada y la consulta a la API está funcionando correctamente.&lt;/p&gt;

&lt;p&gt;La automatización pues no es más alejado a como lo conocemos, esta se encargara de hacer los pasos que normalmente nosotros haríamos, eso significa que debemos de tener un flujo de pasos a seguir para completar una prueba, esto es importante a mencionar, ya que cuando nosotros normalmente realizamos pruebas, no tomamos en cuenta que pasos estamos siguiendo para validar esa acción, el crear estas pruebas también nos permite darnos cuenta de los flujos que tienen nuestros sistemas.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conocimientos-previos"&gt;
  &lt;/a&gt;
  Conocimientos previos 🧠
&lt;/h2&gt;

&lt;p&gt;La creación de pruebas es algo sumamente importante por lo tanto, debemos conocer que flujos vamos a aplicar y que pasos se van a seguir, si no definimos esto desde antes puede llevarnos aun más tiempo el querer desarrollar pruebas de forma improvisada.&lt;/p&gt;

&lt;p&gt;Afortunadamente las pruebas automatizadas puedes desarrollarse en múltiples lenguajes, podemos usar desde Python hasta Javascript, así que con tan solo tener algunos conocimientos en alguno de estos lenguajes podemos comenzar a desarrollar esta automatización.&lt;/p&gt;

&lt;p&gt;En el caso de las pruebas que se realizan sobre Front-End podemos investigar acerca de &lt;a href="https://www.javatpoint.com/what-is-xpath"&gt;X-Path&lt;/a&gt; o &lt;a href="https://developer.mozilla.org/es/docs/Learn/CSS/Building_blocks/Selectors"&gt;CSS Selector&lt;/a&gt; Para hacer uso de la automatización de elementos que se encuentren en nuestra pagina.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#herramientas-para-la-realizaci%C3%B3n-de-pruebas"&gt;
  &lt;/a&gt;
  Herramientas (para la realización de pruebas) 🔨
&lt;/h2&gt;

&lt;p&gt;El framework para la realización de pruebas más famoso, es &lt;a href="https://www.guru99.com/introduction-to-selenium.html"&gt;SELENIUM&lt;/a&gt; este framework se encuentra en múltiples lenguajes. Algunas ventajas de Selenium sobre otro tipo de frameworks es el uso de Selenium Grid, el cual nos permite ejecutar múltiples pruebas de forma simultanea de forma muy sencilla.&lt;/p&gt;

&lt;p&gt;Para el lado de Javascript si bien tenemos Selenium existen diferentes tipos de herramientas tal vez un poco más actualizadas, como es el caso de Cypress, el cual es una herramienta que se encuentra en constante actualización y nos proporciona una ayuda visual para la creación de las pruebas y la selección de elementos de nuestra página.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NBq77s7s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l6lb5v5z71q8k9cm6695.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NBq77s7s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l6lb5v5z71q8k9cm6695.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cypress de igual manera que Selenium nos da la capacidad de ejecutar pruebas de manera paralela con su &lt;a href="https://www.cypress.io/dashboard/"&gt;Dashboard&lt;/a&gt; pero ese tema para otro articulo.&lt;/p&gt;

&lt;p&gt;Otras herramientas que también recomiendo conocer un poco son &lt;a href="https://mochajs.org/"&gt;Mocha&lt;/a&gt; y &lt;a href="https://cucumber.io/"&gt;Cucumber&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusiones"&gt;
  &lt;/a&gt;
  Conclusiones 🔴
&lt;/h2&gt;

&lt;p&gt;Como hemos visto existen diferentes herramientas de automatización y el que se encuentren en múltiples lenguajes, nos ayuda a que podamos adentrarnos mucho más en aprender este tipo de tecnologías.&lt;/p&gt;

&lt;p&gt;Las pruebas en el flujo de desarrollo puede llegar a ser algo muy infravalorado sin embargo, estas nos pueden llegar a asegurar la calidad de nuestros sistemas.&lt;/p&gt;

&lt;p&gt;Así pues, que esperas, la automatización es un mundo muy divertido y con mucha información para conocer mucho más.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Keep coding&lt;/strong&gt; 😎&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>python</category>
      <category>selenium</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Integrating Chatbot into your next project</title>
      <author>lary mak</author>
      <pubDate>Tue, 11 May 2021 19:09:19 +0000</pubDate>
      <link>https://dev.to/larymak/integrating-chatbot-into-your-next-project-3gk</link>
      <guid>https://dev.to/larymak/integrating-chatbot-into-your-next-project-3gk</guid>
      <description>&lt;p&gt;Am sure by now we have all interacted with a different site where whenever we visit the site there is a pop-up at the bottom asking on how it can help us right,&lt;br&gt;&lt;br&gt;
Now that's an easier way to describe a chatbot, an online assistant programmed to help us with different tasks as programmed.&lt;br&gt;&lt;br&gt;
Most companies nowadays have turned to chatbots hence reducing the dependency on humans.&lt;br&gt;&lt;br&gt;
Person-to-person conversations can be long and may end up causing maybe conflicts among two people which may result in a bad reputation to the company, but with these bots, they are straight to the point, you ask a question, and they answer accordingly as instructed by its developer.&lt;/p&gt;

&lt;p&gt;Perhaps you might be wondering, Do I have to create a chatbot for my website or channel? &lt;br&gt;
Well, now you don't. With lots of software companies today it's easier for you by the use of an Application Programming Interface (API).&lt;/p&gt;

&lt;p&gt;Let's say for instance you are running a hotel or a business that has a booking service enabled, you may want your clients to do bookings early in advance and let the information be relayed back to you for recording.&lt;br&gt;&lt;br&gt;
To make this a success, we can add a chatbot that allows visitors on our site or page to do the booking there. &lt;br&gt;
And for our bot to work we will need an API integration, we have lots of companies with services, and you need the one that will perfectly suit your needs.&lt;br&gt;&lt;br&gt;
Let's have a look at the Spurwing API for instance. It allows you to add different functionalities into your projects, like appointment scheduling via voice command, isn't that amazing all you do is give commands via voice, and they are executed. &lt;br&gt;
Also you can embed a chatbot too, &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#lets-have-a-look-how"&gt;
  &lt;/a&gt;
  Lets have a look how:
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mrwmzA6k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qm2atkemrlpg0tgi629f.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mrwmzA6k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qm2atkemrlpg0tgi629f.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
For detailed documentation check out their &lt;a href="https://github.com/Spurwing/Chat-Bot-Integrations/tree/main/Facebook/NodeJS"&gt;GitHub&lt;/a&gt; for detailed documentation.  &lt;/p&gt;

&lt;p&gt;Also check out my other article on: &lt;br&gt;
&lt;a href="https://dev.to/larymak/must-have-themes-and-extensions-for-every-developers-visual-studio-code-setup-2igi"&gt;Must have Themes and Extensions for every Developers - Visual studio code setup&lt;/a&gt;&lt;br&gt;
&lt;a href="https://dev.to/larymak/7-best-visual-studio-code-extensions-every-web-developer-should-have-2m1c"&gt;7 Best Visual Studio Code Extensions Every Web Developer Should Have.&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Connect With me at &lt;a href="https://twitter.com/larymak1"&gt;Twitter&lt;/a&gt; | &lt;a href="https://www.instagram.com/nextgencoders/"&gt;Insta&lt;/a&gt; | &lt;a href="https://www.youtube.com/channel/UCrT1ARRZfLOuf6nc_97eXEg"&gt;YouTube&lt;/a&gt; | &lt;a href="https://www.linkedin.com/in/hillary-nyakundi-3a64b11ab/"&gt;LinkedIn&lt;/a&gt;  | &lt;a href="https://github.com/larymak"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>javascript</category>
      <category>productivity</category>
      <category>python</category>
    </item>
    <item>
      <title>How I Use Vim for Productivity and Efficiency</title>
      <author>jones268</author>
      <pubDate>Tue, 11 May 2021 19:04:57 +0000</pubDate>
      <link>https://dev.to/jones268/how-i-use-vim-for-productivity-and-efficiency-15mh</link>
      <guid>https://dev.to/jones268/how-i-use-vim-for-productivity-and-efficiency-15mh</guid>
      <description>&lt;p&gt;I use vim (a text editor) for my product development work, which is full of repetitive tasks. For example, I’m currently working on a project that has many, many files and many, many lines of code. In total, there are over 10,000 lines of code that I have to navigate through. It would take me forever if I didn’t have vim on my side.&lt;/p&gt;

&lt;p&gt;I have used a variety of text editors in my career. I started with pico on my workstations, worked briefly with joe on &lt;a href="https://en.wikipedia.org/wiki/Solaris_(operating_system)"&gt;Solaris&lt;/a&gt; and then moved to emacs and nano. When I moved to Linux as my primary operating system, I started using vim to edit text files. Then I learned about vim and how to use it and that is when I really fell in love with vim.&lt;/p&gt;

&lt;p&gt;I am not going to go into all of the details about vim but if you are new to vim I recommend &lt;a href="https://vim.is/"&gt;this tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vim-tricks"&gt;
  &lt;/a&gt;
  Vim Tricks
&lt;/h3&gt;

&lt;p&gt;I am just going to highlight some tricks that I have found useful.&lt;/p&gt;

&lt;p&gt;So how exactly does a guy like me get used to typing commands left and right? It took some time and patience, but it was well worth it.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;keyboard macros&lt;/strong&gt;  You can start recording your keys with &lt;code&gt;ESC&lt;/code&gt; followed by &lt;code&gt;qh&lt;/code&gt;. Then whatever you type in vim (including commands) will be recorded. Press &lt;code&gt;ESC&lt;/code&gt; &lt;code&gt;q&lt;/code&gt; to stop recording. Now press &lt;code&gt;@h&lt;/code&gt; to replay your key strokes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;repeat action&lt;/strong&gt; if you want to repeat an action, just type a number followed by the action. To delete 10 lines press &lt;code&gt;10dd&lt;/code&gt;. To press 50 lines type &lt;code&gt;50dd&lt;/code&gt;. You can do this for keyboard recording too, &lt;code&gt;50@h&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;run commands&lt;/strong&gt; you can run commands right from within vim. &lt;code&gt;!ls&lt;/code&gt; runs the command ls in your terminal. You can do this for any command.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;scrolling&lt;/strong&gt; you can scroll inside vim with the keys &lt;code&gt;ctrl+e&lt;/code&gt; and &lt;code&gt;ctrl+y&lt;/code&gt;, no need to use the mouse&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;move to end/begin&lt;/strong&gt; you can use the keys &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;$&lt;/code&gt; to move to the beginning and end of a line. No need to hold down the cursor key for several seconds.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;jump to line&lt;/strong&gt; press the keys &lt;code&gt;140G&lt;/code&gt; to jump to line 140. You can also use &lt;code&gt;:140&lt;/code&gt; if you prefer those keys.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;set your .vimrc&lt;/strong&gt; you should have a good .vimrc file in place so that you have all the settings ready to go. This means options for colours, font, tab settings etc. You can put this on git and pull whenever you access another computer. That way your settings stay in sync no matter what computer you use.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;vim mode&lt;/strong&gt; if you have to use an IDE for work, you can enable vim emulation. This works in visual studio, jetbrains IDEs and probably tons of others. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>vim</category>
      <category>linux</category>
      <category>productivity</category>
      <category>vscode</category>
    </item>
    <item>
      <title>The simple tricks to change your website theme based on day and night</title>
      <author>lakshmanan-arumugam</author>
      <pubDate>Tue, 11 May 2021 18:53:42 +0000</pubDate>
      <link>https://dev.to/lakshmananarumugam/the-simple-tricks-to-change-your-website-theme-based-on-day-and-night-23l0</link>
      <guid>https://dev.to/lakshmananarumugam/the-simple-tricks-to-change-your-website-theme-based-on-day-and-night-23l0</guid>
      <description>&lt;p&gt;Hi everyone, every website have a theme options. so, a website user able to choose their preferred theme like dark, light..etc., This is existing followed approach in everyone website.&lt;/p&gt;

&lt;p&gt;how is it (we show the website theme based on the user day and night). I just tried. if you like it use in your website. give some different experience to your website user.&lt;/p&gt;

&lt;p&gt;Let's jump into the implementation part:&lt;/p&gt;

&lt;p&gt;For now, I take a simple coming soon html template for with dark and light theme.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/explore-free-projects/embed/zYZvewO?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;The above page theme change based on body attribute data-theme: "dark-theme" / "light-theme". &lt;/p&gt;

&lt;p&gt;by default show &lt;code&gt;light-theme&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Now, coming to main point how we change website theme based on day and night.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function setThemePreference() {
  var d = new Date();
  /*
  * The getHours() method returns the hour (from 0 to 23) of the specified date and time.
  * Day = 0 - 11
  * Night = 12 - 23
  */
  var currentHour = d.getHours();

  /*
  * The dark theme load early morning and night
  * The light theme load morning and evening
  */

  if(currentHour &amp;gt;= 19 || currentHour &amp;lt;= 6) {
    document.body.setAttribute("data-theme", "dark_theme") 
  }else {
    document.body.setAttribute("data-theme", "light_theme") 
  }
}

window.onload = setThemePreference;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's all. &lt;/p&gt;

&lt;p&gt;The workable version of the &lt;a href="https://codepen.io/explore-free-projects/pen/zYZvewO"&gt;codepen URL&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>html</category>
      <category>css</category>
    </item>
    <item>
      <title>How to Ace the Behavioural Interview</title>
      <author>Sandra Spanik</author>
      <pubDate>Tue, 11 May 2021 18:42:34 +0000</pubDate>
      <link>https://dev.to/sanspanic/how-to-ace-the-behavioural-interview-15g1</link>
      <guid>https://dev.to/sanspanic/how-to-ace-the-behavioural-interview-15g1</guid>
      <description>&lt;p&gt;As you might have already guessed, this article is not about technical interviews, coding challenges, let alone about (&lt;em&gt;shudders&lt;/em&gt;) algorithms. I'm not qualified to give anyone advice on above, but having transitioned to tech from mental health, I do know a thing or two about human behaviour. By extension, I'm declaring myself qualified to dish out advice on behavioural interviews. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This article is about all aspects of the interview process that are NOT strictly coding-related, and will be particularly useful to those who are transitioning careers to tech from a different industry.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let's go!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-tech-recruitment-process"&gt;
  &lt;/a&gt;
  The Tech Recruitment Process
&lt;/h3&gt;

&lt;p&gt;Typically, interviews in the tech industry have at least 4 rounds, although of course the exact schedule will vary from company to company.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The Application/Recruiter Email&lt;/li&gt;
&lt;li&gt;The Recruiter Screening Call &lt;/li&gt;
&lt;li&gt;The Technical Interview/The Takeaway Coding Challenge&lt;/li&gt;
&lt;li&gt;The Behavioural Interview&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Rounds 1, 2 and 4 all have to do with who you are as a person, as much as they have to do with your skills. There is a 100% likelihood you will have to tell your interviewers about yourself and your background, and unless you come across as someone your interviewers would enjoy working with, no amount of skills will help you land your dream role. It's not easy to get an offer, especially if you're switching careers from a different industry, so being prepared to talk about yourself eloquently might well be what distinguishes you from your competition. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/XtB0qy4kx8jCM/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/XtB0qy4kx8jCM/giphy.gif" alt="https://media.giphy.com/media/XtB0qy4kx8jCM/giphy.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#interviewing-well-is-a-skill"&gt;
  &lt;/a&gt;
  Interviewing Well is a Skill.
&lt;/h3&gt;

&lt;p&gt;The good news is that just like any other skill, it's one you can improve with practice. It certainly took me a lot of practice to sound confident and convincing in interview situations - I'm still not amazing at it. The last in-person interview I went to pre-career-switch to tech ended in tears - not only did I come across as an idiot, I also knocked over a glass of water onto the interviewer sat across me. &lt;/p&gt;

&lt;p&gt;Why was it such a nightmare? Because I hated the sound of the job, and, as a result, was woefully underprepared to talk about myself and my motivation for applying to it. &lt;em&gt;Why did you apply for it, if you hated the sound of it&lt;/em&gt;, I hear you ask? &lt;em&gt;Excellent&lt;/em&gt; &lt;em&gt;question. I had no idea what I was doing with my life&lt;/em&gt;, I hear myself answer. &lt;/p&gt;

&lt;p&gt;This brings me to my first piece of advice, which I'll kick the useful part of this article off with. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-make-sure-you-like-what-youre-applying-to"&gt;
  &lt;/a&gt;
  1. Make Sure You Like What You're Applying To.
&lt;/h3&gt;

&lt;p&gt;If you don't show enthusiasm for the role or find yourself having to fake it, your interviewers will sense this and offer the role to a more motivated candidate. If you hate the way social media has contributed to the polarisation of society, try not to apply for a job at Facebook, unless you believe you can fix it (&lt;em&gt;please... someone fix it. anyone..?&lt;/em&gt; ). If the sound of working for a local start-up that creates a productivity management tool sounds boring beyond belief to you, manage your own productivity better by saving yourself the hassle of an application. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-ten-applications-a-day-keep-the-salary-at-bay"&gt;
  &lt;/a&gt;
  2. Ten Applications A Day Keep the Salary At Bay.
&lt;/h3&gt;

&lt;p&gt;I see a lot of well-intentioned advice encouraging candidates to apply to ten positions a day. In my potentially controversial opinion, this is complete nonsense. In the best case scenario, you'll hear back from numerous companies, which will mean that you're now involved in too many recruitment processes at once. This won't give you enough time to do your due diligence and bring your best self to each interview. In the worst case scenario, you've spread yourself too thin and given each application so little thought that you barely hear back from anyone. I'd recommend you go for quality instead of quantity. One or two applications per day are plenty, especially if you're tailoring your CVs and cover letters uniquely to each position you apply to. And if that's something you're not doing, then you're doing it wrong.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-prepare-answers-to-common-questions-in-advance"&gt;
  &lt;/a&gt;
  3. Prepare Answers to Common Questions in Advance.
&lt;/h3&gt;

&lt;p&gt;The chance of you not hearing the following words from an interviewer at some point during the process is precisely zero : &lt;strong&gt;so, could you please tell us a bit about yourself&lt;/strong&gt;... Knowing this gives you the power to absolutely ace this question. Below is a list of other guaranteed questions you might want to prepare for. The list should be particularly relevant to those who are transitioning careers, i.e. the target audience of this article. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Tell us a bit about yourself.&lt;/li&gt;
&lt;li&gt;What prompted you to start coding? &lt;/li&gt;
&lt;li&gt;What do you particularly like about front-end/back-end/data science/whatever-the-job-is? &lt;/li&gt;
&lt;li&gt;Tell me about a time in your life when you successfully worked as part of a team.&lt;/li&gt;
&lt;li&gt;Tell me about a time in your life when you successfully dealt with a challenging situation. &lt;/li&gt;
&lt;li&gt;What made you apply to this particular position, in our particular company? &lt;/li&gt;
&lt;li&gt;What are your favourite coding-related resources? &lt;/li&gt;
&lt;li&gt;Do you have any questions for us? &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;I can pretty much guarantee that most of above questions, or some permutations thereof, will be asked.&lt;/strong&gt; There is no reason you should have to think about these on the spot and struggle with a coherent reply. Take your time to think about these questions beforehand, and write your answers out. Read them, tweak them for maximum impact, commit them to memory. &lt;/p&gt;

&lt;p&gt;Every interview is slightly different so you will still get ample space to improvise, but &lt;strong&gt;pre-empting as many questions as you can will make you a better candidate&lt;/strong&gt;. This seems like extremely obvious advice, but many still don't follow it - make sure you slot yourself into the category of those who do to capitalise on this opportunity. I'd argue that preparing replies to commonly asked questions is &lt;strong&gt;the one easiest and most impactful step&lt;/strong&gt; any candidate can take to stand out.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-talk-to-yourself-out-loud-seriously"&gt;
  &lt;/a&gt;
  4. Talk to Yourself. Out Loud. Seriously.
&lt;/h3&gt;

&lt;p&gt;When preparing for your interview, don't do it in silence. Practice your replies out loud, and get more familiar with what and how you want to convey your points. &lt;strong&gt;Interviews are by default a performative action, and like every performance, the more you do it, the better you get at it&lt;/strong&gt;. Some even go as far as to advise candidates to record themselves and analyse how they come across - I'd say that's a step too far, but there's nothing wrong with standing in front of a mirror (or a willing other) and rattling your script down until you're happy with your "act". &lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/3o7aD0QILFVJQEOb2E/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/3o7aD0QILFVJQEOb2E/giphy.gif" alt="https://media.giphy.com/media/3o7aD0QILFVJQEOb2E/giphy.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-do-some-detective-work"&gt;
  &lt;/a&gt;
  5. Do Some Detective Work.
&lt;/h3&gt;

&lt;p&gt;In this situation only, being a stalker is a perfectly acceptable way to be. Researching your interview panel is useful for two reasons. Firstly, you might get a better idea of what life at the company you're applying to is like, and what your job might entail. Having this knowledge will help you craft better answers during the interview.  You might even pick up an impressive tidbit of information that you can impress the panel with during your interview. Secondly, you might get a better sense of the type of person the company hires. If you see any red flags here, run. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/3ohc0Rnm6JE0cg0RvG/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/3ohc0Rnm6JE0cg0RvG/giphy.gif" alt="https://media.giphy.com/media/3ohc0Rnm6JE0cg0RvG/giphy.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-leverage-your-nontech-background"&gt;
  &lt;/a&gt;
  6. Leverage Your Non-Tech Background.
&lt;/h3&gt;

&lt;p&gt;No CS degree? No problem! Whatever it is you've been doing with your life, you must have learned a thing or two. The trick is to tailor your story towards the job you want and make your diverse background sound like a benefit, rather than a drawback of hiring you. &lt;/p&gt;

&lt;p&gt;Did you work in hospitality before? You must know how to deal with people and be able to spontaneously improvise solutions to tricky situations really effectively! Were you in customer service? Your communication skills must be off the charts. Were you an athlete or a musician? Wow, I bet you have a tons of discipline and will code us all under the table in a couple of years. Did you spend a couple of years traveling? How resourceful and adaptive that must make you! Are you perhaps a parent? You win by default, you literally created a human being. You must be incredibly organised and excellent at time management to juggle all that AND change your career. &lt;/p&gt;

&lt;p&gt;Soft skills are important in any environment, and software engineering is no exception. Make your background work for you! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/l0ExghDSRxU2g55sc/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/l0ExghDSRxU2g55sc/giphy.gif" alt="https://media.giphy.com/media/l0ExghDSRxU2g55sc/giphy.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-bring-your-whole-self"&gt;
  &lt;/a&gt;
  7. Bring Your Whole Self.
&lt;/h3&gt;

&lt;p&gt;Don't hide your personality - display it proudly! &lt;em&gt;Unless your personality sucks, in which case, definitely hide your personality&lt;/em&gt;. But seriously, your future employers are interested in who you are as a person as much as they are interested in your skills. You won't exist in a vacuum, on the contrary, you will constantly be interacting with others and contributing to a team, so being a person who's easy to get on with will go a long way. &lt;/p&gt;

&lt;p&gt;You don't have to rely on solely professional examples to illustrate who you are - you are way more than just your previous jobs or studies. Feel free to draw on other areas of your life for examples of what makes you uniquely you. For example, I have a thing for acrobatics and enjoy balancing people on my shoulders. During my interview, I used the example of acrobatics to illustrate my approach to teamwork - in acrobatics, communication is just as important as skill and no human pyramid would ever go up would the entire team not be on the same page regarding effective communication. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/SGsdST7lHYafsTQ1j4/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/SGsdST7lHYafsTQ1j4/giphy.gif" alt="https://media.giphy.com/media/SGsdST7lHYafsTQ1j4/giphy.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#8-the-fear-wont-persevere"&gt;
  &lt;/a&gt;
  8. The Fear Won't Persevere.
&lt;/h3&gt;

&lt;p&gt;There is an aspect of interviewing that is unique to the interview itself and cannot be replicated during solo practice in front of a mirror -  I mean the nerve-wracking, anxiety-inducing, "this-is-a-live-situation-and-I-only-have-one-chance" part of it all. I don't know about you, but I'm pretty much shaking before any interview. Even if on the surface I look calm and ready, my knees are weak, my palms are sweaty, there's vomit on my sweater already (mom's spaghetti). &lt;/p&gt;

&lt;p&gt;Jokes aside, some adrenaline is helpful and leads you to think clearer, but too much of it can muddle your thoughts. I've found it helpful to internally reframe The Fear™  as simply Extreme Excitement™. &lt;em&gt;I'm not dreading this and shaking out of fear, I just can't wait to seize this opportunity, that's all!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This, too, is a practicable skill. Even if you tend to get very unsettled by interviews at the moment, it doesn't mean you always will. The more interview processes you go through, the more practice you get with regulating your interview feelings, meaning you will interview better in the future. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/xT0xey2FaDj3GQmFs4/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/xT0xey2FaDj3GQmFs4/giphy.gif" alt="https://media.giphy.com/media/xT0xey2FaDj3GQmFs4/giphy.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#9-normalise-rejection"&gt;
  &lt;/a&gt;
  9. Normalise Rejection.
&lt;/h3&gt;

&lt;p&gt;If you get rejected, you're just one interview closer to the interview that will result in a job offer. I know, this is easier said than done. But try to bear in mind that you're not alone. The struggle is real for all of us. Rejection is tough, but completely normal - just another day at the office, even for experienced developers. But equally importantly, don't beat yourself up over feeling down. We all have different emotional spans, and being someone who takes rejection to heart more significantly than others does not make you a worse (or better) candidate. Your feelings are valid, so accept them and let yourself experience them fully, prior to moving on. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/12EFa8Vc5kVlOU/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/12EFa8Vc5kVlOU/giphy.gif" alt="https://media.giphy.com/media/12EFa8Vc5kVlOU/giphy.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#10-always-ask-for-feedback"&gt;
  &lt;/a&gt;
  10. Always Ask For Feedback.
&lt;/h3&gt;

&lt;p&gt;If you've spent weeks of your life interviewing for a company and made it all the way through to the behavioural interview, the least the company can do after deciding to offer the job to someone else is provide you with useful feedback. &lt;strong&gt;If they don't do this, it means you likely dodged a bullet anyways&lt;/strong&gt;. Frequently, the feedback you will receive will be useful and inform your next attempt. Other times, the feedback will be that you were &lt;strong&gt;this&lt;/strong&gt; close to getting an offer, but someone else with the slightest bit of more directly relevant experience was in the end deemed a better choice. Whilst this type of feedback is not super useful, it should hopefully serve to raise your spirits and reassure you that you're very, very close. Either way, asking for feedback can only result in positive outcomes. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/3otPoScZw3enH8ZGKY/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/3otPoScZw3enH8ZGKY/giphy.gif" alt="https://media.giphy.com/media/3otPoScZw3enH8ZGKY/giphy.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#11-dont-lie"&gt;
  &lt;/a&gt;
  11. Don't Lie.
&lt;/h3&gt;

&lt;p&gt;Last but not least, be honest - with yourself and with your interviewers. Instead of pretending you are really into animations, when in reality you've barely ever encountered an SVG before, is unnecessary. At best, you might get offered the job and realise you've sold yourself as an expert when in reality you have no idea what you're doing, in which case you'll be found out immediately. At worst, faking expertise might lead to you coming across as cocky and never getting offered the job in the first place. &lt;/p&gt;

&lt;p&gt;Nobody, I repeat, NOBODY, is an expert at everything. Senior devs get better at knowing exactly what it is they don't know, which makes it easier to ask the right questions and seek out answers in the right places. But even seniors would be lying if they claimed they're the absolute bee's knees at every single topic. If you're only just starting your tech career, it's much wiser to openly admit your technical gaps and frame them as areas of growth you are aware of and excited to explore.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/Q9kgQp6ptfcLS/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/Q9kgQp6ptfcLS/giphy.gif" alt="https://media.giphy.com/media/Q9kgQp6ptfcLS/giphy.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#still-with-me"&gt;
  &lt;/a&gt;
  Still with me?
&lt;/h3&gt;

&lt;p&gt;Wow, you must really want that job. Now go get it! Let me know if you found this article useful in the comments, and feel free to connect with me on &lt;a href="https://twitter.com/sansPanicDev"&gt;Twitter&lt;/a&gt; or &lt;a href="https://www.linkedin.com/in/sandra-spanikova-6738aa1b7/"&gt;LinkedIn&lt;/a&gt;. &lt;/p&gt;

</description>
      <category>career</category>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>motivation</category>
    </item>
    <item>
      <title>What Are Type Declaration Files In TypeScript?</title>
      <author>Max Kovalevsky</author>
      <pubDate>Tue, 11 May 2021 18:22:28 +0000</pubDate>
      <link>https://dev.to/mxkvl/what-are-type-declaration-files-in-typescript-53dd</link>
      <guid>https://dev.to/mxkvl/what-are-type-declaration-files-in-typescript-53dd</guid>
      <description>&lt;p&gt;You probably have seen files with a file extension like &lt;em&gt;.d.ts&lt;/em&gt; in some JavaScript or TypeScript projects (libraries or frameworks) before and you wondered what are these files and what they are for. In TypeScript they are called Type Declaration files. Let's find out what is that practically.&lt;/p&gt;

&lt;p&gt;Let's create a simple example with TypeScript code. Create a folder with the name &lt;strong&gt;typescript-type-defs&lt;/strong&gt; or whatever name you want and then let's create a file called &lt;strong&gt;users-list.ts&lt;/strong&gt; there with code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;johnsmith11&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;55&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;level&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;C3PO&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;iamnotrobot&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;112&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;level&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;NAME_FIELD_KEY&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;keyof&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;level&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getEntityField&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Entity&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;entities&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Entity&lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt;
  &lt;span class="nx"&gt;fieldName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;keyof&lt;/span&gt; &lt;span class="nx"&gt;Entity&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;unknown&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;entities&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;fieldName&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getUsersName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;[]):&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;getEntityField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;NAME_FIELD_KEY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getUsersName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What if need to use Interface User somewhere else? Not a problem, just add &lt;code&gt;export&lt;/code&gt; before interface:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;level&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can import this interface from module &lt;strong&gt;users-list&lt;/strong&gt; in another module. However, sometimes we need to use this interface as a common thing between several modules. So, &lt;em&gt;exporting&lt;/em&gt; interface from one of these modules is not an option. We need to create a special file where we can specify Interface User and use it in modules.&lt;/p&gt;

&lt;p&gt;Create a file with name &lt;strong&gt;typings.d.ts&lt;/strong&gt; and moved interface User from file &lt;strong&gt;users-list.ts&lt;/strong&gt; into this new file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;level&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we need to use this interface in module &lt;strong&gt;users-list&lt;/strong&gt;. You can just import this interface from &lt;strong&gt;typings.d.ts&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./typings&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// ...&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;NAME_FIELD_KEY&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;keyof&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// ...&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getUsersName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;[]):&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;getEntityField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;NAME_FIELD_KEY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's look at file &lt;strong&gt;typings.d.ts&lt;/strong&gt; more. In this file, you cannot write variables, functions, and other code of TypeScript/JavaScript. All you can write there is types or interfaces. You can only define types there and use them in any modules.&lt;/p&gt;

&lt;p&gt;Usually, you don't write types in &lt;strong&gt;.d.ts&lt;/strong&gt; but in &lt;strong&gt;.ts&lt;/strong&gt; files. However, &lt;strong&gt;.d.ts&lt;/strong&gt; files are used in projects that are packages or libraries and are originally written in JavaScript. If you have JavaScript library and you have to add an ability to use your library in TypeScript projects, so you need to create &lt;strong&gt;.d.ts&lt;/strong&gt; files. Another case is when you write your library in TypeScript but you ship it in compiled JavaScript code. In that case, you can automatically generate Type Declarations based on your TypeScript source code by using the TypeScript compiler (tsc).&lt;/p&gt;

&lt;p&gt;Here is an example based on &lt;strong&gt;users-list.ts&lt;/strong&gt;. Let's use &lt;strong&gt;tsc&lt;/strong&gt; to generate Type Declaration file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tsc users-list.ts --declaration
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that you will see a new file called &lt;strong&gt;users-list.d.ts&lt;/strong&gt; with the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./typings&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;declare&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;NAME_FIELD_KEY&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;keyof&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;declare&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getEntityField&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Entity&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;entities&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Entity&lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="nx"&gt;fieldName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;keyof&lt;/span&gt; &lt;span class="nx"&gt;Entity&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;unknown&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;declare&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getUsersName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;[]):&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So with that Type Declaration file, you provide an ability to work with your library's API and types to someone who uses your library in their project.&lt;/p&gt;

&lt;p&gt;There is a huge repository that contains type definitions for many libraries and packages - &lt;a href="https://github.com/DefinitelyTyped/DefinitelyTyped"&gt;DefinitelyTyped&lt;/a&gt;. You probably have installed &lt;a href="https://mxkvl.com/notes/npm"&gt;npm&lt;/a&gt; packages with names like "@types/*". The code of some of these packages is in this repository.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Do you like the material? Please, &lt;a href="https://mxkvl.com/subscribe"&gt;subscribe to my email newsletter&lt;/a&gt; to stay up to date.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mxkvl.com/subscribe"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gaF5Qnnu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ol1shv2p94zykrc776dv.png" alt="subscribe"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
    </item>
  </channel>
</rss>
