<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Abstracting with react hooks on LSD</title>
      <author>Pathetic Geek</author>
      <pubDate>Sat, 17 Jul 2021 15:47:05 +0000</pubDate>
      <link>https://dev.to/patheticgeek/abstracting-with-react-hooks-on-lsd-15p</link>
      <guid>https://dev.to/patheticgeek/abstracting-with-react-hooks-on-lsd-15p</guid>
      <description>&lt;h1&gt;
  &lt;a href="#3-the-final-one-raw-usebussinesslogic-endraw-hook"&gt;
  &lt;/a&gt;
  3. The final one, &lt;code&gt;useBussinessLogic&lt;/code&gt; hook
&lt;/h1&gt;

&lt;p&gt;Hooks are free of cost. i.e., you can make them really easily, and the only cost there is, is the cost of abstraction.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#31-a-basic-raw-usetodos-endraw-hook"&gt;
  &lt;/a&gt;
  3.1 A basic &lt;code&gt;useTodos&lt;/code&gt; hook
&lt;/h2&gt;

&lt;p&gt;Now our components, they don't always just interact with the local state, most times they will be interacting with state on the server and managing async operations. And that's where the lines get blurry. So how about we put our hands in the magic pocket and try seeing if we have something that will help us?&lt;/p&gt;

&lt;p&gt;Let's take an example of a basic to-do app, you'd be having a list of to-dos calling the APIs for getting it all that fun stuff, so let's extract it in a hook.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useTodos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;todos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useTodosStore&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setIsLoading&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetchTodos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setIsLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;todos&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/api/todos&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nx"&gt;setTodos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nx"&gt;setIsLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;fetchTodos&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;fetchTodos&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;fetchTodos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we need to change something, we can just change this small function, and it works everywhere as long as it returns the same object. Now we can just use this with one line of code wherever we want.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useTodos&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;// other stuff&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#32-mutating-todos"&gt;
  &lt;/a&gt;
  3.2 Mutating to-dos
&lt;/h2&gt;

&lt;p&gt;Now, let's say we want to toggle the state of a to-do. What do we do? We just put or hands in the custom hooks doremon pocket and bring out &lt;code&gt;useToggleTodo&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useToggleTodos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setIsLoading&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toggleTodo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;todoId&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setIsLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`/api/todos/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;todoId&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/toggle`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nx"&gt;setIsLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nx"&gt;setIsLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;toggleTodo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;}]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But wait, we also need to update things in our store and oh, what about having multiple useTodos. Do we have a global store or are all instances updated separately? What about race condition? And caching?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#33-doing-it-all-right"&gt;
  &lt;/a&gt;
  3.3 Doing it all right
&lt;/h2&gt;

&lt;p&gt;Remember, our custom hooks can use other hooks too, so let's bring in &lt;a href="https://react-query.tanstack.com/guides/queries"&gt;useQuery&lt;/a&gt; from &lt;a href="https://www.npmjs.com/package/react-query"&gt;react-query&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-query&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetchTodos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/api/todos&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useTodos&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;todos&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fetchTodos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And in our &lt;code&gt;useToggleTodo&lt;/code&gt; we can use the &lt;a href="https://react-query.tanstack.com/guides/mutations"&gt;useMutation&lt;/a&gt; from &lt;code&gt;react-query&lt;/code&gt; so that our to-dos query is re-fetched whenever we toggle a to-do&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useMutation&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-query&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getToggleTodoById&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;todoId&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`/api/todos/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;todoId&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/toggle`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useToggleTodo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;useMutation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;getToggleTodoById&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;refetchQueries&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;todos&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Look how we moved to using vanilla axios to &lt;code&gt;react-query&lt;/code&gt; in seconds and didn't have to change more than a couple of lines. And now we have these nice hooks for our components to hooks into.&lt;/p&gt;

&lt;p&gt;And my friends, that how we use hooks and manage like a pro (or from what all I know at least). Now you can go show off your new shiny gadgets to your friends &lt;em&gt;if you have any&lt;/em&gt;.&lt;/p&gt;

</description>
      <category>react</category>
      <category>bussinesslogic</category>
      <category>abstraction</category>
      <category>hooks</category>
    </item>
    <item>
      <title>React state management on crack</title>
      <author>Pathetic Geek</author>
      <pubDate>Sat, 17 Jul 2021 15:46:57 +0000</pubDate>
      <link>https://dev.to/patheticgeek/react-state-management-on-crack-55m8</link>
      <guid>https://dev.to/patheticgeek/react-state-management-on-crack-55m8</guid>
      <description>&lt;p&gt;Every application needs some kind of state management. Let's start with the most basic one, and we will see how things change with scale.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#21-creating-a-basic-global-store"&gt;
  &lt;/a&gt;
  2.1 Creating a basic global store
&lt;/h2&gt;

&lt;p&gt;The idea here is to have a &lt;code&gt;useState&lt;/code&gt; that will store our state and update it, and then we will use &lt;a href="https://reactjs.org/docs/context.html"&gt;react context&lt;/a&gt; to pass it down to components.&lt;/p&gt;

&lt;p&gt;So now we will create a new context named &lt;code&gt;StoreContext&lt;/code&gt; and in its value the first item will be the store itself and the second item will be setStore so that we can update it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;StoreContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;StoreProvider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setStore&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;contextValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setStore&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;StoreContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;contextValue&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;StoreContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useStore&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;StoreContext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;StoreContext&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#22-some-things-dont-seem-right"&gt;
  &lt;/a&gt;
  2.2 Some things don't seem right
&lt;/h2&gt;

&lt;p&gt;There's only so much growing your store can do with &lt;code&gt;useState&lt;/code&gt; and at one point it will become a PIA to update your store using setStore. So let's add a &lt;code&gt;useReducer&lt;/code&gt; in here and now our code looks something like,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useReducer&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;StoreContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;StoreProvider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reducer&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reducer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;contextValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;StoreContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;contextValue&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;StoreContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useStore&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;StoreContext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;StoreContext&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The problem with context is whenever it changes the whole tree under it re-renders, and that can be a huge performance issue. So even if we are just dispatching an action, our component will re-render. Now to fix that, let's create a different context for storing the dispatch function, and we will use it with a &lt;code&gt;useDispatch&lt;/code&gt; hook.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useReducer&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;StoreContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;DispatchContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;StoreProvider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reducer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reducer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;DispatchContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;StoreContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;StoreContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;DispatchContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useStore&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;StoreContext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useDispatch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;DispatchContext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;StoreContext&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And how we use this is by wrapping our &lt;code&gt;App&lt;/code&gt; first in &lt;code&gt;DispatchContext&lt;/code&gt; and then &lt;code&gt;StoreContext&lt;/code&gt; and then in our component&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useDispatch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useStore&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@state/context-reducer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Example&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useDispatch&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useStore&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"my-3"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;increment&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                Dispatch
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Example&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#23-one-step-further"&gt;
  &lt;/a&gt;
  2.3 One step further
&lt;/h2&gt;

&lt;p&gt;So, &lt;em&gt;only one global state?&lt;/em&gt; You might be wondering.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rolls up my sleeves&lt;/strong&gt; And here is where generator function comes in. Basically, we can make a function &lt;code&gt;makeStore&lt;/code&gt; that takes in the reducer and initialState, and gives us a provider, a useStore and a useDispatch, so that we can easily make multiple stores.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useReducer&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;makeStore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reducer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;StoreContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;DispatchContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;StoreProvider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reducer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;DispatchContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;StoreContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;StoreContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;DispatchContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useStore&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;StoreContext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useDispatch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;DispatchContext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;StoreProvider&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useStore&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useDispatch&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now we can make as many stores as we want!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;LayoutStore&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useLayout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useLayoutDispatch&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;makeStore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;layoutReducer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;menuOpen&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;TodoStore&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useTodo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useTodoDispatch&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;makeStore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todosReducer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#24-and-now-the-cherry-on-top"&gt;
  &lt;/a&gt;
  2.4 And now the cherry on top
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;But what about persistence?&lt;/em&gt; You ask.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;What about it?&lt;/em&gt; I say and just add a few lines of code in our &lt;code&gt;makeStore&lt;/code&gt; function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;makeStore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reducer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;StoreContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;DispatchContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;finalInitialState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;finalInitialState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;finalReducer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;reducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;saveItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newState&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;newState&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// And now we use finalInitialState and finalReducer&lt;/span&gt;
    &lt;span class="c1"&gt;// instead of reducer and initialState&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And this will give us persistence in all stores we make.&lt;/p&gt;

&lt;p&gt;Hold on, isn't this all client side? Yes it is. So in the next part, let's see how we can connect our app to the server state and have it play well.&lt;/p&gt;

</description>
      <category>react</category>
      <category>state</category>
      <category>crack</category>
      <category>context</category>
    </item>
    <item>
      <title>React hooks on steroids</title>
      <author>Pathetic Geek</author>
      <pubDate>Sat, 17 Jul 2021 15:46:47 +0000</pubDate>
      <link>https://dev.to/patheticgeek/react-hooks-on-steroids-48l3</link>
      <guid>https://dev.to/patheticgeek/react-hooks-on-steroids-48l3</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;This isn't going to be just another hooks and context tutorial, this is going to be me writing about how to do react hooks and state management like a pro. And, it can be a little too much to digest, so grab your favourite snack and jump in.&lt;br&gt;
This will be a series of three posts which will take your react hook and state skills as high as I am while writing this. If you prefer to read it in long form &lt;a href="https://www.notion.so/patheticgeek/React-hooks-and-state-management-on-weed-f3135a6a0c2041b7adc9f8559c138439#c625c4cd792f47bfadd655ba3bda1f0c"&gt;here's the link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hold on, if you don't know &lt;a href="https://reactjs.org/docs/hooks-overview.html"&gt;the basics of react hooks&lt;/a&gt; and &lt;a href="https://reactjs.org/docs/context.html"&gt;react context API&lt;/a&gt;, I highly recommend learning about them first.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#1-setting-the-stage-with-hooks"&gt;
  &lt;/a&gt;
  1. Setting the stage with hooks
&lt;/h1&gt;

&lt;p&gt;So, we've been using react's new functional components and hooks for a while now, but how many of you have realized the actual power of hooks?&lt;/p&gt;

&lt;p&gt;First, we will look at some places where a custom hook might be good and how we implement one.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#11-a-basic-raw-usedarkmode-endraw-hook"&gt;
  &lt;/a&gt;
  1.1 A basic &lt;code&gt;useDarkMode&lt;/code&gt; hook
&lt;/h2&gt;

&lt;p&gt;So we're coders we love dark themes, but not everyone does, so we need to have some theme state in our app.&lt;br&gt;
We will use the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia"&gt;window.matchMedia&lt;/a&gt; to match a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries"&gt;CSS media query&lt;/a&gt; which is &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-color-scheme"&gt;prefers-color-scheme: dark&lt;/a&gt;. This will tell us if the user's system theme is dark or not, and this will be our initial state.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;matchDark&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;(prefers-color-scheme: dark)&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useDarkMode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isDark&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setIsDark&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;browser&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;matchMedia&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;matchMedia&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;matchDark&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;matches&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;isDark&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;useDarkMode&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#12-making-raw-usedarkmode-endraw-actually-useful"&gt;
  &lt;/a&gt;
  1.2 Making &lt;code&gt;useDarkMode&lt;/code&gt; actually useful
&lt;/h2&gt;

&lt;p&gt;Now some people man… they just can't decide if they want light or dark theme, so they put it on auto. And now, we have to account for THAT in our applications.&lt;br&gt;
How we do that is, we can attach a listener to &lt;code&gt;window.matchMedia&lt;/code&gt; and listen for when it changes.&lt;br&gt;
Now to do that in code…&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;matchDark&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;(prefers-color-scheme: dark)&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useDarkMode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isDark&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setIsDark&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;browser&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;matchMedia&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;matchMedia&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;matchDark&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;matches&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;matcher&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;matchMedia&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;matchDark&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;matches&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;MediaQueryListEvent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setIsDark&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;matcher&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;matcher&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;setIsDark&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;isDark&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;useDarkMode&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now how will be using this hook will look something like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;useDarkMode&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@hooks/useDarkMode&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useDarkMode&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;themes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dark&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;themes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;light&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ThemeProvider&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            ...
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;ThemeProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now pat yourself on the back! You've made a useful custom hook.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#13-the-hook-most-needed-raw-useinview-endraw-"&gt;
  &lt;/a&gt;
  1.3 The hook most needed &lt;code&gt;useInView&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;One more common thing we often need is some way to detect if an element is in view or not. Here, most of us would find ourselves reaching for a library to do this but this is way simpler than it seems.&lt;/p&gt;

&lt;p&gt;How to do this is simple:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We listen for scroll on window&lt;/li&gt;
&lt;li&gt;We get the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect"&gt;bounding client rect&lt;/a&gt; of our element to get it's offset from top&lt;/li&gt;
&lt;li&gt;We check if (offset of element from top + height of element) is &amp;gt; 0 and if the offset from top of element is &amp;lt; window's height, if both are true then our element is visible.&lt;/li&gt;
&lt;li&gt;If state is not correct then we set the state and call the onChange function if present.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useInView&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;elRef&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;MutableRefObject&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;HTMLElement&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_inView&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;inView&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setInView&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onScroll&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;elRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;

      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;boundingRect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;elRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getBoundingClientRect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;elementHeight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;elRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;offsetHeight&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;offsetTop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;boundingRect&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;top&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;windowHeight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHeight&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isVisible&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
        &lt;span class="nx"&gt;offsetTop&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;elementHeight&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;offsetTop&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;windowHeight&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isVisible&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;inView&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setInView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isVisible&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;onChange&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isVisible&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isVisible&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;inView&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setInView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isVisible&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;onChange&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isVisible&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;scroll&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onScroll&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;scroll&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onScroll&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;elRef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;inView&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;inView&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using this hook is as simple as creating it&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;useInView&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@hooks/useInView&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Hooks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;elementRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;HTMLDivElement&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;// use as a variable&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;inView&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useInView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;elementRef&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;// or use a callback&lt;/span&gt;
    &lt;span class="nx"&gt;useInView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;elementRef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isInView&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isInView&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;element has appeared&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;element has disappeared&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"w-full max-w-screen-md"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"h-screen"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;
        &lt;span class="na"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;elementRef&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`py-6 text-center &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;
          &lt;span class="nx"&gt;inView&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bg-blue-100&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bg-red-100&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        Is in view: &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;inView&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;true&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;false&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"h-screen"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Hooks&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now you can probably imagine all the places hooks can be useful. In the next part, we'll look at how to manage state in react apps without losing your sanity.&lt;/p&gt;

</description>
      <category>react</category>
      <category>hooks</category>
      <category>weed</category>
      <category>state</category>
    </item>
    <item>
      <title>Характеристики качества требований</title>
      <author>Nataliia Chausova</author>
      <pubDate>Sat, 17 Jul 2021 15:10:15 +0000</pubDate>
      <link>https://dev.to/the_ba_girl/-1mgd</link>
      <guid>https://dev.to/the_ba_girl/-1mgd</guid>
      <description>&lt;p&gt;Что делает требования хорошими? BABOK 3.0 предоставляет девять характеристик качества требований к ПО, можно использовать их, как чеклист при написании или тестировании требований:&lt;/p&gt;

&lt;p&gt;Атомарность&lt;br&gt;
Полнота&lt;br&gt;
Краткость&lt;br&gt;
Консистентность&lt;br&gt;
Выполнимость&lt;br&gt;
Приоритизированность&lt;br&gt;
Тестируемость&lt;br&gt;
Недвусмысленность&lt;br&gt;
Понятность&lt;br&gt;
Давайте рассмотрим некоторые критерии качества подробнее, а также определим, как приблизиться к идеалу.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Атомарность&lt;/strong&gt;&lt;br&gt;
Атомарное требование - это такое требование, которое нельзя разбить на более детальные требования (которые при этом не потеряют завершенности - то есть, требование, что юзер может залогиниться, введя имейл и пароль, нельзя разбить на 3 юзер стори (пользовательские истории): про поле для имейла, поле для пароля и кнопку входа).&lt;/p&gt;

&lt;p&gt;Почему важно, чтобы требования к системе были атомарными? Чтобы:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;правильно приоритизировать (сложно приоритизировать юзер стори, которая включает в себя создание, редактирование и удаление поста. Но если разбить ее на 3, становится уже намного легче - из этого набора в МВП явно может входить не всё);&lt;/li&gt;
&lt;li&gt;трассировать (например, ставя зависимость от очень большого требования, в будущем возникает путаница - от какой именно части зависимость?);&lt;/li&gt;
&lt;li&gt;легче разрабатывать (меньше возможностей напутать/пропустить что-то, когда требование небольшое и простое);
требование быстрее попадет в тестирование - да, это очень важно, QA меня поймут.
&lt;a href="https://www.thebagirl.com/kharaktieristiki-kachiestva-triebovanii/"&gt;продолжить чтение на сайте&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
    <item>
      <title>Query +100k records inside whereIn() — Laravel</title>
      <author>Bertug Korucu</author>
      <pubDate>Sat, 17 Jul 2021 14:37:57 +0000</pubDate>
      <link>https://dev.to/kodeas/query-100k-records-inside-wherein-laravel-50n3</link>
      <guid>https://dev.to/kodeas/query-100k-records-inside-wherein-laravel-50n3</guid>
      <description>&lt;p&gt;If you are tinkering with a big data (say are trying to export a huge CSV), you may end up needing to query +100k ids in a  &lt;code&gt;whereIn()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And if you try it to use +100k ids in a  &lt;code&gt;whereIn()&lt;/code&gt;, you’ll see a MySQL error “&lt;a href="https://stackoverflow.com/questions/18100782/import-of-50k-records-in-mysql-gives-general-error-1390-prepared-statement-con"&gt;General error: 1390 Prepared statement contains too many placeholders&lt;/a&gt;”&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$my100kIds = [1,2,3,4,5, ...];
Transaction::whereIn('id', $my100kIds)-&amp;gt;get();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is because  you can use 65,536 placeholders at a time in MySQL.&lt;/p&gt;

&lt;p&gt;Well, you are not the only one facing this problem! Good news is, here is a way to overcome that problem.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-quick-and-dirty-way"&gt;
  &lt;/a&gt;
  The Quick and Dirty Way
&lt;/h2&gt;

&lt;p&gt;I’ll call this the bad because I personally don’t like changing MySQL configs in the runtime, but it works.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$my100kIds = [1,2,3,4,5, ...];

config([  
    'database.connections.mysql.options' =&amp;gt; [   
        \PDO::ATTR_EMULATE_PREPARES =&amp;gt; _true_ 
     ]
]);

\Illuminate\Support\Facades\DB::reconnect();
$result = Transaction::whereIn('id', $my100kIds)-&amp;gt;get();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I’m pretty sure you too feel like: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--olYhxutV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jhh8d09r5wuotcjs3rxv.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--olYhxutV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jhh8d09r5wuotcjs3rxv.jpeg" alt="DuckTape"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#the-elegant-way"&gt;
  &lt;/a&gt;
  The Elegant Way
&lt;/h2&gt;

&lt;p&gt;Now let’s see the good way of achieving this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$transactionIds = Transaction::pluck('id'); // +100k transaction ids

$maxAtOneTime = 5000;
$total = count($transactionIds);
$pages = ceil($total / $maxAtOneTime);

$transactions = collect();

for ($i = 1; $i &amp;lt; ($pages + 1); $i++) {
    $offset = (($i - 1) * $maxAtOneTime);

    $start = ($offset == 0 ? 0 : ($offset + 1));

    $data = Transaction::query()
        -&amp;gt;whereIn('id', $transactionIds)
        -&amp;gt;skip($start)
        -&amp;gt;take($maxAtOneTime)
        -&amp;gt;get();

     $transactions = $transactions-&amp;gt;merge($data);
}

// Now $transactions has all you need!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you like this post, please leave a 👍, and if you want to see more of my posts, make sure you click “Follow” 😊&lt;/p&gt;

&lt;p&gt;See ya!&lt;/p&gt;

</description>
      <category>laravel</category>
      <category>mysql</category>
      <category>php</category>
    </item>
    <item>
      <title>tmux splitting panes</title>
      <author>Waylon Walker</author>
      <pubDate>Sat, 17 Jul 2021 14:20:30 +0000</pubDate>
      <link>https://dev.to/waylonwalker/tmux-splitting-panes-2n85</link>
      <guid>https://dev.to/waylonwalker/tmux-splitting-panes-2n85</guid>
      <description>&lt;p&gt;splitting panes is a core feature of tmux.  It allows us to split the terminal&lt;br&gt;
vertically or horizontally into new panes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;bind&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; M-s split-window &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="s1"&gt;'#{pane_current_path}'&lt;/span&gt;
&lt;span class="nb"&gt;bind&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; M-v split-window &lt;span class="nt"&gt;-h&lt;/span&gt; &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="s1"&gt;'#{pane_current_path}'&lt;/span&gt;
&lt;span class="nb"&gt;bind&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; M-X kill-pane
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;🗒️ note that  '#{pane_current_path}'will keep the split in the same directory&lt;br&gt;
as it's parent, without this it will default to your home directory.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>techtalks</category>
      <category>tmux</category>
      <category>linux</category>
    </item>
    <item>
      <title>Python Cheatsheet</title>
      <author>Envoy-VC</author>
      <pubDate>Sat, 17 Jul 2021 13:46:02 +0000</pubDate>
      <link>https://dev.to/envoy_/python-cheatsheet-33ec</link>
      <guid>https://dev.to/envoy_/python-cheatsheet-33ec</guid>
      <description>&lt;p&gt;Join My Discord To download This Cheatsheet as PDF &lt;a href="https://discord.link/envoy"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#python-cheatsheet"&gt;
  &lt;/a&gt;
  Python Cheatsheet
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="#about"&gt;About&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#python-basics"&gt;Python Basics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#math-operators"&gt;Math Operators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#data-types"&gt;Data Types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#string-concatenation-and-replication"&gt;String Concatenation and Replication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#variables"&gt;Variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#comments"&gt;Comments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-print-function"&gt;The print() Function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-input-function"&gt;The input() Function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-len-function"&gt;The len() Function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-str-int-and-float-functions"&gt;The str(), int(), and float() Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#flow-control"&gt;Flow Control&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#comparison-operators"&gt;Comparison Operators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#boolean-evaluation"&gt;Boolean evaluation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#boolean-operators"&gt;Boolean Operators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#mixing-boolean-and-comparison-operators"&gt;Mixing Boolean and Comparison Operators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#if-statements"&gt;if Statements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#else-statements"&gt;else Statements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#elif-statements"&gt;elif Statements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#while-loop-statements"&gt;while Loop Statements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#break-statements"&gt;break Statements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#continue-statements"&gt;continue Statements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#for-loops-and-the-range-function"&gt;for Loops and the range() Function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#for-else-statement"&gt;For else statement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#importing-modules"&gt;Importing Modules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ending-a-program-early-with-sysexit"&gt;Ending a Program Early with sys.exit()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#functions"&gt;Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#return-values-and-return-statements"&gt;Return Values and return Statements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-none-value"&gt;The None Value&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#keyword-arguments-and-print"&gt;Keyword Arguments and print()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#local-and-global-scope"&gt;Local and Global Scope&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-global-statement"&gt;The global Statement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#exception-handling"&gt;Exception Handling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#basic-exception-handling"&gt;Basic exception handling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#final-code-in-exception-handling"&gt;Final code in exception handling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#lists"&gt;Lists&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#getting-individual-values-in-a-list-with-indexes"&gt;Getting Individual Values in a List with Indexes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#negative-indexes"&gt;Negative Indexes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#getting-sublists-with-slices"&gt;Getting Sublists with Slices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#getting-a-lists-length-with-len"&gt;Getting a List’s Length with len()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#changing-values-in-a-list-with-indexes"&gt;Changing Values in a List with Indexes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#list-concatenation-and-list-replication"&gt;List Concatenation and List Replication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#removing-values-from-lists-with-del-statements"&gt;Removing Values from Lists with del Statements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#using-for-loops-with-lists"&gt;Using for Loops with Lists&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#looping-through-multiple-lists-with-zip"&gt;Looping Through Multiple Lists with zip()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-in-and-not-in-operators"&gt;The in and not in Operators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-multiple-assignment-trick"&gt;The Multiple Assignment Trick&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#augmented-assignment-operators"&gt;Augmented Assignment Operators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#finding-a-value-in-a-list-with-the-index-method"&gt;Finding a Value in a List with the index() Method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#adding-values-to-lists-with-the-append-and-insert-methods"&gt;Adding Values to Lists with the append() and insert() Methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#removing-values-from-lists-with-remove"&gt;Removing Values from Lists with remove()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#removing-values-from-lists-with-pop"&gt;Removing Values from Lists with pop()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sorting-the-values-in-a-list-with-the-sort-method"&gt;Sorting the Values in a List with the sort() Method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tuple-data-type"&gt;Tuple Data Type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#converting-types-with-the-list-and-tuple-functions"&gt;Converting Types with the list() and tuple() Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dictionaries-and-structuring-data"&gt;Dictionaries and Structuring Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-keys-values-and-items-methods"&gt;The keys(), values(), and items() Methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#checking-whether-a-key-or-value-exists-in-a-dictionary"&gt;Checking Whether a Key or Value Exists in a Dictionary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-get-method"&gt;The get() Method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-setdefault-method"&gt;The setdefault() Method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pretty-printing"&gt;Pretty Printing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#merge-two-dictionaries"&gt;Merge two dictionaries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sets"&gt;sets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#initializing-a-set"&gt;Initializing a set&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sets-unordered-collections-of-unique-elements"&gt;sets: unordered collections of unique elements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#set-add-and-update"&gt;set add() and update()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#set-remove-and-discard"&gt;set remove() and discard()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#set-union"&gt;set union()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#set-intersection"&gt;set intersection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#set-difference"&gt;set difference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#set-symetric_difference"&gt;set symetric_difference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#itertools-module"&gt;itertools Module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#accumulate"&gt;accumulate()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#combinations"&gt;combinations()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#combinations_with_replacement"&gt;combinations_with_replacement()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#count"&gt;count()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cycle"&gt;cycle()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#chain"&gt;chain()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#compress"&gt;compress()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dropwhile"&gt;dropwhile()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#filterfalse"&gt;filterfalse()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#groupby"&gt;groupby()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#islice"&gt;islice()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#permutations"&gt;permutations()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#product"&gt;product()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#repeat"&gt;repeat()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#starmap"&gt;starmap()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#takewhile"&gt;takewhile()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tee"&gt;tee()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#zip_longest"&gt;zip_longest()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#comprehensions"&gt;Comprehensions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#list-comprehension"&gt;List comprehension&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#set-comprehension"&gt;Set comprehension&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dict-comprehension"&gt;Dict comprehension&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#manipulating-strings"&gt;Manipulating Strings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#escape-characters"&gt;Escape Characters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#raw-strings"&gt;Raw Strings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#multiline-strings-with-triple-quotes"&gt;Multiline Strings with Triple Quotes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#indexing-and-slicing-strings"&gt;Indexing and Slicing Strings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-in-and-not-in-operators-with-strings"&gt;The in and not in Operators with Strings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-in-and-not-in-operators-with-list"&gt;The in and not in Operators with list&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-upper-lower-isupper-and-islower-string-methods"&gt;The upper(), lower(), isupper(), and islower() String Methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-isx-string-methods"&gt;The isX String Methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-startswith-and-endswith-string-methods"&gt;The startswith() and endswith() String Methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-join-and-split-string-methods"&gt;The join() and split() String Methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#justifying-text-with-rjust-ljust-and-center"&gt;Justifying Text with rjust(), ljust(), and center()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#removing-whitespace-with-strip-rstrip-and-lstrip"&gt;Removing Whitespace with strip(), rstrip(), and lstrip()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#copying-and-pasting-strings-with-the-pyperclip-module-need-pip-install"&gt;Copying and Pasting Strings with the pyperclip Module (need pip install)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#string-formatting"&gt;String Formatting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-operator"&gt;% operator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#string-formatting-strformat"&gt;String Formatting (str.format)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#lazy-string-formatting"&gt;Lazy string formatting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#formatted-string-literals-or-f-strings-python-36"&gt;Formatted String Literals or f-strings (Python 3.6+)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#template-strings"&gt;Template Strings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#regular-expressions"&gt;Regular Expressions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#matching-regex-objects"&gt;Matching Regex Objects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#grouping-with-parentheses"&gt;Grouping with Parentheses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#matching-multiple-groups-with-the-pipe"&gt;Matching Multiple Groups with the Pipe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#optional-matching-with-the-question-mark"&gt;Optional Matching with the Question Mark&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#matching-zero-or-more-with-the-star"&gt;Matching Zero or More with the Star&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#matching-one-or-more-with-the-plus"&gt;Matching One or More with the Plus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#matching-specific-repetitions-with-curly-brackets"&gt;Matching Specific Repetitions with Curly Brackets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#greedy-and-nongreedy-matching"&gt;Greedy and Nongreedy Matching&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-findall-method"&gt;The findall() Method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#making-your-own-character-classes"&gt;Making Your Own Character Classes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-caret-and-dollar-sign-characters"&gt;The Caret and Dollar Sign Characters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-wildcard-character"&gt;The Wildcard Character&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#matching-everything-with-dot-star"&gt;Matching Everything with Dot-Star&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#matching-newlines-with-the-dot-character"&gt;Matching Newlines with the Dot Character&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#review-of-regex-symbols"&gt;Review of Regex Symbols&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#case-insensitive-matching"&gt;Case-Insensitive Matching&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#substituting-strings-with-the-sub-method"&gt;Substituting Strings with the sub() Method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#managing-complex-regexes"&gt;Managing Complex Regexes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#handling-file-and-directory-paths"&gt;Handling File and Directory Paths&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#backslash-on-windows-and-forward-slash-on-os-x-and-linux"&gt;Backslash on Windows and Forward Slash on OS X and Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-current-working-directory"&gt;The Current Working Directory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#creating-new-folders"&gt;Creating New Folders&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#absolute-vs-relative-paths"&gt;Absolute vs. Relative Paths&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#handling-absolute-and-relative-paths"&gt;Handling Absolute and Relative Paths&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#checking-path-validity"&gt;Checking Path Validity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#finding-file-sizes-and-folder-contents"&gt;Finding File Sizes and Folder Contents&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#copying-files-and-folders"&gt;Copying Files and Folders&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#moving-and-renaming-files-and-folders"&gt;Moving and Renaming Files and Folders&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#permanently-deleting-files-and-folders"&gt;Permanently Deleting Files and Folders&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#safe-deletes-with-the-send2trash-module"&gt;Safe Deletes with the send2trash Module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#walking-a-directory-tree"&gt;Walking a Directory Tree&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#reading-and-writing-files"&gt;Reading and Writing Files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-file-readingwriting-process"&gt;The File Reading/Writing Process&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#opening-and-reading-files-with-the-open-function"&gt;Opening and reading files with the open() function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#writing-to-files"&gt;Writing to Files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#saving-variables-with-the-shelve-module"&gt;Saving Variables with the shelve Module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#saving-variables-with-the-pprintpformat-function"&gt;Saving Variables with the pprint.pformat() Function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#reading-zip-files"&gt;Reading ZIP Files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#extracting-from-zip-files"&gt;Extracting from ZIP Files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#creating-and-adding-to-zip-files"&gt;Creating and Adding to ZIP Files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#json-yaml-and-configuration-files"&gt;JSON, YAML and configuration files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#json"&gt;JSON&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#yaml"&gt;YAML&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#anyconfig"&gt;Anyconfig&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#debugging"&gt;Debugging&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#raising-exceptions"&gt;Raising Exceptions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#getting-the-traceback-as-a-string"&gt;Getting the Traceback as a String&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#assertions"&gt;Assertions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#logging"&gt;Logging&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#logging-levels"&gt;Logging Levels&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#disabling-logging"&gt;Disabling Logging&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#logging-to-a-file"&gt;Logging to a File&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#lambda-functions"&gt;Lambda Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ternary-conditional-operator"&gt;Ternary Conditional Operator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#args-and-kwargs"&gt;args and kwargs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#things-to-rememberargs"&gt;Things to Remember(args)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#things-to-rememberkwargs"&gt;Things to Remember(kwargs)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#context-manager"&gt;Context Manager&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#with-statement"&gt;with statement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#writing-your-own-contextmanager-using-generator-syntax"&gt;Writing your own contextmanager using generator syntax&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#__main__-top-level-script-environment"&gt;&lt;code&gt;__main__&lt;/code&gt; Top-level script environment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#advantages"&gt;Advantages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#setuppy"&gt;setup.py&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dataclasses"&gt;Dataclasses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#features"&gt;Features&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#default-values"&gt;Default values&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#type-hints"&gt;Type hints&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#virtual-environment"&gt;Virtual Environment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#virtualenv"&gt;virtualenv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#poetry"&gt;poetry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pipenv"&gt;pipenv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#anaconda"&gt;anaconda&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;



&lt;h2&gt;
  &lt;a href="#python-basics"&gt;
  &lt;/a&gt;
  Python Basics
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#math-operators"&gt;
  &lt;/a&gt;
  Math Operators
&lt;/h3&gt;

&lt;p&gt;From &lt;strong&gt;Highest&lt;/strong&gt; to &lt;strong&gt;Lowest&lt;/strong&gt; precedence:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Operators&lt;/th&gt;
&lt;th&gt;Operation&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;**&lt;/td&gt;
&lt;td&gt;Exponent&lt;/td&gt;
&lt;td&gt;&lt;code&gt;2 ** 3 = 8&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%&lt;/td&gt;
&lt;td&gt;Modulus/Remainder&lt;/td&gt;
&lt;td&gt;&lt;code&gt;22 % 8 = 6&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;//&lt;/td&gt;
&lt;td&gt;Integer division&lt;/td&gt;
&lt;td&gt;&lt;code&gt;22 // 8 = 2&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/&lt;/td&gt;
&lt;td&gt;Division&lt;/td&gt;
&lt;td&gt;&lt;code&gt;22 / 8 = 2.75&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;Multiplication&lt;/td&gt;
&lt;td&gt;&lt;code&gt;3 * 3 = 9&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;Subtraction&lt;/td&gt;
&lt;td&gt;&lt;code&gt;5 - 2 = 3&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;+&lt;/td&gt;
&lt;td&gt;Addition&lt;/td&gt;
&lt;td&gt;&lt;code&gt;2 + 2 = 4&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Examples of expressions in the interactive shell:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;
&lt;span class="mi"&gt;20&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;
&lt;span class="mi"&gt;30&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;
&lt;span class="mi"&gt;256&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="mf"&gt;16.0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#data-types"&gt;
  &lt;/a&gt;
  Data Types
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Data Type&lt;/th&gt;
&lt;th&gt;Examples&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Integers&lt;/td&gt;
&lt;td&gt;&lt;code&gt;-2, -1, 0, 1, 2, 3, 4, 5&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Floating-point numbers&lt;/td&gt;
&lt;td&gt;&lt;code&gt;-1.25, -1.0, --0.5, 0.0, 0.5, 1.0, 1.25&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Strings&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'a', 'aa', 'aaa', 'Hello!', '11 cats'&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#string-concatenation-and-replication"&gt;
  &lt;/a&gt;
  String Concatenation and Replication
&lt;/h3&gt;

&lt;p&gt;String concatenation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;'Alice'&lt;/span&gt; &lt;span class="s"&gt;'Bob'&lt;/span&gt;
&lt;span class="s"&gt;'AliceBob'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note: Avoid &lt;code&gt;+&lt;/code&gt; operator for string concatenation. Prefer string formatting.&lt;/p&gt;

&lt;p&gt;String Replication:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;'Alice'&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="s"&gt;'AliceAliceAliceAliceAlice'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#variables"&gt;
  &lt;/a&gt;
  Variables
&lt;/h3&gt;

&lt;p&gt;You can name a variable anything as long as it obeys the following rules:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;It can be only one word.&lt;/li&gt;
&lt;li&gt;It can use only letters, numbers, and the underscore (&lt;code&gt;_&lt;/code&gt;) character.&lt;/li&gt;
&lt;li&gt;It can’t begin with a number.&lt;/li&gt;
&lt;li&gt;Variable name starting with an underscore (&lt;code&gt;_&lt;/code&gt;) are considered as "unuseful`.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;spam = 'Hello'&lt;br&gt;
spam&lt;br&gt;
'Hello'&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;_spam = 'Hello'&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;_spam&lt;/code&gt; should not be used again in the code.&lt;/p&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#comments"&gt;
  &lt;/a&gt;
  Comments
&lt;/h3&gt;

&lt;p&gt;Inline comment:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#this-is-a-comment"&gt;
  &lt;/a&gt;
  This is a comment
&lt;/h1&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Multiline comment:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`Python&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#this-is-a"&gt;
  &lt;/a&gt;
  This is a
&lt;/h1&gt;

&lt;h1&gt;
  &lt;a href="#multiline-comment"&gt;
  &lt;/a&gt;
  multiline comment
&lt;/h1&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Code with a comment:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;python&lt;br&gt;
a = 1  # initialization&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Please note the two spaces in front of the comment.&lt;/p&gt;

&lt;p&gt;Function docstring:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;python&lt;br&gt;
def foo():&lt;br&gt;
    """&lt;br&gt;
    This is a function docstring&lt;br&gt;
    You can also use:&lt;br&gt;
    ''' Function Docstring '''&lt;br&gt;
    """&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-print-function"&gt;
  &lt;/a&gt;
  The print() Function
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;print('Hello world!')&lt;br&gt;
Hello world!&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;a = 1&lt;br&gt;
print('Hello world!', a)&lt;br&gt;
Hello world! 1&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-input-function"&gt;
  &lt;/a&gt;
  The input() Function
&lt;/h3&gt;

&lt;p&gt;Example Code:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;print('What is your name?')   # ask for their name&lt;br&gt;
myName = input()&lt;br&gt;
print('It is good to meet you, {}'.format(myName))&lt;br&gt;
What is your name?&lt;br&gt;
Al&lt;br&gt;
It is good to meet you, Al&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-len-function"&gt;
  &lt;/a&gt;
  The len() Function
&lt;/h3&gt;

&lt;p&gt;Evaluates to the integer value of the number of characters in a string:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;len('hello')&lt;br&gt;
5&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;Note: test of emptiness of strings, lists, dictionary, etc, should &lt;strong&gt;not&lt;/strong&gt; use len, but prefer direct&lt;br&gt;
boolean evaluation.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;a = [1, 2, 3]&lt;br&gt;
if a:&lt;br&gt;
    print("the list is not empty!")&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-str-int-and-float-functions"&gt;
  &lt;/a&gt;
  The str(), int(), and float() Functions
&lt;/h3&gt;

&lt;p&gt;Integer to String or Float:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;str(29)&lt;br&gt;
'29'&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;print('I am {} years old.'.format(str(29)))&lt;br&gt;
I am 29 years old.&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;str(-3.14)&lt;br&gt;
'-3.14'&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;Float to Integer:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;int(7.7)&lt;br&gt;
7&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;int(7.7) + 1&lt;br&gt;
8&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#flow-control"&gt;
  &lt;/a&gt;
  Flow Control
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#comparison-operators"&gt;
  &lt;/a&gt;
  Comparison Operators
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Operator&lt;/th&gt;
&lt;th&gt;Meaning&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;==&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Equal to&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;!=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Not equal to&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Less than&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Greater Than&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Less than or Equal to&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;gt;=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Greater than or Equal to&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;These operators evaluate to True or False depending on the values you give them.&lt;/p&gt;

&lt;p&gt;Examples:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;42 == 42&lt;br&gt;
True&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;40 == 42&lt;br&gt;
False&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;'hello' == 'hello'&lt;br&gt;
True&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;'hello' == 'Hello'&lt;br&gt;
False&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;'dog' != 'cat'&lt;br&gt;
True&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;42 == 42.0&lt;br&gt;
True&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;42 == '42'&lt;br&gt;
False&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#boolean-evaluation"&gt;
  &lt;/a&gt;
  Boolean evaluation
&lt;/h3&gt;

&lt;p&gt;Never use &lt;code&gt;==&lt;/code&gt; or &lt;code&gt;!=&lt;/code&gt; operator to evaluate boolean operation. Use the &lt;code&gt;is&lt;/code&gt; or &lt;code&gt;is not&lt;/code&gt; operators,&lt;br&gt;
or use implicit boolean evaluation.&lt;/p&gt;

&lt;p&gt;NO (even if they are valid Python):&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;True == True&lt;br&gt;
True&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;True != False&lt;br&gt;
True&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;YES (even if they are valid Python):&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;True is True&lt;br&gt;
True&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;True is not False&lt;br&gt;
True&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;These statements are equivalent:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`Python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;if a is True:&lt;br&gt;
   pass&lt;br&gt;
if a is not False:&lt;br&gt;
   pass&lt;br&gt;
if a:&lt;br&gt;
   pass&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;And these as well:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`Python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;if a is False:&lt;br&gt;
   pass&lt;br&gt;
if a is not True:&lt;br&gt;
   pass&lt;br&gt;
if not a:&lt;br&gt;
   pass&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#boolean-operators"&gt;
  &lt;/a&gt;
  Boolean Operators
&lt;/h3&gt;

&lt;p&gt;There are three Boolean operators: and, or, and not.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;and&lt;/em&gt; Operator’s &lt;em&gt;Truth&lt;/em&gt; Table:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Expression&lt;/th&gt;
&lt;th&gt;Evaluates to&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;True and True&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;True&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;True and False&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;False&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;False and True&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;False&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;False and False&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;False&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;The &lt;em&gt;or&lt;/em&gt; Operator’s &lt;em&gt;Truth&lt;/em&gt; Table:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Expression&lt;/th&gt;
&lt;th&gt;Evaluates to&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;True or True&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;True&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;True or False&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;True&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;False or True&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;True&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;False or False&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;False&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;The &lt;em&gt;not&lt;/em&gt; Operator’s &lt;em&gt;Truth&lt;/em&gt; Table:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Expression&lt;/th&gt;
&lt;th&gt;Evaluates to&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;not True&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;False&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;not False&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;True&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mixing-boolean-and-comparison-operators"&gt;
  &lt;/a&gt;
  Mixing Boolean and Comparison Operators
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;(4 &amp;lt; 5) and (5 &amp;lt; 6)&lt;br&gt;
True&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;(4 &amp;lt; 5) and (9 &amp;lt; 6)&lt;br&gt;
False&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;(1 == 2) or (2 == 2)&lt;br&gt;
True&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can also use multiple Boolean operators in an expression, along with the comparison operators:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;2 + 2 == 4 and not 2 + 2 == 5 and 2 * 2 == 2 + 2&lt;br&gt;
True&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#if-statements"&gt;
  &lt;/a&gt;
  if Statements
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;python&lt;br&gt;
if name == 'Alice':&lt;br&gt;
    print('Hi, Alice.')&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#else-statements"&gt;
  &lt;/a&gt;
  else Statements
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;python&lt;br&gt;
name = 'Bob'&lt;br&gt;
if name == 'Alice':&lt;br&gt;
    print('Hi, Alice.')&lt;br&gt;
else:&lt;br&gt;
    print('Hello, stranger.')&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#elif-statements"&gt;
  &lt;/a&gt;
  elif Statements
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;python&lt;br&gt;
name = 'Bob'&lt;br&gt;
age = 5&lt;br&gt;
if name == 'Alice':&lt;br&gt;
    print('Hi, Alice.')&lt;br&gt;
elif age &amp;lt; 12:&lt;br&gt;
    print('You are not Alice, kiddo.')&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;python&lt;br&gt;
name = 'Bob'&lt;br&gt;
age = 30&lt;br&gt;
if name == 'Alice':&lt;br&gt;
    print('Hi, Alice.')&lt;br&gt;
elif age &amp;lt; 12:&lt;br&gt;
    print('You are not Alice, kiddo.')&lt;br&gt;
else:&lt;br&gt;
    print('You are neither Alice nor a little kid.')&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#while-loop-statements"&gt;
  &lt;/a&gt;
  while Loop Statements
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;python&lt;br&gt;
spam = 0&lt;br&gt;
while spam &amp;lt; 5:&lt;br&gt;
    print('Hello, world.')&lt;br&gt;
    spam = spam + 1&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#break-statements"&gt;
  &lt;/a&gt;
  break Statements
&lt;/h3&gt;

&lt;p&gt;If the execution reaches a break statement, it immediately exits the while loop’s clause:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;python&lt;br&gt;
while True:&lt;br&gt;
    print('Please type your name.')&lt;br&gt;
    name = input()&lt;br&gt;
    if name == 'your name':&lt;br&gt;
        break&lt;br&gt;
print('Thank you!')&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#continue-statements"&gt;
  &lt;/a&gt;
  continue Statements
&lt;/h3&gt;

&lt;p&gt;When the program execution reaches a continue statement, the program execution immediately jumps back to the start of the loop.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;python&lt;br&gt;
while True:&lt;br&gt;
    print('Who are you?')&lt;br&gt;
    name = input()&lt;br&gt;
    if name != 'Joe':&lt;br&gt;
        continue&lt;br&gt;
    print('Hello, Joe. What is the password? (It is a fish.)')&lt;br&gt;
    password = input()&lt;br&gt;
    if password == 'swordfish':&lt;br&gt;
        break&lt;br&gt;
print('Access granted.')&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#for-loops-and-the-range-function"&gt;
  &lt;/a&gt;
  for Loops and the range() Function
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;print('My name is')&lt;br&gt;
for i in range(5):&lt;br&gt;
    print('Jimmy Five Times ({})'.format(str(i)))&lt;br&gt;
My name is&lt;br&gt;
Jimmy Five Times (0)&lt;br&gt;
Jimmy Five Times (1)&lt;br&gt;
Jimmy Five Times (2)&lt;br&gt;
Jimmy Five Times (3)&lt;br&gt;
Jimmy Five Times (4)&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;The &lt;em&gt;range()&lt;/em&gt; function can also be called with three arguments. The first two arguments will be the start and stop values, and the third will be the step argument. The step is the amount that the variable is increased by after each iteration.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;for i in range(0, 10, 2):&lt;br&gt;
   print(i)&lt;br&gt;
0&lt;br&gt;
2&lt;br&gt;
4&lt;br&gt;
6&lt;br&gt;
8&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can even use a negative number for the step argument to make the for loop count down instead of up.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;for i in range(5, -1, -1):&lt;br&gt;
    print(i)&lt;br&gt;
5&lt;br&gt;
4&lt;br&gt;
3&lt;br&gt;
2&lt;br&gt;
1&lt;br&gt;
0&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#for-else-statement"&gt;
  &lt;/a&gt;
  For else statement
&lt;/h3&gt;

&lt;p&gt;This allows to specify a statement to execute in case of the full loop has been executed. Only&lt;br&gt;
useful when a &lt;code&gt;break&lt;/code&gt; condition can occur in the loop:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;for i in [1, 2, 3, 4, 5]:&lt;br&gt;
   if i == 3:&lt;br&gt;
       break&lt;br&gt;
else:&lt;br&gt;
   print("only executed when no item of the list is equal to 3")&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#importing-modules"&gt;
  &lt;/a&gt;
  Importing Modules
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;python&lt;br&gt;
import random&lt;br&gt;
for i in range(5):&lt;br&gt;
    print(random.randint(1, 10))&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;python&lt;br&gt;
import random, sys, os, math&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;python&lt;br&gt;
from random import *&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ending-a-program-early-with-sysexit"&gt;
  &lt;/a&gt;
  Ending a Program Early with sys.exit()
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;br&gt;
import sys&lt;/p&gt;

&lt;p&gt;while True:&lt;br&gt;
    print('Type exit to exit.')&lt;br&gt;
    response = input()&lt;br&gt;
    if response == 'exit':&lt;br&gt;
        sys.exit()&lt;br&gt;
    print('You typed {}.'.format(response))&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#functions"&gt;
  &lt;/a&gt;
  Functions
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;def hello(name):&lt;br&gt;
    print('Hello {}'.format(name))&lt;/p&gt;

&lt;p&gt;hello('Alice')&lt;br&gt;
hello('Bob')&lt;br&gt;
Hello Alice&lt;br&gt;
Hello Bob&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#return-values-and-return-statements"&gt;
  &lt;/a&gt;
  Return Values and return Statements
&lt;/h3&gt;

&lt;p&gt;When creating a function using the def statement, you can specify what the return value should be with a return statement. A return statement consists of the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The return keyword.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The value or expression that the function should return.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;br&gt;
import random&lt;br&gt;
def getAnswer(answerNumber):&lt;br&gt;
    if answerNumber == 1:&lt;br&gt;
        return 'It is certain'&lt;br&gt;
    elif answerNumber == 2:&lt;br&gt;
        return 'It is decidedly so'&lt;br&gt;
    elif answerNumber == 3:&lt;br&gt;
        return 'Yes'&lt;br&gt;
    elif answerNumber == 4:&lt;br&gt;
        return 'Reply hazy try again'&lt;br&gt;
    elif answerNumber == 5:&lt;br&gt;
        return 'Ask again later'&lt;br&gt;
    elif answerNumber == 6:&lt;br&gt;
        return 'Concentrate and ask again'&lt;br&gt;
    elif answerNumber == 7:&lt;br&gt;
        return 'My reply is no'&lt;br&gt;
    elif answerNumber == 8:&lt;br&gt;
        return 'Outlook not so good'&lt;br&gt;
    elif answerNumber == 9:&lt;br&gt;
        return 'Very doubtful'&lt;/p&gt;

&lt;p&gt;r = random.randint(1, 9)&lt;br&gt;
fortune = getAnswer(r)&lt;br&gt;
print(fortune)&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-none-value"&gt;
  &lt;/a&gt;
  The None Value
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;spam = print('Hello!')&lt;br&gt;
Hello!&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;spam is None&lt;br&gt;
True&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;Note: never compare to &lt;code&gt;None&lt;/code&gt; with the &lt;code&gt;==&lt;/code&gt; operator. Always use &lt;code&gt;is&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#keyword-arguments-and-print"&gt;
  &lt;/a&gt;
  Keyword Arguments and print()
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;print('Hello', end='')&lt;br&gt;
print('World')&lt;br&gt;
HelloWorld&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;print('cats', 'dogs', 'mice')&lt;br&gt;
cats dogs mice&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;print('cats', 'dogs', 'mice', sep=',')&lt;br&gt;
cats,dogs,mice&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#local-and-global-scope"&gt;
  &lt;/a&gt;
  Local and Global Scope
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Code in the global scope cannot use any local variables.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;However, a local scope can access global variables.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Code in a function’s local scope cannot use variables in any other local scope.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can use the same name for different variables if they are in different scopes. That is, there can be a local variable named spam and a global variable also named spam.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-global-statement"&gt;
  &lt;/a&gt;
  The global Statement
&lt;/h3&gt;

&lt;p&gt;If you need to modify a global variable from within a function, use the global statement:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;def spam():&lt;br&gt;
    global eggs&lt;br&gt;
    eggs = 'spam'&lt;/p&gt;

&lt;p&gt;eggs = 'global'&lt;br&gt;
spam()&lt;br&gt;
print(eggs)&lt;br&gt;
spam&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are four rules to tell whether a variable is in a local scope or global scope:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;If a variable is being used in the global scope (that is, outside of all functions), then it is always a global variable.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If there is a global statement for that variable in a function, it is a global variable.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Otherwise, if the variable is used in an assignment statement in the function, it is a local variable.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;But if the variable is not used in an assignment statement, it is a global variable.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#exception-handling"&gt;
  &lt;/a&gt;
  Exception Handling
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#basic-exception-handling"&gt;
  &lt;/a&gt;
  Basic exception handling
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;def spam(divideBy):&lt;br&gt;
    try:&lt;br&gt;
        return 42 / divideBy&lt;br&gt;
    except ZeroDivisionError as e:&lt;br&gt;
        print('Error: Invalid argument: {}'.format(e))&lt;/p&gt;

&lt;p&gt;print(spam(2))&lt;br&gt;
print(spam(12))&lt;br&gt;
print(spam(0))&lt;br&gt;
print(spam(1))&lt;br&gt;
21.0&lt;br&gt;
3.5&lt;br&gt;
Error: Invalid argument: division by zero&lt;br&gt;
None&lt;br&gt;
42.0&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#final-code-in-exception-handling"&gt;
  &lt;/a&gt;
  Final code in exception handling
&lt;/h3&gt;

&lt;p&gt;Code inside the &lt;code&gt;finally&lt;/code&gt; section is always executed, no matter if an exception has been raised or&lt;br&gt;
not, and even if an exception is not caught.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;def spam(divideBy):&lt;br&gt;
    try:&lt;br&gt;
        return 42 / divideBy&lt;br&gt;
    except ZeroDivisionError as e:&lt;br&gt;
        print('Error: Invalid argument: {}'.format(e))&lt;br&gt;
    finally:&lt;br&gt;
        print("-- division finished --")&lt;br&gt;
print(spam(2))&lt;br&gt;
-- division finished --&lt;br&gt;
21.0&lt;br&gt;
print(spam(12))&lt;br&gt;
-- division finished --&lt;br&gt;
3.5&lt;br&gt;
print(spam(0))&lt;br&gt;
Error: Invalid Argument division by zero&lt;br&gt;
-- division finished --&lt;br&gt;
None&lt;br&gt;
print(spam(1))&lt;br&gt;
-- division finished --&lt;br&gt;
42.0&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lists"&gt;
  &lt;/a&gt;
  Lists
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;spam = ['cat', 'bat', 'rat', 'elephant']&lt;/p&gt;

&lt;p&gt;spam&lt;br&gt;
['cat', 'bat', 'rat', 'elephant']&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#getting-individual-values-in-a-list-with-indexes"&gt;
  &lt;/a&gt;
  Getting Individual Values in a List with Indexes
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;spam = ['cat', 'bat', 'rat', 'elephant']&lt;br&gt;
spam[0]&lt;br&gt;
'cat'&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;spam[1]&lt;br&gt;
'bat'&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;spam[2]&lt;br&gt;
'rat'&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;spam[3]&lt;br&gt;
'elephant'&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#negative-indexes"&gt;
  &lt;/a&gt;
  Negative Indexes
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;spam = ['cat', 'bat', 'rat', 'elephant']&lt;br&gt;
spam[-1]&lt;br&gt;
'elephant'&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;spam[-3]&lt;br&gt;
'bat'&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;'The {} is afraid of the {}.'.format(spam[-1], spam[-3])&lt;br&gt;
'The elephant is afraid of the bat.'&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#getting-sublists-with-slices"&gt;
  &lt;/a&gt;
  Getting Sublists with Slices
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;spam = ['cat', 'bat', 'rat', 'elephant']&lt;br&gt;
spam[0:4]&lt;br&gt;
['cat', 'bat', 'rat', 'elephant']&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;spam[1:3]&lt;br&gt;
['bat', 'rat']&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;spam[0:-1]&lt;br&gt;
['cat', 'bat', 'rat']&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;spam = ['cat', 'bat', 'rat', 'elephant']&lt;br&gt;
spam[:2]&lt;br&gt;
['cat', 'bat']&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;spam[1:]&lt;br&gt;
['bat', 'rat', 'elephant']&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;Slicing the complete list will perform a copy:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;spam2 = spam[:]&lt;br&gt;
['cat', 'bat', 'rat', 'elephant']&lt;br&gt;
spam.append('dog')&lt;br&gt;
spam&lt;br&gt;
['cat', 'bat', 'rat', 'elephant', 'dog']&lt;br&gt;
spam2&lt;br&gt;
['cat', 'bat', 'rat', 'elephant']&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#getting-a-lists-length-with-len"&gt;
  &lt;/a&gt;
  Getting a List’s Length with len()
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;spam = ['cat', 'dog', 'moose']&lt;br&gt;
len(spam)&lt;br&gt;
3&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#changing-values-in-a-list-with-indexes"&gt;
  &lt;/a&gt;
  Changing Values in a List with Indexes
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;spam = ['cat', 'bat', 'rat', 'elephant']&lt;br&gt;
spam[1] = 'aardvark'&lt;/p&gt;

&lt;p&gt;spam&lt;br&gt;
['cat', 'aardvark', 'rat', 'elephant']&lt;/p&gt;

&lt;p&gt;spam[2] = spam[1]&lt;/p&gt;

&lt;p&gt;spam&lt;br&gt;
['cat', 'aardvark', 'aardvark', 'elephant']&lt;/p&gt;

&lt;p&gt;spam[-1] = 12345&lt;/p&gt;

&lt;p&gt;spam&lt;br&gt;
['cat', 'aardvark', 'aardvark', 12345]&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#list-concatenation-and-list-replication"&gt;
  &lt;/a&gt;
  List Concatenation and List Replication
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;[1, 2, 3] + ['A', 'B', 'C']&lt;br&gt;
[1, 2, 3, 'A', 'B', 'C']&lt;/p&gt;

&lt;p&gt;['X', 'Y', 'Z'] * 3&lt;br&gt;
['X', 'Y', 'Z', 'X', 'Y', 'Z', 'X', 'Y', 'Z']&lt;/p&gt;

&lt;p&gt;spam = [1, 2, 3]&lt;/p&gt;

&lt;p&gt;spam = spam + ['A', 'B', 'C']&lt;/p&gt;

&lt;p&gt;spam&lt;br&gt;
[1, 2, 3, 'A', 'B', 'C']&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#removing-values-from-lists-with-del-statements"&gt;
  &lt;/a&gt;
  Removing Values from Lists with del Statements
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;spam = ['cat', 'bat', 'rat', 'elephant']&lt;br&gt;
del spam[2]&lt;br&gt;
spam&lt;br&gt;
['cat', 'bat', 'elephant']&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;del spam[2]&lt;br&gt;
spam&lt;br&gt;
['cat', 'bat']&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-for-loops-with-lists"&gt;
  &lt;/a&gt;
  Using for Loops with Lists
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;supplies = ['pens', 'staplers', 'flame-throwers', 'binders']&lt;br&gt;
for i, supply in enumerate(supplies):&lt;br&gt;
    print('Index {} in supplies is: {}'.format(str(i), supply))&lt;br&gt;
Index 0 in supplies is: pens&lt;br&gt;
Index 1 in supplies is: staplers&lt;br&gt;
Index 2 in supplies is: flame-throwers&lt;br&gt;
Index 3 in supplies is: binders&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#looping-through-multiple-lists-with-zip"&gt;
  &lt;/a&gt;
  Looping Through Multiple Lists with zip()
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;name = ['Pete', 'John', 'Elizabeth']&lt;br&gt;
age = [6, 23, 44]&lt;br&gt;
for n, a in zip(name, age):&lt;br&gt;
    print('{} is {} years old'.format(n, a))&lt;br&gt;
Pete is 6 years old&lt;br&gt;
John is 23 years old&lt;br&gt;
Elizabeth is 44 years old&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#the-in-and-not-in-operators"&gt;
  &lt;/a&gt;
  The in and not in Operators
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;'howdy' in ['hello', 'hi', 'howdy', 'heyas']&lt;br&gt;
True&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;spam = ['hello', 'hi', 'howdy', 'heyas']&lt;br&gt;
'cat' in spam&lt;br&gt;
False&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;'howdy' not in spam&lt;br&gt;
False&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;'cat' not in spam&lt;br&gt;
True&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-multiple-assignment-trick"&gt;
  &lt;/a&gt;
  The Multiple Assignment Trick
&lt;/h3&gt;

&lt;p&gt;The multiple assignment trick is a shortcut that lets you assign multiple variables with the values in a list in one line of code. So instead of doing this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;cat = ['fat', 'orange', 'loud']&lt;/p&gt;

&lt;p&gt;size = cat[0]&lt;/p&gt;

&lt;p&gt;color = cat[1]&lt;/p&gt;

&lt;p&gt;disposition = cat[2]&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;You could type this line of code:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;cat = ['fat', 'orange', 'loud']&lt;/p&gt;

&lt;p&gt;size, color, disposition = cat&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;The multiple assignment trick can also be used to swap the values in two variables:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;a, b = 'Alice', 'Bob'&lt;br&gt;
a, b = b, a&lt;br&gt;
print(a)&lt;br&gt;
'Bob'&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;print(b)&lt;br&gt;
'Alice'&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#augmented-assignment-operators"&gt;
  &lt;/a&gt;
  Augmented Assignment Operators
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Operator&lt;/th&gt;
&lt;th&gt;Equivalent&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;spam += 1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;spam = spam + 1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;spam -= 1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;spam = spam - 1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;spam *= 1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;spam = spam * 1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;spam /= 1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;spam = spam / 1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;spam %= 1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;spam = spam % 1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Examples:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;spam = 'Hello'&lt;br&gt;
spam += ' world!'&lt;br&gt;
spam&lt;br&gt;
'Hello world!'&lt;/p&gt;

&lt;p&gt;bacon = ['Zophie']&lt;br&gt;
bacon *= 3&lt;br&gt;
bacon&lt;br&gt;
['Zophie', 'Zophie', 'Zophie']&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#finding-a-value-in-a-list-with-the-index-method"&gt;
  &lt;/a&gt;
  Finding a Value in a List with the index() Method
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;spam = ['Zophie', 'Pooka', 'Fat-tail', 'Pooka']&lt;/p&gt;

&lt;p&gt;spam.index('Pooka')&lt;br&gt;
1&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adding-values-to-lists-with-the-append-and-insert-methods"&gt;
  &lt;/a&gt;
  Adding Values to Lists with the append() and insert() Methods
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;append()&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;spam = ['cat', 'dog', 'bat']&lt;/p&gt;

&lt;p&gt;spam.append('moose')&lt;/p&gt;

&lt;p&gt;spam&lt;br&gt;
['cat', 'dog', 'bat', 'moose']&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;insert()&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;spam = ['cat', 'dog', 'bat']&lt;/p&gt;

&lt;p&gt;spam.insert(1, 'chicken')&lt;/p&gt;

&lt;p&gt;spam&lt;br&gt;
['cat', 'chicken', 'dog', 'bat']&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#removing-values-from-lists-with-remove"&gt;
  &lt;/a&gt;
  Removing Values from Lists with remove()
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;spam = ['cat', 'bat', 'rat', 'elephant']&lt;/p&gt;

&lt;p&gt;spam.remove('bat')&lt;/p&gt;

&lt;p&gt;spam&lt;br&gt;
['cat', 'rat', 'elephant']&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;If the value appears multiple times in the list, only the first instance of the value will be removed.&lt;/p&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#removing-values-from-lists-with-pop"&gt;
  &lt;/a&gt;
  Removing Values from Lists with pop()
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;spam = ['cat', 'bat', 'rat', 'elephant']&lt;/p&gt;

&lt;p&gt;spam.pop()&lt;br&gt;
'elephant'&lt;/p&gt;

&lt;p&gt;spam&lt;br&gt;
['cat', 'bat', 'rat']&lt;/p&gt;

&lt;p&gt;spam.pop(0)&lt;br&gt;
'cat'&lt;/p&gt;

&lt;p&gt;spam&lt;br&gt;
['bat', 'rat']&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sorting-the-values-in-a-list-with-the-sort-method"&gt;
  &lt;/a&gt;
  Sorting the Values in a List with the sort() Method
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;spam = [2, 5, 3.14, 1, -7]&lt;br&gt;
spam.sort()&lt;br&gt;
spam&lt;br&gt;
[-7, 1, 2, 3.14, 5]&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;spam = ['ants', 'cats', 'dogs', 'badgers', 'elephants']&lt;br&gt;
spam.sort()&lt;br&gt;
spam&lt;br&gt;
['ants', 'badgers', 'cats', 'dogs', 'elephants']&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can also pass True for the reverse keyword argument to have sort() sort the values in reverse order:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;spam.sort(reverse=True)&lt;br&gt;
spam&lt;br&gt;
['elephants', 'dogs', 'cats', 'badgers', 'ants']&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you need to sort the values in regular alphabetical order, pass str. lower for the key keyword argument in the sort() method call:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;spam = ['a', 'z', 'A', 'Z']&lt;br&gt;
spam.sort(key=str.lower)&lt;br&gt;
spam&lt;br&gt;
['a', 'A', 'z', 'Z']&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can use the built-in function &lt;code&gt;sorted&lt;/code&gt; to return a new list:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;spam = ['ants', 'cats', 'dogs', 'badgers', 'elephants']&lt;br&gt;
sorted(spam)&lt;br&gt;
['ants', 'badgers', 'cats', 'dogs', 'elephants']&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tuple-data-type"&gt;
  &lt;/a&gt;
  Tuple Data Type
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;eggs = ('hello', 42, 0.5)&lt;br&gt;
eggs[0]&lt;br&gt;
'hello'&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;eggs&lt;a href="//42,%200.5"&gt;1:3&lt;/a&gt;&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;len(eggs)&lt;br&gt;
3&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;The main way that tuples are different from lists is that tuples, like strings, are immutable.&lt;/p&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#converting-types-with-the-list-and-tuple-functions"&gt;
  &lt;/a&gt;
  Converting Types with the list() and tuple() Functions
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;tuple(['cat', 'dog', 5])&lt;br&gt;
('cat', 'dog', 5)&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;list(('cat', 'dog', 5))&lt;br&gt;
['cat', 'dog', 5]&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;list('hello')&lt;br&gt;
['h', 'e', 'l', 'l', 'o']&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dictionaries-and-structuring-data"&gt;
  &lt;/a&gt;
  Dictionaries and Structuring Data
&lt;/h2&gt;

&lt;p&gt;Example Dictionary:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;python&lt;br&gt;
myCat = {'size': 'fat', 'color': 'gray', 'disposition': 'loud'}&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-keys-values-and-items-methods"&gt;
  &lt;/a&gt;
  The keys(), values(), and items() Methods
&lt;/h3&gt;

&lt;p&gt;values():&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;spam = {'color': 'red', 'age': 42}&lt;br&gt;
for v in spam.values():&lt;br&gt;
    print(v)&lt;br&gt;
red&lt;br&gt;
42&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;keys():&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;for k in spam.keys():&lt;br&gt;
    print(k)&lt;br&gt;
color&lt;br&gt;
age&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;items():&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;for i in spam.items():&lt;br&gt;
    print(i)&lt;br&gt;
('color', 'red')&lt;br&gt;
('age', 42)&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;Using the keys(), values(), and items() methods, a for loop can iterate over the keys, values, or key-value pairs in a dictionary, respectively.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;spam = {'color': 'red', 'age': 42}&lt;/p&gt;

&lt;p&gt;for k, v in spam.items():&lt;br&gt;
    print('Key: {} Value: {}'.format(k, str(v)))&lt;br&gt;
Key: age Value: 42&lt;br&gt;
Key: color Value: red&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#checking-whether-a-key-or-value-exists-in-a-dictionary"&gt;
  &lt;/a&gt;
  Checking Whether a Key or Value Exists in a Dictionary
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;spam = {'name': 'Zophie', 'age': 7}&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;'name' in spam.keys()&lt;br&gt;
True&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;'Zophie' in spam.values()&lt;br&gt;
True&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;h1&gt;
  &lt;a href="#you-can-omit-the-call-to-keys-when-checking-for-a-key"&gt;
  &lt;/a&gt;
  You can omit the call to keys() when checking for a key
&lt;/h1&gt;

&lt;p&gt;'color' in spam&lt;br&gt;
False&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;'color' not in spam&lt;br&gt;
True&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-get-method"&gt;
  &lt;/a&gt;
  The get() Method
&lt;/h3&gt;

&lt;p&gt;Get has two parameters: key and default value if the key did not exist&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;picnic_items = {'apples': 5, 'cups': 2}&lt;/p&gt;

&lt;p&gt;'I am bringing {} cups.'.format(str(picnic_items.get('cups', 0)))&lt;br&gt;
'I am bringing 2 cups.'&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;'I am bringing {} eggs.'.format(str(picnic_items.get('eggs', 0)))&lt;br&gt;
'I am bringing 0 eggs.'&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-setdefault-method"&gt;
  &lt;/a&gt;
  The setdefault() Method
&lt;/h3&gt;

&lt;p&gt;Let's consider this code:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;br&gt;
spam = {'name': 'Pooka', 'age': 5}&lt;/p&gt;

&lt;p&gt;if 'color' not in spam:&lt;br&gt;
    spam['color'] = 'black'&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;setdefault&lt;/code&gt; we could write the same code more succinctly:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;spam = {'name': 'Pooka', 'age': 5}&lt;br&gt;
spam.setdefault('color', 'black')&lt;br&gt;
'black'&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;spam&lt;br&gt;
{'color': 'black', 'age': 5, 'name': 'Pooka'}&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;spam.setdefault('color', 'white')&lt;br&gt;
'black'&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;spam&lt;br&gt;
{'color': 'black', 'age': 5, 'name': 'Pooka'}&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pretty-printing"&gt;
  &lt;/a&gt;
  Pretty Printing
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;import pprint&lt;/p&gt;

&lt;p&gt;message = 'It was a bright cold day in April, and the clocks were striking&lt;br&gt;
thirteen.'&lt;br&gt;
count = {}&lt;/p&gt;

&lt;p&gt;for character in message:&lt;br&gt;
    count.setdefault(character, 0)&lt;br&gt;
    count[character] = count[character] + 1&lt;/p&gt;

&lt;p&gt;pprint.pprint(count)&lt;br&gt;
{' ': 13,&lt;br&gt;
 ',': 1,&lt;br&gt;
 '.': 1,&lt;br&gt;
 'A': 1,&lt;br&gt;
 'I': 1,&lt;br&gt;
 'a': 4,&lt;br&gt;
 'b': 1,&lt;br&gt;
 'c': 3,&lt;br&gt;
 'd': 3,&lt;br&gt;
 'e': 5,&lt;br&gt;
 'g': 2,&lt;br&gt;
 'h': 3,&lt;br&gt;
 'i': 6,&lt;br&gt;
 'k': 2,&lt;br&gt;
 'l': 3,&lt;br&gt;
 'n': 4,&lt;br&gt;
 'o': 2,&lt;br&gt;
 'p': 1,&lt;br&gt;
 'r': 5,&lt;br&gt;
 's': 3,&lt;br&gt;
 't': 6,&lt;br&gt;
 'w': 2,&lt;br&gt;
 'y': 1}&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#merge-two-dictionaries"&gt;
  &lt;/a&gt;
  Merge two dictionaries
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#in-python-35"&gt;
  &lt;/a&gt;
  in Python 3.5+:
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;x = {'a': 1, 'b': 2}&lt;br&gt;
y = {'b': 3, 'c': 4}&lt;br&gt;
z = {**x, **y}&lt;br&gt;
z&lt;br&gt;
{'c': 4, 'a': 1, 'b': 3}&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#in-python-27"&gt;
  &lt;/a&gt;
  in Python 2.7
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;z = dict(x, **y)&lt;br&gt;
z&lt;br&gt;
{'c': 4, 'a': 1, 'b': 3}&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#sets"&gt;
  &lt;/a&gt;
  sets
&lt;/h2&gt;

&lt;p&gt;From the Python 3 &lt;a href="https://docs.python.org/3/tutorial/datastructures.html"&gt;documentation&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A set is an unordered collection with no duplicate elements. Basic uses include membership testing and eliminating duplicate entries. Set objects also support mathematical operations like union, intersection, difference, and symmetric difference.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#initializing-a-set"&gt;
  &lt;/a&gt;
  Initializing a set
&lt;/h3&gt;

&lt;p&gt;There are two ways to create sets: using curly braces &lt;code&gt;{}&lt;/code&gt; and the built-in function &lt;code&gt;set()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;s = {1, 2, 3}&lt;br&gt;
s = set([1, 2, 3])&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;When creating an empty set, be sure to not use the curly braces &lt;code&gt;{}&lt;/code&gt; or you will get an empty dictionary instead.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;s = {}&lt;br&gt;
type(s)&lt;br&gt;
&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#sets-unordered-collections-of-unique-elements"&gt;
  &lt;/a&gt;
  sets: unordered collections of unique elements
&lt;/h3&gt;

&lt;p&gt;A set automatically remove all the duplicate values.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;s = {1, 2, 3, 2, 3, 4}&lt;br&gt;
s&lt;br&gt;
{1, 2, 3, 4}&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;And as an unordered data type, they can't be indexed.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;s = {1, 2, 3}&lt;br&gt;
s[0]&lt;br&gt;
Traceback (most recent call last):&lt;br&gt;
  File "", line 1, in &lt;br&gt;
TypeError: 'set' object does not support indexing&lt;/p&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#set-add-and-update"&gt;
  &lt;/a&gt;
  set add() and update()
&lt;/h3&gt;

&lt;p&gt;Using the &lt;code&gt;add()&lt;/code&gt; method we can add a single element to the set.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;s = {1, 2, 3}&lt;br&gt;
s.add(4)&lt;br&gt;
s&lt;br&gt;
{1, 2, 3, 4}&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;And with &lt;code&gt;update()&lt;/code&gt;, multiple ones .&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;s = {1, 2, 3}&lt;br&gt;
s.update([2, 3, 4, 5, 6])&lt;br&gt;
s&lt;br&gt;
{1, 2, 3, 4, 5, 6}  # remember, sets automatically remove duplicates&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#set-remove-and-discard"&gt;
  &lt;/a&gt;
  set remove() and discard()
&lt;/h3&gt;

&lt;p&gt;Both methods will remove an element from the set, but &lt;code&gt;remove()&lt;/code&gt; will raise a &lt;code&gt;key error&lt;/code&gt; if the value doesn't exist.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;s = {1, 2, 3}&lt;br&gt;
s.remove(3)&lt;br&gt;
s&lt;br&gt;
{1, 2}&lt;br&gt;
s.remove(3)&lt;br&gt;
Traceback (most recent call last):&lt;br&gt;
  File "", line 1, in &lt;br&gt;
KeyError: 3&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;discard()&lt;/code&gt; won't raise any errors.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;s = {1, 2, 3}&lt;br&gt;
s.discard(3)&lt;br&gt;
s&lt;br&gt;
{1, 2}&lt;br&gt;
s.discard(3)&lt;/p&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#set-union"&gt;
  &lt;/a&gt;
  set union()
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;union()&lt;/code&gt; or &lt;code&gt;|&lt;/code&gt; will create a new set that contains all the elements from the sets provided.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;s1 = {1, 2, 3}&lt;br&gt;
s2 = {3, 4, 5}&lt;br&gt;
s1.union(s2)  # or 's1 | s2'&lt;br&gt;
{1, 2, 3, 4, 5}&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#set-intersection"&gt;
  &lt;/a&gt;
  set intersection
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;intersection&lt;/code&gt; or &lt;code&gt;&amp;amp;&lt;/code&gt; will return a set containing only the elements that are common to all of them.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;s1 = {1, 2, 3}&lt;br&gt;
s2 = {2, 3, 4}&lt;br&gt;
s3 = {3, 4, 5}&lt;br&gt;
s1.intersection(s2, s3)  # or 's1 &amp;amp; s2 &amp;amp; s3'&lt;br&gt;
{3}&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#set-difference"&gt;
  &lt;/a&gt;
  set difference
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;difference&lt;/code&gt; or &lt;code&gt;-&lt;/code&gt; will return only the elements that are unique to the first set (invoked set).&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;s1 = {1, 2, 3}&lt;br&gt;
s2 = {2, 3, 4}&lt;br&gt;
s1.difference(s2)  # or 's1 - s2'&lt;br&gt;
{1}&lt;br&gt;
s2.difference(s1) # or 's2 - s1'&lt;br&gt;
{4}&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#set-symetricdifference"&gt;
  &lt;/a&gt;
  set symetric_difference
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;symetric_difference&lt;/code&gt; or &lt;code&gt;^&lt;/code&gt; will return all the elements that are not common between them.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;s1 = {1, 2, 3}&lt;br&gt;
s2 = {2, 3, 4}&lt;br&gt;
s1.symmetric_difference(s2)  # or 's1 ^ s2'&lt;br&gt;
{1, 4}&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#itertools-module"&gt;
  &lt;/a&gt;
  itertools Module
&lt;/h2&gt;

&lt;p&gt;The &lt;em&gt;itertools&lt;/em&gt; module is a collection of tools intended to be fast and use memory efficiently when handling iterators (like &lt;a href="#lists"&gt;lists&lt;/a&gt; or &lt;a href="#dictionaries-and-structuring-data"&gt;dictionaries&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;From the official &lt;a href="https://docs.python.org/3/library/itertools.html"&gt;Python 3.x documentation&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The module standardizes a core set of fast, memory efficient tools that are useful by themselves or in combination. Together, they form an “iterator algebra” making it possible to construct specialized tools succinctly and efficiently in pure Python.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The &lt;em&gt;itertools&lt;/em&gt; module comes in the standard library and must be imported.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://docs.python.org/3/library/operator.html"&gt;operator&lt;/a&gt; module will also be used. This module is not necessary when using itertools, but needed for some of the examples below.&lt;/p&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#accumulate"&gt;
  &lt;/a&gt;
  accumulate()
&lt;/h3&gt;

&lt;p&gt;Makes an iterator that returns the results of a function.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;python&lt;br&gt;
itertools.accumulate(iterable[, func])&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;data = [1, 2, 3, 4, 5]&lt;br&gt;
result = itertools.accumulate(data, operator.mul)&lt;br&gt;
for each in result:&lt;br&gt;
   print(each)&lt;br&gt;
1&lt;br&gt;
2&lt;br&gt;
6&lt;br&gt;
24&lt;br&gt;
120&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;The operator.mul takes two numbers and multiplies them:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;python&lt;br&gt;
operator.mul(1, 2)&lt;br&gt;
2&lt;br&gt;
operator.mul(2, 3)&lt;br&gt;
6&lt;br&gt;
operator.mul(6, 4)&lt;br&gt;
24&lt;br&gt;
operator.mul(24, 5)&lt;br&gt;
120&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Passing a function is optional:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;data = [5, 2, 6, 4, 5, 9, 1]&lt;br&gt;
result = itertools.accumulate(data)&lt;br&gt;
for each in result:&lt;br&gt;
   print(each)&lt;br&gt;
5&lt;br&gt;
7&lt;br&gt;
13&lt;br&gt;
17&lt;br&gt;
22&lt;br&gt;
31&lt;br&gt;
32&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;If no function is designated the items will be summed:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;python&lt;br&gt;
5&lt;br&gt;
5 + 2 = 7&lt;br&gt;
7 + 6 = 13&lt;br&gt;
13 + 4 = 17&lt;br&gt;
17 + 5 = 22&lt;br&gt;
22 + 9 = 31&lt;br&gt;
31 + 1 = 32&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#combinations"&gt;
  &lt;/a&gt;
  combinations()
&lt;/h3&gt;

&lt;p&gt;Takes an iterable and a integer. This will create all the unique combination that have r members.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;python&lt;br&gt;
itertools.combinations(iterable, r)&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;shapes = ['circle', 'triangle', 'square',]&lt;br&gt;
result = itertools.combinations(shapes, 2)&lt;br&gt;
for each in result:&lt;br&gt;
   print(each)&lt;br&gt;
('circle', 'triangle')&lt;br&gt;
('circle', 'square')&lt;br&gt;
('triangle', 'square')&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#combinationswithreplacement"&gt;
  &lt;/a&gt;
  combinations_with_replacement()
&lt;/h3&gt;

&lt;p&gt;Just like combinations(), but allows individual elements to be repeated more than once.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;python&lt;br&gt;
itertools.combinations_with_replacement(iterable, r)&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;shapes = ['circle', 'triangle', 'square']&lt;br&gt;
result = itertools.combinations_with_replacement(shapes, 2)&lt;br&gt;
for each in result:&lt;br&gt;
   print(each)&lt;br&gt;
('circle', 'circle')&lt;br&gt;
('circle', 'triangle')&lt;br&gt;
('circle', 'square')&lt;br&gt;
('triangle', 'triangle')&lt;br&gt;
('triangle', 'square')&lt;br&gt;
('square', 'square')&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#count"&gt;
  &lt;/a&gt;
  count()
&lt;/h3&gt;

&lt;p&gt;Makes an iterator that returns evenly spaced values starting with number start.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;python&lt;br&gt;
itertools.count(start=0, step=1)&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;for i in itertools.count(10,3):&lt;br&gt;
   print(i)&lt;br&gt;
   if i &amp;gt; 20:&lt;br&gt;
       break&lt;br&gt;
10&lt;br&gt;
13&lt;br&gt;
16&lt;br&gt;
19&lt;br&gt;
22&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cycle"&gt;
  &lt;/a&gt;
  cycle()
&lt;/h3&gt;

&lt;p&gt;This function cycles through an iterator endlessly.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;python&lt;br&gt;
itertools.cycle(iterable)&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;colors = ['red', 'orange', 'yellow', 'green', 'blue', 'violet']&lt;br&gt;
for color in itertools.cycle(colors):&lt;br&gt;
   print(color)&lt;br&gt;
red&lt;br&gt;
orange&lt;br&gt;
yellow&lt;br&gt;
green&lt;br&gt;
blue&lt;br&gt;
violet&lt;br&gt;
red&lt;br&gt;
orange&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;When reached the end of the iterable it start over again from the beginning.&lt;/p&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#chain"&gt;
  &lt;/a&gt;
  chain()
&lt;/h3&gt;

&lt;p&gt;Take a series of iterables and return them as one long iterable.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;python&lt;br&gt;
itertools.chain(*iterables)&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;colors = ['red', 'orange', 'yellow', 'green', 'blue']&lt;br&gt;
shapes = ['circle', 'triangle', 'square', 'pentagon']&lt;br&gt;
result = itertools.chain(colors, shapes)&lt;br&gt;
for each in result:&lt;br&gt;
   print(each)&lt;br&gt;
red&lt;br&gt;
orange&lt;br&gt;
yellow&lt;br&gt;
green&lt;br&gt;
blue&lt;br&gt;
circle&lt;br&gt;
triangle&lt;br&gt;
square&lt;br&gt;
pentagon&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#compress"&gt;
  &lt;/a&gt;
  compress()
&lt;/h3&gt;

&lt;p&gt;Filters one iterable with another.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;python&lt;br&gt;
itertools.compress(data, selectors)&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;shapes = ['circle', 'triangle', 'square', 'pentagon']&lt;br&gt;
selections = [True, False, True, False]&lt;br&gt;
result = itertools.compress(shapes, selections)&lt;br&gt;
for each in result:&lt;br&gt;
   print(each)&lt;br&gt;
circle&lt;br&gt;
square&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dropwhile"&gt;
  &lt;/a&gt;
  dropwhile()
&lt;/h3&gt;

&lt;p&gt;Make an iterator that drops elements from the iterable as long as the predicate is true; afterwards, returns every element.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;python&lt;br&gt;
itertools.dropwhile(predicate, iterable)&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1]&lt;br&gt;
result = itertools.dropwhile(lambda x: x&amp;lt;5, data)&lt;br&gt;
for each in result:&lt;br&gt;
   print(each)&lt;br&gt;
5&lt;br&gt;
6&lt;br&gt;
7&lt;br&gt;
8&lt;br&gt;
9&lt;br&gt;
10&lt;br&gt;
1&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#filterfalse"&gt;
  &lt;/a&gt;
  filterfalse()
&lt;/h3&gt;

&lt;p&gt;Makes an iterator that filters elements from iterable returning only those for which the predicate is False.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;python&lt;br&gt;
itertools.filterfalse(predicate, iterable)&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1]&lt;br&gt;
result = itertools.filterfalse(lambda x: x&amp;lt;5, data)&lt;br&gt;
for each in result:&lt;br&gt;
   print(each)&lt;br&gt;
5&lt;br&gt;
6&lt;br&gt;
7&lt;br&gt;
8&lt;br&gt;
9&lt;br&gt;
10&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#groupby"&gt;
  &lt;/a&gt;
  groupby()
&lt;/h3&gt;

&lt;p&gt;Simply put, this function groups things together.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;python&lt;br&gt;
itertools.groupby(iterable, key=None)&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;robots = [{&lt;br&gt;
    'name': 'blaster',&lt;br&gt;
    'faction': 'autobot'&lt;br&gt;
}, {&lt;br&gt;
    'name': 'galvatron',&lt;br&gt;
    'faction': 'decepticon'&lt;br&gt;
}, {&lt;br&gt;
    'name': 'jazz',&lt;br&gt;
    'faction': 'autobot'&lt;br&gt;
}, {&lt;br&gt;
    'name': 'metroplex',&lt;br&gt;
    'faction': 'autobot'&lt;br&gt;
}, {&lt;br&gt;
    'name': 'megatron',&lt;br&gt;
    'faction': 'decepticon'&lt;br&gt;
}, {&lt;br&gt;
    'name': 'starcream',&lt;br&gt;
    'faction': 'decepticon'&lt;br&gt;
}]&lt;br&gt;
for key, group in itertools.groupby(robots, key=lambda x: x['faction']):&lt;br&gt;
   print(key)&lt;br&gt;
   print(list(group))&lt;br&gt;
autobot&lt;br&gt;
[{'name': 'blaster', 'faction': 'autobot'}]&lt;br&gt;
decepticon&lt;br&gt;
[{'name': 'galvatron', 'faction': 'decepticon'}]&lt;br&gt;
autobot&lt;br&gt;
[{'name': 'jazz', 'faction': 'autobot'}, {'name': 'metroplex', 'faction': 'autobot'}]&lt;br&gt;
decepticon&lt;br&gt;
[{'name': 'megatron', 'faction': 'decepticon'}, {'name': 'starcream', 'faction': 'decepticon'}]&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#islice"&gt;
  &lt;/a&gt;
  islice()
&lt;/h3&gt;

&lt;p&gt;This function is very much like slices. This allows you to cut out a piece of an iterable.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;python&lt;br&gt;
itertools.islice(iterable, start, stop[, step])&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;colors = ['red', 'orange', 'yellow', 'green', 'blue',]&lt;br&gt;
few_colors = itertools.islice(colors, 2)&lt;br&gt;
for each in few_colors:&lt;br&gt;
   print(each)&lt;br&gt;
red&lt;br&gt;
orange&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#permutations"&gt;
  &lt;/a&gt;
  permutations()
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;python&lt;br&gt;
itertools.permutations(iterable, r=None)&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;alpha_data = ['a', 'b', 'c']&lt;br&gt;
result = itertools.permutations(alpha_data)&lt;br&gt;
for each in result:&lt;br&gt;
   print(each)&lt;br&gt;
('a', 'b', 'c')&lt;br&gt;
('a', 'c', 'b')&lt;br&gt;
('b', 'a', 'c')&lt;br&gt;
('b', 'c', 'a')&lt;br&gt;
('c', 'a', 'b')&lt;br&gt;
('c', 'b', 'a')&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#product"&gt;
  &lt;/a&gt;
  product()
&lt;/h3&gt;

&lt;p&gt;Creates the cartesian products from a series of iterables.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;num_data = [1, 2, 3]&lt;br&gt;
alpha_data = ['a', 'b', 'c']&lt;br&gt;
result = itertools.product(num_data, alpha_data)&lt;br&gt;
for each in result:&lt;br&gt;
    print(each)&lt;br&gt;
(1, 'a')&lt;br&gt;
(1, 'b')&lt;br&gt;
(1, 'c')&lt;br&gt;
(2, 'a')&lt;br&gt;
(2, 'b')&lt;br&gt;
(2, 'c')&lt;br&gt;
(3, 'a')&lt;br&gt;
(3, 'b')&lt;br&gt;
(3, 'c')&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#repeat"&gt;
  &lt;/a&gt;
  repeat()
&lt;/h3&gt;

&lt;p&gt;This function will repeat an object over and over again. Unless, there is a times argument.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;python&lt;br&gt;
itertools.repeat(object[, times])&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;for i in itertools.repeat("spam", 3):&lt;br&gt;
    print(i)&lt;br&gt;
spam&lt;br&gt;
spam&lt;br&gt;
spam&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#starmap"&gt;
  &lt;/a&gt;
  starmap()
&lt;/h3&gt;

&lt;p&gt;Makes an iterator that computes the function using arguments obtained from the iterable.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;python&lt;br&gt;
itertools.starmap(function, iterable)&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;data = [(2, 6), (8, 4), (7, 3)]&lt;br&gt;
result = itertools.starmap(operator.mul, data)&lt;br&gt;
for each in result:&lt;br&gt;
   print(each)&lt;br&gt;
12&lt;br&gt;
32&lt;br&gt;
21&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#takewhile"&gt;
  &lt;/a&gt;
  takewhile()
&lt;/h3&gt;

&lt;p&gt;The opposite of dropwhile(). Makes an iterator and returns elements from the iterable as long as the predicate is true.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;python&lt;br&gt;
itertools.takewhile(predicate, iterable)&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1]&lt;br&gt;
result = itertools.takewhile(lambda x: x&amp;lt;5, data)&lt;br&gt;
for each in result:&lt;br&gt;
   print(each)&lt;br&gt;
1&lt;br&gt;
2&lt;br&gt;
3&lt;br&gt;
4&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tee"&gt;
  &lt;/a&gt;
  tee()
&lt;/h3&gt;

&lt;p&gt;Return n independent iterators from a single iterable.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;python&lt;br&gt;
itertools.tee(iterable, n=2)&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;colors = ['red', 'orange', 'yellow', 'green', 'blue']&lt;br&gt;
alpha_colors, beta_colors = itertools.tee(colors)&lt;br&gt;
for each in alpha_colors:&lt;br&gt;
   print(each)&lt;br&gt;
red&lt;br&gt;
orange&lt;br&gt;
yellow&lt;br&gt;
green&lt;br&gt;
blue&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;colors = ['red', 'orange', 'yellow', 'green', 'blue']&lt;br&gt;
alpha_colors, beta_colors = itertools.tee(colors)&lt;br&gt;
for each in beta_colors:&lt;br&gt;
   print(each)&lt;br&gt;
red&lt;br&gt;
orange&lt;br&gt;
yellow&lt;br&gt;
green&lt;br&gt;
blue&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ziplongest"&gt;
  &lt;/a&gt;
  zip_longest()
&lt;/h3&gt;

&lt;p&gt;Makes an iterator that aggregates elements from each of the iterables. If the iterables are of uneven length, missing values are filled-in with fillvalue. Iteration continues until the longest iterable is exhausted.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;python&lt;br&gt;
itertools.zip_longest(*iterables, fillvalue=None)&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;colors = ['red', 'orange', 'yellow', 'green', 'blue',]&lt;br&gt;
data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10,]&lt;br&gt;
for each in itertools.zip_longest(colors, data, fillvalue=None):&lt;br&gt;
   print(each)&lt;br&gt;
('red', 1)&lt;br&gt;
('orange', 2)&lt;br&gt;
('yellow', 3)&lt;br&gt;
('green', 4)&lt;br&gt;
('blue', 5)&lt;br&gt;
(None, 6)&lt;br&gt;
(None, 7)&lt;br&gt;
(None, 8)&lt;br&gt;
(None, 9)&lt;br&gt;
(None, 10)&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#comprehensions"&gt;
  &lt;/a&gt;
  Comprehensions
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#list-comprehension"&gt;
  &lt;/a&gt;
  List comprehension
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;a = [1, 3, 5, 7, 9, 11]&lt;/p&gt;

&lt;p&gt;[i - 1 for i in a]&lt;br&gt;
[0, 2, 4, 6, 8, 10]&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#set-comprehension"&gt;
  &lt;/a&gt;
  Set comprehension
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;b = {"abc", "def"}&lt;br&gt;
{s.upper() for s in b}&lt;br&gt;
{"ABC", "DEF"}&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#dict-comprehension"&gt;
  &lt;/a&gt;
  Dict comprehension
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;c = {'name': 'Pooka', 'age': 5}&lt;br&gt;
{v: k for k, v in c.items()}&lt;br&gt;
{'Pooka': 'name', 5: 'age'}&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;A List comprehension can be generated from a dictionary:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;c = {'name': 'Pooka', 'first_name': 'Oooka'}&lt;br&gt;
["{}:{}".format(k.upper(), v.upper()) for k, v in c.items()]&lt;br&gt;
['NAME:POOKA', 'FIRST_NAME:OOOKA']&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#manipulating-strings"&gt;
  &lt;/a&gt;
  Manipulating Strings
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#escape-characters"&gt;
  &lt;/a&gt;
  Escape Characters
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Escape character&lt;/th&gt;
&lt;th&gt;Prints as&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;\'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Single quote&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;\"&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Double quote&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;\t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Tab&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;\n&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Newline (line break)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;\\&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Backslash&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;print("Hello there!\nHow are you?\nI\'m doing fine.")&lt;br&gt;
Hello there!&lt;br&gt;
How are you?&lt;br&gt;
I'm doing fine.&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#raw-strings"&gt;
  &lt;/a&gt;
  Raw Strings
&lt;/h3&gt;

&lt;p&gt;A raw string completely ignores all escape characters and prints any backslash that appears in the string.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;print(r'That is Carol\'s cat.')&lt;br&gt;
That is Carol\'s cat.&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;Note: mostly used for regular expression definition (see &lt;code&gt;re&lt;/code&gt; package)&lt;/p&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#multiline-strings-with-triple-quotes"&gt;
  &lt;/a&gt;
  Multiline Strings with Triple Quotes
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;print('''Dear Alice,&lt;/p&gt;

&lt;p&gt;Eve's cat has been arrested for catnapping, cat burglary, and extortion.&lt;/p&gt;

&lt;p&gt;Sincerely,&lt;br&gt;
Bob''')&lt;br&gt;
Dear Alice,&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;Eve's cat has been arrested for catnapping, cat burglary, and extortion.&lt;/p&gt;

&lt;p&gt;Sincerely,&lt;br&gt;
Bob&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To keep a nicer flow in your code, you can use the &lt;code&gt;dedent&lt;/code&gt; function from the &lt;code&gt;textwrap&lt;/code&gt; standard package.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;from textwrap import dedent&lt;/p&gt;

&lt;p&gt;def my_function():&lt;br&gt;
    print('''&lt;br&gt;
        Dear Alice,&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    Eve's cat has been arrested for catnapping, cat burglary, and extortion.

    Sincerely,
    Bob
    ''').strip()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;This generates the same string than before.&lt;/p&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#indexing-and-slicing-strings"&gt;
  &lt;/a&gt;
  Indexing and Slicing Strings
&lt;/h3&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;H   e   l   l   o       w   o   r   l   d    !
0   1   2   3   4   5   6   7   8   9   10   11
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;spam = 'Hello world!'&lt;/p&gt;

&lt;p&gt;spam[0]&lt;br&gt;
'H'&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;spam[4]&lt;br&gt;
'o'&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;spam[-1]&lt;br&gt;
'!'&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;Slicing:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;spam[0:5]&lt;br&gt;
'Hello'&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;spam[:5]&lt;br&gt;
'Hello'&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;spam[6:]&lt;br&gt;
'world!'&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;spam[6:-1]&lt;br&gt;
'world'&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;spam[:-1]&lt;br&gt;
'Hello world'&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;spam[::-1]&lt;br&gt;
'!dlrow olleH'&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;spam = 'Hello world!'&lt;br&gt;
fizz = spam[0:5]&lt;br&gt;
fizz&lt;br&gt;
'Hello'&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-in-and-not-in-operators-with-strings"&gt;
  &lt;/a&gt;
  The in and not in Operators with Strings
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;'Hello' in 'Hello World'&lt;br&gt;
True&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;'Hello' in 'Hello'&lt;br&gt;
True&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;'HELLO' in 'Hello World'&lt;br&gt;
False&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;'' in 'spam'&lt;br&gt;
True&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;'cats' not in 'cats and dogs'&lt;br&gt;
False&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#the-in-and-not-in-operators-with-list"&gt;
  &lt;/a&gt;
  The in and not in Operators with list
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;a = [1, 2, 3, 4]&lt;br&gt;
5 in a&lt;br&gt;
False&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;2 in a&lt;br&gt;
True&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-upper-lower-isupper-and-islower-string-methods"&gt;
  &lt;/a&gt;
  The upper(), lower(), isupper(), and islower() String Methods
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;upper()&lt;/code&gt; and &lt;code&gt;lower()&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;spam = 'Hello world!'&lt;br&gt;
spam = spam.upper()&lt;br&gt;
spam&lt;br&gt;
'HELLO WORLD!'&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;spam = spam.lower()&lt;br&gt;
spam&lt;br&gt;
'hello world!'&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;isupper() and islower():&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;spam = 'Hello world!'&lt;br&gt;
spam.islower()&lt;br&gt;
False&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;spam.isupper()&lt;br&gt;
False&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;'HELLO'.isupper()&lt;br&gt;
True&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;'abc12345'.islower()&lt;br&gt;
True&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;'12345'.islower()&lt;br&gt;
False&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;'12345'.isupper()&lt;br&gt;
False&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-isx-string-methods"&gt;
  &lt;/a&gt;
  The isX String Methods
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;isalpha()&lt;/strong&gt; returns True if the string consists only of letters and is not blank.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;isalnum()&lt;/strong&gt; returns True if the string consists only of letters and numbers and is not blank.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;isdecimal()&lt;/strong&gt; returns True if the string consists only of numeric characters and is not blank.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;isspace()&lt;/strong&gt; returns True if the string consists only of spaces,tabs, and new-lines and is not blank.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;istitle()&lt;/strong&gt; returns True if the string consists only of words that begin with an uppercase letter followed by only lowercase letters.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-startswith-and-endswith-string-methods"&gt;
  &lt;/a&gt;
  The startswith() and endswith() String Methods
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;'Hello world!'.startswith('Hello')&lt;br&gt;
True&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;'Hello world!'.endswith('world!')&lt;br&gt;
True&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;'abc123'.startswith('abcdef')&lt;br&gt;
False&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;'abc123'.endswith('12')&lt;br&gt;
False&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;'Hello world!'.startswith('Hello world!')&lt;br&gt;
True&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;'Hello world!'.endswith('Hello world!')&lt;br&gt;
True&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-join-and-split-string-methods"&gt;
  &lt;/a&gt;
  The join() and split() String Methods
&lt;/h3&gt;

&lt;p&gt;join():&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;', '.join(['cats', 'rats', 'bats'])&lt;br&gt;
'cats, rats, bats'&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;' '.join(['My', 'name', 'is', 'Simon'])&lt;br&gt;
'My name is Simon'&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;'ABC'.join(['My', 'name', 'is', 'Simon'])&lt;br&gt;
'MyABCnameABCisABCSimon'&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;split():&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;'My name is Simon'.split()&lt;br&gt;
['My', 'name', 'is', 'Simon']&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;'MyABCnameABCisABCSimon'.split('ABC')&lt;br&gt;
['My', 'name', 'is', 'Simon']&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;'My name is Simon'.split('m')&lt;br&gt;
['My na', 'e is Si', 'on']&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#justifying-text-with-rjust-ljust-and-center"&gt;
  &lt;/a&gt;
  Justifying Text with rjust(), ljust(), and center()
&lt;/h3&gt;

&lt;p&gt;rjust() and ljust():&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;'Hello'.rjust(10)&lt;br&gt;
'     Hello'&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;'Hello'.rjust(20)&lt;br&gt;
'               Hello'&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;'Hello World'.rjust(20)&lt;br&gt;
'         Hello World'&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;'Hello'.ljust(10)&lt;br&gt;
'Hello     '&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;An optional second argument to rjust() and ljust() will specify a fill character other than a space character. Enter the following into the interactive shell:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;'Hello'.rjust(20, '&lt;em&gt;')&lt;br&gt;
'&lt;/em&gt;**************Hello'&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;'Hello'.ljust(20, '-')&lt;br&gt;
'Hello---------------'&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;center():&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;'Hello'.center(20)&lt;br&gt;
'       Hello       '&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;'Hello'.center(20, '=')&lt;br&gt;
'=======Hello========'&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#removing-whitespace-with-strip-rstrip-and-lstrip"&gt;
  &lt;/a&gt;
  Removing Whitespace with strip(), rstrip(), and lstrip()
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;spam = '    Hello World     '&lt;br&gt;
spam.strip()&lt;br&gt;
'Hello World'&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;spam.lstrip()&lt;br&gt;
'Hello World '&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;spam.rstrip()&lt;br&gt;
'    Hello World'&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;spam = 'SpamSpamBaconSpamEggsSpamSpam'&lt;br&gt;
spam.strip('ampS')&lt;br&gt;
'BaconSpamEggs'&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#copying-and-pasting-strings-with-the-pyperclip-module-need-pip-install"&gt;
  &lt;/a&gt;
  Copying and Pasting Strings with the pyperclip Module (need pip install)
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;import pyperclip&lt;/p&gt;

&lt;p&gt;pyperclip.copy('Hello world!')&lt;/p&gt;

&lt;p&gt;pyperclip.paste()&lt;br&gt;
'Hello world!'&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#string-formatting"&gt;
  &lt;/a&gt;
  String Formatting
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#-operator"&gt;
  &lt;/a&gt;
  % operator
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;name = 'Pete'&lt;br&gt;
'Hello %s' % name&lt;br&gt;
"Hello Pete"&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;We can use the &lt;code&gt;%x&lt;/code&gt; format specifier to convert an int value to a string:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;num = 5&lt;br&gt;
'I have %x apples' % num&lt;br&gt;
"I have 5 apples"&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;Note: For new code, using &lt;a href="#string-formatting-strformat"&gt;str.format&lt;/a&gt; or &lt;a href="#formatted-string-literals-or-f-strings-python-36"&gt;f-strings&lt;/a&gt; (Python 3.6+) is strongly recommended over the &lt;code&gt;%&lt;/code&gt; operator.&lt;/p&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#string-formatting-strformat"&gt;
  &lt;/a&gt;
  String Formatting (str.format)
&lt;/h3&gt;

&lt;p&gt;Python 3 introduced a new way to do string formatting that was later back-ported to Python 2.7. This makes the syntax for string formatting more regular.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;name = 'John'&lt;br&gt;
age = 20'&lt;/p&gt;

&lt;p&gt;"Hello I'm {}, my age is {}".format(name, age)&lt;br&gt;
"Hello I'm John, my age is 20"&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;"Hello I'm {0}, my age is {1}".format(name, age)&lt;br&gt;
"Hello I'm John, my age is 20"&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;The official &lt;a href="https://docs.python.org/3/library/stdtypes.html?highlight=sprintf#printf-style-string-formatting"&gt;Python 3.x documentation&lt;/a&gt; recommend &lt;code&gt;str.format&lt;/code&gt; over the &lt;code&gt;%&lt;/code&gt; operator:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The formatting operations described here exhibit a variety of quirks that lead to a number of common errors (such as failing to display tuples and dictionaries correctly). Using the newer formatted string literals or the str.format() interface helps avoid these errors. These alternatives also provide more powerful, flexible and extensible approaches to formatting text.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lazy-string-formatting"&gt;
  &lt;/a&gt;
  Lazy string formatting
&lt;/h3&gt;

&lt;p&gt;You would only use &lt;code&gt;%s&lt;/code&gt; string formatting on functions that can do lazy parameters evaluation,&lt;br&gt;
the most common being logging:&lt;/p&gt;

&lt;p&gt;Prefer:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;name = "alice"&lt;br&gt;
logging.debug("User name: %s", name)&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;Over:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;logging.debug("User name: {}".format(name))&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;Or:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;logging.debug("User name: " + name)&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#formatted-string-literals-or-fstrings-python-36"&gt;
  &lt;/a&gt;
  Formatted String Literals or f-strings (Python 3.6+)
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;name = 'Elizabeth'&lt;br&gt;
f'Hello {name}!'&lt;br&gt;
'Hello Elizabeth!&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;It is even possible to do inline arithmetic with it:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;a = 5&lt;br&gt;
b = 10&lt;br&gt;
f'Five plus ten is {a + b} and not {2 * (a + b)}.'&lt;br&gt;
'Five plus ten is 15 and not 30.'&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#template-strings"&gt;
  &lt;/a&gt;
  Template Strings
&lt;/h3&gt;

&lt;p&gt;A simpler and less powerful mechanism, but it is recommended when handling format strings generated by users. Due to their reduced complexity template strings are a safer choice.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;from string import Template&lt;br&gt;
name = 'Elizabeth'&lt;br&gt;
t = Template('Hey $name!')&lt;br&gt;
t.substitute(name=name)&lt;br&gt;
'Hey Elizabeth!'&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#regular-expressions"&gt;
  &lt;/a&gt;
  Regular Expressions
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Import the regex module with &lt;code&gt;import re&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Create a Regex object with the &lt;code&gt;re.compile()&lt;/code&gt; function. (Remember to use a raw string.)&lt;/li&gt;
&lt;li&gt;Pass the string you want to search into the Regex object’s &lt;code&gt;search()&lt;/code&gt; method. This returns a &lt;code&gt;Match&lt;/code&gt; object.&lt;/li&gt;
&lt;li&gt;Call the Match object’s &lt;code&gt;group()&lt;/code&gt; method to return a string of the actual matched text.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All the regex functions in Python are in the re module:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;import re&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#matching-regex-objects"&gt;
  &lt;/a&gt;
  Matching Regex Objects
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;phone_num_regex = re.compile(r'\d\d\d-\d\d\d-\d\d\d\d')&lt;/p&gt;

&lt;p&gt;mo = phone_num_regex.search('My number is 415-555-4242.')&lt;/p&gt;

&lt;p&gt;print('Phone number found: {}'.format(mo.group()))&lt;br&gt;
Phone number found: 415-555-4242&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#grouping-with-parentheses"&gt;
  &lt;/a&gt;
  Grouping with Parentheses
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;phone_num_regex = re.compile(r'(\d\d\d)-(\d\d\d-\d\d\d\d)')&lt;/p&gt;

&lt;p&gt;mo = phone_num_regex.search('My number is 415-555-4242.')&lt;/p&gt;

&lt;p&gt;mo.group(1)&lt;br&gt;
'415'&lt;/p&gt;

&lt;p&gt;mo.group(2)&lt;br&gt;
'555-4242'&lt;/p&gt;

&lt;p&gt;mo.group(0)&lt;br&gt;
'415-555-4242'&lt;/p&gt;

&lt;p&gt;mo.group()&lt;br&gt;
'415-555-4242'&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;To retrieve all the groups at once: use the groups() method—note the plural form for the name.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;mo.groups()&lt;br&gt;
('415', '555-4242')&lt;/p&gt;

&lt;p&gt;area_code, main_number = mo.groups()&lt;/p&gt;

&lt;p&gt;print(area_code)&lt;br&gt;
415&lt;/p&gt;

&lt;p&gt;print(main_number)&lt;br&gt;
555-4242&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#matching-multiple-groups-with-the-pipe"&gt;
  &lt;/a&gt;
  Matching Multiple Groups with the Pipe
&lt;/h3&gt;

&lt;p&gt;The | character is called a pipe. You can use it anywhere you want to match one of many expressions. For example, the regular expression r'Batman|Tina Fey' will match either 'Batman' or 'Tina Fey'.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;hero_regex = re.compile (r'Batman|Tina Fey')&lt;/p&gt;

&lt;p&gt;mo1 = hero_regex.search('Batman and Tina Fey.')&lt;/p&gt;

&lt;p&gt;mo1.group()&lt;br&gt;
'Batman'&lt;/p&gt;

&lt;p&gt;mo2 = hero_regex.search('Tina Fey and Batman.')&lt;/p&gt;

&lt;p&gt;mo2.group()&lt;br&gt;
'Tina Fey'&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can also use the pipe to match one of several patterns as part of your regex:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;bat_regex = re.compile(r'Bat(man|mobile|copter|bat)')&lt;/p&gt;

&lt;p&gt;mo = bat_regex.search('Batmobile lost a wheel')&lt;/p&gt;

&lt;p&gt;mo.group()&lt;br&gt;
'Batmobile'&lt;/p&gt;

&lt;p&gt;mo.group(1)&lt;br&gt;
'mobile'&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#optional-matching-with-the-question-mark"&gt;
  &lt;/a&gt;
  Optional Matching with the Question Mark
&lt;/h3&gt;

&lt;p&gt;The ? character flags the group that precedes it as an optional part of the pattern.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;bat_regex = re.compile(r'Bat(wo)?man')&lt;br&gt;
mo1 = bat_regex.search('The Adventures of Batman')&lt;br&gt;
mo1.group()&lt;br&gt;
'Batman'&lt;/p&gt;

&lt;p&gt;mo2 = bat_regex.search('The Adventures of Batwoman')&lt;br&gt;
mo2.group()&lt;br&gt;
'Batwoman'&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#matching-zero-or-more-with-the-star"&gt;
  &lt;/a&gt;
  Matching Zero or More with the Star
&lt;/h3&gt;

&lt;p&gt;The * (called the star or asterisk) means “match zero or more”—the group that precedes the star can occur any number of times in the text.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;bat_regex = re.compile(r'Bat(wo)*man')&lt;br&gt;
mo1 = bat_regex.search('The Adventures of Batman')&lt;br&gt;
mo1.group()&lt;br&gt;
'Batman'&lt;/p&gt;

&lt;p&gt;mo2 = bat_regex.search('The Adventures of Batwoman')&lt;br&gt;
mo2.group()&lt;br&gt;
'Batwoman'&lt;/p&gt;

&lt;p&gt;mo3 = bat_regex.search('The Adventures of Batwowowowoman')&lt;br&gt;
mo3.group()&lt;br&gt;
'Batwowowowoman'&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#matching-one-or-more-with-the-plus"&gt;
  &lt;/a&gt;
  Matching One or More with the Plus
&lt;/h3&gt;

&lt;p&gt;While * means “match zero or more,” the + (or plus) means “match one or more”. The group preceding a plus must appear at least once. It is not optional:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;bat_regex = re.compile(r'Bat(wo)+man')&lt;br&gt;
mo1 = bat_regex.search('The Adventures of Batwoman')&lt;br&gt;
mo1.group()&lt;br&gt;
'Batwoman'&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;mo2 = bat_regex.search('The Adventures of Batwowowowoman')&lt;br&gt;
mo2.group()&lt;br&gt;
'Batwowowowoman'&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;mo3 = bat_regex.search('The Adventures of Batman')&lt;br&gt;
mo3 is None&lt;br&gt;
True&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#matching-specific-repetitions-with-curly-brackets"&gt;
  &lt;/a&gt;
  Matching Specific Repetitions with Curly Brackets
&lt;/h3&gt;

&lt;p&gt;If you have a group that you want to repeat a specific number of times, follow the group in your regex with a number in curly brackets. For example, the regex (Ha){3} will match the string 'HaHaHa', but it will not match 'HaHa', since the latter has only two repeats of the (Ha) group.&lt;/p&gt;

&lt;p&gt;Instead of one number, you can specify a range by writing a minimum, a comma, and a maximum in between the curly brackets. For example, the regex (Ha){3,5} will match 'HaHaHa', 'HaHaHaHa', and 'HaHaHaHaHa'.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;ha_regex = re.compile(r'(Ha){3}')&lt;br&gt;
mo1 = ha_regex.search('HaHaHa')&lt;br&gt;
mo1.group()&lt;br&gt;
'HaHaHa'&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;mo2 = ha_regex.search('Ha')&lt;br&gt;
mo2 is None&lt;br&gt;
True&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#greedy-and-nongreedy-matching"&gt;
  &lt;/a&gt;
  Greedy and Nongreedy Matching
&lt;/h3&gt;

&lt;p&gt;Python’s regular expressions are greedy by default, which means that in ambiguous situations they will match the longest string possible. The non-greedy version of the curly brackets, which matches the shortest string possible, has the closing curly bracket followed by a question mark.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;greedy_ha_regex = re.compile(r'(Ha){3,5}')&lt;br&gt;
mo1 = greedy_ha_regex.search('HaHaHaHaHa')&lt;br&gt;
mo1.group()&lt;br&gt;
'HaHaHaHaHa'&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;nongreedy_ha_regex = re.compile(r'(Ha){3,5}?')&lt;br&gt;
mo2 = nongreedy_ha_regex.search('HaHaHaHaHa')&lt;br&gt;
mo2.group()&lt;br&gt;
'HaHaHa'&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-findall-method"&gt;
  &lt;/a&gt;
  The findall() Method
&lt;/h3&gt;

&lt;p&gt;In addition to the search() method, Regex objects also have a findall() method. While search() will return a Match object of the first matched text in the searched string, the findall() method will return the strings of every match in the searched string.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;phone_num_regex = re.compile(r'\d\d\d-\d\d\d-\d\d\d\d') # has no groups&lt;/p&gt;

&lt;p&gt;phone_num_regex.findall('Cell: 415-555-9999 Work: 212-555-0000')&lt;br&gt;
['415-555-9999', '212-555-0000']&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;To summarize what the findall() method returns, remember the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;When called on a regex with no groups, such as \d-\d\d\d-\d\d\d\d, the method findall() returns a list of ng matches, such as ['415-555-9999', '212-555-0000'].&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When called on a regex that has groups, such as (\d\d\d)-(d\d)-(\d\d\d\d), the method findall() returns a list of es of strings (one string for each group), such as [('415', '555', '9999'), ('212', '555', '0000')].&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#making-your-own-character-classes"&gt;
  &lt;/a&gt;
  Making Your Own Character Classes
&lt;/h3&gt;

&lt;p&gt;There are times when you want to match a set of characters but the shorthand character classes (\d, \w, \s, and so on) are too broad. You can define your own character class using square brackets. For example, the character class [aeiouAEIOU] will match any vowel, both lowercase and uppercase.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;vowel_regex = re.compile(r'[aeiouAEIOU]')&lt;/p&gt;

&lt;p&gt;vowel_regex.findall('Robocop eats baby food. BABY FOOD.')&lt;br&gt;
['o', 'o', 'o', 'e', 'a', 'a', 'o', 'o', 'A', 'O', 'O']&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can also include ranges of letters or numbers by using a hyphen. For example, the character class [a-zA-Z0-9] will match all lowercase letters, uppercase letters, and numbers.&lt;/p&gt;

&lt;p&gt;By placing a caret character (^) just after the character class’s opening bracket, you can make a negative character class. A negative character class will match all the characters that are not in the character class. For example, enter the following into the interactive shell:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;consonant_regex = re.compile(r'[^aeiouAEIOU]')&lt;/p&gt;

&lt;p&gt;consonant_regex.findall('Robocop eats baby food. BABY FOOD.')&lt;br&gt;
['R', 'b', 'c', 'p', ' ', 't', 's', ' ', 'b', 'b', 'y', ' ', 'f', 'd', '.', '&lt;br&gt;
', 'B', 'B', 'Y', ' ', 'F', 'D', '.']&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-caret-and-dollar-sign-characters"&gt;
  &lt;/a&gt;
  The Caret and Dollar Sign Characters
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You can also use the caret symbol (^) at the start of a regex to indicate that a match must occur at the beginning of the searched text.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Likewise, you can put a dollar sign (\$) at the end of the regex to indicate the string must end with this regex pattern.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;And you can use the ^ and \$ together to indicate that the entire string must match the regex—that is, it’s not enough for a match to be made on some subset of the string.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The r'^Hello' regular expression string matches strings that begin with 'Hello':&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;begins_with_hello = re.compile(r'^Hello')&lt;/p&gt;

&lt;p&gt;begins_with_hello.search('Hello world!')&lt;br&gt;
&amp;lt;_sre.SRE_Match object; span=(0, 5), match='Hello'&amp;gt;&lt;/p&gt;

&lt;p&gt;begins_with_hello.search('He said hello.') is None&lt;br&gt;
True&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;The r'\d\$' regular expression string matches strings that end with a numeric character from 0 to 9:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;whole_string_is_num = re.compile(r'^\d+$')&lt;/p&gt;

&lt;p&gt;whole_string_is_num.search('1234567890')&lt;br&gt;
&amp;lt;_sre.SRE_Match object; span=(0, 10), match='1234567890'&amp;gt;&lt;/p&gt;

&lt;p&gt;whole_string_is_num.search('12345xyz67890') is None&lt;br&gt;
True&lt;/p&gt;

&lt;p&gt;whole_string_is_num.search('12 34567890') is None&lt;br&gt;
True&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-wildcard-character"&gt;
  &lt;/a&gt;
  The Wildcard Character
&lt;/h3&gt;

&lt;p&gt;The . (or dot) character in a regular expression is called a wildcard and will match any character except for a newline:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;at_regex = re.compile(r'.at')&lt;/p&gt;

&lt;p&gt;at_regex.findall('The cat in the hat sat on the flat mat.')&lt;br&gt;
['cat', 'hat', 'sat', 'lat', 'mat']&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#matching-everything-with-dotstar"&gt;
  &lt;/a&gt;
  Matching Everything with Dot-Star
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;name_regex = re.compile(r'First Name: (.&lt;em&gt;) Last Name: (.&lt;/em&gt;)')&lt;/p&gt;

&lt;p&gt;mo = name_regex.search('First Name: Al Last Name: Sweigart')&lt;/p&gt;

&lt;p&gt;mo.group(1)&lt;br&gt;
'Al'&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;mo.group(2)&lt;br&gt;
'Sweigart'&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;The dot-star uses greedy mode: It will always try to match as much text as possible. To match any and all text in a nongreedy fashion, use the dot, star, and question mark (.*?). The question mark tells Python to match in a nongreedy way:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;nongreedy_regex = re.compile(r'&amp;lt;.*?&amp;gt;')&lt;br&gt;
mo = nongreedy_regex.search(' for dinner.&amp;gt;')&lt;br&gt;
mo.group()&lt;br&gt;
''&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;greedy_regex = re.compile(r'&amp;lt;.*&amp;gt;')&lt;br&gt;
mo = greedy_regex.search(' for dinner.&amp;gt;')&lt;br&gt;
mo.group()&lt;br&gt;
' for dinner.&amp;gt;'&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#matching-newlines-with-the-dot-character"&gt;
  &lt;/a&gt;
  Matching Newlines with the Dot Character
&lt;/h3&gt;

&lt;p&gt;The dot-star will match everything except a newline. By passing re.DOTALL as the second argument to re.compile(), you can make the dot character match all characters, including the newline character:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;no_newline_regex = re.compile('.*')&lt;br&gt;
no_newline_regex.search('Serve the public trust.\nProtect the innocent.\nUphold the law.').group()&lt;br&gt;
'Serve the public trust.'&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;newline_regex = re.compile('.*', re.DOTALL)&lt;br&gt;
newline_regex.search('Serve the public trust.\nProtect the innocent.\nUphold the law.').group()&lt;br&gt;
'Serve the public trust.\nProtect the innocent.\nUphold the law.'&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#review-of-regex-symbols"&gt;
  &lt;/a&gt;
  Review of Regex Symbols
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Symbol&lt;/th&gt;
&lt;th&gt;Matches&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;?&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;zero or one of the preceding group.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;*&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;zero or more of the preceding group.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;+&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;one or more of the preceding group.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;{n}&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;exactly n of the preceding group.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;{n,}&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;n or more of the preceding group.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;{,m}&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;0 to m of the preceding group.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;{n,m}&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;at least n and at most m of the preceding p.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;{n,m}?&lt;/code&gt; or &lt;code&gt;*?&lt;/code&gt; or &lt;code&gt;+?&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;performs a nongreedy match of the preceding p.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;^spam&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;means the string must begin with spam.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;spam$&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;means the string must end with spam.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;.&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;any character, except newline characters.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;\d&lt;/code&gt;, &lt;code&gt;\w&lt;/code&gt;, and &lt;code&gt;\s&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;a digit, word, or space character, respectively.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;\D&lt;/code&gt;, &lt;code&gt;\W&lt;/code&gt;, and &lt;code&gt;\S&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;anything except a digit, word, or space, respectively.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[abc]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;any character between the brackets (such as a, b, ).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[^abc]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;any character that isn’t between the brackets.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#caseinsensitive-matching"&gt;
  &lt;/a&gt;
  Case-Insensitive Matching
&lt;/h3&gt;

&lt;p&gt;To make your regex case-insensitive, you can pass re.IGNORECASE or re.I as a second argument to re.compile():&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;robocop = re.compile(r'robocop', re.I)&lt;/p&gt;

&lt;p&gt;robocop.search('Robocop is part man, part machine, all cop.').group()&lt;br&gt;
'Robocop'&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;robocop.search('ROBOCOP protects the innocent.').group()&lt;br&gt;
'ROBOCOP'&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;robocop.search('Al, why does your programming book talk about robocop so much?').group()&lt;br&gt;
'robocop'&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#substituting-strings-with-the-sub-method"&gt;
  &lt;/a&gt;
  Substituting Strings with the sub() Method
&lt;/h3&gt;

&lt;p&gt;The sub() method for Regex objects is passed two arguments:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The first argument is a string to replace any matches.&lt;/li&gt;
&lt;li&gt;The second is the string for the regular expression.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The sub() method returns a string with the substitutions applied:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;names_regex = re.compile(r'Agent \w+')&lt;/p&gt;

&lt;p&gt;names_regex.sub('CENSORED', 'Agent Alice gave the secret documents to Agent Bob.')&lt;br&gt;
'CENSORED gave the secret documents to CENSORED.'&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;Another example:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;agent_names_regex = re.compile(r'Agent (\w)\w*')&lt;/p&gt;

&lt;p&gt;agent_names_regex.sub(r'\1*&lt;strong&gt;&lt;em&gt;', 'Agent Alice told Agent Carol that Agent Eve knew Agent Bob was a double agent.')&lt;br&gt;
A&lt;/em&gt;&lt;/strong&gt;* told C**** that E**** knew B**** was a double agent.'&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#managing-complex-regexes"&gt;
  &lt;/a&gt;
  Managing Complex Regexes
&lt;/h3&gt;

&lt;p&gt;To tell the re.compile() function to ignore whitespace and comments inside the regular expression string, “verbose mode” can be enabled by passing the variable re.VERBOSE as the second argument to re.compile().&lt;/p&gt;

&lt;p&gt;Now instead of a hard-to-read regular expression like this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;python&lt;br&gt;
phone_regex = re.compile(r'((\d{3}|\(\d{3}\))?(\s|-|\.)?\d{3}(\s|-|\.)\d{4}(\s*(ext|x|ext.)\s*\d{2,5})?)')&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;you can spread the regular expression over multiple lines with comments like this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;python&lt;br&gt;
phone_regex = re.compile(r'''(&lt;br&gt;
    (\d{3}|\(\d{3}\))?            # area code&lt;br&gt;
    (\s|-|\.)?                    # separator&lt;br&gt;
    \d{3}                         # first 3 digits&lt;br&gt;
    (\s|-|\.)                     # separator&lt;br&gt;
    \d{4}                         # last 4 digits&lt;br&gt;
    (\s*(ext|x|ext.)\s*\d{2,5})?  # extension&lt;br&gt;
    )''', re.VERBOSE)&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#handling-file-and-directory-paths"&gt;
  &lt;/a&gt;
  Handling File and Directory Paths
&lt;/h2&gt;

&lt;p&gt;There are two main modules in Python that deals with path manipulation.&lt;br&gt;
One is the &lt;code&gt;os.path&lt;/code&gt; module and the other is the &lt;code&gt;pathlib&lt;/code&gt; module.&lt;br&gt;
The &lt;code&gt;pathlib&lt;/code&gt; module was added in Python 3.4, offering an object-oriented way&lt;br&gt;
to handle file system paths.&lt;/p&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#backslash-on-windows-and-forward-slash-on-os-x-and-linux"&gt;
  &lt;/a&gt;
  Backslash on Windows and Forward Slash on OS X and Linux
&lt;/h3&gt;

&lt;p&gt;On Windows, paths are written using backslashes (&lt;code&gt;\&lt;/code&gt;) as the separator between&lt;br&gt;
folder names. On Unix based operating system such as macOS, Linux, and BSDs,&lt;br&gt;
the forward slash (&lt;code&gt;/&lt;/code&gt;) is used as the path separator. Joining paths can be&lt;br&gt;
a headache if your code needs to work on different platforms.&lt;/p&gt;

&lt;p&gt;Fortunately, Python provides easy ways to handle this. We will showcase&lt;br&gt;
how to deal with this with both &lt;code&gt;os.path.join&lt;/code&gt; and &lt;code&gt;pathlib.Path.joinpath&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;os.path.join&lt;/code&gt; on Windows:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;import os&lt;/p&gt;

&lt;p&gt;os.path.join('usr', 'bin', 'spam')&lt;br&gt;
'usr\bin\spam'&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;And using &lt;code&gt;pathlib&lt;/code&gt; on *nix:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;from pathlib import Path&lt;/p&gt;

&lt;p&gt;print(Path('usr').joinpath('bin').joinpath('spam'))&lt;br&gt;
usr/bin/spam&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;pathlib&lt;/code&gt; also provides a shortcut to joinpath using the &lt;code&gt;/&lt;/code&gt; operator:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;from pathlib import Path&lt;/p&gt;

&lt;p&gt;print(Path('usr') / 'bin' / 'spam')&lt;br&gt;
usr/bin/spam&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;Notice the path separator is different between Windows and Unix based operating&lt;br&gt;
system, that's why you want to use one of the above methods instead of&lt;br&gt;
adding strings together to join paths together.&lt;/p&gt;

&lt;p&gt;Joining paths is helpful if you need to create different file paths under&lt;br&gt;
the same directory.&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;os.path.join&lt;/code&gt; on Windows:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;my_files = ['accounts.txt', 'details.csv', 'invite.docx']&lt;/p&gt;

&lt;p&gt;for filename in my_files:&lt;br&gt;
    print(os.path.join('C:\Users\asweigart', filename))&lt;br&gt;
C:\Users\asweigart\accounts.txt&lt;br&gt;
C:\Users\asweigart\details.csv&lt;br&gt;
C:\Users\asweigart\invite.docx&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;Using &lt;code&gt;pathlib&lt;/code&gt; on *nix:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;my_files = ['accounts.txt', 'details.csv', 'invite.docx']&lt;br&gt;
home = Path.home()&lt;br&gt;
for filename in my_files:&lt;br&gt;
    print(home / filename)&lt;br&gt;
/home/asweigart/accounts.txt&lt;br&gt;
/home/asweigart/details.csv&lt;br&gt;
/home/asweigart/invite.docx&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-current-working-directory"&gt;
  &lt;/a&gt;
  The Current Working Directory
&lt;/h3&gt;

&lt;p&gt;Using &lt;code&gt;os&lt;/code&gt; on Windows:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;import os&lt;/p&gt;

&lt;p&gt;os.getcwd()&lt;br&gt;
'C:\Python34'&lt;br&gt;
os.chdir('C:\Windows\System32')&lt;/p&gt;

&lt;p&gt;os.getcwd()&lt;br&gt;
'C:\Windows\System32'&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;Using &lt;code&gt;pathlib&lt;/code&gt; on *nix:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;from pathlib import Path&lt;br&gt;
from os import chdir&lt;/p&gt;

&lt;p&gt;print(Path.cwd())&lt;br&gt;
/home/asweigart&lt;/p&gt;

&lt;p&gt;chdir('/usr/lib/python3.6')&lt;br&gt;
print(Path.cwd())&lt;br&gt;
/usr/lib/python3.6&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-new-folders"&gt;
  &lt;/a&gt;
  Creating New Folders
&lt;/h3&gt;

&lt;p&gt;Using &lt;code&gt;os&lt;/code&gt; on Windows:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;import os&lt;br&gt;
os.makedirs('C:\delicious\walnut\waffles')&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;Using &lt;code&gt;pathlib&lt;/code&gt; on *nix:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;from pathlib import Path&lt;br&gt;
cwd = Path.cwd()&lt;br&gt;
(cwd / 'delicious' / 'walnut' / 'waffles').mkdir()&lt;br&gt;
Traceback (most recent call last):&lt;br&gt;
  File "", line 1, in &lt;br&gt;
  File "/usr/lib/python3.6/pathlib.py", line 1226, in mkdir&lt;br&gt;
    self._accessor.mkdir(self, mode)&lt;br&gt;
  File "/usr/lib/python3.6/pathlib.py", line 387, in wrapped&lt;br&gt;
    return strfunc(str(pathobj), *args)&lt;br&gt;
FileNotFoundError: [Errno 2] No such file or directory: '/home/asweigart/delicious/walnut/waffles'&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;Oh no, we got a nasty error! The reason is that the 'delicious' directory does&lt;br&gt;
not exist, so we cannot make the 'walnut' and the 'waffles' directories under&lt;br&gt;
it. To fix this, do:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;from pathlib import Path&lt;br&gt;
cwd = Path.cwd()&lt;br&gt;
(cwd / 'delicious' / 'walnut' / 'waffles').mkdir(parents=True)&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;And all is good :)&lt;/p&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#absolute-vs-relative-paths"&gt;
  &lt;/a&gt;
  Absolute vs. Relative Paths
&lt;/h3&gt;

&lt;p&gt;There are two ways to specify a file path.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An absolute path, which always begins with the root folder&lt;/li&gt;
&lt;li&gt;A relative path, which is relative to the program’s current working directory&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are also the dot (.) and dot-dot (..) folders. These are not real folders but special names that can be used in a path. A single period (“dot”) for a folder name is shorthand for “this directory.” Two periods (“dot-dot”) means “the parent folder.”&lt;/p&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#handling-absolute-and-relative-paths"&gt;
  &lt;/a&gt;
  Handling Absolute and Relative Paths
&lt;/h3&gt;

&lt;p&gt;To see if a path is an absolute path:&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;os.path&lt;/code&gt; on *nix:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;import os&lt;br&gt;
os.path.isabs('/')&lt;br&gt;
True&lt;br&gt;
os.path.isabs('..')&lt;br&gt;
False&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;Using &lt;code&gt;pathlib&lt;/code&gt; on *nix:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;from pathlib import Path&lt;br&gt;
Path('/').is_absolute()&lt;br&gt;
True&lt;br&gt;
Path('..').is_absolute()&lt;br&gt;
False&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can extract an absolute path with both &lt;code&gt;os.path&lt;/code&gt; and &lt;code&gt;pathlib&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;os.path&lt;/code&gt; on *nix:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;import os&lt;br&gt;
os.getcwd()&lt;br&gt;
'/home/asweigart'&lt;br&gt;
os.path.abspath('..')&lt;br&gt;
'/home'&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;Using &lt;code&gt;pathlib&lt;/code&gt; on *nix:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;python&lt;br&gt;
from pathlib import Path&lt;br&gt;
print(Path.cwd())&lt;br&gt;
/home/asweigart&lt;br&gt;
print(Path('..').resolve())&lt;br&gt;
/home&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You can get a relative path from a starting path to another path.&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;os.path&lt;/code&gt; on *nix:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;import os&lt;br&gt;
os.path.relpath('/etc/passwd', '/')&lt;br&gt;
'etc/passwd'&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;Using &lt;code&gt;pathlib&lt;/code&gt; on *nix:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;from pathlib import Path&lt;br&gt;
print(Path('/etc/passwd').relative_to('/'))&lt;br&gt;
etc/passwd&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#checking-path-validity"&gt;
  &lt;/a&gt;
  Checking Path Validity
&lt;/h3&gt;

&lt;p&gt;Checking if a file/directory exists:&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;os.path&lt;/code&gt; on *nix:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;br&gt;
import os&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;os.path.exists('.')&lt;br&gt;
True&lt;br&gt;
os.path.exists('setup.py')&lt;br&gt;
True&lt;br&gt;
os.path.exists('/etc')&lt;br&gt;
True&lt;br&gt;
os.path.exists('nonexistentfile')&lt;br&gt;
False&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;Using &lt;code&gt;pathlib&lt;/code&gt; on *nix:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;br&gt;
from pathlib import Path&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Path('.').exists()&lt;br&gt;
True&lt;br&gt;
Path('setup.py').exists()&lt;br&gt;
True&lt;br&gt;
Path('/etc').exists()&lt;br&gt;
True&lt;br&gt;
Path('nonexistentfile').exists()&lt;br&gt;
False&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;Checking if a path is a file:&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;os.path&lt;/code&gt; on *nix:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;import os&lt;br&gt;
os.path.isfile('setup.py')&lt;br&gt;
True&lt;br&gt;
os.path.isfile('/home')&lt;br&gt;
False&lt;br&gt;
os.path.isfile('nonexistentfile')&lt;br&gt;
False&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;Using &lt;code&gt;pathlib&lt;/code&gt; on *nix:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;from pathlib import Path&lt;br&gt;
Path('setup.py').is_file()&lt;br&gt;
True&lt;br&gt;
Path('/home').is_file()&lt;br&gt;
False&lt;br&gt;
Path('nonexistentfile').is_file()&lt;br&gt;
False&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;Checking if a path is a directory:&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;os.path&lt;/code&gt; on *nix:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;import os&lt;br&gt;
os.path.isdir('/')&lt;br&gt;
True&lt;br&gt;
os.path.isdir('setup.py')&lt;br&gt;
False&lt;br&gt;
os.path.isdir('/spam')&lt;br&gt;
False&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;Using &lt;code&gt;pathlib&lt;/code&gt; on *nix:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;from pathlib import Path&lt;br&gt;
Path('/').is_dir()&lt;br&gt;
True&lt;br&gt;
Path('setup.py').is_dir()&lt;br&gt;
False&lt;br&gt;
Path('/spam').is_dir()&lt;br&gt;
False&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#finding-file-sizes-and-folder-contents"&gt;
  &lt;/a&gt;
  Finding File Sizes and Folder Contents
&lt;/h3&gt;

&lt;p&gt;Getting a file's size in bytes:&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;os.path&lt;/code&gt; on Windows:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;import os&lt;br&gt;
os.path.getsize('C:\Windows\System32\calc.exe')&lt;br&gt;
776192&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;Using &lt;code&gt;pathlib&lt;/code&gt; on *nix:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;from pathlib import Path&lt;br&gt;
stat = Path('/bin/python3.6').stat()&lt;br&gt;
print(stat) # stat contains some other information about the file as well&lt;br&gt;
os.stat_result(st_mode=33261, st_ino=141087, st_dev=2051, st_nlink=2, st_uid=0,&lt;br&gt;
--snip--&lt;br&gt;
st_gid=0, st_size=10024, st_atime=1517725562, st_mtime=1515119809, st_ctime=1517261276)&lt;br&gt;
print(stat.st_size) # size in bytes&lt;br&gt;
10024&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;Listing directory contents using &lt;code&gt;os.listdir&lt;/code&gt; on Windows:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;import os&lt;br&gt;
os.listdir('C:\Windows\System32')&lt;br&gt;
['0409', '12520437.cpx', '12520850.cpx', '5U877.ax', 'aaclient.dll',&lt;br&gt;
--snip--&lt;br&gt;
'xwtpdui.dll', 'xwtpw32.dll', 'zh-CN', 'zh-HK', 'zh-TW', 'zipfldr.dll']&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;Listing directory contents using &lt;code&gt;pathlib&lt;/code&gt; on *nix:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;from pathlib import Path&lt;br&gt;
for f in Path('/usr/bin').iterdir():&lt;br&gt;
    print(f)&lt;br&gt;
...&lt;br&gt;
/usr/bin/tiff2rgba&lt;br&gt;
/usr/bin/iconv&lt;br&gt;
/usr/bin/ldd&lt;br&gt;
/usr/bin/cache_restore&lt;br&gt;
/usr/bin/udiskie&lt;br&gt;
/usr/bin/unix2dos&lt;br&gt;
/usr/bin/t1reencode&lt;br&gt;
/usr/bin/epstopdf&lt;br&gt;
/usr/bin/idle3&lt;br&gt;
...&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;To find the total size of all the files in this directory:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;WARNING&lt;/strong&gt;: Directories themselves also have a size! So you might want to&lt;br&gt;
check for whether a path is a file or directory using the methods in the methods discussed in the above section!&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;os.path.getsize()&lt;/code&gt; and &lt;code&gt;os.listdir()&lt;/code&gt; together on Windows:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;import os&lt;br&gt;
total_size = 0&lt;/p&gt;

&lt;p&gt;for filename in os.listdir('C:\Windows\System32'):&lt;br&gt;
      total_size = total_size + os.path.getsize(os.path.join('C:\Windows\System32', filename))&lt;/p&gt;

&lt;p&gt;print(total_size)&lt;br&gt;
1117846456&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;Using &lt;code&gt;pathlib&lt;/code&gt; on *nix:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;from pathlib import Path&lt;br&gt;
total_size = 0&lt;/p&gt;

&lt;p&gt;for sub_path in Path('/usr/bin').iterdir():&lt;br&gt;
...     total_size += sub_path.stat().st_size&lt;/p&gt;

&lt;p&gt;print(total_size)&lt;br&gt;
1903178911&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#copying-files-and-folders"&gt;
  &lt;/a&gt;
  Copying Files and Folders
&lt;/h3&gt;

&lt;p&gt;The shutil module provides functions for copying files, as well as entire folders.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;import shutil, os&lt;/p&gt;

&lt;p&gt;os.chdir('C:\')&lt;/p&gt;

&lt;p&gt;shutil.copy('C:\spam.txt', 'C:\delicious')&lt;br&gt;
   'C:\delicious\spam.txt'&lt;/p&gt;

&lt;p&gt;shutil.copy('eggs.txt', 'C:\delicious\eggs2.txt')&lt;br&gt;
   'C:\delicious\eggs2.txt'&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;While shutil.copy() will copy a single file, shutil.copytree() will copy an entire folder and every folder and file contained in it:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;import shutil, os&lt;/p&gt;

&lt;p&gt;os.chdir('C:\')&lt;/p&gt;

&lt;p&gt;shutil.copytree('C:\bacon', 'C:\bacon_backup')&lt;br&gt;
'C:\bacon_backup'&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#moving-and-renaming-files-and-folders"&gt;
  &lt;/a&gt;
  Moving and Renaming Files and Folders
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;import shutil&lt;br&gt;
shutil.move('C:\bacon.txt', 'C:\eggs')&lt;br&gt;
'C:\eggs\bacon.txt'&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;The destination path can also specify a filename. In the following example, the source file is moved and renamed:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;shutil.move('C:\bacon.txt', 'C:\eggs\new_bacon.txt')&lt;br&gt;
'C:\eggs\new_bacon.txt'&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;If there is no eggs folder, then move() will rename bacon.txt to a file named eggs.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;shutil.move('C:\bacon.txt', 'C:\eggs')&lt;br&gt;
'C:\eggs'&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#permanently-deleting-files-and-folders"&gt;
  &lt;/a&gt;
  Permanently Deleting Files and Folders
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Calling os.unlink(path) or Path.unlink() will delete the file at path.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Calling os.rmdir(path) or Path.rmdir() will delete the folder at path. This folder must be empty of any files or folders.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Calling shutil.rmtree(path) will remove the folder at path, and all files and folders it contains will also be deleted.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#safe-deletes-with-the-send2trash-module"&gt;
  &lt;/a&gt;
  Safe Deletes with the send2trash Module
&lt;/h3&gt;

&lt;p&gt;You can install this module by running pip install send2trash from a Terminal window.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;import send2trash&lt;/p&gt;

&lt;p&gt;with open('bacon.txt', 'a') as bacon_file: # creates the file&lt;br&gt;
...     bacon_file.write('Bacon is not a vegetable.')&lt;br&gt;
25&lt;/p&gt;

&lt;p&gt;send2trash.send2trash('bacon.txt')&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#walking-a-directory-tree"&gt;
  &lt;/a&gt;
  Walking a Directory Tree
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;import os&lt;/p&gt;

&lt;p&gt;for folder_name, subfolders, filenames in os.walk('C:\delicious'):&lt;br&gt;
    print('The current folder is {}'.format(folder_name))&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;for subfolder in subfolders:
    print('SUBFOLDER OF {}: {}'.format(folder_name, subfolder))
for filename in filenames:
    print('FILE INSIDE {}: {}'.format(folder_name, filename))

print('')
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The current folder is C:\delicious&lt;br&gt;
SUBFOLDER OF C:\delicious: cats&lt;br&gt;
SUBFOLDER OF C:\delicious: walnut&lt;br&gt;
FILE INSIDE C:\delicious: spam.txt&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;The current folder is C:\delicious\cats&lt;br&gt;
FILE INSIDE C:\delicious\cats: catnames.txt&lt;br&gt;
FILE INSIDE C:\delicious\cats: zophie.jpg&lt;/p&gt;

&lt;p&gt;The current folder is C:\delicious\walnut&lt;br&gt;
SUBFOLDER OF C:\delicious\walnut: waffles&lt;/p&gt;

&lt;p&gt;The current folder is C:\delicious\walnut\waffles&lt;br&gt;
FILE INSIDE C:\delicious\walnut\waffles: butter.txt&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;pathlib&lt;/code&gt; provides a lot more functionality than the ones listed above,&lt;br&gt;
like getting file name, getting file extension, reading/writing a file without&lt;br&gt;
manually opening it, etc. Check out the&lt;br&gt;
&lt;a href="https://docs.python.org/3/library/pathlib.html"&gt;official documentation&lt;/a&gt;&lt;br&gt;
if you want to know more!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reading-and-writing-files"&gt;
  &lt;/a&gt;
  Reading and Writing Files
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#the-file-readingwriting-process"&gt;
  &lt;/a&gt;
  The File Reading/Writing Process
&lt;/h3&gt;

&lt;p&gt;To read/write to a file in Python, you will want to use the &lt;code&gt;with&lt;/code&gt;&lt;br&gt;
statement, which will close the file for you after you are done.&lt;/p&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#opening-and-reading-files-with-the-open-function"&gt;
  &lt;/a&gt;
  Opening and reading files with the open() function
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;with open('C:\Users\your_home_folder\hello.txt') as hello_file:&lt;br&gt;
...     hello_content = hello_file.read()&lt;br&gt;
hello_content&lt;br&gt;
'Hello World!'&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#alternatively-you-can-use-the-readlines-method-to-get-a-list-of-string-values-from-the-file-one-string-for-each-line-of-text"&gt;
  &lt;/a&gt;
  Alternatively, you can use the &lt;em&gt;readlines()&lt;/em&gt; method to get a list of string values from the file, one string for each line of text:
&lt;/h1&gt;

&lt;p&gt;with open('sonnet29.txt') as sonnet_file:&lt;br&gt;
...     sonnet_file.readlines()&lt;br&gt;
[When, in disgrace with fortune and men's eyes,\n', ' I all alone beweep my&lt;br&gt;
outcast state,\n', And trouble deaf heaven with my bootless cries,\n', And&lt;br&gt;
look upon myself and curse my fate,']&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#you-can-also-iterate-through-the-file-line-by-line"&gt;
  &lt;/a&gt;
  You can also iterate through the file line by line:
&lt;/h1&gt;

&lt;p&gt;with open('sonnet29.txt') as sonnet_file:&lt;br&gt;
...     for line in sonnet_file: # note the new line character will be included in the line&lt;br&gt;
...         print(line, end='')&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;When, in disgrace with fortune and men's eyes,&lt;br&gt;
I all alone beweep my outcast state,&lt;br&gt;
And trouble deaf heaven with my bootless cries,&lt;br&gt;
And look upon myself and curse my fate,&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#writing-to-files"&gt;
  &lt;/a&gt;
  Writing to Files
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;with open('bacon.txt', 'w') as bacon_file:&lt;br&gt;
...     bacon_file.write('Hello world!\n')&lt;br&gt;
13&lt;/p&gt;

&lt;p&gt;with open('bacon.txt', 'a') as bacon_file:&lt;br&gt;
...     bacon_file.write('Bacon is not a vegetable.')&lt;br&gt;
25&lt;/p&gt;

&lt;p&gt;with open('bacon.txt') as bacon_file:&lt;br&gt;
...     content = bacon_file.read()&lt;/p&gt;

&lt;p&gt;print(content)&lt;br&gt;
Hello world!&lt;br&gt;
Bacon is not a vegetable.&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#saving-variables-with-the-shelve-module"&gt;
  &lt;/a&gt;
  Saving Variables with the shelve Module
&lt;/h3&gt;

&lt;p&gt;To save variables:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;import shelve&lt;/p&gt;

&lt;p&gt;cats = ['Zophie', 'Pooka', 'Simon']&lt;br&gt;
with shelve.open('mydata') as shelf_file:&lt;br&gt;
...     shelf_file['cats'] = cats&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;To open and read variables:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;with shelve.open('mydata') as shelf_file:&lt;br&gt;
...     print(type(shelf_file))&lt;br&gt;
...     print(shelf_file['cats'])&lt;br&gt;
&lt;br&gt;
['Zophie', 'Pooka', 'Simon']&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;Just like dictionaries, shelf values have keys() and values() methods that will return list-like values of the keys and values in the shelf. Since these methods return list-like values instead of true lists, you should pass them to the list() function to get them in list form.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;with shelve.open('mydata') as shelf_file:&lt;br&gt;
...     print(list(shelf_file.keys()))&lt;br&gt;
...     print(list(shelf_file.values()))&lt;br&gt;
['cats']&lt;br&gt;
[['Zophie', 'Pooka', 'Simon']]&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#saving-variables-with-the-pprintpformat-function"&gt;
  &lt;/a&gt;
  Saving Variables with the pprint.pformat() Function
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;import pprint&lt;/p&gt;

&lt;p&gt;cats = [{'name': 'Zophie', 'desc': 'chubby'}, {'name': 'Pooka', 'desc': 'fluffy'}]&lt;/p&gt;

&lt;p&gt;pprint.pformat(cats)&lt;br&gt;
"[{'desc': 'chubby', 'name': 'Zophie'}, {'desc': 'fluffy', 'name': 'Pooka'}]"&lt;/p&gt;

&lt;p&gt;with open('myCats.py', 'w') as file_obj:&lt;br&gt;
...     file_obj.write('cats = {}\n'.format(pprint.pformat(cats)))&lt;br&gt;
83&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reading-zip-files"&gt;
  &lt;/a&gt;
  Reading ZIP Files
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;import zipfile, os&lt;/p&gt;

&lt;p&gt;os.chdir('C:\')    # move to the folder with example.zip&lt;br&gt;
with zipfile.ZipFile('example.zip') as example_zip:&lt;br&gt;
...     print(example_zip.namelist())&lt;br&gt;
...     spam_info = example_zip.getinfo('spam.txt')&lt;br&gt;
...     print(spam_info.file_size)&lt;br&gt;
...     print(spam_info.compress_size)&lt;br&gt;
...     print('Compressed file is %sx smaller!' % (round(spam_info.file_size / spam_info.compress_size, 2)))&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;['spam.txt', 'cats/', 'cats/catnames.txt', 'cats/zophie.jpg']&lt;br&gt;
13908&lt;br&gt;
3828&lt;br&gt;
'Compressed file is 3.63x smaller!'&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#extracting-from-zip-files"&gt;
  &lt;/a&gt;
  Extracting from ZIP Files
&lt;/h3&gt;

&lt;p&gt;The extractall() method for ZipFile objects extracts all the files and folders from a ZIP file into the current working directory.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;import zipfile, os&lt;/p&gt;

&lt;p&gt;os.chdir('C:\')    # move to the folder with example.zip&lt;/p&gt;

&lt;p&gt;with zipfile.ZipFile('example.zip') as example_zip:&lt;br&gt;
...     example_zip.extractall()&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;The extract() method for ZipFile objects will extract a single file from the ZIP file. Continue the interactive shell example:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;with zipfile.ZipFile('example.zip') as example_zip:&lt;br&gt;
...     print(example_zip.extract('spam.txt'))&lt;br&gt;
...     print(example_zip.extract('spam.txt', 'C:\some\new\folders'))&lt;br&gt;
'C:\spam.txt'&lt;br&gt;
'C:\some\new\folders\spam.txt'&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-and-adding-to-zip-files"&gt;
  &lt;/a&gt;
  Creating and Adding to ZIP Files
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;import zipfile&lt;/p&gt;

&lt;p&gt;with zipfile.ZipFile('new.zip', 'w') as new_zip:&lt;br&gt;
...     new_zip.write('spam.txt', compress_type=zipfile.ZIP_DEFLATED)&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;This code will create a new ZIP file named new.zip that has the compressed contents of spam.txt.&lt;/p&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#json-yaml-and-configuration-files"&gt;
  &lt;/a&gt;
  JSON, YAML and configuration files
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#json"&gt;
  &lt;/a&gt;
  JSON
&lt;/h3&gt;

&lt;p&gt;Open a JSON file with:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;python&lt;br&gt;
import json&lt;br&gt;
with open("filename.json", "r") as f:&lt;br&gt;
    content = json.loads(f.read())&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Write a JSON file with:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;br&gt;
import json&lt;/p&gt;

&lt;p&gt;content = {"name": "Joe", "age": 20}&lt;br&gt;
with open("filename.json", "w") as f:&lt;br&gt;
    f.write(json.dumps(content, indent=2))&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#yaml"&gt;
  &lt;/a&gt;
  YAML
&lt;/h3&gt;

&lt;p&gt;Compared to JSON, YAML allows for much better human maintainability and gives you the option to add comments.&lt;br&gt;
It is a convenient choice for configuration files where humans will have to edit it.&lt;/p&gt;

&lt;p&gt;There are two main libraries allowing to access to YAML files:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pypi.python.org/pypi/PyYAML"&gt;PyYaml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.python.org/pypi/ruamel.yaml"&gt;Ruamel.yaml&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Install them using &lt;code&gt;pip install&lt;/code&gt; in your virtual environment.&lt;/p&gt;

&lt;p&gt;The first one it easier to use but the second one, Ruamel, implements much better the YAML&lt;br&gt;
specification, and allow for example to modify a YAML content without altering comments.&lt;/p&gt;

&lt;p&gt;Open a YAML file with:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;br&gt;
from ruamel.yaml import YAML&lt;/p&gt;

&lt;p&gt;with open("filename.yaml") as f:&lt;br&gt;
    yaml=YAML()&lt;br&gt;
    yaml.load(f)&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#anyconfig"&gt;
  &lt;/a&gt;
  Anyconfig
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://pypi.python.org/pypi/anyconfig"&gt;Anyconfig&lt;/a&gt; is a very handy package allowing to abstract completely the underlying configuration file format. It allows to load a Python dictionary from JSON, YAML, TOML, and so on.&lt;/p&gt;

&lt;p&gt;Install it with:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;bash&lt;br&gt;
pip install anyconfig&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Usage:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;br&gt;
import anyconfig&lt;/p&gt;

&lt;p&gt;conf1 = anyconfig.load("/path/to/foo/conf.d/a.yml")&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#debugging"&gt;
  &lt;/a&gt;
  Debugging
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#raising-exceptions"&gt;
  &lt;/a&gt;
  Raising Exceptions
&lt;/h3&gt;

&lt;p&gt;Exceptions are raised with a raise statement. In code, a raise statement consists of the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The raise keyword&lt;/li&gt;
&lt;li&gt;A call to the Exception() function&lt;/li&gt;
&lt;li&gt;A string with a helpful error message passed to the Exception() function&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;raise Exception('This is the error message.')&lt;br&gt;
Traceback (most recent call last):&lt;br&gt;
  File "", line 1, in &lt;br&gt;
    raise Exception('This is the error message.')&lt;br&gt;
Exception: This is the error message.&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;Often it’s the code that calls the function, not the function itself, that knows how to handle an exception. So you will commonly see a raise statement inside a function and the try and except statements in the code calling the function.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;python&lt;br&gt;
def box_print(symbol, width, height):&lt;br&gt;
    if len(symbol) != 1:&lt;br&gt;
      raise Exception('Symbol must be a single character string.')&lt;br&gt;
    if width &amp;lt;= 2:&lt;br&gt;
      raise Exception('Width must be greater than 2.')&lt;br&gt;
    if height &amp;lt;= 2:&lt;br&gt;
      raise Exception('Height must be greater than 2.')&lt;br&gt;
    print(symbol * width)&lt;br&gt;
    for i in range(height - 2):&lt;br&gt;
        print(symbol + (' ' * (width - 2)) + symbol)&lt;br&gt;
    print(symbol * width)&lt;br&gt;
for sym, w, h in (('*', 4, 4), ('O', 20, 5), ('x', 1, 3), ('ZZ', 3, 3)):&lt;br&gt;
    try:&lt;br&gt;
        box_print(sym, w, h)&lt;br&gt;
    except Exception as err:&lt;br&gt;
        print('An exception happened: ' + str(err))&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#getting-the-traceback-as-a-string"&gt;
  &lt;/a&gt;
  Getting the Traceback as a String
&lt;/h3&gt;

&lt;p&gt;The traceback is displayed by Python whenever a raised exception goes unhandled. But can also obtain it as a string by calling traceback.format_exc(). This function is useful if you want the information from an exception’s traceback but also want an except statement to gracefully handle the exception. You will need to import Python’s traceback module before calling this function.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;import traceback&lt;/p&gt;

&lt;p&gt;try:&lt;br&gt;
     raise Exception('This is the error message.')&lt;br&gt;
except:&lt;br&gt;
     with open('errorInfo.txt', 'w') as error_file:&lt;br&gt;
         error_file.write(traceback.format_exc())&lt;br&gt;
     print('The traceback info was written to errorInfo.txt.')&lt;br&gt;
116&lt;br&gt;
The traceback info was written to errorInfo.txt.&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;The 116 is the return value from the write() method, since 116 characters were written to the file. The traceback text was written to errorInfo.txt.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Traceback (most recent call last):
  File "&amp;lt;pyshell#28&amp;gt;", line 2, in &amp;lt;module&amp;gt;
Exception: This is the error message.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#assertions"&gt;
  &lt;/a&gt;
  Assertions
&lt;/h3&gt;

&lt;p&gt;An assertion is a sanity check to make sure your code isn’t doing something obviously wrong. These sanity checks are performed by assert statements. If the sanity check fails, then an AssertionError exception is raised. In code, an assert statement consists of the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The assert keyword&lt;/li&gt;
&lt;li&gt;A condition (that is, an expression that evaluates to True or False)&lt;/li&gt;
&lt;li&gt;A comma&lt;/li&gt;
&lt;li&gt;A string to display when the condition is False&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;pod_bay_door_status = 'open'&lt;/p&gt;

&lt;p&gt;assert pod_bay_door_status == 'open', 'The pod bay doors need to be "open".'&lt;/p&gt;

&lt;p&gt;pod_bay_door_status = 'I\'m sorry, Dave. I\'m afraid I can\'t do that.'&lt;/p&gt;

&lt;p&gt;assert pod_bay_door_status == 'open', 'The pod bay doors need to be "open".'&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;Traceback (most recent call last):&lt;br&gt;
  File "", line 1, in &lt;br&gt;
    assert pod_bay_door_status == 'open', 'The pod bay doors need to be "open".'&lt;br&gt;
AssertionError: The pod bay doors need to be "open".&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In plain English, an assert statement says, “I assert that this condition holds true, and if not, there is a bug somewhere in the program.” Unlike exceptions, your code should not handle assert statements with try and except; if an assert fails, your program should crash. By failing fast like this, you shorten the time between the original cause of the bug and when you first notice the bug. This will reduce the amount of code you will have to check before finding the code that’s causing the bug.&lt;/p&gt;

&lt;p&gt;Disabling Assertions&lt;/p&gt;

&lt;p&gt;Assertions can be disabled by passing the -O option when running Python.&lt;/p&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#logging"&gt;
  &lt;/a&gt;
  Logging
&lt;/h3&gt;

&lt;p&gt;To enable the logging module to display log messages on your screen as your program runs, copy the following to the top of your program (but under the #! python shebang line):&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;br&gt;
import logging&lt;/p&gt;

&lt;p&gt;logging.basicConfig(level=logging.DEBUG, format=' %(asctime)s - %(levelname)s- %(message)s')&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Say you wrote a function to calculate the factorial of a number. In mathematics, factorial 4 is 1 × 2 × 3 × 4, or 24. Factorial 7 is 1 × 2 × 3 × 4 × 5 × 6 × 7, or 5,040. Open a new file editor window and enter the following code. It has a bug in it, but you will also enter several log messages to help yourself figure out what is going wrong. Save the program as factorialLog.py.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;import logging&lt;/p&gt;

&lt;p&gt;logging.basicConfig(level=logging.DEBUG, format=' %(asctime)s - %(levelname)s- %(message)s')&lt;/p&gt;

&lt;p&gt;logging.debug('Start of program')&lt;/p&gt;

&lt;p&gt;def factorial(n):&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;logging.debug('Start of factorial(%s)' % (n))
total = 1

for i in range(1, n + 1):
    total *= i
    logging.debug('i is ' + str(i) + ', total is ' + str(total))

logging.debug('End of factorial(%s)' % (n))

return total
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;print(factorial(5))&lt;br&gt;
logging.debug('End of program')&lt;br&gt;
2015-05-23 16:20:12,664 - DEBUG - Start of program&lt;br&gt;
2015-05-23 16:20:12,664 - DEBUG - Start of factorial(5)&lt;br&gt;
2015-05-23 16:20:12,665 - DEBUG - i is 0, total is 0&lt;br&gt;
2015-05-23 16:20:12,668 - DEBUG - i is 1, total is 0&lt;br&gt;
2015-05-23 16:20:12,670 - DEBUG - i is 2, total is 0&lt;br&gt;
2015-05-23 16:20:12,673 - DEBUG - i is 3, total is 0&lt;br&gt;
2015-05-23 16:20:12,675 - DEBUG - i is 4, total is 0&lt;br&gt;
2015-05-23 16:20:12,678 - DEBUG - i is 5, total is 0&lt;br&gt;
2015-05-23 16:20:12,680 - DEBUG - End of factorial(5)&lt;br&gt;
0&lt;br&gt;
2015-05-23 16:20:12,684 - DEBUG - End of program&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#logging-levels"&gt;
  &lt;/a&gt;
  Logging Levels
&lt;/h3&gt;

&lt;p&gt;Logging levels provide a way to categorize your log messages by importance. There are five logging levels, described in Table 10-1 from least to most important. Messages can be logged at each level using a different logging function.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Level&lt;/th&gt;
&lt;th&gt;Logging Function&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;logging.debug()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The lowest level. Used for small details. Usually you care about these messages only when diagnosing problems.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;INFO&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;logging.info()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Used to record information on general events in your program or confirm that things are working at their point in the program.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;WARNING&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;logging.warning()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Used to indicate a potential problem that doesn’t prevent the program from working but might do so in the future.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ERROR&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;logging.error()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Used to record an error that caused the program to fail to do something.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;CRITICAL&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;logging.critical()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The highest level. Used to indicate a fatal error that has caused or is about to cause the program to stop running entirely.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#disabling-logging"&gt;
  &lt;/a&gt;
  Disabling Logging
&lt;/h3&gt;

&lt;p&gt;After you’ve debugged your program, you probably don’t want all these log messages cluttering the screen. The logging.disable() function disables these so that you don’t have to go into your program and remove all the logging calls by hand.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;import logging&lt;/p&gt;

&lt;p&gt;logging.basicConfig(level=logging.INFO, format=' %(asctime)s -%(levelname)s - %(message)s')&lt;/p&gt;

&lt;p&gt;logging.critical('Critical error! Critical error!')&lt;br&gt;
2015-05-22 11:10:48,054 - CRITICAL - Critical error! Critical error!&lt;/p&gt;

&lt;p&gt;logging.disable(logging.CRITICAL)&lt;/p&gt;

&lt;p&gt;logging.critical('Critical error! Critical error!')&lt;/p&gt;

&lt;p&gt;logging.error('Error! Error!')&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#logging-to-a-file"&gt;
  &lt;/a&gt;
  Logging to a File
&lt;/h3&gt;

&lt;p&gt;Instead of displaying the log messages to the screen, you can write them to a text file. The logging.basicConfig() function takes a filename keyword argument, like so:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;br&gt;
import logging&lt;/p&gt;

&lt;p&gt;logging.basicConfig(filename='myProgramLog.txt', level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lambda-functions"&gt;
  &lt;/a&gt;
  Lambda Functions
&lt;/h2&gt;

&lt;p&gt;This function:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;def add(x, y):&lt;br&gt;
        return x + y&lt;/p&gt;

&lt;p&gt;add(5, 3)&lt;br&gt;
8&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;Is equivalent to the &lt;em&gt;lambda&lt;/em&gt; function:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;add = lambda x, y: x + y&lt;br&gt;
add(5, 3)&lt;br&gt;
8&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;It's not even need to bind it to a name like add before:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;(lambda x, y: x + y)(5, 3)&lt;br&gt;
8&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;Like regular nested functions, lambdas also work as lexical closures:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;def make_adder(n):&lt;br&gt;
        return lambda x: x + n&lt;/p&gt;

&lt;p&gt;plus_3 = make_adder(3)&lt;br&gt;
plus_5 = make_adder(5)&lt;/p&gt;

&lt;p&gt;plus_3(4)&lt;br&gt;
7&lt;br&gt;
plus_5(4)&lt;br&gt;
9&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;Note: lambda can only evaluate an expression, like a single line of code.&lt;/p&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ternary-conditional-operator"&gt;
  &lt;/a&gt;
  Ternary Conditional Operator
&lt;/h2&gt;

&lt;p&gt;Many programming languages have a ternary operator, which define a conditional expression. The most common usage is to make a terse simple conditional assignment statement. In other words, it offers one-line code to evaluate the first expression if the condition is true, otherwise it evaluates the second expression.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;expression1&amp;gt; if &amp;lt;condition&amp;gt; else &amp;lt;expression2&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;age = 15&lt;/p&gt;

&lt;p&gt;print('kid' if age &amp;lt; 18 else 'adult')&lt;br&gt;
kid&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ternary operators can be chained:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;age = 15&lt;/p&gt;

&lt;p&gt;print('kid' if age &amp;lt; 13 else 'teenager' if age &amp;lt; 18 else 'adult')&lt;br&gt;
teenager&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;The code above is equivalent to:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;python&lt;br&gt;
if age &amp;lt; 18:&lt;br&gt;
    if age &amp;lt; 13:&lt;br&gt;
        print('kid')&lt;br&gt;
    else:&lt;br&gt;
        print('teenager')&lt;br&gt;
else:&lt;br&gt;
    print('adult')&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#args-and-kwargs"&gt;
  &lt;/a&gt;
  args and kwargs
&lt;/h2&gt;

&lt;p&gt;The names &lt;code&gt;args and kwargs&lt;/code&gt; are arbitrary - the important thing are the &lt;code&gt;*&lt;/code&gt; and &lt;code&gt;**&lt;/code&gt; operators. They can mean:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;In a function declaration, &lt;code&gt;*&lt;/code&gt; means “pack all remaining positional arguments into a tuple named &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt;”, while &lt;code&gt;**&lt;/code&gt; is the same for keyword arguments (except it uses a dictionary, not a tuple).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In a function call, &lt;code&gt;*&lt;/code&gt; means “unpack tuple or list named &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt; to positional arguments at this position”, while &lt;code&gt;**&lt;/code&gt; is the same for keyword arguments.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For example you can make a function that you can use to call any other function, no matter what parameters it has:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;python&lt;br&gt;
def forward(f, *args, **kwargs):&lt;br&gt;
    return f(*args, **kwargs)&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Inside forward, args is a tuple (of all positional arguments except the first one, because we specified it - the f), kwargs is a dict. Then we call f and unpack them so they become normal arguments to f.&lt;/p&gt;

&lt;p&gt;You use &lt;code&gt;*args&lt;/code&gt; when you have an indefinite amount of positional arguments.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;def fruits(*args):&lt;br&gt;
   for fruit in args:&lt;br&gt;
      print(fruit)&lt;/p&gt;

&lt;p&gt;fruits("apples", "bananas", "grapes")&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;"apples"&lt;br&gt;
"bananas"&lt;br&gt;
"grapes"&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Similarly, you use &lt;code&gt;**kwargs&lt;/code&gt; when you have an indefinite number of keyword arguments.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;def fruit(**kwargs):&lt;br&gt;
   for key, value in kwargs.items():&lt;br&gt;
       print("{0}: {1}".format(key, value))&lt;/p&gt;

&lt;p&gt;fruit(name = "apple", color = "red")&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;name: apple&lt;br&gt;
color: red&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;def show(arg1, arg2, *args, kwarg1=None, kwarg2=None, **kwargs):&lt;br&gt;
  print(arg1)&lt;br&gt;
  print(arg2)&lt;br&gt;
  print(args)&lt;br&gt;
  print(kwarg1)&lt;br&gt;
  print(kwarg2)&lt;br&gt;
  print(kwargs)&lt;/p&gt;

&lt;p&gt;data1 = [1,2,3]&lt;br&gt;
data2 = [4,5,6]&lt;br&gt;
data3 = {'a':7,'b':8,'c':9}&lt;/p&gt;

&lt;p&gt;show(&lt;em&gt;data1,*data2, kwarg1="python",kwarg2="cheatsheet",&lt;/em&gt;*data3)&lt;br&gt;
1&lt;br&gt;
2&lt;br&gt;
(3, 4, 5, 6)&lt;br&gt;
python&lt;br&gt;
cheatsheet&lt;br&gt;
{'a': 7, 'b': 8, 'c': 9}&lt;/p&gt;

&lt;p&gt;show(*data1, *data2, **data3)&lt;br&gt;
1&lt;br&gt;
2&lt;br&gt;
(3, 4, 5, 6)&lt;br&gt;
None&lt;br&gt;
None&lt;br&gt;
{'a': 7, 'b': 8, 'c': 9}&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#if-you-do-not-specify-for-kwargs"&gt;
  &lt;/a&gt;
  If you do not specify ** for kwargs
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;show(*data1, *data2, *data3)&lt;br&gt;
1&lt;br&gt;
2&lt;br&gt;
(3, 4, 5, 6, "a", "b", "c")&lt;br&gt;
None&lt;br&gt;
None&lt;br&gt;
{}&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#things-to-rememberargs"&gt;
  &lt;/a&gt;
  Things to Remember(args)
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Functions can accept a variable number of positional arguments by using &lt;code&gt;*args&lt;/code&gt; in the def statement.&lt;/li&gt;
&lt;li&gt;You can use the items from a sequence as the positional arguments for a function with the &lt;code&gt;*&lt;/code&gt; operator.&lt;/li&gt;
&lt;li&gt;Using the &lt;code&gt;*&lt;/code&gt; operator with a generator may cause your program to run out of memory and crash.&lt;/li&gt;
&lt;li&gt;Adding new positional parameters to functions that accept &lt;code&gt;*args&lt;/code&gt; can introduce hard-to-find bugs.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#things-to-rememberkwargs"&gt;
  &lt;/a&gt;
  Things to Remember(kwargs)
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Function arguments can be specified by position or by keyword.&lt;/li&gt;
&lt;li&gt;Keywords make it clear what the purpose of each argument is when it would be confusing with only positional arguments.&lt;/li&gt;
&lt;li&gt;Keyword arguments with default values make it easy to add new behaviors to a function, especially when the function has existing callers.&lt;/li&gt;
&lt;li&gt;Optional keyword arguments should always be passed by keyword instead of by position.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#context-manager"&gt;
  &lt;/a&gt;
  Context Manager
&lt;/h2&gt;

&lt;p&gt;While Python's context managers are widely used, few understand the purpose behind their use. These statements, commonly used with reading and writing files, assist the application in conserving system memory and improve resource management by ensuring specific resources are only in use for certain processes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#with-statement"&gt;
  &lt;/a&gt;
  with statement
&lt;/h3&gt;

&lt;p&gt;A context manager is an object that is notified when a context (a block of code) starts and ends. You commonly use one with the with statement. It takes care of the notifying.&lt;/p&gt;

&lt;p&gt;For example, file objects are context managers. When a context ends, the file object is closed automatically:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;with open(filename) as f:&lt;br&gt;
    file_contents = f.read()&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#the-openfile-object-has-automatically-been-closed"&gt;
  &lt;/a&gt;
  the open_file object has automatically been closed.
&lt;/h1&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Anything that ends execution of the block causes the context manager's exit method to be called. This includes exceptions, and can be useful when an error causes you to prematurely exit from an open file or connection. Exiting a script without properly closing files/connections is a bad idea, that may cause data loss or other problems. By using a context manager you can ensure that precautions are always taken to prevent damage or loss in this way.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#writing-your-own-contextmanager-using-generator-syntax"&gt;
  &lt;/a&gt;
  Writing your own contextmanager using generator syntax
&lt;/h3&gt;

&lt;p&gt;It is also possible to write a context manager using generator syntax thanks to the &lt;code&gt;contextlib.contextmanager&lt;/code&gt; decorator:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;import contextlib&lt;br&gt;
@contextlib.contextmanager&lt;br&gt;
... def context_manager(num):&lt;br&gt;
...     print('Enter')&lt;br&gt;
...     yield num + 1&lt;br&gt;
...     print('Exit')&lt;br&gt;
with context_manager(2) as cm:&lt;br&gt;
...     # the following instructions are run when the 'yield' point of the context&lt;br&gt;
...     # manager is reached.&lt;br&gt;
...     # 'cm' will have the value that was yielded&lt;br&gt;
...     print('Right in the middle with cm = {}'.format(cm))&lt;br&gt;
Enter&lt;br&gt;
Right in the middle with cm = 3&lt;br&gt;
Exit&lt;/p&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-endraw-main-raw-toplevel-script-environment"&gt;
  &lt;/a&gt;
  &lt;code&gt;__main__&lt;/code&gt; Top-level script environment
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;__main__&lt;/code&gt; is the name of the scope in which top-level code executes.&lt;br&gt;
A module’s &lt;strong&gt;name&lt;/strong&gt; is set equal to &lt;code&gt;__main__&lt;/code&gt; when read from standard input, a script, or from an interactive prompt.&lt;/p&gt;

&lt;p&gt;A module can discover whether or not it is running in the main scope by checking its own &lt;code&gt;__name__&lt;/code&gt;, which allows a common idiom for conditionally executing code in a module when it is run as a script or with &lt;code&gt;python -m&lt;/code&gt; but not when it is imported:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == "&lt;strong&gt;main&lt;/strong&gt;":&lt;br&gt;
...     # execute only if run as a script&lt;br&gt;
...     main()&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;For a package, the same effect can be achieved by including a &lt;strong&gt;main&lt;/strong&gt;.py module, the contents of which will be executed when the module is run with -m&lt;/p&gt;

&lt;p&gt;For example we are developing script which is designed to be used as module, we should do:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;h1&gt;
  &lt;a href="#python-program-to-execute-function-directly"&gt;
  &lt;/a&gt;
  Python program to execute function directly
&lt;/h1&gt;

&lt;p&gt;def add(a, b):&lt;br&gt;
...     return a+b&lt;br&gt;
...&lt;br&gt;
add(10, 20) # we can test it by calling the function save it as calculate.py&lt;br&gt;
30&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#now-if-we-want-to-use-that-module-by-importing-we-have-to-comment-out-our-call"&gt;
  &lt;/a&gt;
  Now if we want to use that module by importing we have to comment out our call,
&lt;/h1&gt;
&lt;h1&gt;
  &lt;a href="#instead-we-can-write-like-this-in-calculatepy"&gt;
  &lt;/a&gt;
  Instead we can write like this in calculate.py
&lt;/h1&gt;

&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == "&lt;strong&gt;main&lt;/strong&gt;":&lt;br&gt;
...     add(3, 5)&lt;br&gt;
...&lt;br&gt;
import calculate&lt;br&gt;
calculate.add(3, 5)&lt;br&gt;
8&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#advantages"&gt;
  &lt;/a&gt;
  Advantages
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Every Python module has it’s &lt;code&gt;__name__&lt;/code&gt; defined and if this is &lt;code&gt;__main__&lt;/code&gt;, it implies that the module is being run standalone by the user and we can do corresponding appropriate actions.&lt;/li&gt;
&lt;li&gt;If you import this script as a module in another script, the &lt;strong&gt;name&lt;/strong&gt; is set to the name of the script/module.&lt;/li&gt;
&lt;li&gt;Python files can act as either reusable modules, or as standalone programs.&lt;/li&gt;
&lt;li&gt;if &lt;code&gt;__name__ == “main”:&lt;/code&gt; is used to execute some code only if the file was run directly, and not imported.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setuppy"&gt;
  &lt;/a&gt;
  setup.py
&lt;/h2&gt;

&lt;p&gt;The setup script is the centre of all activity in building, distributing, and installing modules using the Distutils. The main purpose of the setup script is to describe your module distribution to the Distutils, so that the various commands that operate on your modules do the right thing.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;setup.py&lt;/code&gt; file is at the heart of a Python project. It describes all of the metadata about your project. There a quite a few fields you can add to a project to give it a rich set of metadata describing the project. However, there are only three required fields: name, version, and packages. The name field must be unique if you wish to publish your package on the Python Package Index (PyPI). The version field keeps track of different releases of the project. The packages field describes where you’ve put the Python source code within your project.&lt;/p&gt;

&lt;p&gt;This allows you to easily install Python packages. Often it's enough to write:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;bash&lt;br&gt;
python setup.py install&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;and module will install itself.&lt;/p&gt;

&lt;p&gt;Our initial setup.py will also include information about the license and will re-use the README.txt file for the long_description field. This will look like:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;from distutils.core import setup&lt;br&gt;
setup(&lt;br&gt;
...    name='pythonCheatsheet',&lt;br&gt;
...    version='0.1',&lt;br&gt;
...    packages=['pipenv',],&lt;br&gt;
...    license='MIT',&lt;br&gt;
...    long_description=open('README.txt').read(),&lt;br&gt;
... )&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;Find more information visit &lt;a href="http://docs.python.org/install/index.html"&gt;http://docs.python.org/install/index.html&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dataclasses"&gt;
  &lt;/a&gt;
  Dataclasses
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Dataclasses&lt;/code&gt; are python classes but are suited for storing data objects.&lt;br&gt;
This module provides a decorator and functions for automatically adding generated special methods such as &lt;code&gt;__init__()&lt;/code&gt; and &lt;code&gt;__repr__()&lt;/code&gt; to user-defined classes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;They store data and represent a certain data type. Ex: A number. For people familiar with ORMs, a model instance is a data object. It represents a specific kind of entity. It holds attributes that define or represent the entity.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;They can be compared to other objects of the same type. Ex: A number can be greater than, less than, or equal to another number.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Python 3.7 provides a decorator dataclass that is used to convert a class into a dataclass.&lt;/p&gt;

&lt;p&gt;python 2.7&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;class Number:&lt;br&gt;
...     def &lt;strong&gt;init&lt;/strong&gt;(self, val):&lt;br&gt;
...         self.val = val&lt;br&gt;
...&lt;br&gt;
obj = Number(2)&lt;br&gt;
obj.val&lt;br&gt;
2&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;with dataclass&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;@dataclass&lt;br&gt;
... class Number:&lt;br&gt;
...     val: int&lt;br&gt;
...&lt;br&gt;
obj = Number(2)&lt;br&gt;
obj.val&lt;br&gt;
2&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#default-values"&gt;
  &lt;/a&gt;
  Default values
&lt;/h3&gt;

&lt;p&gt;It is easy to add default values to the fields of your data class.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;@dataclass&lt;br&gt;
... class Product:&lt;br&gt;
...     name: str&lt;br&gt;
...     count: int = 0&lt;br&gt;
...     price: float = 0.0&lt;br&gt;
...&lt;br&gt;
obj = Product("Python")&lt;br&gt;
obj.name&lt;br&gt;
Python&lt;br&gt;
obj.count&lt;br&gt;
0&lt;br&gt;
obj.price&lt;br&gt;
0.0&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#type-hints"&gt;
  &lt;/a&gt;
  Type hints
&lt;/h3&gt;

&lt;p&gt;It is mandatory to define the data type in dataclass. However, If you don't want specify the datatype then, use &lt;code&gt;typing.Any&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`python&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;from dataclasses import dataclass&lt;br&gt;
from typing import Any&lt;/p&gt;

&lt;p&gt;@dataclass&lt;br&gt;
... class WithoutExplicitTypes:&lt;br&gt;
...    name: Any&lt;br&gt;
...    value: Any = 42&lt;br&gt;
...&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#virtual-environment"&gt;
  &lt;/a&gt;
  Virtual Environment
&lt;/h2&gt;

&lt;p&gt;The use of a Virtual Environment is to test python code in encapsulated environments and to also avoid filling the base Python installation with libraries we might use for only one project.&lt;/p&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#virtualenv"&gt;
  &lt;/a&gt;
  virtualenv
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Install virtualenv&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pip install virtualenv
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install virtualenvwrapper-win (Windows)&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pip install virtualenvwrapper-win
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Usage:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Make a Virtual Environment&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkvirtualenv HelloWold
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Anything we install now will be specific to this project. And available to the projects we connect to this environment.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set Project Directory&lt;/p&gt;

&lt;p&gt;To bind our virtualenv with our current working directory we simply enter:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;setprojectdir .
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Deactivate&lt;/p&gt;

&lt;p&gt;To move onto something else in the command line type ‘deactivate’ to deactivate your environment.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;deactivate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice how the parenthesis disappear.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Workon&lt;/p&gt;

&lt;p&gt;Open up the command prompt and type ‘workon HelloWold’ to activate the environment and move into your root project folder&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;workon HelloWold
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#poetry"&gt;
  &lt;/a&gt;
  poetry
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://poetry.eustace.io/"&gt;Poetry&lt;/a&gt; is a tool for dependency management and packaging in Python. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Install Poetry&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pip install --user poetry
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a new project&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;poetry new my-project
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will create a my-project directory:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;my-project
├── pyproject.toml
├── README.rst
├── poetry_demo
│   └── __init__.py
└── tests
    ├── __init__.py
    └── test_poetry_demo.py
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The pyproject.toml file will orchestrate your project and its dependencies:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[tool.poetry]
name = "my-project"
version = "0.1.0"
description = ""
authors = ["your name &amp;lt;your@mail.com&amp;gt;"]

[tool.poetry.dependencies]
python = "*"

[tool.poetry.dev-dependencies]
pytest = "^3.4"
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Packages&lt;/p&gt;

&lt;p&gt;To add dependencies to your project, you can specify them in the tool.poetry.dependencies section:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[tool.poetry.dependencies]
pendulum = "^1.4"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Also, instead of modifying the pyproject.toml file by hand, you can use the add command and it will automatically find a suitable version constraint.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ poetry add pendulum
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To install the dependencies listed in the pyproject.toml:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;poetry install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To remove dependencies:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;poetry remove pendulum
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For more information, check the &lt;a href="https://poetry.eustace.io/docs/"&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pipenv"&gt;
  &lt;/a&gt;
  pipenv
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://pipenv.readthedocs.io/en/latest/"&gt;Pipenv&lt;/a&gt; is a tool that aims to bring the best of all packaging worlds (bundler, composer, npm, cargo, yarn, etc.) to the Python world. Windows is a first-class citizen, in our world.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Install pipenv&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pip install pipenv
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enter your Project directory and install the Packages for your project&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd my_project
pipenv install &amp;lt;package&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pipenv will install your package and create a Pipfile for you in your project’s directory. The Pipfile is used to track which dependencies your project needs in case you need to re-install them.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Uninstall Packages&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pipenv uninstall &amp;lt;package&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Activate the Virtual Environment associated with your Python project&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pipenv shell
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Exit the Virtual Environment&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;exit
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Find more information and a video in &lt;a href="https://docs.pipenv.org/"&gt;docs.pipenv.org&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#anaconda"&gt;
  &lt;/a&gt;
  anaconda
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://anaconda.org/"&gt;Anaconda&lt;/a&gt; is another popular tool to manage python packages.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Where packages, notebooks, projects and environments are shared.&lt;br&gt;
Your place for free public conda package hosting.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Usage:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Make a Virtual Environment&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;conda create -n HelloWorld
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To use the Virtual Environment, activate it by:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;conda activate HelloWorld
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Anything installed now will be specific to the project HelloWorld&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Exit the Virtual Environment&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;conda deactivate
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="#python-cheatsheet"&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>cheatsheet</category>
      <category>python</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Javascript Format Date without Moment.js (Eg: 17 July, 2021 )</title>
      <author>Jyotishman Saikia</author>
      <pubDate>Sat, 17 Jul 2021 13:42:44 +0000</pubDate>
      <link>https://dev.to/jyotishman/javascript-format-date-without-moment-js-eg-17-july-2021-2jma</link>
      <guid>https://dev.to/jyotishman/javascript-format-date-without-moment-js-eg-17-july-2021-2jma</guid>
      <description>&lt;p&gt;Almost everyone like me  might be using the plugin moment.js to format a date-time-stamp to a readable date or time - Eg: 14 July 2021 or 11:58 pm&lt;/p&gt;

&lt;p&gt;Fortunately, there is a native javascript API to format date and time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#demo-and-example-to-format-date"&gt;
  &lt;/a&gt;
  Demo and Example to format date:
&lt;/h2&gt;

&lt;p&gt;With the help of &lt;code&gt;toLocaleDateString&lt;/code&gt; we can format a date-time-stamp to a readable language sensitive representation.&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const date = new Date();&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;



&lt;p&gt;&lt;code&gt;Sat Jul 17 2021 19:04:31 GMT+0530 (India Standard Time)&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;



&lt;p&gt;&lt;code&gt;date.toLocaleDateString("en-IN", {&lt;br&gt;
  "year": "numeric", &lt;br&gt;
  "month": "long", &lt;br&gt;
  "day": "numeric"&lt;br&gt;
})&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;



&lt;p&gt;&lt;code&gt;"17 July 2021"&lt;/code&gt;&lt;br&gt;
&lt;br&gt;
    (Formatted Date)&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#demo-and-example-to-format-time"&gt;
  &lt;/a&gt;
  Demo and Example to format time:
&lt;/h2&gt;

&lt;p&gt;With the help of &lt;code&gt;toLocaleTimeString&lt;/code&gt; we can format a date-time-stamp to a readable language sensitive representation.&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const date = new Date();&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;



&lt;p&gt;&lt;code&gt;Sat Jul 17 2021 19:04:31 GMT+0530 (India Standard Time)&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;



&lt;p&gt;&lt;code&gt;date.toLocaleTimeString("en-IN", {"hour": "numeric"})&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;



&lt;p&gt;&lt;code&gt;"7 pm"&lt;/code&gt;&lt;br&gt;
&lt;br&gt;
   (Formatted Time)&lt;/p&gt;

&lt;p&gt;If you liked my content you can follow me on twitter for more such content-&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/frontend_jsx"&gt;https://twitter.com/frontend_jsx&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>reactnative</category>
    </item>
    <item>
      <title>Ruby Basics</title>
      <author>Vinicius Cerqueira Bonifácio</author>
      <pubDate>Sat, 17 Jul 2021 13:23:17 +0000</pubDate>
      <link>https://dev.to/vinicius77/ruby-basics-i6e</link>
      <guid>https://dev.to/vinicius77/ruby-basics-i6e</guid>
      <description>&lt;p&gt;Hello, dear devs. 👋&lt;/p&gt;

&lt;p&gt;I am back, bringing to you (again) the weirdest articles on the internet. I am sure you were waiting for that, right? (Please don't answer!)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F_dbMz9O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/idpah2su7f06f5t3kczs.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F_dbMz9O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/idpah2su7f06f5t3kczs.gif" alt="No No No"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Today, as the title points out, I will be briefly &lt;del&gt;talking&lt;/del&gt; writing about the &lt;strong&gt;Ruby&lt;/strong&gt; language and some of its features. 😉&lt;/p&gt;

&lt;p&gt;If you have read my previous posts (something I don't recommend) I usually write about &lt;strong&gt;JavaScript&lt;/strong&gt; related stuff and I love doing so.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TAI0SUhW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/odcecwgec1w1zu9b7vi6.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TAI0SUhW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/odcecwgec1w1zu9b7vi6.jpg" alt="banana JS"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But today I have decided to vary a little bit and talk about &lt;strong&gt;Ruby&lt;/strong&gt; that is an extremely powerful language and, long story short, thanks to it I am a developer today. (Am I? 🤔)&lt;/p&gt;

&lt;p&gt;Before start and given my ability to read minds I know it is time to &lt;code&gt;Q &amp;amp; A&lt;/code&gt;:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JfyrUNnm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/txznng4kd39eg7w9k6zk.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JfyrUNnm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/txznng4kd39eg7w9k6zk.gif" alt="Reading minds"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#is-ruby-a-dying-language"&gt;
  &lt;/a&gt;
  Is Ruby A Dying Language?
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Short answer:&lt;/strong&gt; no. Indeed, it has been losing "popularity" along the years I cannot deny that but it is way far from death. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Clash&lt;/strong&gt; is my favorite band ever, it also has been losing its popularity but can you tell they are dying? 🎸 Yeah, you just cannot! (In musical terms, I meant.) &lt;br&gt;
I am losing focus here, sorry. 😅&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ruby&lt;/strong&gt; just got a recent minor update to &lt;code&gt;3.0.2&lt;/code&gt; on  July 7th but it is beyond the current scope of this article.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#is-it-worth-learning-ruby-in-2021"&gt;
  &lt;/a&gt;
  Is it worth learning Ruby in 2021? 💎
&lt;/h2&gt;

&lt;p&gt;Paraphrasing someone I have no idea: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"... Knowledge does not occupy space!"&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are many discussions about this specific subject out there but honestly, I am here to bring you the basics of &lt;strong&gt;Ruby&lt;/strong&gt; so let's get started because life is short.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  ⚠️ Disclaimer ⚠️
&lt;/h3&gt;

&lt;p&gt;Given the language vastness it is impossible to include  here, in a mere 10 minutes reading post, either all its features, different ways of doing the same thing or even best practices. I hope you understand that.&lt;/p&gt;

&lt;p&gt;The examples are based in both my mental disorders, personal delirium and confused state of mind caused by unknown reasons, according to my psychologist.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KRcaEnrW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4kmqtym5uvvv37wa59qr.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KRcaEnrW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4kmqtym5uvvv37wa59qr.gif" alt="Insane"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you are &lt;strong&gt;OK&lt;/strong&gt; with that, &lt;strong&gt;welcome aboard !&lt;/strong&gt;, otherwise you are free to go. There are tons of normal people waiting for you somewhere else. 😂 🤣&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#ruby-in-a-nutshell"&gt;
  &lt;/a&gt;
  Ruby in a nutshell 💎 👉 🌰 🐚
&lt;/h3&gt;

&lt;p&gt;🚨 The next three paragraphs I didn't write myself. They are, in my vision, plausible to explain what I have in mind. I am not a huge fan of &lt;strong&gt;"reinvent the wheel"&lt;/strong&gt;. 🚨&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ruby&lt;/strong&gt; is a dynamic, interpreted, high-level and general-purpose programming language. &lt;a href=""&gt;Wikipedia:&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It was was created by &lt;strong&gt;Yukihiro Matsumoto (Matz)&lt;/strong&gt;, in Japan in the mid 1990's and was designed for programmer productivity with the idea that &lt;strong&gt;programming should be fun for programmers&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;It emphasizes the necessity for software to be understood by humans first and computers second. &lt;a href=""&gt;Launch School:&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please pay special attention for those three sentences:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"... necessity for software to be understood by humans first (🙋🥇) and computers second (🗣️ losers!)."&lt;/p&gt;

&lt;p&gt;" ... It was was created by Yukihiro Matsumoto (Matz), in Japan."&lt;/p&gt;

&lt;p&gt;" ... with the idea that programming should be fun for programmers."&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Quote 1:&lt;/strong&gt; Most of the time, &lt;strong&gt;Ruby&lt;/strong&gt; statements are very similar to plain English and it turns out a language very easy to read and understand by us, mere mortals.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s217OwxN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k89f2h3xvt33gqlwtb0k.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s217OwxN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k89f2h3xvt33gqlwtb0k.gif" alt="Mark Zuckerbot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Quote 2:&lt;/strong&gt; Try to convince me about something bad that is originally from Japan and fail miserably. &lt;/p&gt;

&lt;p&gt;👉 [ Suggest a gif (about Japan) in the comments section and I will upload the best here. ]. 👈&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Quote 3:&lt;/strong&gt; The 'having fun' part you are going to discover very soon. If you stick with me until the end, of course. 😊&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZRo1VBGI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gfyhnku2hijhhehqtouy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZRo1VBGI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gfyhnku2hijhhehqtouy.gif" alt="Jim Carrey Complaining"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you would like to follow along and don't have &lt;strong&gt;Ruby&lt;/strong&gt; installed in your machine, don't worry. Install it! 🤣 😆 😂&lt;/p&gt;

&lt;p&gt;&lt;a href=""&gt;Installing Ruby&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Just kidding, you can use the &lt;a href=""&gt;Ruby Online Compiler &amp;amp; Interpreter - Replit&lt;/a&gt;. It is a mixing of the &lt;code&gt;irb&lt;/code&gt; console and an &lt;code&gt;IDE&lt;/code&gt; in the same page.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;IRB stands for "interactive Ruby" and is a tool to interactively execute Ruby expressions ...&lt;br&gt;
&lt;a href="https://ruby-doc.org/stdlib-2.4.0/libdoc/irb/rdoc/IRB.html"&gt;Module: IRB&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6TvallKI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/94555f2iq2awnhw9llqb.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6TvallKI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/94555f2iq2awnhw9llqb.gif" alt="Starts here"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#commenting"&gt;
  &lt;/a&gt;
  Commenting ✍️
&lt;/h3&gt;

&lt;p&gt;You can comment a block of code, for example, using both the  &lt;code&gt;=begin&lt;/code&gt; and &lt;code&gt;=end&lt;/code&gt; keywords and placing the block to be comment between them.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="cm"&gt;=begin
   Dale a tu cuerpo alegria Macarena
   Eeeh Macarena .... 
   Aaahe!
=end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also have an one-line comment using the &lt;code&gt;#&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Never gonna give you up, never gonna let you down ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#-raw-print-endraw-raw-puts-endraw-methods"&gt;
  &lt;/a&gt;
  &lt;code&gt;print&lt;/code&gt; / &lt;code&gt;puts&lt;/code&gt; methods 🖥️
&lt;/h2&gt;

&lt;p&gt;Both functions are used to display output on the screen. The major difference between them is that &lt;code&gt;puts&lt;/code&gt; inserts a newline at the end.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"Hello, "&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"darkness my old friend."&lt;/span&gt;

&lt;span class="c1"&gt;# Result: &lt;/span&gt;
&lt;span class="c1"&gt;# Hello, darkness my old friend&lt;/span&gt;

&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Hark, hark! I hear"&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"The strain of strutting chanticleer"&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Cry, Cock-a-diddle-dow!"&lt;/span&gt;

&lt;span class="c1"&gt;# Result:&lt;/span&gt;
&lt;span class="cm"&gt;=begin
   Hark, hark! I hear
   The strain of strutting chanticleer
   Cry, Cock-a-diddle-dow! 
=end&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#variables"&gt;
  &lt;/a&gt;
  Variables 📦
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Ruby&lt;/strong&gt; has four different kinds of &lt;code&gt;variables&lt;/code&gt; where which one is declared in its specific way:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;    &lt;span class="n"&gt;local&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Hey, I am a local variable."&lt;/span&gt;
    &lt;span class="n"&gt;_other_local_var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Never mess up with a local!"&lt;/span&gt;

    &lt;span class="vi"&gt;@instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"For instance, I am an instance variable."&lt;/span&gt;
    &lt;span class="vc"&gt;@@class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"I am 'classy'."&lt;/span&gt;
    &lt;span class="vg"&gt;$global&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Globalization rules!"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#data-types"&gt;
  &lt;/a&gt;
  Data Types 😎 😍 😈 👻 💩
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Ruby&lt;/strong&gt; has several data types: &lt;code&gt;String&lt;/code&gt;, &lt;code&gt;Integer&lt;/code&gt;, &lt;code&gt;Float&lt;/code&gt;, &lt;code&gt;Boolean&lt;/code&gt; (&lt;code&gt;TrueClass&lt;/code&gt;, &lt;code&gt;FalseClass&lt;/code&gt;), &lt;code&gt;Symbol&lt;/code&gt; and &lt;code&gt;Nil&lt;/code&gt; (&lt;code&gt;NilClass&lt;/code&gt;). &lt;/p&gt;

&lt;p&gt;I wouldn't classify them as primitive data types because everything is &lt;strong&gt;Ruby&lt;/strong&gt; is an object. (or almost everything. Keep reading! 😜)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="vg"&gt;$my_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Clancy Gilroy"&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="vg"&gt;$my_name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;class&lt;/span&gt;        &lt;span class="c1"&gt;# String&lt;/span&gt;

&lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"X Æ A-12"&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;class&lt;/span&gt;            &lt;span class="c1"&gt;# String&lt;/span&gt;

&lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;35&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;class&lt;/span&gt;             &lt;span class="c1"&gt;# Integer&lt;/span&gt;

&lt;span class="n"&gt;gpa&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;3.22&lt;/span&gt;                 
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;gpa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;class&lt;/span&gt;             &lt;span class="c1"&gt;# Float &lt;/span&gt;

&lt;span class="n"&gt;had_fun&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;had_fun&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;class&lt;/span&gt;         &lt;span class="c1"&gt;# TrueClass&lt;/span&gt;

&lt;span class="n"&gt;is_hot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;is_hot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;class&lt;/span&gt;          &lt;span class="c1"&gt;# FalseClass&lt;/span&gt;

&lt;span class="n"&gt;week_points&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;week_points&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;class&lt;/span&gt;     &lt;span class="c1"&gt;# NilClass (absence of value)&lt;/span&gt;

&lt;span class="n"&gt;symbol&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:hello&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;class&lt;/span&gt;          &lt;span class="c1"&gt;# Symbol &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Did you notice the &lt;code&gt;.class&lt;/code&gt; method ? Since &lt;strong&gt;Ruby is a Fully Object Oriented language&lt;/strong&gt; everything is an &lt;code&gt;object&lt;/code&gt;, a &lt;code&gt;property of&lt;/code&gt; or a &lt;code&gt;method call on&lt;/code&gt; an object.&lt;/p&gt;

&lt;p&gt;By the way and being shallow, &lt;strong&gt;an object is the instance of a given class&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Think of a &lt;code&gt;class&lt;/code&gt; like a &lt;strong&gt;blueprint for creating objects&lt;/strong&gt;, which determines initial values, attributes, behavior etc.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QRzn5YNf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dcnusiig06fo0nr653za.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QRzn5YNf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dcnusiig06fo0nr653za.gif" alt="Class and Object"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can confirm the "almost everything is an object" theory using the &lt;code&gt;.superclass&lt;/code&gt; method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="no"&gt;TrueClass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;superclass&lt;/span&gt;        &lt;span class="c1"&gt;# Object&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="no"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;superclass&lt;/span&gt;          &lt;span class="c1"&gt;# Object&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="no"&gt;String&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;superclass&lt;/span&gt;           &lt;span class="c1"&gt;# Object&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="no"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;superclass&lt;/span&gt;           &lt;span class="c1"&gt;# BasicObject&lt;/span&gt;
&lt;span class="c1"&gt;# so on and so forth&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#some-useful-string-methods"&gt;
  &lt;/a&gt;
  Some (Useful) String Methods 💪
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Ruby&lt;/strong&gt; has many built-in methods to manipulate strings. &lt;/p&gt;

&lt;p&gt;Do you remember when I had mentioned that in &lt;strong&gt;Ruby&lt;/strong&gt; things are similar to plain English? I bet you can guess what most of these methods below do, am I right? 😃&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;phrase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"   Sometimes I’m confused by what I think is really obvious. But what I think is really obvious obviously isn’t obvious.   "&lt;/span&gt;

&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;phrase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;upcase&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;phrase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;downcase&lt;/span&gt;

&lt;span class="c1"&gt;# hint: .strip removes the empty spaces from both beginning and ending.&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;phrase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;strip&lt;/span&gt;    

&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;phrase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;length&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;phrase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;include?&lt;/span&gt; &lt;span class="s2"&gt;"Some"&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;phrase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;include?&lt;/span&gt; &lt;span class="s2"&gt;"Sure"&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;phrase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"confused"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"auckland"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;capitalize&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is also possible to create both &lt;strong&gt;interpolation&lt;/strong&gt; and &lt;strong&gt;concatenation&lt;/strong&gt; of &lt;code&gt;strings&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;character_age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"17"&lt;/span&gt;
&lt;span class="n"&gt;character_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Link"&lt;/span&gt;

&lt;span class="c1"&gt;# Interpolation&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"There once was a young man named &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;character_name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

&lt;span class="c1"&gt;# Concatenation ➕&lt;/span&gt;
&lt;span class="c1"&gt;# '.to_s' is the short method name for 'to string'&lt;/span&gt;
&lt;span class="c1"&gt;# There is more like '.to_i', '.to_f', '.to_a' etc&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"he was "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;character_age&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_s&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;" years old"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#some-math-methods"&gt;
  &lt;/a&gt;
  Some Math Methods 🔢🔣
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;     &lt;span class="c1"&gt;# addition&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;     &lt;span class="c1"&gt;# subtraction&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;     &lt;span class="c1"&gt;# multiplication&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mf"&gt;7.0&lt;/span&gt;  &lt;span class="c1"&gt;# division&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;    &lt;span class="c1"&gt;# exponentiation&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;     &lt;span class="c1"&gt;# modulo or remainder&lt;/span&gt;

&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;163.23&lt;/span&gt;
&lt;span class="n"&gt;num2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;45.47&lt;/span&gt;

&lt;span class="c1"&gt;# returns the absolute number&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;abs&lt;/span&gt;                 &lt;span class="c1"&gt;# 163.23   &lt;/span&gt;

&lt;span class="c1"&gt;# return a value rounded to the nearest value with "n" digits decimal digits precision.&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;round&lt;/span&gt;              &lt;span class="c1"&gt;# 45&lt;/span&gt;

&lt;span class="c1"&gt;# returns the ceil value&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ceil&lt;/span&gt;               &lt;span class="c1"&gt;# 46&lt;/span&gt;

&lt;span class="c1"&gt;# returns the floor value &lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;floor&lt;/span&gt;              &lt;span class="c1"&gt;# 45&lt;/span&gt;

&lt;span class="c1"&gt;# returns the square root of a given number (5.0)&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="no"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;           &lt;span class="c1"&gt;# 5.0&lt;/span&gt;

&lt;span class="c1"&gt;# returns the natural logarithm (base e) or logarithm to the specified base of a given number, e.g. Math.log(x, base).&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="no"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;           &lt;span class="c1"&gt;# 4.605170185988092&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#arrays"&gt;
  &lt;/a&gt;
  Arrays 📚
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Ruby arrays&lt;/strong&gt; are collections of ordered, integer-indexed objects which can store numbers, strings, hashes, symbols, objects or even any other arrays.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# different ways to declare an array&lt;/span&gt;
&lt;span class="n"&gt;friends&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"Rapha"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Alexandre"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Andre"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Bogus"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# I prefer this one 👇&lt;/span&gt;
&lt;span class="n"&gt;fruits_array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"cherimoya"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"durian"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"lamut"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"langsat"&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# What the heck? 🤢&lt;/span&gt;
&lt;span class="n"&gt;hello&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"awful"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to_s&lt;/span&gt; 
&lt;span class="c1"&gt;# output: ["awful", "awful", "awful", "awful", "awful"]&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt; 

&lt;span class="c1"&gt;# Remind: Ruby Arrays indexing starts at 0.&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;friends&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;      &lt;span class="c1"&gt;# Rapha&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;friends&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;     &lt;span class="c1"&gt;# Bogus&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;friends&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;    &lt;span class="c1"&gt;# Rapha Alexandre&lt;/span&gt;

&lt;span class="c1"&gt;# Replacing items&lt;/span&gt;
&lt;span class="n"&gt;friends&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Fael"&lt;/span&gt;

&lt;span class="c1"&gt;# output: ["Fael", "Alexandre", "Andre", "Bogus"]&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;friends&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_s&lt;/span&gt;    

&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;friends&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;length&lt;/span&gt;  &lt;span class="c1"&gt;# 4&lt;/span&gt;

&lt;span class="c1"&gt;# Down here the methods syntax are pretty much understandable&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;friends&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;include?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Fael"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;friends&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;reverse&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;friends&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;sort&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;friends&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;empty?&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;fruits_array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"rambutan"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;## the example above (`push`) could also be done as shown below&lt;/span&gt;
&lt;span class="n"&gt;fruits_array&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s2"&gt;"akebi"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;strong&gt;Ruby arrays built-in methods&lt;/strong&gt; are not limited to just those ones I have mentioned above. &lt;br&gt;
If you are eager to learn more (I am sure you are 🤓), &lt;a href="https://ruby-doc.org/core-3.0.2/Array.html"&gt;Ruby docs&lt;/a&gt; is a really good resource to do so.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#hashes"&gt;
  &lt;/a&gt;
  Hashes  #️⃣
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Ruby hashes&lt;/strong&gt; are collections of key-value pairs, for example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;random_hash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="ss"&gt;:sao_paulo&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"SP"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"rio_de_janeiro"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"RJ"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"NY"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Remember that the way you declare the &lt;code&gt;key&lt;/code&gt; is the same you will use in order to successfully access its &lt;code&gt;value&lt;/code&gt; in a hash.&lt;/p&gt;

&lt;p&gt;For example, trying to access &lt;code&gt;random_hash["sao_paulo"]&lt;/code&gt; would return nothing because &lt;code&gt;:sao_paulo&lt;/code&gt; is not the same as &lt;code&gt;"sao_paulo"&lt;/code&gt;. (&lt;code&gt;Symbol&lt;/code&gt;x &lt;code&gt;String&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;This is São Paulo, by the way! 🏙️&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nYpQh6_4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kitrmfl9wultpa4xelep.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nYpQh6_4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kitrmfl9wultpa4xelep.jpg" alt="Sao Paulo City"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;random_hash&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;random_hash&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:sao_paulo&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;       &lt;span class="c1"&gt;# SP&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;random_hash&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"rio_de_janeiro"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# RJ&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;random_hash&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;                &lt;span class="c1"&gt;# NY&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;random_hash&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;nil?&lt;/span&gt;              &lt;span class="c1"&gt;# false&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;random_hash&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;length&lt;/span&gt;            &lt;span class="c1"&gt;# 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#methods"&gt;
  &lt;/a&gt;
  Methods 📐📏
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Ruby methods&lt;/strong&gt; are used to tie or wrap together one or more repeatable statements into a single unit.&lt;/p&gt;

&lt;p&gt;Along the article we have already used many methods, for example, &lt;code&gt;length&lt;/code&gt;, &lt;code&gt;sqrt&lt;/code&gt;, &lt;code&gt;to_s&lt;/code&gt; etc. &lt;/p&gt;

&lt;p&gt;The difference here is that we have only invoked them. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AFazJ-V7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/00mml7h93ovj024wt99o.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AFazJ-V7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/00mml7h93ovj024wt99o.gif" alt="Invoking"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Someone, probably &lt;em&gt;Matz&lt;/em&gt;, have already written them for us and for this reason they are the so called &lt;em&gt;built-in&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BI2hNu1U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ak497reug91gzqtnwgo6.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BI2hNu1U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ak497reug91gzqtnwgo6.jpg" alt="Matz"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Even &lt;strong&gt;Ruby&lt;/strong&gt; being an amazing language it is practically impossible to include every single method that we would use in our daily life. We are free to implement them by our own.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hint:&lt;/strong&gt; Method names should begin with a &lt;em&gt;lowercase letter&lt;/em&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"... If you begin a method name with an uppercase letter, Ruby might think that it is a constant and hence can parse the call incorrectly. "&lt;br&gt;
&lt;a href=""&gt;Source: Tutorials Point&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Method without parameter(s)&lt;/span&gt;

&lt;span class="c1"&gt;# This is how you declare a method&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;say_konnichiwa&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"こんにちは"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# This is how you invoke it&lt;/span&gt;
&lt;span class="n"&gt;say_konnichiwa&lt;/span&gt;

&lt;span class="c1"&gt;# Method with parameter(s)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;say_tadaima&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Unknown"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"ただいま, &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;!"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;say_tadaima&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Mr."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Toguro"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# prints "ただいま, Mr. Toguro!"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that the second parameter &lt;code&gt;name&lt;/code&gt; holds the &lt;strong&gt;default value&lt;/strong&gt; &lt;code&gt;Unknown&lt;/code&gt;. In other words, if we call the same method without providing the second argument, the default value will be put in place. Example below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;say_tadaima&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Mr."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;           &lt;span class="c1"&gt;# prints "ただいま, Mr. Unknown!"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can also &lt;code&gt;return&lt;/code&gt; values from inside of our methods both explicitly or implicitly.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;- Explicit &lt;code&gt;return&lt;/code&gt;:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;cube&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;70&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"return"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"?????"&lt;/span&gt;

   &lt;span class="c1"&gt;# Never reached&lt;/span&gt;
   &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"No value after the return statement is reached"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# IT will console the result of "num * num * num"&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;cube&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Prints the number "70"&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;cube&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# Prints the string "return" and so on&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;cube&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;- Implicit &lt;code&gt;return&lt;/code&gt;:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;always_return&lt;/span&gt;
    &lt;span class="s2"&gt;"I am always returned"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# Variable created for the sake of demonstration&lt;/span&gt;
&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;always_return&lt;/span&gt;

&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;   &lt;span class="c1"&gt;# "I am always returned"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In other words, methods are most likely those relatives we don't like. They always return. (🥁 Tu dum tsss)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conditionals-raw-if-endraw-raw-else-endraw-and-raw-elsif-endraw-"&gt;
  &lt;/a&gt;
  Conditionals (&lt;code&gt;if&lt;/code&gt;, &lt;code&gt;else&lt;/code&gt; and &lt;code&gt;elsif&lt;/code&gt;)
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;is_dev&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
&lt;span class="n"&gt;language&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Cobol"&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;is_dev&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;language&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"Cobol"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"DISPLAY 'Hello, Cobol'."&lt;/span&gt;
&lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;is_dev&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;language&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"Pascal"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"writeln('Hello, Pascal!');"&lt;/span&gt;
&lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;is_dev&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;language&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"Delphi"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"ShowMessage('Hello Delphi');"&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt; 
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"👋"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can also use &lt;strong&gt;comparisons&lt;/strong&gt; inside of &lt;code&gt;if / else&lt;/code&gt; statements.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;max_number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num1&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;num2&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;num1&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;num3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;num1&lt;/span&gt;
    &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num2&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;num1&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;num2&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;num3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;num2&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;num3&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;    
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;max_number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;53&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;77&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#case-expressions"&gt;
  &lt;/a&gt;
  Case Expressions 💼
&lt;/h3&gt;

&lt;p&gt;There is no mystery here. I am sure you can read this &lt;del&gt;master&lt;/del&gt;piece of code and guess what it does.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_day_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;day_abbreviaton&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;day_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;

     &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;day_abbreviaton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;downcase&lt;/span&gt;
    &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="s2"&gt;"ma"&lt;/span&gt;
        &lt;span class="n"&gt;day_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Maanantai"&lt;/span&gt;
    &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="s2"&gt;"ti"&lt;/span&gt;
        &lt;span class="n"&gt;day_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Tiistai"&lt;/span&gt;
    &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="s2"&gt;"ke"&lt;/span&gt;
        &lt;span class="n"&gt;day_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Keskiviikko"&lt;/span&gt;
    &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="s2"&gt;"to"&lt;/span&gt;
        &lt;span class="n"&gt;day_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Torstai"&lt;/span&gt;
    &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="s2"&gt;"pe"&lt;/span&gt;
        &lt;span class="n"&gt;day_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Perjantai"&lt;/span&gt;
    &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="s2"&gt;"la"&lt;/span&gt;
        &lt;span class="n"&gt;day_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Lauantai"&lt;/span&gt;
    &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="s2"&gt;"sun"&lt;/span&gt;
        &lt;span class="n"&gt;day_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Sunnuntai"&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="n"&gt;day_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"En tiedä!"&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="c1"&gt;# Implicit returns the value&lt;/span&gt;
    &lt;span class="n"&gt;day_name&lt;/span&gt;

&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;get_day_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"ma"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;      &lt;span class="c1"&gt;# Maanantai&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;get_day_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"koira"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;# En tiedä!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#while-loops"&gt;
  &lt;/a&gt;
  While Loops ↪️
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;lucky_num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;70&lt;/span&gt;

&lt;span class="c1"&gt;# Note that the 'not' keyword is similar to '!=' (negation)&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;lucky_num&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;77&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"No Lucky &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;lucky_num&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

    &lt;span class="n"&gt;lucky_num&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#loops"&gt;
  &lt;/a&gt;
  Loops ↩️
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# You already know what is an array :)&lt;/span&gt;
&lt;span class="n"&gt;people&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"C. Falcon"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Fox"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"DK"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Ness"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Samus"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# It will display all names in a different line&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;people&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# Same same but ... same&lt;/span&gt;
&lt;span class="n"&gt;people&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# Display numbers from range 0 to 5 (inclusive ..)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;inclusive&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;inclusive&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# Display number from range 0 to 4 (exclusive ...)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;exclusive&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;exclusive&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;   

&lt;span class="c1"&gt;# Let's agree: This is plain English&lt;/span&gt;
&lt;span class="c1"&gt;# PS.: counting starts from 0&lt;/span&gt;
&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;times&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;phrase&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Counting: &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;phrase&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;   
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#classes-and-objects"&gt;
  &lt;/a&gt;
  Classes And Objects 📝 🛋️
&lt;/h3&gt;

&lt;p&gt;This is my favorite part. Why? Because I remember when I have had my first contact with &lt;strong&gt;OOP&lt;/strong&gt; (back in 2000's [btw, old are your ancestors 😠]) in &lt;code&gt;Java&lt;/code&gt;. &lt;br&gt;
I was like: "What the heck is going on here?".&lt;br&gt;
I got to understand it better because of the &lt;strong&gt;Ruby&lt;/strong&gt; way of doing things.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MhuSrwou--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qbhnq5d4dff5lilgs72y.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MhuSrwou--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qbhnq5d4dff5lilgs72y.gif" alt="Raquer"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;## This is a very simple class&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Character&lt;/span&gt;
    &lt;span class="nb"&gt;attr_accessor&lt;/span&gt; &lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:role&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:home&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;## This is a very simple way to create a new object&lt;/span&gt;
&lt;span class="n"&gt;character&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Character&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;character&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Rygar"&lt;/span&gt;
&lt;span class="n"&gt;character&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;role&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Searcher"&lt;/span&gt;
&lt;span class="n"&gt;character&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;home&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Black Mountains"&lt;/span&gt;

&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;character&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Good that you asked (🔮), under the hood the &lt;code&gt;attr_...&lt;/code&gt; creates the so famous &lt;code&gt;getters&lt;/code&gt; and &lt;code&gt;setters&lt;/code&gt; for you, for instance:&lt;/p&gt;

&lt;p&gt;-&lt;code&gt;attr_accessor&lt;/code&gt;: creates the &lt;code&gt;getter&lt;/code&gt; and &lt;code&gt;setter&lt;/code&gt; methods.&lt;br&gt;
-&lt;code&gt;attr_reader&lt;/code&gt;: creates only the &lt;code&gt;getter&lt;/code&gt; method.&lt;br&gt;
-&lt;code&gt;attr_writer&lt;/code&gt;: creates only the &lt;code&gt;setter&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TLDR;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# In other words this&lt;/span&gt;
&lt;span class="n"&gt;attr_acessor&lt;/span&gt; &lt;span class="ss"&gt;:name&lt;/span&gt;

&lt;span class="c1"&gt;# Is the equivalent of&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;name&lt;/span&gt;
    &lt;span class="vi"&gt;@name&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# Note: The equals sign is a Ruby convention when creating setters. &lt;/span&gt;
&lt;span class="c1"&gt;# Omitting it is considering a bad practice but still works.&lt;/span&gt;
&lt;span class="c1"&gt;# (if it is working don't touch! 👍)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Cool, right? We have achieved so much just writing very few lines of code. I have to confess, when writing code using &lt;strong&gt;Ruby&lt;/strong&gt; sometimes I feel like cheating. &lt;br&gt;
But, in my opinion, &lt;strong&gt;Ruby&lt;/strong&gt; saves our time so we can worry about stuff that really matters.&lt;/p&gt;

&lt;p&gt;Let's check an other manner to create a &lt;code&gt;class&lt;/code&gt; in Ruby.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Shoes&lt;/span&gt;
    &lt;span class="nb"&gt;attr_accessor&lt;/span&gt; &lt;span class="ss"&gt;:brand&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:color&lt;/span&gt;

    &lt;span class="c1"&gt;# Allows you to set the initial values for a given object&lt;/span&gt;
    &lt;span class="c1"&gt;# Does 'constructor' sound familiar to you?&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;brand&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="vi"&gt;@brand&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;brand&lt;/span&gt;
        &lt;span class="vi"&gt;@size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;
        &lt;span class="vi"&gt;@color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;        
    &lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;trainers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Shoes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Kichute"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;47&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Heliotrope"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;trainers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;brand&lt;/span&gt;  &lt;span class="c1"&gt;# Kichute&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#object-class-methods"&gt;
  &lt;/a&gt;
  Object / Class Methods
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Hero&lt;/span&gt;
    &lt;span class="nb"&gt;attr_accessor&lt;/span&gt; &lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:animal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:hp&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="vi"&gt;@name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt;
        &lt;span class="vi"&gt;@animal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;animal&lt;/span&gt;
        &lt;span class="vi"&gt;@hp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hp&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="c1"&gt;# It is a class method&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;has_enough_hp&lt;/span&gt;
        &lt;span class="vi"&gt;@hp&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;5.5&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="s2"&gt;"Able to play"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"Consider resting, &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="vi"&gt;@name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;hero1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Hero&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Nakoruru"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"eagle"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;hero2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Hero&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Galford"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"husky"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.9&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Here we have invoked the object(s) method&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;hero1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;has_enough_hp&lt;/span&gt;      &lt;span class="c1"&gt;# Able to play&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;hero2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;has_enough_hp&lt;/span&gt;      &lt;span class="c1"&gt;# Consider resting, Galford&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#class-inheritance-shallow-explanation"&gt;
  &lt;/a&gt;
  Class Inheritance (Shallow Explanation)
&lt;/h3&gt;

&lt;p&gt;Allows classes to inherit characteristics of other classes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Fighter&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;make_special_attack&lt;/span&gt;
        &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Hadouken"&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;make_uppercut_punch&lt;/span&gt;
        &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Makes the uppercut move"&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;ryu&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Fighter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;ryu&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;make_special_attack&lt;/span&gt;          &lt;span class="c1"&gt;# Hadouken&lt;/span&gt;
&lt;span class="n"&gt;ryu&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;make_uppercut_punch&lt;/span&gt;          &lt;span class="c1"&gt;# Makes the uppercut move&lt;/span&gt;

&lt;span class="c1"&gt;# Subclass - "&amp;lt;" means inherits from&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SpecialFighter&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Fighter&lt;/span&gt; 

    &lt;span class="c1"&gt;# Overwrites 'make_special_attack' method&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;make_special_attack&lt;/span&gt;
        &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Shun Goku Satsu"&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="c1"&gt;# Creates a new method for this class&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;celebrate&lt;/span&gt;
        &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Is that all? You must be joking!"&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;gouki&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;SpecialFighter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;gouki&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;make_special_attack&lt;/span&gt;  &lt;span class="c1"&gt;# Shun Goku Satsu&lt;/span&gt;
&lt;span class="n"&gt;gouki&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;make_uppercut_punch&lt;/span&gt;  &lt;span class="c1"&gt;# Makes the uppercut move&lt;/span&gt;
&lt;span class="n"&gt;gouki&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;celebrate&lt;/span&gt;            &lt;span class="c1"&gt;# Is that all? You must be joking!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; as the &lt;code&gt;make_uppercut_punch&lt;/code&gt; move is used by both characters there is no need to re-declare it in our &lt;code&gt;subclass&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#modules"&gt;
  &lt;/a&gt;
  Modules 🛒
&lt;/h3&gt;

&lt;p&gt;Modules are nothing more nothing less than a container where you can store methods.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Greeting&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;say_hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"there"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Hi &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;."&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;say_bye_bye&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"dear"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Bye bye &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;."&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In order to access modules you must include its relative path as the example shows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;require_relative&lt;/span&gt; &lt;span class="s2"&gt;"./folder/the_name_of_your_file.rb"&lt;/span&gt;
&lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="no"&gt;Greeting&lt;/span&gt;

&lt;span class="no"&gt;Greeting&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;say_hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Bowser"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;# Hi Bowser.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#error-handling"&gt;
  &lt;/a&gt;
  Error Handling ⛔
&lt;/h3&gt;

&lt;p&gt;Error handlers are methods defined in the Exception class to deal with errors.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;begin&lt;/span&gt;
    &lt;span class="c1"&gt;# we have never defined the 'fav_character' variable&lt;/span&gt;
    &lt;span class="c1"&gt;# so it will fire the second 'rescue' block&lt;/span&gt;
    &lt;span class="c1"&gt;# and will display the customized message even&lt;/span&gt;
    &lt;span class="c1"&gt;# knowing that we also tried to make a division by 0&lt;/span&gt;
    &lt;span class="c1"&gt;# =&amp;gt; Reference to control flow for more &amp;lt;=&lt;/span&gt;

    &lt;span class="n"&gt;fav_character&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"Makoto Mizuhara"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;45&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;rescue&lt;/span&gt; &lt;span class="no"&gt;ZeroDivisionError&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Division By Zero Error"&lt;/span&gt;
&lt;span class="k"&gt;rescue&lt;/span&gt; &lt;span class="no"&gt;NameError&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"undefined local variable or method 'fav_character'."&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you would like to see the other &lt;code&gt;error handling&lt;/code&gt; in action, replace the statement &lt;code&gt;fav_character["Makoto Mizuhara"]&lt;/code&gt; for that one &lt;code&gt;fav_character = ["Makoto Mizuhara"]&lt;/code&gt;. 😉&lt;/p&gt;

&lt;p&gt;And that's it, folks! I mean, &lt;strong&gt;Ruby&lt;/strong&gt; cannot be resumed by any means to the features I have shown so far but it is a pretty good start.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#happy-hour-moment"&gt;
  &lt;/a&gt;
  Happy Hour Moment 🍹🍻🥤🍷
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M5ja_Dkf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vmt0gfw7z3h7kj94tc9m.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M5ja_Dkf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vmt0gfw7z3h7kj94tc9m.gif" alt="Happy Hour"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The good news here are that if you have followed along until the end (and thank you a ton for doing that! 🙏), you can already use the acquired knowledge to start exploring other 'seas'. For example, why don't you try to play around with &lt;strong&gt;Rails&lt;/strong&gt; (one of Ruby frameworks) a little bit?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#skip-this-part"&gt;
  &lt;/a&gt;
  Skip this part 📚 📖
&lt;/h3&gt;

&lt;p&gt;I can see you did not skip it so don't you dare to complain later. 😂👌&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;" The curiosity killed the cat."&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Well, if you allow me to recommend an excellent source to learn about &lt;strong&gt;Ruby on Rails&lt;/strong&gt;, I would advice the &lt;a href=""&gt;Zayne's&lt;/a&gt; Youtube channel.&lt;br&gt;
He doesn't publish videos very often but it really worth checking it out!&lt;/p&gt;

&lt;p&gt;You can also check &lt;a href=""&gt;Web Crunch&lt;/a&gt;, &lt;a href=""&gt;Codemy&lt;/a&gt;, &lt;a href=""&gt;FreeCodeCamp&lt;/a&gt; and of course the &lt;a href=""&gt;Ruby Docs&lt;/a&gt; and &lt;a href=""&gt;Rails Guides&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion-and-final-thoughts"&gt;
  &lt;/a&gt;
  Conclusion and Final Thoughts 🔚 💡
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Ruby&lt;/strong&gt; is without any doubts a very powerful, beginner friendly and lovely language. As any language, it has your flaws but don't be influenced by the &lt;strong&gt;"which one is the best language?"&lt;/strong&gt; war.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ruby&lt;/strong&gt; has been evolving a lot in the last years and counts with a very strong and respectful community that will help you whenever you need it.&lt;/p&gt;

&lt;p&gt;I have tried to highlight some examples I &lt;strong&gt;personally&lt;/strong&gt; consider important when 'meeting' &lt;strong&gt;Ruby&lt;/strong&gt; for the very first time.&lt;/p&gt;

&lt;p&gt;As you could see, the language speaks for itself. I venture to say that it is a &lt;code&gt;self.describing&lt;/code&gt; language. (Pun intended 🤦)&lt;/p&gt;

&lt;p&gt;Thanks so much for your companion. I hope you have learned something new today. (It doesn't necessarily mean from this article! 🤣)&lt;/p&gt;

&lt;p&gt;Cheerio! 👋&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>programming</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Why should every DEV use a screen reader? The answer might surprise You.</title>
      <author>Ammadeo</author>
      <pubDate>Sat, 17 Jul 2021 13:16:00 +0000</pubDate>
      <link>https://dev.to/ammadeo/why-should-every-dev-use-a-screen-reader-the-answer-might-surprise-you-1139</link>
      <guid>https://dev.to/ammadeo/why-should-every-dev-use-a-screen-reader-the-answer-might-surprise-you-1139</guid>
      <description>&lt;p&gt;As a developer, You probably know the pain of eyestrain. Screen readers may come to the rescue.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-will-it-help-me"&gt;
  &lt;/a&gt;
  How will it help Me?
&lt;/h1&gt;

&lt;p&gt;You read docs and articles every day. They sometimes don't even provide You with a dark theme! To save Your eyes, let's make a screen reader read them for You.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#additional-benefit"&gt;
  &lt;/a&gt;
  Additional benefit
&lt;/h2&gt;

&lt;p&gt;When using a screen reader, You get better at designing an accessible user experience. For instance, You'll quickly find out how crucial semantic HTML is in helping You jump through websites' sections with ease.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#word-of-caution"&gt;
  &lt;/a&gt;
  Word of caution
&lt;/h1&gt;

&lt;p&gt;Using a screen reader might take some time to master. It's similar to learning to write fast on a keyboard. It takes practice, but it's also quite rewarding.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-screen-reader-should-i-use"&gt;
  &lt;/a&gt;
  What screen reader should I use?
&lt;/h1&gt;

&lt;p&gt;There are plenty of screen readers available. My personal favourites are &lt;a href="https://play.google.com/store/apps/details?id=com.google.android.marvin.talkback"&gt;TalkBack&lt;/a&gt; for android and &lt;a href="https://www.nvaccess.org/download/"&gt;NVDA&lt;/a&gt; for windows. I've heard a lot of good opinions about VoiceOver for Mac too. For the first one, I recommend You to check out TalkBack. It's the most user-friendly. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Next week&lt;/strong&gt; I'll tell You how to set up TalkBack for the best developer experience. So stay tuned!&lt;/p&gt;

&lt;p&gt;Btw. A few months ago, I made an electron app to help myself with severe eyestrain. Feel free to check it out!&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ammadeo"&gt;
        ammadeo
      &lt;/a&gt; / &lt;a href="https://github.com/ammadeo/save-my-eyes"&gt;
        save-my-eyes
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Eyes care app for windows
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


</description>
      <category>productivity</category>
      <category>a11y</category>
      <category>webdev</category>
    </item>
    <item>
      <title>On Modern Web Applications</title>
      <author>Johnny Jarecsni</author>
      <pubDate>Sat, 17 Jul 2021 12:47:34 +0000</pubDate>
      <link>https://dev.to/jarecsni/on-modern-web-applications-5eab</link>
      <guid>https://dev.to/jarecsni/on-modern-web-applications-5eab</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;We all know that fashion waves come and go in software development, just like everywhere else in life. When in the middle of such a wave, it is extremely difficult to raise any concerns about the actual main stream, canonical method or truth. Currently it is agile and functional programming. We have a tunnel vision, where we keep repeating '4 legs good, 2 legs bad'. This article attempts to go against the accepted and unchallenged, and look at a few pretty big cracks in the system, trying to come up with some recommendations as well.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The problem
&lt;/h1&gt;

&lt;p&gt;It has been a while now that I noticed a few things I did not like about how we write software. I started to collect these points, and was thinking about why we do things the way we do them, and how these individual aspects might correlate, catalysing each other. It is best if we start with the end product of it all, the software that we write.&lt;/p&gt;

&lt;p&gt;If you look at a typical web application made in the past few years, you will notice the following few attributes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;it is using FP as programming paradigm&lt;/li&gt;
&lt;li&gt;it is using a framework like Redux for application logic&lt;/li&gt;
&lt;li&gt;it has no noticeable software design&lt;/li&gt;
&lt;li&gt;it has tons of unit tests&lt;/li&gt;
&lt;li&gt;it has a layered organisation of files (services, actions, etc.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When you try to apply even the tiniest change to an application written like this, you immediately notice the following engineering principles all being violated:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Open-Closed Principle&lt;/li&gt;
&lt;li&gt;Single Responsibility Principle&lt;/li&gt;
&lt;li&gt;Liskov Substitution Principle&lt;/li&gt;
&lt;li&gt;Interface Segregation Principle&lt;/li&gt;
&lt;li&gt;Dependency Inversion Principle&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;First of all, any functionality change needs to involve all the layers, actions, reducers, components, meaning lots of changes. Since there is a tendency to introduce dependencies between pieces of state in the reducer(s) these changes are all potentially risky - hence you need to put a load of unit tests in place to make sure things still work. Things are flat and open, there is no resistance in this software, people can do pretty much anything, software contracts, etc. are not expressed by any means. And they even think that this is a good thing...&lt;/p&gt;

&lt;p&gt;There is no noticeable design, that is, no entities, processes, interactions, the software is an unintelligible assembly of framework specific technicalities like actions and reducer functions that operate on atomic bits like a Boolean variable that has a particular meaning. Looking at this from ten thousand feet it looks as though we are again at the elementary level of assembly programming - our software is close to the iron (close to the framework and the DOM) and far away from the reality it is modelling. Yes, it seems history does repeat itself.&lt;/p&gt;

&lt;p&gt;This type of software will obviously be very costly to maintain. As I said before, simple functional changes will need to be woven through the fabric of the application (lots of changes, lots of unit tests) but larger changes, like supporting a different financial product with a slightly different set of attributes/behaviours will be painful due the complete lack of abstraction and tight coupling everywhere. I like to call this type of software shrink wrap software. It is tailor made to the exact set of requirements known at the time of writing the software, with absolutely zero flexibility to withstand or help with change.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#under-the-hood"&gt;
  &lt;/a&gt;
  Under the hood
&lt;/h1&gt;

&lt;p&gt;So what is driving all this? We all know that back in the 90s people started to feel that Waterfall doesn't really cut the mustard as it was unable to keep up with the fast changing business reality. By the way, this was the era of Object Oriented programming and software design (Design Patterns by GoF, etc. - apparently people had time for all that! :) &lt;/p&gt;

&lt;p&gt;Coincidentally, application development took another turn at the time, more like around the early 2000s. Web applications started to replace the heavy duty GUIs and their object oriented designs that were developed with costly waterfall methodology. The fast paced business world found its ideal match, functional programming and agile.&lt;/p&gt;

&lt;p&gt;The focus of agile is short term, the actual iteration, there is not much room for anything else. It is but natural that developers picked up a tool which is more proper for this type work, functional programming. Functional languages are good at small scale work, as in writing lots of small functions that can be combined to carry out more complicated work. Due to their dynamic nature they are also good for quick prototyping (funnily enough most prototypes in an Agile project end up being used as the real thing - clearly showing some confusion in the minds). &lt;/p&gt;

&lt;p&gt;Functional programming, however, inherently is not so good at expressing larger scale designs. If you try to google for functional design patters you will find none. Everything is a function, end of story. You can play with scopes etc, but it is not idiomatic functional programming any more. Functional programming is wonderful, and it is very efficient for an array of things. It is a mistake however to try to use it for everything. It leads to the messy, unmaintainable codebases we call agile software. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#a-way-out"&gt;
  &lt;/a&gt;
  A Way out
&lt;/h1&gt;

&lt;p&gt;So far I tried to show where I see the problems with modern software development. It is ephemeral, short sighted, lacks design and uses a tool that is inherently incapable of producing structured, reusable and maintainable software. So what shall we do, shall we go back to waterfall and Object Oriented languages? &lt;/p&gt;

&lt;p&gt;Well, that would hardly work, there was a reason for leaving all that behind.&lt;/p&gt;

&lt;p&gt;There are a few things we need to take into account when trying to come up with a better way of crafting software.&lt;/p&gt;

&lt;p&gt;1) Businesses change rapidly, so only tools/metholodigies that are able to keep up will be viable&lt;br&gt;
2) Agile is unlikely to go away&lt;/p&gt;

&lt;p&gt;Since coming up with an application design for each new application is not really viable due to the points above, we need a better framework that allows us to craft software, component by component that blends into the super-structure of the application, which is easy to maintain over time. This is the exact opposite of things like Redux, where things melt away, as you keep adding more and more to the application. They dissolve into atomic pieces of the state and fragmented logic, which are very difficult to reason about. I think this is a key problem with Redux. It forces a brittle, fragmented architecture on your application - and there is a massive price to pay for this down the line.&lt;/p&gt;

&lt;p&gt;So the way forward can be a plugin-like architecture, where you can develop pieces of functionality (yes, using FP if you like!) where these plugins provide clear integration points and APIs, and it is easy to see how they are assembled together to provide a piece of functionality. These plugins can then be easily reused in other application, since plugins are self-contained and encapsulated units of markup, state and async resources. Contrast this with the fragmented nature of modern web apps, with the entangled web of action creators, reducers, services, utilities, and UI components - where it is impossible to isolate anything for reuse.&lt;/p&gt;

&lt;p&gt;This plugin architecture will also help with testing, by allowing easy replacement of the dependencies these plugins declare. &lt;/p&gt;

&lt;p&gt;It is still a question, how much of this is possible to implement in TypeScript, which is tied to JavaScript which has some limitations around implementing these kind of 'meta' designs, which are based on indirection, inversion of control, decoupling and lazy/conditional loading.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;It is long overdue to come up with a better architecture and organisation for web applications. Finally we have a simple and elegant UI component framework, Svelte, but we are still suffering from an even bigger problem, not being able to model business problems in a clean, reusable and maintainable way.&lt;/p&gt;

&lt;p&gt;My proposal is combine the good from both OO and FP to come up with a framework that allows rapid application development and yet it does not compromise on the maintainability of the resulting code. &lt;/p&gt;

&lt;p&gt;Sounds like a daring proposition? &lt;/p&gt;

</description>
      <category>architecture</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Introducing Angular Mini Blog Series - Part 1</title>
      <author>Shreya Prasad</author>
      <pubDate>Sat, 17 Jul 2021 12:27:22 +0000</pubDate>
      <link>https://dev.to/shreyapd06/introducing-angular-mini-blog-series-part-1-4hdg</link>
      <guid>https://dev.to/shreyapd06/introducing-angular-mini-blog-series-part-1-4hdg</guid>
      <description>&lt;p&gt;In this series of blog posts, we are going to learn about Angular from beginning. I will try to keep the blogs very short, crisp and easy to understand.&lt;br&gt;
Go to &lt;a href="https://angular.io/"&gt;Angular's official website&lt;/a&gt; if you want to learn basic stuff like: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What Angular is &lt;/li&gt;
&lt;li&gt;How to create a basic application&lt;/li&gt;
&lt;li&gt;Generate Components&lt;/li&gt;
&lt;li&gt;Start Angular Live Server&lt;/li&gt;
&lt;li&gt;Basic Directory Structure&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here, we will get started with:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Components&lt;/li&gt;
&lt;li&gt;Modules &lt;/li&gt;
&lt;li&gt;How Angular Apps loads&lt;/li&gt;
&lt;li&gt;AppModule&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#components"&gt;
  &lt;/a&gt;
  Components
&lt;/h2&gt;

&lt;p&gt;You know about &lt;code&gt;&amp;lt;html&amp;gt;, &amp;lt;head&amp;gt; and &amp;lt;body&amp;gt;&lt;/code&gt; tags and so on right? These are native HTML elements that are provided to us. But what if we could create our own HTML elements?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/91fEJqgdsnu4E/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/91fEJqgdsnu4E/giphy.gif" alt="surprised-gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yes, this is where components come in! Components are typically custom built HTML elements, and each of these elements can instantiate only one component. &lt;br&gt;
The best part is - they are reusable, which means that one you create a component, you can utilize it multiple times in your application! Also, if you need to modify it, simply change one file and those changes will be reflected wherever you have used this component! Some popular examples of components are Navigation Bar, Footer, Side Menu etc.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rp8y73mK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://geeksarray.com/images/blog/Angular-Component-example.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rp8y73mK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://geeksarray.com/images/blog/Angular-Component-example.png" alt="component"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#modules"&gt;
  &lt;/a&gt;
  Modules
&lt;/h2&gt;

&lt;p&gt;Angular is not present as one monolithic code base. Instead, it is divided into modules which are present in different locations and their utility is independent of each other. Modules provide the highest level of abstraction available within the Angular framework. Everything in your app is ultimately structured around modules. This is powerful! It means that you can easily encapsulate code within a module and share or reuse it throughout your app.&lt;/p&gt;

&lt;p&gt;We use &lt;strong&gt;@NgModule&lt;/strong&gt; decorator to declare a class as module.&lt;br&gt;
&lt;strong&gt;@NgModule&lt;/strong&gt; decorator contains below properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;declarations&lt;/strong&gt;: It includes component, directives, pipes that belongs to this module.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;exports&lt;/strong&gt;: It include component, directives, pipes which can be accessible to other NgModule.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;imports&lt;/strong&gt;: Contains Modules whose exported classes needed by this module.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;providers&lt;/strong&gt;: Contains the services generated by this module.
bootstrap: Initialize root component
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;NgModule&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;declarations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="nx"&gt;AppComponent&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;imports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="nx"&gt;BrowserModule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;AppRoutingModule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;FormsModule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;CoreModule&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;providers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
  &lt;span class="na"&gt;bootstrap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;AppComponent&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppModule&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#how-angular-app-loads"&gt;
  &lt;/a&gt;
  How Angular App loads?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O5oGIwd_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5b3999l9ojj0b7h124sf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O5oGIwd_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5b3999l9ojj0b7h124sf.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Do you see this index.html? This is the page that's mainly rendered by Angular. It consists of only 1 component - &lt;code&gt;&amp;lt;app-root&amp;gt;&lt;/code&gt;. This &lt;code&gt;&amp;lt;app-root&amp;gt;&lt;/code&gt; is the root component which encapsulates all the child components, i.e the components you create and bootstraps them to render everything inside it on index.html.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Demo Angular App&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;base&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;app-root&amp;gt;&amp;lt;/app-root&amp;gt;&lt;/span&gt; //only this component will be present 
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#appmodule"&gt;
  &lt;/a&gt;
  AppModule
&lt;/h2&gt;

&lt;p&gt;When looking at the Angular module system, all things must begin with the app module. The root app module is a necessary portion of every Angular app. By default, this module is named AppModule, although it is possible to rename this module. The AppModule is the entry point to your app.&lt;/p&gt;

&lt;p&gt;A newly generated AppModule would look like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BrowserModule&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/platform-browser&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;NgModule&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;AppComponent&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./app.component&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;NgModule&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;declarations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="nx"&gt;AppComponent&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;imports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="nx"&gt;BrowserModule&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;providers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
  &lt;span class="na"&gt;bootstrap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;AppComponent&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppModule&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is a good practice to keep this file as minimal as possible. This can be done by importing only those modules that are absolutely necessary for your app to load initially. Or only declare Angular components, directives, or pipes that you want globally available.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hey-before-you-go-%E2%80%8D"&gt;
  &lt;/a&gt;
  ✋ Hey! Before you go 🏃‍
&lt;/h2&gt;

&lt;p&gt;If you enjoyed this article, I recommend you to stay tuned to my &lt;a href="https://twitter.com/shreyacasmalert"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This is my first time on Dev.to so I would really appreciate if you would like my blog or share constructive feedback!&lt;/em&gt;💖&lt;/p&gt;

&lt;p&gt;In the next blog, we will cover data binding and it's various types so stay tuned! ✨&lt;/p&gt;

</description>
      <category>angular</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
  </channel>
</rss>
