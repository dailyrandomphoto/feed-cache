<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>TOP 5¬†.NET MAUI new featuresüèÖ</title>
      <author>Dotnetsafer</author>
      <pubDate>Fri, 23 Jul 2021 10:55:04 +0000</pubDate>
      <link>https://dev.to/dotnetsafer/top-5-net-maui-new-features-1mlb</link>
      <guid>https://dev.to/dotnetsafer/top-5-net-maui-new-features-1mlb</guid>
      <description>&lt;h2&gt;
  &lt;a href="#about-net-maui"&gt;
  &lt;/a&gt;
  üîÑ About .NET MAUI
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Microsoft&lt;/em&gt; has already started publishing &lt;strong&gt;.NET MAUI&lt;/strong&gt; Previews these days. They show some exciting new features that will greatly reduce time and improve performance when programming.&lt;/p&gt;

&lt;p&gt;In case you don‚Äôt know what &lt;em&gt;.NET MAUI&lt;/em&gt; is, it‚Äôs the &lt;strong&gt;evolution&lt;/strong&gt; of &lt;strong&gt;Xamarin.Forms&lt;/strong&gt;, extended from mobile to desktop scenarios, with &lt;strong&gt;UI&lt;/strong&gt; controls rebuilt from scratch for performance and extensibility.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#possible-new-c-10-features"&gt;
  &lt;/a&gt;
  ‚úÖ Possible new C# 10 features
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#net-hot-reload"&gt;
  &lt;/a&gt;
  üîº.NET Hot Reload
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;.NET Hot Reload&lt;/strong&gt; is a new feature, which according to &lt;em&gt;Microsoft&lt;/em&gt;, will allow you to make live edits to the source code of your &lt;em&gt;.NET MAUI&lt;/em&gt; application while it is running, &lt;strong&gt;reducing&lt;/strong&gt; the number of times you need to rebuild your application.&lt;/p&gt;

&lt;p&gt;They also tell us that in the next versions &lt;em&gt;.NET Hot Reload&lt;/em&gt; will also be available for &lt;strong&gt;Android&lt;/strong&gt;, &lt;strong&gt;iOS&lt;/strong&gt; and &lt;strong&gt;macOS&lt;/strong&gt;, and will also integrate &lt;em&gt;XAML Hot Reload&lt;/em&gt; and &lt;em&gt;Live Visual Tree&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ECz7w4hb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1362/1%2ARsAUPN10hT2HSJY8o1H3mw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ECz7w4hb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1362/1%2ARsAUPN10hT2HSJY8o1H3mw.png" alt=".NET MAUI features"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#blazorwebview"&gt;
  &lt;/a&gt;
  üîºBlazorWebView
&lt;/h3&gt;

&lt;p&gt;The &lt;strong&gt;new&lt;/strong&gt; &lt;em&gt;BlazorWebView&lt;/em&gt; lets you &lt;strong&gt;host&lt;/strong&gt; a Blazor web application &lt;strong&gt;directly&lt;/strong&gt; in your .NET MAUI application and take advantage of native platform functionality and user interface controls. The control can be added to &lt;strong&gt;any XAML page&lt;/strong&gt; and pointed to the root of the Blazor application.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;BlazorWebView&lt;/span&gt;  
  &lt;span class="n"&gt;HostPage&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"wwwroot/index.html"&lt;/span&gt;  
  &lt;span class="n"&gt;Services&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"{StaticResource Services}"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;  
 &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;BlazorWebView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RootComponent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;  
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;RootComponent&lt;/span&gt;  
      &lt;span class="n"&gt;Selector&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#app"&lt;/span&gt;  
      &lt;span class="n"&gt;ComponentType&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"{x:Type local:Main}"&lt;/span&gt;  
    &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;  
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;BlazorWebView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RootComponent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;  
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;BlazorWebView&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#slim-processors"&gt;
  &lt;/a&gt;
  üîºSlim processors
&lt;/h3&gt;

&lt;p&gt;Also &lt;em&gt;.NET MAUI&lt;/em&gt; will have a function to &lt;strong&gt;migrate&lt;/strong&gt; a custom renderer from &lt;em&gt;Xamarin.Forms.&lt;/em&gt; Although these can be used with some compatibility package, &lt;em&gt;Microsoft&lt;/em&gt; claims that this will help the application to be much lighter and to develop it much more efficient.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;dotnet build -t:Run -f net6.0-android&lt;br&gt;&lt;br&gt;
dotnet build -t:Run -f net6.0-ios&lt;br&gt;&lt;br&gt;
dotnet build -t:Run -f net6.0-maccatalyst&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h3&gt;
  &lt;a href="#splash-screen"&gt;
  &lt;/a&gt;
  üîºSplash Screen
&lt;/h3&gt;

&lt;p&gt;On mobile platforms especially you want your &lt;strong&gt;first screen&lt;/strong&gt; to appear as &lt;strong&gt;quickly&lt;/strong&gt; as possible, and this is done by implementing a static splash screen. &lt;em&gt;.NET MAUI&lt;/em&gt; now has a single place to describe your splash screen for all platforms that support them.&lt;/p&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0ua8GE3R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1000/1%2A8it4VGa0x4ZtG9Swd2eq0g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0ua8GE3R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1000/1%2A8it4VGa0x4ZtG9Swd2eq0g.png" alt=".NET MAUI update"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#unification-of-libraries-in-net-maui"&gt;
  &lt;/a&gt;
  üîºUnification of libraries in .NET MAUI
&lt;/h3&gt;

&lt;p&gt;As &lt;em&gt;Microsoft&lt;/em&gt; tells us, &lt;em&gt;.NET MAUI&lt;/em&gt; will come with a &lt;strong&gt;unification&lt;/strong&gt; of critical libraries. You will provide several benefits by merging the &lt;em&gt;Xamarin.Essentials&lt;/em&gt; library into the &lt;em&gt;.NET MAUI&lt;/em&gt; so that with these, you can &lt;strong&gt;easily&lt;/strong&gt; use the device‚Äôs capabilities such as device sensors, photos, contacts, and many services that you use on a regular basis, such as authentication and secure storage.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#what-to-expect-from-this-in-the-future-on-maui"&gt;
  &lt;/a&gt;
  ü§î What to expect from this in the future on Maui?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;em&gt;.NET MAUI&lt;/em&gt; at the time managed to have &lt;strong&gt;feature-parity&lt;/strong&gt; (equality of characteristics) and achieve much &lt;strong&gt;better performance&lt;/strong&gt; (than it already has in itself) than it has today to develop &lt;strong&gt;Android&lt;/strong&gt; applications, &lt;strong&gt;iOS&lt;/strong&gt;, &lt;strong&gt;UWP&lt;/strong&gt; and other platforms.&lt;/li&gt;
&lt;li&gt;  In addition, we will not have to worry about having to implement complex &lt;em&gt;Handlers&lt;/em&gt; or the cross-platform appearance that we really need to do, which we would end up doing (if it were the case) at a native level using the same &lt;strong&gt;APIs&lt;/strong&gt; of the mobile platforms.&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#conclution"&gt;
  &lt;/a&gt;
  üü¢ Conclution:
&lt;/h2&gt;

&lt;p&gt;.NET MAUI has only a few months left to go officially. The latest features mentioned by Microsoft in the Previews are very powerful. At the moment we still have a little left to have it and apparently it will greatly facilitate developers to program web, console or mobile applications.&lt;/p&gt;

&lt;p&gt;What do you think?ü§î&lt;/p&gt;

</description>
      <category>csharp</category>
      <category>dotnet</category>
      <category>netcore</category>
      <category>netmaui</category>
    </item>
    <item>
      <title>Advanced ViewComponent patterns in Rails</title>
      <author>Abeid Ahmed</author>
      <pubDate>Fri, 23 Jul 2021 10:03:51 +0000</pubDate>
      <link>https://dev.to/abeidahmed/advanced-viewcomponent-patterns-in-rails-2b4m</link>
      <guid>https://dev.to/abeidahmed/advanced-viewcomponent-patterns-in-rails-2b4m</guid>
      <description>&lt;p&gt;ViewComponents are useful if you have tons of reusable partials with a significant amount of embedded Ruby. ViewComponent lets you isolate your UI so that you can unit test them and more.&lt;/p&gt;

&lt;p&gt;By isolation, I mean that you cannot share your instance variables without explicitly passing them to the component. For example, in a normal Rails partials you can do this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt;&lt;span class="c1"&gt;# posts/show.html.erb &lt;/span&gt;&lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="vi"&gt;@post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="s2"&gt;"some_partial"&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;


&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt;&lt;span class="c1"&gt;# posts/_some_partial.html.erb &lt;/span&gt;&lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="vi"&gt;@post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;created_at&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Notice, how the instance variables are shared without explicitly passing it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this article, I'll be going over some patterns that I've learned by reading through other people's codebase.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting started
&lt;/h2&gt;

&lt;p&gt;If you haven't already, let's get started by installing the &lt;code&gt;gem&lt;/code&gt; itself.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Gemfile&lt;/span&gt;

&lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s2"&gt;"view_component"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;require: &lt;/span&gt;&lt;span class="s2"&gt;"view_component/engine"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After you've installed the &lt;code&gt;gem&lt;/code&gt;, create a new file at &lt;code&gt;app/components/application_component.rb&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/components/application_component.rb&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ApplicationComponent&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ViewComponent&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Base&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We'll use this &lt;code&gt;class&lt;/code&gt; to add reusable code so that other components can inherit from it, and ViewComponent generators will also automatically inherit from this &lt;code&gt;class&lt;/code&gt; if you've declared it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#advanced-patterns"&gt;
  &lt;/a&gt;
  Advanced patterns
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#building-githubs-raw-subhead-endraw-component"&gt;
  &lt;/a&gt;
  Building GitHub's &lt;code&gt;subhead&lt;/code&gt; component
&lt;/h3&gt;

&lt;p&gt;To warm-up, we'll be building a simple &lt;code&gt;subhead&lt;/code&gt; component that GitHub utilizes heavily in their settings page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZYbtvYzB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j6883cvnuhx5jqdg3rs7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZYbtvYzB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j6883cvnuhx5jqdg3rs7.png" alt="Subhead component"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;rails g component subhead
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First, we'll start with the not-so-good approach. Then we'll optimize it to fit any purpose.&lt;/p&gt;

&lt;p&gt;Upon closely looking at the &lt;code&gt;subhead&lt;/code&gt; component, we can notice that&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It has a title (mandatory)&lt;/li&gt;
&lt;li&gt;It can have a description (optional)&lt;/li&gt;
&lt;li&gt;It may have other states (such as danger)
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/components/subhead_component.rb&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SubheadComponent&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationComponent&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:,&lt;/span&gt; &lt;span class="ss"&gt;description: &lt;/span&gt;&lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;danger: &lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;
    &lt;span class="vi"&gt;@description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;description&lt;/span&gt;
    &lt;span class="vi"&gt;@danger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;danger&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;render?&lt;/span&gt;
    &lt;span class="vi"&gt;@title&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;present?&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt;&lt;span class="c1"&gt;# app/components/subhead_component.html.erb &lt;/span&gt;&lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="vi"&gt;@title&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="vi"&gt;@danger&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="s1"&gt;'subhead--danger'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'some other class'&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="vi"&gt;@description&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then, you can use this component in your &lt;code&gt;.erb&lt;/code&gt; files, by calling,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="no"&gt;SubheadComponent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;title: &lt;/span&gt;&lt;span class="s2"&gt;"something"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;description: &lt;/span&gt;&lt;span class="s2"&gt;"subhead description"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At first, it may seem feasible. But problems quickly arise when you start using this component more. What if you need to pass in additional styles to the &lt;code&gt;h2&lt;/code&gt; or the &lt;code&gt;p&lt;/code&gt;? What if you need to pass in &lt;code&gt;data-&lt;/code&gt; attributes? Umm, you'll probably feel lost in multiple &lt;code&gt;if-else&lt;/code&gt; statements. This problem could have been avoided in the first place if we made our components more susceptible to changes.&lt;/p&gt;

&lt;p&gt;ViewComponents can be called upon. That means we can use &lt;code&gt;lambda&lt;/code&gt; to make our components decoupled from the state.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/components/application_component.rb&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ApplicationComponent&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ViewComponent&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Base&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;tag: &lt;/span&gt;&lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;classes: &lt;/span&gt;&lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@tag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt;
    &lt;span class="vi"&gt;@classes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;classes&lt;/span&gt;
    &lt;span class="vi"&gt;@options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;call&lt;/span&gt;
    &lt;span class="n"&gt;content_tag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@tag&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;class: &lt;/span&gt;&lt;span class="vi"&gt;@classes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="vi"&gt;@options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vi"&gt;@tag&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="c1"&gt;# helpers&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;class_names&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;classes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

    &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;class_name&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;class_name&lt;/span&gt;
      &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="no"&gt;String&lt;/span&gt;
        &lt;span class="n"&gt;classes&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;class_name&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;class_name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;present?&lt;/span&gt;
      &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="no"&gt;Hash&lt;/span&gt;
        &lt;span class="n"&gt;class_name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
          &lt;span class="n"&gt;classes&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;
      &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="no"&gt;Array&lt;/span&gt;
        &lt;span class="n"&gt;classes&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;class_names&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;class_name&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;presence&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="n"&gt;classes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;compact&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;uniq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;" "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We're defining the &lt;code&gt;call&lt;/code&gt; method so that we can use our &lt;code&gt;lambda&lt;/code&gt;. It's all Rails, so we can probably use &lt;code&gt;content_tag&lt;/code&gt; and other &lt;code&gt;view&lt;/code&gt; helpers as well. Now let's change our &lt;code&gt;subhead&lt;/code&gt; component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/components/subhead_component.rb&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SubheadComponent&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationComponent&lt;/span&gt;
  &lt;span class="n"&gt;renders_one&lt;/span&gt; &lt;span class="ss"&gt;:heading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;lambda&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="ss"&gt;variant: &lt;/span&gt;&lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:tag&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="ss"&gt;:h2&lt;/span&gt;
    &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:classes&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;class_names&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:classes&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="s2"&gt;"subhead-heading"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;"subhead-heading--danger"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;variant&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"danger"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="no"&gt;ApplicationComponent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;renders_one&lt;/span&gt; &lt;span class="ss"&gt;:description&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;lambda&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|**&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:tag&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="ss"&gt;:div&lt;/span&gt;
    &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:classes&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;class_names&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:classes&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="s2"&gt;"subhead-description"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="no"&gt;ApplicationComponent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;

    &lt;span class="vi"&gt;@options&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:tag&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="ss"&gt;:div&lt;/span&gt;
    &lt;span class="vi"&gt;@options&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:classes&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;class_names&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:classes&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="s2"&gt;"subhead"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;render?&lt;/span&gt;
    &lt;span class="n"&gt;heading&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;present?&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt;&lt;span class="c1"&gt;# app/components/subhead_component.html.erb &lt;/span&gt;&lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;

&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="no"&gt;ApplicationComponent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="vi"&gt;@options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;heading&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I know it looks intimidating at first, but I promise you that you'll be blown away at how reusable the component is.&lt;/p&gt;

&lt;p&gt;Using this component is easy, the hard part was making it work.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="no"&gt;SubheadComponent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;data: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;controller: &lt;/span&gt;&lt;span class="s2"&gt;"subhead"&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;heading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;classes: &lt;/span&gt;&lt;span class="s2"&gt;"more-classes"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;"Hey there!"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;

  &lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;description&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;tag: :div&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;variant: &lt;/span&gt;&lt;span class="s2"&gt;"danger"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
    My description 
  &lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, compare this with what we had earlier. I know right. This is way better than the previous version. Let's build another component.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#your-friend-the-avatar-component"&gt;
  &lt;/a&gt;
  Your friend, the avatar component
&lt;/h3&gt;

&lt;p&gt;This time we'll be using the &lt;code&gt;inline&lt;/code&gt; variant of the ViewComponent.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;rails g component avatar &lt;span class="nt"&gt;--inline&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After you run the command, notice that it only generates the &lt;code&gt;.rb&lt;/code&gt; file and not the &lt;code&gt;.html.erb&lt;/code&gt; file. For simple components, it's fine to just &lt;code&gt;render&lt;/code&gt; it from the &lt;code&gt;.rb&lt;/code&gt; file itself by making use of the &lt;code&gt;ApplicationComponent&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AvatarComponent&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationComponent&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;:,&lt;/span&gt; &lt;span class="n"&gt;alt&lt;/span&gt;&lt;span class="p"&gt;:,&lt;/span&gt; &lt;span class="ss"&gt;size: &lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;

    &lt;span class="vi"&gt;@options&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:tag&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="ss"&gt;:img&lt;/span&gt;
    &lt;span class="vi"&gt;@options&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:src&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;
    &lt;span class="vi"&gt;@options&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:alt&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;alt&lt;/span&gt;
    &lt;span class="vi"&gt;@options&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:classes&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;class_names&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:classes&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="s2"&gt;"avatar rounded-full flex items-center justify-center"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;"avatar--&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;call&lt;/span&gt;
    &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="no"&gt;ApplicationComponent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="vi"&gt;@options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can now use this component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="no"&gt;AvatarComponent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;src: &lt;/span&gt;&lt;span class="s2"&gt;"some url"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;alt: &lt;/span&gt;&lt;span class="s2"&gt;"your alt attribute"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;size: &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As always, you can pass in &lt;code&gt;classes&lt;/code&gt;, &lt;code&gt;data&lt;/code&gt; attributes, and more. In my opinion, this is a good way to build components. They are segregated from your business logic and allow unit testing, which is advantageous as compared to normal Rails partials.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#building-a-popover"&gt;
  &lt;/a&gt;
  Building a popover
&lt;/h3&gt;

&lt;p&gt;Popovers are used to bring attention to specific user interface elements, typically to suggest an action or to guide users through a new experience - &lt;a href="%5BPopover%20%7C%20Primer%20CSS%5D(https://primer.style/css/components/popover)"&gt;Primer CSS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bSYMwRsU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i813lmdqx5lxcqmhcgcu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bSYMwRsU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i813lmdqx5lxcqmhcgcu.png" alt="Popover component"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We'll be using Stimulus.js to show and hide the popover. If you haven't already, please install Stimulus.js.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// app/javascript/controllers/popover_controller.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Controller&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;stimulus&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Controller&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;targets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;container&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="nx"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hide&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;containerTarget&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toggleAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hidden&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;hide&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;containerTarget&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hidden&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First, let's add this to our &lt;code&gt;app/components/application_component.rb&lt;/code&gt;, so that we can pass in other &lt;code&gt;data&lt;/code&gt; attributes without any complexity.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/components/application_component.rb&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;data_attributes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;args_without_attributes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;except&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:attributes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:attributes&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:attributes&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;nil?&lt;/span&gt;

  &lt;span class="n"&gt;args_without_attributes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each_key&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="kp"&gt;attr&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:attributes&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;include?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:attributes&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="kp"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;" &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kp"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:attributes&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;merge!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Hash&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kp"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kp"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:attributes&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We'll also make adjustments to the &lt;code&gt;initialize&lt;/code&gt; method and the &lt;code&gt;call&lt;/code&gt; method in our &lt;code&gt;application_component.rb&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;:,&lt;/span&gt; &lt;span class="ss"&gt;classes: &lt;/span&gt;&lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;data: &lt;/span&gt;&lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="vi"&gt;@tag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt;
  &lt;span class="vi"&gt;@classes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;classes&lt;/span&gt;
  &lt;span class="vi"&gt;@data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;
  &lt;span class="vi"&gt;@options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;call&lt;/span&gt;
  &lt;span class="n"&gt;content_tag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@tag&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;class: &lt;/span&gt;&lt;span class="vi"&gt;@classes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;data: &lt;/span&gt;&lt;span class="vi"&gt;@data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="vi"&gt;@options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vi"&gt;@tag&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# Note that we're just accepting an additional `data` attribute.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run &lt;code&gt;rails g component popover&lt;/code&gt; and let's get started.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/components/popover_component.rb&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PopoverComponent&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationComponent&lt;/span&gt;
  &lt;span class="no"&gt;DEFAULT_POSITION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:top_left&lt;/span&gt;

  &lt;span class="no"&gt;POSITIONS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="ss"&gt;bottom: &lt;/span&gt;&lt;span class="s2"&gt;"popover-message--bottom"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;bottom_right: &lt;/span&gt;&lt;span class="s2"&gt;"popover-message--bottom-right"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;bottom_left: &lt;/span&gt;&lt;span class="s2"&gt;"popover-message--bottom-left"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;left: &lt;/span&gt;&lt;span class="s2"&gt;"popover-message--left"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;left_bottom: &lt;/span&gt;&lt;span class="s2"&gt;"popover-message--left-bottom"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;left_top: &lt;/span&gt;&lt;span class="s2"&gt;"popover-message--left-top"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;right: &lt;/span&gt;&lt;span class="s2"&gt;"popover-message--right"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;right_bottom: &lt;/span&gt;&lt;span class="s2"&gt;"popover-message--right-bottom"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;right_top: &lt;/span&gt;&lt;span class="s2"&gt;"popover-message--right-top"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;top_left: &lt;/span&gt;&lt;span class="s2"&gt;"popover-message--top-left"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;top_right: &lt;/span&gt;&lt;span class="s2"&gt;"popover-message--top-right"&lt;/span&gt;
  &lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nf"&gt;freeze&lt;/span&gt;

  &lt;span class="n"&gt;renders_one&lt;/span&gt; &lt;span class="ss"&gt;:body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;lambda&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="ss"&gt;caret: &lt;/span&gt;&lt;span class="no"&gt;DEFAULT_POSITION&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:tag&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="ss"&gt;:div&lt;/span&gt;
    &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:classes&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;class_names&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:classes&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="s2"&gt;"popover-message box p-3 shadow-lg mt-1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="no"&gt;POSITIONS&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;caret&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_sym&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="no"&gt;ApplicationComponent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;

    &lt;span class="vi"&gt;@options&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:tag&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="ss"&gt;:div&lt;/span&gt;
    &lt;span class="vi"&gt;@options&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:classes&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;class_names&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:classes&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="s2"&gt;"popover"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@options&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:data&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data_attributes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="c1"&gt;# we're utilizing the `data_attributes` helper that we defined earlier.&lt;/span&gt;
      &lt;span class="ss"&gt;attributes: &lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:data&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="ss"&gt;popover_target: &lt;/span&gt;&lt;span class="s2"&gt;"container"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# from stimulus controller. Compiles to "data-popover-target": "container"&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt;&lt;span class="c1"&gt;# app/components/popover_component.html.erb &lt;/span&gt;&lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;

&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="no"&gt;ApplicationComponent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="vi"&gt;@options&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;hidden: &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note that we're hiding the popover at first. We'll use stimulus controller to remove this &lt;code&gt;attribute&lt;/code&gt; later.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's test this component out by using it in our view files.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;data-controller=&lt;/span&gt;&lt;span class="s"&gt;"popover"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="na"&gt;data-action=&lt;/span&gt;&lt;span class="s"&gt;"popover#toggle"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        Toggle popover
    &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;

    &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="no"&gt;PopoverComponent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
      &lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;body&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;caret: &lt;/span&gt;&lt;span class="s2"&gt;"bottom_right"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Anything goes inside&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
      &lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;One thing we can all learn from this component is that, we should not make our components too coupled with other UI's. For example, we could have easily rendered out a &lt;code&gt;button&lt;/code&gt; in the component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt;&lt;span class="c1"&gt;# app/components/popover_component.html.erb &lt;/span&gt;&lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;

&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="no"&gt;ApplicationComponent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="vi"&gt;@options&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;hidden: &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="na"&gt;data-action=&lt;/span&gt;&lt;span class="s"&gt;"popover#toggle"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      Toggle popover
  &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;

  &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ask yourself, what are we building? In this case, it's a popover. It should not know about the &lt;code&gt;button&lt;/code&gt; or the &lt;code&gt;anchor_tag&lt;/code&gt; or any other component that is responsible for showing and hiding the popover component.&lt;/p&gt;

&lt;p&gt;Try to make your components as generic as possible. Obviously, there will be some very specific components. For example, if you are rendering out a list of users. You may want that list to fit a particular need, and it's OK.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#making-the-raw-render-endraw-method-succint"&gt;
  &lt;/a&gt;
  Making the &lt;code&gt;render&lt;/code&gt; method succint
&lt;/h2&gt;

&lt;p&gt;Even if you do not agree with all the things that I've written, you'll mostly agree that &lt;code&gt;render PopoverComponent.new&lt;/code&gt; doesn't look that good. Calling a &lt;code&gt;class&lt;/code&gt; directly in your views, Ummm, I don't know.&lt;/p&gt;

&lt;p&gt;So let's try to simplify it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/helpers/application_helper.rb&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;render_component&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;component_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;collection: &lt;/span&gt;&lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;component_klass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;component_path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;classify&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;Component"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;constantize&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;collection&lt;/span&gt;
    &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="n"&gt;component_klass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;with_collection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="n"&gt;component_klass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, you can use the components like this, &lt;code&gt;render_component "popover", **@options&lt;/code&gt;, which in my opinion looks much better and reads much better.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Rails is fun. I like it. If you've found or are using any other ViewComponent patterns in your codebase, please share it in the comments. We'd like to learn more about your approach.&lt;/p&gt;

&lt;p&gt;Thank you for reading through and I hope you learned something new today.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/primer/view_components"&gt;GitHub view component&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://unsplash.com/photos/hoivM01c-vg"&gt;Cover photo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>rails</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>ruby</category>
    </item>
    <item>
      <title>10 things I learned from starting a passion project fresh out of a coding bootcamp.</title>
      <author>Ivan Tinoco</author>
      <pubDate>Fri, 23 Jul 2021 09:42:48 +0000</pubDate>
      <link>https://dev.to/notevenagoat/10-things-i-learned-from-starting-a-passion-project-fresh-out-of-a-coding-bootcamp-jmm</link>
      <guid>https://dev.to/notevenagoat/10-things-i-learned-from-starting-a-passion-project-fresh-out-of-a-coding-bootcamp-jmm</guid>
      <description>&lt;p&gt;Hello there! I know, it is a promising title, but I swear it's not clickbait!. Let's start with a bit of &lt;strong&gt;context&lt;/strong&gt; and &lt;strong&gt;bullet points&lt;/strong&gt;!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#who-am-i-and-why-should-you-continue-reading"&gt;
  &lt;/a&gt;
  Who am I, and why should you continue reading?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Two weeks ago (first week of April 2021) I completed an intensive 13 week Web Developer bootcamp run by Generation australia. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After 15 years of being a Filmmaker, Writer and Video Editor, I am doing a career change to Web Development (I believe digital storytelling is the future of writing, but that's another story)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I am obsessed with context, and parentheses, coffee and bullet points.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you are an experienced developer, you can enjoy reminiscing about "those times" amd feel extra smart every time you read something you already know. If you are a recent graduate, you can cry together with me.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The project is a small web app with some tools for players and game masters of the table top role playing game Cyberpunk RED.&lt;br&gt;
&lt;a href="https://notevenagoat.github.io/cyberpunktools/"&gt;CyberpunkRED tools&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#now-for-the-main-course-and-in-no-particular-order"&gt;
  &lt;/a&gt;
  Now, for the main course, and in no particular order:
&lt;/h3&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#one-i-have-a-chicken-memory-no-offense-to-chickens"&gt;
  &lt;/a&gt;
  ONE - I have a chicken memory (no offense to chickens)
&lt;/h3&gt;

&lt;p&gt;After 3 months of codecademy, reading w3school references, hundreds of stackoverflow pages, hours and hours of youtube videos, when confronted with the dark and empty page of Visual Code and the blinking line waiting for your precious code (usually accompanied by the soundtrack of JAWS) I remember approximately ...1 line of code by heart‚Ä¶ ‚Äú console.log() ‚Äù... :&lt;/p&gt;

&lt;p&gt;I lost count of how many times I googled things like ‚Äú Javascript iterators syntax. Or ‚Äú how do i center (insert stubborn component) in my div CSS‚Äù&lt;/p&gt;

&lt;p&gt;Yes, I have a chicken memory, but I got extremely good at googling things and copy pasting.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#two-imposter-syndrome-is-not-a-myth"&gt;
  &lt;/a&gt;
  TWO - Imposter syndrome is not a myth
&lt;/h3&gt;

&lt;p&gt;At first I wanted to do this project by myself, it was a simple random generator for an online community of role players obsessed with Cyberpunk (inc me). But I am the type of person that works better as part of a team, so I lured some of my innocent graduated colleagues to join me in my adventure. Then it hit me, what if they think my code is clumsy? What if they want to peer code and realize I am googling everything. I pretended to be a team leader and to have everything under control. Oh yes I know exactly what we are doing and where this project is going‚Ä¶.. (or did I?).&lt;/p&gt;

&lt;p&gt;Sometimes I would find other people who had done something similar and I would (and still) feel overwhelmed by the thought of ‚ÄúI could never do that‚Äù. However, looking back now at our project code, I am sure that if I had seen it two weeks ago, I would have felt the same. I communicate this feeling to the team and, surprise surprise, everyone felt exactly the same way!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#three-people-use-scrum-for-a-reason"&gt;
  &lt;/a&gt;
  THREE - People use Scrum for a reason
&lt;/h3&gt;

&lt;p&gt;Organizing a team of 4 people is surprisingly hard. At the start I thought we would just get together and 'work on it as a group', but working remotely and with different schedules, time together quickly became a valued commodity. But it is way too easy to derail the meetings and lose time trying to fix things 'live' rather than assigning them as tasks. Meetings need structure. The first 3 days were complete chaos, our tasks overlapped, and our git branches... Well, you will read about it further down, but the thing I learned is that the structure of the daily stand ups, the product backlog, etc... They are all extremely efficient. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#four-there-is-no-such-a-thing-as-too-many-sticky-notes"&gt;
  &lt;/a&gt;
  FOUR - There is no such a thing as too many sticky notes
&lt;/h3&gt;

&lt;p&gt;I talk a lot, (in case you hadn't noticed). And even though mostly it is for entertainment purposes, I do generate a lot of bad ideas, with the occasional brilliant one. The problem is that when in a meeting, or walking on the street listening to music, these ideas occur to me, I think of them for a moment, and BAM, they are lost in time. Conveniently, this happens a lot when I notice a bug and say "we will work on this later", or "remind me to rename this function", or "we should create a branch to try that out".&lt;/p&gt;

&lt;p&gt;So I learned to use sticky notes, a lot of them, to write down reminders, ideas, bugs, netflix recommendations, you name it. THEY WORK!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#five-semantics-semantics-semantics"&gt;
  &lt;/a&gt;
  FIVE - Semantics, Semantics, Semantics
&lt;/h3&gt;

&lt;p&gt;Semantic code writing is not just a matter of accessibility. It is SO INCREDIBLY HELPFUL... Here are some of the variables/function names, or folder names that we used (and took a lot of time to change)&lt;/p&gt;

&lt;p&gt;Category.Js, Generate.js, generator.js, num1, num2, temp, tempstring,, intNperson,intNpersonnew, components,uicomponents,uisubcomponents, total, newtotal.&lt;/p&gt;

&lt;p&gt;You get the idea.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#six-sdasdasd-and-wth-are-not-a-an-acceptable-commits"&gt;
  &lt;/a&gt;
  SIX - "sdasdasd" and "wth" are not a an acceptable commits
&lt;/h3&gt;

&lt;p&gt;Picture this, you coded in your laptop. Then in your pc. Then you pushed and someone did a small change. Then you forgot to align some txt and changed again. Then you merged.... you 'accidentally' approved all incoming changes and THE PAGE IS BROKEN. You abort the merge and realize at some point, someone made a mistake (most likely yourself) .&lt;/p&gt;

&lt;p&gt;Ha Ha, Not to worry, isn't that why we have version control???, you say to yourself as you sip your fancy chamomile tea. " I just go back to that version that was working... HANG ON A SECOND' was it the one named "asdasdas"or the one named "lol, merging, i think?"....&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#seven-how-to-properly-cross-your-fingers-when-doing-a-git-merge"&gt;
  &lt;/a&gt;
  SEVEN - How to properly cross your fingers when doing a git merge.
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z0UpuSWP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://farm4.static.flickr.com/3679/10926337754_bb43f55d82_m.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z0UpuSWP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://farm4.static.flickr.com/3679/10926337754_bb43f55d82_m.jpg" alt="PRAY"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#eight-a-project-is-a-neverending-story"&gt;
  &lt;/a&gt;
  EIGHT - A project is a NEVERENDING story
&lt;/h3&gt;

&lt;p&gt;It is very hard to know when to stop when you want your project to be better, but at some point you need to deploy. We sometimes lost track of functionality and spent way too much time working on side things that were not that important (another reason why SCRUM backlog is so useful) We kept thinking of ideas to add to the project (after learning to write them in sticky notes). In fact, knowing what we know now, we could probably repeat the whole thing and do it so much better (next sprint!).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nine-coding-is-more-exhausting-than-gaming"&gt;
  &lt;/a&gt;
  NINE - Coding is more exhausting than gaming.
&lt;/h3&gt;

&lt;p&gt;If you had asked me last year if I had a problem sitting on a computer looking at a screen non stop for 6 hours, I would have shown you my Cyberpunk 2077 and Witcher 3 100% achievement completion badges. So obviously I thought coding all day and night was going to be a piece of cake.&lt;/p&gt;

&lt;p&gt;What I didn't take into account was the level of concentration and mental effort that it takes to code, and the fact that you are practically reading and rereading small characters on a screen. I had to learn to take breaks from the screen, go out for walks and know when I was overloaded and could not code anymore. Something that would have never happened playing a video game!.&lt;/p&gt;

&lt;p&gt;However, seeing your program run at the end, starting from a simple idea in your head to an actual deployed web app, makes all the hard work worth it. I guess in a sense coding is not so different to filmmaking or writing. It all starts with an idea in someone's mind, and it gets translated to paper through hard work and most of the time, team work, which brings me to the last lesson learned.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ten-i-love-my-team"&gt;
  &lt;/a&gt;
  TEN - I love my team
&lt;/h3&gt;

&lt;p&gt;Looking back at the project, even though it only took 3 weeks, I feel like we have fought a war together (thankfully on the same side most of the time), hiding in the trenches of the code, being bombarded by bugs and merge conflicts, having to survive pages and pages of stackoverflow, dreading that red error text when trying to compile...&lt;/p&gt;

&lt;p&gt;I cannot imagine doing this project alone, I have learned so much from my team, not just technical skills but learning how to work as a team, being there every day, facing the challenges together, it really builds connections, and I believe coding is one of those things that it is more efficient when done in a group, as it is so easy to get lost in the lines of code and lose sight of the big picture. I love my team.&lt;/p&gt;

&lt;p&gt;And I am still learning to be grateful to them, this was a small idea that is not going to bring money to any of us, and my teammates are not event part of the gaming community that will use this tool, but they still went ahead and put up with me bossing them around and spent hours making it happen.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#eleven-there-is-always-something-more"&gt;
  &lt;/a&gt;
  ELEVEN - There is always something more
&lt;/h3&gt;

&lt;p&gt;} :D&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Configuration as a Service (occson) and Python</title>
      <author>Tomasz Kowalewski</author>
      <pubDate>Fri, 23 Jul 2021 09:34:59 +0000</pubDate>
      <link>https://dev.to/tkowalewski_9/configuration-as-a-service-occson-and-python-2b4</link>
      <guid>https://dev.to/tkowalewski_9/configuration-as-a-service-occson-and-python-2b4</guid>
      <description>&lt;p&gt;At the beginning of our &lt;a href="https://occson.com"&gt;occson&lt;/a&gt; adventure, let's first ask ourselves a basic question: What is configuration?&lt;/p&gt;

&lt;p&gt;A configuration is a collection of information necessary for the operation of a program. It can be, for example, environment variables or structured data formats (json, yaml).&lt;/p&gt;

&lt;p&gt;How we handle configurations is also important. &lt;br&gt;
Probably each of us is familiar with problems related to uploading configuration file to server for application :|. &lt;br&gt;
Just as problematic seems to be maintaining the configuration in the right version. &lt;br&gt;
Is the FOO variable needed for the application to work? - How many times have you asked a similar question?&lt;/p&gt;

&lt;p&gt;However, there is a solution for these problems - it is Configuration as a Service. &lt;br&gt;
A service that provides configuration to an application :) &lt;br&gt;
We call it &lt;a href="https://occson.com"&gt;occson&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Today I have prepared a ccs client especially for python developers. CCS? Configuration Control System :)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;AesEverywhere&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;aes256&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Downloader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;access_token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;passphrase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uri&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;uri&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;access_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;access_token&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;passphrase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;passphrase&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__headers&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;aes256&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decrypt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="s"&gt;'encrypted_content'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;passphrase&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__headers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="s"&gt;'Content-Type'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'application/json'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s"&gt;'Authorization'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Token token={0}'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;access_token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Uploader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;access_token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;passphrase&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;force&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uri&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;uri&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;access_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;access_token&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;passphrase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;passphrase&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;force&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;force&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__data&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__headers&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;201&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="s"&gt;'encrypted_content'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;aes256&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encrypt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;passphrase&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="s"&gt;'force'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'true'&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;force&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="s"&gt;'false'&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__headers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="s"&gt;'Content-Type'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'application/json'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s"&gt;'Authorization'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Token token={0}'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;access_token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Document&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;access_token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;passphrase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uri&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__build_uri&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;access_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;access_token&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;passphrase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;passphrase&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;upload&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;force&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Uploader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;access_token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;passphrase&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;force&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;download&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Downloader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;access_token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;passphrase&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__build_uri&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'ccs://'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'https://api.occson.com/'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;How to use the above client?&lt;/p&gt;

&lt;p&gt;Install dependencies (requests, aes-everywhere) And use the ccs API.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;ccs&lt;/span&gt;

&lt;span class="n"&gt;document&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ccs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Document&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ccs://.env"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"&amp;lt;ACCESS_TOKEN&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"test"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;download&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upload&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"A=1&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;B=2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;How to use occson with ruby? Read about it on our &lt;a href="https://occson.com/blog/occson/rails/environment/devops/ruby/2021/07/10/occson.html"&gt;blog&lt;/a&gt;&lt;/p&gt;

</description>
      <category>configuration</category>
      <category>python</category>
      <category>showdev</category>
      <category>ruby</category>
    </item>
    <item>
      <title>Code Zelda in JavaScript and Kaboom.js</title>
      <author>Ania Kubow</author>
      <pubDate>Fri, 23 Jul 2021 09:34:42 +0000</pubDate>
      <link>https://dev.to/ania_kubow/code-zelda-in-javascript-and-kaboom-js-i3n</link>
      <guid>https://dev.to/ania_kubow/code-zelda-in-javascript-and-kaboom-js-i3n</guid>
      <description>&lt;p&gt;In this video I show you how to build Zelda in JavaScript using the Kaboom.js library in my code editor of choice. If you are new to Kaboom I would suggest watching the full course where I explain each method before diving in to the game creating, visit freeCodeCamp.org by clicking here: &lt;a href="https://www.youtube.com/watch?v=4OaHB0JbJDI"&gt;https://www.youtube.com/watch?v=4OaHB0JbJDI&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the full course I use a preconfigured environment to code Zelda. In this tutorial I create the game from scratch using my code editor of choice. &lt;/p&gt;

&lt;p&gt;Final code here: &lt;a href="https://github.com/kubowania/zelda"&gt;https://github.com/kubowania/zelda&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Imgur: &lt;a href="https://imgur.com/user/aniakubow20/posts"&gt;https://imgur.com/user/aniakubow20/posts&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;0:00 Introduction&lt;br&gt;
1:08 Coding starts&lt;br&gt;
5:43 Layers and sprites&lt;br&gt;
17:55 Placing sprites on the first level&lt;br&gt;
29:32 Passing score and levels&lt;br&gt;
34:41 Adding Link&lt;br&gt;
36:09 Keyboard events&lt;br&gt;
40:41 Moving between levels&lt;br&gt;
45:33 Dealing with enemies&lt;br&gt;
01:04:03 Final result&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/XX93O4ZVUZI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;‚≠ê New to code and none of this is making sense? Watch my '12hr+ YouTube Coding Bootcamp' in which you will learn HTML, CSS and JavaScript Fundamentals completely from scratch. It's on my channel and its 100% free.&lt;/p&gt;

&lt;p&gt;‚≠ê In most videos I use Tabnine as my A.I autocompletion tool. You can download it for free here: &lt;a href="http://bit.ly/tabnine-top-tool"&gt;http://bit.ly/tabnine-top-tool&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚≠ê You can get a blockchain domain with my affiliate link here: &lt;a href="http://bit.ly/get-a-crypto-domain"&gt;http://bit.ly/get-a-crypto-domain&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚≠ê If you would like to buy me a coffee, well thank you very much that is mega kind! : &lt;a href="https://www.buymeacoffee.com/aniakubow"&gt;https://www.buymeacoffee.com/aniakubow&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚≠ê Sign up for weekly coding tips from my newsletter partnership: &lt;a href="https://bit.ly/JS-tips"&gt;https://bit.ly/JS-tips&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also find me on:&lt;br&gt;
Twitter: &lt;a href="https://twitter.com/ania_kubow"&gt;https://twitter.com/ania_kubow&lt;/a&gt;&lt;br&gt;
Instagram: &lt;a href="https://instagram.com/aniakubow"&gt;https://instagram.com/aniakubow&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#codingbootcamp%E2%80%8B-coding"&gt;
  &lt;/a&gt;
  codingbootcamp‚Äã #coding
&lt;/h1&gt;

</description>
      <category>javascript</category>
      <category>kaboom</category>
      <category>gamedev</category>
    </item>
    <item>
      <title>Bricks has been updated to Bootstrap 5 üéâ</title>
      <author>Stefano Bartoletti</author>
      <pubDate>Fri, 23 Jul 2021 09:03:03 +0000</pubDate>
      <link>https://dev.to/stefanobartoletti/bricks-has-been-updated-to-bootstrap-5-1di7</link>
      <guid>https://dev.to/stefanobartoletti/bricks-has-been-updated-to-bootstrap-5-1di7</guid>
      <description>&lt;p&gt;Brisk is a modular WordPress starter theme aimed at developers, powered by Bootstrap and Gulp.&lt;/p&gt;

&lt;p&gt;With the latest release &lt;code&gt;v0.23.0&lt;/code&gt;, it has been updated to include Bootstrap 5, taking advantage of all the new features of this popular frontend framework.&lt;/p&gt;

&lt;p&gt;Some of Bricks' top features:&lt;/p&gt;

&lt;p&gt;üëâüèª It natively integrates all its templates with Bootstrap 5&lt;br&gt;
üëâüèª It uses Gulp to manage its compilation tasks (CSS, JavaScript, icons, fonts, images, localizzazione)&lt;br&gt;
üëâüèª It integrates with various usefuls tools like Rollup, Babel, Autoprefixer, PurgeCSS, Browsersync&lt;br&gt;
üëâüèª It is lightweight, modular and SEO optimized&lt;br&gt;
üëâüèª It integrates with some popular WordPress plugins and JavaScritp libraries&lt;/p&gt;

&lt;p&gt;The documentation available at &lt;a href="https://bricks.stefanobartoletti.it/"&gt;https://bricks.stefanobartoletti.it/&lt;/a&gt; was updated as well with all the latest changes.&lt;/p&gt;

&lt;p&gt;The theme itself and the documentation website are both open-source projects, and their repositories are available on GitHub&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/stefanobartoletti"&gt;
        stefanobartoletti
      &lt;/a&gt; / &lt;a href="https://github.com/stefanobartoletti/bricks"&gt;
        bricks
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A modular WordPress starter theme powered by Bootstrap 5 and Gulp
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/stefanobartoletti"&gt;
        stefanobartoletti
      &lt;/a&gt; / &lt;a href="https://github.com/stefanobartoletti/bricks-docs"&gt;
        bricks-docs
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Documentation for Bricks, a modular WordPress starter theme powered by Bootstrap 5 and Gulp 
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


</description>
      <category>news</category>
      <category>wordpress</category>
      <category>bootstrap</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Different ways of local storage in flutter</title>
      <author>rrtutors</author>
      <pubDate>Fri, 23 Jul 2021 08:22:25 +0000</pubDate>
      <link>https://dev.to/rrtutors/different-ways-of-local-storage-in-flutter-15ee</link>
      <guid>https://dev.to/rrtutors/different-ways-of-local-storage-in-flutter-15ee</guid>
      <description>&lt;p&gt;Different ways of local storage in flutter&lt;/p&gt;

&lt;p&gt;In flutter mobile applications we have different ways to store data in locally&lt;/p&gt;

&lt;p&gt;They are &lt;br&gt;
&lt;/p&gt;
&lt;li&gt;Sharedpreference&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;Sqflite Database&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;Hive Database&lt;/li&gt;
&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b99LmU2C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9h0r8or1coupqghsee4z.jpeg" alt="Alt Text"&gt;&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;strong&gt;&lt;em&gt;Sharedpreference&lt;/em&gt;&lt;/strong&gt;

&lt;p&gt;SharedPreferences is used for storing data key-value pair in the Android and iOS.&lt;br&gt;
SharedPreferences in flutter uses NSUserDefaultson iOS and SharedPreferences on Android, providing a persistent store for simple data&lt;br&gt;
&lt;br&gt;
&lt;a href="https://rrtutors.com/tutorials/Shared-Preferences-Data-Persistence-In-Flutter"&gt;How to use SharedPreferences in Flutter&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
&lt;strong&gt;&lt;em&gt;Sqflite database&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;SQflite is a plugin for flutter. It allows us store, retrieve and manipulate our SQLite databases via flutter code. SQflite supports both Android and iOS platforms&lt;/p&gt;

&lt;p&gt;Here are some of the features of SQFlite:&lt;/p&gt;


&lt;li&gt;SQFlite provides for both database transactions as well as batches.&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;SQlite has inbuilt automatic version managment.&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;SQFlite provides easy to use methods for inserting, querying, updating as well as deleting data from database.&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;These CRUD operations are performed in the background thread on both iOS and Android. This frees the UI to remain responsive&lt;/li&gt;

&lt;p&gt;&lt;a href="https://rrtutors.com/tutorials/Flutter-SQFLite-Database-Tutorial"&gt;How to Install SQFlite and SQflite CRUD Operations&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
&lt;strong&gt;&lt;em&gt;Hive Database&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
Hive is a quick, lightweight, NoSQL database for flutter and dart applications. Hive is truly helpful if you need a straightforward key-value database without numerous relations and truly simple to utilize. It is an offline database(store data in local devices). It has no native dependencies (it runs on Flutter Web!) can be the ideal choice. Hive bolsters all stages upheld by Flutter&lt;br&gt;
&lt;br&gt;
&lt;a href="https://rrtutors.com/tutorials/flutter-hive-database-crud-operations"&gt;How to setup Hive database in flutter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;How to &lt;a href="https://rrtutors.com/tutorials/flutter-image-as-string-in-sqlite-database"&gt;Store Image as String in Flutter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;How to &lt;a href="https://rrtutors.com/tutorials/copy-assets-database-flutter"&gt;Copy database from assets folder&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>programming</category>
      <category>tutorial</category>
      <category>android</category>
    </item>
    <item>
      <title>I finally got my PS5!!!</title>
      <author>Maciej Sawicki</author>
      <pubDate>Fri, 23 Jul 2021 08:13:20 +0000</pubDate>
      <link>https://dev.to/humberd/i-finally-got-my-ps5-2506</link>
      <guid>https://dev.to/humberd/i-finally-got-my-ps5-2506</guid>
      <description>&lt;p&gt;In my previous post I wrote about how I used my super-duper programming skills to write a bot that would scrap all the polish online shops looking for the new and shiny PlayStation 5.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/humberd" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SrYvL4Td--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--wzCHH9Qu--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/398979/3957dbba-1168-4ce0-a0bb-26d0d74a5948.png" alt="humberd"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/humberd/how-i-wrote-a-ps5-hunter-bot-in-7-hours-6j4" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How I wrote a PS5 hunter bot in 7 hours&lt;/h2&gt;
      &lt;h3&gt;Maciej Sawicki „Éª Dec 7 '20 „Éª 8 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#showdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;Now I can announce that I FINALLY BOUGHT A NEW PS5!!!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sUjiaJwC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i7pcb4n093rl5p95hssh.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sUjiaJwC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i7pcb4n093rl5p95hssh.jpg" alt="screen of my new and shiny PlayStation 5"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank you bot, you did a good job :D&lt;br&gt;
.&lt;br&gt;
.&lt;br&gt;
.&lt;br&gt;
.&lt;br&gt;
.&lt;br&gt;
.&lt;br&gt;
.&lt;br&gt;
That would have been a pretty good scenario, only if the reality hadn't verified my plans :/&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#problems"&gt;
  &lt;/a&gt;
  Problems
&lt;/h2&gt;

&lt;p&gt;The first major problem was that my bot only detected changes in specific sections of the web page. I didn't know how would the shop look like when the PS5 is available, because it could have some more shiny decorations to encourage people to buy it instead of a regular product details. So my approach was not to look for keywords, but rather the lack of them. This means if a word "unavailable" was no longer there my bot happily sent me a mail that something changed. Unfortunately, this was a very naive approach :(&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TMTXUm_O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ekoeebxnk1anymflh7gz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TMTXUm_O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ekoeebxnk1anymflh7gz.png" alt="list of false positive mails"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the image above there is a list of mails I received in February. We can see that on average I got 1 mail a day. That would have been a quite impressive achievement, but unfortunately, they were all false positives. I checked every one of them and I can divide them into 2 categories:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#shop-changes"&gt;
  &lt;/a&gt;
  Shop changes
&lt;/h3&gt;

&lt;p&gt;Half of the mails were regarding to changes the shop made deliberately. They either removed the PS5 for some reason or added a new unrelated item to a list of items related to "PS5" phrase triggering my change detection for list count.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#errors"&gt;
  &lt;/a&gt;
  Errors
&lt;/h3&gt;

&lt;p&gt;Another half of the mails were errors. Every a couple of days, at night, I received that something has changed only to later look at the logs and see that the shop showed a 500 error page, which probably indicated that they were deploying a new version. For example from the mails I tell that &lt;a href="https://www.euro.com.pl/"&gt;https://www.euro.com.pl/&lt;/a&gt; made a deploy every 2 weeks on Thursday at 5 in the morning. They only changed this pattern and deployed on Wednesday, because on Thursday was New Year's Eve.&lt;/p&gt;

&lt;p&gt;I was so fed up with the constant false positives that I turned off the bot at the beginning of March.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#global-chip-shortage"&gt;
  &lt;/a&gt;
  Global chip shortage
&lt;/h2&gt;

&lt;p&gt;Another reason I didn't grab a PS5 was that the shops didn't even have them in stock. The global chip shortage was way more severe than I anticipated and even if I have found the console it would have been more expensive, which wouldn't make sense to me, because this bot was a solution to buy them cheaper than from scalpers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-rush"&gt;
  &lt;/a&gt;
  The rush
&lt;/h2&gt;

&lt;p&gt;One day, during a windy February day I was in the office writing some very sophisticated code when I received an intriguing email saying that Media Markt listing has changed. So being a very responsible engineer and a Team Lead I naturally I dropped everything and took a look at the site üôÇ And... the PlayStation WAS AVAILABLE. WOW!!&lt;/p&gt;

&lt;p&gt;Unfortunately, there was a problem. It was displayed as available, but not for sale online, which meant I would need to get physically to the shop. I looked at the map and the shop was on the other side of the Warsaw. I immediately jumped out of the office and after 3 minutes I was already in a bus. &lt;/p&gt;

&lt;p&gt;45 minutes later I was there, looking at the building, which in the next couple of minutes could have fulfilled all my desires that have been building up for the 2 previous months. I rushed to the shop, asked the guy that worked there to give me my precious (muahauhau) aaand... My adrenaline dropped to 0 and a willingness to breath to about 20% (part of my brain was still functioning correctly üòÄ) when I heard that sure, the console is in the building, but could be sold only on leasing to a company üòê.&lt;/p&gt;

&lt;p&gt;Devastated, I quietly returned to the office, continued writing a "very sophisticated code" and from time to time kept thinking how my life would have looked like if back then I had grabbed my greatest desire.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-did-i-buy-it-then"&gt;
  &lt;/a&gt;
  How did I buy it then?
&lt;/h2&gt;

&lt;p&gt;Oh well... I received a mail from a pricing comparator site &lt;a href="https://ceneo.pl"&gt;https://ceneo.pl&lt;/a&gt;, which told me that the price has dropped. &lt;/p&gt;

&lt;p&gt;I bought it for 2750 PLN (710 USD), but it also included Spider-Man: Miles Morales valued at 350 PLN, which I was willing to buy separately anyway. In result the net value of the console was 2400 PLN (620 USD), which compared to an MSRP price of 2300 PLN (590 USD) is a pretty good deal.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conculsion"&gt;
  &lt;/a&gt;
  Conculsion
&lt;/h2&gt;

&lt;p&gt;By investing more time I could have reduced the amount of false positives, but on the other hand it wouldn't necessarily mean I would have grabbed the console due to global chip shortage.&lt;/p&gt;

&lt;p&gt;At the end of an article it would be cool to say that I learned a lot in this project. The reality is that I learned pretty much nothing. It took me 1 day with a tech stack I already knew, so there was no area I could improve. Nonetheless, the time spent is an experience gained. &lt;/p&gt;

</description>
      <category>showdev</category>
      <category>javascript</category>
      <category>programming</category>
    </item>
    <item>
      <title>Donald Trump Hates It: Distributed Development Using Micro Frontends</title>
      <author>Florian Rappl</author>
      <pubDate>Fri, 23 Jul 2021 08:13:07 +0000</pubDate>
      <link>https://dev.to/florianrappl/donald-trump-hates-it-distributed-development-using-micro-frontends-2jea</link>
      <guid>https://dev.to/florianrappl/donald-trump-hates-it-distributed-development-using-micro-frontends-2jea</guid>
      <description>&lt;p&gt;In the beginning of July I gave a new talk about distributed web development using micro frontends. The talk was focused around different repository (and therefore devops) strategies that you can utilize for distributing frontend work. I also tried to touch various ways of combining these frontend fragments (at build-time, server-side rendering, or composed within the client, i.e., browser).&lt;/p&gt;

&lt;p&gt;Since I just finished (and... finally!) published my book about micro frontends I'd like to recap the talk here.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--N-NI8spT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1177096872579731458/IHg9ZP0M_normal.jpg" alt="Florian Rappl profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Florian Rappl
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/florianrappl"&gt;@florianrappl&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      So &lt;a href="https://twitter.com/hashtag/happy"&gt;#happy&lt;/a&gt; that my &lt;a href="https://twitter.com/hashtag/book"&gt;#book&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/art"&gt;#art&lt;/a&gt; of &lt;a href="https://twitter.com/hashtag/microfrontends"&gt;#microfrontends&lt;/a&gt; has finally been &lt;a href="https://twitter.com/hashtag/published"&gt;#published&lt;/a&gt;! &lt;a href="https://t.co/AtJfi2eYdh"&gt;packt.live/3wk2fkX&lt;/a&gt; Thanks to the whole team at &lt;a href="https://twitter.com/PacktPub"&gt;@PacktPub&lt;/a&gt; and everyone contributing!
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      17:00 PM - 07 Jul 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1412818701691224065" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1412818701691224065" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1412818701691224065" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;In short, this his how the book looks like on Amazon.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://packt.live/3wk2fkX"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G2XGcY5X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dby5axqtcwf11mqglngg.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But enough about the book, let's recap the talk's content.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#why-micro-frontends"&gt;
  &lt;/a&gt;
  Why Micro Frontends?
&lt;/h1&gt;

&lt;p&gt;When the so-called pizza team (i.e., max. 8 persons that can be fed by one slice of pizza) got popular the efforts to perform efficient modularization also increased. With that being said you can boil it down to:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b2m_HLVW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j70x4jqorlww9h4vephl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b2m_HLVW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j70x4jqorlww9h4vephl.png" alt="Pizza motivation"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;In any case after the success of microservices and the tendency to build larger and more complex frontends, the need for more distribution on the web frontend also increased. Micro frontends are not new - in fact many patterns and ideas are as old as the web. What is new is that these patterns are somewhat becoming ordinary now - reflected by a common term and crazy people like me to work almost exclusively in that area.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/florianrappl" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MkpWP10L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--E6HJO9Lr--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/268296/eb6a1ad0-17d3-4302-9c44-a263a666b072.jpg" alt="florianrappl"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/florianrappl/monolith-vs-micro-frontend-50ce" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Monolith vs. Micro Frontend&lt;/h2&gt;
      &lt;h3&gt;Florian Rappl „Éª Dec 4 '20 „Éª 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#architecture&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#microfrontends&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h1&gt;
  &lt;a href="#ways-to-implement-micro-frontends"&gt;
  &lt;/a&gt;
  Ways to Implement Micro Frontends
&lt;/h1&gt;

&lt;p&gt;One of the challenges with micro frontends is that there are multiple ways of implementing them. In order to pick the "right" way you'll need a decent amount of experience and a great understanding of the problem in front of you.&lt;/p&gt;

&lt;p&gt;Especially the understanding of the domain problem is not always easy. Personally, I've rarely had a complete set of requirements when a project was started. Quite often the set of requirements has been claimed to be complete, but retrospectively the only constant was that these requirements sometimes changed quite drastically within the project.&lt;/p&gt;

&lt;p&gt;It should not be a big surprise that existing solutions therefore are using the full architecture solution space:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0vpi_P9A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/enuitr5qxtcpg67mxynj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0vpi_P9A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/enuitr5qxtcpg67mxynj.png" alt="Architecture solution space"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While content-heavy companies are relying on a rather static composition at build-time, e-commerce solutions are tending to compose frontend fragments dynamically in their backend.&lt;/p&gt;

&lt;p&gt;App-like experiences are fine with a client-side composition where the micro frontends are orchestrated in the browser.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/florianrappl" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MkpWP10L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--E6HJO9Lr--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/268296/eb6a1ad0-17d3-4302-9c44-a263a666b072.jpg" alt="florianrappl"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/florianrappl/micro-frontends-pattern-comparison-1dh0" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Micro Frontends Pattern Comparison&lt;/h2&gt;
      &lt;h3&gt;Florian Rappl „Éª Oct 29 '20 „Éª 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#microfrontends&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#architecture&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;So let's go into the different strategies of distributing the work in one or more repositories.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#central-monorepo"&gt;
  &lt;/a&gt;
  Central Monorepo
&lt;/h2&gt;

&lt;p&gt;The first one to mention may be among the most popular patterns for distributed frontends in general; a monorepo.&lt;/p&gt;

&lt;p&gt;The monorepo is a single repository that hosts multiple packages. There are many tools to create monorepos, applications such as Lerna, Nx, or Yarn (with Workspaces) are great tools to manage their complexity.&lt;/p&gt;

&lt;p&gt;The following diagram illustrates the essential relationship between the code and its build pipeline using this pattern.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KwXb-54I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2jajpl26slrfxb0fb1l1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KwXb-54I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2jajpl26slrfxb0fb1l1.png" alt="One repository one pipeline"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using the central monorepo all teams work in the same repository. Therefore, deployments are also handled centrally. For real distributed development, where each team is fully autonomous with respect to their toolset, this is not really the ideal setup. Nevertheless, the high UI consistency, and the ease of distributed frontend development (which can be easily combined at build-time) make this pattern attractive.&lt;/p&gt;

&lt;p&gt;You can find an example project using this strategy on Azure DevOps:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://florianrappl.visualstudio.com/disdev-01-monorepo"&gt;florianrappl.visualstudio.com/disdev-01-monorepo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the example project a single monorepo has been set up, which uses three distinct packages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;app-shell&lt;/strong&gt; to combine everything into one application&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;bar-pilet&lt;/strong&gt; for a first micro frontend&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;foo-pilet&lt;/strong&gt; for an arbitrary second micro frontend&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the most simple case &lt;strong&gt;bar-pilet&lt;/strong&gt; and &lt;strong&gt;foo-pilet&lt;/strong&gt; just export components which are imported directly. Going for this I'd not really label the solution "micro frontends".&lt;/p&gt;

&lt;p&gt;Therefore, for the example, I've picked a rather &lt;em&gt;fancy&lt;/em&gt; way to "loosely" get the micro frontends at runtime using a file called &lt;em&gt;feed.json&lt;/em&gt;, which is created at build-time using the information which micro frontends (called pilets in this case, because I am using the &lt;a href="https://piral.io/"&gt;Piral framework&lt;/a&gt;) are actually available. Therefore, just adding, e.g., a third micro frontend easily works without touching the &lt;strong&gt;app-shell&lt;/strong&gt; package.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/florianrappl" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MkpWP10L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--E6HJO9Lr--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/268296/eb6a1ad0-17d3-4302-9c44-a263a666b072.jpg" alt="florianrappl"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/florianrappl/microfrontends-based-on-react-4oo9" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Microfrontends based on React&lt;/h2&gt;
      &lt;h3&gt;Florian Rappl „Éª Nov 10 '19 „Éª 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#microfrontends&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#typescript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#piral&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#central-pipeline"&gt;
  &lt;/a&gt;
  Central Pipeline
&lt;/h2&gt;

&lt;p&gt;With the monorepo and build-time fusion in mind we can go one step further and decompose the monorepo into individual repositories. The exception is the build pipeline, which remains in the monorepo and aggregates the individual repositories into a single (fat) pipeline.&lt;/p&gt;

&lt;p&gt;Any change in any repository will trigger the "giant" build of the (fat) pipeline.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VU3t7dSk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eba80d1w1ayanwvk06ut.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VU3t7dSk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eba80d1w1ayanwvk06ut.png" alt="Multiple repositories one pipeline"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can find an example project using this strategy on Azure DevOps:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://florianrappl.visualstudio.com/disdev-02-central-pipeline"&gt;florianrappl.visualstudio.com/disdev-02-central-pipeline&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;pipeline&lt;/code&gt; repository hosts two files; one is the pipeline definition that actually needs to know the names of the other repositories:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;resources&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;repositories&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;repository&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;self'&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;repository&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;app'&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;git&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;app&lt;/span&gt;
    &lt;span class="na"&gt;ref&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;main&lt;/span&gt;
    &lt;span class="na"&gt;trigger&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;include&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;main&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;repository&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;mf1'&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;git&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;mf1&lt;/span&gt;
    &lt;span class="na"&gt;ref&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;main&lt;/span&gt;
    &lt;span class="na"&gt;trigger&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;include&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;main&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;repository&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;mf2'&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;git&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;main&lt;/span&gt;
    &lt;span class="na"&gt;ref&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;master&lt;/span&gt;
    &lt;span class="na"&gt;trigger&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;include&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;main&lt;/span&gt;

&lt;span class="na"&gt;pool&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;vmImage&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;ubuntu-latest'&lt;/span&gt;

&lt;span class="na"&gt;stages&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;stage&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Build&lt;/span&gt;
  &lt;span class="na"&gt;displayName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Build&lt;/span&gt;

  &lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The other part is a simple script that puts all micro frontends as direct dependencies to the app shell. We could also do it as previously - reference them loosely via a generated &lt;em&gt;feed.json&lt;/em&gt; file, however, this way we can improve performance even more and obtain a loading experience as known from SPAs directly. No indirection at startup.&lt;/p&gt;

&lt;p&gt;The magic for this enhancements lies in the file &lt;em&gt;pilets.ts&lt;/em&gt;, which originally looked like this:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The file is modified before the build to contain the static information from the different micro frontends.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#distributed-monorepo"&gt;
  &lt;/a&gt;
  Distributed Monorepo
&lt;/h2&gt;

&lt;p&gt;In the previous pattern we scattered the repositories, but kept the single pipeline. What if we wanted to do it the other way round? Does it even make sense?&lt;/p&gt;

&lt;p&gt;It turns out, it may be useful. Potentially, we want to develop the UI incl. all fragments in a central place, but we still want to leave room for each team to have their own deployment processes. Maybe to make them faster, maybe due to secret or other process managements.&lt;/p&gt;

&lt;p&gt;In any case, this is how it looks like on paper.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--56M3p48E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tsys59qa0m9338cq81yt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--56M3p48E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tsys59qa0m9338cq81yt.png" alt="One repository multiple pipelines"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This pattern makes also sense if the individual pipelines should be kept small and may be connected to further (e.g., elevation) processes.&lt;/p&gt;

&lt;p&gt;You can find an example project using this strategy on Azure DevOps:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://florianrappl.visualstudio.com/disdev-03-dist-monorepo"&gt;florianrappl.visualstudio.com/disdev-03-dist-monorepo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The code of this example is quite similar to the first code part, except that we are not generating a &lt;em&gt;feed.json&lt;/em&gt; file here. Instead, we rely on a dedicated service for this, which consumes the micro frontends from an NPM registry. This also explains why we want to deploy individual packages; with a service in the backend we can dynamically decide which micro frontends to actually deliver to the user.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#independent-repositories"&gt;
  &lt;/a&gt;
  Independent Repositories
&lt;/h2&gt;

&lt;p&gt;If we are anyway going to create independent micro frontends we can already distribute the code, too. Therefore, having totally independent repositories with their own build processes makes sense.&lt;/p&gt;

&lt;p&gt;This is the most familiar pattern from a Git setup, but the most difficult one to manage correctly. Questions like: How can I efficiently debug the micro frontend solution if all I have is a single micro frontend come up quickly. In this post I'll not go into details here.&lt;/p&gt;

&lt;p&gt;Luckily, we use &lt;a href="https://github.com/smapiot/piral"&gt;Piral&lt;/a&gt; which makes this quite easy. All it takes for a great development and debugging experience is the emulator package that Piral creates from the app shell's repository. This can be shared easily via an NPM registry.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zH8ebgZM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kexj1d9qq2gwxthbmcnc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zH8ebgZM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kexj1d9qq2gwxthbmcnc.png" alt="Multiple repository with multiple pipelines"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can find an example project using this strategy on Azure DevOps:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://florianrappl.visualstudio.com/disdev-04-repos"&gt;florianrappl.visualstudio.com/disdev-04-repos&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Each repository is publishing its artifact into the private NPM registry.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WEVXeG8Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d8c388xq1edg0a78zc0i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WEVXeG8Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d8c388xq1edg0a78zc0i.png" alt="Repository artifacts to NPM registry"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This way we have full control what we do with the packages. We also see (and use) their available versions.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/florianrappl" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MkpWP10L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--E6HJO9Lr--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/268296/eb6a1ad0-17d3-4302-9c44-a263a666b072.jpg" alt="florianrappl"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/florianrappl/publishing-frontend-features-like-a-greek-god-31li" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Publishing Frontend Features Like a Greek God&lt;/h2&gt;
      &lt;h3&gt;Florian Rappl „Éª Feb 28 '20 „Éª 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#piral&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#azure&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#devops&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#microfrontends&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#hybrid-approach"&gt;
  &lt;/a&gt;
  Hybrid Approach
&lt;/h2&gt;

&lt;p&gt;Quite naturally, we may not even have to decide for a pattern. We could also take a mix of these patterns, e.g., have a monorepo approach for the core micro frontends, but then use individual repositories for auxiliary micro frontends.&lt;/p&gt;

&lt;p&gt;The pattern could be drawn like this, even though many other combinations are possible, too:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K_xEYK8r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a1p1mjuv11lt7t7wmcxr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K_xEYK8r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a1p1mjuv11lt7t7wmcxr.png" alt="Mixture of previous strategies"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#team-organization-and-benefits"&gt;
  &lt;/a&gt;
  Team Organization and Benefits
&lt;/h1&gt;

&lt;p&gt;There is a certain impact of the chosen team structure on the ideal repository pattern. Either way, the chosen pattern should fit well to the teams' expectations.&lt;/p&gt;

&lt;p&gt;Note that some team configurations are more ideally suited for micro frontends than others.&lt;/p&gt;

&lt;p&gt;One example of this is the vertical development configuration, where each team is rather self sufficient:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KCFls1CV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i5eoiv4d7pw71s372qzu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KCFls1CV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i5eoiv4d7pw71s372qzu.png" alt="Vertical development"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A more popular variant is the creation of real fullstack teams:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3llyYP0S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/03xsxdun9whhme1kath1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3llyYP0S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/03xsxdun9whhme1kath1.png" alt="Fullstack development"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Realistically, a mixed development approach may be the go-to option here. That way, you won't need to create teams with principles that are not fitting to the team members' mindsets. Also, while the majority of devs may say they are fullstack, in reality only a minority is. Having knowledge of JavaScript does not make one a Node.js expert. Likewise, having shifted some pixels via CSS does not mean you are a frontend guru now.&lt;/p&gt;

&lt;p&gt;The core advantage of using micro frontends is that you can now cut the teams closer to their desires - leaving them with the right degree of freedom to make them productive.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;That's the talk in a nutshell. I hope I could share something interesting. If you like this then don't hesitate to get the book. Also make sure to follow me on &lt;a href="https://twitter.com/FlorianRappl"&gt;Twitter&lt;/a&gt; for discount links and further information.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>github</category>
      <category>devops</category>
    </item>
    <item>
      <title>Top ReactJS Projects For Beginners</title>
      <author>Rocky</author>
      <pubDate>Fri, 23 Jul 2021 08:09:21 +0000</pubDate>
      <link>https://dev.to/codelivly/top-reactjs-projects-for-beginners-50gf</link>
      <guid>https://dev.to/codelivly/top-reactjs-projects-for-beginners-50gf</guid>
      <description>&lt;p&gt;¬†By &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/&amp;amp;ved=2ahUKEwjv77WE2fjxAhVQ6XMBHT-LDaMQFjAAegQIBxAC&amp;amp;usg=AOvVaw1PUPii-XosNgl1ZTInOseb"&gt;&lt;span&gt;Codelivly&lt;/span&gt;&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;So, you‚Äôve mastered the basics of React, and you also have a solid grasp on JavaScript. Now that the basic tutorials are fairly easy for you, you‚Äôre thinking of cranking it up a notch. But how?&lt;/p&gt;

&lt;p&gt;This is a problem faced by many React freshers when they complete the fundamentals of the React library and hit the intermediate stage of learning. The best way (and probably, the most productive way) to move forward is to focus on developing React project&lt;/p&gt;

&lt;p&gt;No, we‚Äôre not talking of taking on big industry projects, but smaller real-world projects that can help you materialize your theoretical skills into practical experience. By working on real-world React projects, you can bridge the gap between being a React beginner and becoming a professional developer.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Read More&lt;/b&gt;; &lt;a href="https://bit.ly/2W6Pail"&gt;&lt;span&gt;ReactJS Projects For Beginners&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;




</description>
      <category>react</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Docker cleanup: images by name search</title>
      <author>Andrei Dascalu</author>
      <pubDate>Fri, 23 Jul 2021 07:49:17 +0000</pubDate>
      <link>https://dev.to/andreidascalu/docker-cleanup-images-by-name-search-bpk</link>
      <guid>https://dev.to/andreidascalu/docker-cleanup-images-by-name-search-bpk</guid>
      <description>&lt;p&gt;There's nothing more annoying than collecting docker images locally and suddenly stateful application containers (like databases, mySQL, RabbitMQ) suddenly exiting because they don't have space left on the (usually VM) where they are running.&lt;/p&gt;

&lt;p&gt;You can &lt;code&gt;docker system prune -a&lt;/code&gt; to clean as much as possible or you can &lt;code&gt;docker rmi&lt;/code&gt; everything, but what if you want to do a bit more targeted cleaning?&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker image ls&lt;/code&gt; will list all images with some info split in columns. First column is the image name, the second column contains the tag.&lt;/p&gt;

&lt;p&gt;Now, we know that images share layers so deleting one won't necessarily free up all the space since some layers may still be linked to other images but we can improve cleanup by untagging images. How to do that in a more targeted way? By listing them and then joining the name column and the tag column and then passing it all to &lt;code&gt;docker rmi&lt;/code&gt;. AWK comes to the rescue!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker image ls | grep "MY SEARCH" | awk '{print $1 ":" $2}' | xargs docker rmi
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Of course, feel free to replace grep with your preferred search command as long as its output only filters &lt;code&gt;docker image ls&lt;/code&gt; output and doesn't extract information from it, as AWK expects the columnised output.&lt;/p&gt;

&lt;p&gt;Note: you should still do a&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker system prune
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;afterwards as unlinking tags only frees up layers but those layers may remain stored locally - but docker prune will remove the dangling ones (eg: not tied to tagged images or to running containers).&lt;/p&gt;

</description>
      <category>docker</category>
      <category>development</category>
    </item>
    <item>
      <title>Cupcakes are agile, what about you?</title>
      <author>aldin / a–ª–¥–∏–Ω / ÿßŸÑÿØŸäŸÜ</author>
      <pubDate>Fri, 23 Jul 2021 07:20:32 +0000</pubDate>
      <link>https://dev.to/infobipdev/cupcakes-are-agile-what-about-you-2pl9</link>
      <guid>https://dev.to/infobipdev/cupcakes-are-agile-what-about-you-2pl9</guid>
      <description>&lt;p&gt;As a foodie, I don't mind hearing out some cool food references from time to time. This time let me be the one to share. Hopefully, it's not too corny.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-would-you-create-your%C2%A0product"&gt;
  &lt;/a&gt;
  How would you create your¬†product?
&lt;/h2&gt;

&lt;p&gt;For quite a while now, in the IT industry especially, we all talk about agile, no startup or modern tech enterprise ever says they do anything close to the waterfall approach, we just go with the flow and use the fancy buzzwords and role titles. But at the end of the day, when the masks fall off, are we really agile‚Ä¶ are we even close to it?&lt;/p&gt;

&lt;p&gt;Think about how do you build your product.&lt;/p&gt;

&lt;p&gt;Even if it might seem agile with all the constant feedback on questions you might have for certain functionalities, or modules, or design perks, they are often just ingredients. If you choose to build that product in a way that you push all (or most of) the ingredients your product may be consisted of, then at least don't be surprised with outcomes that might not get as you would wish for.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"I suggest we don't commit to the entire product or project upfront. Instead, I suggest we focus on a single feature or value component first and measure its impact. We can then always decide to do more and iterate."‚Ää-‚ÄäPeter¬†Merholz&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As Peter Merholz pointed out, if you go and focus on all the ingredients you may (or may not) need for the final product, up until the very end there is no real customer value.&lt;/p&gt;

&lt;p&gt;With no customer value, it is really hard to have any valuable feedback. Actually, most of the feedback one might get on such inquiries will be bringing more noise than useful pieces of information the team might use to improve the product because it's way too abstract in any other way.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cupcakes-are-great"&gt;
  &lt;/a&gt;
  Cupcakes are great.
&lt;/h2&gt;

&lt;p&gt;Foodie reference spotted. Yeah, cupcakes, everybody loves them (we're just going to imagine they are also gluten-free).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UGd5TXr1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/glpcgiu5l7zajthloet9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UGd5TXr1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/glpcgiu5l7zajthloet9.png" alt="Cupcake vs cake base approaches visualised"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cupcakes can be baked in a way to have the same base mass texture as your final shiny cake would have, you can use the same filling as you would on its final form and the same icing. The only things you cannot put into your cupcake to show resemblance to its fully evolved stage of that big final fancy cake is, if you think of it, just decorative things.&lt;/p&gt;

&lt;p&gt;Find your core, that part of your product that we mentioned above, that single value component. Find it, work it out top-down, bake your cupcake, and take it to degustation!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#everyone-enjoyed-the-degustation"&gt;
  &lt;/a&gt;
  Everyone enjoyed the degustation?
&lt;/h2&gt;

&lt;p&gt;If it worked‚Ää-‚Ääbingo! You did all you had to do and scored a touchdown with close-to-zero effort, now just keep repeating the steps until their final shape.&lt;/p&gt;

&lt;p&gt;If it completely failed‚Ä¶ well, when you think of it‚Ää-‚Ääit's not that bad either. You pitched your cupcake to the client (an edible portion of the product, something of value), used a couple dozens times fewer resources than you would need to get anywhere close to getting valuable feedback in the first approach, and saved yourself and your team much, much, much of your/their precious time.&lt;/p&gt;

&lt;p&gt;You can expect to receive valuable feedback because you provided something of value to the client as well.&lt;/p&gt;

&lt;p&gt;So next time you start working on something, you might want to scale it down. Agile is not just about keeping the stakeholders in a loop and constant "feedback" gathering. It is also about saving time and resources on trial and fail until success loops, and products are about giving an actual value, so scope it down and start delivering it from the very beginning of the process.&lt;/p&gt;

</description>
      <category>agile</category>
      <category>baking</category>
      <category>feedback</category>
    </item>
  </channel>
</rss>
