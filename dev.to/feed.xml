<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Hacktoberfest 2021: through the eyes of a beginner</title>
      <author>aisha</author>
      <pubDate>Wed, 17 Nov 2021 20:41:11 +0000</pubDate>
      <link>https://dev.to/wasp_x/hacktoberfest-2021-through-the-eyes-of-a-beginner-16n4</link>
      <guid>https://dev.to/wasp_x/hacktoberfest-2021-through-the-eyes-of-a-beginner-16n4</guid>
      <description>&lt;p&gt;&lt;strong&gt;Hacktoberfest&lt;/strong&gt; is a month-long celebration of open source software run by DigitalOcean. It's a great opportunity for both beginners and professionals to get started with open-source contribution.&lt;/p&gt;

&lt;p&gt;I feel extremely proud to have successfully completed Hacktoberfest 2021 with a total of 5 merged pull requests on GitHub under my belt. This was also my first time contributing to open-source and it was an amazing experience. In this article, I'll be briefly talking my personal journey throughout Hacktoberfest, how to make your first contribution and also some do's and don'ts for beginners who want to start with open-source.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hacktoberfest-through-the-eyes-of-a-beginner"&gt;
  &lt;/a&gt;
  Hacktoberfest through the eyes of a beginner
&lt;/h2&gt;

&lt;p&gt;Believe me when I say this, I had absolutely no knowledge about open-source or even GitHub before participating in Hacktoberfest. And my techstack consisted of only HTML/CSS and a little bit of JavaScript. I think it's safe to say that it was all a little overwhelming for a complete beginner like me.&lt;br&gt;
But with the guidance of the coordinators and the Hacktoberfest mentors and my peers, I was able to make my first contribution successfully.&lt;br&gt;
The requirements to complete Hacktoberfest is to submit a minimum of 4 valid pull requests in the month of October. If all pull requests get approved by maintainer and are merged into the repository, you will be eligible to receive the swag kit!&lt;br&gt;
I'd fixed 3 syntax errors and re-designed 2 contact forms as part of my contributions this year which is a total of 5 valid pr's and as promised, my limited edition t-shirt is on its way!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dos-and-donts-while-making-your-first-contribution"&gt;
  &lt;/a&gt;
  Do's and Don'ts while making your first contribution
&lt;/h2&gt;

&lt;p&gt;Contributing to open-source can be confusing as a beginner. I personally made a lot of mistakes during Hacktoberfest 2021 even after doing so much research. Guess some things can only be learned from experience haha.&lt;br&gt;
Here is a list of some do's don'ts which might be helpful to future contributors:&lt;/p&gt;

&lt;ul&gt;DO's
&lt;li&gt; Search for good and active repositories. Look for issues to fix or add your own section of code.
&lt;/li&gt;
&lt;li&gt; Always go through the ReadMe file. Maintainers often explain the process of contribution to their repo in their readme.md file.
&lt;/li&gt;
&lt;li&gt; Search for repositories with the &lt;code&gt;Hacktoberfest-accepted&lt;/code&gt; tag. Henceforth, you can look for repositories labelled with &lt;code&gt;good-first-issue&lt;/code&gt; for some beginner-friendly projects to contribute to.
&lt;/li&gt;
&lt;li&gt;** Do not limit yourself to only 4 pull requests, and try to make as many contributions as you can **
&lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;DON'TS
&lt;li&gt; Do not make contributions to repositories instructing to add simple one-line commits. These repositories often get rejected.
&lt;/li&gt;
&lt;li&gt; Do not make contributions to repositories accepting basic Data Structure codes. This goes against the rules of Hacktoberfest and your pull request will be marked invalid.
&lt;/li&gt;
&lt;li&gt; **Keep track of your profile on the official Hacktoberfest website. It's good practice to be updated about your progress.** 
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And that was all about my experience in contributing to open-source as a complete beginner. Feel free to reach out if you want to discuss more Hactoberfest or open-source, I love to interact with more developers. &lt;br&gt;
You can also find me on &lt;a href="https://twitter.com/wasp_404"&gt;Twitter&lt;/a&gt;&lt;br&gt;
&lt;em&gt;See you at Hacktoberfest next year!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>hacktoberfest</category>
      <category>opensource</category>
      <category>github</category>
    </item>
    <item>
      <title>Web Authentication By The Numbers (Part 1)</title>
      <author>Jay F. Grissom</author>
      <pubDate>Wed, 17 Nov 2021 20:30:09 +0000</pubDate>
      <link>https://dev.to/jfgrissom/web-authentication-by-the-numbers-5b0g</link>
      <guid>https://dev.to/jfgrissom/web-authentication-by-the-numbers-5b0g</guid>
      <description>&lt;h2&gt;
  &lt;a href="#how-authentication-layers-are-built-up-to-create-an-authentication-system-for-your-website"&gt;
  &lt;/a&gt;
  How authentication layers are built up to create an authentication system for your website.
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#audience"&gt;
  &lt;/a&gt;
  Audience
&lt;/h2&gt;

&lt;p&gt;This article is intended for intermediate level website developers and software engineers. I've tried to make it approachable for beginners but it's really not for absolute beginners.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#problem"&gt;
  &lt;/a&gt;
  Problem
&lt;/h2&gt;

&lt;p&gt;Website authentication can be a very confusing topic. There are a lot of considerations when thinking about an authentication system for your web projects. It's overwhelming because authentication can be extremely simple or it can be a layer cake of individual systems that each build on top of each other.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#approach"&gt;
  &lt;/a&gt;
  Approach
&lt;/h2&gt;

&lt;p&gt;In this series we're going to start with no authentication and then you'll add a very basic authentication system. Then you'll progressively add and remove layers on top of it to make it a full blown Authentication System for your website using PassportJS. &lt;/p&gt;

&lt;p&gt;Once that is done you'll learn how to go one step further and implement Xumm (a crypto currency wallet) SignIn as a stand-in for a traditional &lt;code&gt;user:password&lt;/code&gt; based authentication mechanism. We'll do this using a new PassportJS strategy I've created to authenticate your users with Xumm.&lt;/p&gt;

&lt;p&gt;For the grand finale you'll learn how to implement all of this in BlitzJS by executing a single line of code using a BlitzJS recipe.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#assumptions"&gt;
  &lt;/a&gt;
  Assumptions
&lt;/h2&gt;

&lt;p&gt;The examples here use localhost without Transport Layer Security. I'll assume you understand that all this is not secure in a real world production environment without &lt;a href="https://en.wikipedia.org/wiki/Transport_Layer_Security"&gt;TLS&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#for-early-portions-of-this-series-ill-assume"&gt;
  &lt;/a&gt;
  For early portions of this series I'll assume
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;You're familiar with Typescript. &lt;/li&gt;
&lt;li&gt;You know how to setup &lt;a href="https://nodejs.dev/"&gt;NodeJS&lt;/a&gt; and &lt;a href="https://expressjs.com/"&gt;ExpressJS&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;You're familiar with the concept of &lt;a href="https://expressjs.com/en/guide/using-middleware.html"&gt;middleware for ExpressJS&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;You know how to use &lt;a href="https://www.postman.com/"&gt;Postman&lt;/a&gt; to make calls to your application as if you're a client.&lt;/li&gt;
&lt;li&gt;You're familiar with &lt;a href="http://www.passportjs.org/"&gt;PassportJS&lt;/a&gt; but may not have implemented it previously. &lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#for-late-portions-of-this-series-ill-assume"&gt;
  &lt;/a&gt;
  For late portions of this series I'll assume
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;You understand that &lt;a href="https://xumm.app/"&gt;Xumm&lt;/a&gt; is a wallet for the &lt;a href="https://xrpl.org/"&gt;XRP Ledger&lt;/a&gt; (an open source crypto currency project).&lt;/li&gt;
&lt;li&gt;You're familiar with &lt;a href="https://blitzjs.com/"&gt;BlitzJS&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#github-repo"&gt;
  &lt;/a&gt;
  GitHub Repo
&lt;/h2&gt;

&lt;p&gt;If you want to follow along with examples there is a branch for each type of authentication system we're building here over on my corresponding &lt;a href="https://github.com/jfgrissom/web-authentication-by-the-numbers"&gt;Web Authentication By The Numbers Github Repo&lt;/a&gt;.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/jfgrissom"&gt;
        jfgrissom
      &lt;/a&gt; / &lt;a href="https://github.com/jfgrissom/web-authentication-by-the-numbers"&gt;
        web-authentication-by-the-numbers
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      This repository goes with the article by the same name on dev.to.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
web-authentication-by-the-numbers&lt;/h1&gt;
&lt;p&gt;This repository goes with the article by the same name on dev.to.&lt;/p&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/jfgrissom/web-authentication-by-the-numbers"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


&lt;h2&gt;
  &lt;a href="#starting-with-no-authentication-step-0"&gt;
  &lt;/a&gt;
  Starting With No Authentication (Step 0)
&lt;/h2&gt;

&lt;p&gt;Initially we'll start the application on the master branch where there is no authentication. See the &lt;a href="https://github.com/jfgrissom/web-authentication-by-the-numbers/blob/master/index.ts"&gt;&lt;code&gt;index.ts&lt;/code&gt;&lt;/a&gt; file on the master branch for this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import express, { Application, Request, Response } from 'express'

const app: Application = express()
const port = 3000

app.get('/', async (req: Request, res: Response): Promise&amp;lt;Response&amp;gt; =&amp;gt; {
  return res.status(200).send({
    message: "Hello World! I'm not authenticated."
  })
})

app.listen(port)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Making a call to this using Postman will return this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "message": "Hello World! I'm not authenticated."
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#primitive-authentication-system-step-1"&gt;
  &lt;/a&gt;
  Primitive Authentication System (Step 1)
&lt;/h2&gt;

&lt;p&gt;Probably the most primitive authentication system we can build with express contains a simple set of hard coded credentials. Using this &lt;a href="https://github.com/jfgrissom/web-authentication-by-the-numbers/blob/feature/basic-auth/index.ts"&gt;basic auth example&lt;/a&gt; we can setup some thing like this.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;NOTE: This authentication system is horrible for many reasons. Don't use this in your app (the user and password will be checked into Github). This example is just to help you understand what is going on here.&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import express, { Application, Request, Response, NextFunction } from 'express'
import auth from 'basic-auth'

const app: Application = express()
const port = 3000

app.use((req: Request, res: Response, next: NextFunction) =&amp;gt; {
  let user = auth(req)

  if (
    user === undefined ||
    user['name'] !== 'admin' ||
    user['pass'] !== 'supersecret'
  ) {
    res.statusCode = 401
    res.setHeader('WWW-Authenticate', 'Basic realm="Node"')
    res.end('Unauthorized')
  } else {
    next()
  }
})

app.get('/', async (req: Request, res: Response): Promise&amp;lt;Response&amp;gt; =&amp;gt; {
  return res.status(200).send({
    message: "Hello World! I'm authenticated."
  })
})

app.listen(port)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once you get &lt;code&gt;basicAuth&lt;/code&gt; added to your application you can try to make a call to the service using Postman but you'll just get am empty response with a status code of &lt;code&gt;401 Unauthorized&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To get an authenticated response you'll need to setup credentials in the "Authorization" tab of your Postman request. The Username is "admin" and the Password is "supersecret". &lt;/p&gt;

&lt;p&gt;Make the request again with these credentials and you'll get this for a response.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "message": "Hello World! I'm authenticated."
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this point you've got a password database and you can accept "Basic Authentication Headers" from any client.&lt;/p&gt;

&lt;p&gt;The user database can be much more complicated than this. It could be in a database or provided by an external authentication provider (like &lt;a href="https://aws.amazon.com/cognito/"&gt;AWS Cognito&lt;/a&gt;). For now we'll leave it simple and just keep using &lt;code&gt;basicAuth&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#session-support-step-2"&gt;
  &lt;/a&gt;
  Session Support (Step 2)
&lt;/h2&gt;

&lt;p&gt;So providing credentials every time someone requests something from your site is OK if the client is an API consumer (like another web service). However this isn't typically how you would handle authentication for users who show up to your site using a web browser.&lt;/p&gt;

&lt;p&gt;So what resources will you need to create to provide this functionality?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;At this point you'll need to provide some webpage features that allow a user to login, use authorized resources, and logout.&lt;/li&gt;
&lt;li&gt;You'll also need something that won't require them to login every time they click on something within the page.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let's begin by adding session support to the project.&lt;/p&gt;

&lt;p&gt;To see the code for this take a look at the &lt;a href="https://github.com/jfgrissom/web-authentication-by-the-numbers/blob/feature/session-support/index.ts"&gt;session support branch&lt;/a&gt; of the repo.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;NOTE: This branch intentionally doesn't have authentication in it.&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import express, { Application, Request, Response } from 'express'
import session from 'express-session'

const app: Application = express()
const port = 3000

const sessionOptions = {
  secret: 'session secret that is not secret'
}

app.use(session(sessionOptions))

app.get('/', async (req: Request, res: Response): Promise&amp;lt;Response&amp;gt; =&amp;gt; {
  return res.send(`Session ID: ${req.session.id}`)
})

app.listen(port)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once you've updated this file connect to your site using a web browser at &lt;code&gt;http://localhost:3000/&lt;/code&gt;. When you do this you should see a result similar to this on your web page &lt;code&gt;Session ID: Outbyq2G_EYkL5VQzAdKlZIZPYfaANqB&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;NOTE: To keep your browser sessions secure in production you would not share this session ID over an unsecured connection. You would use https (TLS).&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So what is this session good for exactly? I'm glad you asked! This session is your server's way of keeping track of browser sessions (note it doesn't take care of user sessions - at least not yet anyway). The session solves the problem of requiring a user to login every time they click on something within the page.&lt;/p&gt;

&lt;p&gt;So you've got a session and you've got a user database. How exactly  do these things tie together?&lt;/p&gt;

&lt;p&gt;The session is tied to a specific client (in this case a browser). The way the server and browser communicate this session is through a cookie. If you look at the cookies in your browser you'll see that it matches the ID that was presented in your web page.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#session-support-with-user-support-step-3"&gt;
  &lt;/a&gt;
  Session Support with User Support (Step 3)
&lt;/h2&gt;

&lt;p&gt;So how to the session and the user tie together?&lt;/p&gt;

&lt;p&gt;In this example we'll reintroduce the Basic Authentication feature by merging in the two previous branches we created (&lt;a href="https://github.com/jfgrissom/web-authentication-by-the-numbers/blob/feature/basic-auth"&gt;feature/basic-auth&lt;/a&gt; and &lt;a href="https://github.com/jfgrissom/web-authentication-by-the-numbers/blob/feature/session-support"&gt;feature/session-support&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;You should end up with with this. But it's not complete.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import express, { Application, Request, Response, NextFunction } from 'express'
import session from 'express-session'
import auth from 'basic-auth'

// Add the session data we need that is specific to our application.
declare module 'express-session' {
  interface SessionData {
    userToken?: string
    tokenExpiration?: number
  }
}

const app: Application = express()
const port = 3000

const sessionOptions = {
  secret: 'session secret that is not secret',
  cookie: {
    httpOnly: true // Only let the browser modify this, not JS.
  }
}

app.use(session(sessionOptions))

app.use((req: Request, res: Response, next: NextFunction) =&amp;gt; {
  // If we have a previous session with key session data then we are authenticated.
  const currentTime = Date.now() / 1000
  if (
    req.session.userToken &amp;amp;&amp;amp;
    req.session.tokenExpiration &amp;amp;&amp;amp;
    req.session.tokenExpiration &amp;gt; currentTime
  ) {
    next()
    return
  }

  // If no prior session was established and bad credentials were passed.
  const user = auth(req)
  if (
    user === undefined ||
    user['name'] !== 'admin' ||
    user['pass'] !== 'supersecret'
  ) {
    res.statusCode = 401
    res.setHeader('WWW-Authenticate', 'Basic realm="Node"')
    res.end('Unauthorized')
    return
  }

  // Create a new session for the user who has passed good credentials.
  req.session.userToken = user.name
  req.session.tokenExpiration = currentTime + 15 // 15 second session.
  next()
})

app.get('/', async (req: Request, res: Response): Promise&amp;lt;Response&amp;gt; =&amp;gt; {
  const currentTime = Date.now() / 1000
  return res.send(`
  Session ID: ${req.session.id} &amp;lt;br/&amp;gt;
  Authenticated Username: ${auth(req)?.name} &amp;lt;br/&amp;gt;
  User Token: ${req.session.userToken} &amp;lt;br/&amp;gt;
  Current Time: ${currentTime} &amp;lt;br/&amp;gt;
  Session Expiration: ${req.session.tokenExpiration}
  `)
})

app.listen(port)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You have session functionality and you have basic authentication functionality. &lt;/p&gt;

&lt;p&gt;You can test how the page behaves without credentials by going to the page in a web browser and clicking cancel when prompted for a username and password. You should see a &lt;code&gt;401 Error&lt;/code&gt; in the console and &lt;code&gt;unauthorized&lt;/code&gt; on the web page.&lt;/p&gt;

&lt;p&gt;You can test how the page behaves with credentials by prepending the username and password in the url so that it looks like this &lt;code&gt;http://admin:supersecret@localhost:3000/&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Session ID: Wc29HPGVTdnx0VqsDr7uaxWPTV3KoIzO
Authenticated Username: admin
User Token: admin
Current Time: 1637179009.834
Session Expiration: 1637179024.829
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can test out the session persistence by refreshing the page. You'll notice that the User Token remains admin but the Authenticated Username becomes &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To test out the session expiring by passing good credentials like this &lt;code&gt;http://admin:supersecret@localhost:3000/&lt;/code&gt;. Then you can pass  bad bad credentials to the page like this &lt;code&gt;http://bad:credentials@localhost:3000/&lt;/code&gt;. Then refresh the page repeatedly until the session expires after 15 seconds. When the tokenExpires then you'll see a prompt show up for the Username and Password (just click cancel). &lt;em&gt;&lt;strong&gt;NOTE: This is most easily done in Chrome because it will not automatically cache (and reuse) good credentials after you've passed bad credentials.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;With this latest iteration we've answered a few questions.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;How do we access the name of the user? You can see the Authenticated username came in through the authenticated request &lt;code&gt;auth(req)&lt;/code&gt; and that if we want to use it again we'll need to access it through the session.&lt;/li&gt;
&lt;li&gt;How does our system know if the user previously was authenticated? It knows because a prior session was established.&lt;/li&gt;
&lt;li&gt;Why can't a browser just manipulate the cookie and add data we are expecting? We are telling browsers that they can't make changes to the cookie using Javascript with the httpOnly directive &lt;code&gt;{cookie: { httpOnly: true }}&lt;/code&gt;. Our server knows the state of the cookie and will reject it if the client changes the cookie.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So what if you don't want to use Basic Auth? This is a very reasonable thing. Basic auth is pretty terrible for a lot of reasons.&lt;/p&gt;

&lt;p&gt;We'll be adding more to this in the next section of this series.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#article-image-credit"&gt;
  &lt;/a&gt;
  Article Image Credit
&lt;/h2&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@parsoakhorsand?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Parsoa Khorsand&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/lock?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>authentication</category>
      <category>typescript</category>
      <category>webdev</category>
      <category>node</category>
    </item>
    <item>
      <title>On professional standards</title>
      <author>Lee Hambley</author>
      <pubDate>Wed, 17 Nov 2021 20:15:51 +0000</pubDate>
      <link>https://dev.to/leehambley/on-professional-standards-322c</link>
      <guid>https://dev.to/leehambley/on-professional-standards-322c</guid>
      <description>&lt;p&gt;Building software occupies an unusual space, it's certainly more of a vocation along side plumbers, electricians and technicians, however there remains an enormous scope for creativity and problem solving because unlike those aforementioned vocations computers more-or-less lack any physical or chemical laws governing our application of techniques or which can constrain our fantastically complicated creations.&lt;/p&gt;

&lt;p&gt;I'd go as far to say that the debate about whether or not people need to have computer science degrees is wholly misguided. Scientists ... let's say people with an analytical mind, a fundamental training in the "laws of nature" of computers, these people may make excellent engineers, but science is not engineering, and a computer sciences degree is absolutely not a guarantee of being a capable engineer, just as a physics degree doesn't qualify someone to engineer buildings, bridges or skyscrapers, even if it might equip them with the right analytical skills.&lt;/p&gt;

&lt;p&gt;I am generally opposed to certifications and standards, as I believe that easy access to technology-focused knowledge work is such an enormous enabler for individuals, that the floodgates for new boot-camp graduates and interns should be wide, wide open to encourage as many people as possible into the field, as the skills base widens, and as accessible low- and no-code tools proliferate the volume of software in the world continues to grow, and more and more opportunities continue to exist where profitable businesses need extremely highly skilled engineers to assist them, and those engineers can command a premium salary or rate. &lt;/p&gt;

&lt;p&gt;Technology enjoyed this way can line the pockets of everyone concerned, the fresh-faced rookies, the 200 year old jaded witches and wizards (architect years are like dog years.), and the company who is profiting all the time (maybe with a smaller gross margin than they wished..) from the software we build.&lt;/p&gt;

&lt;p&gt;That all said, in the absence of professional standards such as those which exist in the form of building, HVAC, electrical and plumbing codes, it continues to be exhausting and draining to constantly be held back by sub-standard work, and for that definition of sub-standard to be &lt;strong&gt;entirely&lt;/strong&gt; subjective.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---j5fVNZx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/drehcchzziz35wj17rd1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---j5fVNZx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/drehcchzziz35wj17rd1.jpg" alt="Image description" width="880" height="585"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For all the progress a software architect (or someone in a Principal or Distinguished role) can make in fostering a culture of collaboration, design, deliberate decision making, and modelling in collaboration with stakeholders from diverse disciplines (towards business or IT operations), the environmental pressure to make changes at any cost are everpresent, and in the absense of objective measures (including standards &amp;amp; certifications) things can rapidly devolve into the famed "ball of mud" non-architecture which has more in common with the Shanty towns&lt;/p&gt;

&lt;p&gt;Just as Shanty towns are often shaped by the environmental constraints, lack of resources and rapid growth, software projects can suffer the same. Shanty towns can gentrify info middle-class neighbourhoods, but more often than not, at least in &lt;em&gt;software&lt;/em&gt; the growth on the fringes out-paces the gentrification and investment in the core. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v3t_22he--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vsyuwgw3t1zawh8davez.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v3t_22he--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vsyuwgw3t1zawh8davez.png" alt="Image description" width="629" height="412"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The architect(s) must focus their energy, and choose their battles wisely.&lt;/p&gt;

&lt;p&gt;Ultimately the architect(s) require the support of the tradespeople working hands-on on the code every day. Often programmers lament that their business and project counterparts don't grant them time for re-factoring, writing tests, or conducting load tests, however their reasoning is likely flawed, nobody negotiates (at least not over the table) those things with their HVAC, plumbing, or electrical technicians.&lt;/p&gt;

&lt;p&gt;Those tradespeople have stacks of standards, international and regional to adhere to. An electrician will &lt;em&gt;not&lt;/em&gt; add a new circuit to a pre-1950s house (which in many parts of the world lack the 3rd wire in the wall sockets which carries a protective earth to protect against electrocution) without performing the remedial work to re-fit the house with modern wiring, no matter the cost. The liability, insurance, loss of license and with it, their livelihood is a cost so high that with sub-standard wiring in your outdated home, professionals cannot, and will not take shortcuts.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b006tdcs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nar8zzg6ju11m96q3nj5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b006tdcs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nar8zzg6ju11m96q3nj5.png" alt="Image description" width="880" height="390"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The rise of the open office may indeed correlate with the cost of installing adequate HVAC systems in closed-office environments, and tenants would likely violate their lease and put their employees' health in danger by taking shortcuts, thus HVAC professionals will also not take the risk of assuming the liability of contributing to sub-standard work.&lt;/p&gt;

&lt;p&gt;Technology however doesn't &lt;strong&gt;directly&lt;/strong&gt; have these kinds of standards in place, sure there's security standards such as ISO 27001, the GDPR (article 15) mandates that access to data is logged to assist in preserving the data subject's rights, financial and telecommunications software is required to keep data for a long time for auditing, and certain fields such as the payment card industry specifically mandate &lt;em&gt;against&lt;/em&gt; storing data.&lt;/p&gt;

&lt;p&gt;With all those "non-functional" requirements, however enforcement and policing is extremely lax. Article 15 of the GDPR should render it illegal for any software to &lt;em&gt;show&lt;/em&gt; any data without leaving a trace, however most Django, Rails, Express.JS or similar applications will happily serve a &lt;code&gt;GET&lt;/code&gt; request and log practically nothing in the logs, which may or may not even be persisted. I make no judgement on whether or not the global invalidation of practically every piece of software on the planet is a &lt;em&gt;bug&lt;/em&gt; or &lt;em&gt;feature&lt;/em&gt; of the GDPR, but our industry is steadfast in it's refusal to even address the topic.&lt;/p&gt;

&lt;p&gt;Digressing somewhat to professional standards, most seasoned architects and engineers would begin to raise questions about whether using some or all of a dynamically typed language, without CI/CD, with a privileged database user account, with access to an SSH console would begin to constitute malpractice, if we drew parallels to tradespeople in the physical world if would be akin to working on a live electrical panel, or sourcing fresh air for HVAC From next to a busy highway, or recycling water from a bathroom into a kitchen, etc, etc.&lt;/p&gt;

&lt;p&gt;Less clear, again is perhaps the use of certain paradigms such as stateless- or functional-programming, event sourcing, certain IPC strategies, and various combinations of the above, one may not forget that just like a building is built once, and lived in forever, code too is built once, and lived in for a long time, perhaps it is worth &lt;em&gt;investing&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;A passing slight at Agile, before I wrap up, which is that often Agile is used as a tool to keep things moving, no matter the total cost, as long as the immediate costs are bearable, in a strongly opinionated ecosystem where technology choices are made for you, this may be appropriate. I might be tempted here to draw parallels between "renting" space someone else designed, living out of a small studio apartment, to how it is to "rent" space in an opinionated inflexible framework, there may come a time when really investing into "where you live" as an engineer in a business context makes more sense, but having rented for the first few years of your life, you may lack the maturity to do sufficient, just-in-time planning; a delicate skill which takes years and years of vocational training to master.&lt;/p&gt;

&lt;p&gt;Of course, just as hand-building a shed in your garden under a certain size is not subject to building regulation, nor should all software be subject to regulation, we must, at all costs preserve the accessibility of our industry at large, and preserve it as a creative practice in which people can innovate, but we also urgently need to develop a philosophy of our own, and begin to identify objective measures of good and bad software, I might start with something like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Some application of schema definition tools&lt;/strong&gt; 
Any polymorphic type system, json schema, AVRO schema, etc, etc. Polymorphism (i.e interface types, traits, generics, etc) is important to avoid hard static typing, but dynamic typing leaves too much surface are for testing. With a proper type schema, parameterized testing becomes feasible, and the total set of inputs and outputs becomes a much smaller, but likely still infinite set. Type systems also provide a great platform for documentation, IDEs, language servers, generating documentation, and evolving a schema over time. Avro is outstanding here, as is GraphQL as schema definition languages, the rest (all of them.) fall down on one or more vital area.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Proper application of an "aggregate root" pattern&lt;/strong&gt;
For example, avoiding the "active record" pattern, and grouping locally related objects such that data access is controlled by the "root" (i.e in a "invoice has line items"  example, the invoice would be the entry-point for changes to lineitem quantity to apply business rules, calculate taxes, check customer standing, and stock control. Restricting a "model" to the core few objects of a system. ActiveRecord &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Proper application of modelling tools and design strategies&lt;/strong&gt;
Framework-over-database is precisely the absence of software design, in today's environment the developers who operate in that level will soon find themselves in real trouble from low-and-no-code backed by a Firebase database or a Google Sheets sheet. Just as a highly professional building crew will not be enthused about trying to turn a Shanty Town shack into a built-to-code residence, software architects and highly professionalized teams will be reluctant to &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Proper managing of side-effects and transactional guarantees&lt;/strong&gt;
An operation such as booking a cinema ticket, or securing a package holiday should have very clear guarantees about the transactional properties. It should not be possible to book &lt;code&gt;1 of n&lt;/code&gt; tickets in a mult-seat booking, or book a flight without a hotel if the customer tried to secure both. In the absence of support from your data store, some kind of "two-phase" transactions can be emulated for which established patterns exist. Controllling for side-effects (such as API calls, IO, reading random numbers, reading from external data sources) are harder to control for, but again practices are well established in some communities to have entirely deterministic execution of some or all codepaths, and simulation tools which will will rigorously "prove" a "pure" (no side effects) model, these tools are effectively unused entirely by business software, to the detriment of practically everyone.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Proper Auditability&lt;/strong&gt;
Probably through some kind of event-sourcing mechanism (e.g log everything that happens as the source of truth, and derive projections from it, PDFs for your stakeholders, and various read-only databases which can be hyper optimized for your use-cases). Event sourcing is the oldest record keeping strategy on the planet, and with the blistering power of modern computer systems almost any amount of data can be managed in an event-sourced fully audited manner, with proper caching strategies, careful treatment of read-cursors, and proper aggregate partitioning schemes this architecture can be potentially infinitely scalable. Regrettably it only works right if you apply it along side the other &lt;em&gt;proper&lt;/em&gt; things enumerated in this list.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Proper user- and authentication-strategies&lt;/strong&gt;
Conflating a single human being with a single account is a sin committed by practically every piece of software on the planet, ever. That being said decoupling the human who is authorized from the "account", and permitting many-to-many-to-many relationships enables enormous agility in software. Such strategies would permit seamless "customer authorizes admin to log into their account" for support without requiring super-admins (violates the GDPR), would assist elders who are not intimately familiar with technology to delegate access to their accounts to trusted relatives temporarily or permanently, and allows developers under careful control to impersonate, or share accounts on testing environments. Here are mature and established standards such as OAuth 2.0 which have stood for a decade or more, applied correctly they are enormously liberating, misapplied they are glorified 1990s vintage PHP Session IDs ripe for abuse. Role-based-access-control (RBAC), super user "admin" accounts, and similar anti-patterns can be successfully avoided if OAuth is applied properly with a sympathetic understanding of the nuance in in the spec, however again this requires taste, and expertise, and must overcome the ever-present draw to grab the simplest library in the language's package registry and copy 10 lines from a &lt;code&gt;README&lt;/code&gt; and move on to the next ticket.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Application of all of those patterns above, at precisely the right time, not too soon and not too late; which requires taste and experience, something which is regrettably entirely subjective, it also inflates enormously the cost in some places, but radically reduces cost over time.&lt;/p&gt;

&lt;p&gt;I think Agile and XP practices, the easy accessibility of framework-first development, and the overwhelming ratio of inexperienced, to experienced programmers means that the ideas above will never reach mainstream adoption.&lt;/p&gt;

&lt;p&gt;For every senior, experienced programmer who takes time to understand the &lt;em&gt;needs&lt;/em&gt; of the stakeholder, the regulatory and environmental (i.e existing code, existing practices), and attempts to produce high quality, well-thought-out work, which is sympathetic to the entire nuanced multi-dimensional spectrum of needs.... there will be ten less experienced people who lack the experience necessary to build for maintenance and will through malice or inexperience (incompetence?) offer a "competing", but sub standard solution.&lt;/p&gt;

&lt;p&gt;Sometimes you don't need top-of-the-line high skill plumbing, and you literally need the software equivalent of a bucket and hose, but business stakeholders often can't tell the difference, and if a more experienced engineer commits to a certain time frame, scope and cost, there will often be that less experienced engineer promising the business what they need, right this second, for half the price, with no up-front discussion. To both the inexperienced engineer and the business stakeholder, they are apparently offering the same thing as the more experienced engineer, but the more experienced engineer is offering a different, significantly higher quality product, so the "market" cannot behave rationally in the absence of regulation.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1l4Fq6gf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/frwpwns28hw9tj4fr4ct.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1l4Fq6gf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/frwpwns28hw9tj4fr4ct.png" alt="Image description" width="880" height="660"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Validate passwords with JS</title>
      <author>Walter Nascimento</author>
      <pubDate>Wed, 17 Nov 2021 20:14:29 +0000</pubDate>
      <link>https://dev.to/walternascimentobarroso/validate-passwords-with-js-1jge</link>
      <guid>https://dev.to/walternascimentobarroso/validate-passwords-with-js-1jge</guid>
      <description>&lt;p&gt;&lt;a href="https://medium.com/walternascimentobarroso-pt/validar-senhas-com-javascript-6517c6438ba9"&gt;[Clique aqui para ler em português]&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Simple project to validate password cracking difficulty, using javascript to set as strong password.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h2&gt;

&lt;p&gt;First let’s create the interface, we’ll do something simple, using just HTML.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Validator Password&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this code we have only one input that will receive the password and the span where it will be displayed if the password is strong, medium or weak.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;input&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;span&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;input&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;validPassword&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;regExpWeak&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;[&lt;/span&gt;&lt;span class="sr"&gt;a-z&lt;/span&gt;&lt;span class="se"&gt;]&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;regExpMedium&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\d&lt;/span&gt;&lt;span class="sr"&gt;+/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;regExpStrong&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/.&lt;/span&gt;&lt;span class="se"&gt;[&lt;/span&gt;&lt;span class="sr"&gt;!,@,#,$,%,^,&amp;amp;,*,?,_,~,-,(,)&lt;/span&gt;&lt;span class="se"&gt;]&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;min_week_password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;min_medium_password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;min_strong_password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;validPassword&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;input_week&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;regExpWeak&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;input_medium&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;regExpMedium&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;input_strong&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;regExpStrong&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;min_week_password&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input_week&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;input_medium&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;input_strong&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Your password is too week&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="nx"&gt;min_medium_password&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;input_week&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;input_medium&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input_medium&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;input_strong&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input_week&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;input_strong&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Your password is medium&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="nx"&gt;min_strong_password&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;input_week&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;input_medium&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;input_strong&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Your password is strong&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we have the javascript code that does all the magic, where we first get the password elements and the span element, in the password element we add a listening that is activated whenever it receives some data and calls the validPassword function.&lt;/p&gt;

&lt;p&gt;in validPassword the input data is checked and compared with the Regex, if the password entered is valid in some regex it is weak, if it is valid in more than one it is average and if it is valid in all it is strong.&lt;/p&gt;

&lt;p&gt;To make the password more valid, a minimum length was added for each password, but of course it can be edited to make it more compatible with your project.&lt;/p&gt;

&lt;p&gt;ready simple like that.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#demo"&gt;
  &lt;/a&gt;
  Demo
&lt;/h2&gt;

&lt;p&gt;See below for the complete working project.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/WalterNascimento/embed/mdPmPag?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#youtube"&gt;
  &lt;/a&gt;
  Youtube
&lt;/h2&gt;

&lt;p&gt;If you prefer to watch it, see the development on youtube.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/5g-184SKPwQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading!
&lt;/h2&gt;

&lt;p&gt;If you have any questions, complaints or tips, you can leave them here in the comments. I will be happy to answer!&lt;/p&gt;

&lt;p&gt;😊😊 See you later! 😊😊&lt;/p&gt;

</description>
      <category>password</category>
      <category>javascript</category>
      <category>tutorial</category>
      <category>validate</category>
    </item>
    <item>
      <title>How to get started with Rust for RISC-V Linux</title>
      <author>Jared Stanbrough</author>
      <pubDate>Wed, 17 Nov 2021 20:14:21 +0000</pubDate>
      <link>https://dev.to/jareds/how-to-get-started-with-rust-for-risc-v-linux-2fop</link>
      <guid>https://dev.to/jareds/how-to-get-started-with-rust-for-risc-v-linux-2fop</guid>
      <description>&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ockam-network"&gt;
        ockam-network
      &lt;/a&gt; / &lt;a href="https://github.com/ockam-network/ockam"&gt;
        ockam
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      End-to-end encryption and mutual authentication for distributed applications.
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;
 

&lt;p&gt;In this hands-on guide, we'll introduce RISC-V, and show how to cross compile a Rust example of Ockam for RISC-V Linux systems. &lt;/p&gt;

&lt;p&gt;We'll also see how to test RISC-V Linux programs using qemu (a hardware emulator).&lt;/p&gt;

&lt;p&gt;Before we dive in, let's start with a ~2 minute demo of how to run Ockam's end-to-end encryption example on Microchip's PolarFire SoC Icicle kit (which includes 4 RISC-V cores).&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/RdIEyVZyPMY"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-riscv"&gt;
  &lt;/a&gt;
  What is RISC-V?
&lt;/h2&gt;

&lt;p&gt;RISC-V is a free, open CPU instruction set architecture (ISA) that is revolutionizing hardware. The open source nature of the ISA has allowed global innovation and creativity in much the same way Open Source revolutionized software. Since its first publication from UC Berkeley in 2011, adoption of RISC-V has seen incredible growth. Organizations like RISC-V International collaborate with dozens of companies, academic institutions, and passionate individuals to propel the ecosystem forward.&lt;/p&gt;

&lt;p&gt;Open architectures such as RISC-V provide transparency down to the deepest levels of a system. For systems that require strong security and safety guarantees, an open ISA provides the foundation of a completely understood supply chain.&lt;/p&gt;

&lt;p&gt;RISC-V is also extensible: additional instructions can be added to perform new operations. This ability is being used to add many features to the ISA, including cryptographic extensions. These extensions enable the development of specialized processors such as Secure Enclaves and Trusted Execution Environments.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#about-the-riscv-isa"&gt;
  &lt;/a&gt;
  About the RISC-V ISA
&lt;/h2&gt;

&lt;p&gt;RISC-V cores come in many shapes and sizes, because the ISA is so flexible and extensible.&lt;/p&gt;

&lt;p&gt;There are 32-bit, 64-bit and even 128-bit versions of the core integer instructions.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;rv32 is the 32-bit configuration suitable for microcontrollers and other small, low power systems.&lt;/li&gt;
&lt;li&gt;rv64 is the 64-bit general purpose, server class configuration. RISC-V Linux projects target the RV64.&lt;/li&gt;
&lt;li&gt;rv128 is a mostly theoretical 128-bit configuration.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;RISC-V cores are also configurable using what are called instruction set variants. Variants add additional instructions to the core ISA. Several variants have been officially standardized, and more are on the way. Variants are referenced by a single letter code such as I, M and C.&lt;/p&gt;

&lt;p&gt;The most important RISC-V variants are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;I&lt;/strong&gt; - The base integer instructions. All RISC-V cores implement this.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;M&lt;/strong&gt; - Multiplication instructions. Most cores implement this, but some very small microcontrollers do not.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;A&lt;/strong&gt; - Atomic instructions. These instructions enable multi-core systems to have consistent views of memory.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;F&lt;/strong&gt; - Floating point instructions. Often omitted on microcontroller configurations.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;D&lt;/strong&gt; - Double floating point instructions. Often omitted on microcontroller configurations.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;C&lt;/strong&gt; - Compressed instructions. Similar to ARM's Thumb instructions. Reduces code size. Sometimes omitted.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;G&lt;/strong&gt; - Short hand for the set of &lt;strong&gt;IMAFD&lt;/strong&gt; variants.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;RISC-V cores are referred to by their bit-width and set of supported variants. For example, a common class of microcontroller configurations is &lt;code&gt;rv32imc&lt;/code&gt; which is a 32-bit processor with a multiplier and compressed instructions.&lt;/p&gt;

&lt;p&gt;The RISC-V configuration targeted by Linux distributions is typically &lt;code&gt;rv64gc&lt;/code&gt;, although it is possible to run Linux on other configurations.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rust-on-riscv"&gt;
  &lt;/a&gt;
  Rust on RISC-V
&lt;/h2&gt;

&lt;p&gt;Rust supports several RISC-V targets. Rust targets are split into &lt;a href="https://doc.rust-lang.org/nightly/rustc/platform-support.html"&gt;several tiers&lt;/a&gt;,&lt;br&gt;
which have different guarantees with respect to support and stability.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;riscv64-unknown-linux-gnu&lt;/code&gt; is a "Tier 2 With Host Tools" target that has support for &lt;code&gt;std&lt;/code&gt; running on Linux.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;riscv64gc-unknown-none-elf&lt;/code&gt; and &lt;code&gt;riscv64imac-unknown-none-elf&lt;/code&gt; are Tier 2 targets that can be used in bare metal projects.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;riscv32i&lt;/code&gt;, &lt;code&gt;riscv32imc&lt;/code&gt; and &lt;code&gt;riscv32imac&lt;/code&gt; &lt;code&gt;-unknown-none-elf&lt;/code&gt; are the 32-bit Tier 2 targets that can be used in bare metal projects.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;riscv32imc-esp-espidf&lt;/code&gt; is a Tier 3 target that supports ESP RISC-V chips like the esp32-c3.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Rust programs targeting RISC-V can be built with or without the &lt;code&gt;std&lt;/code&gt; library. Building &lt;code&gt;no_std&lt;/code&gt; applications is a complex topic, and requires details about the underlying hardware being targeted. Additionally, an allocator is often needed if the application requires a heap.&lt;/p&gt;

&lt;p&gt;This guide focuses on &lt;code&gt;std&lt;/code&gt; projects for RISC-V running Linux. Ockam support for &lt;code&gt;no_std&lt;/code&gt; is an ongoing effort with initial support for several ARM boards. In the future, Ockam &lt;code&gt;no_std&lt;/code&gt; support will be extended to the RISC-V ecosystem.&lt;/p&gt;

&lt;p&gt;Cross compiling for a different processor requires the presence of a toolchain and libraries for that target. There are a variety of ways to cross compile to RISC-V:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use &lt;a href="https://github.com/rust-embedded/cross"&gt;cargo cross&lt;/a&gt;. This is the fastest and easiest way to get started.&lt;/li&gt;
&lt;li&gt;Install cross compiler packages from your OS distribution. Debian for example, has many riscv64 tools.&lt;/li&gt;
&lt;li&gt;Build and install the official &lt;a href="https://github.com/riscv-collab/riscv-gnu-toolchain"&gt;riscv-gnu-toolchain&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#rust-on-riscv-with-cargo-cross"&gt;
  &lt;/a&gt;
  Rust on RISC-V with cargo cross
&lt;/h3&gt;

&lt;p&gt;First, install cross:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;cargo &lt;span class="nb"&gt;install &lt;/span&gt;cross
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Create a new Rust project:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;cargo new &lt;span class="nt"&gt;--bin&lt;/span&gt; ockam_rv
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Add the Ockam dependency to the project's &lt;code&gt;Cargo.toml&lt;/code&gt; dependencies:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight toml"&gt;&lt;code&gt;&lt;span class="nn"&gt;[dependencies]&lt;/span&gt;
&lt;span class="py"&gt;ockam&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"0"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now let's turn &lt;code&gt;main.rs&lt;/code&gt; into an Ockam Node:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;ockam&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nd"&gt;#[ockam::node]&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello, Ockam!"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="nf"&gt;.stop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;code&gt;cross&lt;/code&gt; takes the same arguments as &lt;code&gt;cargo&lt;/code&gt;. To build the project, run:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;cross build &lt;span class="nt"&gt;--target&lt;/span&gt; riscv64gc-unknown-linux-gnu
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This will generate a RISC-V binary in the &lt;code&gt;target/riscv64gc-unknown-linux-gnu/debug/&lt;/code&gt; directory!&lt;/p&gt;

&lt;p&gt;You can also run the project in an emulated environment with &lt;code&gt;cross&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;cross run &lt;span class="nt"&gt;--target&lt;/span&gt; riscv64gc-unknown-linux-gnu
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;You should see output similar to:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Finished dev [unoptimized + debuginfo] target(s) in 0.04s
Running `/linux-runner riscv64 /target/riscv64gc-unknown-linux-gnu/debug/ockam_rv`
2021-11-03T19:52:01.495439Z  INFO ockam_node::node: Initializing ockam node
Hello, Ockam!
2021-11-03T19:52:01.586869Z  INFO ockam_node::context: Shutting down all workers
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;In most cases, &lt;code&gt;cross&lt;/code&gt; is sufficient for cross compiling to RISC-V Linux. However, it does require Docker or Podman.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#hello-ockam"&gt;
  &lt;/a&gt;
  Hello Ockam
&lt;/h3&gt;

&lt;p&gt;Let's create an encrypted secure channel between Alice and Bob. When a message is sent through this channel it will be encrypted when it enters the channel and decrypted just before it exits the channel.&lt;/p&gt;

&lt;p&gt;For the purpose of our example, we'll create a local channel within one program. In our &lt;a href="https://github.com/ockam-network/ockam/tree/develop/documentation/guides/rust#readme"&gt;other examples&lt;/a&gt;, you'll see that it's just as easy to create end-to-end protected channels over multi-hop, multi-protocol transport routes:&lt;/p&gt;

&lt;p&gt;Replace the contents of &lt;code&gt;src/main.rs&lt;/code&gt; with the following code:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;ockam&lt;/span&gt;&lt;span class="p"&gt;::{&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Entity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TrustEveryonePolicy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Vault&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nd"&gt;#[ockam::node]&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// Create a Vault to safely store secret keys for Alice and Bob.&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;vault&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Vault&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c"&gt;// Create an Entity to represent Bob.&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;bob&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Entity&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;vault&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c"&gt;// Create a secure channel listener for Bob that will wait for requests to&lt;/span&gt;
    &lt;span class="c"&gt;// initiate an Authenticated Key Exchange.&lt;/span&gt;
    &lt;span class="n"&gt;bob&lt;/span&gt;&lt;span class="nf"&gt;.create_secure_channel_listener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"bob"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TrustEveryonePolicy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c"&gt;// Create an entity to represent Alice.&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;alice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Entity&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;vault&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c"&gt;// As Alice, connect to Bob's secure channel listener and perform an&lt;/span&gt;
    &lt;span class="c"&gt;// Authenticated Key Exchange to establish an encrypted secure channel with Bob.&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;channel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;alice&lt;/span&gt;&lt;span class="nf"&gt;.create_secure_channel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"bob"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TrustEveryonePolicy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c"&gt;// Send a message, ** THROUGH ** the secure channel,&lt;/span&gt;
    &lt;span class="c"&gt;// to the "app" worker on the other side.&lt;/span&gt;
    &lt;span class="c"&gt;//&lt;/span&gt;
    &lt;span class="c"&gt;// This message will automatically get encrypted when it enters the channel&lt;/span&gt;
    &lt;span class="c"&gt;// and decrypted just before it exits the channel.&lt;/span&gt;
    &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="nf"&gt;.send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nd"&gt;route!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"app"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s"&gt;"Hello Ockam!"&lt;/span&gt;&lt;span class="nf"&gt;.to_string&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c"&gt;// Wait to receive a message for the "app" worker and print it.&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="py"&gt;.receive&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"App Received: {}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c"&gt;// should print "Hello Ockam!"&lt;/span&gt;

    &lt;span class="c"&gt;// Stop all workers, stop the node, cleanup and return.&lt;/span&gt;
    &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="nf"&gt;.stop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;A lot happened when you ran this small example. It created a secure vault, spawned workers to represent entities, established a mutually authenticated channel and then routed a message through that channel. This involved running cryptographic protocols for generating keys, authenticating as an entity, performing an authenticated key exchange and exchanging messages with authenticated encryption.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#rust-on-riscv-with-os-toolchains"&gt;
  &lt;/a&gt;
  Rust on RISC-V with OS toolchains
&lt;/h3&gt;

&lt;p&gt;The process for installing cross-compiling tools differs between OSes and distributions. The primary requirement for building Rust executables for RISC-V is the presence of a RISC-V linker, such as GCC.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For Debian: &lt;code&gt;apt-get install gcc-riscv64-linux-gnu&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;For MacOS: &lt;code&gt;brew tap riscv/riscv &amp;amp;&amp;amp; brew install --cc=gcc-10 riscv-tools&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In your &lt;code&gt;ockam_rv&lt;/code&gt; project, create a &lt;code&gt;.cargo/config.toml&lt;/code&gt; file. In this file, we specify that we're builing for RISC-V&lt;br&gt;
and also configure the location of the linker.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight toml"&gt;&lt;code&gt;&lt;span class="nn"&gt;[build]&lt;/span&gt;
&lt;span class="py"&gt;target&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"riscv64gc-unknown-linux-gnu"&lt;/span&gt;

&lt;span class="nn"&gt;[target.riscv64gc-unknown-linux-gnu]&lt;/span&gt;
&lt;span class="py"&gt;linker&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"/path/to/your/riscv64-unknown-linux-gnu-gcc"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now when you run &lt;code&gt;cargo build&lt;/code&gt;, your local cross-compiling toolchain will be used to link the program, which is available in &lt;code&gt;target/riscv64gc-unknown-linux-gnu/debug&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You can now test this binary in an emulated RISC-V environment, or hardware. It is important to remember that glibc versions can differ between Linux distribution versions. Ensure that your emulated environment has a glibc version equal to or greater than used by your build tools.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#rust-on-riscv-with-the-official-toolchain"&gt;
  &lt;/a&gt;
  Rust on RISC-V with the official toolchain
&lt;/h3&gt;

&lt;p&gt;If packages are not available for RISC-V development on your OS, you may need to clone and build the tools yourself.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Clone the git repo &lt;code&gt;https://github.com/riscv-collab/riscv-gnu-toolchain&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Follow the instructions to install pre-requisites for your system.&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;./configure --prefix=/opt/riscv&lt;/code&gt; - Change the prefix path as appropriate.&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;make linux&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The tools default to building for RV64GC, which is perfect for Rust on RISC-V Linux. When the build is done, you will have &lt;code&gt;/opt/riscv/bin/riscv64-unknown-linux-gnu-gcc&lt;/code&gt; along with other tools and libraries.&lt;/p&gt;

&lt;p&gt;Configure your Cargo project to use this as the linker.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#testing-with-qemu-and-debian"&gt;
  &lt;/a&gt;
  Testing with qemu and Debian
&lt;/h3&gt;

&lt;p&gt;A great way to test RISC-V programs is by using qemu and Debian Quick Image Baker pre-baked images.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Go to &lt;a href="https://people.debian.org/%7Egio/dqib/"&gt;https://people.debian.org/~gio/dqib/&lt;/a&gt; and download &lt;code&gt;Images for riscv64-virt&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Uncompress the downloaded &lt;code&gt;artifacts.zip&lt;/code&gt; file.&lt;/li&gt;
&lt;li&gt;Execute &lt;code&gt;./run.sh&lt;/code&gt; to boot your RISC-V Linux system!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From here, you can either copy binaries into your vm over the local network or mounted filesystem.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#testing-with-qemu-and-buildroot"&gt;
  &lt;/a&gt;
  Testing with qemu and buildroot
&lt;/h3&gt;

&lt;p&gt;Buildroot is also a great way to test RISC-V programs, especially in custom or constrained environments.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Download buildroot or clone from &lt;code&gt;https://github.com/buildroot/buildroot&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;make qemu_riscv64_virt_defconfig&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Either run &lt;code&gt;make&lt;/code&gt; to build the system or &lt;code&gt;make menuconfig&lt;/code&gt; to tweak any settings.&lt;/li&gt;
&lt;li&gt;The resulting system will be built in &lt;code&gt;output/images/&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;./start-qemu.sh&lt;/code&gt; in the &lt;code&gt;output/images&lt;/code&gt; directory.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Like with Debian on qemu, you can copy your test binary over the network, or use any other facility that qemu provides.&lt;/p&gt;

&lt;p&gt;In this example we walked through how to build and run Ockam in Rust for RISC-V Linux. We then looked at how to test these Rust programs with qemu and run them on RISC-V hardware like Microchip Polarfire Icicle kit.&lt;/p&gt;

&lt;p&gt;To learn more, check out our guides on &lt;a href="https://github.com/ockam-network/ockam/tree/develop/documentation/use-cases/end-to-end-encryption-with-rust#readme"&gt;End-to-End Encryption with Rust&lt;/a&gt;.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ockam-network"&gt;
        ockam-network
      &lt;/a&gt; / &lt;a href="https://github.com/ockam-network/ockam"&gt;
        ockam
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      End-to-end encryption and mutual authentication for distributed applications.
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



</description>
      <category>rust</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>programming</category>
    </item>
    <item>
      <title>Docker Commands Everyone Should Know: [Short Note]</title>
      <author>Dhanusha Perera</author>
      <pubDate>Wed, 17 Nov 2021 20:03:19 +0000</pubDate>
      <link>https://dev.to/dhanushaperera07/docker-commands-everyone-should-know-short-note-3m9g</link>
      <guid>https://dev.to/dhanushaperera07/docker-commands-everyone-should-know-short-note-3m9g</guid>
      <description>&lt;h2&gt;
  &lt;a href="#about-this-article"&gt;
  &lt;/a&gt;
  About This Article
&lt;/h2&gt;

&lt;p&gt;This article is a short note of some of the essential Docker commands that I think are useful for beginners.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tip:&lt;/strong&gt; I have created this short note while following the tutorial. I invite you to follow this &lt;a href="https://youtu.be/3c-iBn73dDE"&gt;Docker Tutorial for Beginners [FULL COURSE in 3 Hours]&lt;/a&gt; and subscribe to her channel. She is doing a stunning job.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#docker-commands"&gt;
  &lt;/a&gt;
  Docker Commands
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#pulling-a-docker-container-image"&gt;
  &lt;/a&gt;
  Pulling a docker container image
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;syntax
&lt;span class="gp"&gt;docker pull &amp;lt;docker-image&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="go"&gt;
&lt;/span&gt;&lt;span class="gp"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;example
&lt;span class="go"&gt;docker pull postgres
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pulling-a-specific-version-of-a-docker-container-image"&gt;
  &lt;/a&gt;
  Pulling a specific version of a docker container image
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;syntax
&lt;span class="gp"&gt;docker pull &amp;lt;docker-image&amp;gt;&lt;/span&gt;:&amp;lt;specify-the-version-here&amp;gt;
&lt;span class="go"&gt;
&lt;/span&gt;&lt;span class="gp"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;example
&lt;span class="go"&gt;docker pull postgres:9.6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pulls-the-docker-image-and-runsstarts-the-docker-container-starts-new-container-with-a-command"&gt;
  &lt;/a&gt;
  Pulls the docker image and runs/starts the docker container | starts new container with a command
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;pulls and starts the latest docker image
&lt;span class="go"&gt;docker run postgres  

&lt;/span&gt;&lt;span class="gp"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;or you can specify the version
&lt;span class="go"&gt;docker run postgres:9.6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#to-see-all-the-running-containers-lists-all-the-running-containers"&gt;
  &lt;/a&gt;
  To see all the running containers | lists all the running containers
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;docker ps
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#check-all-the-existing-images-in-the-machine"&gt;
  &lt;/a&gt;
  Check all the &lt;strong&gt;existing images&lt;/strong&gt; in the machine
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;docker images
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-a-new-container-of-an-image"&gt;
  &lt;/a&gt;
  Create a &lt;strong&gt;new&lt;/strong&gt; container of an image
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Tip:&lt;/strong&gt; Please note that &lt;code&gt;run&lt;/code&gt; command deals with Docker Images.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;syntax
&lt;span class="gp"&gt;docker run &amp;lt;docker-image&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="go"&gt;
&lt;/span&gt;&lt;span class="gp"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;example
&lt;span class="go"&gt;docker run redis
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#run-a-container-in-detached-mode"&gt;
  &lt;/a&gt;
  Run a container in detached mode
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Tip:&lt;/strong&gt;  We can get the hashed ID of the container with this command.&lt;br&gt;
&lt;code&gt;--detach&lt;/code&gt; or &lt;code&gt;-d&lt;/code&gt; means detached mode (Run container in background and print container ID)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;docker run -d redis
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#start-and-stop-docker-container-aka-restart-a-container-existing-container"&gt;
  &lt;/a&gt;
  Start and stop docker container | a.k.a restart a container (existing container)
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Tip:&lt;/strong&gt; &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;stop&lt;/code&gt; command deals with existing docker containers.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;For example, you can restart a stopped container.
&lt;span class="gp"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;syntax
&lt;span class="gp"&gt;docker start &amp;lt;hashed-ID-of-the-docker-container&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;For example you can stop a running container.
&lt;span class="gp"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;syntax
&lt;span class="gp"&gt;docker stop &amp;lt;hashed-ID-of-the-docker-container&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lists-running-and-stopped-containers-aka-history-of-running-and-stopped-containers"&gt;
  &lt;/a&gt;
  Lists running and stopped containers | a.k.a history of running and stopped containers
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;docker ps -a
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#binding-ports-between-the-host-and-the-container"&gt;
  &lt;/a&gt;
  Binding ports between the host and the container
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;6000&lt;/code&gt; &lt;br&gt;
: port specified for the host.&lt;br&gt;&lt;br&gt;
&lt;code&gt;6379&lt;/code&gt;&lt;br&gt;
: port of the container.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;since we did not specify a version of redis, it will &lt;span class="nb"&gt;bind &lt;/span&gt;to the latest one available. 
&lt;span class="go"&gt;docker run -p6000:6379 redis
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;starts with the detached mode.
&lt;span class="go"&gt;docker run -p6000:6379 -d redis
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt; &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#binding-ports-between-the-host-and-a-different-version-of-a-container"&gt;
  &lt;/a&gt;
  Binding ports between the host and a different version of a container
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;here I have to specify a different port &lt;span class="k"&gt;for &lt;/span&gt;the host because port 6000 is already bound to to the container &lt;span class="o"&gt;(&lt;/span&gt;redis latest version&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;docker run -p6001:6379 -d redis:4.0
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#debugging-containers"&gt;
  &lt;/a&gt;
  Debugging containers
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#to-see-the-logs-redis-container-is-producing"&gt;
  &lt;/a&gt;
  To see the logs redis container is producing
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;hashed ID of the running container of redis &lt;span class="o"&gt;(&lt;/span&gt;we can get the hashed ID using &lt;span class="sb"&gt;`&lt;/span&gt;docker ps&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;docker logs &amp;lt;hash ID&amp;gt;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;span class="go"&gt;
&lt;/span&gt;&lt;span class="gp"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;or name of the container &lt;span class="o"&gt;(&lt;/span&gt;we can get the name using &lt;span class="sb"&gt;`&lt;/span&gt;docker ps&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;docker logs &amp;lt;name of the container&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt; &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#change-the-name-of-the-container"&gt;
  &lt;/a&gt;
  Change the name of the container
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Tip:&lt;/strong&gt; &lt;code&gt;old-redis-container&lt;/code&gt; is the name I have given for the container.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;docker run -d -p6001:6379 --name old-redis-container redis:4.0
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and,&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tip:&lt;/strong&gt; &lt;code&gt;latest-redis-container&lt;/code&gt; is the name I have given for the container.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;docker run -d -p6000:6379 --name latest-redis-container redis
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt; &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#to-see-the-containers-stuffs"&gt;
  &lt;/a&gt;
  To see the container's stuffs
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;docker exec -it &amp;lt;container hashed ID or container-name&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;/bin/bash
&lt;span class="go"&gt;
&lt;/span&gt;&lt;span class="gp"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;or &lt;span class="o"&gt;(&lt;/span&gt;sometimes &lt;span class="sb"&gt;`&lt;/span&gt;/bin/bash&lt;span class="sb"&gt;`&lt;/span&gt; will not work&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;docker exec -it &amp;lt;container hashed ID or container-name&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;/bin/sh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;-it&lt;/code&gt; means 'Interacting Terminal'. We can use this terminal to interact with the container and see what is going on with the root access.&lt;/li&gt;
&lt;li&gt;We can use some basic commands too, for example: &lt;code&gt;ls&lt;/code&gt;, &lt;code&gt;pwd&lt;/code&gt;, &lt;code&gt;env&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;To exist from the container we can type &lt;code&gt;exist&lt;/code&gt; command.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#docker-network-commands"&gt;
  &lt;/a&gt;
  Docker Network Commands
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#list-out-all-the-docker-networks"&gt;
  &lt;/a&gt;
  List out all the docker networks
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;docker network ls
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-a-docker-network"&gt;
  &lt;/a&gt;
  Create a Docker Network
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;docker network create &amp;lt;name-of-the-network&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="go"&gt;
&lt;/span&gt;&lt;span class="gp"&gt;#&lt;/span&gt;example
&lt;span class="go"&gt;docker network create mongo-network
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lets-connect-mongo-and-mongoexpress"&gt;
  &lt;/a&gt;
  Let's connect mongo and mongo-express
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Let's deal with MongoDB. Following command will start the mongo container.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker run -d \                                 ---&amp;gt; We are going to start the container in detached mode.
-p:27017:27017 \                                ---&amp;gt; Binding ports for host and container (specifying ports).
-e MONGO_INITDB_ROOT_USERNAME=mongoadmin \      ---&amp;gt; Environment variable for username.
-e MONGO_INITDB_ROOT_PASSWORD=secret \          ---&amp;gt; Environment variable for password.
--name my_mongodb_container \                   ---&amp;gt; Gives a name to mongo container, ex: `my_mongodb_container`.
--network mongo-network \                       ---&amp;gt; Specifying the docker network. `mongo-network`
mongo

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;docker logs &amp;lt;hashed ID of the container&amp;gt;&lt;/code&gt; ---&amp;gt; We can check the logs to see if the Mongo container works properly.&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;Let's deal with Mongo-express. Following command will start the mongo-express container.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
docker run -d \                                         ---&amp;gt; We are going to start the container in detached mode.
 -p 8081:8081 \                                         ---&amp;gt; Binding ports for host and container (specifying ports).
-e ME_CONFIG_MONGODB_ADMINUSERNAME=mongoadmin \         ---&amp;gt; username
-e ME_CONFIG_MONGODB_ADMINPASSWORD=secret \             ---&amp;gt; password
-e ME_CONFIG_MONGODB_SERVER=my_mongodb_container \      ---&amp;gt; Name of the Mongo container.
--name my_mongo_express_container \                     ---&amp;gt; Gives a name to mongo container, ex: `my_mongo_express_container`.
--network mongo-network \                               ---&amp;gt; Specifying the docker network. ex: `mongo-network`.
mongo-express

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;docker logs &amp;lt;hashed ID of the container&amp;gt;&lt;/code&gt; ---&amp;gt; We can check the logs to see if the Mongo-express container works properly.&lt;/li&gt;
&lt;li&gt;We can also open up the web browser, and check mongo-express by opening &lt;code&gt;http://localhost:8081&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#more-with-logs"&gt;
  &lt;/a&gt;
  More with logs
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#display-the-last-part-of-the-log"&gt;
  &lt;/a&gt;
  Display the last part of the log.
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;docker logs &amp;lt;hashID-of-the-container&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;| &lt;span class="nb"&gt;tail&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#we-can-get-the-logs-then-we-can-make-a-line-then-we-can-see-the-new-logs-clearly-below-that-line"&gt;
  &lt;/a&gt;
  We can get the logs, then we can make a "-----------" line, then we can see the new logs clearly below that line.
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;docker logs -f
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#docker-compose"&gt;
  &lt;/a&gt;
  Docker Compose
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;It is exhausting to run commands when you want to run multiple containers.&lt;/li&gt;
&lt;li&gt;Docker Compose is a tool for defining and running multi-container Docker applications.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#docker-compose-file"&gt;
  &lt;/a&gt;
  Docker compose file.
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# docker-compose.yml file&lt;/span&gt;
&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;3"&lt;/span&gt;
&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;my_mongodb_container&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;mongo"&lt;/span&gt;
        &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;27017:27017"&lt;/span&gt;
        &lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;MONGO_INITDB_ROOT_USERNAME=admin&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;MONGO_INITDB_ROOT_PASSWORD=password&lt;/span&gt;

    &lt;span class="na"&gt;my_mongo_express_container&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;mongo-express"&lt;/span&gt;
        &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; 
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;8081:8081"&lt;/span&gt;
        &lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;ME_CONFIG_MONGODB_ADMINUSERNAME=admin&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;ME_CONFIG_MONGODB_ADMINPASSWORD=password&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;ME_CONFIG_MONGODB_SERVER=my_mongodb_container&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Here docker compose takes care of creating a common network. &lt;/li&gt;
&lt;li&gt;We do not have to worry about specifying and creating a network like we did in the command (like this &lt;code&gt;--network&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-run-the-docker-compose-file"&gt;
  &lt;/a&gt;
  How to run the docker compose file.
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Assume that &lt;code&gt;docker-compose.yml&lt;/code&gt; file is in the project directory.
&lt;/li&gt;
&lt;li&gt;Let's open up the terminal (from your project directory) and type following command.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;  docker-compose -f docker-compose.yml up
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-stop-the-docker-containers-using-dockercompose-file"&gt;
  &lt;/a&gt;
  How to stop the docker containers using docker-compose file.
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;To stop the docker containers type following command.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Please note that following command will also remove the docker network which created when we run the &lt;code&gt;docker-compose.yml&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;docker-compose -f docker-compose.yml down
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#docker-file"&gt;
  &lt;/a&gt;
  Docker file
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;It is a blueprint for building docker images.&lt;/li&gt;
&lt;li&gt;All the commands that are in the dockerfile will apply to the docker container environment.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="c"&gt;# save the file as a simple text file. File name should be `Dockerfile`&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; node&lt;/span&gt;

&lt;span class="k"&gt;ENV&lt;/span&gt;&lt;span class="s"&gt; MONGO_DB_USERNAME=admin \&lt;/span&gt;
    MONGO_DB_PWD=password

&lt;span class="k"&gt;RUN &lt;/span&gt;&lt;span class="nb"&gt;mkdir&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; /home/app

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; ./home/app&lt;/span&gt;

&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; ["node", "/home/app/server.js"]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-build-the-docker-image-using-dockerfile"&gt;
  &lt;/a&gt;
  How to build the Docker Image using Dockerfile
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;To create the Docker Image, type following command.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;syntax
&lt;span class="gp"&gt;docker build -t &amp;lt;name-of-the-image:tag&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;location-of-the-Dockerfile&amp;gt;
&lt;span class="go"&gt;
&lt;/span&gt;&lt;span class="gp"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;example
&lt;span class="go"&gt;docker build -t my-app:1.0 .
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lets-run-docker-image-that-we-have-created-with"&gt;
  &lt;/a&gt;
  Let's run Docker Image that we have created with
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;docker run my-app:1.0
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-delete-a-docker-image"&gt;
  &lt;/a&gt;
  How to delete a Docker Image
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Delete the &lt;code&gt;my-app&lt;/code&gt; Docker Container.&lt;/li&gt;
&lt;li&gt;Delete the &lt;code&gt;my-app&lt;/code&gt; Docker Image.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;let&lt;/span&gt;&lt;span class="s1"&gt;'s list the Docker Images in the machine.
&lt;/span&gt;&lt;span class="go"&gt;docker images

&lt;/span&gt;&lt;span class="gp"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;let&lt;/span&gt;&lt;span class="s1"&gt;'s list all the docker containers (history).
&lt;/span&gt;&lt;span class="go"&gt;docker ps -a

&lt;/span&gt;&lt;span class="gp"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;let&lt;/span&gt;&lt;span class="s1"&gt;'s find out what Docker Container do we have to delete in order to delete the `my-app` Docker Image.
&lt;/span&gt;&lt;span class="go"&gt;docker ps -a | grep my-app:1.0

&lt;/span&gt;&lt;span class="gp"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;let&lt;/span&gt;&lt;span class="s1"&gt;'s delete the Docker Container before we delete `my-app` Docker Image
&lt;/span&gt;&lt;span class="gp"&gt;docker rmi &amp;lt;hashedID-of-the-docker-container&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="go"&gt;
&lt;/span&gt;&lt;span class="gp"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;then&lt;/span&gt;, we can remove the Docker Image using the hashID
&lt;span class="gp"&gt;docker rmi &amp;lt;hashID-of-the-image&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="go"&gt;
&lt;/span&gt;&lt;span class="gp"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Now, when we list down all the images, we &lt;span class="k"&gt;do &lt;/span&gt;not see the Docker Image.
&lt;span class="go"&gt;docker images

&lt;/span&gt;&lt;span class="gp"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;Optional Step] Then, &lt;span class="k"&gt;if &lt;/span&gt;we want to rebuild the Docker Image
&lt;span class="go"&gt;docker build -t my-app:1.0 .

&lt;/span&gt;&lt;span class="gp"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;Optional Step] After building successful, we can run our docker image
&lt;span class="go"&gt;docker run my-app
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>docker</category>
      <category>devops</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Meta Programming Rails Test</title>
      <author>gardnerapp</author>
      <pubDate>Wed, 17 Nov 2021 19:55:52 +0000</pubDate>
      <link>https://dev.to/coreyscorner/meta-programming-rails-test-30cn</link>
      <guid>https://dev.to/coreyscorner/meta-programming-rails-test-30cn</guid>
      <description>&lt;p&gt;Over the lifecycle of application development people tend to procrastinate or blow off writing test. I’m sure that many new engineers, like my former self, feel that writing test is not important and that it can even be cumbersome to actually getting a product shipped. On top of all that testing is easy to forget about because it can be very boring and repetitive. Luckily in this series we’re going to challenge ourselves and make writing test fun by Meta Programming them.&lt;/p&gt;

&lt;p&gt;In a professional environment you need to have test in order to properly refactor your code and ensure that your application does break in the event that you need to update the language or framework that it runs on.&lt;/p&gt;

&lt;p&gt;Imagine if you have to upgrade your app to Rails 7 and Ruby 3.0. If you haven’t written any test than only way for you to ensure that your application is working properly is testing it by hand, tediously going through every page and searching through every link and input form. This would be awful, luckily we can write test which automates the entire process for us.&lt;/p&gt;

&lt;p&gt;The process of editing code is known as refactoring. Often we want to change the form of our code (what it looks like) without changing its function (what it does).&lt;/p&gt;

&lt;p&gt;There’s a lot of different ways to do the same thing, you might write some decent code and then come back with some fantastic code the next day and decide to change things up. Testing is perfect in this type of scenario because it ensures that our program achieves the desired output no matter what it looks like.&lt;/p&gt;

&lt;p&gt;Luckily with the Ruby language we can Meta Program our test ie. write code that writes test. This rapidly decreases the amount of time we need to spend on writing test and makes testing our applications a whole lot more interesting. On top of all that our test take up far fewer lines of code when we choose to utilize Meta Programming. Alright, lets get to the fun part !&lt;br&gt;
The Lame Way Of Testing Model Validations&lt;/p&gt;

&lt;p&gt;Lets assume we have a model called Restaurant which has a few attributes: name, address, phone number, category, and closing time. We want all of these attributes to be required for our model to be valid. Typically we’d do something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#... /models/restaurant.rb
class Restaurant &amp;lt; ApplicationRecordvalidates :name, presence: true
validates :address, presence: true
validates :phone_number, presence: true
validates :category, presence: true
validates :closing_time, presence: trueend # 5 lines of code 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our model test file would look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#... test/models/restaurant_test.rbclass RestaurantTest &amp;lt; ActiveSupport::TestCase
   def setup
      @restaurant = restaurants :first
   end    test 'Name should be present' do
      @restaurant.name = nil 
      assert_not @restaurant.valid?
   end   test 'Address should be present' do
      @restaurant.address = nil 
      assert_not @restaurant.valid?
   end   test 'Phone Number should be present' do
      @restaurant.phone_number = nil 
      assert_not @restaurant.valid?
   end   test 'Category should be present' do
      @restaurant.category = nil 
      assert_not @restaurant.valid?
   end   test 'Closing Time should be present' do
      @restaurant.closing_time = nil 
      assert_not @restaurant.valid?
   end
end # 4 lines of code per attribute test, 5 attributes 5*4 = 20 lines
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To write and test a simple presence validation we have to write 5 lines of code, 1 line for the validation and another 4 for testing it. Presence validations are one of the easiest things to write &amp;amp; test but they still require a lot of code, and they are very boring to write.&lt;/p&gt;

&lt;p&gt;If you had 5 models with 5 attributed each you’d have to write 125 lines of code 😤 🤕 😠. Who in their right mind wants to write or look through all that boring code and repetitive code? If your running a startup do you really want to be using your engineers time and attention on this?&lt;/p&gt;

&lt;p&gt;So how can we make our lives easier, use our time more wisely, write less code, make more money and make testing more interesting all in one swoop.&lt;/p&gt;

&lt;p&gt;TDD + Meta Programming: A Dynamic Duo&lt;/p&gt;

&lt;p&gt;We’ll take a Test Driven Development approach by writing failing test and refactoring our application code until our test are green. If you noticed before all of our test followed a similar pattern or formula (summarized below). Every test name is prefixed with the name of the attribute, the attribute is then set to nil on our instance variable and lastly we assert that our variable is not valid with it’s null attribute.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;test 'attribute is present' do
   @restaurant.attribute = nil 
   assert_not @restaurant.valid?
end
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let’s start by creating a list of all the attributes that must be present. We’ll then use the each method to loop over each attribute, passing in a block which is where the actual testing happens. Naming the test is simple enough all we have to do is use string interpolation.&lt;/p&gt;

&lt;p&gt;So, how do we set the attribute(s) on our instance variable to nil ? Originally I thought of using the send method but that made zero sense. I was about to give up but then I realized that the Ruby Kernel method eval will evaluate a string as if it were a piece Ruby code, thus we’re able to treat data as code.&lt;/p&gt;

&lt;p&gt;My final test(s) looked like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#... test/models/restaurant_test.rb%i[name phone_number address category closing_time].each do |attr|
   test "#{attr} must be present" do 
      eval "@restaurant.#{attr} = nil"
      assert_not @restaurant.valid?
   end
end# 6 lines of code 70% reduction in code volume ;)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this point our test should be red. Because model validations are so repetitive they are a clear candidate for being meta programming. Once again we’ll loop over a list of symbols, inside of the block we’ll use eval and the validates_presence_of helper to run the validations. The code is as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#... /models/restaurant.rb%i[name phone_number address category closing_time].each do |attr|
     eval "validates_presence_of #{attr}"
end # 3 lines of code 60% reduction in code volume
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Conclusion&lt;/p&gt;

&lt;p&gt;Meta Programming is a practice where you write code that writes code, essentially we’re automating programming. Any time that we’re writing repetitive or pseudo similar code is a sign that we can use Meta Programming to keep things DRY.&lt;/p&gt;

&lt;p&gt;Meta Programming allows us to write more code at a faster rate with less lines of code. This makes our programs easier to read, write and debug. In a professional developer that can utilize Meta Programming properly will be able to get more done in less time. By Meta Programming my model validations and their test I was able to achieve a 60–70% reduction in code volume.&lt;/p&gt;

&lt;p&gt;To learn more about Meta Programming be sure to check out my Beginners Ruby Meta Programming Tutorial, the Advanced Meta Programming Tutorial and the Meta Programming a Ruby on Rails E-Commerce Application. And don’t forget to listen to Corey’s Corner, Thanks !&lt;/p&gt;

&lt;p&gt;Corey’s Corner Podcast: &lt;a href="https://anchor.fm/coreys-corner"&gt;https://anchor.fm/coreys-corner&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Gardner App Development: &lt;a href="https://gardnerappdev.com"&gt;https://gardnerappdev.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Get Yoked 🍳 &lt;a href="https://thoughtsandfitness.com"&gt;https://thoughtsandfitness.com&lt;/a&gt;&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
      <category>webdev</category>
      <category>testing</category>
    </item>
    <item>
      <title>Introducing Gelato Ops: Web3’s Multi-Chain Smart Contract Automation Hub</title>
      <author>Gelato Network</author>
      <pubDate>Wed, 17 Nov 2021 19:45:09 +0000</pubDate>
      <link>https://dev.to/gelato/introducing-gelato-ops-web3s-multi-chain-smart-contract-automation-hub-4418</link>
      <guid>https://dev.to/gelato/introducing-gelato-ops-web3s-multi-chain-smart-contract-automation-hub-4418</guid>
      <description>&lt;p&gt;TL;DR:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://app.gelato.network/"&gt;Gelato Ops&lt;/a&gt; enables web3 developers to automate tasks via an easy-to-use interface&lt;/li&gt;
&lt;li&gt;Example use cases that are already live include: harvesting yield vaults every day, paying out rewards daily, topping up contract balances, or petting Aavegotchis every 12 hours&lt;/li&gt;
&lt;li&gt;0% fees until the end of 2021&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Using Gelato Ops, developers can input the contract address and function they want to automate, when they want to automate it, and how they will pay for it. Having submitted this information as a “task”, it will be picked up by Gelato Executors and executed at the right time. Developers can monitor past transactions, manage their budget, and debug their tasks. Payments can be in the network token (ETH, MATIC, or FTM) and soon with other tokens, including DAI or USDC. &lt;/p&gt;

&lt;h1&gt;Successful Gelato Ops Beta&lt;/h1&gt;

&lt;p&gt;Gelato Ops is already in use by some of the most innovative projects in DeFi, NFTs, and gaming:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://medium.com/gelato-network/harvesting-in-peace-qi-dao-and-gelato-partner-to-auto-compound-yields-ed76cead8ea5"&gt;QiDAO&lt;/a&gt; for harvesting rewards and compounding them daily&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://medium.com/gelato-network/b-protocol-integrates-gelato-to-maintain-liquidation-system-c5471a95f5f5"&gt;B.Protocol&lt;/a&gt; for executing arbitrage trades&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://medium.com/gelato-network/unicly-and-gelato-work-together-to-automate-the-distribution-of-rewards-f231fbe94524"&gt;Unicly&lt;/a&gt; for creating and distributing daily rewards to stakers&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://medium.com/gelato-network/parcel-integrates-gelato-to-offer-automated-recurring-payouts-to-dao-treasury-managers-eb77bfb3a7b8"&gt;Parcel&lt;/a&gt; for automating salary payouts for DAOs&lt;/li&gt;
&lt;li&gt;Staking Facilities for topping up different addresses once they go below a certain threshold&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://medium.com/gelato-network/etha-lend-utilizes-gelato-automation-to-optimize-yields-on-polygon-647217df75d0"&gt;ETHA Lend&lt;/a&gt; for harvesting their vaults&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://programmablewealth.com/how-to-automate-aavegotchi-petting-with-pet-operator-and-gelato/"&gt;GotchiCare&lt;/a&gt; for petting Aavegotchi NFTs every 12 hours&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Plus many more awesome projects…&lt;/p&gt;

&lt;p&gt;Instead of manually triggering functions or having to build and monitor their own bot infrastructure, developers can rely on Gelato Ops to automate any arbitrary task on most EVM-based blockchains. Gelato Ops will be live on Ethereum, Polygon, Fantom, and Arbitrum — with more networks to come.&lt;/p&gt;

&lt;p&gt;Check out the video on &lt;a href="https://www.youtube.com/watch?v=YQGRIT8aV5c"&gt;YouTube&lt;/a&gt; and read the &lt;a href="https://docs.gelato.network/guides/create-a-task"&gt;tutorial&lt;/a&gt; on how you can create tasks on the Gelato Ops. &lt;/p&gt;

&lt;p&gt;--&lt;br&gt;
Docs: &lt;a href="https://docs.gelato.network/"&gt;https://docs.gelato.network/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>automation</category>
      <category>defi</category>
      <category>tooling</category>
      <category>nft</category>
    </item>
    <item>
      <title>Do you still work with jQuery?</title>
      <author>Ben Halpern</author>
      <pubDate>Wed, 17 Nov 2021 19:43:40 +0000</pubDate>
      <link>https://dev.to/ben/do-you-still-work-with-jquery-4o3g</link>
      <guid>https://dev.to/ben/do-you-still-work-with-jquery-4o3g</guid>
      <description>&lt;p&gt;For folks who still work with jQuery, for personal or professional projects, what is the overall context of this work? Do you expect this to be refactored at any point?&lt;/p&gt;

</description>
      <category>jquery</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>discuss</category>
    </item>
    <item>
      <title>CalinixOS Alpha 5 Stable Release</title>
      <author>Arghya Sarkar</author>
      <pubDate>Wed, 17 Nov 2021 19:27:25 +0000</pubDate>
      <link>https://dev.to/arghyasarkar/calinixos-alpha-5-stable-release-5898</link>
      <guid>https://dev.to/arghyasarkar/calinixos-alpha-5-stable-release-5898</guid>
      <description>&lt;p&gt;I'm Arghya Sarkar the lead developer of Calinix, and these are the recent updates of CalinixOS&lt;/p&gt;

&lt;p&gt;If you haven't seen my previous article, check out&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/arghyasarkar/a-modern-os-for-the-power-user-2koe"&gt;https://dev.to/arghyasarkar/a-modern-os-for-the-power-user-2koe&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There I explained what Calinix is. We've come a long way since then, and have released our &lt;a href="https://github.com/Calinix-Team/Calinix-Arch/releases/tag/0.5-M"&gt;Alpha 5 Stable release&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The stable release fixes all the Bugs that were discovered in the whole series of Alpha 5 Releases. &lt;/p&gt;

&lt;p&gt;Our releases currently are made in the following way:&lt;/p&gt;

&lt;p&gt;Each Alpha series goes through 10 levels of testing, and the usual stable release (after 10 tests) is expected to have least bugs/no bugs.&lt;/p&gt;

&lt;p&gt;Currently we are testing our Alpha 6-4 release (4th testing of Alpha 6)&lt;/p&gt;

&lt;p&gt;The Alpha 6 stable release will go through half a month of testing for bugs and stuff then only released&lt;/p&gt;

&lt;p&gt;This helps us stay stable and reliable. We even have a bunch of tutorials in our YouTube channel for CalinixOS. You can join our discord server for support too, we have an active support team there, including me myself.&lt;/p&gt;

&lt;p&gt;So let's come to Alpha 5 Stable release&lt;/p&gt;

&lt;p&gt;The Alpha 5 Stable release is tagnamed "0.5-M". After 10 releases, we announced our first stable release.&lt;/p&gt;

&lt;p&gt;The changes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;As its the starting, basically the whole desktop was made in this series of testing. Wallpapers were switched, &lt;a href="https://github.com/Shravan-1908/iris/"&gt;iris&lt;/a&gt; is currently non existent in Alpha 5 Stable (coming in Alpha 6 Stable)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bugfixes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Added VirtualBox auto scaling.&lt;/li&gt;
&lt;li&gt;Fixed Alacritty&lt;/li&gt;
&lt;li&gt;Fixed Picom Non Composition Issue&lt;/li&gt;
&lt;li&gt;Added netinstall in Calamares&lt;/li&gt;
&lt;li&gt;Redesigned Calamares&lt;/li&gt;
&lt;li&gt;Lessened the number of unnecessary packages&lt;/li&gt;
&lt;li&gt;Changed Default Filesystem to BTRFS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bugs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Some calamares errors (fixed in Alpha 6-4)&lt;/li&gt;
&lt;li&gt;Netinstall Fails (removed in Alpha 6-3)&lt;/li&gt;
&lt;li&gt;Iris doesn't work (Fixed in Alpha 6-1)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hold your excitement till CalinixOS Alpha 6 Stable release!! For a more beautiful desktop experience.&lt;/p&gt;

&lt;p&gt;This was it about 0.5-M release of Calinix. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#download-calinix-alpha-5-stable"&gt;
  &lt;/a&gt;
  Download Calinix Alpha 5 Stable
&lt;/h3&gt;

&lt;p&gt;Grab the latest ISO from here:&lt;br&gt;
&lt;a href="https://drive.google.com/file/d/1U8eTFyoYxjzBLMUtMoEzBDAFUp3rNR3g/view?usp=sharing"&gt;https://drive.google.com/file/d/1U8eTFyoYxjzBLMUtMoEzBDAFUp3rNR3g/view?usp=sharing&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE: If you are running it in a VM, kill picom compositor at first to experience smooth performance&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Live Boot Details:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Username&lt;/strong&gt;: calinix&lt;br&gt;
&lt;strong&gt;Password&lt;/strong&gt;: calinix&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#contact-us"&gt;
  &lt;/a&gt;
  Contact Us
&lt;/h3&gt;

&lt;p&gt;Github: &lt;a href="https://github.com/Calinix-Team/"&gt;https://github.com/Calinix-Team/&lt;/a&gt;&lt;br&gt;
Official website: &lt;a href="https://get.calinix.tech"&gt;https://get.calinix.tech&lt;/a&gt; (under development)&lt;br&gt;
Discord (Our main support channel): &lt;a href="https://tinyurl.com/calinixdisc"&gt;https://tinyurl.com/calinixdisc&lt;/a&gt;&lt;br&gt;
Forum: &lt;a href="https://calinixos.forummotion.com"&gt;https://calinixos.forummotion.com&lt;/a&gt;&lt;br&gt;
Reddit: &lt;a href="https://reddit.com/r/CalinixOS"&gt;https://reddit.com/r/CalinixOS&lt;/a&gt;&lt;br&gt;
Contact Mail: &lt;a href="mailto:contact@calinix.tech"&gt;contact@calinix.tech&lt;/a&gt;&lt;br&gt;
Sourceforge: &lt;a href="https://calinixos.sourceforge.net"&gt;https://calinixos.sourceforge.net&lt;/a&gt;&lt;br&gt;
Official Blog: &lt;a href="https://calinixos.blogspot.com"&gt;https://calinixos.blogspot.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Discovered more bugs? File an issue in the &lt;a href="https://github.com/Calinix-Team/Calinix-Arch"&gt;GitHub Repository&lt;/a&gt;, or report in our discord server.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE : We've decided to move the Calinix ISO distribution to sourceforge. The Alpha 5 Stable release will deprecate as soon as Alpha 6 is released as Alpha 5 Stable is hosted in google Drive.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Calinix is supposed to release it's first major release sometime in 2021-2022, make sure to show some support by starring the repo and make sure to press on the "Watch" button so you don't miss any updates.&lt;/p&gt;

&lt;p&gt;We would greatly appreciate any contributions, so if you find something that you can improve it, open a pull-request! You can also check out our open issues&lt;/p&gt;

</description>
      <category>calinix</category>
      <category>linux</category>
      <category>systems</category>
      <category>archlinux</category>
    </item>
    <item>
      <title>Improving overconstrained Rust library APIs</title>
      <author>Matt Angelosanto</author>
      <pubDate>Wed, 17 Nov 2021 19:25:47 +0000</pubDate>
      <link>https://dev.to/logrocket/improving-overconstrained-rust-library-apis-47ok</link>
      <guid>https://dev.to/logrocket/improving-overconstrained-rust-library-apis-47ok</guid>
      <description>&lt;p&gt;&lt;strong&gt;Written by &lt;a href="https://blog.logrocket.com/author/andrebogus/"&gt;Andre Bogus&lt;/a&gt;&lt;/strong&gt; ✏️&lt;/p&gt;

&lt;p&gt;In one of my earlier posts, “&lt;a href="https://blog.logrocket.com/how-to-write-crap-rust-code"&gt;How to write CRaP Rust code&lt;/a&gt;,” I warned you about overusing generics. And for a binary crate or an initial version of any code, that is still a good idea.&lt;/p&gt;

&lt;p&gt;However, when designing Rust library crate APIs, you can often use generics to good effect: being more lenient with our inputs may offer the caller the chance to avoid some allocations or otherwise find a different representation of the input data that suits them better.&lt;/p&gt;

&lt;p&gt;In this guide, we’ll demonstrate how to make Rust library APIs more lenient without losing any functionality. But before we start, let’s examine the possible downsides of doing this.&lt;/p&gt;

&lt;p&gt;First, generic functions offer the type system less information about what is what. If what was a concrete type now becomes an &lt;code&gt;impl&lt;/code&gt;, the compiler will have a harder time inferring the types of each expression (and will probably fail more often). This may require your users to add more type annotations to get their code to compile, leading to arguably worse ergonomics.&lt;/p&gt;

&lt;p&gt;Also, by specifying one concrete type, we get exactly one version of our function compiled into the resulting code. With generics, we either pay with dynamic dispatch's runtime cost or risk bloating the binary with multiple versions by choosing &lt;a href="https://en.wikipedia.org/wiki/Monomorphization"&gt;monomorphization&lt;/a&gt; — in Rust lingo, we choose &lt;code&gt;dyn Trait&lt;/code&gt; vs. &lt;code&gt;impl Trait&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Which point on the tradeoff you choose depends mostly on the use case. Note that dynamic dispatch has some runtime cost, but code bloat will also increase cache misses and thus can negatively affect performance. As always, measure twice, code once.&lt;/p&gt;

&lt;p&gt;Even so, there are some rules of thumb you can follow for all public methods.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-slice-of-traits"&gt;
  &lt;/a&gt;
  A slice of traits
&lt;/h2&gt;

&lt;p&gt;Take a slice (&lt;code&gt;&amp;amp;[T]&lt;/code&gt;) instead of a &lt;code&gt;&amp;amp;Vec&amp;lt;T&amp;gt;&lt;/code&gt; if you can (that one actually has a &lt;a href="https://rust-lang.github.io/rust-clippy/master/index.html#ptr_arg"&gt;clippy lint&lt;/a&gt;). Your callers may use a &lt;a href="https://doc.rust-lang.org/std/collections/struct.VecDeque.html"&gt;&lt;code&gt;VecDeque&lt;/code&gt;&lt;/a&gt;, which has a &lt;a href="https://doc.rust-lang.org/std/collections/struct.VecDeque.html#method.make_contiguous"&gt;&lt;code&gt;.make_continuous()&lt;/code&gt;&lt;/a&gt; method that returns a &lt;code&gt;&amp;amp;mut [T]&lt;/code&gt;) instead of a &lt;a href="https://doc.rust-lang.org/std/vec/struct.Vec.html"&gt;&lt;code&gt;Vec&lt;/code&gt;&lt;/a&gt;, or perhaps an array.&lt;/p&gt;

&lt;p&gt;If you can also take two slices, &lt;a href="https://doc.rust-lang.org/std/collections/struct.VecDeque.html#method.as_slices"&gt;&lt;code&gt;VecDeque::as_slices&lt;/code&gt;&lt;/a&gt; can work for your users without moving any values. You will, of course, still need to know your use case to decide whether that's worth it.&lt;/p&gt;

&lt;p&gt;If you only dereference your slice elements, you can use &lt;code&gt;&amp;amp;[impl Deref&amp;lt;Target = T&amp;gt;]&lt;/code&gt;. Note that besides &lt;a href="https://doc.rust-lang.org/std/ops/trait.Deref.html"&gt;&lt;code&gt;Deref&lt;/code&gt;&lt;/a&gt;, there is also the &lt;a href="https://doc.rust-lang.org/std/convert/trait.AsRef.html"&gt;&lt;code&gt;AsRef&lt;/code&gt;&lt;/a&gt; trait, which is quite often used in path handling, because &lt;code&gt;std&lt;/code&gt; methods may take an &lt;code&gt;AsRef&amp;lt;T&amp;gt;&lt;/code&gt; for a cheap reference conversion.&lt;/p&gt;

&lt;p&gt;For example, if you’re taking a set of file paths, &lt;code&gt;&amp;amp;[impl AsRef&amp;lt;Target = Path&amp;gt;]&lt;/code&gt; will work with far more types than &lt;code&gt;&amp;amp;[String]&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;run_tests&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nn"&gt;compiletest&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;filters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;tests&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nn"&gt;tester&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;TestDescAndFn&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;io&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="c"&gt;// much code omitted for brevity&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;filter&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;filters&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;dir_path&lt;/span&gt;&lt;span class="nf"&gt;.ends_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;*&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c"&gt;// etc.&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c"&gt;// ..&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above might be expressed as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;run_tests&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nn"&gt;compiletest&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;filters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;impl&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;convert&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;AsRef&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;tests&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nn"&gt;tester&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;TestDescAndFn&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;io&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
&lt;span class="c"&gt;// ..&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now &lt;code&gt;filters&lt;/code&gt; could be a slice of &lt;code&gt;String&lt;/code&gt;, &lt;code&gt;&amp;amp;str&lt;/code&gt;, or even &lt;code&gt;Cow&amp;lt;'_, OsStr&amp;gt;&lt;/code&gt;. For mutable types, there is &lt;a href="https://doc.rust-lang.org/std/convert/trait.AsMut.html"&gt;&lt;code&gt;AsMut&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;. Similarly, if we require that any reference to &lt;code&gt;T&lt;/code&gt; works the same as &lt;code&gt;T&lt;/code&gt; itself in terms of equality, order and hashing, we can use &lt;a href="https://doc.rust-lang.org/std/borrow/trait.Borrow.html"&gt;&lt;code&gt;Borrow&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; / &lt;a href="https://doc.rust-lang.org/std/borrow/trait.BorrowMut.html"&gt;&lt;code&gt;BorrowMut&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; instead.&lt;/p&gt;

&lt;p&gt;What does that even mean? It means that types implementing &lt;code&gt;Borrow&lt;/code&gt; must guarantee that &lt;code&gt;a.borrow() == b.borrow()&lt;/code&gt;, &lt;code&gt;a.borrow() &amp;lt; b.borrow()&lt;/code&gt; and &lt;code&gt;a.borrow().hash()&lt;/code&gt; return the same as &lt;code&gt;a == b&lt;/code&gt;, &lt;code&gt;a &amp;lt; b&lt;/code&gt; and &lt;code&gt;a.hash()&lt;/code&gt; if the type in question implements &lt;a href="https://doc.rust-lang.org/std/cmp/trait.Eq.html"&gt;&lt;code&gt;Eq&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://doc.rust-lang.org/std/cmp/trait.Ord.html"&gt;&lt;code&gt;Ord&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://doc.rust-lang.org/std/hash/trait.Hash.html"&gt;&lt;code&gt;Hash&lt;/code&gt;&lt;/a&gt;, respectively.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-reiterate"&gt;
  &lt;/a&gt;
  Let’s re-iterate
&lt;/h2&gt;

&lt;p&gt;Similarly, if you only iterate over the bytes of a &lt;code&gt;str&lt;/code&gt;ing slice, unless your code somehow requires the UTF-8-ness that &lt;code&gt;str&lt;/code&gt; and &lt;code&gt;String&lt;/code&gt; guarantee to work correctly, you can simply take an &lt;code&gt;AsRef&amp;lt;[u8]&amp;gt;&lt;/code&gt; argument.&lt;/p&gt;

&lt;p&gt;In general, if you only iterate once, you can even take either an &lt;a href="https://doc.rust-lang.org/std/iter/trait.Iterator.html"&gt;&lt;code&gt;Iterator&amp;lt;Item = T&amp;gt;&lt;/code&gt;&lt;/a&gt;. This allows your users to supply their own iterators which may use non-continuous slices of memory, intersperse other operations with your code or even calculate your inputs on the fly. Doing this, you don't even need to make the item type generic, because the iterator can usually easily produce a &lt;code&gt;T&lt;/code&gt; if one is needed.&lt;/p&gt;

&lt;p&gt;In effect, you can use an &lt;code&gt;impl Iterator&amp;lt;Item = impl Deref&amp;lt;Target = T&amp;gt;&amp;gt;&lt;/code&gt; if your code iterates only once; use a slice or two if you need the items more than once. If your iterator returns owned items, such as the recently added array &lt;code&gt;IntoIterator&lt;/code&gt;s, you can forgo the &lt;code&gt;impl Deref&lt;/code&gt; and use &lt;code&gt;impl Iterator&amp;lt;Item = T&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Unfortunately, &lt;code&gt;IntoIterator&lt;/code&gt;'s &lt;code&gt;into_iter&lt;/code&gt; will consume &lt;code&gt;self&lt;/code&gt;, so there's no generic way to take an iterator that lets us iterate multiple times — unless, perhaps, taking an argument of &lt;code&gt;impl Iterator&amp;lt;_&amp;gt; + Clone&lt;/code&gt;, but that &lt;a href="https://doc.rust-lang.org/std/clone/trait.Clone.html"&gt;&lt;code&gt;Clone&lt;/code&gt;&lt;/a&gt; operation might be costly, so I wouldn't advise using it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#into-the-woods"&gt;
  &lt;/a&gt;
  Into the woods
&lt;/h2&gt;

&lt;p&gt;Not related to performance, but also often welcome is an implicit conversion of &lt;code&gt;impl Into&amp;lt;_&amp;gt;&lt;/code&gt; arguments. This can often make an API that feels magical, but beware: &lt;a href="https://doc.rust-lang.org/std/convert/trait.Into.html"&gt;&lt;code&gt;Into&lt;/code&gt;&lt;/a&gt; conversions may be expensive.&lt;/p&gt;

&lt;p&gt;Still, there are a few tricks you can pull for nice usability wins. For example, taking an &lt;code&gt;Into&amp;lt;Option&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt; instead of an &lt;a href="https://doc.rust-lang.org/std/option/enum.Option.html"&gt;&lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; will let your users omit the &lt;code&gt;Some&lt;/code&gt;. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;collections&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;HashMap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="n"&gt;with_optional_args&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;'a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;u32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;impl&lt;/span&gt; &lt;span class="n"&gt;Into&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;'a&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;baz&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;impl&lt;/span&gt; &lt;span class="n"&gt;Into&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;HashMap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;u32&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="nf"&gt;.into&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="n"&gt;baz&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;baz&lt;/span&gt;&lt;span class="nf"&gt;.into&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="c"&gt;// etc.&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;// we can call this in various ways:&lt;/span&gt;
&lt;span class="nf"&gt;with_optional_args&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"this works"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;None&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nf"&gt;with_optional_args&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;HashMap&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from&lt;/span&gt;&lt;span class="p"&gt;([(&lt;/span&gt;&lt;span class="s"&gt;"boo"&lt;/span&gt;&lt;span class="nf"&gt;.into&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)]));&lt;/span&gt;
&lt;span class="nf"&gt;with_optional_args&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;None&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Again, there may be types that implement &lt;code&gt;Into&amp;lt;Option&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt; in a costly fashion. This is yet another example where we may choose between a beautiful API and making costs obvious. In general, choosing the latter is usually considered idiomatic in Rust.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#keeping-code-bloat-in-check"&gt;
  &lt;/a&gt;
  Keeping code bloat in check
&lt;/h2&gt;

&lt;p&gt;Rust monomorphizes generic code. That means for each unique type your function gets called with, a version of all of its code using that specific type will be generated and optimized.&lt;/p&gt;

&lt;p&gt;This has the upside that it leads itself to inlining and other optimizations that give Rust the great performance qualities we all know and love. It also has the downside that potentially a lot of code gets generated.&lt;/p&gt;

&lt;p&gt;As a possible extreme example, consider the following function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Display&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="n"&gt;frobnicate_array&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Display&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;usize&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;elem&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;// ...2kb of generated machine code&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This function will be instantiated for each item type and array length each, even if we just iterate. Unfortunately, there is no way to avoid the code bloat and still avoid copying/cloning, because all those iterators contain their size in their type.&lt;/p&gt;

&lt;p&gt;If we can do with referenced items, we can go unsized and iterate over slices instead:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Display&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="n"&gt;frobnicate_slice&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Display&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;elem&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;slice&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;// ...2kb of generated machine code&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will at least only generate one version per item type. Even then, let's say we only use the array or slice to iterate. We can then factor out a &lt;code&gt;frobnicate_item&lt;/code&gt; method that is dependent on the type. What's more, we can decide whether to use static or dynamic dispatch:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Display&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c"&gt;/// This gets instantiated for each type it's called with&lt;/span&gt;
&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;frobnicate_with_static_dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;impl&lt;/span&gt; &lt;span class="n"&gt;Display&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nd"&gt;todo!&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/// This gets instantiated once, but adds some overhead for dynamic dispatch&lt;/span&gt;
&lt;span class="c"&gt;/// also we need to go through a pointer&lt;/span&gt;
&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;frobnicate_with_dynamic_dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;dyn&lt;/span&gt; &lt;span class="n"&gt;Display&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nd"&gt;todo!&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The outer &lt;code&gt;frobnicate_array&lt;/code&gt; method now only contains a loop and a method call, which is not that much code to instantiate. Code bloat averted!&lt;/p&gt;

&lt;p&gt;In general, it's a good idea to take a good look at your method's interface and see where the generics get either used or cast away. In both cases, there's a natural border at which we can factor out a function that removes the generics.&lt;/p&gt;

&lt;p&gt;If you don't want all this typing and are OK with adding a small bit of compile time, you can use my &lt;a href="https://github.com/llogiq/momo"&gt;momo&lt;/a&gt; crate to factor out generic traits such as &lt;code&gt;AsRef&lt;/code&gt; or &lt;code&gt;Into&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-so-bad-about-code-bloat"&gt;
  &lt;/a&gt;
  What’s so bad about code bloat?
&lt;/h2&gt;

&lt;p&gt;For some background, code bloat has an unfortunate consequence: today's CPUs employ a hierarchy of caches. While those allow for very good speed when dealing with local data, they lead to very nonlinear effects on usage. If your code takes up more of any cache, it may make other code go slower! So &lt;a href="https://en.wikipedia.org/wiki/Amdahl%27s_law"&gt;Amdahl's law&lt;/a&gt; no longer helps you find the place to optimize when dealing with memory.&lt;/p&gt;

&lt;p&gt;For one, that means that it may be counterproductive to optimize a part of your code in isolation by measuring a microbenchmark (because the whole code might actually become slower). For another, when writing library code, optimizing your library may pessimize your users' code. But neither you nor they could learn that from microbenchmarks.&lt;/p&gt;

&lt;p&gt;How, then, should we decide when to use dynamic dispatch and when to generate multiple copies? I don’t have a clear rule here, but I do note that dynamic dispatch is certainly underused in Rust! First, it has the stigma of being considered slower (which isn’t exactly wrong, considering the vtable lookups do add some overhead). Second, it’s often unclear how to get there &lt;a href="https://llogiq.github.io/2020/03/14/ootb.html"&gt;while avoiding allocation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Even so, Rust makes it easy enough to go from dynamic to static dispatch if measurement shows that it’s beneficial, and since dynamic dispatch can save a lot of compile time, I’d suggest starting dynamic where possible and only going monomorphic when measurement shows it to be faster. This gives us a fast turnaround time and thus more time to improve performance elsewhere. At the very best, have an actual application to measure, as opposed to a microbenchmark.&lt;/p&gt;

&lt;p&gt;This concludes my rant on how to effectively use generics in Rust library code. Go forth and Rust happily!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#logrocket-full-visibility-into-production-rust-apps"&gt;
  &lt;/a&gt;
  LogRocket: Full visibility into production Rust apps
&lt;/h2&gt;

&lt;p&gt;Debugging Rust applications can be difficult, especially when users experience issues that are difficult to reproduce. If you’re interested in monitoring and tracking performance of your Rust apps, automatically surfacing errors, and tracking slow network requests and load time, &lt;a href="https://logrocket.com/signup"&gt;try LogRocket&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8FGBNR-I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8FGBNR-I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner" width="880" height="496"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://logrocket.com/signup"&gt;LogRocket&lt;/a&gt; is like a DVR for web apps, recording literally everything that happens on your Rust app. Instead of guessing why problems happen, you can aggregate and report on what state your application was in when an issue occurred. LogRocket also monitors your app’s performance, reporting metrics like client CPU load, client memory usage, and more.&lt;/p&gt;

&lt;p&gt;Modernize how you debug your Rust apps — &lt;a href="https://logrocket.com/signup"&gt;start monitoring for free&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>rust</category>
      <category>webdev</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Detect Objects in a Serverless Twilio Video App with TensorFlow.js</title>
      <author>Lizzie Siegle</author>
      <pubDate>Wed, 17 Nov 2021 19:21:11 +0000</pubDate>
      <link>https://dev.to/twilio/detect-objects-in-a-serverless-twilio-video-app-with-tensorflowjs-5doh</link>
      <guid>https://dev.to/twilio/detect-objects-in-a-serverless-twilio-video-app-with-tensorflowjs-5doh</guid>
      <description>&lt;p&gt;Object detection is a computer vision technique for locating instances of objects in media such as images or videos. This machine learning (ML) method can be applied to many areas of computer vision, like image retrieval, security, surveillance, automated vehicle systems and machine inspection. Read on to learn how to detect objects in a &lt;a href="https://www.twilio.com/docs/video"&gt;Twilio Programmable Video&lt;/a&gt; application using &lt;a href="https://www.tensorflow.org/js"&gt;TensorFlow.js&lt;/a&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v4S8c_jY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://twilio-cms-prod.s3.amazonaws.com/original_images/A5mFB4TaRLTHMQuMzIlPPPqFn_oY9-kNmbKNY4FEiQIEVFwjgrr2Eo05NeAQ9v9dsumyZw341vFC96" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v4S8c_jY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://twilio-cms-prod.s3.amazonaws.com/original_images/A5mFB4TaRLTHMQuMzIlPPPqFn_oY9-kNmbKNY4FEiQIEVFwjgrr2Eo05NeAQ9v9dsumyZw341vFC96" alt="gif example" width="514" height="350"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h3&gt;

&lt;p&gt;To build a Twilio Programmable Video application, we will need:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A Twilio account - &lt;a href="http://www.twilio.com/referral/iHsJ5D"&gt;sign up for a free one here and receive an extra $10 if you upgrade through this link&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Your Twilio Account SID: &lt;a href="https://www.twilio.com/console"&gt;find it in your account console here&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;API Key SID and API Key Secret: &lt;a href="https://www.twilio.com/console/runtime/api-keys"&gt;generate them here&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.twilio.com/docs/twilio-cli/quickstart"&gt;The Twilio CLI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.twilio.com/docs/labs/serverless-toolkit/getting-started#install-the-twilio-serverless-toolkit"&gt;The Twilio Serverless Toolkit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://github.com/elizabethsiegle/twilioVideoWebChat9Mins"&gt;Download this GitHub repo&lt;/a&gt; and then create a file named .env in the top-level directory with the following contents, replacing the &lt;code&gt;XXXXX&lt;/code&gt; placeholders with the values that apply to your account and API Key:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;TWILIO_ACCOUNT_SID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;XXXXX
&lt;span class="nv"&gt;TWILIO_API_KEY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;XXXXX
&lt;span class="nv"&gt;TWILIO_API_SECRET&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;XXXXX
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you'd like to better understand Twilio Programmable Video in JavaScript, follow &lt;a href="https://www.twilio.com/blog/build-a-video-app-javascript-twilio-cli-quickly"&gt;this post to get setup with a starter Twilio Video app&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;assets/video.html&lt;/code&gt; on lines 20-22, import TensorFlow.js and the &lt;a href="https://github.com/tensorflow/tfjs-models/tree/master/coco-ssd"&gt;coco-ssd model&lt;/a&gt; to detect "objects defined in the COCO dataset, which is a large-scale object detection, segmentation, and captioning dataset." It can detect 80 classes of objects. (SSD stands for Single Shot MultiBox Detection, kind-of like how YOLO stands for You Only Look Once). &lt;a href="https://codelabs.developers.google.com/codelabs/tensorflowjs-object-detection#2"&gt;Read more about the model here on Google CodeLabs&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt; &lt;span class="c"&gt;&amp;lt;!-- Load TensorFlow.js. This is required to use coco-ssd model. --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!-- Load the coco-ssd model. --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.jsdelivr.net/npm/@tensorflow-models/coco-ssd"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then in the same file add a canvas element with in-line styling above the video tag within the room-controls div.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;canvas&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"canvas"&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"position:absolute;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/canvas&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;video&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"video"&lt;/span&gt; &lt;span class="na"&gt;autoplay&lt;/span&gt; &lt;span class="na"&gt;muted=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"320"&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"240"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/video&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The complete &lt;code&gt;assets/video.html&lt;/code&gt; file looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Twilio Video Serverless Demo&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"room-controls"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;canvas&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"canvas"&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"position:absolute;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/canvas&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;video&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"video"&lt;/span&gt; &lt;span class="na"&gt;autoplay&lt;/span&gt; &lt;span class="na"&gt;muted=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"320"&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"240"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/video&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"button-join"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Join Room&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"button-leave"&lt;/span&gt; &lt;span class="na"&gt;disabled&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Leave Room&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"//media.twiliocdn.com/sdk/js/video/releases/2.3.0/twilio-video.min.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://unpkg.com/axios@0.19.0/dist/axios.min.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!-- Load TensorFlow.js. This is required to use coco-ssd model. --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!-- Load the coco-ssd model. --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.jsdelivr.net/npm/@tensorflow-models/coco-ssd"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"index.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now it's time to write some TensorFlow.js code!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#object-detection-with-tensorflowjs"&gt;
  &lt;/a&gt;
  Object Detection with TensorFlow.js
&lt;/h3&gt;

&lt;p&gt;Now we will detect objects in our video feed. Let's make an &lt;code&gt;estimate&lt;/code&gt; function to estimate objects detected and their locations, and to load the coco-ssd ML model.&lt;/p&gt;

&lt;p&gt;We will call the model's &lt;code&gt;detect&lt;/code&gt; method on the video feed from the Twilio Video application, which returns a promise that resolves to an array of predictions about what the objects are. The results look something like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JJXmTuYv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://twilio-cms-prod.s3.amazonaws.com/images/8Nu6-83Mcc0ZokEjPJHnu1D-amHJY9ud9o_X8pFqiXxnP.width-1000.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JJXmTuYv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://twilio-cms-prod.s3.amazonaws.com/images/8Nu6-83Mcc0ZokEjPJHnu1D-amHJY9ud9o_X8pFqiXxnP.width-1000.png" alt="predictions printed to console" width="610" height="107"&gt;&lt;/a&gt;&lt;br&gt;
In &lt;code&gt;assets/index.js&lt;/code&gt; beneath &lt;code&gt;const video = document.getElementById("video");&lt;/code&gt;, make an &lt;code&gt;estimate&lt;/code&gt; function to load the model, get the predictions, and pass those predictions to another function we will soon make called &lt;code&gt;renderPredictions&lt;/code&gt;. The &lt;code&gt;renderPredictions&lt;/code&gt; function will display the predictions along with a bounding box on the video canvas. We also call &lt;code&gt;requestAnimationFrame&lt;/code&gt; to smooth out the rendering of the predictions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;estimate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;cocoSsd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;load&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// detect objects in the video feed&lt;/span&gt;
        &lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;detect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;predictions&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;renderPredictions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;predictions&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;requestAnimationFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;estimate&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Predictions: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;predictions&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#display-predictions-on-the-video-canvas"&gt;
  &lt;/a&gt;
  Display Predictions on the Video Canvas
&lt;/h3&gt;

&lt;p&gt;We have detected objects from the video feed, including the coordinates of the objects detected. Now let's display a bounding box around them and write the object and confidence score on top of the bounding box.&lt;/p&gt;

&lt;p&gt;We grab the canvas element, set the width and height, and make the &lt;code&gt;ctx&lt;/code&gt; variable for the canvas element's context (which is where the drawing will be rendered). We call &lt;code&gt;clearRect&lt;/code&gt; on where the drawing will be rendered to erase the pixels in a rectangular shape by making them transparent. We customize the font for which the text will display the predictions and then loop through all the predictions. The first element in the &lt;code&gt;bbox&lt;/code&gt; object is the &lt;code&gt;x&lt;/code&gt; coordinate, the second element is the &lt;code&gt;y&lt;/code&gt; coordinate, the third is the width, and the fourth is the height. With those variables, we draw a bounding box and customize the lines that will draw it.&lt;/p&gt;

&lt;p&gt;We make the &lt;code&gt;strToShow&lt;/code&gt; variable to display the prediction class (object detected) and the prediction confidence score.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;renderPredictions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;predictions&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;canvas&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;canvas&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2d&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clearRect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// customize font&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;font&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;15px serif&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;font&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;font&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;textBaseline&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;top&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;predictions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prediction&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;prediction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bbox&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;prediction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bbox&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;prediction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bbox&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;prediction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bbox&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
      &lt;span class="c1"&gt;// draw bounding box&lt;/span&gt;
      &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;strokeStyle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;tomato&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lineWidth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;strokeRect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="c1"&gt;// draw label bg&lt;/span&gt;
      &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fillStyle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;tomato&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;strToShow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;prediction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;prediction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;score&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;textW&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;measureText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;strToShow&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;textH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;font&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// base 10&lt;/span&gt;
      &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fillRect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;textW&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;textH&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="c1"&gt;//text on top&lt;/span&gt;
      &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fillStyle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#000000&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fillText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;strToShow&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All we need to do now is call the &lt;code&gt;estimate&lt;/code&gt; function: this can be done when the user connects to the room with &lt;code&gt;estimate(video)&lt;/code&gt;; above &lt;code&gt;joinRoomButton.disabled = true;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The complete &lt;code&gt;assets/index.js&lt;/code&gt; code should look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;TWILIO_DOMAIN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;host&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//unique to user, will be website to visit for video app&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ROOM_NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;tfjs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Video&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Twilio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Video&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;videoRoom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;localStream&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;video&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;video&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// preview screen&lt;/span&gt;
  &lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mediaDevices&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUserMedia&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;video&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;vid&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;srcObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;vid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;localStream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;vid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="c1"&gt;// buttons&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;joinRoomButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button-join&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;leaveRoomButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button-leave&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;site&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`https://&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;TWILIO_DOMAIN&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/video-token`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`site &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;site&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;joinRoomButton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onclick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// get access token&lt;/span&gt;
    &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`https://&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;TWILIO_DOMAIN&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/video-token`&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="c1"&gt;//connect to room&lt;/span&gt;
      &lt;span class="nx"&gt;Video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ROOM_NAME&lt;/span&gt; &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;room&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Connected to Room &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;room&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;videoRoom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;room&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="nx"&gt;room&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;participants&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;participantConnected&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;room&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;participantConnected&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;participantConnected&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="nx"&gt;room&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;participantDisconnected&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;participantDisconnected&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;room&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;once&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;disconnected&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
          &lt;span class="nx"&gt;room&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;participants&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;participantDisconnected&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;estimate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;joinRoomButton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;disabled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;leaveRoomButton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;disabled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="c1"&gt;// leave room&lt;/span&gt;
  &lt;span class="nx"&gt;leaveRoomButton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onclick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;videoRoom&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;disconnect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Disconnected from Room &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;videoRoom&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;joinRoomButton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;disabled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;leaveRoomButton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;disabled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;estimate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;cocoSsd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;load&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// detect objects in the video feed&lt;/span&gt;
      &lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;detect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;predictions&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;renderPredictions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;predictions&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="nx"&gt;requestAnimationFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;estimate&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Predictions: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;predictions&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;renderPredictions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;predictions&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;canvas&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;canvas&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2d&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clearRect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// customize font&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;font&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;15px serif&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;font&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;font&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;textBaseline&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;top&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;predictions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prediction&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;prediction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bbox&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;prediction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bbox&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;prediction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bbox&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;prediction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bbox&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="c1"&gt;// draw bounding box&lt;/span&gt;
    &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;strokeStyle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;tomato&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lineWidth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;strokeRect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// draw label bg&lt;/span&gt;
    &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fillStyle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;tomato&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;strToShow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;prediction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;prediction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;score&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;textW&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;measureText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;strToShow&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;textH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;font&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// base 10&lt;/span&gt;
    &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fillRect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;textW&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;textH&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;//text on top&lt;/span&gt;
    &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fillStyle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#000000&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fillText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;strToShow&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// connect participant&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;participantConnected&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;participant&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Participant &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;participant&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;identity&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; connected'`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//create div for new participant&lt;/span&gt;
  &lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;participant&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nx"&gt;participant&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;trackSubscribed&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;track&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;trackSubscribed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;track&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="nx"&gt;participant&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;trackUnsubscribed&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;trackUnsubscribed&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;participant&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tracks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;publication&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;publication&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isSubscribed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;trackSubscribed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;publication&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;track&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;participantDisconnected&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;participant&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Participant &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;participant&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;identity&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; disconnected.`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;participant&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sid&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;trackSubscribed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;track&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;track&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attach&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;trackUnsubscribed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;track&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;track&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;detach&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Tada! Now to deploy our app and test it, in the root directory run &lt;code&gt;twilio serverless:deploy&lt;/code&gt; and grab the URL ending in &lt;code&gt;/video.html&lt;/code&gt;. Open it in a web browser, click &lt;code&gt;Join room&lt;/code&gt;, share the link with your friends, and start performing object detection.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7AfB-s_6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://twilio-cms-prod.s3.amazonaws.com/original_images/A5mFB4TaRLTHMQuMzIlPPPqFn_oY9-kNmbKNY4FEiQIEVFwjgrr2Eo05NeAQ9v9dsumyZw341vFC_5A0nJlB" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7AfB-s_6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://twilio-cms-prod.s3.amazonaws.com/original_images/A5mFB4TaRLTHMQuMzIlPPPqFn_oY9-kNmbKNY4FEiQIEVFwjgrr2Eo05NeAQ9v9dsumyZw341vFC_5A0nJlB" alt="gif example" width="514" height="350"&gt;&lt;/a&gt;&lt;br&gt;
You can &lt;a href="https://github.com/elizabethsiegle/tfjs-obj-detection-twilio-video-serverless"&gt;find the complete code on GitHub here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#whats-next-after-detecting-objects-with-tensorflow-and-twilio-programmable-video"&gt;
  &lt;/a&gt;
  What's Next after Detecting Objects with TensorFlow and Twilio Programmable Video
&lt;/h3&gt;

&lt;p&gt;Performing object detection in a video app with TensorFlow.js is just the beginning. You can use this as a stepping stone to build collaborative games, &lt;a href="https://www.twilio.com/blog/mask-or-no-mask-twilio-video-ml-javascript"&gt;detect mask-usage like in this ML5.js app&lt;/a&gt;, &lt;a href="https://towardsdatascience.com/face-landmarks-detection-with-mediapipe-facemesh-555fa2e10b06"&gt;put a mask on faces&lt;/a&gt;, and more. I can't wait to see what you build, so let me know what you're building online!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Twitter: &lt;a href="http://twitter.com/lizziepika"&gt;@lizziepika&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;GitHub: &lt;a href="http://github.com/elizabethsiegle"&gt;elizabethsiegle&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;email: &lt;a href="mailto:lsiegle@twilio.com"&gt;lsiegle@twilio.com&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>machinelearning</category>
      <category>tensorflow</category>
      <category>tfjs</category>
      <category>serverless</category>
    </item>
  </channel>
</rss>
