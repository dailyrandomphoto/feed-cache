<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Nevertheless, Feli Coded - ChooseToChallenge Yourself</title>
      <author>Feli (she/her)</author>
      <pubDate>Thu, 04 Mar 2021 08:08:51 +0000</pubDate>
      <link>https://dev.to/s2engineers/nevertheless-feli-coded-choosetochallenge-yourself-4enn</link>
      <guid>https://dev.to/s2engineers/nevertheless-feli-coded-choosetochallenge-yourself-4enn</guid>
      <description>&lt;p&gt;&lt;em&gt;My journey to become an Executive Principal Engineer working in Developer Relations (fancy buzzwords title) was not easy. Here is my story and why I believe we need to challenge ourselves.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-journey-with-obstacles" class="anchor"&gt;
  &lt;/a&gt;
  A journey with obstacles...
&lt;/h3&gt;

&lt;p&gt;In 2005, I finished my apprenticeship. Since then I have worked as a Developer. Most of the time as a Frontend Developer - or what I love to call it, &lt;a href="https://dev.to/s2engineers/ui-developers-are-still-underestimated-3c0g"&gt;UI Developer&lt;/a&gt;. But this specialization was not my first choice. In my apprenticeship, I loved Database Development and wanted to get a job in this area. It was 2005 you know, I was 19, blond, and couldn’t land a job - even though I had an excellent certificate.&lt;/p&gt;

&lt;p&gt;Back then, companies told me that they can’t hire a 19-year-old woman for a team of twenty men with an average age of 30. In Germany, I could have sued them for it, at that time I didn’t have the courage to do so. Nowadays I would do it, trust me.&lt;/p&gt;

&lt;p&gt;Days went by and I was very frustrated but also didn’t want to accept that I can’t land a job in tech as a developer, only because I’m a woman and too young. So I applied for every Developer job I was able to find… nothing. All my fellow students already had a job - all men. So I did the last thing left to me - looking for an unpaid traineeship (wouldn’t recommend it to anyone - you should get paid for what you are doing). Of course, I found something where I worked as a developer without getting paid for it. It was in a company that did web development (sadly no database stuff).&lt;br&gt;
The traineeship ended after 6 months and they hired me for the minimum amount of wage. I didn’t care, I was just happy to have my first paid job - finally.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#even-if-i-wanted-to-i-never-gave-up" class="anchor"&gt;
  &lt;/a&gt;
  Even if I wanted to, I never gave up...
&lt;/h3&gt;

&lt;p&gt;What should I say? I proved every Database company, every other company that didn’t hire me because I’m a woman &lt;strong&gt;wrong&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;At 21 I was self-employed. At 23 I moved to a big city (Hamburg) for a job, which by the way was one of my best decisions ever. At 26 I started to work as a Freelance Developer - where I had to reject most of the projects I got offered because I had too much to do. With 29 the company I'm still working at hired me as a so-called &lt;a href="https://sinnerschrader.github.io/free-radical-specification/"&gt;Free Radical&lt;/a&gt;. With 30 I became part of &lt;a href="https://cssconf.eu"&gt;CSSconfEU&lt;/a&gt; &amp;amp; &lt;a href="https://jsconf.eu"&gt;JSConfEU&lt;/a&gt;. With 31 I built Developer Relations for a non-product company. With 34 I got promoted to Executive Principal Engineer and I'm the Tech Lead of a project which is fighting Covid 19.&lt;/p&gt;

&lt;p&gt;Yes, the journey was not easy, but if I made it, you can make it, too!&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#nevertheless" class="anchor"&gt;
  &lt;/a&gt;
  Nevertheless...
&lt;/h3&gt;

&lt;p&gt;My biggest achievement is that I accepted that it is hard as a woman in Tech &lt;strong&gt;BUT&lt;/strong&gt; I’m still privileged. I'm white, I had a proper education, I earn enough money and I'm in a &lt;a href="https://en.wikipedia.org/wiki/Cisgender"&gt;cis&lt;/a&gt; relationship. The moment I realized that, I started to fight for inclusion. I still call out every sexism case I witness. I don’t get tired of saying that we still have a &lt;strong&gt;huge&lt;/strong&gt; way to go in the tech community, at my job, at my friend's. &lt;strong&gt;But&lt;/strong&gt; if you are a white cis woman, ask yourself:&lt;br&gt;
If it is hard for me, how is it for non-gender people? women of color? for LGBTQ+ people?&lt;/p&gt;

&lt;p&gt;The theme of International Women's Day 2021 is &lt;strong&gt;&lt;a href="https://www.internationalwomensday.com/"&gt;#ChooseToChallenge&lt;/a&gt;&lt;/strong&gt;. So, I call every white cis woman in tech - choose to challenge yourself.&lt;br&gt;
Get aware of your privilege, read and learn about it and your unconscious bias. Think about how you can be an ally for non-white-cis-women. Call out every discrimination.&lt;br&gt;
Take actions on every day's business - example: Often people ask me “Feli, how do we get more diverse, how do we get more women into tech”. My answer? “Let’s talk about how we get more people from under-represented groups into tech. Diversity is not only about women in tech”. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Be the change! Choose to Challenge!&lt;/strong&gt;&lt;/p&gt;




</description>
      <category>shecoded</category>
      <category>womenintech</category>
      <category>choosetochallenge</category>
      <category>career</category>
    </item>
    <item>
      <title>Algorithms Every Programmer Should Know 2</title>
      <author>Suraj Vishwakarma</author>
      <pubDate>Thu, 04 Mar 2021 04:49:19 +0000</pubDate>
      <link>https://dev.to/surajondev/algorithms-every-programmer-should-know-2-4bg9</link>
      <guid>https://dev.to/surajondev/algorithms-every-programmer-should-know-2-4bg9</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;Let's continue the series of "Algorithms Every Programmer Should Know". It is the 2nd Part, in the first part, we explore the 4 Searching Algorithm. If you haven't read that please read that and here is the post.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/surajondev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b_yru6x_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--8FEvckRs--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/417922/d5a37d43-1157-4c3a-b4dd-8b5a111371ca.png" alt="surajondev image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/surajondev/algorithms-every-programmer-should-know-part-1-searching-algorithm-1hd3" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Algorithms Every Programmer Should Know&lt;/h2&gt;
      &lt;h3&gt;Suraj Vishwakarma ・ Feb 15 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#java&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#python&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#watercooler&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;Today, we are going to look into 6 sorting algorithms that every programmer should know. So without a further ado let's get started.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#insertion-sort" class="anchor"&gt;
  &lt;/a&gt;
  Insertion Sort
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Insertion sort iterates, consuming one input element each repetition and grows a sorted output list. At each iteration, insertion sort removes one element from the input data, finds the location it belongs within the sorted list and inserts it there. It repeats until no input elements remain.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DNYeB7xX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/18na5tww41yb7zl53sm0.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DNYeB7xX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/18na5tww41yb7zl53sm0.gif" alt="Insertion Sort"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It takes one input at a time and compares it with the previous element in the list to place the selected element at the right place. For the first element, it compares with the next element. It iterated again and again until the last element of the list is put in the right place. After the last element, the list is sorted.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;When to use&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;When the list is small&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;When the list is almost sorted only a few elements is needed to sort&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#selection-sort" class="anchor"&gt;
  &lt;/a&gt;
  Selection Sort
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;The algorithm divides the input list into two parts: a sorted sublist of items which is built up from left to right at the front (left) of the list and a sublist of the remaining unsorted items that occupy the rest of the list. Initially, the sorted sublist is empty and the unsorted sublist is the entire input list. The algorithm proceeds by finding the smallest (or largest, depending on sorting order) element in the unsorted sublist, exchanging (swapping) it with the leftmost unsorted element (putting it in sorted order), and moving the sublist boundaries one element to the right.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_uZp_YTk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z3a6tnurdnn4we9hhdx1.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_uZp_YTk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z3a6tnurdnn4we9hhdx1.gif" alt="Selection Sort"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Initially, the list is divided into two-part. One sorted which is at leftmost and other unsorted lists which is at the rightmost side. Also at the start sorted list is empty and all the element is in the unsorted list. Then we pick the smallest element from the unsorted list and put it into the sorted list. Then the length of the sorted list increases and the unsorted list decreases. The process continues until the unsorted list is empty.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;When to use&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;To check whether the given list is already sorted or not&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;When memory is small as it uses less swap&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#heap-sort" class="anchor"&gt;
  &lt;/a&gt;
  Heap Sort
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Heapsort divides its input into a sorted and an unsorted region, and it iteratively shrinks the unsorted region by extracting the largest element from it and inserting it into the sorted region. Unlike selection sort, heapsort does not waste time with a linear-time scan of the unsorted region; rather, heap sort maintains the unsorted region in a heap data structure to more quickly find the largest element in each step.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CAOAiqfa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rruxqp47ujoh9pikuk31.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CAOAiqfa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rruxqp47ujoh9pikuk31.gif" alt="Heap Sort"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In heap sort, the input value is stored into a heap memory with the root of the largest value from the tree. Then the largest values are stored into an array of the list. The process goes on until the heap memory is empty and the output is the sorted array.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;When to use&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;When the list is huge&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;When to find the smallest or larger item in the list&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#merge-sort" class="anchor"&gt;
  &lt;/a&gt;
  Merge Sort
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Conceptually, a merge sort works as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Divide the unsorted list into n sublists, each containing one element (a list of one element is considered sorted).&lt;/li&gt;
&lt;li&gt;Repeatedly merge sublists to produce new sorted sublists until there is only one sublist remaining. This will be the sorted list.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qL9wC8s_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/juts4riek84qvn24mv31.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qL9wC8s_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/juts4riek84qvn24mv31.gif" alt="Merge Sort"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The list is divided into sublists, each list containing one element. Then each element is compared to its neighboring element and merged into another sublist according to order. This process continues to each sublist. Now each sublist has 2 elements, Now each sublist is compared to the neighbor's sublist. Each sublist having 2 elements. The list is merged into another sublist according to order. Now each sublist will have 4 elements. This process continues till there is only one sublist remaining. this sublist will be in sorted order.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;When to use&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;When the list is linked list&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;When the list is huge&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#quick-sort" class="anchor"&gt;
  &lt;/a&gt;
  Quick Sort
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Quicksort is a divide-and-conquer algorithm. It works by selecting a 'pivot' element from the array and partitioning the other elements into two sub-arrays, according to whether they are less than or greater than the pivot. For this reason, it is sometimes called partition-exchange sort.[&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rVs-ViTJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hpcesk4beai7gra2wkgw.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rVs-ViTJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hpcesk4beai7gra2wkgw.gif" alt="Quick SOrt"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In quicksort, we pick an element from the list called a pivot(Mostly it is either the first or the last element of the list). Then we reorder the array in such a manner that all the elements that are less than the pivot are placed before the pivot and elements greater than pivot values are placed after the pivot value.&lt;/p&gt;

&lt;p&gt;We repeat this step in both the sublists i.e. before and after the pivot value. This continues until the list is sorted.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;When to use&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;When the list is small&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;It is preferred for array&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#counting-sort" class="anchor"&gt;
  &lt;/a&gt;
  Counting Sort
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;In computer science, counting sort is an algorithm for sorting a collection of objects according to keys that are small integers; that is, it is an integer sorting algorithm. It operates by counting the number of objects that have each distinct key value and using arithmetic on those counts to determine the positions of each key value in the output sequence.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JLA_wfw4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2m69b5046vkatwrk8npf.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JLA_wfw4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2m69b5046vkatwrk8npf.gif" alt="Counting sort"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After taking input, counting sort count number of times the element is repeated in the list. Thus having 2 distinct values one for element and the other for the count. Then doing the arithmetic calculation on it and deciding the position of each element in the list.&lt;/p&gt;

&lt;p&gt;For arithmetic calculation, read GeeksforGeeks article on &lt;a href="https://www.geeksforgeeks.org/counting-sort/"&gt;counting sort&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;When to use&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;When the range of input values isn't greater than the number of values to be sorted.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;For a small list of array&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h1&gt;
  &lt;a href="#last-note" class="anchor"&gt;
  &lt;/a&gt;
  Last Note
&lt;/h1&gt;

&lt;p&gt;I hope this article helped you in learning algorithms. Thank You for reading the blog post.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#connect-with-me" class="anchor"&gt;
  &lt;/a&gt;
  🔗 Connect with me:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://twitter.com/surajondev"&gt;&lt;strong&gt;Twitter&lt;/strong&gt;&lt;/a&gt; &lt;a href="https://github.com/surajondev"&gt;&lt;strong&gt;GitHub&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>java</category>
      <category>python</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>A nice introduction to JavaScript variables</title>
      <author>Kieran Roberts 👋</author>
      <pubDate>Wed, 03 Mar 2021 18:28:05 +0000</pubDate>
      <link>https://dev.to/kieran6roberts/a-nice-introduction-to-javascript-variables-40gd</link>
      <guid>https://dev.to/kieran6roberts/a-nice-introduction-to-javascript-variables-40gd</guid>
      <description>&lt;h1&gt;
  &lt;a href="#content" class="anchor"&gt;
  &lt;/a&gt;
  Content
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;What is a programming variable?&lt;/li&gt;
&lt;li&gt;How do we create a JavaScript variable?&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;var&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt; &amp;amp; &lt;code&gt;const&lt;/code&gt; declarations&lt;/li&gt;
&lt;li&gt;Scope, Hoisting &amp;amp; Shadowing&lt;/li&gt;
&lt;li&gt;Which variable declaration keyword should I use?&lt;/li&gt;
&lt;li&gt;How should we name our variables?&lt;/li&gt;
&lt;li&gt;What can we store inside variables?&lt;/li&gt;
&lt;li&gt;Conclusion&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-programming-variable" class="anchor"&gt;
  &lt;/a&gt;
  What is a programming variable?
&lt;/h2&gt;

&lt;p&gt;One of the core features of any programming language are things called variables. We use variables to store data. Think of them as boxes that contain some entity and without them we lose the item that was stored inside.&lt;/p&gt;

&lt;p&gt;Consider a bottle of beer for a second. Or juice depending on your age 🤔. If we empty out the liquid it no longer has a container and is doomed to be lost to the floor.&lt;/p&gt;

&lt;p&gt;Variables are essential to programming languages because they allow us to store pieces of data that we might need later on. &lt;/p&gt;

&lt;p&gt;To be able to focus on variables I will stick to using simple examples and assigning basic primitive data types as values to variables(e.g. numbers, strings and booleans). If you would like to check out more about JavaScript data types you can have a quick read of this article by MDN - &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures"&gt;JavaScript data types and data structures&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Ready? Let's go!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-we-create-a-javascript-variable" class="anchor"&gt;
  &lt;/a&gt;
  How do we create a JavaScript variable?
&lt;/h2&gt;

&lt;p&gt;To begin with let's have a look at how we create a variable. The most common syntax is generally as follows where we declare our variable with a name and initialize it with a value 👇.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;(variable declaration) (variable name) = (some value);&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;We also add a semi-colon &lt;code&gt;;&lt;/code&gt; after declaring the variable which is used to to separate expressions. It is also used across many other programming languages for this reason and in JavaScript although it is optional, it is highly recommended that we use them after each code instruction to avoid potential bugs that can arise as a result.&lt;/p&gt;

&lt;p&gt;It is also possible to create certain variables that are not initialized with a value. In this case the syntax is as follows:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;(variable declaration) (variable name);&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;Variables created by in this way are initialized by JavaScript at execution with a value of &lt;code&gt;undefined&lt;/code&gt; and later we will see this in action.&lt;/p&gt;

&lt;p&gt;In JavaScript there are three primary methods of creating variables each with their differences. We start by defining the keyword associated with creating the variable before usually assigning some value to it. Let's take a look at each method and the differences between them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-var-endraw-raw-let-endraw-amp-raw-const-endraw-declarations" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;var&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt; &amp;amp; &lt;code&gt;const&lt;/code&gt; declarations
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#const" class="anchor"&gt;
  &lt;/a&gt;
  const
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;const&lt;/code&gt; declaration creates a read only reference to a value that we must be defined when we create the variable. Let's create some variables below 👇.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yRHViS6Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6er13qhof4u19797pk1k.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yRHViS6Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6er13qhof4u19797pk1k.jpg" alt="Defining some const variables"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(The last example is useless I'll admit. There is no need to store a boolean value in a constant that can't be changed, we could just use the value &lt;code&gt;false&lt;/code&gt; instead but I thought it was funny so it stays 😄).&lt;/p&gt;

&lt;p&gt;When we define a variable using &lt;code&gt;const&lt;/code&gt; what we are actually saying is that the variable identifier(name) cannot be reassigned to another value. See here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NbhXqb7L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ff49gzdnf0ojobeigvjn.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NbhXqb7L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ff49gzdnf0ojobeigvjn.jpg" alt="Example of const reassign error"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When the &lt;code&gt;const&lt;/code&gt; declaration we must also initialize the variable with a value. Not doing so will result in an error.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1VoS8FWk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q98nw03jtvspk65jgu5a.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1VoS8FWk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q98nw03jtvspk65jgu5a.jpg" alt="Example of const re-assign error"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This does not mean that the value itself is immutable(can't be changed). Check out this article for a deeper dive to constant immutability with an object example (When to capitalize your JavaScript constants - {Brandon Wozniewicz})[&lt;a href="https://www.freecodecamp.org/news/when-to-capitalize-your-javascript-constants-4fabc0a4a4c4/"&gt;https://www.freecodecamp.org/news/when-to-capitalize-your-javascript-constants-4fabc0a4a4c4/&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;We can however create a new &lt;code&gt;const&lt;/code&gt; variable that points at an exisiting &lt;code&gt;const&lt;/code&gt; variable. In this situation the value stored in the existing variable is copied into the new variable.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SjQpAWM7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j0jthn1ef71348h73tfn.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SjQpAWM7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j0jthn1ef71348h73tfn.jpg" alt="Example of pointing one const variable at another"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#let" class="anchor"&gt;
  &lt;/a&gt;
  let
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;let&lt;/code&gt; declaration differs from &lt;code&gt;const&lt;/code&gt; because the value stored within a &lt;code&gt;let&lt;/code&gt; variable can be changed. We use the &lt;code&gt;let&lt;/code&gt; declaration when we know that later on in the program the value is likely to be changed.&lt;/p&gt;

&lt;p&gt;With &lt;code&gt;let&lt;/code&gt; variables we are not forced to initialize it with an initial value. In this case the variable will be undefined but will not throw an error. Check it out.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KzJUbIDw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tfh33uciuxw2b7tgj1r6.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KzJUbIDw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tfh33uciuxw2b7tgj1r6.jpg" alt="Examples of declaring let variables"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#var" class="anchor"&gt;
  &lt;/a&gt;
  var
&lt;/h3&gt;

&lt;p&gt;Using the &lt;code&gt;var&lt;/code&gt; declaration predates the previous two examples. It used to be the only way do declare variables until &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; were introduced to JavaScript with ES6 in 2015. &lt;/p&gt;

&lt;p&gt;In modern code we have taken to using &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; instead of &lt;code&gt;var&lt;/code&gt; because of a few problems that can arise which we will soon explore. It is advisable to stick with &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; although having an understanding of how &lt;code&gt;var&lt;/code&gt; works is important to fully understanding JavaScript. &lt;/p&gt;

&lt;p&gt;Perhaps you will come across this syntax in older codebases or maybe will be asked to solve JavaScript problems that use the &lt;code&gt;var&lt;/code&gt; keyword.&lt;/p&gt;

&lt;p&gt;Similarly to &lt;code&gt;let&lt;/code&gt; it allows us create variables can either be initialized with a value or not initialized at all.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KmrlQyor--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yv65wcaqgp0vnchpgqmx.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KmrlQyor--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yv65wcaqgp0vnchpgqmx.jpg" alt="Examples of variables using var"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Unlike the &lt;code&gt;let&lt;/code&gt; defined variable we can reassign a &lt;code&gt;var&lt;/code&gt; variable to a different value like this&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cvEhqMl_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/453gr0z087i8ep3v0s8d.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cvEhqMl_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/453gr0z087i8ep3v0s8d.jpg" alt="var reassign example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In order to properly understand the what the &lt;code&gt;var&lt;/code&gt; syntax does, we need to know about a couple of core concepts which are key to mastering JavaScript. Those concepts are called &lt;strong&gt;Scope&lt;/strong&gt; and &lt;strong&gt;Hoisting&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#scope-and-hoisting" class="anchor"&gt;
  &lt;/a&gt;
  Scope and Hoisting
&lt;/h2&gt;

&lt;p&gt;While I am not going to dive too far into each topic(this would probably take at least two more articles to fully explore 😃), it is important to grasp the idea so that we can explore the differences between &lt;code&gt;var&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Scope is a concept that defines what variables are accessible at any point in a script. When we create a variable we are defining the scope variable and what has access to it without really knowing it. In JavaScript we have two types of scope when we define a variable. They are &lt;strong&gt;Block-scope&lt;/strong&gt; and &lt;strong&gt;Function-scope&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;When we create a variable with &lt;code&gt;let&lt;/code&gt; or &lt;code&gt;const&lt;/code&gt; we are defining the scope of the variable as Block-scope. This means that we can only access this variable from within the same block or further down in the scope tree. A block is defined between the curly braces &lt;code&gt;{}&lt;/code&gt; syntax such as in an &lt;code&gt;if&lt;/code&gt; statement, a function and more.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;var&lt;/code&gt; on the other hand defines a variables scope as the current execution context. This is a fancy term that means it will either refer to the global scope(which is shown in the following examples) or the function that it lives in, also known as Function-scope. &lt;/p&gt;

&lt;p&gt;In JavaScript a function is simply a piece of reusable code that we can write that allows us to run it whenever we like. When we create a function a new scope is defined for that function. &lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;var&lt;/code&gt; to create variables can lead to more unpredictable code where access to the variable is possible outside of the current block scope. Consider the following situations 👇.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wrDdG2RJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tut3cajx5sf8zqur2z2m.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wrDdG2RJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tut3cajx5sf8zqur2z2m.jpg" alt="Accessing var variable outside of its block"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There the &lt;code&gt;if&lt;/code&gt; statement has its own block scope defined by the curly braces and we define a variable using &lt;code&gt;var&lt;/code&gt;. But this variable is function-scoped meaning it can be accessed from outside in the scope above(in this case the global scope). And this is not necessarily something we want to be able to do. If we try to do the same but instead create the variable using &lt;code&gt;let&lt;/code&gt; then we will see a very different result.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v62Tr87S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jyhjzw6077ybgw2g1rw2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v62Tr87S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jyhjzw6077ybgw2g1rw2.jpg" alt="Example of let block scope"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;let&lt;/code&gt; defines the scope of the variable as being block-scoped meaning we can only use it from within that block or any nested scope below this block. Here we will add an &lt;code&gt;if&lt;/code&gt; check inside the original &lt;code&gt;if&lt;/code&gt; therefore creating another nested scope such as this 👇.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6h7f7mEl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/elnkfdubtr5l53bj9z9t.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6h7f7mEl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/elnkfdubtr5l53bj9z9t.jpg" alt="Example of nested scope"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here you can see we are able to access the &lt;code&gt;let&lt;/code&gt; variable from a nested scope of the scope in which it was created but not from outside. This is a key concept to be aware of as you start working with functions and you are only able to access certain variables in specific scopes. &lt;/p&gt;

&lt;p&gt;The second key concept I mentioned was Hoisting. Hoisting is the JavaScript mechanism by which variables and functions are moved to the top of their own scope before the code is executed. When we declare a JavaScript variable it is hoisted. In the case of the &lt;code&gt;var&lt;/code&gt; declaration if we try to access it before we declare it, we won't get an error and instead it will return the value &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Opposed to this are &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; where JavaScript does not allow us to access theses variables before we declare them. They are still hoisted to the top of the block however instead of returning &lt;code&gt;undefined&lt;/code&gt; and carrying on we will get an error for trying to access it before declaration.&lt;/p&gt;

&lt;p&gt;It is always advised whenever possible to initialize your variable declarations with a value to avoid situations where you run into &lt;code&gt;undefined&lt;/code&gt; instead of an error resulting in a difficult to debug problem.&lt;/p&gt;

&lt;p&gt;Finally shadowing is a concept that we see when we define a variable in a nested scope that has the same name as a variable in its outer scope. Take a look 👇.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7lcT0o_8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6fuufd1szwz2misgwmpi.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7lcT0o_8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6fuufd1szwz2misgwmpi.jpg" alt="example of variable shadowing"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Even though we have already defined a &lt;code&gt;const&lt;/code&gt; called name, JavaScript does not throw us an error. From the nested scope name will have the value "Bob" while on the outside it will be "Kieran".&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#which-variable-declaration-syntax-should-i-use" class="anchor"&gt;
  &lt;/a&gt;
  Which variable declaration syntax should I use?
&lt;/h2&gt;

&lt;p&gt;This decision has become tricky in recent years since &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; were introduced to JavaScript with ES6(EcmaScript 2015) especially to beginners who are unsure of the differences. In modern code you will often see &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; used exclusively, replacing the former declaration &lt;code&gt;var&lt;/code&gt;. These newer methods of declaring variables are generally considered the better approach because they solve some of the problems that come with using &lt;code&gt;var&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Using the &lt;code&gt;var&lt;/code&gt; keyword can lead to some unpredictable results. &lt;code&gt;var&lt;/code&gt; allows for multiple variables of the same name to be declared re-assigning it a new value. But this is not really something we want. We might accidentally overwrite an important piece of data and JavaScript would not give us an error leading to problems while debugging.&lt;/p&gt;

&lt;p&gt;This type of silent failing can be largely eliminated if we stick to using &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; where block-scope is more predictable and easier to grasp for most developers. We will be provided with errors by JavaScript which means we can fix our bugs early before they become a pain in the backside.&lt;/p&gt;

&lt;p&gt;Therefore if we need a constant variable where the value is not going to change we use &lt;code&gt;const&lt;/code&gt;. If it's value is likely to change then go with &lt;code&gt;let&lt;/code&gt;. Even if you are not sure it is not the end of the world. You can start by using &lt;code&gt;const&lt;/code&gt; and if you later change the value stored in the variable, your code editor should warn you about the error and before you know it you'll know exactly which declaration to use.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-should-we-name-our-variables" class="anchor"&gt;
  &lt;/a&gt;
  How should we name our variables?
&lt;/h2&gt;

&lt;p&gt;So we now know what variables are. We know how to create them and which versions of variable creation we should use based on the situation. One often overlooked aspect of creating variables is naming them. We should always try to give our variables names that correspond to the data that they hold and sometimes it is more difficult than it seems.&lt;/p&gt;

&lt;p&gt;Assigning names in this way helps us because our code is then more readable and much easier to debug. Check out some examples of good and bad variable names 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2Zf2SiDq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c8tdm9u7hwd2j1cvf4c6.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2Zf2SiDq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c8tdm9u7hwd2j1cvf4c6.jpg" alt="variable naming examples"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and another&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s5nUVBG0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/igcbb5lsmb4li1uhonbi.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s5nUVBG0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/igcbb5lsmb4li1uhonbi.jpg" alt="variable naming examples"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can see in the example above we have a variable name called &lt;code&gt;productName&lt;/code&gt; which contains multiple words with the second of which beginning with an uppercase letter. This naming convention is called "Camel case" or "camelCase" where we don't use any spaces to separate words but instead we capitalize any words that come after the first word.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;My first Name&lt;/em&gt; would become &lt;em&gt;myFirstName&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Camel case naming convention is the commonly accepted method of naming JavaScript variables and also functions with a few exceptions(class initializations, private class properties etc) which will not be covered in this article.&lt;/p&gt;

&lt;p&gt;Another naming convention that you might come across relates to boolean values. To help us differentiate boolean variables from other variable types we prefix the variable name with a helper word such as "is" or "are".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h9PD-R5l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c5x5givoz7717i09bkfx.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h9PD-R5l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c5x5givoz7717i09bkfx.jpg" alt="Example of boolean variable naming convention"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You might also look at someone else's JavaScript code and see a &lt;code&gt;const&lt;/code&gt; variable that is all uppercase letters. This is used to denote a constant variable that will point at the same primitive value throughout the lifetime of the script. These primitive values include &lt;em&gt;string&lt;/em&gt;, &lt;em&gt;number&lt;/em&gt;, &lt;em&gt;boolean&lt;/em&gt;, &lt;em&gt;symbol&lt;/em&gt;, &lt;em&gt;undefined&lt;/em&gt; and &lt;em&gt;BigInt&lt;/em&gt; but this convention is generally used when the value is a string or number. &lt;/p&gt;

&lt;p&gt;There is really no use case for storing a boolean in a &lt;code&gt;const&lt;/code&gt; (as I explained in the first example 😁) that you never intend to change while storing undefined in a variable is not recommended. Symbols and BigInt types are not used as often although they have their use-cases in other situations.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2lZimNvP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pqejf32iuowwszzi325q.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2lZimNvP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pqejf32iuowwszzi325q.jpg" alt="uppercase constant variable naming example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is again a convention and not required although it does help us differentiate our variables so they are easier to spot and debug.&lt;/p&gt;

&lt;p&gt;There are two rules when it comes to naming variables that JavaScript imposes on us. These are as follows:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The first character of the variable name cannot be a digit&lt;/li&gt;
&lt;li&gt;Variable name can only contain letters, digits, or the symbols underscore(_) and dollar sign($).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To finish let's take a quick look at a few examples of names we cannot give to variables even if we really wanted to. Check it out 👇.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--50FHlLZH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hp7zc3m1kbap0s8jqx1i.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--50FHlLZH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hp7zc3m1kbap0s8jqx1i.jpg" alt="Variable names not allowed by JavaScript example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;JavaScript also has a few keywords that are reserved and cannot be used to name variables. These can be found here at &lt;a href="https://www.w3schools.com/js/js_reserved.asp"&gt;w3schools.com - JavaScript Reserved Words&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mQoqng_---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f82lytykz2jjdcq4jyg2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mQoqng_---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f82lytykz2jjdcq4jyg2.jpg" alt="examples of variables using reserved words"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-can-we-store-inside-variables" class="anchor"&gt;
  &lt;/a&gt;
  What can we store inside variables?
&lt;/h2&gt;

&lt;p&gt;So far you have seen me store strings, booleans and numbers inside variables to introduce you to the basics but really we can use them to store much more. More advanced JavaScript data types such as arrays, objects and also functions which are themselves just objects can and are often stored inside variables so that we can reference the data they hold whenever we require. Below is an example of common types of data we store in variables.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O5Os1om0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8q60cqvmywadi29ocf2w.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O5Os1om0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8q60cqvmywadi29ocf2w.jpg" alt="Examples of advanced data types stored in variables"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Variables are key in allowing us to build all kinds of applications and there is so much we can do but this has been a nice introduction to JavaScript variables. We've only just scratched the surface.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Now that you have a basic understanding of JavaScript variables I hope you can go off and experiment yourself to see what else you can do with them.&lt;/p&gt;

&lt;p&gt;Thanks for reading! If you would like to see more from me including my progress as a developer then come say hi on twitter &lt;a href="https://twitter.com/Kieran6dev"&gt;@Kieran6dev&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to Reduce RAM Consumption by 6X When Using ts-node</title>
      <author>Amir Blum</author>
      <pubDate>Wed, 03 Mar 2021 17:38:44 +0000</pubDate>
      <link>https://dev.to/aspecto/how-to-reduce-ram-consumption-by-6x-when-using-ts-node-4d8p</link>
      <guid>https://dev.to/aspecto/how-to-reduce-ram-consumption-by-6x-when-using-ts-node-4d8p</guid>
      <description>&lt;p&gt;It turns out that running &lt;code&gt;ts-node-dev / ts-node&lt;/code&gt; is constantly consuming hundreds of megabytes of RAM even for small and simple applications.&lt;/p&gt;

&lt;p&gt;In development, it is usually not a big concern, however, it can be, if your application is running inside a docker container with limited resources (for example, with Docker Desktop on Mac which allocates by default only 2GB of RAM to all the containers in total).&lt;/p&gt;

&lt;p&gt;Typescript code should be transpiled to Javascript which can be done either before running the process (tsc) or in runtime (ts-node).&lt;/p&gt;

&lt;p&gt;The most efficient way is transpiling before running, however, this isn’t as developer-friendly since it takes forever. &lt;code&gt;ts-node-dev&lt;/code&gt; loads everything into memory then watches the changes the developer is making and transpiles the project fast on every change.&lt;/p&gt;

&lt;p&gt;We encountered the issue while building a demo application to showcase our product at &lt;a href="https://www.aspecto.io/?utm_source=dev_to&amp;amp;utm_medium=post&amp;amp;utm_campaign=ts-node-ram-consumption"&gt;Aspecto&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We were running multiple typescript services with docker-compose and started seeing arbitrary &lt;code&gt;ts-node-dev&lt;/code&gt; processes exiting without even running the application, displaying the message “Done in 79.06s”.&lt;/p&gt;

&lt;p&gt;This was due to a lack of memory. Each typescript service was using ~600MB of RAM out of the total 2GB available for all containers.&lt;/p&gt;

&lt;p&gt;After digging a bit, we found a few possible solutions and wanted to share them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#run-tsnodedev-with-option-raw-transpileonly-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  Run ts-node-dev with option &lt;code&gt;--transpile-only&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;In our case, adding the --transpile-only option to ts-node-dev reduced the consumed RAM from ~600MB to ~170MB.&lt;/p&gt;

&lt;p&gt;The price was that the typescript code would only be transpiled, and typechecking would be skipped. Most modern IDEs (vscode, web storm), has built-in typescript IntelliSense which highlights errors, so for us, it was a fair price to pay.&lt;/p&gt;

&lt;p&gt;If you use &lt;code&gt;ts-node&lt;/code&gt; to run code in production that was already successfully compiled and tested in the CI, you can only benefit from setting this option.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#compile-the-code-with-tsc-and-monitor-file-changes-with-nodemon" class="anchor"&gt;
  &lt;/a&gt;
  Compile the code with tsc and monitor file changes with nodemon
&lt;/h2&gt;

&lt;p&gt;Instead of using &lt;code&gt;ts-node-dev&lt;/code&gt;, which consumes a lot of memory, it is possible to compile the application directly with &lt;code&gt;tsc&lt;/code&gt; and then run it from dist/build like this: &lt;code&gt;node dist/index.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For automatic reload on source file changes, nodemon / node-dev can be used.&lt;/p&gt;

&lt;p&gt;This is our “start” script in package.json:&lt;/p&gt;

&lt;p&gt;For automatic reload on source file changes, &lt;code&gt;nodemon / node-dev&lt;/code&gt; can be used.&lt;/p&gt;

&lt;p&gt;This is our “start” script in package.json:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"scripts": {
  "start": "nodemon --watch src -e ts --exec \"(tsc &amp;amp;&amp;amp; node dist/index.js) || exit 1\""
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This approach reduced the RAM on our service from ~600MB to ~95MB (but there was still a spike in RAM to 600Mb for few seconds while &lt;code&gt;tsc&lt;/code&gt; was compiling).&lt;/p&gt;

&lt;p&gt;Unlink the previous option, this approach does check for typescript errors and warnings, and the service does not start if errors exist in the code.&lt;/p&gt;

&lt;p&gt;The price to pay here is a longer compilation time. In our setup, it’s about 10 seconds from saving the file until the service restarts.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#increase-docker-desktop-available-ram" class="anchor"&gt;
  &lt;/a&gt;
  Increase Docker desktop available RAM
&lt;/h2&gt;

&lt;p&gt;This is the easiest fix. Just allocate more Memory to Docker Desktop by going to Preferences =&amp;gt; Resources =&amp;gt; Memory, and increase the value.&lt;/p&gt;

&lt;p&gt;While it fixes the immediate problem, the containers still consume a lot of memory, and if you have plenty of them, it might be a problem soon enough.&lt;/p&gt;

&lt;p&gt;In addition, changing the default configuration should be done by every user that wants to run the system with docker-compose, which introduces complexity in installation and usage.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;If memory consumption is not an issue for you, just use &lt;code&gt;ts-node&lt;/code&gt; in production and &lt;code&gt;ts-node-dev&lt;/code&gt; in development.&lt;/p&gt;

&lt;p&gt;However, if you do care about memory, then you have a tradeoff between fast restart time after modifications (but typechecking only in the IDE, set &lt;code&gt;--transpileOnly&lt;/code&gt;, or typechecking in compilation) and slower restart on each modification (directly use &lt;code&gt;tsc&lt;/code&gt; and &lt;code&gt;nodemon&lt;/code&gt; / &lt;code&gt;node-dev&lt;/code&gt; ).&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>microservices</category>
      <category>node</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Getting Started with Vite 2</title>
      <author>Alvaro Saburido</author>
      <pubDate>Wed, 03 Mar 2021 16:44:08 +0000</pubDate>
      <link>https://dev.to/alvarosaburido/getting-started-with-vite-2-1f4p</link>
      <guid>https://dev.to/alvarosaburido/getting-started-with-vite-2-1f4p</guid>
      <description>&lt;p&gt;Vite ⚡️ is the Eminem of frontend tooling.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/3ohs7QTNjLXMYNSc1O/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/3ohs7QTNjLXMYNSc1O/giphy.gif" alt="Rap God"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Why? Because is crazy fast and delivers well. &lt;/p&gt;

&lt;p&gt;In mid-February &lt;a href="https://dev.to/yyx990803"&gt;Evan You&lt;/a&gt; announced the release of the latest iteration of Vite&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/yyx990803" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nhxX-Mqo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--S98AYp6g--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/184319/d23f649a-12f9-4b67-bc84-58ba7ad27218.jpg" alt="yyx990803 image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/yyx990803/announcing-vite-2-0-2f0a" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Announcing Vite 2.0&lt;/h2&gt;
      &lt;h3&gt;Evan You ・ Feb 16 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#vite&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
 

&lt;blockquote&gt;
&lt;p&gt;Vite (French word for "fast", pronounced &lt;code&gt;/vit/&lt;/code&gt;) is a new kind of build tool for front-end web development. Think a pre-configured dev server + bundler combo, but leaner and faster. It leverages browser's native ES modules support and tools written in compile-to-native languages like &lt;code&gt;esbuild&lt;/code&gt; to deliver a snappy and modern development experience.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With this tutorial, you're going to learn how to set up a Vue3 app with Vite in no-time, some cool plugins to improve the DX (Developer Experience), and more importantly, understand how does it work and why is so fast.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#scaffolding-your-first-vite-project" class="anchor"&gt;
  &lt;/a&gt;
  Scaffolding your first Vite project
&lt;/h1&gt;

&lt;p&gt;Open your favorite terminal and run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm init @vitejs/app
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Or if you prefer Yarn:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn create @vitejs/app
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;And follow the prompts:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AdP-UhPc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c7m797daflzh61fz7f3w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AdP-UhPc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c7m797daflzh61fz7f3w.png" alt="create-vite-app"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Vite supports multiple templates presets such as: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;vanilla&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vue&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vue-ts&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;react&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;react-ts&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;preact&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;preact-ts&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lit-element&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lit-element-ts&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can also scaffold with one command via additional command-line options for name and template. In this tutorial, we're going to build a Vue project.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn create @vitejs/app awesomely-fast &lt;span class="nt"&gt;--template&lt;/span&gt; vue
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;And let the magic be... ok it's already installed.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#structure-of-a-vite-project" class="anchor"&gt;
  &lt;/a&gt;
  Structure of a Vite project
&lt;/h1&gt;

&lt;p&gt;The first thing you probably have noticed is that &lt;code&gt;index.html&lt;/code&gt; is no longer in the &lt;code&gt;public&lt;/code&gt; folder but in the root directory. &lt;/p&gt;

&lt;p&gt;That's because Vite treats the &lt;code&gt;index.html&lt;/code&gt; as source code and part of the module graph. Similar to static HTTP servers, Vite has the concept of a "root directory" from which your files are served from.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"icon"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/favicon.ico"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Vite App&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"app"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"module"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/src/main.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;The rest of the structure it's pretty standard inside an &lt;code&gt;src&lt;/code&gt; folder with an &lt;code&gt;App.vue&lt;/code&gt; as your root component and a &lt;code&gt;main.js&lt;/code&gt; to bootstrap your Vue App.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#dev-server" class="anchor"&gt;
  &lt;/a&gt;
  Dev server
&lt;/h1&gt;

&lt;p&gt;Your &lt;code&gt;package.json&lt;/code&gt; will come with three (3) built-in scripts:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"dev"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"vite"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"vite build"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"serve"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"vite preview"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Go ahead and run &lt;code&gt;yarn dev&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HJD5xfVc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p4e33cb0050rbbzcqp17.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HJD5xfVc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p4e33cb0050rbbzcqp17.gif" alt="dev-server"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Exactly, around &lt;strong&gt;~344ms&lt;/strong&gt; to cold start a dev server. To give you an idea of how fast it is, using vue-cli the dev server would take around a second and a half.&lt;/p&gt;

&lt;p&gt;When cold-starting the dev server, a bundler-based (webpack) setup has to eagerly crawl and build your entire application before it can be served.&lt;/p&gt;

&lt;p&gt;Vite improves the dev server start time by first dividing the modules in an application into two categories&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;dependencies&lt;/strong&gt;: Essentially plain javascript that would not change during development&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;source code&lt;/strong&gt;: Yeap, your code, all your Vue components, and CSS that you often edit.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Vite serves source code over native ESM. This is essentially letting the browser taking over part of the job of a bundler&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Do you remember the &lt;code&gt;&amp;lt;script type="module" /&amp;gt;&lt;/code&gt; tag at the beginning? That's is using &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules"&gt;native ESM&lt;/a&gt; approach.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#how-does-it-work" class="anchor"&gt;
  &lt;/a&gt;
  How does it work?
&lt;/h1&gt;

&lt;p&gt;Let's have a look at the &lt;code&gt;Network Tab&lt;/code&gt; of a Vite app vs &lt;code&gt;vue-cli&lt;/code&gt; (webpack)&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#vuecli" class="anchor"&gt;
  &lt;/a&gt;
  vue-cli
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g9S4gYfW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0m1r2rdskr48l44lfsq9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g9S4gYfW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0m1r2rdskr48l44lfsq9.png" alt="vue-cli network"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the image above, &lt;code&gt;vue-cli&lt;/code&gt; bundles the code into two main chunks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;app.js&lt;/strong&gt; which contains the bundle of your code&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;chunk-vendors.js&lt;/strong&gt; containing all the code from third-parties.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Around &lt;strong&gt;2.4 MB&lt;/strong&gt; in 2 requests  with a total load time of &lt;strong&gt;301ms&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jmouTsRo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8tj1mh3tj6o3izihewtd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jmouTsRo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8tj1mh3tj6o3izihewtd.png" alt="Screenshot 2021-03-03 at 10.15.52"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bundle-based dev-servers take the job of packaging all modules and different files into one static bundle that is served on mostly all the cases an express server. Similar to this image&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--84fUU3Og--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8dsrdnbpmjd9xjjzijnu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--84fUU3Og--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8dsrdnbpmjd9xjjzijnu.png" alt="bundle-based-dev-server"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The more complexity inside the box, the more time will need the server to start.  &lt;/p&gt;

&lt;p&gt;Now let's compare that with the Vite one.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#vite-devserver" class="anchor"&gt;
  &lt;/a&gt;
  Vite dev-server
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vKwuUkH7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8o0jcrn5nz9ewo9sa0tn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vKwuUkH7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8o0jcrn5nz9ewo9sa0tn.png" alt="vite network"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, Vite loads every file (&lt;code&gt;.vue&lt;/code&gt;, &lt;code&gt;.js&lt;/code&gt;) as a module, been able of doing it parallel, and reduce the total load time to around &lt;code&gt;~190ms&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Notice the size transferred, it didn't reach &lt;strong&gt;1 MB&lt;/strong&gt; compared to the &lt;strong&gt;2.4MB&lt;/strong&gt; of the bundle-based.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MfGf1UGJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ybgmkim3idu05bl2oep.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MfGf1UGJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ybgmkim3idu05bl2oep.png" alt="Screenshot 2021-03-03 at 10.19.24"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This speed is because native ESM transfers part of the responsibility of the job of a bundler to the browser itself. It basically transforms and serves code on-demand while the browser requests it via HTTP.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rTfD7nJd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5nqnluhb02pngl9ifva4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rTfD7nJd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5nqnluhb02pngl9ifva4.png" alt="vite-dev-server"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This comparison, of course, is done with a small app with one (1) component, I suggest you try the same with a bigger/complex one and you will be amazed by the results.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#the-struggle-of-slow-updates" class="anchor"&gt;
  &lt;/a&gt;
  The struggle of slow updates
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/Y3qrREWGFsechb940U/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/Y3qrREWGFsechb940U/giphy.gif" alt="slow updates"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Before Vite, as your application evolve and start holding hundreds of components, It would incrementally increase the time to pack them into a bundle, that's why many bundlers run the building on memory and others use &lt;a href="https://webpack.js.org/concepts/hot-module-replacement/"&gt;Hot module Replacement&lt;/a&gt; (HMR) to increase the speed between updates.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In Vite, HMR is performed over native ESM. When a file is edited, Vite only needs to precisely invalidate the chain between the edited module and its closest HMR boundary (most of the time only the module itself), making HMR updates consistently fast regardless of the size of your application.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That means that no matter how big is your app, it will not affect the speed when serving.&lt;/p&gt;

&lt;p&gt;If you want to see a real comparison test of speed between bundle-based vs Vite check this article I wrote earlier&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/alvarosaburido" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C1ZJO7zW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--RKWBcnvZ--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/288679/64942ce2-b659-4c6c-aa69-17296138ac4c.png" alt="alvarosaburido image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/alvarosaburido/vite-2-a-speed-comparison-in-vue-1f5j" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Vite 2 - A speed comparison in Vue&lt;/h2&gt;
      &lt;h3&gt;Alvaro Saburido ・ Mar  3 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#performance&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#what-no-loaders-for-styling" class="anchor"&gt;
  &lt;/a&gt;
  What, no loaders for styling?
&lt;/h1&gt;

&lt;p&gt;One of the things that impressed me the most is that Vite does provide built-in support for &lt;code&gt;.scss&lt;/code&gt;, &lt;code&gt;.sass&lt;/code&gt;, &lt;code&gt;.less&lt;/code&gt;, &lt;code&gt;.styl&lt;/code&gt;, and &lt;code&gt;.stylus&lt;/code&gt; files. &lt;/p&gt;

&lt;p&gt;There is no need to install loaders or Vite-specific plugins for them, but the corresponding pre-processor itself must be installed:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# .scss and .sass&lt;/span&gt;
yarn add &lt;span class="nt"&gt;-D&lt;/span&gt; sass

&lt;span class="c"&gt;# .less&lt;/span&gt;
yarn add &lt;span class="nt"&gt;-D&lt;/span&gt; less

&lt;span class="c"&gt;# .styl and .stylus&lt;/span&gt;
yarn add &lt;span class="nt"&gt;-D&lt;/span&gt; stylus
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;That way you can concentrate on plugins that really matter, like the ones we're gonna check in the next section&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#%C2%A0plugins-plugins-plugins" class="anchor"&gt;
  &lt;/a&gt;
   Plugins, plugins, plugins
&lt;/h1&gt;

&lt;p&gt;To enhance your Vite app, here is a list of my top plugins available: &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#%C2%A0vitejspluginvue" class="anchor"&gt;
  &lt;/a&gt;
   @vitejs/plugin-vue
&lt;/h2&gt;

&lt;p&gt;This is an &lt;a href="https://github.com/vitejs/vite/tree/main/packages/plugin-vue"&gt;official plugin&lt;/a&gt; packaged inside the Vite repo to support Vue3 SFC components.&lt;/p&gt;

&lt;p&gt;It makes sense is optional due to the fact that Vite is framework agnostic. &lt;/p&gt;

&lt;p&gt;To use it, add the following to your &lt;code&gt;vite.config.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// vite.config.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;vue&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@vitejs/plugin-vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;vue&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#%C2%A0antfuvitepluginpwa" class="anchor"&gt;
  &lt;/a&gt;
   antfu/vite-plugin-pwa
&lt;/h2&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/antfu"&gt;
        antfu
      &lt;/a&gt; / &lt;a href="https://github.com/antfu/vite-plugin-pwa"&gt;
        vite-plugin-pwa
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Zero-config PWA for Vite
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Provides quick zero-config for PWA support&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i vite-plugin-pwa &lt;span class="nt"&gt;-D&lt;/span&gt; 

yarn add vite-plugin-pwa &lt;span class="nt"&gt;-D&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Add it to vite.config.js&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// vite.config.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;VitePWA&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vite-plugin-pwa&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="nx"&gt;VitePWA&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;manifest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="c1"&gt;// content of manifest&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="na"&gt;workbox&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// workbox options for generateSW&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#antfuvitepluginmd" class="anchor"&gt;
  &lt;/a&gt;
  antfu/vite-plugin-md
&lt;/h2&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/antfu"&gt;
        antfu
      &lt;/a&gt; / &lt;a href="https://github.com/antfu/vite-plugin-md"&gt;
        vite-plugin-md
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Markdown for Vite
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This loader for markdown allows you to use Markdown as Vue components and use your Vue components in Markdown files&lt;/p&gt;

&lt;p&gt;Install&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i vite-plugin-md &lt;span class="nt"&gt;-D&lt;/span&gt; 

yarn add vite-plugin-md &lt;span class="nt"&gt;-D&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Add it to vite.config.js&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// vite.config.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Vue&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@vitejs/plugin-vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Markdown&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vite-plugin-md&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="nx"&gt;Vue&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;include&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\.&lt;/span&gt;&lt;span class="sr"&gt;vue$/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\.&lt;/span&gt;&lt;span class="sr"&gt;md$/&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;--&lt;/span&gt;
    &lt;span class="p"&gt;}),&lt;/span&gt;
    &lt;span class="nx"&gt;Markdown&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#antfuvitepluginicons" class="anchor"&gt;
  &lt;/a&gt;
  antfu/vite-plugin-icons
&lt;/h2&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/antfu"&gt;
        antfu
      &lt;/a&gt; / &lt;a href="https://github.com/antfu/vite-plugin-icons"&gt;
        vite-plugin-icons
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Access thousands of icons as Vue components in Vite
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Access thousands of icons as Vue components in Vite&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;90+ iconsets powered by &lt;a href="https://github.com/iconify/iconify"&gt;Iconify&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://icones.js.org/"&gt;Browser the icons&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Install&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i vite-plugin-icons @iconify/json &lt;span class="nt"&gt;-D&lt;/span&gt; 

yarn add vite-plugin-icons @iconify/json &lt;span class="nt"&gt;-D&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Add it to vite.config.js&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// vite.config.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Vue&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@vitejs/plugin-vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Icons&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vite-plugin-icons&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="nx"&gt;Vue&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="nx"&gt;Icons&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt; &lt;span class="na"&gt;setup&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;IconAccessibility&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/@vite-icons/carbon/accessibility&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;IconAccountBox&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/@vite-icons/mdi/account-box&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;icon-accessibility/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;icon-account-box&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"font-size: 2em; color: red"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;It also allows &lt;a href="https://github.com/antfu/vite-plugin-icons#auto-importing"&gt;auto-importing&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to check more plugins they are all listed here &lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/vitejs"&gt;
        vitejs
      &lt;/a&gt; / &lt;a href="https://github.com/vitejs/awesome-vite"&gt;
        awesome-vite
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      ⚡️ A curated list of awesome things related to Vite.js
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;
  &lt;br&gt;
  &lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/vitejs/awesome-vite/master/./assets/logo.svg"&gt;&lt;img width="400" src="https://res.cloudinary.com/practicaldev/image/fetch/s--4Sn22_i7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/vitejs/awesome-vite/master/./assets/logo.svg" alt="logo of awesome-vite repository"&gt;&lt;/a&gt;
  &lt;br&gt;
  &lt;br&gt;
&lt;/p&gt;
&lt;h2&gt;
Awesome Vite.js&lt;/h2&gt;
&lt;p&gt;
A curated list of awesome things related to &lt;a href="https://github.com/vitejs/vite"&gt;Vite.js&lt;/a&gt;
&lt;br&gt;&lt;br&gt;
&lt;a href="https://github.com/sindresorhus/awesome"&gt;
&lt;img src="https://camo.githubusercontent.com/abb97269de2982c379cbc128bba93ba724d8822bfbe082737772bd4feb59cb54/68747470733a2f2f63646e2e7261776769742e636f6d2f73696e647265736f726875732f617765736f6d652f643733303566333864323966656437386661383536353265336136336531353464643865383832392f6d656469612f62616467652e737667" alt="Awesome"&gt;
&lt;/a&gt;
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;This awesome list is for Vite 2.x and onward. &lt;a href="https://raw.githubusercontent.com/vitejs/awesome-vite/master/./README.legacy.md"&gt;Vite 1.x's list&lt;/a&gt; is archived.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://raw.githubusercontent.com/vitejs/awesome-vite/master/#resources"&gt;Resources&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/vitejs/awesome-vite/master/#official-resources"&gt;Official Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://raw.githubusercontent.com/vitejs/awesome-vite/master/#get-started"&gt;Get Started&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://raw.githubusercontent.com/vitejs/awesome-vite/master/#templates"&gt;Templates&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/vitejs/awesome-vite/master/#vue-3"&gt;Vue 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/vitejs/awesome-vite/master/#vue-2"&gt;Vue 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/vitejs/awesome-vite/master/#react"&gt;React&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://raw.githubusercontent.com/vitejs/awesome-vite/master/#plugins"&gt;Plugins&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://raw.githubusercontent.com/vitejs/awesome-vite/master/#framework-agnostic-plugins"&gt;Framework-agnostic Plugins&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/vitejs/awesome-vite/master/#integrations"&gt;Integrations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/vitejs/awesome-vite/master/#loaders"&gt;Loaders&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/vitejs/awesome-vite/master/#bundling"&gt;Bundling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/vitejs/awesome-vite/master/#transformers"&gt;Transformers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/vitejs/awesome-vite/master/#helpers"&gt;Helpers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://raw.githubusercontent.com/vitejs/awesome-vite/master/#vue"&gt;Vue&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/vitejs/awesome-vite/master/#integrations-1"&gt;Integrations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/vitejs/awesome-vite/master/#routing"&gt;Routing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/vitejs/awesome-vite/master/#loaders-1"&gt;Loaders&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/vitejs/awesome-vite/master/#ssr--ssg"&gt;SSR / SSG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/vitejs/awesome-vite/master/#ecosystem"&gt;Ecosystem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/vitejs/awesome-vite/master/#helpers-1"&gt;Helpers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/vitejs/awesome-vite/master/#bundling-1"&gt;Bundling&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://raw.githubusercontent.com/vitejs/awesome-vite/master/#react-1"&gt;React&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/vitejs/awesome-vite/master/#official"&gt;Official&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/vitejs/awesome-vite/master/#loaders-2"&gt;Loaders&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/vitejs/awesome-vite/master/#framework"&gt;Framework&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://raw.githubusercontent.com/vitejs/awesome-vite/master/#solid"&gt;Solid&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/vitejs/awesome-vite/master/#integrations-2"&gt;Integrations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://raw.githubusercontent.com/vitejs/awesome-vite/master/#rollup-plugins"&gt;Rollup Plugins&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/vitejs/awesome-vite/master/#included-in-vite"&gt;Included in Vite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/vitejs/awesome-vite/master/#covered-by-default-in-vite"&gt;Covered by default in Vite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/vitejs/awesome-vite/master/#compatible-with-vite"&gt;Compatible with Vite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/vitejs/awesome-vite/master/#community"&gt;Community&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://raw.githubusercontent.com/vitejs/awesome-vite/master/#integrations-with-backends"&gt;Integrations with Backends&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/vitejs/awesome-vite/master/#ruby-on-rails"&gt;Ruby on Rails&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://raw.githubusercontent.com/vitejs/awesome-vite/master/#migrations"&gt;Migrations&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/vitejs/awesome-vite/master/#vue-cli"&gt;Vue CLI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://raw.githubusercontent.com/vitejs/awesome-vite/master/#projects-using-vitejs"&gt;Projects Using Vite.js&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/vitejs/awesome-vite/master/#open-source"&gt;Open Source&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/vitejs/awesome-vite/master/#appswebsites"&gt;Apps/Websites&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Resources&lt;/h2&gt;
&lt;h3&gt;
Official Resources&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://vitejs.dev/" rel="nofollow"&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/vitejs/vite"&gt;GitHub Repo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/vitejs/vite/blob/main/packages/vite/CHANGELOG.md"&gt;Release Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://v3.vuejs.org/" rel="nofollow"&gt;Vue 3 Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/vuejs/awesome-vue"&gt;Awesome Vue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vitejs.dev/guide/migration.html" rel="nofollow"&gt;Migration from v1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
Get Started&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/vitejs/vite/tree/main/packages/create-app"&gt;@vite/create-app&lt;/a&gt; - Scaffolding Your First Vite Project.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
Templates&lt;/h3&gt;
&lt;h4&gt;
Vue 3&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/antfu/vitesse"&gt;Vitesse&lt;/a&gt; - Opinionated starter template.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/web2033/vite-vue3-tailwind-starter"&gt;vite-vue3-tailwind-starter&lt;/a&gt; - Vue 3, Vue Router and Tailwind CSS.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Uninen/vite-ts-tailwind-starter"&gt;vite-ts-tailwind-starter&lt;/a&gt; - TypeScript, Tailwind CSS, Cypress.io e2e tests + CI.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/MangoTsing/vite-electron-quick"&gt;vite-electron-quick&lt;/a&gt; - Starter template with Vue…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/vitejs/awesome-vite"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Are you ready to step up with your frontend tooling?&lt;/p&gt;

</description>
      <category>vite</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Closures in JavaScript</title>
      <author> Bishnu Prasad Chowdhury</author>
      <pubDate>Wed, 03 Mar 2021 16:28:43 +0000</pubDate>
      <link>https://dev.to/bishnucit/closures-in-javascript-3cij</link>
      <guid>https://dev.to/bishnucit/closures-in-javascript-3cij</guid>
      <description>&lt;p&gt;In JavaScript we can pack a function inside another function. When one function A is inside another function B then function A is called outer function while function A is called inner function and this phenomenon is called a closure.&lt;br&gt;
In closure the inner function can have access to the outer function scope.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function B() {
  let x = 7;
  function A() {
     console.log(x);
  }
  return A;
}

var c = B();
c();

&amp;gt;7
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Closures are used to make private function or variables that has limited access. The outer function of a closure cannot access the inner function scope so it can be used to hide data.&lt;/p&gt;

&lt;p&gt;Apart from this use closure do have drawbacks where as long as closure is running memory cannot be garbage collected resulting to memory leaks. This can be avoided by making them null force fully after the use.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>These problem-solving patterns will help you ace your next coding interview</title>
      <author>Coder's Toolbox</author>
      <pubDate>Wed, 03 Mar 2021 16:24:22 +0000</pubDate>
      <link>https://dev.to/coderstoolbox/these-problem-solving-patterns-will-help-you-ace-your-next-coding-interview-4d18</link>
      <guid>https://dev.to/coderstoolbox/these-problem-solving-patterns-will-help-you-ace-your-next-coding-interview-4d18</guid>
      <description>&lt;p&gt;Coding interviews might be daunting for many applicants. Especially those, where you have to code live without accessing external resources. It is a completely different environment setup from a classical workflow, where you are working on a feature and you can access Google and Stack Overflow. It is a craft on its own and it can be mastered by hours of practice.&lt;/p&gt;

&lt;p&gt;Today, I will share several patterns that can help you tackle down certain classical problems and help you build a mental framework, that will make your life easier.&lt;/p&gt;

&lt;p&gt;All examples of code are written in JavaScript but can be applied to other languages as well.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#objects-are-your-friends" class="anchor"&gt;
  &lt;/a&gt;
  Objects are your friends
&lt;/h2&gt;

&lt;p&gt;A lot of interviewing questions are tricky. They test if we can really think about code as they tease us to choose a brute force decision.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Write a function that takes two arrays as arguments and returns true if those arrays have at least one element in common. Otherwise, it should return false. You can expect that the arrays are not empty and elements in them can repeat.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As we see the problem this obvious solution can come to mind: Create a nested loop and check all elements against each other, if two elements are equal we can return true.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;
 &lt;span class="nx"&gt;arr1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;b&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;c&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;c&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
 &lt;span class="nx"&gt;arr2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;d&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;e&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;f&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
 &lt;span class="nx"&gt;arr3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;g&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;h&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;b&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;// yourFunc(arr1, arr2) -&amp;gt; false&lt;/span&gt;
&lt;span class="c1"&gt;// yourFunc(arr1, arr3) -&amp;gt; true (both contain "b")&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;containsSameElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arr2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;arr1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arr1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;arr2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;arr2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;  
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;containsSameElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arr3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;containsSameElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arr2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Well, the "obvious" solution gets the job done. But is it the best solution? Its complexity is O(n*m), therefore not very efficient for large inputs.&lt;/p&gt;

&lt;p&gt;A better solution, that shows we can think about a problem in terms of its efficiency, is the following.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;
 &lt;span class="nx"&gt;arr1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;b&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;c&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;c&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
 &lt;span class="nx"&gt;arr2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;d&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;e&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;f&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
 &lt;span class="nx"&gt;arr3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;g&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;h&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;b&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;// yourFunc(arr1, arr2) -&amp;gt; false&lt;/span&gt;
&lt;span class="c1"&gt;// yourFunc(arr1, arr3) -&amp;gt; true (both contain "b")&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;containsSameElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arr2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;arr1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

 &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;arr2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;containsSameElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arr3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;containsSameElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arr2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;As we can see, there are no nested loops, so its complexity is "only" O(n+m), therefore linear.&lt;/p&gt;

&lt;p&gt;This pattern can also be applied to frequency problems such as anagrams.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Write a function that is gonna take two strings as arguments and returns true if they are anagrams (Wikipedia: An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once). Otherwise, the function should return false. The inputs are not empty and are lowercased&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;
 &lt;span class="nx"&gt;str1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cinema&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
 &lt;span class="nx"&gt;str2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;iceman&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
 &lt;span class="nx"&gt;str3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;icemen&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="c1"&gt;// yourFunc(str1, str2) -&amp;gt; true&lt;/span&gt;
&lt;span class="c1"&gt;// yourFunc(str1, str3) -&amp;gt; false &lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;isAnagram&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;str2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;l&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;str1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;l&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;l&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;l&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; 
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;l&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;str2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// number &amp;lt;= 0 is falsy&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;l&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;l&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;l&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;


  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;isAnagram&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;str2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;isAnagram&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;str3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Again, we managed to avoid nested loops and found a quite elegant solution. Knowing this pattern we should always think twice before reaching for a nested loop. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#multiple-pointers" class="anchor"&gt;
  &lt;/a&gt;
  Multiple pointers
&lt;/h2&gt;

&lt;p&gt;This pattern is helpful when working with sorted arrays and we are required to find a pair of elements that fulfill a certain condition.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Write a function that accepts a number and a sorted array. Find a pair of elements whose average equals the number that was passed as the argument. The function should return them as an array. If there is no such number return null. The passed array contains at least two sorted elements. If you find several solutions, return just one&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;// yourFunc(arr, 5) // [3,7]&lt;/span&gt;
&lt;span class="c1"&gt;// yourFunc(arr, 2) // null&lt;/span&gt;


&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;avgPair&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;avg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;avg&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;avg&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;avgPair&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// [3,7]&lt;/span&gt;
&lt;span class="nx"&gt;avgPair&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// null&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;&lt;em&gt;Write a function that accepts a sorted array of length 1 or more and returns the number of unique values in that array. You can modify the passed array&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Our algorithm will consist of having two pointers which we will compare. Then, we will be modifying our passed array to have all the unique elements at the start, and at the end, we will return a value of one of the pointers as it's gonna be pointing to the last unique elements of that sorted "subarray".&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;// yourFunc(arr) // 7&lt;/span&gt;


&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;uniqNumbersCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;
      &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="c1"&gt;// i is pointing to the index, but we want the length&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;uniqNumbersCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 7&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// [ -2, -1, 0, 3, 6, 7, 8, 7, 8, 8 ]&lt;/span&gt;


&lt;span class="c1"&gt;// Alternative one-liner&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;uniqNumbersCount2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#sliding" class="anchor"&gt;
  &lt;/a&gt;
  Sliding
&lt;/h2&gt;

&lt;p&gt;Whenever we see the word "sub" in the problem we are about to solve. The sliding pattern might be a good approach.&lt;/p&gt;

&lt;p&gt;The idea of the sliding pattern is basically moving over the array or string as a laser scanner of a certain length.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Write a function that accepts a number (n) and an array and returns the maximum sum of the consecutive n elements. The number n will always be equal to or smaller than the length of the array&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;// your func(arr, 3) // 30 (12,5,13)&lt;/span&gt;


&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;maxSum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;max&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kc"&gt;Infinity&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;maxLength&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;maxLength&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;tempSum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;// Sliding&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;tempSum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tempSum&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;max&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;tempSum&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;max&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;maxSum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#divide-and-conquer" class="anchor"&gt;
  &lt;/a&gt;
  Divide and Conquer
&lt;/h2&gt;

&lt;p&gt;A classical approach that is used in the more efficient sorting algorithms. You can read my article on sorting if you wanna dive deeper into this concept.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/coderstoolbox" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KZ91T8uJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--k-AgD3eR--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/402722/562745a1-c3f8-4d44-8fd0-fbba306cf34b.jpg" alt="coderstoolbox image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/coderstoolbox/sorting-algorithms-you-need-to-master-for-your-next-coding-interview-26g8" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Sorting algorithms you need to master for your next coding interview&lt;/h2&gt;
      &lt;h3&gt;Coder's Toolbox ・ Feb 23 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#algorithms&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;p&gt;The idea behind divide and conquer is basically splitting our sorted data into smaller chunks and then working with a smaller portion of data during each iteration. We can reach a complexity of O(log(n)). &lt;/p&gt;

&lt;p&gt;A classical algorithm that illustrates this approach is Binary Search.&lt;/p&gt;

&lt;p&gt;*Write a function that takes a sorted array and a number (n) and returns true if the array contains n, otherwise the function should return false. The array is not empty. *&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;85&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;101&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;250&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;// yourFunc(arr, 23) // true&lt;/span&gt;
&lt;span class="c1"&gt;// yourFunc(arr, 11) // false&lt;/span&gt;


&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;searchEl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

  &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;middle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(((&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; 
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;middle&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;middle&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;middle&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;middle&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="nx"&gt;searchEl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;searchEl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The reason the complexity of the searchEl function reaches "only" O(log(n)) is, that if we double the array we only have to make one more step as we eliminate half during each iteration. Logarithmic functions are the inverses of exponential ones. &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>productivity</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>Oruga: the new kid on the block</title>
      <author>Andrea Stagi</author>
      <pubDate>Wed, 03 Mar 2021 16:04:38 +0000</pubDate>
      <link>https://dev.to/astagi/oruga-the-new-kid-on-the-block-1n55</link>
      <guid>https://dev.to/astagi/oruga-the-new-kid-on-the-block-1n55</guid>
      <description>&lt;p&gt;If you're working with Vue.js you know that here are a lot of UI component libraries orbiting around the Vue.js world like Vuetify, Buefy, BootstrapVue and so on. Rather than coding and styling buttons, cards, and layouts, you can use these libraries to get access to all the necessary UI elements for creating beautiful, content-rich applications. However sometimes you want to switch to your custom design or try another UI framework that doesn't provide any ready-to-use Vue.js component. In such cases you would like to have a set of naked UI components on which you can apply your style: here's where Oruga comes into play!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#say-hi-to-oruga" class="anchor"&gt;
  &lt;/a&gt;
  Say Hi to Oruga! 👋
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://oruga.io"&gt;Oruga&lt;/a&gt; is a new lightweight library of UI components for Vue.js (2.x and 3.x) without any CSS framework dependency. In fact, it doesn't depend on any specific style or CSS framework and it doesn't provide any grid system or CSS utility, it just offer a set of components that you can easily customize modifying your stylesheets or integrating it with a CSS framework. It also provides a default stylesheet containing only the essential rules to display Oruga components correctly such as &lt;code&gt;display&lt;/code&gt;, &lt;code&gt;position&lt;/code&gt;, &lt;code&gt;z-index&lt;/code&gt; and other basic attributes. &lt;br&gt;
Oruga wants you to &lt;b&gt;focus only on UI/UX aspects&lt;/b&gt; of your application and &lt;b&gt;be totally flexible to future changes&lt;/b&gt; without having to touch a line of JavaScript.&lt;/p&gt;

&lt;p&gt;👉🏻 You can find useful resources and links at the end of the article!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#setup" class="anchor"&gt;
  &lt;/a&gt;
  Setup 🐛
&lt;/h2&gt;

&lt;p&gt;Let's start a new project for Vue.js 2.x and install Oruga package (note that Oruga is available for Nuxt.js as well, &lt;a href="https://oruga.io/documentation/#nuxt-module"&gt;see the documentation&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add @oruga-ui/oruga
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then, import Oruga default stylesheet, the &lt;code&gt;Config&lt;/code&gt; component and the &lt;code&gt;Button&lt;/code&gt; component&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Vue&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@oruga-ui/oruga&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@oruga-ui/oruga/dist/oruga.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;Vue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;code&gt;Config&lt;/code&gt; will be used for customization.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#customization" class="anchor"&gt;
  &lt;/a&gt;
  Customization
&lt;/h2&gt;

&lt;p&gt;Customization is the core feature of Oruga. You can easily override existing components style appending one or more classes using the &lt;code&gt;Config&lt;/code&gt; component. Each component has some &lt;code&gt;class properties&lt;/code&gt; that you can define to extend classes of the target component. Each class property affects a specific part of the component as you can discover using the Class props inspector in Oruga documentation. &lt;/p&gt;



&lt;p&gt;Suppose we want to style our Oruga components using a cool CSS framework like &lt;a href="https://nostalgic-css.github.io/NES.css/"&gt;Nes.css&lt;/a&gt; to give our app a cool 90s style.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1pkNKEzD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3stfvh0s0xn6lu5xuoqr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1pkNKEzD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3stfvh0s0xn6lu5xuoqr.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;To install Nes.css run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add nes.css 
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;(add &lt;code&gt;--ignore-engines&lt;/code&gt; to the command above if you're using Node.js &amp;gt; 10.x)&lt;/p&gt;

&lt;p&gt;And import it in your project&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;nes.css/css/nes.min.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Let's start with a simple &lt;a href="https://oruga.io/components/Button.html"&gt;Button component&lt;/a&gt; from Oruga.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;o-button&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;click=&lt;/span&gt;&lt;span class="s"&gt;"search"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Search&lt;span class="nt"&gt;&amp;lt;/o-button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Nes.css provides &lt;code&gt;nes-btn&lt;/code&gt; class for buttons, so we can extend Oruga Button component using the Config object&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;Vue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;button&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;rootClass&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;nes-btn&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;When you instantiate a new Oruga Button, you'll have the class &lt;code&gt;nes-btn&lt;/code&gt; automagically applied to your component, alongside default classes applied on that part of the component. If you wish to override default classes and use only your custom class, you can assign to &lt;code&gt;rootClass&lt;/code&gt; an object, with the &lt;code&gt;override&lt;/code&gt; attribute set to &lt;code&gt;true&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;Vue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;button&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;rootClass&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;nes-btn&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;override&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Using the Class props inspector we can easily find the class name to add a class when the button is disabled (in this case &lt;code&gt;disabledClass&lt;/code&gt;), then we can extend our configuration overriding all the class props of o-button we need to customize&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;Vue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;button&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;override&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;rootClass&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;nes-btn&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;disabledClass&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;is-disabled&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Result&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/musing-shannon-d34kk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Sometimes you may need more flexibility to extend classes and decide programmatically which class to apply to our component, especially when you have to deal with variant or position classes. Many Oruga components has some classes applied when certain properties change, like &lt;code&gt;position&lt;/code&gt; and &lt;code&gt;variant&lt;/code&gt;, on the other side Nes.css provides "variant" classes like &lt;code&gt;is-success&lt;/code&gt; and &lt;code&gt;is-warning&lt;/code&gt; and "position" classes like &lt;code&gt;is-centered&lt;/code&gt;. For example, how can I apply the correct class in this case?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;o-button&lt;/span&gt; &lt;span class="na"&gt;variant=&lt;/span&gt;&lt;span class="s"&gt;"warning"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Warning!&lt;span class="nt"&gt;&amp;lt;/o-button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Follwing the Class prop inspector we can easily find that the Class prop we need to override is &lt;code&gt;variantClass&lt;/code&gt; but its values are not fixed, it could be &lt;code&gt;is-warning&lt;/code&gt;, &lt;code&gt;is-error&lt;/code&gt;, &lt;code&gt;is-success&lt;/code&gt; depending on variant value as you can see in the &lt;code&gt;Suffixes&lt;/code&gt; column&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qKEQHiAM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oce0a6w8c2oa0keb3rxk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qKEQHiAM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oce0a6w8c2oa0keb3rxk.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Oruga provides an easy way to help us: you can extend classes using functions! A function will receive two parameters: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a &lt;code&gt;suffix&lt;/code&gt; (that will receive for example &lt;code&gt;waring&lt;/code&gt;, &lt;code&gt;success&lt;/code&gt;, &lt;code&gt;error&lt;/code&gt; in case of variants or &lt;code&gt;centered&lt;/code&gt;, &lt;code&gt;right&lt;/code&gt;.. in case of positions)&lt;/li&gt;
&lt;li&gt;a &lt;code&gt;context&lt;/code&gt; containing the context of the component instance.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To extend variantClass with Nes.css for Button we can simply do that&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;Vue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;button&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;rootClass&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;nes-btn&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;variantClass&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;suffix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`is-&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;suffix&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Result:&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/crazy-almeida-bpk2s"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;variantClass&lt;/code&gt; is determined by a function that will receive &lt;code&gt;"warning"&lt;/code&gt; as suffix when variant property of &lt;code&gt;o-button&lt;/code&gt; is "warning". Using a function we can instruct Oruga to apply to our Button components a class whose name is composed by "is-" followed by the suffix value, in this case the variant. Thanks to the &lt;code&gt;context&lt;/code&gt; parameter, you can take more refined decisions like not applying a variant if the component is outlined (see an example &lt;a href="https://github.com/oruga-ui/demo-multiframework/blob/master/src/views/Bootstrap.vue#L24"&gt;here&lt;/a&gt;)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-pok%C3%A8mon-finder-with-oruga-and-nescss" class="anchor"&gt;
  &lt;/a&gt;
  A Pokèmon finder with Oruga and Nes.css
&lt;/h2&gt;

&lt;p&gt;Using Oruga and Nes.css I built a simple Pokèmon finder to search some statistics of my favourites Pokèmon taking advantage of the cool &lt;a href="https://pokeapi.co/"&gt;PokèAPI&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a9b7D7sW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3n28nt2cgdlahxvl3rna.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a9b7D7sW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3n28nt2cgdlahxvl3rna.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;The app is really simple: it allows you to type Pokèmon name you want to find, press a button and then, through the API, get all the information you need and show them in a table. If the Pokèmon can't be found, the search input will turn red (variant="error") and an error message will be shown. You can play with the app on &lt;a href="https://happy-mestorf-628bac.netlify.app/"&gt;Netlify&lt;/a&gt; and &lt;a href="https://github.com/astagi/orugamon"&gt;browse the final code on GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BjCsm-n0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hyd7rwbj6e49818vuxg8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BjCsm-n0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hyd7rwbj6e49818vuxg8.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;As you can see in the &lt;a href="https://github.com/astagi/orugamon/blob/master/src/main.js"&gt;main.js file&lt;/a&gt; the final configuration for Oruga is really simple.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#useful-resources" class="anchor"&gt;
  &lt;/a&gt;
  Useful resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://oruga.io/"&gt;Oruga official website and documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/oruga-ui/oruga"&gt;GitHub organization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://discord.com/invite/RuKuBYN"&gt;Discord channel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/oruga_ui"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can also play with other cool Oruga examples&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://oruga-multiframework-demo.netlify.app"&gt;TailwindCSS, Bootstrap 5, Bulma and Material demo&lt;/a&gt; - &lt;a href="https://github.com/oruga-ui/demo-multiframework"&gt;Source code&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://oruga-tailwindcss-demo.netlify.app"&gt;TailwindCSS 2 Recipe Demo&lt;/a&gt; - &lt;a href="https://github.com/oruga-ui/demo-tailwindcss"&gt;Source code&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>vue</category>
      <category>css</category>
      <category>ux</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Understanding Global execution context and Execution context stack</title>
      <author>Logeshwaran</author>
      <pubDate>Wed, 03 Mar 2021 15:07:11 +0000</pubDate>
      <link>https://dev.to/thelogeshwaran/understanding-global-execution-context-and-execution-context-scope-2nc</link>
      <guid>https://dev.to/thelogeshwaran/understanding-global-execution-context-and-execution-context-scope-2nc</guid>
      <description>&lt;p&gt;This blog will help you understand javascript better, here you will learn about &lt;em&gt;Execution context&lt;/em&gt; and &lt;em&gt;Execution context stack&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#execution-contextec" class="anchor"&gt;
  &lt;/a&gt;
  Execution context(EC)
&lt;/h2&gt;

&lt;p&gt;It is like an environment where javascript code is evaluated and executed. Whenever any code in javascript is executed, it is run in &lt;em&gt;Execution context&lt;/em&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#types-of-execution-context" class="anchor"&gt;
  &lt;/a&gt;
  Types of Execution context
&lt;/h4&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;            1. Global Execution context 
            2. Functional Execution context
            3. Eval function Execution context.
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h4&gt;
  &lt;a href="#global-execution-context" class="anchor"&gt;
  &lt;/a&gt;
  Global Execution context
&lt;/h4&gt;

&lt;p&gt;This is the default execution context. The global code, (i.e the code which is not in the function and object) is executed in it.&lt;br&gt;
Since javascript is single-threaded, only one execution context is possible.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#function-execution-context" class="anchor"&gt;
  &lt;/a&gt;
  Function Execution context
&lt;/h4&gt;

&lt;p&gt;The code inside the function is executed here. Multiple execution contexts are possible because there will be chances of having multiple functions inside one program.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#eval-function-execution-context" class="anchor"&gt;
  &lt;/a&gt;
  Eval function Execution context
&lt;/h4&gt;

&lt;p&gt;The code inside the eval function is executed here. This is the rare function used by developers.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#execution-context-stack" class="anchor"&gt;
  &lt;/a&gt;
  Execution Context stack
&lt;/h2&gt;

&lt;p&gt;It is used to store the execution contexts. Whenever the javascript code starts its execution global execution context is created and the execution context stack is created &lt;em&gt;(Calling stack)&lt;/em&gt;. It works based on 'Last in, first out'.&lt;br&gt;&lt;br&gt;
 When the javascript engine starts executing the javascript code &lt;em&gt;global execution context&lt;/em&gt; is created and pushed on the top of the call stack. When it reaches a function in a code, the functional execution context is created and pushed on the top of the stack. &lt;/p&gt;

&lt;p&gt;It looks kinda overwhelming, right?. Let me explain with a simple program and diagrams.&lt;/p&gt;

&lt;p&gt;Let's take a small code.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;     &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

     &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
       &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;First&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
       &lt;span class="nx"&gt;second&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;//Second function is called here.&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

     &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;second&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Second&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

     &lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="c1"&gt;//first function is called here.&lt;/span&gt;

     &lt;span class="nx"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;End&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;When the JS engine starts executing, the global execution context is created and pushed to the top of the call stack.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qs8jOmPk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g2f407dnh59v474hag4r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qs8jOmPk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g2f407dnh59v474hag4r.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After it prints Hello, it starts executing line by line. When the JS reaches the line(shown below), the first function is pushed to the top of the call stack and starts executed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZMtzsTr_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m8269nr9nrvbv1fhsafq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZMtzsTr_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m8269nr9nrvbv1fhsafq.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After pushing to the call stack, It starts executing the first function line by line. So, it prints &lt;em&gt;"first"&lt;/em&gt; and there is the second function is called. When the JS engine reaches the line(shown below), the second function is called and it is pushed into the call stack.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;second&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hVlPnXol--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sujapbpy82m8i32f5low.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hVlPnXol--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sujapbpy82m8i32f5low.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The second function starts executed and prints "second". After that inside the second function, there is nothing to execute. After completing the execution of the second function, it is popped out of the stack. This is called "Last in, first-out". After that, there is nothing to execute in the first function. So, it is popped out of the call stack. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WbZm2Ivx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/urf5zhbbb4pzkxkqiy36.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WbZm2Ivx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/urf5zhbbb4pzkxkqiy36.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After executing all the code, the global execution context is popped out of the call stack. This is how the execution context stack is created.&lt;/p&gt;

&lt;p&gt;Now, let's talk about the Execution context. It has two phases,&lt;br&gt;
 1.Creation phase &lt;br&gt;
 2.Execution phase&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#creation-phase" class="anchor"&gt;
  &lt;/a&gt;
  Creation phase
&lt;/h3&gt;

&lt;p&gt;In this phase the JS engine scan through the code, it allocates memory for all variables and functions. For variables, it will allocate memory and assign an undefined. It will not execute any code.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#execution-phase" class="anchor"&gt;
  &lt;/a&gt;
  Execution phase
&lt;/h3&gt;

&lt;p&gt;In this phase, the JS engine starts executing the code line by line. It assigns values to the variable and executes the function calls.&lt;/p&gt;

&lt;p&gt;Let's take some example code,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;   &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 

   &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
     &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;num1&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;addition&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;addition&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In the creation phase, the variables are stored "key: value" pairs(shown in the diagram). Now the code is not executed, just memory is allocated, for the variables it allocates undefined, and for function, it just copied the code. Along with this, it creates a global object (i.e window in the browsers) and creates &lt;em&gt;this&lt;/em&gt; binding object, which points global object.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cQAjnjwV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/whkg9y9wmieclm081eqh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cQAjnjwV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/whkg9y9wmieclm081eqh.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now it starts executing the code line by line, in execution code, the values are assigned to a variable(shown below). When it reaches the function add another execution context is created. It is called a functional execution context. In that also two phases are there, creation and execution. Inside that creation phase, memory is allocated for the variables with the value of undefined(shown below).&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2S5IwqsF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/28bx1upx65jm5o5osgfe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2S5IwqsF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/28bx1upx65jm5o5osgfe.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After that execution starts and values are assigned and execution start (i.e values are added and stored in the result). The below diagram shows that function is executed and stored.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EtaAQLbV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dwnfnztbuvr7mjkpogl2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EtaAQLbV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dwnfnztbuvr7mjkpogl2.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After that, it returns the value and stores it in the addition variable.&lt;br&gt;
Now the add function is popped out of the stack.(shown below)&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K9Lh8YEh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8raul1x0aj4qx3mo64hw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K9Lh8YEh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8raul1x0aj4qx3mo64hw.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After printing the variable the global execution context is popped out of the call stack.&lt;/p&gt;

&lt;p&gt;That’s it and if you found this article helpful please hit the like  button and feel free to comment below! I’d be happy to talk 😃.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>understanding</category>
    </item>
    <item>
      <title>Rails 6, Bootstrap 5 : a tutorial</title>
      <author>David Boureau</author>
      <pubDate>Wed, 03 Mar 2021 14:36:57 +0000</pubDate>
      <link>https://dev.to/bdavidxyz/rails-6-bootstrap-5-a-tutorial-525n</link>
      <guid>https://dev.to/bdavidxyz/rails-6-bootstrap-5-a-tutorial-525n</guid>
      <description>&lt;p&gt;Content was originally posted &lt;a href="https://bootrails.com/blog/rails-bootstrap-tutorial"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Bootstrap 5 is highly customisable and delightful when you need to deliver a consistent design as fast as possible. Let's see how to use it with the last Rails 6 version.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites" class="anchor"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;Here are the tools I used for this tutorial. Older versions may work, but I didn't try.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$&amp;gt;&lt;/span&gt; ruby &lt;span class="nt"&gt;--version&lt;/span&gt;  
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; 3.0.0  
&lt;span class="nv"&gt;$&amp;gt;&lt;/span&gt; rails &lt;span class="nt"&gt;--version&lt;/span&gt;  
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; 6.1.3  
&lt;span class="nv"&gt;$&amp;gt;&lt;/span&gt; node &lt;span class="nt"&gt;--version&lt;/span&gt;  
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; 14.15.1  
&lt;span class="nv"&gt;$&amp;gt;&lt;/span&gt; yarn &lt;span class="nt"&gt;--version&lt;/span&gt;  
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; 1.22.10  
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#1-create-new-rails-app" class="anchor"&gt;
  &lt;/a&gt;
  1. Create new Rails app
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$&amp;gt;&lt;/span&gt; rails new myapp &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd &lt;/span&gt;myapp  
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now wait for a minute... okay ! you have now a fresh new default Rails app.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-build-a-welcome-page" class="anchor"&gt;
  &lt;/a&gt;
  2. Build a welcome page
&lt;/h2&gt;

&lt;p&gt;Create a controller as follow in app/controllers/welcome_controller.rb&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# inside app/controllers/welcome_controller.rb  &lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;WelcomeController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationController&lt;/span&gt;  
&lt;span class="k"&gt;end&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Configure a default route in config/routes.rb as follow&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# inside config/routes.rb  &lt;/span&gt;
&lt;span class="no"&gt;Rails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;draw&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;  
  &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="s2"&gt;"welcome/index"&lt;/span&gt;  
  &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="ss"&gt;to: &lt;/span&gt;&lt;span class="s2"&gt;"welcome#index"&lt;/span&gt;  
&lt;span class="k"&gt;end&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now we have to make this simple example &lt;strong&gt;complex enough&lt;/strong&gt; 😬 to ensure all CSS, JavaScript component works.&lt;br&gt;&lt;br&gt;
Don't worry, just copy/paste the code below into &lt;em&gt;app/views/welcome/index.html.erb&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- inside app/views/welcome/index.html.erb --&amp;gt;&lt;/span&gt;  
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"collapse"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"navbarToggleExternalContent"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"bg-dark p-4"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h5&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text-white h4"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Collapsed content&lt;span class="nt"&gt;&amp;lt;/h5&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text-muted"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Toggleable via the navbar brand.&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;nav&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"navbar navbar-dark bg-dark"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container-fluid"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"navbar-toggler"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="na"&gt;data-bs-toggle=&lt;/span&gt;&lt;span class="s"&gt;"collapse"&lt;/span&gt; &lt;span class="na"&gt;data-bs-target=&lt;/span&gt;&lt;span class="s"&gt;"#navbarToggleExternalContent"&lt;/span&gt; &lt;span class="na"&gt;aria-controls=&lt;/span&gt;&lt;span class="s"&gt;"navbarToggleExternalContent"&lt;/span&gt; &lt;span class="na"&gt;aria-expanded=&lt;/span&gt;&lt;span class="s"&gt;"false"&lt;/span&gt; &lt;span class="na"&gt;aria-label=&lt;/span&gt;&lt;span class="s"&gt;"Toggle navigation"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"navbar-toggler-icon"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/nav&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;main&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"py-5 text-center container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"row py-lg-5"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"col-lg-6 col-md-8 mx-auto"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fw-light"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Album example&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"lead text-muted"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Something short and leading about the collection below—its contents, the creator, etc. Make it short and sweet, but not too short so folks don’t simply skip over it entirely.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-primary my-2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Main call to action&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-secondary my-2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Secondary action&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/main&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Ensure the application works by running&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$/&lt;/span&gt;myapp&amp;gt; bin/rails server  
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And open localhost:3000 to your browser  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LxxeaNYP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/bdavidxyz-com/image/upload/v1614073025/blog/raw_data.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LxxeaNYP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/bdavidxyz-com/image/upload/v1614073025/blog/raw_data.png" alt="Raw image, Bootstrap v5 is not yet installed"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;Ok, no style so far.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-choose-a-frontend-manager" class="anchor"&gt;
  &lt;/a&gt;
  3. Choose a front-end manager
&lt;/h2&gt;

&lt;p&gt;For historical reasons, Rails 6 has two different tools to manage frontend assets (CSS, JavaScript, images, etc). The old one is named "Sprockets", and is not much used outside the Rails scope. The new one is named "Webpacker", and relies on mature, widely used Webpack. Therefore, I don't recommend using Sprockets anymore for new projects, especially since version 5 of webpacker. It is a lot more stable, and can handle multiple packs.  &lt;/p&gt;

&lt;p&gt;Ensure your Gemfile include at least version 5 of webpacker :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s1"&gt;'webpacker'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'~&amp;gt; 5.0'&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If not, include version 5 as above and run "bundle install"  &lt;/p&gt;

&lt;p&gt;Now we want webpacker to handle &lt;strong&gt;all our assets&lt;/strong&gt;, not just JavaScript. Rename &lt;code&gt;app/javascript&lt;/code&gt; to &lt;code&gt;app/frontend&lt;/code&gt;, like this :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$/&lt;/span&gt;myapp&amp;gt; &lt;span class="nb"&gt;mv &lt;/span&gt;app/javascript app/frontend  
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In webpacker.yml, warn webpack that we changed the name of the assets folder :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Inside webpacker.yml, first lines  &lt;/span&gt;
&lt;span class="na"&gt;default&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nl"&gt;&amp;amp;default&lt;/span&gt;  
&lt;span class="na"&gt;source_path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;app/frontend&lt;/span&gt; &lt;span class="c1"&gt;# Change here  &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#4-install-bootstrap-v5" class="anchor"&gt;
  &lt;/a&gt;
  4. Install Bootstrap v5
&lt;/h2&gt;

&lt;p&gt;Add latest Bootstrap version, and PopperJs (a mandatory dependency) as follow :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$/&lt;/span&gt;myapp&amp;gt; yarn add bootstrap@5.0.0-beta2  
&lt;span class="nv"&gt;$/&lt;/span&gt;myapp&amp;gt; yarn add @popperjs/core@2.0.0-alpha.1  
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#5-inject-bootstrap-into-your-application" class="anchor"&gt;
  &lt;/a&gt;
  5. Inject Bootstrap into your application
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#5a-inject-boostraps-js-files" class="anchor"&gt;
  &lt;/a&gt;
  5a) Inject Boostrap's JS files
&lt;/h3&gt;

&lt;p&gt;Create JS file : app/frontend/js/bootstrap_js_files.js, and import Bootstrap-related JS files, as follow :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$/&lt;/span&gt;myapp&amp;gt; &lt;span class="nb"&gt;mkdir &lt;/span&gt;app/frontend/js &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;touch &lt;/span&gt;app/frontend/js/bootstrap_js_files.js  
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// inside app/frontend/js/bootstrap_js_files.js  &lt;/span&gt;

&lt;span class="c1"&gt;// import 'bootstrap/js/src/alert'  &lt;/span&gt;
&lt;span class="c1"&gt;// import 'bootstrap/js/src/button'  &lt;/span&gt;
&lt;span class="c1"&gt;// import 'bootstrap/js/src/carousel'  &lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bootstrap/js/src/collapse&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;  
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bootstrap/js/src/dropdown&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;  
&lt;span class="c1"&gt;// import 'bootstrap/js/src/modal'  &lt;/span&gt;
&lt;span class="c1"&gt;// import 'bootstrap/js/src/popover'  &lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bootstrap/js/src/scrollspy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;  
&lt;span class="c1"&gt;// import 'bootstrap/js/src/tab'  &lt;/span&gt;
&lt;span class="c1"&gt;// import 'bootstrap/js/src/toast'  &lt;/span&gt;
&lt;span class="c1"&gt;// import 'bootstrap/js/src/tooltip'  &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Note we don't import all Bootstrap JS files, we only import the ones needed by the project (for the navbar).  &lt;/p&gt;

&lt;p&gt;Now import this file into the main JS file app/frontend/packs/application.js :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// inside app/frontend/packs/application.js  &lt;/span&gt;

&lt;span class="c1"&gt;// Add this line  &lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../js/bootstrap_js_files.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#5b-inject-bootstraps-styles" class="anchor"&gt;
  &lt;/a&gt;
  5b) inject Bootstrap's styles
&lt;/h3&gt;

&lt;p&gt;Create the main CSS file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$/&lt;/span&gt;myapp&amp;gt; &lt;span class="nb"&gt;touch &lt;/span&gt;app/frontend/packs/application.scss  
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Inside, import Bootstrap&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="c1"&gt;// inside app/frontend/packs/application.scss  &lt;/span&gt;

&lt;span class="c1"&gt;// Just a quick ugly style to see if our CSS works  &lt;/span&gt;
&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
  &lt;span class="nl"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;underline&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;  

&lt;span class="c1"&gt;// Import Bootstrap v5  &lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s2"&gt;"~bootstrap/scss/bootstrap"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now tell Rails where is your main CSS file, inside app/views/layouts/application.html.erb&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Myapp&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width,initial-scale=1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;%=&lt;/span&gt; &lt;span class="na"&gt;csrf_meta_tags&lt;/span&gt; &lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;%=&lt;/span&gt; &lt;span class="na"&gt;csp_meta_tag&lt;/span&gt; &lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="c"&gt;&amp;lt;!-- Warning !! ensure that "stylesheet_pack_tag" is used, line below --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;%=&lt;/span&gt; &lt;span class="na"&gt;stylesheet_pack_tag&lt;/span&gt; &lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="na"&gt;application&lt;/span&gt;&lt;span class="err"&gt;',&lt;/span&gt; &lt;span class="na"&gt;media:&lt;/span&gt; &lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="na"&gt;all&lt;/span&gt;&lt;span class="err"&gt;',&lt;/span&gt; &lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="na"&gt;data-turbolinks-track&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="na"&gt;:&lt;/span&gt; &lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="na"&gt;reload&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt; &lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;%=&lt;/span&gt; &lt;span class="na"&gt;javascript_pack_tag&lt;/span&gt; &lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="na"&gt;application&lt;/span&gt;&lt;span class="err"&gt;',&lt;/span&gt; &lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="na"&gt;data-turbolinks-track&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="na"&gt;:&lt;/span&gt; &lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="na"&gt;reload&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt; &lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;%=&lt;/span&gt; &lt;span class="na"&gt;yield&lt;/span&gt; &lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#5c-check-everything-works" class="anchor"&gt;
  &lt;/a&gt;
  5c) Check everything works
&lt;/h3&gt;

&lt;p&gt;Stop your Rails server. We've changed a lot of frontend assets, so we do a little cleanup/recompile before to restart our rails server.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$/&lt;/span&gt;myapp&amp;gt; bin/rails assets:clobber  
&lt;span class="nv"&gt;$/&lt;/span&gt;myapp&amp;gt; bin/rails webpacker:compile  
&lt;span class="nv"&gt;$/&lt;/span&gt;myapp&amp;gt; bin/rails server  
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And open browser at localhost:3000.  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If the style looks like Bootstrap, yay ! Our import of Bootstrap's CSS file has worked.
&lt;/li&gt;
&lt;li&gt;If clicking on the hamburger menu means toggling navbar, yay ! Our import of Bootstrap's JS file has worked.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bshGhfeR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/bdavidxyz-com/image/upload/v1614076337/blog/good_result.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bshGhfeR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/bdavidxyz-com/image/upload/v1614076337/blog/good_result.png" alt="it works!"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-more-to-come" class="anchor"&gt;
  &lt;/a&gt;
  6 More to come
&lt;/h2&gt;

&lt;p&gt;Final code can be found &lt;a href="https://github.com/bdavidxyz/bootstraprails"&gt;here&lt;/a&gt;. That's all for today, given the number of steps involved to get this result. However, I'd like to add :  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How to copy/paste SCSS file to get a deep Bootstrap customisation,
&lt;/li&gt;
&lt;li&gt;How to manage images
&lt;/li&gt;
&lt;li&gt;How to manage fonts
&lt;/li&gt;
&lt;li&gt;How to optimize assets
&lt;/li&gt;
&lt;li&gt;Probably other things I'm not thinking about right now. Stay tuned !&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
      <category>bootstrap</category>
      <category>sass</category>
    </item>
    <item>
      <title>Backup MySQL Databases in Kubernetes</title>
      <author>Alex Wellnitz</author>
      <pubDate>Wed, 03 Mar 2021 14:22:42 +0000</pubDate>
      <link>https://dev.to/n00d13/backup-mysql-databases-in-kubernetes-2g6k</link>
      <guid>https://dev.to/n00d13/backup-mysql-databases-in-kubernetes-2g6k</guid>
      <description>&lt;p&gt;In this post, we will show you how to create a MySQL server backup using Kubernetes CronJobs.&lt;/p&gt;

&lt;p&gt;In our case, we do not have a managed MySQL server. But we want to backup it to our NAS, so that we have a backup in case of emergency.&lt;br&gt;
For this we first build a container that can execute our tasks, because we will certainly need several tasks to backup our cluster.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#cronjob-agent-container" class="anchor"&gt;
  &lt;/a&gt;
  CronJob Agent Container
&lt;/h2&gt;

&lt;p&gt;First, we'll show you our Dockerfile so you know what we need.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; alpine:3.10&lt;/span&gt;

&lt;span class="c"&gt;# Update&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;apk &lt;span class="nt"&gt;--update&lt;/span&gt; add &lt;span class="nt"&gt;--no-cache&lt;/span&gt; bash nodejs-current yarn curl busybox-extras vim rsync git mysql-client openssh-client 
&lt;span class="k"&gt;RUN &lt;/span&gt;curl &lt;span class="nt"&gt;-LO&lt;/span&gt; https://storage.googleapis.com/kubernetes-release/release/v1.18.0/bin/linux/amd64/kubectl &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;chmod&lt;/span&gt; +x ./kubectl &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;mv&lt;/span&gt; ./kubectl /usr/local/bin/kubectl

&lt;span class="c"&gt;# Scripts&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;&lt;span class="nb"&gt;mkdir&lt;/span&gt; /srv/jobs
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; jobs/* /srv/jobs/&lt;/span&gt;

&lt;span class="c"&gt;# Backup Folder&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;&lt;span class="nb"&gt;mkdir&lt;/span&gt; /var/backup
&lt;span class="k"&gt;RUN &lt;/span&gt;&lt;span class="nb"&gt;mkdir&lt;/span&gt; /var/backup/mysql
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#backup-script" class="anchor"&gt;
  &lt;/a&gt;
  Backup Script
&lt;/h2&gt;

&lt;p&gt;And now our backup script which the container executes.&lt;/p&gt;

&lt;p&gt;Our script is quite simple, we get all tables with the mysql client, export them as sql file, pack them in a zip file and send them in a 8 hours interval to our NAS.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="c"&gt;############# SET VARIABLES #############&lt;/span&gt;

&lt;span class="c"&gt;# Env Variables&lt;/span&gt;
&lt;span class="nv"&gt;BACKUPSERVER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"8.8.8.8"&lt;/span&gt; &lt;span class="c"&gt;# Backup Server Ip&lt;/span&gt;
&lt;span class="nv"&gt;BACKUPDIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/var/backup/mysql
&lt;span class="nv"&gt;BACKUPREMOTEDIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"/mnt/backup/kubernetes/"&lt;/span&gt;
&lt;span class="nv"&gt;HOST&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"mariadb.default"&lt;/span&gt;
&lt;span class="nv"&gt;NOW&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;date&lt;/span&gt; +&lt;span class="s2"&gt;"%Y-%m-%d"&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="nv"&gt;STARTTIME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;date&lt;/span&gt; +&lt;span class="s2"&gt;"%s"&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;USER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;mysqlUser
&lt;span class="nv"&gt;PASS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;mysqlPassword


&lt;span class="c"&gt;############# BUILD ENVIROMENT #############&lt;/span&gt;
&lt;span class="c"&gt;# Check if temp Backup Directory is empty&lt;/span&gt;
&lt;span class="nb"&gt;mkdir&lt;/span&gt; &lt;span class="nv"&gt;$BACKUPDIR&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;ls&lt;/span&gt; &lt;span class="nt"&gt;-A&lt;/span&gt; &lt;span class="nv"&gt;$BACKUPDIR&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Take action &lt;/span&gt;&lt;span class="nv"&gt;$BACKUPDIR&lt;/span&gt;&lt;span class="s2"&gt; is not Empty"&lt;/span&gt;
    &lt;span class="nb"&gt;rm&lt;/span&gt; &lt;span class="nt"&gt;-f&lt;/span&gt; &lt;span class="nv"&gt;$BACKUPDIR&lt;/span&gt;/&lt;span class="k"&gt;*&lt;/span&gt;.gz
    &lt;span class="nb"&gt;rm&lt;/span&gt; &lt;span class="nt"&gt;-f&lt;/span&gt; &lt;span class="nv"&gt;$BACKUPDIR&lt;/span&gt;/&lt;span class="k"&gt;*&lt;/span&gt;.mysql
&lt;span class="k"&gt;else
    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$BACKUPDIR&lt;/span&gt;&lt;span class="s2"&gt; is Empty"&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="c"&gt;############# BACKUP SQL DATABASES #############&lt;/span&gt;
&lt;span class="k"&gt;for &lt;/span&gt;DB &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="si"&gt;$(&lt;/span&gt;mysql &lt;span class="nt"&gt;-u&lt;/span&gt;&lt;span class="nv"&gt;$USER&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt;&lt;span class="nv"&gt;$PASS&lt;/span&gt; &lt;span class="nt"&gt;-h&lt;/span&gt; &lt;span class="nv"&gt;$HOST&lt;/span&gt; &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="s1"&gt;'show databases'&lt;/span&gt; &lt;span class="nt"&gt;-s&lt;/span&gt; &lt;span class="nt"&gt;--skip-column-names&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do
    &lt;/span&gt;mysqldump &lt;span class="nt"&gt;-u&lt;/span&gt;&lt;span class="nv"&gt;$USER&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt;&lt;span class="nv"&gt;$PASS&lt;/span&gt; &lt;span class="nt"&gt;-h&lt;/span&gt; &lt;span class="nv"&gt;$HOST&lt;/span&gt; &lt;span class="nt"&gt;--lock-tables&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt; &lt;span class="nv"&gt;$DB&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$BACKUPDIR&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;$DB&lt;/span&gt;&lt;span class="s2"&gt;.sql"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;

&lt;span class="c"&gt;############# ZIP BACKUP #############&lt;/span&gt;
&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$BACKUPDIR&lt;/span&gt;
&lt;span class="nb"&gt;tar&lt;/span&gt; &lt;span class="nt"&gt;-zcvf&lt;/span&gt; backup-&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;NOW&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;.tar.gz &lt;span class="k"&gt;*&lt;/span&gt;.sql

&lt;span class="c"&gt;############# MOVE BACKUP TO REMOTE #############&lt;/span&gt;
rsync &lt;span class="nt"&gt;-avz&lt;/span&gt; &lt;span class="nv"&gt;$BACKUPDIR&lt;/span&gt;/backup-&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;NOW&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;.tar.gz root@&lt;span class="nv"&gt;$BACKUPSERVER&lt;/span&gt;:&lt;span class="nv"&gt;$BACKUPREMOTEDIR&lt;/span&gt;

&lt;span class="c"&gt;# done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#kubernetes-cronjob-deployment" class="anchor"&gt;
  &lt;/a&gt;
  Kubernetes CronJob Deployment
&lt;/h2&gt;

&lt;p&gt;Finally we show you the kubernetes deployment for our agent.&lt;/p&gt;

&lt;p&gt;In the deployment, our agent is defined as a CronJob that runs every 8 hours.&lt;br&gt;
In addition, we have added an SSH key as a Conifg map so that this can write to the NAS and a certain security is given.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;batch/v1beta1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;CronJob&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;backup-mariadb&lt;/span&gt;
  &lt;span class="na"&gt;namespace&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;default&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;schedule&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;0&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;8&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*"&lt;/span&gt;
  &lt;span class="na"&gt;successfulJobsHistoryLimit&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
  &lt;span class="na"&gt;failedJobsHistoryLimit&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
  &lt;span class="na"&gt;jobTemplate&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;containers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;cronjob-agent&lt;/span&gt;
              &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;xxx/cronjob-agent&lt;/span&gt;
              &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;bash"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt;  &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;/srv/jobs/backup-mariadb.sh"&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
              &lt;span class="na"&gt;volumeMounts&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;mountPath&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/root/.ssh/id_rsa.pub&lt;/span&gt;
                  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;cronjob-default-config&lt;/span&gt;
                  &lt;span class="na"&gt;subPath&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;id_rsa.pub&lt;/span&gt;
                &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;mountPath&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/root/.ssh/id_rsa&lt;/span&gt;
                  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;cronjob-default-config&lt;/span&gt;
                  &lt;span class="na"&gt;subPath&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;id_rsa&lt;/span&gt;
                  &lt;span class="na"&gt;readOnly&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
                &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;mountPath&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/root/.ssh/config&lt;/span&gt;
                  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;cronjob-default-config&lt;/span&gt;
                  &lt;span class="na"&gt;subPath&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;config&lt;/span&gt;
          &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;cronjob-default-config&lt;/span&gt;
              &lt;span class="na"&gt;configMap&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;cronjob-default-config&lt;/span&gt;
                &lt;span class="na"&gt;defaultMode&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;256&lt;/span&gt;
          &lt;span class="na"&gt;restartPolicy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Never&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



</description>
      <category>docker</category>
      <category>kubernetes</category>
      <category>cronjob</category>
      <category>bash</category>
    </item>
    <item>
      <title>Git-ing Started: An intro to Git</title>
      <author>Maegan Wilson</author>
      <pubDate>Wed, 03 Mar 2021 13:58:17 +0000</pubDate>
      <link>https://dev.to/maeganwilson_/git-ing-started-an-intro-to-git-4hmb</link>
      <guid>https://dev.to/maeganwilson_/git-ing-started-an-intro-to-git-4hmb</guid>
      <description>&lt;p&gt;Let’s talk about Git. This is the first post in a series of using git. In this post, I’m going to explain these things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What is Git?&lt;/li&gt;
&lt;li&gt;Why you should be using it&lt;/li&gt;
&lt;li&gt;How to use it&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you'd rather watch a video than read though, you can do that right here also!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/TyIa5RoWAeA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-it-git" class="anchor"&gt;
  &lt;/a&gt;
  What is it Git?
&lt;/h1&gt;

&lt;p&gt;Git is “Distributed version control” meaning it keeps track of changes made to files and there is a remote server somewhere else in the world that also has those changes. A common remote server is &lt;strong&gt;&lt;a href="https://github.com/"&gt;GitHub&lt;/a&gt;&lt;/strong&gt;, which I will talk about in the next video, so make sure to hit that subscribe button and the bell to be notified when I post it.&lt;/p&gt;

&lt;p&gt;Basically, it’s like track changes in Word but for files in a repository, or folder, that are stored locally and can be pushed to a remote server if needed. These files can be any type, but it works best with text files.&lt;/p&gt;

&lt;p&gt;It’s usually used by developers to track all the changes made in source code and to collaborate on projects since it supports working on different parts of the project and merge them together. Since each computer also gets the full history of the repository, or project, the developers can also go back to another point in time and adjust things there.&lt;/p&gt;

&lt;p&gt;Those advantages also stand for being a solo dev, so let’s talk about why you should use it.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#why-you-should-use-it" class="anchor"&gt;
  &lt;/a&gt;
  Why you should use it?
&lt;/h1&gt;

&lt;p&gt;If you’re not on a team, I still say you should be using git and here are my reasons.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Allows you to see what changes are made&lt;/li&gt;
&lt;li&gt;Allows you to easily roll back changes if needed&lt;/li&gt;
&lt;li&gt;Allows you to have a backup of your developer environment if using a remote server like GitHub&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#how-does-one-use-git" class="anchor"&gt;
  &lt;/a&gt;
  How does one use git?
&lt;/h1&gt;

&lt;p&gt;We’ve talked about why and what is git, but how do you actually use git? Like what software do you need and what do you do?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#first-off-download-and-install-git" class="anchor"&gt;
  &lt;/a&gt;
  First off, download and install git
&lt;/h2&gt;

&lt;p&gt;from &lt;a href="http://git-scm.com/"&gt;git-scm.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That’s the only “extra” piece of software you need, since git can be ran through the command line&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#workflow" class="anchor"&gt;
  &lt;/a&gt;
  Workflow
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Initialize git to the repository or project folder, I’ll call it repo from here on out&lt;/li&gt;
&lt;li&gt;Create and or modify folders and files&lt;/li&gt;
&lt;li&gt;Add those files and folders to git’s staging area&lt;/li&gt;
&lt;li&gt;Commit the changes to git&lt;/li&gt;
&lt;li&gt;Push those changes if you have a remote server&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All 5 of these steps have commands, so let's work through creating a basic website that has git.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3DgJsSAq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3mwator5s4c8fxlsuzr2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3DgJsSAq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3mwator5s4c8fxlsuzr2.png" alt="Git workflow steps"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example" class="anchor"&gt;
  &lt;/a&gt;
  Example:
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#creating-a-folder-for-the-project" class="anchor"&gt;
  &lt;/a&gt;
  Creating a folder for the project
&lt;/h3&gt;

&lt;p&gt;Create a new folder, I’m going to be creating it in my &lt;code&gt;ptd&lt;/code&gt; folder, but it could really be anywhere on your computer.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#initialize-git" class="anchor"&gt;
  &lt;/a&gt;
  Initialize git
&lt;/h3&gt;

&lt;p&gt;Now, we are going to tell git to start tracking this folder.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open the terminal app or whatever you use to access the command line&lt;/li&gt;
&lt;li&gt;Change your working directory to the folder you just created

&lt;ol&gt;
&lt;li&gt;Use &lt;code&gt;cd&lt;/code&gt; followed by the path to the directory to change your working directory&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd developer/git-website&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;in the terminal, type &lt;code&gt;git init&lt;/code&gt; . Now git is working on this repo&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#create-an-indexhtml-file" class="anchor"&gt;
  &lt;/a&gt;
  Create an index.html file
&lt;/h3&gt;

&lt;p&gt;Now, let’s create a simple index.html file that just shows “GIT IS THE BEST” and make sure to save it in the git-website folder&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#stage-the-file" class="anchor"&gt;
  &lt;/a&gt;
  Stage the file
&lt;/h3&gt;

&lt;p&gt;Since, the file has been created, we need to actually tell git to track this file and the current state of the file. To do this, we use the command &lt;code&gt;git add {file path}&lt;/code&gt;. This will need to happen for any change you want git to store.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git add index.html&lt;/code&gt; adds index.html to the staging area.&lt;/p&gt;

&lt;p&gt;You can repeat this step for as many files as you need.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#record-the-changes" class="anchor"&gt;
  &lt;/a&gt;
  Record the changes
&lt;/h3&gt;

&lt;p&gt;Now, to actually tell git to record the changes that were added by committing those files. When committing files, you must specify a message.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git commit -m “Adding the index file”&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#push-those-changes" class="anchor"&gt;
  &lt;/a&gt;
  Push those changes
&lt;/h3&gt;

&lt;p&gt;Again, this step would only happen if a remote was setup, which we didn’t do in this video, but will do in the next one! So make sure to hit that subscribe button and the bell so you don’t mix it.&lt;/p&gt;

&lt;p&gt;The command to push the changes is &lt;code&gt;git push&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You’ll repeat the &lt;code&gt;git add&lt;/code&gt;, &lt;code&gt;git commit&lt;/code&gt;, and &lt;code&gt;git push&lt;/code&gt; a lot throughout the project so get used to those commands.&lt;/p&gt;




&lt;p&gt;That’s the basics of what git is, why you should use it, and how to actually use it.&lt;/p&gt;

&lt;p&gt;In the next post, I’ll talk about adding a remote server tool so that you can push your changes to a remote repo.&lt;/p&gt;

&lt;p&gt;If you found the post useful, then please share with anyone you think will find this useful.&lt;/p&gt;

</description>
      <category>git</category>
    </item>
  </channel>
</rss>
