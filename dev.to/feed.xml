<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Spring Boot, Hibernate, MySQL example: CRUD app</title>
      <author>Tien Nguyen</author>
      <pubDate>Thu, 13 May 2021 03:08:36 +0000</pubDate>
      <link>https://dev.to/tienbku/spring-boot-hibernate-mysql-example-crud-app-4mhb</link>
      <guid>https://dev.to/tienbku/spring-boot-hibernate-mysql-example-crud-app-4mhb</guid>
      <description>&lt;p&gt;In this tutorial, we're gonna build a Spring Boot, Hibernate CRUD example that interacts with MySQL database. You'll know:&lt;/p&gt;

&lt;ul&gt;
        &lt;li&gt;How to configure Spring Data JPA, Hibernate to work with MySQL Database&lt;/li&gt;
        &lt;li&gt;How to define Data Models and Repository interfaces&lt;/li&gt;
    &lt;li&gt;Way to create Spring Rest Controller to process HTTP requests&lt;/li&gt;
    &lt;li&gt;Way to use Spring Data JPA to interact with MySQL Database&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Full Article: &lt;a href="https://bezkoder.com/spring-boot-jpa-crud-rest-api/"&gt;Spring Boot, Hibernate, MySQL example: Build CRUD app&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Overview of Spring Boot, Hibernate, MySQL example&lt;/h2&gt;

&lt;p&gt;We will build a Spring Boot + MySQL CRUD example for a Tutorial application in that:&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;Each Tutotial has id, title, description, published status.&lt;/li&gt;
    &lt;li&gt;Apis help to create, retrieve, update, delete Tutorials.&lt;/li&gt;
    &lt;li&gt;Apis also support custom finder methods such as find by published status or by title.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are APIs that we need to provide:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Methods&lt;/th&gt;
&lt;th&gt;Urls&lt;/th&gt;
&lt;th&gt;Actions&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;POST&lt;/td&gt;
&lt;td&gt;/api/tutorials&lt;/td&gt;
&lt;td&gt;create new Tutorial&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;td&gt;/api/tutorials&lt;/td&gt;
&lt;td&gt;retrieve all Tutorials&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;td&gt;/api/tutorials/:id&lt;/td&gt;
&lt;td&gt;retrieve a Tutorial by &lt;code&gt;:id&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PUT&lt;/td&gt;
&lt;td&gt;/api/tutorials/:id&lt;/td&gt;
&lt;td&gt;update a Tutorial by &lt;code&gt;:id&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DELETE&lt;/td&gt;
&lt;td&gt;/api/tutorials/:id&lt;/td&gt;
&lt;td&gt;delete a Tutorial by &lt;code&gt;:id&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DELETE&lt;/td&gt;
&lt;td&gt;/api/tutorials&lt;/td&gt;
&lt;td&gt;delete all Tutorials&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;td&gt;/api/tutorials/published&lt;/td&gt;
&lt;td&gt;find all published Tutorials&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;td&gt;/api/tutorials?title=[keyword]&lt;/td&gt;
&lt;td&gt;find all Tutorials which title contains &lt;code&gt;keyword&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;We make CRUD operations &amp;amp; finder methods with Spring Data JPA's &lt;code&gt;JpaRepository&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The database could be PostgreSQL or MySQL depending on the way we configure project dependency &amp;amp; datasource.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Technology&lt;/h2&gt;

&lt;ul&gt;
        &lt;li&gt;Java 8&lt;/li&gt;
        &lt;li&gt;Spring Boot 2 (with Spring Web MVC, Spring Data JPA)&lt;/li&gt;
        &lt;li&gt;MySQL&lt;/li&gt;
        &lt;li&gt;Maven&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Project Structure&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7R-HckZl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/glc66vjscv4174g2cbn2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7R-HckZl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/glc66vjscv4174g2cbn2.png" alt="spring-boot-hibernate-mysql-example-crud-project-structure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let me explain it briefly.&lt;/p&gt;

&lt;p&gt;– &lt;code&gt;Tutorial&lt;/code&gt; data model class corresponds to entity and table &lt;em&gt;tutorials&lt;/em&gt;.&lt;br&gt;
– &lt;code&gt;TutorialRepository&lt;/code&gt; is an interface that extends &lt;a href="https://docs.spring.io/spring-data/jpa/docs/current/api/org/springframework/data/jpa/repository/JpaRepository.html"&gt;JpaRepository&lt;/a&gt; for CRUD methods and custom finder methods. It will be autowired in &lt;code&gt;TutorialController&lt;/code&gt;.&lt;br&gt;
– &lt;code&gt;TutorialController&lt;/code&gt; is a &lt;a href="https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/bind/annotation/RestController.html"&gt;RestController&lt;/a&gt; which has request mapping methods for RESTful requests such as: &lt;em&gt;getAllTutorials&lt;/em&gt;, &lt;em&gt;createTutorial&lt;/em&gt;, &lt;em&gt;updateTutorial&lt;/em&gt;, &lt;em&gt;deleteTutorial&lt;/em&gt;, &lt;em&gt;findByPublished&lt;/em&gt;...&lt;br&gt;
– Configuration for Spring Datasource, JPA &amp;amp; Hibernate in &lt;strong&gt;application.properties&lt;/strong&gt;.&lt;br&gt;
– &lt;strong&gt;pom.xml&lt;/strong&gt; contains dependencies for Spring Boot and MySQL/PostgreSQL.&lt;/p&gt;

&lt;h2&gt;Video&lt;/h2&gt;

&lt;p&gt;This is demo video and brief instruction of Spring Boot Rest Apis with Hibernate, MySQL example using Spring Data JPA:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/wJx3xxp2urc"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#source-code"&gt;
  &lt;/a&gt;
  Source Code
&lt;/h2&gt;

&lt;p&gt;For step by step instruction and Github, please visit:&lt;br&gt;
&lt;a href="https://bezkoder.com/spring-boot-jpa-crud-rest-api/"&gt;Spring Boot, Hibernate, MySQL example: Build CRUD app&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#further-reading"&gt;
  &lt;/a&gt;
  Further Reading
&lt;/h2&gt;

&lt;p&gt;If you want to add Pagination to this Spring project, you can find the instruction at:&lt;br&gt;
&lt;a href="https://bezkoder.com/spring-boot-pagination-filter-jpa-pageable/"&gt;Spring Boot Pagination &amp;amp; Filter example | Spring JPA, Pageable&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To sort/order by multiple fields:&lt;br&gt;
&lt;a href="https://bezkoder.com/spring-data-sort-multiple-columns/"&gt;Spring Data JPA Sort/Order by multiple Columns | Spring Boot&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Handle Exception for this Rest APIs is necessary:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/spring-boot-controlleradvice-exceptionhandler/"&gt;Spring Boot @ControllerAdvice &amp;amp; @ExceptionHandler example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/spring-boot-restcontrolleradvice/"&gt;@RestControllerAdvice example in Spring Boot&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Or way to write Unit Test for the JPA Repository:&lt;br&gt;
&lt;a href="https://bezkoder.com/spring-boot-unit-test-jpa-repo-datajpatest/"&gt;Spring Boot Unit Test for JPA Repositiory with @DataJpaTest&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also know:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;how to deploy this Spring Boot App on AWS (for free) with &lt;a href="https://bezkoder.com/deploy-spring-boot-aws-eb/"&gt;this tutorial&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;way to upload an Excel file and store the data in MySQL database with &lt;a href="https://bezkoder.com/spring-boot-upload-excel-file-database/"&gt;this post&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;upload CSV file and store the data in MySQL with &lt;a href="https://bezkoder.com/spring-boot-upload-csv-file/"&gt;this post&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;More Practice:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/spring-boot-jwt-authentication/"&gt;Secure Spring Boot App with Spring Security &amp;amp; JWT Authentication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/spring-boot-rest-xml/"&gt;Spring Boot Rest XML example – Web service with XML Response&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/spring-boot-graphql-mysql-jpa/"&gt;Spring Boot + GraphQL + MySQL example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/spring-boot-file-upload/"&gt;Spring Boot Multipart File upload example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/spring-boot-pagination-sorting-example/"&gt;Spring Boot Pagination and Sorting example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Fullstack:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/spring-boot-vue-js-crud-example/"&gt;Spring Boot + Vue.js example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/angular-spring-boot-crud/"&gt;Angular 8 + Spring Boot example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/angular-10-spring-boot-crud/"&gt;Angular 10 + Spring Boot example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/angular-11-spring-boot-crud/"&gt;Angular 11 + Spring Boot example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/react-spring-boot-crud/"&gt;React + Spring Boot example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>spring</category>
      <category>mysql</category>
      <category>java</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Spring Boot + PostgreSQL + Maven: CRUD example</title>
      <author>Tien Nguyen</author>
      <pubDate>Thu, 13 May 2021 02:45:25 +0000</pubDate>
      <link>https://dev.to/tienbku/spring-boot-postgresql-maven-crud-example-598m</link>
      <guid>https://dev.to/tienbku/spring-boot-postgresql-maven-crud-example-598m</guid>
      <description>&lt;p&gt;In this tutorial, we're gonna build a Spring Boot + PostgreSQL example with Maven that uses Spring Data JPA/Hibernate to interact with PostgreSQL database and export Rest CRUD API. You'll know:&lt;/p&gt;

&lt;ul&gt;
        &lt;li&gt;How to configure Spring Data, JPA, Hibernate to work with PostgreSQL Database&lt;/li&gt;
        &lt;li&gt;How to define Data Models and Repository interfaces&lt;/li&gt;
    &lt;li&gt;Way to create Spring Rest Controller to process HTTP requests&lt;/li&gt;
    &lt;li&gt;Way to use Spring Data JPA to interact with PostgreSQL Database&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Full Article: &lt;a href="https://bezkoder.com/spring-boot-postgresql-example/"&gt;Spring Boot + PostgreSQL + Maven: CRUD example&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Overview of Spring Boot, PostgreSQL example with Maven&lt;/h2&gt;

&lt;p&gt;We will build a Spring Boot + PostgreSQL + Rest CRUD API for a Tutorial application in that:&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;Each Tutotial has id, title, description, published status.&lt;/li&gt;
    &lt;li&gt;Apis help to create, retrieve, update, delete Tutorials.&lt;/li&gt;
    &lt;li&gt;Apis also support custom finder methods such as find by published status or by title.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are APIs that we need to provide:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Methods&lt;/th&gt;
&lt;th&gt;Urls&lt;/th&gt;
&lt;th&gt;Actions&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;POST&lt;/td&gt;
&lt;td&gt;/api/tutorials&lt;/td&gt;
&lt;td&gt;create new Tutorial&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;td&gt;/api/tutorials&lt;/td&gt;
&lt;td&gt;retrieve all Tutorials&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;td&gt;/api/tutorials/:id&lt;/td&gt;
&lt;td&gt;retrieve a Tutorial by &lt;code&gt;:id&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PUT&lt;/td&gt;
&lt;td&gt;/api/tutorials/:id&lt;/td&gt;
&lt;td&gt;update a Tutorial by &lt;code&gt;:id&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DELETE&lt;/td&gt;
&lt;td&gt;/api/tutorials/:id&lt;/td&gt;
&lt;td&gt;delete a Tutorial by &lt;code&gt;:id&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DELETE&lt;/td&gt;
&lt;td&gt;/api/tutorials&lt;/td&gt;
&lt;td&gt;delete all Tutorials&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;td&gt;/api/tutorials/published&lt;/td&gt;
&lt;td&gt;find all published Tutorials&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;td&gt;/api/tutorials?title=[keyword]&lt;/td&gt;
&lt;td&gt;find all Tutorials which title contains &lt;code&gt;keyword&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;We make CRUD operations &amp;amp; finder methods with Spring Data JPA's &lt;code&gt;JpaRepository&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The database will be PostgreSQL by configuring project dependency &amp;amp; datasource.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Technology&lt;/h2&gt;

&lt;ul&gt;
        &lt;li&gt;Java 8&lt;/li&gt;
        &lt;li&gt;Spring Boot 2 (with Spring Web MVC, Spring Data JPA)&lt;/li&gt;
        &lt;li&gt;PostgreSQL&lt;/li&gt;
        &lt;li&gt;Maven&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Maven Project Structure&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I5SNfIby--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5liqbzrq967scmflp2s8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I5SNfIby--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5liqbzrq967scmflp2s8.png" alt="spring-boot-postgresql-maven-example-crud-project-structure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let me explain it briefly.&lt;/p&gt;

&lt;p&gt;– &lt;code&gt;Tutorial&lt;/code&gt; data model class corresponds to entity and table &lt;em&gt;tutorials&lt;/em&gt;.&lt;br&gt;
– &lt;code&gt;TutorialRepository&lt;/code&gt; is an interface that extends &lt;a href="https://docs.spring.io/spring-data/jpa/docs/current/api/org/springframework/data/jpa/repository/JpaRepository.html"&gt;JpaRepository&lt;/a&gt; for CRUD methods and custom finder methods. It will be autowired in &lt;code&gt;TutorialController&lt;/code&gt;.&lt;br&gt;
– &lt;code&gt;TutorialController&lt;/code&gt; is a &lt;a href="https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/bind/annotation/RestController.html"&gt;RestController&lt;/a&gt; which has request mapping methods for RESTful requests such as: &lt;em&gt;getAllTutorials&lt;/em&gt;, &lt;em&gt;createTutorial&lt;/em&gt;, &lt;em&gt;updateTutorial&lt;/em&gt;, &lt;em&gt;deleteTutorial&lt;/em&gt;, &lt;em&gt;findByPublished&lt;/em&gt;...&lt;br&gt;
– Configuration for Spring Datasource, JPA &amp;amp; Hibernate in &lt;strong&gt;application.properties&lt;/strong&gt;.&lt;br&gt;
– &lt;strong&gt;pom.xml&lt;/strong&gt; contains dependencies for Spring Boot and PostgreSQL.&lt;/p&gt;

&lt;h2&gt;Run the Application&lt;/h2&gt;

&lt;p&gt;Run Spring Boot + PostgreSQL application with Maven: &lt;code&gt;mvn spring-boot:run&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;tutorials&lt;/em&gt;&lt;/strong&gt; table will be automatically generated in Database.&lt;br&gt;
If you check PostgreSQL for example, you can see things like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;testdb=# \d tutorials
             Table "public.tutorials"
   Column    |          Type          | Modifiers
-------------+------------------------+-----------
 id          | bigint                 | not null
 description | character varying(255) |
 published   | boolean                |
 title       | character varying(255) |
Indexes:
    "tutorials_pkey" PRIMARY KEY, btree (id)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create some Tutorials:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A-Jm4Dpl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/so5wyp87n07dvyv0r3ui.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A-Jm4Dpl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/so5wyp87n07dvyv0r3ui.png" alt="spring-boot-postgresql-maven-example-crud-create-tutorial"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;testdb=# SELECT * FROM tutorials;
 id |    description    | published |            title
----+-------------------+-----------+------------------------------
  1 | Tut#1 Description | f         | Spring Boot Tut#1
  2 | Tut#2 Description | f         | PostgreSQL Tut#2
  3 | Tut#3 Description | f         | Spring Data JPA Tut#3
  4 | Tut#4 Description | f         | Maven Tut#4
  5 | Tut#5 Description | f         | Spring Boot PostgreSQL Tut#5
(5 rows)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Update some Tutorials:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6Cdcabzm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/us7pgwj918s0gpth7v7x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6Cdcabzm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/us7pgwj918s0gpth7v7x.png" alt="spring-boot-postgresql-maven-example-crud-update-tutorial"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;testdb=# SELECT * FROM tutorials;
 id |    description    | published |            title
---------+-------------------+-----------+------------------------------
  3 | Tut#3 Description | f         | Spring Data JPA Tut#3
  5 | Tut#5 Description | f         | Spring Boot PostgreSQL Tut#5
  2 | Desc for Tut#2    | t         | PostgreSQL DB Tut#2
  4 | Desc for Tut#4    | t         | Maven Tut#4
  1 | Desc for Tut#1    | t         | Spring Boot Tut#1
(5 rows)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Retrieve all Tutorials:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ke9viZv0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j3jnbsl4byerd169t344.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ke9viZv0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j3jnbsl4byerd169t344.png" alt="spring-boot-postgresql-maven-example-crud-retrieve-tutorial"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Get a Tutorial by Id:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oxlMT0J3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ukoee36t85op5d5tf40r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oxlMT0J3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ukoee36t85op5d5tf40r.png" alt="spring-boot-postgresql-maven-example-crud-retrieve-one-tutorial"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Find all &lt;em&gt;&lt;strong&gt;published&lt;/strong&gt;&lt;/em&gt; Tutorials:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UZMbzkFS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zizqwijhv2zlihpc38js.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UZMbzkFS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zizqwijhv2zlihpc38js.png" alt="spring-boot-postgresql-maven-example-crud-search-field"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Find all Tutorials which title contains 'ring':&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H7jK5kKS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cn18ngbiesx721788er6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H7jK5kKS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cn18ngbiesx721788er6.png" alt="spring-boot-postgresql-maven-example-crud-search-title"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Delete a Tutorial:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PGUz70VG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s84pt7hhkw3cmfpiqc45.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PGUz70VG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s84pt7hhkw3cmfpiqc45.png" alt="spring-boot-postgresql-maven-example-crud-delete-tutorial"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;testdb=# SELECT * FROM tutorials;
 id |    description    | published |            title
---------+-------------------+-----------+------------------------------
  3 | Tut#3 Description | f         | Spring Data JPA Tut#3
  5 | Tut#5 Description | f         | Spring Boot PostgreSQL Tut#5
  2 | Desc for Tut#2    | t         | PostgreSQL DB Tut#2
  1 | Desc for Tut#1    | t         | Spring Boot Tut#1
(4 rows)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Delete all Tutorials:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---fya7CJ2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aoz03xvj61bg5i06zfqa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---fya7CJ2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aoz03xvj61bg5i06zfqa.png" alt="spring-boot-postgresql-maven-example-crud-delete-all"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;testdb=# SELECT * FROM tutorials;
 id | description | published | title
---------+-------------+-----------+-------
(0 rows)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;Source code&lt;/h2&gt;

&lt;p&gt;For step by step instruction and Github, please visit:&lt;br&gt;
Full Article: &lt;a href="https://bezkoder.com/spring-boot-postgresql-example/"&gt;Spring Boot + PostgreSQL + Maven: CRUD example&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Further Reading&lt;/h2&gt;

&lt;p&gt;If you want to add Pagination to this Spring project, you can find the instruction at:&lt;br&gt;
&lt;a href="https://bezkoder.com/spring-boot-pagination-filter-jpa-pageable/"&gt;Spring Boot Pagination &amp;amp; Filter example | Spring JPA, Pageable&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To sort/order by multiple fields:&lt;br&gt;
&lt;a href="https://bezkoder.com/spring-data-sort-multiple-columns/"&gt;Spring Data JPA Sort/Order by multiple Columns | Spring Boot&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Handle Exception for this Rest APIs is necessary:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/spring-boot-controlleradvice-exceptionhandler/"&gt;Spring Boot @ControllerAdvice &amp;amp; @ExceptionHandler example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/spring-boot-restcontrolleradvice/"&gt;@RestControllerAdvice example in Spring Boot&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Or way to write Unit Test for the JPA Repository:&lt;br&gt;
&lt;a href="https://bezkoder.com/spring-boot-unit-test-jpa-repo-datajpatest/"&gt;Spring Boot Unit Test for JPA Repositiory with @DataJpaTest&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Security:&lt;br&gt;
&lt;a href="https://bezkoder.com/spring-boot-security-postgresql-jwt-authentication/"&gt;Spring Boot, Spring Security, PostgreSQL: JWT Authentication example&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also know:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;how to deploy this Spring Boot App on AWS (for free) with &lt;a href="https://bezkoder.com/deploy-spring-boot-aws-eb/"&gt;this tutorial&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;way to upload an Excel file and store the data in MySQL database with &lt;a href="https://bezkoder.com/spring-boot-upload-excel-file-database/"&gt;this post&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;upload CSV file and store the data in MySQL with &lt;a href="https://bezkoder.com/spring-boot-upload-csv-file/"&gt;this post&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Fullstack examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/spring-boot-vue-js-postgresql/"&gt;Vue.js + Spring Boot + PostgreSQL example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/angular-spring-boot-postgresql/"&gt;Angular 8 + Spring Boot + PostgreSQL example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/angular-10-spring-boot-postgresql/"&gt;Angular 10 + Spring Boot + PostgreSQL example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/angular-11-spring-boot-postgresql/"&gt;Angular 11 + Spring Boot + PostgreSQL example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/spring-boot-react-postgresql/"&gt;React + Spring Boot + PostgreSQL example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>spring</category>
      <category>postgres</category>
      <category>java</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Xamarin</title>
      <author>4-in-1 Telecommunications</author>
      <pubDate>Thu, 13 May 2021 00:26:13 +0000</pubDate>
      <link>https://dev.to/tookooltech/xamarin-2gi5</link>
      <guid>https://dev.to/tookooltech/xamarin-2gi5</guid>
      <description></description>
    </item>
    <item>
      <title>Best IP Geolocation APIs in 2021 for developers</title>
      <author>Deep</author>
      <pubDate>Wed, 12 May 2021 23:52:43 +0000</pubDate>
      <link>https://dev.to/bexdeep_45/best-ip-geolocation-apis-in-2021-for-developers-2dgk</link>
      <guid>https://dev.to/bexdeep_45/best-ip-geolocation-apis-in-2021-for-developers-2dgk</guid>
      <description>&lt;p&gt;The concept of geolocating devices with their IP address is as old as the Internet. But, today, with 4.66 billion active internet users and more than 20 billion IoT devices, the landscape of the internet has drastically changed. Similarly, the IP geolocation technology has also evolved the way they resolve the location of an IP address and deliver the data. &lt;/p&gt;

&lt;p&gt;Traditionally, IP geolocation services were being delivered in the form of databases that one can purchase and use. This would mean building your own lookup services and ensuring that the database is up-to-date with the latest version. Not to mention maintaining the server's uptime. As a result, IP geolocation wasn't just everyone's cup of tea. A substantial effort was required and even today, some companies still prefer to use this method. But this is changing and more and more Ip geolocation API services are available in the market that can drastically reduce your build time and deliver at a submillisecond speed.&lt;/p&gt;

&lt;p&gt;In this post, I will share some of the popular IP geolocation API providers in the market. The list is generated using various third-party articles, google searches, and ranking tools. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: Only API services with public pricing page is considered and listed based on their alphabetical order. This post is&lt;/em&gt; &lt;strong&gt;not a comparison list&lt;/strong&gt; &lt;em&gt;but instead can be used as a reference to discover various IP geolocation services available for developers. I would highly encourage you to create a free account and test yourself before implementing them. Some of the services have been left out because either their website wasn't working or the service had been discontinued.&lt;/em&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#choosing-the-right-ip-geolocation-api-service-for-your-project"&gt;
  &lt;/a&gt;
  Choosing the right IP geolocation API service for your project?
&lt;/h2&gt;

&lt;p&gt;You need to understand how well the API fits into your web development requirements. Some of the most important criteria are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Accuracy &lt;/li&gt;
&lt;li&gt;Speed&lt;/li&gt;
&lt;li&gt;Coverage&lt;/li&gt;
&lt;li&gt;Datapoints&lt;/li&gt;
&lt;li&gt;Scalability &lt;/li&gt;
&lt;li&gt;Pricing&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;List of IP geolocation API services ordered alphabetically?&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#abstractapi"&gt;
  &lt;/a&gt;
  Abstractapi
&lt;/h3&gt;

&lt;p&gt;Abstractapi provides a suite of APIs for web development like image processing, IBAN validation, and so on. IP geolocation is one of its API offerings. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hXxJ0z5V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0xuwg3h6tqoznd4eye19.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hXxJ0z5V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0xuwg3h6tqoznd4eye19.png" alt="Screen Shot 2021-05-11 at 1.36.49 pm"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#pricing"&gt;
  &lt;/a&gt;
  Pricing
&lt;/h4&gt;

&lt;p&gt;Free&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;20,000 requests (1 request/second)&lt;/li&gt;
&lt;li&gt;Not allowed for commercial&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Starting Price &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;$9 USD per month&lt;/li&gt;
&lt;li&gt;200,000 request/month (50 requests/second)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#data-objects"&gt;
  &lt;/a&gt;
  Data Objects
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Standard Location 

&lt;ul&gt;
&lt;li&gt;zipcode&lt;/li&gt;
&lt;li&gt;city&lt;/li&gt;
&lt;li&gt;country&lt;/li&gt;
&lt;li&gt;continent&lt;/li&gt;
&lt;li&gt;Point geocoordinates&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Country related

&lt;ul&gt;
&lt;li&gt;flag&lt;/li&gt;
&lt;li&gt;currency&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Time Zone&lt;/li&gt;
&lt;li&gt;Network

&lt;ul&gt;
&lt;li&gt;ISP name&lt;/li&gt;
&lt;li&gt;ASN&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Security

&lt;ul&gt;
&lt;li&gt;VPN detect
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "ip_address": "72.229.28.185",
  "city": "New York",
  "city_geoname_id": 5128581,
  "region": "New York",
  "region_iso_code": "NY",
  "region_geoname_id": 5128638,
  "postal_code": "10116",
  "country": "United States",
  "country_code": "US",
  "country_geoname_id": 6252001,
  "country_is_eu": false,
  "continent": "North America",
  "continent_code": "NA",
  "continent_geoname_id": 6255149,
  "longitude": -73.9726,
  "latitude": 40.7768,
  "security": {
    "is_vpn": false
  },
  "timezone": {
    "name": "America/New_York",
    "abbreviation": "EDT",
    "gmt_offset": -4,
    "current_time": "00:15:25",
    "is_dst": true
  },
  "flag": {
    "emoji": "🇺🇸",
    "unicode": "U+1F1FA U+1F1F8",
    "png": "https://static.abstractapi.com/country-flags/US_flag.png",
    "svg": "https://static.abstractapi.com/country-flags/US_flag.svg"
  },
  "currency": {
    "currency_name": "USD",
    "currency_code": "USD"
  },
  "connection": {
    "autonomous_system_number": 12271,
    "autonomous_system_organization": "TWC-12271-NYC",
    "connection_type": "Corporate",
    "isp_name": "Charter Communications",
    "organization_name": "Spectrum"
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Link: &lt;a href="https://www.abstractapi.com/"&gt;https://www.abstractapi.com/&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bigdatacloud"&gt;
  &lt;/a&gt;
  BigDataCloud
&lt;/h3&gt;

&lt;p&gt;BigDataCloud is an Australian-based next-generation IP geolocation API provider, started in the year 2018. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TyigFcRP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x5heub4hpalb74yo6ydp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TyigFcRP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x5heub4hpalb74yo6ydp.png" alt="Screen Shot 2021-05-12 at 3.14.41 pm"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#pricing"&gt;
  &lt;/a&gt;
  Pricing
&lt;/h4&gt;

&lt;p&gt;Free&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;10K queries per month.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Starting Price&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;$3 per additional 10,000 queries per month.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#data-objects"&gt;
  &lt;/a&gt;
  Data Objects
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Standard Location

&lt;ul&gt;
&lt;li&gt;zipcode&lt;/li&gt;
&lt;li&gt;city&lt;/li&gt;
&lt;li&gt;state&lt;/li&gt;
&lt;li&gt;country&lt;/li&gt;
&lt;li&gt;continent&lt;/li&gt;
&lt;li&gt;Point geocoordinates&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Adminstrative Level Locality Details&lt;/li&gt;
&lt;li&gt;Country related 

&lt;ul&gt;
&lt;li&gt;flag&lt;/li&gt;
&lt;li&gt;currency&lt;/li&gt;
&lt;li&gt;phone&lt;/li&gt;
&lt;li&gt;language&lt;/li&gt;
&lt;li&gt;income&lt;/li&gt;
&lt;li&gt;wikidataID, geonameID&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Time Zone&lt;/li&gt;
&lt;li&gt;Network

&lt;ul&gt;
&lt;li&gt;ISP name&lt;/li&gt;
&lt;li&gt;ASN&lt;/li&gt;
&lt;li&gt;Organisation name&lt;/li&gt;
&lt;li&gt;Carrier Name and Network&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Confidence Area&lt;/li&gt;
&lt;li&gt;Security

&lt;ul&gt;
&lt;li&gt;TOR&lt;/li&gt;
&lt;li&gt;VPN&lt;/li&gt;
&lt;li&gt;Proxy&lt;/li&gt;
&lt;li&gt;SpamhausDrop, SpamhausEdrop, SpamhausAsnDrop&lt;/li&gt;
&lt;li&gt;BlacklistedUceprotect, BlacklistedBlocklistDe&lt;/li&gt;
&lt;li&gt;KnownAsMailServer&lt;/li&gt;
&lt;li&gt;KnownAsPublicRouter&lt;/li&gt;
&lt;li&gt;Bogon and Unreachable&lt;/li&gt;
&lt;li&gt;Hosting and Hosting ASN&lt;/li&gt;
&lt;li&gt;Cellular&lt;/li&gt;
&lt;li&gt;Threat level
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "ip": "72.229.28.185",
    "localityLanguageRequested": "en",
    "isReachableGlobally": true,
    "country": {
        "isoAlpha2": "US",
        "isoAlpha3": "USA",
        "m49Code": 840,
        "name": "United States of America",
        "isoName": "United States of America (the)",
        "isoNameFull": "the United States of America",
        "isoAdminLanguages": [
            {
                "isoAlpha3": "eng",
                "isoAlpha2": "en",
                "isoName": "English",
                "nativeName": "English"
            }
        ],
        "unRegion": "Americas/Northern America",
        "currency": {
            "numericCode": 840,
            "code": "USD",
            "name": "US Dollar",
            "minorUnits": 2
        },
        "wbRegion": {
            "id": "NAC",
            "iso2Code": "XU",
            "value": "North America"
        },
        "wbIncomeLevel": {
            "id": "HIC",
            "iso2Code": "XD",
            "value": "High income"
        },
        "callingCode": "1",
        "countryFlagEmoji": "🇺🇸",
        "wikidataId": "Q30",
        "geonameId": 6252001,
        "continents": [
            {
                "continent": "North America",
                "continentCode": "NA"
            },
            {
                "continent": "Oceania",
                "continentCode": "OC"
            },
            {
                "continent": "Asia",
                "continentCode": "AS"
            }
        ]
    },
    "location": {
        "continent": "North America",
        "continentCode": "NA",
        "isoPrincipalSubdivision": "New York",
        "isoPrincipalSubdivisionCode": "US-NY",
        "city": "New York City",
        "localityName": "Alphabet City",
        "postcode": "10009",
        "latitude": 40.73,
        "longitude": -73.98,
        "plusCode": "87G8P2H9+XX",
        "timeZone": {
            "ianaTimeId": "America/New_York",
            "displayName": "(UTC-05:00) Eastern Standard Time",
            "effectiveTimeZoneFull": "Eastern Daylight Time",
            "effectiveTimeZoneShort": "EDT",
            "utcOffsetSeconds": -14400,
            "utcOffset": "-04",
            "isDaylightSavingTime": true,
            "localTime": "2021-05-12T02:01:47.7236865"
        },
        "localityInfo": {
            "administrative": [
                {
                    "order": 3,
                    "adminLevel": 2,
                    "name": "United States of America",
                    "description": "country in North America",
                    "isoName": "United States of America (the)",
                    "isoCode": "US",
                    "wikidataId": "Q30",
                    "geonameId": 6252001
                },
                {
                    "order": 5,
                    "adminLevel": 4,
                    "name": "New York",
                    "description": "state of the United States of America",
                    "isoName": "New York",
                    "isoCode": "US-NY",
                    "wikidataId": "Q1384",
                    "geonameId": 5128638
                },
                {
                    "order": 6,
                    "adminLevel": 5,
                    "name": "New York City",
                    "description": "largest city in the United States",
                    "wikidataId": "Q60",
                    "geonameId": 5128581
                },
                {
                    "order": 7,
                    "adminLevel": 6,
                    "name": "Manhattan",
                    "description": "borough of New York City, New York, United States",
                    "wikidataId": "Q11299",
                    "geonameId": 5125771
                },
                {
                    "order": 8,
                    "adminLevel": 6,
                    "name": "New York County",
                    "description": "county in New York state, United States of America",
                    "wikidataId": "Q500416",
                    "geonameId": 5128594
                },
                {
                    "order": 10,
                    "adminLevel": 10,
                    "name": "Manhattan Community Board 3"
                },
                {
                    "order": 11,
                    "adminLevel": 10,
                    "name": "East Village",
                    "description": "neighborhood in Manhattan",
                    "wikidataId": "Q1043326",
                    "geonameId": 5116093
                },
                {
                    "order": 13,
                    "adminLevel": 10,
                    "name": "Alphabet City",
                    "description": "neighborhood of Manhattan in New York City",
                    "wikidataId": "Q1156938",
                    "geonameId": 5125061
                }
            ],
            "informative": [
                {
                    "order": 1,
                    "name": "Atlantic Ocean",
                    "description": "ocean on Earth",
                    "wikidataId": "Q97",
                    "geonameId": 3373405
                },
                {
                    "order": 2,
                    "name": "North America",
                    "description": "continent on the Earth's northwestern quadrant",
                    "isoCode": "NA",
                    "wikidataId": "Q49",
                    "geonameId": 6255149
                },
                {
                    "order": 4,
                    "name": "contiguous United States",
                    "description": "48 states of the United States (all but Alaska and Hawaii) and the District of Columbia",
                    "wikidataId": "Q578170"
                },
                {
                    "order": 9,
                    "name": "Manhattan",
                    "wikidataId": "Q12035198"
                },
                {
                    "order": 12,
                    "name": "10009",
                    "description": "postal code"
                }
            ]
        }
    },
    "lastUpdated": "2021-05-11T22:18:37.5251770Z",
    "network": {
        "registry": "ARIN",
        "registryStatus": "assigned",
        "registeredCountry": "US",
        "registeredCountryName": "United States of America",
        "organisation": "Charter Communications Inc",
        "isReachableGlobally": true,
        "isBogon": false,
        "bgpPrefix": "72.229.0.0/16",
        "bgpPrefixNetworkAddress": "72.229.0.0",
        "bgpPrefixLastAddress": "72.229.255.255",
        "totalAddresses": 65536,
        "carriers": [
            {
                "asn": "AS12271",
                "asnNumeric": 12271,
                "organisation": "Charter Communications Inc",
                "name": "TWC-12271-NYC",
                "registry": "ARIN",
                "registeredCountry": "US",
                "registeredCountryName": "United States of America",
                "registrationDate": "2000-06-09",
                "registrationLastChange": "2018-11-28",
                "totalIpv4Addresses": 2922487,
                "totalIpv4Prefixes": 204,
                "totalIpv4BogonPrefixes": 0,
                "rank": 162,
                "rankText": "#162 out of 71,428"
            }
        ],
        "viaCarriers": [
            {
                "asn": "AS7843",
                "asnNumeric": 7843,
                "organisation": "Charter Communications Inc",
                "registeredCountry": "US",
                "registeredCountryName": "United States of America",
                "totalIpv4Addresses": 355584,
                "rank": 731
            }
        ]
    },
    "confidence": "moderate",
    "confidenceArea": [
 ....       
{
            "latitude": 40.73086,
            "longitude": -74.32992
        }.....
    ],
    "securityThreat": "unknown",
    "hazardReport": {
        "isKnownAsTorServer": false,
        "isKnownAsVpn": false,
        "isKnownAsProxy": false,
        "isSpamhausDrop": false,
        "isSpamhausEdrop": false,
        "isSpamhausAsnDrop": false,
        "isBlacklistedUceprotect": false,
        "isBlacklistedBlocklistDe": false,
        "isKnownAsMailServer": false,
        "isKnownAsPublicRouter": false,
        "isBogon": false,
        "isUnreachable": false,
        "hostingLikelihood": 0,
        "isHostingAsn": false,
        "isCellular": false
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Link: &lt;a href="https://www.bigdatacloud.com/"&gt;https://www.bigdatacloud.com/&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Disclaimer: I work at BigDataCloud&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dbip"&gt;
  &lt;/a&gt;
  DB-IP
&lt;/h3&gt;

&lt;p&gt;DB-IP is a France-based IP geolocation database provider. They have three tiers of IP geolocation API services:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Basic&lt;/li&gt;
&lt;li&gt;Core&lt;/li&gt;
&lt;li&gt;Extended&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2qrOa8sW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p8estr3zpu0c84531v1d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2qrOa8sW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p8estr3zpu0c84531v1d.png" alt="Screen Shot 2021-05-11 at 4.34.57 pm"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#pricing"&gt;
  &lt;/a&gt;
  Pricing
&lt;/h4&gt;

&lt;p&gt;Free&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Doesn't have a free plan.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Starting Price&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The extended API starts at 16.41€/month.&lt;/li&gt;
&lt;li&gt;2K-50K requests per day&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#data-objects"&gt;
  &lt;/a&gt;
  Data Objects
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Standard Location

&lt;ul&gt;
&lt;li&gt;zipcode&lt;/li&gt;
&lt;li&gt;city&lt;/li&gt;
&lt;li&gt;state&lt;/li&gt;
&lt;li&gt;country&lt;/li&gt;
&lt;li&gt;continent&lt;/li&gt;
&lt;li&gt;Point geocoordinates&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Country related 

&lt;ul&gt;
&lt;li&gt;flag&lt;/li&gt;
&lt;li&gt;currency&lt;/li&gt;
&lt;li&gt;phone&lt;/li&gt;
&lt;li&gt;language&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Time Zone&lt;/li&gt;
&lt;li&gt;Network

&lt;ul&gt;
&lt;li&gt;ISP name&lt;/li&gt;
&lt;li&gt;ASN&lt;/li&gt;
&lt;li&gt;Organisation name&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Security

&lt;ul&gt;
&lt;li&gt;Bot detection&lt;/li&gt;
&lt;li&gt;Proxy detection&lt;/li&gt;
&lt;li&gt;Threat level
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "ipAddress": "123.45.67.89",
    "continentCode": "NA",
    "continentName": "North America",
    "countryCode": "US",
    "countryName": "United States",
    "isEuMember": false,
    "currencyCode": "USD",
    "currencyName": "Dollar",
    "phonePrefix": "1",
    "languages": [
        "en-US",
        "es-US",
        "haw",
        "fr"
    ],
    "stateProv": "California",
    "stateProvCode": "CA",
    "district": "Santa Clara County",
    "city": "Mountain View",
    "geonameId": 5375480,
    "zipCode": "94043",
    "latitude": 37.3861,
    "longitude": -122.084,
    "gmtOffset": -7,
    "timeZone": "America\/Los_Angeles",
    "weatherCode": "USCA0746",
    "asNumber": 16591,
    "asName": "GOOGLE-FIBER",
    "isp": "Google Fiber Inc.",
    "linkType": "fttx",
    "usageType": "consumer",
    "organization": "Google Fiber Inc.",
    "isCrawler": false,
    "isProxy": true,
    "proxyType": "vpn",
    "threatLevel": "high",
    "threatDetails": [
        "anonymous-proxy",
        "attack-source",
        "attack-target:web"
        "bot-name:gherran",
        "bot-type:spam"
    ],
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Link: &lt;a href="https://db-ip.com/"&gt;https://db-ip.com/&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ip2location"&gt;
  &lt;/a&gt;
  Ip2location
&lt;/h3&gt;

&lt;p&gt;Ip2location is one of the popular IP geolocation API service providers based in Malaysia. &lt;/p&gt;

&lt;p&gt;In addition to API, it also sells databases.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qMdWu6M0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/la5ob3vocvwvvzd9a63k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qMdWu6M0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/la5ob3vocvwvvzd9a63k.png" alt="Screen Shot 2021-05-12 at 12.27.57 pm"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#pricing"&gt;
  &lt;/a&gt;
  Pricing
&lt;/h4&gt;

&lt;p&gt;Free&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;200 queries per day&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Starting Price&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;$49 for 10,000 credits&lt;/li&gt;
&lt;li&gt;1 query can range from 1 credit to 18 credits based on a number of data points.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;*The company provides separate pricing and endpoint for using its proxy detection API service. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#data-objects"&gt;
  &lt;/a&gt;
  Data Objects
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Standard Location

&lt;ul&gt;
&lt;li&gt;zipcode&lt;/li&gt;
&lt;li&gt;city&lt;/li&gt;
&lt;li&gt;state&lt;/li&gt;
&lt;li&gt;country&lt;/li&gt;
&lt;li&gt;continent&lt;/li&gt;
&lt;li&gt;Point geocoordinates&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Country related 

&lt;ul&gt;
&lt;li&gt;flag&lt;/li&gt;
&lt;li&gt;currency&lt;/li&gt;
&lt;li&gt;language&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Time Zone&lt;/li&gt;
&lt;li&gt;Network

&lt;ul&gt;
&lt;li&gt;ISP name&lt;/li&gt;
&lt;li&gt;ASN&lt;/li&gt;
&lt;li&gt;Organisation name&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Security

&lt;ul&gt;
&lt;li&gt;Proxy detection&lt;/li&gt;
&lt;li&gt;Threat level
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "country_code": "US",
    "country_name": "United States",
    "region_name": "California",
    "city_name": "Mountain View",
    "latitude": "37.405992",
    "longitude": "-122.078515",
    "zip_code": "94043",
    "time_zone": "-07:00",
    "isp": "Google LLC",
    "domain": "google.com",
    "net_speed": "T1",
    "idd_code": "1",
    "area_code": "650",
    "weather_station_code": "USCA0746",
    "weather_station_name": "Mountain View",
    "mcc": "-",
    "mnc": "-",
    "mobile_brand": "-",
    "elevation": "32",
    "usage_type": "DCH",
    "continent": {
        "name": "North america",
        "code": "NA",
        "hemisphere": [
            "north",
            "east"
        ],
        "translations": {
            "zh-cn": "北美洲"
        }
    },
    "country": {
        "name": "United States",
        "alpha3_code": "USA",
        "numeric_code": "840",
        "demonym": "Americans",
        "flag": "https://www.ip2location.com/assets/img/flags/us.png",
        "capital": "Washington, D.C.",
        "total_area": "9826675",
        "population": "326766748",
        "currency": {
            "code": "USD",
            "name": "United States Dollar",
            "symbol": "$"
        },
        "language": {
            "code": "EN",
            "name": "English"
        },
        "idd_code": "1",
        "tld": "us",
        "translations": {
            "zh-cn": "美国"
        }
    },
    "region": {
        "name": "California",
        "code": "06",
        "translations": {
            "zh-cn": "加利福尼亚"
        }
    },
    "city": {
        "name": "Mountain View",
        "translations": []
    },
    "geotargeting": {
        "metro": "807"
    },
    "country_groupings": [
        {
            "acronym": "Americas",
            "name": "Americas"
        },
        {
            "acronym": "APEC",
            "name": "Asia-Pacific Economic Cooperation"
        },
        {
            "acronym": "DAC",
            "name": "Development Assistance Committee"
        },
        {
            "acronym": "G2",
            "name": "Group of Two"
        },
        {
            "acronym": "G20",
            "name": "Group of Twenty"
        },
        {
            "acronym": "G7",
            "name": "Group of Seven"
        },
        {
            "acronym": "G8+5",
            "name": "G8+5"
        },
        {
            "acronym": "NAFTA",
            "name": "North American Free Trade Agreement"
        },
        {
            "acronym": "NALA",
            "name": "NALA"
        },
        {
            "acronym": "OAS",
            "name": "Organization of American States"
        },
        {
            "acronym": "OECD",
            "name": "Organisation for Economic Co-operation and Development"
        },
        {
            "acronym": "P5",
            "name": "P5"
        },
        {
            "acronym": "UN",
            "name": "United Nations"
        }
    ],
    "time_zone_info": {
        "olson": "America\/Los_Angeles",
        "current_time": "2019-03-03T23:06:07-08:00",
        "gmt_offset": -28800,
        "is_dst": "no",
        "sunrise": "06:50",
        "sunset": "19:32"
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Link: &lt;a href="https://www.ip2location.com/"&gt;https://www.ip2location.com/&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ipdata"&gt;
  &lt;/a&gt;
  ipdata
&lt;/h3&gt;

&lt;p&gt;Ipdata is a US-based Ip geolocation API provider founded in the year 2017. The company provides aggregated Open Source threat intelligence data, IP to company lookups, and other location-based data.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uiANEJ6J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3c4x8std6g8x447wv7sh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uiANEJ6J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3c4x8std6g8x447wv7sh.png" alt="Screen Shot 2021-05-12 at 1.20.25 pm"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#pricing"&gt;
  &lt;/a&gt;
  Pricing
&lt;/h4&gt;

&lt;p&gt;Free&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1500 free requests per day&lt;/li&gt;
&lt;li&gt;Restricted to non-commercial use only.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Starting Price&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;$10 per month for 2,500 daily requests.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#data-objects"&gt;
  &lt;/a&gt;
  Data Objects
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Standard Location

&lt;ul&gt;
&lt;li&gt;postal codes&lt;/li&gt;
&lt;li&gt;city&lt;/li&gt;
&lt;li&gt;state&lt;/li&gt;
&lt;li&gt;country&lt;/li&gt;
&lt;li&gt;continent&lt;/li&gt;
&lt;li&gt;Point geocoordinates&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Country related 

&lt;ul&gt;
&lt;li&gt;flag&lt;/li&gt;
&lt;li&gt;currency&lt;/li&gt;
&lt;li&gt;language&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Time Zone&lt;/li&gt;
&lt;li&gt;Network

&lt;ul&gt;
&lt;li&gt;ISP name&lt;/li&gt;
&lt;li&gt;ASN&lt;/li&gt;
&lt;li&gt;Organisation name&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Security

&lt;ul&gt;
&lt;li&gt;Proxy detection&lt;/li&gt;
&lt;li&gt;Tor Detect&lt;/li&gt;
&lt;li&gt;Anonymous IP detect&lt;/li&gt;
&lt;li&gt;Known Attacker detect&lt;/li&gt;
&lt;li&gt;Bogon Detect&lt;/li&gt;
&lt;li&gt;Threat level
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    ip: "72.229.28.185",
    is_eu: false,
    city: "New York",
    region: "New York",
    region_code: "NY",
    country_name: "United States",
    country_code: "US",
    continent_name: "North America",
    continent_code: "NA",
    latitude: 40.7768,
    longitude: -73.9726,
    postal: "10116",
    calling_code: "1",
    flag: "https://ipdata.co/flags/us.png",
    emoji_flag: "🇺🇸",
    emoji_unicode: "U+1F1FA U+1F1F8",
    asn: {
        asn: "AS12271",
        name: "Charter Communications Inc",
        domain: "spectrum.com",
        route: "72.229.0.0/17",
        type: "isp"
    },
    languages: [
        {
            name: "English",
            native: "English"
        }
    ],
    currency: {
        name: "US Dollar",
        code: "USD",
        symbol: "$",
        native: "$",
        plural: "US dollars"
    },
    time_zone: {
        name: "America/New_York",
        abbr: "EDT",
        offset: "-0400",
        is_dst: true,
        current_time: "2021-05-11T23:55:34.840149-04:00"
    },
    threat: {
        is_tor: false,
        is_proxy: false,
        is_anonymous: false,
        is_known_attacker: false,
        is_known_abuser: false,
        is_threat: false,
        is_bogon: false
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Link: &lt;a href="https://ipdata.co/"&gt;https://ipdata.co/&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ipinfoio"&gt;
  &lt;/a&gt;
  Ipinfo.io
&lt;/h3&gt;

&lt;p&gt;IPinfo.io is a US-based IP intelligence data provider established in the year 2013. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#pricing"&gt;
  &lt;/a&gt;
  Pricing
&lt;/h4&gt;

&lt;p&gt;Free&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;50k lookups.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Starting Price&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;$49 per month for limited data points for 250K lookups. &lt;/li&gt;
&lt;li&gt;Additional 50K queries for $10. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;In order to access all the data points, the price begins at $1499 per month for 2.5M lookups. You can purchase additional 200K lookups are $100.&lt;/em&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#data-objects"&gt;
  &lt;/a&gt;
  Data Objects
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Standard Location

&lt;ul&gt;
&lt;li&gt;postal code&lt;/li&gt;
&lt;li&gt;city&lt;/li&gt;
&lt;li&gt;state&lt;/li&gt;
&lt;li&gt;country&lt;/li&gt;
&lt;li&gt;continent&lt;/li&gt;
&lt;li&gt;Point geocoordinates&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Time Zone&lt;/li&gt;
&lt;li&gt;Network

&lt;ul&gt;
&lt;li&gt;ISP name&lt;/li&gt;
&lt;li&gt;ASN&lt;/li&gt;
&lt;li&gt;Organisation name&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Security

&lt;ul&gt;
&lt;li&gt;VPN&lt;/li&gt;
&lt;li&gt;Proxy&lt;/li&gt;
&lt;li&gt;Tor&lt;/li&gt;
&lt;li&gt;Hosting&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Domain
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
 ip: "72.229.28.185",
 hostname: "cpe-72-229-28-185.nyc.res.rr.com",
 city: "New York City",
 region: "New York",
 country: "US",
 loc: "40.7143,-74.0060",
 org: "AS12271 Charter Communications Inc",
 postal: "10004",
 timezone: "America/New_York",
 asn: {
 asn: "AS12271",
 name: "Charter Communications Inc",
 domain: "charter.com",
 route: "72.229.0.0/17",
 type: "isp"},
 company: {
 name: "Charter Communications Inc",
 domain: "spectrum.com",
 type: "isp"},
 privacy:{
 vpn: false,
 proxy: false,
 tor: false,
 hosting: false},
 abuse: {
 address: "US, CO, Greenwood Village, 6399 S Fiddlers Green Circle, 80111",
 country: "US",
 email: "ipaddressing@chartercom.com",
 name: "IPAddressing",
 network: "72.224.0.0/13",
 phone: "+1-720-536-1278"},
 domains: {
 ip: "72.229.28.185",
 total: 1,
 domains: Array,
 0: "advertisa.tk"}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Link: &lt;a href="https://ipinfo.io/"&gt;https://ipinfo.io/&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ipstack"&gt;
  &lt;/a&gt;
  Ipstack
&lt;/h3&gt;

&lt;p&gt;Ipstack is an IP geolocation API service provided by an Austrian tech company called APILayer. Along with IP geolocation services, it also provides various other business APIs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3IUJmi33--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l4qfb3jwu8n3yx7qz4d4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3IUJmi33--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l4qfb3jwu8n3yx7qz4d4.png" alt="Screen Shot 2021-05-12 at 2.10.39 pm"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#pricing"&gt;
  &lt;/a&gt;
  Pricing
&lt;/h4&gt;

&lt;p&gt;Free&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;5,000 requests per month for limited data objects. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Starting Price&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;$9.99 per month for 50,000 requests per month.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#data-objects"&gt;
  &lt;/a&gt;
  Data Objects
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Standard Location

&lt;ul&gt;
&lt;li&gt;zipcode&lt;/li&gt;
&lt;li&gt;city&lt;/li&gt;
&lt;li&gt;state&lt;/li&gt;
&lt;li&gt;country&lt;/li&gt;
&lt;li&gt;continent&lt;/li&gt;
&lt;li&gt;Point geocoordinates&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Country related 

&lt;ul&gt;
&lt;li&gt;flag&lt;/li&gt;
&lt;li&gt;currency&lt;/li&gt;
&lt;li&gt;language&lt;/li&gt;
&lt;li&gt;phone&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Time Zone&lt;/li&gt;
&lt;li&gt;Network

&lt;ul&gt;
&lt;li&gt;ISP name&lt;/li&gt;
&lt;li&gt;ASN&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Security

&lt;ul&gt;
&lt;li&gt;Proxy&lt;/li&gt;
&lt;li&gt;Bot&lt;/li&gt;
&lt;li&gt;Tor&lt;/li&gt;
&lt;li&gt;Threat level
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "ip": "134.201.250.155",
  "hostname": "134.201.250.155",
  "type": "ipv4",
  "continent_code": "NA",
  "continent_name": "North America",
  "country_code": "US",
  "country_name": "United States",
  "region_code": "CA",
  "region_name": "California",
  "city": "Los Angeles",
  "zip": "90013",
  "latitude": 34.0453,
  "longitude": -118.2413,
  "location": {
    "geoname_id": 5368361,
    "capital": "Washington D.C.",
    "languages": [
        {
          "code": "en",
          "name": "English",
          "native": "English"
        }
    ],
    "country_flag": "https://assets.ipstack.com/images/assets/flags_svg/us.svg",
    "country_flag_emoji": "🇺🇸",
    "country_flag_emoji_unicode": "U+1F1FA U+1F1F8",
    "calling_code": "1",
    "is_eu": false
  },
  "time_zone": {
    "id": "America/Los_Angeles",
    "current_time": "2018-03-29T07:35:08-07:00",
    "gmt_offset": -25200,
    "code": "PDT",
    "is_daylight_saving": true
  },
  "currency": {
    "code": "USD",
    "name": "US Dollar",
    "plural": "US dollars",
    "symbol": "$",
    "symbol_native": "$"
  },
  "connection": {
    "asn": 25876,
    "isp": "Los Angeles Department of Water &amp;amp; Power"
  },
  "security": {
    "is_proxy": false,
    "proxy_type": null,
    "is_crawler": false,
    "crawler_name": null,
    "crawler_type": null,
    "is_tor": false,
    "threat_level": "low",
    "threat_types": null
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Link: &lt;a href="https://ipstack.com/"&gt;https://ipstack.com/&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#maxmind"&gt;
  &lt;/a&gt;
  Maxmind
&lt;/h3&gt;

&lt;p&gt;Maxmind is one of the oldest IP geolocation service providers based in the US, established in the year 2002.&lt;/p&gt;

&lt;p&gt;The company is widely recognized as the provider of a free GeoIP database. However, it also provides paid API services.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cGftu1u7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/urngxprtz084tlg9n2hj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cGftu1u7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/urngxprtz084tlg9n2hj.png" alt="Screen Shot 2021-05-12 at 2.37.38 pm"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#pricing"&gt;
  &lt;/a&gt;
  Pricing
&lt;/h4&gt;

&lt;p&gt;Free&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can download a free version of the GeoIP database. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Starting Price&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;$25 for 12,500 queries&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#data-objects"&gt;
  &lt;/a&gt;
  Data Objects
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Standard Location

&lt;ul&gt;
&lt;li&gt;zipcode&lt;/li&gt;
&lt;li&gt;city&lt;/li&gt;
&lt;li&gt;state&lt;/li&gt;
&lt;li&gt;country&lt;/li&gt;
&lt;li&gt;continent&lt;/li&gt;
&lt;li&gt;Point geocoordinates&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Country Related

&lt;ul&gt;
&lt;li&gt;Average Income (US only)&lt;/li&gt;
&lt;li&gt;Population Density (US only)&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Time Zone&lt;/li&gt;
&lt;li&gt;Network

&lt;ul&gt;
&lt;li&gt;ISP name&lt;/li&gt;
&lt;li&gt;ASN&lt;/li&gt;
&lt;li&gt;Organisation name&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Security

&lt;ul&gt;
&lt;li&gt;Proxy&lt;/li&gt;
&lt;li&gt;Residential Proxy&lt;/li&gt;
&lt;li&gt;Tor Exit Node&lt;/li&gt;
&lt;li&gt;Anonymous IP&lt;/li&gt;
&lt;li&gt;Hosting&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Domain&lt;/li&gt;
&lt;li&gt;Accuracy Radius&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Link: &lt;a href="https://www.maxmind.com/en/home"&gt;https://www.maxmind.com/en/home&lt;/a&gt;&lt;/p&gt;

</description>
      <category>ipgeolocation</category>
      <category>geolocation</category>
      <category>api</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Free landing pages for your GitHub Projects</title>
      <author>David Boyne</author>
      <pubDate>Wed, 12 May 2021 22:54:54 +0000</pubDate>
      <link>https://dev.to/boyney123/free-landing-pages-for-your-github-projects-4ggb</link>
      <guid>https://dev.to/boyney123/free-landing-pages-for-your-github-projects-4ggb</guid>
      <description>&lt;p&gt;Hi!&lt;/p&gt;

&lt;p&gt;My name is Dave Boyne and I've been doing some open source work for a bit now, and every time I create some projects I tend to create a nice landing page (to showcase the idea in creative ways).&lt;/p&gt;

&lt;p&gt;I enjoy creating landing pages and started to write a small tool that generates landing pages in seconds.&lt;/p&gt;

&lt;p&gt;I want to offer this tool to all open-source projects in the world.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-it-works"&gt;
  &lt;/a&gt;
  How it works
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Create a gitpage.yml in your project&lt;/li&gt;
&lt;li&gt;Visit gitpages.app with your repo in the url&lt;/li&gt;
&lt;li&gt;Awesome landing page built!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I personally find it useful to have a tool like this, and I was wondering what others thought? I have a proof of concept working and have a few people signed up for early access.&lt;/p&gt;

&lt;p&gt;I was wondering if there was anyone out there that could provide some thoughts or feedback? Is this something you think people could find useful?&lt;/p&gt;

&lt;p&gt;More information can be found here: &lt;a href="https://gitpages.app"&gt;https://gitpages.app&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Example Videos&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=9vN4wQnEcC8"&gt;https://www.youtube.com/watch?v=9vN4wQnEcC8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=caUdKsRWPNU&amp;amp;t=22s"&gt;https://www.youtube.com/watch?v=caUdKsRWPNU&amp;amp;t=22s&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Would love to hear your thoughts!&lt;/p&gt;

&lt;p&gt;Thanks&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Dave&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>opensource</category>
    </item>
    <item>
      <title>Using Auth0 With Static Web Apps</title>
      <author>Aaron Powell</author>
      <pubDate>Wed, 12 May 2021 22:49:11 +0000</pubDate>
      <link>https://dev.to/azure/using-auth0-with-static-web-apps-13nf</link>
      <guid>https://dev.to/azure/using-auth0-with-static-web-apps-13nf</guid>
      <description>&lt;p&gt;One of my favorite features of (the now General Available) &lt;a href="https://docs.microsoft.com/azure/static-web-apps/?WT.mc_id=javascript-28110-aapowell"&gt;Azure Static Web Apps (SWA)&lt;/a&gt; is that in the Standard Tier you can now provide a custom &lt;a href="https://docs.microsoft.com/azure/static-web-apps/authentication-custom?tabs=aad&amp;amp;WT.mc_id=javascript-28110-aapowell"&gt;OpenID Connect (OIDC) provider&lt;/a&gt;. This gives you a lot more control over who can and can’t access your app.&lt;/p&gt;

&lt;p&gt;In this post, I want to look at how we can use &lt;a href="https://auth0.com/"&gt;Auth0&lt;/a&gt; and an OIDC provider for Static Web Apps.&lt;/p&gt;

&lt;p&gt;For this, you’ll need an Auth0 account, so if you don’t already have one go sign up and maybe have a read of &lt;a href="https://auth0.com/docs/"&gt;their docs&lt;/a&gt;, just so you’re across everything.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-a-static-web-app"&gt;
  &lt;/a&gt;
  Creating a Static Web App
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;For this demo, we’ll use the &lt;a href="https://github.com/aaronpowell/aswa-react-template"&gt;React template&lt;/a&gt;, but what we’re covering isn’t specific to React, it’ll be applicable anywhere.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Once you’ve created your app, we’re going to need to setup a &lt;a href="https://docs.microsoft.com/azure/static-web-apps/configuration?WT.mc_id=javascript-28110-aapowell"&gt;configuration file&lt;/a&gt;, so add &lt;code&gt;staticwebapp.config.json&lt;/code&gt; to the repo root.&lt;/p&gt;

&lt;p&gt;This config file is used for controlling a lot of things within our SWA, but the most important part for us is going to be the &lt;code&gt;auth&lt;/code&gt; section. Let’s flesh out the skeleton for it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"auth"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"identityProviders"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"customOpenIdConnectProviders"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Great! Now it’s time to setup Auth0.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-an-auth0-application"&gt;
  &lt;/a&gt;
  Creating an Auth0 application
&lt;/h2&gt;

&lt;p&gt;Log into the Auth0 dashboard and navigate through to the Applications section of the portal:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vKFCE-T2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.aaron-powell.com/images/swa-auth-auth0/001.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vKFCE-T2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.aaron-powell.com/images/swa-auth-auth0/001.png" alt="Manage Auth0 Applications"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From here, we’re going to select &lt;strong&gt;Create Application&lt;/strong&gt; , give it a name and select &lt;em&gt;Regular Web Applications&lt;/em&gt; as the &lt;strong&gt;application type&lt;/strong&gt;. You might be tempted to select the SPA option, given that we’re creating a JavaScript web application, but the reason we don’t use that is that SWA’s auth isn’t handled by your application itself, it’s handled by the underlying Azure service, which is a “web application”, that then exposes the information out that you need.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o5AEZDpz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.aaron-powell.com/images/swa-auth-auth0/002.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o5AEZDpz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.aaron-powell.com/images/swa-auth-auth0/002.png" alt="Create an application"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configure-your-auth0-application"&gt;
  &lt;/a&gt;
  Configure your Auth0 application
&lt;/h2&gt;

&lt;p&gt;With your application created, it’s time to configure it. We’ll skip the &lt;strong&gt;Quick Start&lt;/strong&gt; options, as we’re really doing something more custom. Instead, head to &lt;strong&gt;Settings&lt;/strong&gt; as we are going to need to provide the application with some redirect options for login/logout, so that SWA will know you’ve logged in and can unpack the basic user information.&lt;/p&gt;

&lt;p&gt;For the &lt;strong&gt;Sign-in redirect URIs&lt;/strong&gt; you will need to add &lt;code&gt;https://&amp;lt;hostname&amp;gt;/.auth/login/auth0&lt;/code&gt; for the &lt;strong&gt;Application Login URI&lt;/strong&gt; , &lt;code&gt;https://&amp;lt;hostname&amp;gt;/.auth/login/auth0/callback&lt;/code&gt; for &lt;strong&gt;Allowed Callback URLs&lt;/strong&gt; and for &lt;strong&gt;Allowed Logout URLs&lt;/strong&gt; add &lt;code&gt;https://&amp;lt;hostname&amp;gt;/.auth/logout/auth0/callback&lt;/code&gt;. If you haven’t yet deployed to Azure, don’t worry about this step yet, we’ll do it once the SWA is created.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Quick note - the &lt;code&gt;auth0&lt;/code&gt; value here is going to be how we name the provider in the &lt;code&gt;staticwebapp.config.json&lt;/code&gt;, so it can be anything you want, I just like to use the provider name so the config is easy to read.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Scroll down and click &lt;strong&gt;Save Changes&lt;/strong&gt; , and it’s time to finish off our SWA config file.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#completing-our-settings"&gt;
  &lt;/a&gt;
  Completing our settings
&lt;/h2&gt;

&lt;p&gt;With our Auth0 application setup, it’s time to complete our config file so it can use it. We’ll add a new configuration under &lt;code&gt;customOpenIdConnectProviders&lt;/code&gt; for Auth0 and it’ll contain two core pieces of information, the information on how to register the OIDC provider and some login information on how to talk to the provider.&lt;/p&gt;

&lt;p&gt;Inside &lt;code&gt;registration&lt;/code&gt;, we’ll add a &lt;code&gt;clientIdSettingName&lt;/code&gt; field, which will point to an entry in the &lt;a href="https://docs.microsoft.com/azure/static-web-apps/application-settings?WT.mc_id=javascript-28110-aapowell"&gt;app settings&lt;/a&gt; that the SWA has. Next, we’ll need a &lt;code&gt;clientCredential&lt;/code&gt; object that has &lt;code&gt;clientSecretSettingName&lt;/code&gt; that is the entry for the OIDC client secret. Lastly, we’ll provide the &lt;code&gt;openIdConnectConfiguration&lt;/code&gt; with a &lt;code&gt;wellKnownOpenIdConfiguration&lt;/code&gt; endpoint that is &lt;code&gt;https://&amp;lt;your_auth0_domain&amp;gt;/.well-known//openid-configuration&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The config should now look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"auth"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"identityProviders"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"customOpenIdConnectProviders"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"auth0"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"registration"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"clientIdSettingName"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"AUTH0_ID"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"clientCredential"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                            &lt;/span&gt;&lt;span class="nl"&gt;"clientSecretSettingName"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"AUTH0_SECRET"&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"openIdConnectConfiguration"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                            &lt;/span&gt;&lt;span class="nl"&gt;"wellKnownOpenIdConfiguration"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://aaronpowell.au.auth0.com/.well-known/openid-configuration"&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;I use &lt;code&gt;AUTH0_ID&lt;/code&gt; and &lt;code&gt;AUTH0_SECRET&lt;/code&gt; as the names of the items I’ll be putting into app settings.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;All this information will tell SWA how to issue a request against the right application in Auth0, but we still need to tell it how to make the request and handle the response. That’s what we use the &lt;code&gt;login&lt;/code&gt; config for. With the &lt;code&gt;login&lt;/code&gt; config, we provide a &lt;code&gt;nameClaimType&lt;/code&gt;, which is a fully-qualified path to the claim that we want SWA to use as the &lt;a href="https://docs.microsoft.com/azure/static-web-apps/user-information?tabs=javascript&amp;amp;WT.mc_id=javascript-28110-aapowell"&gt;&lt;code&gt;userDetails&lt;/code&gt; field of the user info&lt;/a&gt;. Generally speaking, you’ll want this to be &lt;code&gt;http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name&lt;/code&gt;, but if there’s a custom field in your response claims you want to use, make sure you provide that. The other bit of config we need here is what scopes to request from Auth0. For SWA, you only need &lt;code&gt;openid&lt;/code&gt; and &lt;code&gt;profile&lt;/code&gt; as the scopes, unless you’re wanting to use a &lt;code&gt;nameClaimType&lt;/code&gt; other than standard.&lt;/p&gt;

&lt;p&gt;Let’s finish off our SWA config:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"auth"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"identityProviders"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"customOpenIdConnectProviders"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"auth0"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"registration"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"clientIdSettingName"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"AUTH0_ID"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"clientCredential"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                            &lt;/span&gt;&lt;span class="nl"&gt;"clientSecretSettingName"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"AUTH0_SECRET"&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"openIdConnectConfiguration"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                            &lt;/span&gt;&lt;span class="nl"&gt;"wellKnownOpenIdConfiguration"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://aaronpowell.au.auth0.com/.well-known/openid-configuration"&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"login"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"nameClaimType"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"scopes"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"openid"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"profile"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With the config ready you can create the SWA in Azure and kick off a deployment (don’t forget to update the Auth0 app with the login/logout callbacks). When the resource is created in Azure, copy the &lt;strong&gt;Client ID&lt;/strong&gt; and &lt;strong&gt;Client secret&lt;/strong&gt; from Auth0 and create app settings in Azure using the names in your config and the values from Auth0.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-the-provider"&gt;
  &lt;/a&gt;
  Using the provider
&lt;/h2&gt;

&lt;p&gt;Once the provider is registered in the config file, it is usable just like the other providers SWA offers, with the login being &lt;code&gt;/.auth/login/&amp;lt;provider_name&amp;gt;&lt;/code&gt;, which in this case the &lt;code&gt;provider_name&lt;/code&gt; is &lt;code&gt;auth0&lt;/code&gt;. The user information will then be exposed &lt;a href="(https://docs.microsoft.com/azure/static-web-apps/user-information?tabs=javascript&amp;amp;WT.mc_id=javascript-28110-aapowell)"&gt;as standard&lt;/a&gt; to both the web and API components.&lt;/p&gt;

&lt;p&gt;If you’re building a React application, check out &lt;a href="https://www.npmjs.com/package/@aaronpowell/react-static-web-apps-auth"&gt;my React auth helper&lt;/a&gt; and for the API &lt;a href="https://www.npmjs.com/package/@aaronpowell/static-web-apps-api-auth"&gt;there is a companion&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I really like that with the GA of Static Web Apps we are now able to use custom OIDC providers with the platform. This makes it a lot easier to have controlled user access and integration with a more complex auth story when needed. Setting this up with Auth0 only takes a few lines of config.&lt;/p&gt;

&lt;p&gt;You can check out a full code sample &lt;a href="https://github.com/aaronpowell/swa-custom-auth-auth0"&gt;on my GitHub&lt;/a&gt; and a live demo &lt;a href="https://white-desert-00c81d910.azurestaticapps.net"&gt;here&lt;/a&gt; (but I’m not giving you my Auth0 credentials 😝).&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>web</category>
      <category>security</category>
    </item>
    <item>
      <title>Using Okta With Static Web Apps</title>
      <author>Aaron Powell</author>
      <pubDate>Wed, 12 May 2021 22:49:11 +0000</pubDate>
      <link>https://dev.to/azure/using-okta-with-static-web-apps-2i1p</link>
      <guid>https://dev.to/azure/using-okta-with-static-web-apps-2i1p</guid>
      <description>&lt;p&gt;One of my favorite features of (the now General Available) &lt;a href="https://docs.microsoft.com/azure/static-web-apps/?WT.mc_id=javascript-28109-aapowell"&gt;Azure Static Web Apps (SWA)&lt;/a&gt; is that in the Standard Tier you can now provide a custom &lt;a href="https://docs.microsoft.com/azure/static-web-apps/authentication-custom?tabs=aad&amp;amp;WT.mc_id=javascript-28109-aapowell"&gt;OpenID Connect (OIDC) provider&lt;/a&gt;. This gives you a lot more control over who can and can’t access your app.&lt;/p&gt;

&lt;p&gt;In this post, I want to look at how we can use &lt;a href="https://www.okta.com/"&gt;Okta&lt;/a&gt; and an OIDC provider for Static Web Apps.&lt;/p&gt;

&lt;p&gt;For this, you’ll need an Okta account, so if you don’t already have one &lt;a href="https://developer.okta.com/signup/"&gt;go sign up&lt;/a&gt; and maybe have a read of &lt;a href="https://developer.okta.com/docs/guides/quickstart/website/create-org/"&gt;their docs&lt;/a&gt;, just so you’re across everything.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-a-static-web-app"&gt;
  &lt;/a&gt;
  Creating a Static Web App
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;For this demo, we’ll use the &lt;a href="https://github.com/aaronpowell/aswa-react-template"&gt;React template&lt;/a&gt;, but what we’re covering isn’t specific to React, it’ll be applicable anywhere.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Once you’ve created your app, we’re going to need to setup a &lt;a href="https://docs.microsoft.com/azure/static-web-apps/configuration?WT.mc_id=javascript-28109-aapowell"&gt;configuration file&lt;/a&gt;, so add &lt;code&gt;staticwebapp.config.json&lt;/code&gt; to the repo root.&lt;/p&gt;

&lt;p&gt;This config file is used for controlling a lot of things within our SWA, but the most important part for us is going to be the &lt;code&gt;auth&lt;/code&gt; section. Let’s flesh out the skeleton for it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"auth"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"identityProviders"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"customOpenIdConnectProviders"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Great! Now it’s time to setup Okta.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-an-okta-application"&gt;
  &lt;/a&gt;
  Creating an Okta application
&lt;/h2&gt;

&lt;p&gt;Log into the Okta dashboard and navigate through to the Applications section of the portal:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mOPX_PYC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.aaron-powell.com/images/swa-auth-okta/001.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mOPX_PYC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.aaron-powell.com/images/swa-auth-okta/001.png" alt="Manage Okta Applications"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From here, we’re going to select &lt;strong&gt;Create App Integration&lt;/strong&gt; and select &lt;em&gt;OIDC - OpenID Connect&lt;/em&gt; for the &lt;strong&gt;Sign-on method&lt;/strong&gt; and &lt;em&gt;Web Application&lt;/em&gt; as the &lt;strong&gt;Application type&lt;/strong&gt;. You might be tempted to select the SPA option, given that we’re creating a JavaScript web application, but the reason we don’t use that is that SWA’s auth isn’t handled by your application itself, it’s handled by the underlying Azure service, which is a “web application”, that then exposes the information out that you need.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ffbpyy9S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.aaron-powell.com/images/swa-auth-okta/002.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ffbpyy9S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.aaron-powell.com/images/swa-auth-okta/002.png" alt="Create an application"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configure-your-okta-application"&gt;
  &lt;/a&gt;
  Configure your Okta application
&lt;/h2&gt;

&lt;p&gt;With your application created, it’s time to configure it. Give it a name, something that’ll make sense when you see it in the list of Okta applications, a logo if you desire, but leave the &lt;strong&gt;Grant type&lt;/strong&gt; information alone, the defaults are configured for us just fine.&lt;/p&gt;

&lt;p&gt;We are going to need to provide the application with some redirect options for login/logout, so that SWA will know you’ve logged in and can unpack the basic user information.&lt;/p&gt;

&lt;p&gt;For the &lt;strong&gt;Sign-in redirect URIs&lt;/strong&gt; you will need to add &lt;code&gt;https://&amp;lt;hostname&amp;gt;/.auth/login/okta/callback&lt;/code&gt; and for &lt;strong&gt;Sign-out redirect URIs&lt;/strong&gt; add &lt;code&gt;https://&amp;lt;hostname&amp;gt;/.auth/logout/okta/callback&lt;/code&gt;. If you haven’t yet deployed to Azure, don’t worry about this step yet, we’ll do it once the SWA is created.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Quick note - the &lt;code&gt;okta&lt;/code&gt; value here is going to be how we name the provider in the &lt;code&gt;staticwebapp.config.json&lt;/code&gt;, so it can be anything you want, I just like to use the provider name so the config is easy to read.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Click &lt;strong&gt;Save&lt;/strong&gt; , and it’s time to finish off our SWA config file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qPXZMXoe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.aaron-powell.com/images/swa-auth-okta/003.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qPXZMXoe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.aaron-powell.com/images/swa-auth-okta/003.png" alt="Completed settings"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#completing-our-settings"&gt;
  &lt;/a&gt;
  Completing our settings
&lt;/h2&gt;

&lt;p&gt;With our Okta application setup, it’s time to complete our config file so it can use it. We’ll add a new configuration under &lt;code&gt;customOpenIdConnectProviders&lt;/code&gt; for Okta and it’ll contain two core pieces of information, the information on how to register the OIDC provider and some login information on how to talk to the provider.&lt;/p&gt;

&lt;p&gt;Inside &lt;code&gt;registration&lt;/code&gt;, we’ll add a &lt;code&gt;clientIdSettingName&lt;/code&gt; field, which will point to an entry in the &lt;a href="https://docs.microsoft.com/azure/static-web-apps/application-settings?WT.mc_id=javascript-28109-aapowell"&gt;app settings&lt;/a&gt; that the SWA has. Next, we’ll need a &lt;code&gt;clientCredential&lt;/code&gt; object that has &lt;code&gt;clientSecretSettingName&lt;/code&gt; that is the entry for the OIDC client secret. Lastly, we’ll provide the &lt;code&gt;openIdConnectConfiguration&lt;/code&gt; with a &lt;code&gt;wellKnownOpenIdConfiguration&lt;/code&gt; endpoint that is &lt;code&gt;https://&amp;lt;your_okta_domain&amp;gt;/.well-known//openid-configuration&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The config should now look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"auth"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"identityProviders"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"customOpenIdConnectProviders"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"okta"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"registration"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"clientIdSettingName"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"OKTA_ID"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"clientCredential"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                            &lt;/span&gt;&lt;span class="nl"&gt;"clientSecretSettingName"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"OKTA_SECRET"&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"openIdConnectConfiguration"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                            &lt;/span&gt;&lt;span class="nl"&gt;"wellKnownOpenIdConfiguration"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://dev-920852.okta.com/.well-known/openid-configuration"&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;I use &lt;code&gt;OKTA_ID&lt;/code&gt; and &lt;code&gt;OKTA_SECRET&lt;/code&gt; as the names of the items I’ll be putting into app settings.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;All this information will tell SWA how to issue a request against the right application in Okta, but we still need to tell it how to make the request and handle the response. That’s what we use the &lt;code&gt;login&lt;/code&gt; config for. With the &lt;code&gt;login&lt;/code&gt; config, we provide a &lt;code&gt;nameClaimType&lt;/code&gt;, which is a fully-qualified path to the claim that we want SWA to use as the &lt;a href="https://docs.microsoft.com/azure/static-web-apps/user-information?tabs=javascript&amp;amp;WT.mc_id=javascript-28109-aapowell"&gt;&lt;code&gt;userDetails&lt;/code&gt; field of the user info&lt;/a&gt;. Generally speaking, you’ll want this to be &lt;code&gt;http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name&lt;/code&gt;, but if there’s a custom field in your response claims you want to use, make sure you provide that. The other bit of config we need here is what scopes to request from Okta. For SWA, you only need &lt;code&gt;openid&lt;/code&gt; and &lt;code&gt;profile&lt;/code&gt; as the scopes, unless you’re wanting to use a &lt;code&gt;nameClaimType&lt;/code&gt; other than standard.&lt;/p&gt;

&lt;p&gt;Let’s finish off our SWA config:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"auth"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"identityProviders"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"customOpenIdConnectProviders"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"okta"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"registration"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"clientIdSettingName"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"OKTA_ID"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"clientCredential"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                            &lt;/span&gt;&lt;span class="nl"&gt;"clientSecretSettingName"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"OKTA_SECRET"&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"openIdConnectConfiguration"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                            &lt;/span&gt;&lt;span class="nl"&gt;"wellKnownOpenIdConfiguration"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://dev-920852.okta.com/.well-known/openid-configuration"&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"login"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"nameClaimType"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"scopes"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"openid"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"profile"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With the config ready you can create the SWA in Azure and kick off a deployment (don’t forget to update the Okta app with the login/logout callbacks). When the resource is created in Azure, copy the &lt;strong&gt;Client ID&lt;/strong&gt; and &lt;strong&gt;Client secret&lt;/strong&gt; from Okta and create app settings in Azure using the names in your config and the values from Okta.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-the-provider"&gt;
  &lt;/a&gt;
  Using the provider
&lt;/h2&gt;

&lt;p&gt;Once the provider is registered in the config file, it is usable just like the other providers SWA offers, with the login being &lt;code&gt;/.auth/login/&amp;lt;provider_name&amp;gt;&lt;/code&gt;, which in this case the &lt;code&gt;provider_name&lt;/code&gt; is &lt;code&gt;okta&lt;/code&gt;. The user information will then be exposed &lt;a href="(https://docs.microsoft.com/azure/static-web-apps/user-information?tabs=javascript&amp;amp;WT.mc_id=javascript-28109-aapowell)"&gt;as standard&lt;/a&gt; to both the web and API components.&lt;/p&gt;

&lt;p&gt;If you’re building a React application, check out &lt;a href="https://www.npmjs.com/package/@aaronpowell/react-static-web-apps-auth"&gt;my React auth helper&lt;/a&gt; and for the API &lt;a href="https://www.npmjs.com/package/@aaronpowell/static-web-apps-api-auth"&gt;there is a companion&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I really like that with the GA of Static Web Apps we are now able to use custom OIDC providers with the platform. This makes it a lot easier to have controlled user access and integration with a more complex auth story when needed. Setting this up with Okta only takes a few lines of config.&lt;/p&gt;

&lt;p&gt;You can check out a full code sample &lt;a href="https://github.com/aaronpowell/swa-custom-auth-okta"&gt;on my GitHub&lt;/a&gt; and a live demo &lt;a href="https://blue-bay-0eac9b910.azurestaticapps.net"&gt;here&lt;/a&gt; (but I’m not giving you my Okta credentials 😝).&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>web</category>
      <category>security</category>
    </item>
    <item>
      <title>The Ultimate Python main()</title>
      <author>Rémy 🤖</author>
      <pubDate>Wed, 12 May 2021 21:55:36 +0000</pubDate>
      <link>https://dev.to/xowap/the-ultimate-python-main-18kn</link>
      <guid>https://dev.to/xowap/the-ultimate-python-main-18kn</guid>
      <description>&lt;p&gt;So you want to write a CLI utility in Python. The goal is to be able to write:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./say_something.py -w "hello, world"
hello, world
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then to get your script running. This isn't so hard and you've probably done it already, but have you thought of all the use cases? Let's go step by step on all the things you can do to make your &lt;code&gt;main()&lt;/code&gt; bullet-proof. The first sections are going to be very basic and we'll build up something less obvious as we progress.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hello-world"&gt;
  &lt;/a&gt;
  Hello, world
&lt;/h2&gt;

&lt;p&gt;Let's start with a basic script that just says "hello, wold".&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"hello, world"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now this is fairly basic but still won't work if you call it directly like &lt;code&gt;./say_something.py&lt;/code&gt;. In order for this to work, you need to add the famous shebang at the beginning.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/python3
&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"hello, world"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; — Let's also not forget to do a &lt;code&gt;chmod a+x say_something.py&lt;/code&gt; to give execution rights on the file&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;However, what if you're using a virtualenv? By calling &lt;code&gt;/usr/bin/python3&lt;/code&gt; directly you're forcing the path to the Python interpreter. This can be desirable in some cases (by example package managers will tend to force this for safety) but if you're writing a distributable script it's simpler to get it from the environment.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/env python3
&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"hello, world"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; — We're calling &lt;code&gt;python3&lt;/code&gt; instead of &lt;code&gt;python&lt;/code&gt; because in some systems you'll find that &lt;code&gt;python&lt;/code&gt; points to Python 2 and who wants to be using Python 2?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#importability"&gt;
  &lt;/a&gt;
  Importability
&lt;/h2&gt;

&lt;p&gt;Something that you'll learn early on from manuals is that you want to make sure that if for some reason someone imports your module then there won't be any side-effect like a surprise &lt;code&gt;print()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Because of that, you need to "protect" your code with this special idiom:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/env python3
&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"hello, world"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You'll note the use of the special variable &lt;code&gt;__name__&lt;/code&gt; whose value is going to be &lt;code&gt;__main__&lt;/code&gt; if you're in the "root" file that Python is running and the module name otherwise.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#parsing-arguments"&gt;
  &lt;/a&gt;
  Parsing arguments
&lt;/h2&gt;

&lt;p&gt;You'll notice that so far the program only says "hello, world" but doesn't parse the &lt;code&gt;-w&lt;/code&gt; argument that we've described above. Parsing arguments in Python is not so different from C — for those who had the chance of learning it at school — except that well it's Python so you have a few more goodies.&lt;/p&gt;

&lt;p&gt;The main difference is that instead of receiving the arguments as a an argument of &lt;code&gt;main()&lt;/code&gt; you'll have to import them.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/env python3
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stderr&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;what&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"hello, world"&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s"&gt;"-w"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;fail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'Unrecognized argument "&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;what&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;fail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Too many/few arguments"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;what&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, while this fits the bill, this is oh so much more laborious to parse arguments manually like this. For a long time I was afraid to use &lt;code&gt;argparse&lt;/code&gt; because the documentation is quite the beast, but in the end its basic use is very simple.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/env python3
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;argparse&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ArgumentParser&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ArgumentParser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"-w"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"--what"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"hello, world"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;what&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That way you let all the hard work to &lt;code&gt;ArgumentParser()&lt;/code&gt; and as a bonus you get an auto-generated help text when calling with &lt;code&gt;-h&lt;/code&gt; as an argument.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#outside-call"&gt;
  &lt;/a&gt;
  Outside call
&lt;/h2&gt;

&lt;p&gt;All this is cool but what if you want to call the CLI tool from another Python program? Experience showed me that it's often a much more pragmatic thing to do rather than to design a specific API for Python and a different API for CLI (which is arguments parsing).&lt;/p&gt;

&lt;p&gt;The problem with what we've got here is that we can't reference our call from the outside world. To run it &lt;em&gt;has&lt;/em&gt; to be in &lt;code&gt;__main__&lt;/code&gt;, which is not necessarily what we want.&lt;/p&gt;

&lt;p&gt;Fortunately there is an easy solution to this: create a C-style &lt;code&gt;main()&lt;/code&gt; function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/env python3
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;argparse&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ArgumentParser&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ArgumentParser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"-w"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"--what"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"hello, world"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;what&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;While this works, this doesn't fit the bill of letting you call custom arguments from an outside package. However, all you need to do is add the arguments as an argument to your main function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/env python3
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;argparse&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ArgumentParser&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Sequence&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Sequence&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ArgumentParser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"-w"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"--what"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"hello, world"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;what&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The advantage of this is that by default it will keep on working like before except that this time it will let you pass custom arguments to call it from the outside, like that by example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;say_something&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;"-w"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"hello, world"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;world&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#a-bit-of-assistance"&gt;
  &lt;/a&gt;
  A bit of assistance
&lt;/h2&gt;

&lt;p&gt;For good measure and clarity, let's take out the arguments parsing into a separate function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/env python3
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;argparse&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ArgumentParser&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Namespace&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Sequence&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Sequence&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Namespace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ArgumentParser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"-w"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"--what"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"hello, world"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Sequence&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;what&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But now you'll notice that the typing annotation isn't very helpful. I usually like to be a little bit more verbose to get more assistance from my IDE later on.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/env python3
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;argparse&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ArgumentParser&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Sequence&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;NamedTuple&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Args&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NamedTuple&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;what&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Sequence&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ArgumentParser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"-w"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"--what"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"hello, world"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Args&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;__dict__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Sequence&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;what&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#handling-signals"&gt;
  &lt;/a&gt;
  Handling signals
&lt;/h2&gt;

&lt;p&gt;For the purpose of this demonstration, let's add some "sleep" in this code to simulate that it's doing something instead of printing the text right away.&lt;/p&gt;

&lt;p&gt;Now what if the program receives a signal? There is two main things you want to handle:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;SIGINT&lt;/code&gt; — When the user does a &lt;code&gt;CTRL+C&lt;/code&gt; in their terminal, which raises a &lt;code&gt;KeyboardInterrupt&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;SIGTERM&lt;/code&gt; — When the user kindly asks the program to die with a &lt;code&gt;TERM&lt;/code&gt; signal, which can be handled (as opposed to &lt;code&gt;SIGKILL&lt;/code&gt;) but we'll see that later&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's start by handling &lt;code&gt;CTRL+C&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/env python3
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;argparse&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ArgumentParser&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;sleep&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Sequence&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;NamedTuple&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;stderr&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Args&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NamedTuple&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;what&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Sequence&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ArgumentParser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"-w"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"--what"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"hello, world"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Args&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;__dict__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Sequence&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;what&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="nb"&gt;KeyboardInterrupt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ok, bye&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, it's as simple as catching the &lt;code&gt;KeyboardInterrupt&lt;/code&gt; exception. Please note that we do this outside of &lt;code&gt;main()&lt;/code&gt; because the famous hypothetical "caller module" will already have its signal handling in place so that's something that we only need to setup if we're running on ourself.&lt;/p&gt;

&lt;p&gt;Next comes the handling of &lt;code&gt;SIGTERM&lt;/code&gt;. By default the program will just stop but we don't really want this. By example if we're using the following pattern inside the code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# do something
&lt;/span&gt;&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# cleanup
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We won't have a chance to cleanup if an exception isn't raised. Fortunately for us, we can raise the exception for ourselves.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/env python3
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;argparse&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ArgumentParser&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;sleep&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Sequence&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;NamedTuple&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;stderr&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;signal&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SIGTERM&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Args&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NamedTuple&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;what&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Sequence&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ArgumentParser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"-w"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"--what"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"hello, world"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Args&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;__dict__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sigterm_handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;__&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="nb"&gt;SystemExit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Sequence&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;what&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SIGTERM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sigterm_handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="nb"&gt;KeyboardInterrupt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ok, bye&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What happens is that we're using &lt;code&gt;signal()&lt;/code&gt; to register &lt;code&gt;sigterm_handler()&lt;/code&gt; as our handler for &lt;code&gt;SIGTERM&lt;/code&gt;. What happens "under the hood" is that the signal handler will be executed before the "next instruction" that the interpreter would otherwise have considered. This gives you a chance to raise an exception which is going to bubble up to our &lt;code&gt;__main__&lt;/code&gt; and exit the program with a &lt;code&gt;1&lt;/code&gt; return code while triggering all the &lt;code&gt;finally&lt;/code&gt; and context managers along the way.&lt;/p&gt;

&lt;p&gt;As stated before, there is a &lt;code&gt;sleep()&lt;/code&gt; in the middle of the function. This means that you can run the code from this section and then hit &lt;code&gt;CTLR+C&lt;/code&gt; or send a &lt;code&gt;SIGTERM&lt;/code&gt; to see what happens when you interrupt the program.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#error-reporting"&gt;
  &lt;/a&gt;
  Error Reporting
&lt;/h2&gt;

&lt;p&gt;Sometimes — more often that you'd like — your program will fail either by its own fault or because the inputs are incorrect. By example, if the user tries to open a file that doesn't exist, you might want to report it. And by "report it" I mean nicely, not with a harsh stack trace. Keep the stack trace for the cases that you didn't expect this way you know that something is really wrong.&lt;/p&gt;

&lt;p&gt;Let's imagine that we want to forbid the user to say "ni". In order to report the error, we're going to create a specific error type for our program&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SaySomethingError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we're going to handle it in our &lt;code&gt;__main__&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;SaySomethingError&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Error: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And finally we're going to raise the error from &lt;code&gt;main()&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;what&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"ni"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;SaySomethingError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Saying "ni" is forbidden'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For an overall code that is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/env python3
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;argparse&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ArgumentParser&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Sequence&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;NamedTuple&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;stderr&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;signal&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SIGTERM&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Args&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NamedTuple&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;what&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SaySomethingError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Sequence&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ArgumentParser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"-w"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"--what"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"hello, world"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Args&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;__dict__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sigterm_handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;__&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="nb"&gt;SystemExit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Sequence&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;what&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"ni"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;SaySomethingError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Saying "ni" is forbidden'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;what&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SIGTERM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sigterm_handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="nb"&gt;KeyboardInterrupt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ok, bye&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;SaySomethingError&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Error: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this very simple system, you can raise an error from your code no matter how deep you are. It will trigger all the cleanup functions from context managers and &lt;code&gt;finally&lt;/code&gt; blocks. And finally it will be caught by the &lt;code&gt;__main__&lt;/code&gt; to display a proper error message.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#packaging"&gt;
  &lt;/a&gt;
  Packaging
&lt;/h2&gt;

&lt;p&gt;A good idea when providing a &lt;em&gt;bin&lt;/em&gt; script inside a package is to have it be called with Python's &lt;code&gt;-m&lt;/code&gt; option. By example instead of writing &lt;code&gt;pip&lt;/code&gt;, I usually write &lt;code&gt;python3 -m pip&lt;/code&gt; to be sure that the Pip I'm running is indeed the one from my virtual env. As a bonus, you don't need the environment's &lt;code&gt;bin&lt;/code&gt; directory in your &lt;code&gt;$PATH&lt;/code&gt;. You'll find that most famous and not-so-famous packages provide both ways of calling their binaries.&lt;/p&gt;

&lt;p&gt;In order to do that, you need to put your script into a &lt;code&gt;__main__.py&lt;/code&gt; file. Let's do this (this is UNIX commands but Windows should have no trouble translating):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;say_something
&lt;span class="nb"&gt;touch &lt;/span&gt;say_something/__init__.py
&lt;span class="nb"&gt;mv &lt;/span&gt;say_something.py say_something/__main__.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you can call your script with &lt;code&gt;python3 -m say_something&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; — We're creating an empty &lt;code&gt;__init__.py&lt;/code&gt; file to signify to Python that this is a proper module&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here it's clearly becoming a question of preferences but my personal favorite tool for packaging has become &lt;a href="https://python-poetry.org/"&gt;Poetry&lt;/a&gt; because it is &lt;em&gt;so&lt;/em&gt; simple. Let's create a basic &lt;code&gt;pyproject.toml&lt;/code&gt; for our project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight toml"&gt;&lt;code&gt;&lt;span class="nn"&gt;[tool.poetry]&lt;/span&gt;
&lt;span class="py"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"say_something"&lt;/span&gt;
&lt;span class="py"&gt;version&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"0.1.0"&lt;/span&gt;
&lt;span class="py"&gt;description&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;
&lt;span class="py"&gt;authors&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="py"&gt;license&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"WTFPL"&lt;/span&gt;

&lt;span class="nn"&gt;[tool.poetry.dependencies]&lt;/span&gt;
&lt;span class="py"&gt;python&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"^3.8"&lt;/span&gt;

&lt;span class="nn"&gt;[tool.poetry.dev-dependencies]&lt;/span&gt;

&lt;span class="nn"&gt;[build-system]&lt;/span&gt;
&lt;span class="py"&gt;requires&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;["poetry&amp;gt;=0.12"]&lt;/span&gt;
&lt;span class="py"&gt;build-backend&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"poetry.masonry.api"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's try this out to see if it worked&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;poetry run python &lt;span class="nt"&gt;-m&lt;/span&gt; say_something
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is good but did the command go? Have no fear, Poetry lets you declare your "bin" commands pretty easily. The only thing is that it needs a function to call directly, including all the signal-handling shenanigans. Let's move it all into a separate function then:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/env python3
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;argparse&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ArgumentParser&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Sequence&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;NamedTuple&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;stderr&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;signal&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SIGTERM&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Args&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NamedTuple&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;what&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SaySomethingError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Sequence&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ArgumentParser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"-w"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"--what"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"hello, world"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Args&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;__dict__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sigterm_handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;__&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="nb"&gt;SystemExit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Sequence&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;what&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"ni"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;SaySomethingError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Saying "ni" is forbidden'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;what&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__main__&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SIGTERM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sigterm_handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="nb"&gt;KeyboardInterrupt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ok, bye&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;SaySomethingError&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Error: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;__main__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can add the following to the &lt;code&gt;pyproject.toml&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight toml"&gt;&lt;code&gt;&lt;span class="nn"&gt;[tool.poetry.scripts]&lt;/span&gt;
&lt;span class="py"&gt;say_something&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"say_something.__main__:__main__"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And finally, let's try this out:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;poetry run say_something &lt;span class="nt"&gt;-w&lt;/span&gt; &lt;span class="s2"&gt;"hello, poetry"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This way when someone installs your package they will have the &lt;code&gt;say_something&lt;/code&gt; command available.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;The pattern presented in this article is one that I use &lt;em&gt;all the time&lt;/em&gt;. Weirdly, I never did a proper template for it but now that I wrote this article I know where to come and copy it. I hope that you found it useful!&lt;/p&gt;

</description>
      <category>python</category>
      <category>tutorial</category>
      <category>learning</category>
    </item>
    <item>
      <title>How i became a Linkerd Hero?</title>
      <author>Sergio Méndez</author>
      <pubDate>Wed, 12 May 2021 21:49:11 +0000</pubDate>
      <link>https://dev.to/sergioarmgpl/how-i-became-a-linkerd-hero-1kca</link>
      <guid>https://dev.to/sergioarmgpl/how-i-became-a-linkerd-hero-1kca</guid>
      <description>&lt;p&gt;Hi, Dev.to community this is my first post, and I want to share how I became a Linkerd Hero. This is more or less a large story, let me introduce myself first. I am Sergio Méndez. I was born in Guatemala, I represent that part of underrepresented technology groups, actually, I am working as a DevOps Engineer at Yalo, and I am also an Operating Systems professor at USAC, Guatemala.  &lt;/p&gt;

&lt;p&gt;I remember that this story started when I talked at the 2018 OSCON conference, in that moment I was starting to experiment with Cloud Native technologies, some months before that, I was working for a Telco company here in Guatemala, I was building a tool to create custom chatbots using Kubernetes and OpenFaaS. I was a novice at that time and for sure it wasn’t my best experience talking in a conference, but it was challenging, me giving a talk in English outside my country, who would have imagined. As I mentioned it wasn’t my best experience. After that, I tried to prove to myself that I could do it better, so I was looking for another opportunity.&lt;/p&gt;

&lt;p&gt;Next year, influenced by one of the organizers of O'Reilly, the one who pushed me to talk for the first time, I decided to send a talk proposal to KubeConEU 2020, and by my surprise, my talk was selected. My talk was about how to implement canary deployments using OpenFaaS and Linkerd. I remember that the creator of &lt;a href="https://www.openfaas.com"&gt;OpenFaaS&lt;/a&gt; contacted me and introduced me to the CTO of Buoyant, Buoyant is the company behind &lt;a href="https://linkerd.io"&gt;Linkerd&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Later 2020 I decided to include Linkerd in the final project of my course, and give the challenge to my students to build a basic distributed system using Kubernetes and Linkerd, I also mentioned this project to the Linkerd people, because I was moving a lot of service meshes topics Linkerd invited me to their &lt;a href="https://linkerd.io/community/anchor/"&gt;Anchor Program&lt;/a&gt; to tell other what I was doing part of that was to participate on one of their Linkerd Community calls to share about our project.&lt;/p&gt;

&lt;p&gt;At the beginning of January 2021, we presented the project to the Linkerd community with my students with the challenge to speak in another language but it was a really nice experience. I felt that we broke the language gap at that moment. A month later the Linkerd community nominated me to be the &lt;a href="https://linkerd.io/community/heroes"&gt;Linkerd Hero&lt;/a&gt; of February and by my surprise, I won. &lt;/p&gt;

&lt;p&gt;Linkerd opened a lot of doors to be visible to the cloud native world. I really appreciate that, I love Linkerd is a really special community.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Things that I Learned:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Be ready when the moment and the opportunity comes&lt;/li&gt;
&lt;li&gt;You won’t be successful all the time but you have to persist&lt;/li&gt;
&lt;li&gt;Help others around to break technology frontiers&lt;/li&gt;
&lt;li&gt;Diversity and inclusion matters&lt;/li&gt;
&lt;li&gt;Nothing it's impossible if you are working to build it&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;And my final thought is:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Contribute is not just coding it could be teaching, speaking and create content for people in other languages, don’t get frustrated&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Do you want to see the moment when we present the project with my students?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here is it:&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/XWlpS78wRks"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;And if you like the academic side feel free to contribute to our repo:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/sergioarmgpl/operating-systems-usac-course"&gt;https://github.com/sergioarmgpl/operating-systems-usac-course&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks, Dev.to Community, I hope you enjoy my first post.&lt;/p&gt;

&lt;p&gt;Follow me if you liked this post :D.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Twitter:&lt;/strong&gt; &lt;a href="https://twitter.com/sergioarmgpl"&gt;https://twitter.com/sergioarmgpl&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Website:&lt;/strong&gt; &lt;a href="https://sergiops.xyz"&gt;https://sergiops.xyz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href="https://twitter.com/jdorfman?lang=en"&gt;Justin Dorfman&lt;/a&gt; of &lt;a href="https://www.curiefense.io/"&gt;Curiefense&lt;/a&gt; for reviewing this post.&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>servicemesh</category>
      <category>cloudnative</category>
    </item>
    <item>
      <title>The Future of Developer Careers</title>
      <author>Christine Yen</author>
      <pubDate>Wed, 12 May 2021 21:15:26 +0000</pubDate>
      <link>https://dev.to/honeycombio/the-future-of-developer-careers-gp3</link>
      <guid>https://dev.to/honeycombio/the-future-of-developer-careers-gp3</guid>
      <description>&lt;p&gt;While JavaScript frameworks come and go, a change has been brewing over the last several years that will permanently change what it means to be a modern developer: how our code goes from our laptops to the wild. The widespread adoption of containers, microservices and orchestration have made it easier than ever to take a small bit of software and push it live in front of users — and, in doing so, push a whole bunch of comfortable tasks (debugging, profiling) into uncomfortable territory: production.&lt;/p&gt;

&lt;p&gt;I hate to be the bearer of bad news (not really), but the reality for developers is that it’s only getting more complicated to ensure the code you write still works. Assuming operational responsibility for the code you write is becoming a larger and larger part of the developer role — even as “where it runs” gets further and further away from “where it was written.”&lt;/p&gt;

&lt;p&gt;The first wave of DevOps primarily embodied Ops folks learning how to Dev: to “automate everything” through code. The second wave, naturally, is now about Dev folks learning how to Ops: now, we own the running of our code in production. But while the two shifting waves typically come together in cross-functional DevOps teams, “understanding production” has historically carried with it a heavy Ops bias.&lt;/p&gt;

&lt;p&gt;It’s almost ironic, really — recent trends in platform abstractions have turned everything into code. (Hi, serverless! And thanks, Heroku.) What that should have meant is that understanding what’s happening in production would be easier for devs, not harder. Let’s take a look at why that hasn’t been the case, and how it should be instead.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Shoehorning Devs into Ops: What Could Go Wrong?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Leading software engineering organizations are increasingly asking developers to &lt;a href="https://increment.com/on-call/who-owns-on-call/"&gt;own their code in production&lt;/a&gt;. Software engineers are being asked to &lt;a href="https://copyconstruct.medium.com/on-call-b0bd8c5ea4e0"&gt;join on-call rotations&lt;/a&gt;, with varying levels of support.&lt;/p&gt;

&lt;p&gt;And yet, conventional “production monitoring” tools are inherently hostile to how developers think and work with their code. Traditional approaches to understanding “production” are tied to an application’s underlying infrastructure. Graphs of data like CPU utilization, network throughput, or database load are very infrastructure-centric ways to understand the world. Just because the lines continue to blur between dev and ops doesn’t mean we simply transfer over previous mental models of the world — the goal of DevOps isn’t to simply swap out responsibilities. The goal of shifting into DevOps is to get the most out of the varied skills, background and mindsets that comprise these new cross-functional teams.&lt;/p&gt;

&lt;p&gt;Traditional production monitoring tools were written long before the era of DevOps — they speak the language of Ops, not Devs. Unfortunately, that sets up an artificial barrier to entry for developers to think about production as a place they own. We’ve done nothing to help developers see their world as it exists in production. Developers often get handed a dashboard full of Cassandra read/write throughput graphs, thread counts and memtable sizes, as if that somehow inducts them into the club of production ownership.&lt;/p&gt;

&lt;p&gt;Sure, those metrics and graphs look cool — but there’s often no way to connect that information back to the code, business logic or customer needs that are the world of software development. When problems occur, there’s a big mental leap that exists between seeing that information and tying it back to “what really happened.” And even if that leap can somehow be made, there’s certainly no path at all that leads toward reproducing any observed phenomenon, much less writing the code to fix it.&lt;/p&gt;

&lt;p&gt;The cognitive leap that traditional production monitoring tools require developers to make doesn’t get a lot of attention, because that’s simply how things are done for Ops engineers. In some corners of engineering, there’s a smug satisfaction that devs now have to make that leap. Feel our pain, devs! How do you not know that when both of these lines trend down and that graph turns red, it means your application has run out of memory? Welcome to production.&lt;/p&gt;

&lt;p&gt;That cavalier attitude reinforces the hostility reflected by the approach taken by traditional monitoring tools. In practice, that approach inadvertently leads to situations where devs simply follow the breadcrumbs and do their best to replicate production debugging patterns they don’t fully understand. Culturally, it creates a moat between the approaches that Ops values and the approaches that Dev values — and reinforces the illusion that production is a hostile place for developers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Enhance Existing Dev Behaviors&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Instead, a more welcoming approach is to tap into what we Devs do naturally when debugging: allow us to quickly compare our expected outcome against the actual outcome (e.g. this code should handle 10K req/sec, but seems to only handle 100 req/sec). Devs share this part of the investigative journey with their Ops comrades. However, where Ops and Dev patterns deviate is when digging into understanding why that deviation occurs.&lt;/p&gt;

&lt;p&gt;For Devs, we compare “expected” against “actual” all the time in test suites. Investigating test failures means digging into the code, walking through the logic, and questioning our assumptions. Being able to capture business logic-level metadata in production (often high cardinality, often across many dimensions) is a baseline requirement for being able to tap into Dev experience for production problems.&lt;/p&gt;

&lt;p&gt;We need a specific replicable test case. Being able to tap into the specificity of custom attributes like userID, partitionID, etc, is what enables production to feel like an extension of development and test workflows, as opposed to some new foreign and hostile environment.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A Developer Approach to Production&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;With the advent of PaaS, IaaS, and serverless, our world is increasingly abstracting infrastructure away. That’s paved the way for both waves of DevOps and it has made room to redefine priorities. For software development teams that own running their code in prod, that means they’ve shifted toward aligning their definition of successful operation with what ultimately matters to the business — whether the users of that software are having a good customer experience.&lt;/p&gt;

&lt;p&gt;That shift works very well for developers who are accustomed to having functions, endpoints, customer IDs, and other business-level identifiers naturally live in their various tests. Those types of identifiers will only continue to become more critical when investigating and understanding the behavior of production systems. (In contrast, traditional monitoring systems focus on the aggregate behavior of an overall system and almost never include these types of identifiers.)&lt;/p&gt;

&lt;p&gt;All of the questions that developers should ask about production boil down to two basic forms:&lt;/p&gt;

&lt;p&gt;Is my code running in the first place?&lt;br&gt;
Is my code behaving as expected in production?&lt;/p&gt;

&lt;p&gt;As a developer in a world with frequent deploys, the first few things I want to know about a production issue are: When did it start happening? Which build is, or was, live? Which code changes were new at that time? And is there anything special about the conditions under which my code is running?&lt;/p&gt;

&lt;p&gt;The ability to correlate some signal to a specific build or code release is table stakes for developers looking to grok production. Not coincidentally, “build ID” is precisely the sort of “unbounded source” of metadata that traditional monitoring tools warn against including. In metrics-based monitoring systems, doing so commits to an infinitely increasing set of metrics captured, negatively impacting the performance of that monitoring system AND with the added “benefit” of paying your monitoring vendor substantially more for it.&lt;/p&gt;

&lt;p&gt;Feature flags — and the combinatorial explosion of possible parameters when multiple live feature flags intersect — throw additional wrenches into answering Question 1. And yet, feature flags are here to stay; so our tooling and techniques simply have to level up to support this more flexibly defined world.&lt;/p&gt;

&lt;p&gt;Question 2, on the other hand, is the same question we ask anytime we run a test suite: “Does my code’s actual execution match what I expect?” The same signals that are useful to us when digging into a failing test case are what help us understand, reproduce and resolve issues identified in production.&lt;/p&gt;

&lt;p&gt;A developer approach to debugging prod means being able to isolate the impact of the code by endpoint, by function, by payload type, by response status, or by any other arbitrary metadata used to define a test case. Developers should be able to take those pieces and understand the real-world workload handled by their systems, and then &lt;a href="https://thenewstack.io/a-next-step-beyond-test-driven-development/"&gt;adjust their code accordingly&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Way Forward: A Developer-Friendly Prod&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The future of Dev careers isn’t about having different bespoke ways of approaching debugging your production environment. DevOps is about getting the most out of your new cross-functional teams and, luckily — when it comes to using tools to get answers to the questions you care about in production — there’s an opportunity to all get on the same page. Whether your team labels itself Devs, Ops, Devops, or SRE, you can all use tools that speak the same language.&lt;/p&gt;

&lt;p&gt;In today’s abstracted world — one full of ephemeral instances, momentary containers and serverless functions — classic infrastructure metrics are quickly fading into obsolescence. This is happening so quickly that it even calls into question the &lt;a href="https://thenewstack.io/the-future-of-ops-careers/"&gt;future of ops careers&lt;/a&gt;. A fundamentally better approach to understanding production is necessary — for everyone.&lt;/p&gt;

&lt;p&gt;A good first step is shifting focus away from metrics like CPU and memory and instead embracing &lt;a href="https://www.weave.works/blog/the-red-method-key-metrics-for-microservices-architecture/"&gt;RED metrics&lt;/a&gt; as the primary signal of service health. That can substantially lower the barrier for entry to production for most developers. Devs can then be armed with the metadata necessary to understand the impact of any given graph, by tagging those metrics with customer ID, API endpoint, resource type, customer action, etc. It bridges the gap between capturing metrics in prod and tying them back to code and tests.&lt;/p&gt;

&lt;p&gt;One step better is the reason that observability has seen an explosion in popularity. Observability is &lt;a href="https://www.honeycomb.io/blog/observability-whats-in-a-name/"&gt;not a synonym for monitoring&lt;/a&gt;. Observability takes an event-based approach that still allows you to &lt;a href="https://www.honeycomb.io/blog/getting-metrics-into-honeycomb/"&gt;incorporate infrastructure metrics&lt;/a&gt; to understand the behavior of your production systems. It’s an entirely different approach to the Ops-centric world of monitoring that enables understanding the behavior of production systems in ways that makes them accessible to engineers from all backgrounds.&lt;/p&gt;

&lt;p&gt;The future of dev careers should be defined by struggling to understand the correlations between traditional monitoring tools and where that ties into your code. By breaking away from traditional monitoring tools, the future of dev careers instead becomes one where understanding what’s happening in prod feels every bit as natural as understanding why code failed in your development or test environments.&lt;/p&gt;

&lt;p&gt;Over the last decade and change, as an industry, we’ve all gotten really good at taking code and shipping it to the user. That was Heroku’s promise, after all: simply and magically hooking a production environment up to a developer’s natural workflow. And because of this — because of how much closer we’ve brought production to the development environment — the developer skill set has to follow the same trajectory… or risk being left behind.&lt;/p&gt;

&lt;p&gt;Learn more about making production more approachable to devs and to ops in &lt;a href="https://www.honeycomb.io/developing-a-culture-of-observability/?&amp;amp;utm_source=tns&amp;amp;utm_medium=blog-links&amp;amp;utm_campaign=referral&amp;amp;utm_content=developing-a-culture-of-observability-tns"&gt;Honeycomb’s Guide to Developing a Culture of Observability&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Want to know how Honeycomb.io helps software developers? &lt;a href="https://www.honeycomb.io/get-a-demo?&amp;amp;utm_source=Devto&amp;amp;utm_Devto=blog&amp;amp;utm_campaign=referral&amp;amp;utm_keyword=%7Bkeyword%7D&amp;amp;utm_content=the-future-of-developer-careers"&gt;Schedule 1:1 time&lt;/a&gt; with our technical experts.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Infrastructure As Code Is Wrong</title>
      <author>Igor Fil</author>
      <pubDate>Wed, 12 May 2021 21:11:11 +0000</pubDate>
      <link>https://dev.to/igorfil/infrastructure-as-code-is-wrong-38lh</link>
      <guid>https://dev.to/igorfil/infrastructure-as-code-is-wrong-38lh</guid>
      <description>&lt;p&gt;There are several &lt;a href="https://www.martinfowler.com/bliki/TwoHardThings.html"&gt;problems in computer science that are very hard&lt;/a&gt;. One of them is naming things. So it should no surprise when names make little sense.&lt;/p&gt;

&lt;p&gt;One of the "bad" names is "&lt;a href="https://en.wikipedia.org/wiki/Infrastructure_as_code"&gt;Infrastructure as Code&lt;/a&gt;". I think it misleads more than it reflects the idea. &lt;/p&gt;




&lt;p&gt;In the era of self-hosted systems, infrastructure was managed by directly handling hardware and manually setting configurations. This approach does not work any longer in the age of cloud computing. It does not scale, it is too slow, and too risky.&lt;/p&gt;

&lt;p&gt;Instead, the "Infrastructure as Code" (IaC) represents a different idea - to represent infrastructure and configurations as machine- and human- readable text and then use automation to manage it. These tools can create infrastructure components as many times as we like, do it very fast, and make sure they all are exactly the same.&lt;/p&gt;

&lt;p&gt;If we take for example Terraform, provisioning of EC2 instance will look something like &lt;a href="https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/instance"&gt;this&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight hcl"&gt;&lt;code&gt;&lt;span class="nx"&gt;resource&lt;/span&gt; &lt;span class="s2"&gt;"aws_instance"&lt;/span&gt; &lt;span class="s2"&gt;"web"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;ami&lt;/span&gt;           &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;aws_ami&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ubuntu&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;
  &lt;span class="nx"&gt;instance_type&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"t3.micro"&lt;/span&gt;

  &lt;span class="nx"&gt;tags&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;Name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"HelloWorld"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is human-readable (and writable), but it can also be processed by automation. Terraform will do all actual calls to AWS to provision the instance for us based on configurations in text files that we give it. Also, these files can be version-controlled. We can put them in git and track changes to infrastructure. &lt;/p&gt;

&lt;p&gt;Just like code, right? But is it really code? It surely looks like it, but does not feel like it to me. What is code? Code is logic. It is either a series of imperative commands, &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;if this do that, else do the other thing&lt;/code&gt; &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;(C++, Java, Python, etc), or declarative computation pipelines &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;take data, pipe it through this function and apply this function to result&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;(Haskell, Elixir, Clojure, etc). &lt;br&gt;
But in case of IaC, we describe the desired state of infrastructure &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;I want 2 EC2 instances with such and such properties&lt;/code&gt; &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We don't specify how exactly to get them. We don't specify what APIs to call and in what order, we don't specify logic to handle dependencies between resources. Instead, we rely on Terraform (or CloudFormation) to figure that out and do it for us.&lt;/p&gt;

&lt;p&gt;The actual logic, the code, is the tool, Terraform or CloudFormation. What we give it, that textual description of what we want, is rather &lt;em&gt;data&lt;/em&gt;. &lt;/p&gt;




&lt;p&gt;I have seen people take the name "Infrastructure as Code" for the face value and treat it the same way as the actual code. They try to fit loops, conditional statements and other imperative constructs into it, as if it was Java or C#. And it usually ends up pretty badly.&lt;/p&gt;

&lt;p&gt;We should be very clear about what IaC is all about. Terraform or CloudFormation are not programming languages, not even frameworks. IaC is about being able to declaratively say what infrastructure you need and then use tools that will figure out how to get it for you. Trying to fit extensive logic into it is like trying to dig the ground with an iPhone. It can do it to some extent, but it is not what it's all about.&lt;/p&gt;




&lt;p&gt;Infrastructure as Code seems like a very misleading term to me. When using this approach, you don't write actual code (logic) that will create infrastructure. You create configuration files that contain data that says what the infrastructure should look like. You create data, not code. That's why in my mind, "Infrastructure as Code" is actually &lt;strong&gt;Infrastructure as Data&lt;/strong&gt;.&lt;/p&gt;

</description>
      <category>cloud</category>
      <category>terraform</category>
      <category>programming</category>
      <category>devops</category>
    </item>
    <item>
      <title>Animated Circular progress bar using Html and CSS</title>
      <author>Foolish Developer</author>
      <pubDate>Wed, 12 May 2021 20:44:55 +0000</pubDate>
      <link>https://dev.to/code_mystery/animated-circular-progress-bar-using-html-and-css-1m9j</link>
      <guid>https://dev.to/code_mystery/animated-circular-progress-bar-using-html-and-css-1m9j</guid>
      <description>&lt;p&gt;Today in this blog you’ll learn how to create a Responsive Circular Progress Bar using HTML CSS &amp;amp; Bootstrap.&lt;br&gt;
The &lt;a href="https://www.foolishdeveloper.com/2021/05/circular-progress-bar-using-html-and-css.html"&gt;circular progress bars&lt;/a&gt; present you with a beautiful and visually compelling way to showcase a single statistic. In this program [Circular Progress Bar], there are three bars on the webpage with different percent, and when you refresh the page, the circle graph fills to the percentage-based location. These bars are fully responsive to any device like a tablet, mobiles, etc.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lUw9X_ak--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/np224pqc9n6ewjy0dg27.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lUw9X_ak--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/np224pqc9n6ewjy0dg27.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the case of this circular progress bar, you can pre-determine the percentage as needed. This means that you can pre-determine the &lt;a href="https://www.foolishdeveloper.com/2021/05/circular-progress-bar-using-html-and-css.html"&gt;percentage of progress&lt;/a&gt; this animation will stop. In this case, I have basically made a circle of three signs of progress and used different colors for each of them. &lt;/p&gt;

&lt;p&gt;If you like this responsive circular bar and want to get source codes then you can easily get it from the &lt;a href="https://www.foolishdeveloper.com/2021/05/circular-progress-bar-using-html-and-css.html"&gt;download link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;HTML Code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;
&lt;span class="c"&gt;&amp;lt;!--Bootstrap Cdn link--&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/css/bootstrap.min.css"&lt;/span&gt; &lt;span class="na"&gt;integrity=&lt;/span&gt;&lt;span class="s"&gt;"sha384-B0vP5xmATw1+K9KRQjQERJvTumQW0nPEzvF6L/Z6nronJ3oUOFUFpCjEUQouq2+l"&lt;/span&gt; &lt;span class="na"&gt;crossorigin=&lt;/span&gt;&lt;span class="s"&gt;"anonymous"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

 &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"row"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"col-md-3 col-sm-6"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"progress blue"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"progress-left"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"progress-bar"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"progress-right"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"progress-bar"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"progress-value"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;90%&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"col-md-3 col-sm-6"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"progress yellow"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"progress-left"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"progress-bar"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"progress-right"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"progress-bar"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"progress-value"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;75%&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"col-md-3 col-sm-6"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"progress pink"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"progress-left"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"progress-bar"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"progress-right"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"progress-bar"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"progress-value"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;60%&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;CSS Code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#333&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.progress&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;150px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;150px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;line-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;150px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.progress&lt;/span&gt;&lt;span class="nd"&gt;:after&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#f2f5f5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.progress&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.progress&lt;/span&gt; &lt;span class="nc"&gt;.progress-left&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.progress&lt;/span&gt; &lt;span class="nc"&gt;.progress-bar&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.progress&lt;/span&gt; &lt;span class="nc"&gt;.progress-left&lt;/span&gt; &lt;span class="nc"&gt;.progress-bar&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-top-right-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-bottom-right-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;-webkit-transform-origin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt; &lt;span class="nb"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform-origin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt; &lt;span class="nb"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.progress&lt;/span&gt; &lt;span class="nc"&gt;.progress-right&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.progress&lt;/span&gt; &lt;span class="nc"&gt;.progress-right&lt;/span&gt; &lt;span class="nc"&gt;.progress-bar&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-top-left-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-bottom-left-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;-webkit-transform-origin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt; &lt;span class="nb"&gt;right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform-origin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt; &lt;span class="nb"&gt;right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;loading-1&lt;/span&gt; &lt;span class="m"&gt;1.8s&lt;/span&gt; &lt;span class="n"&gt;linear&lt;/span&gt; &lt;span class="n"&gt;forwards&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.progress&lt;/span&gt; &lt;span class="nc"&gt;.progress-value&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;24px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;250&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;245&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;245&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.progress.blue&lt;/span&gt; &lt;span class="nc"&gt;.progress-bar&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;border-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#26abfd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.progress.blue&lt;/span&gt; &lt;span class="nc"&gt;.progress-left&lt;/span&gt; &lt;span class="nc"&gt;.progress-bar&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;loading-2&lt;/span&gt; &lt;span class="m"&gt;1.5s&lt;/span&gt; &lt;span class="n"&gt;linear&lt;/span&gt; &lt;span class="n"&gt;forwards&lt;/span&gt; &lt;span class="m"&gt;1.8s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.progress.yellow&lt;/span&gt; &lt;span class="nc"&gt;.progress-bar&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;border-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fdc426&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.progress.yellow&lt;/span&gt; &lt;span class="nc"&gt;.progress-left&lt;/span&gt; &lt;span class="nc"&gt;.progress-bar&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;loading-3&lt;/span&gt; &lt;span class="m"&gt;1s&lt;/span&gt; &lt;span class="n"&gt;linear&lt;/span&gt; &lt;span class="n"&gt;forwards&lt;/span&gt; &lt;span class="m"&gt;1.8s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.progress.pink&lt;/span&gt; &lt;span class="nc"&gt;.progress-bar&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;border-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#f83754&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.progress.pink&lt;/span&gt; &lt;span class="nc"&gt;.progress-left&lt;/span&gt; &lt;span class="nc"&gt;.progress-bar&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;loading-4&lt;/span&gt; &lt;span class="m"&gt;0.4s&lt;/span&gt; &lt;span class="n"&gt;linear&lt;/span&gt; &lt;span class="n"&gt;forwards&lt;/span&gt; &lt;span class="m"&gt;1.8s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.progress.green&lt;/span&gt; &lt;span class="nc"&gt;.progress-bar&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;border-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#1abc9c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.progress.green&lt;/span&gt; &lt;span class="nc"&gt;.progress-left&lt;/span&gt; &lt;span class="nc"&gt;.progress-bar&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;loading-5&lt;/span&gt; &lt;span class="m"&gt;1.2s&lt;/span&gt; &lt;span class="n"&gt;linear&lt;/span&gt; &lt;span class="n"&gt;forwards&lt;/span&gt; &lt;span class="m"&gt;1.8s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;loading-1&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;-webkit-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;-webkit-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;180deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;180deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;loading-2&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;-webkit-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;-webkit-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;144deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;144deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;loading-3&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;-webkit-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;-webkit-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;90deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;90deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;loading-4&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;-webkit-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;-webkit-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;36deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;36deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;loading-5&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;-webkit-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;-webkit-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;126deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;126deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="n"&gt;only&lt;/span&gt; &lt;span class="n"&gt;screen&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;990px&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nc"&gt;.progress&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
