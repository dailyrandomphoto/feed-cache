<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>10 SaaS Startups Ideas to Build in 2021</title>
      <author>Bobby Iliev</author>
      <pubDate>Mon, 19 Apr 2021 12:58:29 +0000</pubDate>
      <link>https://dev.to/bobbyiliev/10-saas-startups-ideas-to-build-in-2021-2047</link>
      <guid>https://dev.to/bobbyiliev/10-saas-startups-ideas-to-build-in-2021-2047</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;Software-as-a-Service, or SaaS for short, in most cases, is a platform that provides a specific service on a monthly or yearly subscription plan.&lt;/p&gt;

&lt;p&gt;Popular SaaS products are Netflix, Spotify, Dropbox, and Slack. They all offer a specific service which you pay a certain amount for every month.&lt;/p&gt;

&lt;p&gt;Running a SaaS business could help you earn some extra income and eventually even turn it into your full-time project.&lt;/p&gt;

&lt;p&gt;In this post, I will share 10 SaaS ideas that you could build in 2021 and that have the potential to turn into profitable products!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-laravel-wave"&gt;
  &lt;/a&gt;
  What is Laravel Wave
&lt;/h1&gt;

&lt;p&gt;Wave is the ultimate Software as a Service Starter Kit packed with great features like authentication, subscriptions, invoices, announcements, user profiles, and so much more. The best thing is that Wave is now open-source, and you can download it for free &lt;a href="https://github.com/thedevdojo/wave"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z4HZLNjR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/21223421/114724123-eb3dd600-9d43-11eb-861f-c70806f9aec6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z4HZLNjR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/21223421/114724123-eb3dd600-9d43-11eb-861f-c70806f9aec6.png" alt="Laravel Wave SaaS"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Building a SaaS from scratch could be pretty time-consuming and costly, especially in the beginning when it is not making you any money. This is why Wave is so beneficial for small startups and solopreneurs!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-saas-blog"&gt;
  &lt;/a&gt;
  1. SaaS blog
&lt;/h1&gt;

&lt;p&gt;Content creation has been a big thing for many years now. If you are an expert on any topic, having a blog is a great way to share your knowledge with the world.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A4U3maRI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/21223421/114724468-4079e780-9d44-11eb-8b94-c3efccb4c337.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A4U3maRI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/21223421/114724468-4079e780-9d44-11eb-8b94-c3efccb4c337.png" alt="SaaS DevBlog"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Laravel Wave could help you build a platform where people would have to sign up in order to be able to read your premium content.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-courses-platform"&gt;
  &lt;/a&gt;
  2. Courses platform
&lt;/h1&gt;

&lt;p&gt;As many people prefer video rather than reading, similar to the SaaS Blog, you could create a platform where you would upload your video courses. It would be similar to Netflix but for developers or the specific topic that you are an expert on.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DKZJ28_H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/21223421/114725336-170d8b80-9d45-11eb-885a-f767238b8260.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DKZJ28_H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/21223421/114725336-170d8b80-9d45-11eb-885a-f767238b8260.png" alt="Courses platform SaaS"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Platforms like Pluralsight and Udemy have been extremely successful, and they are changing the education system for good. Why not start your own courses platform instead?&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-doctors-appointment-management-and-review"&gt;
  &lt;/a&gt;
  3. Doctors Appointment Management and Review
&lt;/h1&gt;

&lt;p&gt;Finding a good doctor is crucial, but it is also very challenging.&lt;/p&gt;

&lt;p&gt;An idea for a great SaaS would be to create a platform where doctors could register and manage appointments for patients.&lt;/p&gt;

&lt;p&gt;The patients, on the other side, would be able to review the visits after each appointment.&lt;/p&gt;

&lt;p&gt;This would be beneficial for both the doctors and help them gain new patients, but also for the patients as they will be able to read some feedback for the specific doctor before they visit them.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#4-rental-property-management-platform"&gt;
  &lt;/a&gt;
  4. Rental Property Management platform
&lt;/h1&gt;

&lt;p&gt;If you have ever been looking for a rental property, you probably know that it could be a real struggle to find a reliable landlord and decent property.&lt;/p&gt;

&lt;p&gt;Similar to the Doctors Appointment Management system, a good SaaS product idea could be to create a platform where landlords and people looking for rental properties could connect and arrange visits.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#5-website-monitoring-system"&gt;
  &lt;/a&gt;
  5. Website monitoring system
&lt;/h1&gt;

&lt;p&gt;If you have ever managed a website, you probably know that your website uptime is crucial. So being notified when your website goes down is essential so that you could take the necessary actions on time.&lt;/p&gt;

&lt;p&gt;You could build a SaaS product where your users could register and add their domain names that they want to be monitored. Then for a small monthly fee, they will be notified if their website goes down. Pingdom is one such platform.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#6-product-review-system"&gt;
  &lt;/a&gt;
  6. Product review system
&lt;/h1&gt;

&lt;p&gt;With so many products out there, it could be hard to decide which one to pick. It would be nice to have a reliable product review platform where consumers could check the honest opinions of actual customers of the specific product.&lt;/p&gt;

&lt;p&gt;One such platform is Trustpilot.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#7-freelance-website"&gt;
  &lt;/a&gt;
  7. Freelance website
&lt;/h1&gt;

&lt;p&gt;Freelancing is quite a big thing. A lot of people are looking for opportunities, and a lot of companies are looking for people to do specific work for them.&lt;/p&gt;

&lt;p&gt;There are large platforms like Freelance.com and Upwork, but you could build your own platform where you could showcase the services that you offer and let your customers register and pay for a specific service directly via your own freelance website!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#8-invoice-generator"&gt;
  &lt;/a&gt;
  8. Invoice generator
&lt;/h1&gt;

&lt;p&gt;If you are a freelancer who is just getting started sending a professional invoice to your customers is key. &lt;/p&gt;

&lt;p&gt;An easy-to-use platform that lets your users generate professional-looking invoices and mail them out to their customers is definitely a service that I would be willing to pay for on a monthly basis.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#9-cv-generator"&gt;
  &lt;/a&gt;
  9. CV Generator
&lt;/h1&gt;

&lt;p&gt;Having a professional CV is essential for everyone who is applying for a new role. The CV makes you stand out among other candidates, and it is the first impression that your possible future employer gets about you.&lt;/p&gt;

&lt;p&gt;Creating a CV generator SaaS that stands out compared to other large platforms like reasume.io and Enhance CV where millions of users use them and have nearly identical-looking CVs could be a game-changer!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#10-posts-management-platform"&gt;
  &lt;/a&gt;
  10. Posts management platform
&lt;/h1&gt;

&lt;p&gt;With so many blogging platforms out there like DEV.to, Hash node, Medium and etc., it could be time-consuming to share your posts on each platform.&lt;/p&gt;

&lt;p&gt;It would be cool if people could have a centralized spot where they could publish their content, and then the posts would get automatically re-published on all other platforms, too, kind of like the ultimate post aggregation system!&lt;/p&gt;

&lt;p&gt;So for a small monthly fee, your users could post all of their posts on your platform, and then thanks to the APIs provided by the other platforms, you could automatically re-publish them on all the platforms that you've built an integration with.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;I hope that you find this helpful and hope that you choose an idea and build your SaaS soon!&lt;/p&gt;

&lt;p&gt;If you enjoy the Wave project, make sure to star it on GitHub!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/thedevdojo/wave"&gt;Laravel Wave GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To learn more about building a SaaS product from scratch, I strongly recommend &lt;a href="https://saasadventure.io/"&gt;the SaaS Adventure course&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>saas</category>
      <category>laravel</category>
      <category>php</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Command-Line Interfaces: Structure &amp; Syntax</title>
      <author>Paula Santamaría</author>
      <pubDate>Mon, 19 Apr 2021 12:30:30 +0000</pubDate>
      <link>https://dev.to/paulasantamaria/command-line-interfaces-structure-syntax-2533</link>
      <guid>https://dev.to/paulasantamaria/command-line-interfaces-structure-syntax-2533</guid>
      <description>&lt;p&gt;If you are a developer, chances are you have used or read about CLIs already (maybe to execute git or npm commands or in some library's documentation). &lt;/p&gt;

&lt;p&gt;I work with multiple CLIs every day (docker, dotnet, npm, git, etc.), but I had never stopped to learn much about their structure or syntax until recently. Reading documentation and examples is usually enough to get by. &lt;/p&gt;

&lt;p&gt;However, I'm currently developing my own CLI for a personal project, so I decided to learn more about &lt;strong&gt;CLI design, structure, syntax, and conventions&lt;/strong&gt;. I did my research, which I documented and decided to share here in this post.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="#1-introduction"&gt;1. Introduction&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#11-structure"&gt;1.1. Structure&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#2-arguments"&gt;2. Arguments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#3-options"&gt;3. Options&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#31-flags"&gt;3.1. Flags&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#4-the---help-flag"&gt;4. The --help flag&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#41-common-aliases-for-the---help-flag"&gt;4.1. Common aliases for the --help flag:&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#42-levels-of-verbosity"&gt;4.2. Levels of verbosity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#43-the-help-command"&gt;4.3. The help command&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#5-cli-description-syntax-conventions"&gt;5. CLI description syntax conventions&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#51-required-parameters"&gt;5.1. Required Parameters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#52-optional-parameters"&gt;5.2. Optional Parameters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#53-arguments-that-can-receive-many-values"&gt;5.3. Arguments that can receive many values&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#54-mutually-exclusive-arguments"&gt;5.4. Mutually exclusive arguments&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#6-references"&gt;6. References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#1-introduction"&gt;
  &lt;/a&gt;
  1. Introduction
&lt;/h1&gt;

&lt;p&gt;A CLI or Command Line Interface is an application that &lt;strong&gt;handles user interaction through the Command Line&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;They don't have graphics (except, maybe, for ASCII Art 😂).&lt;br&gt;
All the &lt;strong&gt;information is presented&lt;/strong&gt; to the user &lt;strong&gt;in the form of text&lt;/strong&gt; and &lt;strong&gt;the user interacts&lt;/strong&gt; with it by &lt;strong&gt;typing in commands&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;CLIs can be faster than GUIs for certain tasks (especially for monotonous tasks and when you're already familiar with the commands). One of the main advantages they have over GUI is that they're &lt;strong&gt;easier to *automate&lt;/strong&gt;* (running "npm install" in a CI pipeline could be a lot trickier without a CLI).&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#11-structure"&gt;
  &lt;/a&gt;
  1.1. Structure
&lt;/h2&gt;

&lt;p&gt;Most CLIs are designed with the following structures:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;&amp;lt;command&amp;gt; [arguments] [options]&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;Example: &lt;code&gt;ls /home/dir --all&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;&amp;lt;program&amp;gt; &amp;lt;command&amp;gt; [arguments] [options]&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;Example: &lt;code&gt;git fetch origin main --depth=10&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;&amp;lt;program&amp;gt; [arguments] [options]&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;Example: &lt;code&gt;docker -v&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iBJ_bwEa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/lG5NuVa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iBJ_bwEa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/lG5NuVa.png" alt="Example: ls /home/my-dir --all"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9qibf0e8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/KmzktBL.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9qibf0e8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/KmzktBL.png" alt="Example: git fetch origin main --depth=10 "&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Commands are usually represented as &lt;em&gt;verbs&lt;/em&gt; and programs as &lt;em&gt;nouns&lt;/em&gt; (as they are usually a short version of the program's name). There are some cases where a second (or third, or more) noun is used to narrow the scope in which the command will operate, for example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker container start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Here, we have the program (docker), the context (container), and the command (start).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#2-arguments"&gt;
  &lt;/a&gt;
  2. Arguments
&lt;/h1&gt;

&lt;p&gt;Arguments in a CLI allow &lt;strong&gt;users to send data&lt;/strong&gt; to the application, sometimes in a command context. They are often called &lt;em&gt;positional arguments&lt;/em&gt; because they are &lt;strong&gt;identified by their position&lt;/strong&gt;, which means users must write the value for each argument in the &lt;em&gt;correct position&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mycli command argValue1 argValue2
              |_______| |_______|
                  0         1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;They can be required or not. If they are not required, the command's behavior may vary in the absence of the parameter, often using a &lt;em&gt;default value&lt;/em&gt; instead.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# No argument provided -&amp;gt; Installs all dependencies from the package.json&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; npm &lt;span class="nb"&gt;install&lt;/span&gt;

&lt;span class="c"&gt;# Argument value: some-package -&amp;gt; Installs only some-package&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; npm &lt;span class="nb"&gt;install &lt;/span&gt;some-package
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;
&lt;span class="c"&gt;# No arguments -&amp;gt; Uses default remote and branch.&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; git fetch

&lt;span class="c"&gt;# Passing a specific remote and branch as arguments.&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; git fetch origin main
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#3-options"&gt;
  &lt;/a&gt;
  3. Options
&lt;/h1&gt;

&lt;p&gt;Options are &lt;strong&gt;named parameters&lt;/strong&gt; that can be passed to a command and are represented by &lt;strong&gt;key-value pairs&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Unlike positional arguments, their &lt;strong&gt;position is not important&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;You're probably familiar with the following example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Key: --message &lt;/span&gt;
&lt;span class="c"&gt;# Value: "commit message"&lt;/span&gt;
git commit &lt;span class="nt"&gt;--message&lt;/span&gt; &lt;span class="s2"&gt;"commit message"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Options are usually (not always) used to represent &lt;strong&gt;optional&lt;/strong&gt; parameters. In most cases, if a parameter is required, a positional argument is the best way to go.&lt;/p&gt;

&lt;p&gt;Some options have &lt;strong&gt;aliases&lt;/strong&gt;, which are &lt;strong&gt;short versions&lt;/strong&gt; of the same option, easier to type and remember. They're usually identified by a single dash prefix:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Long version&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; mycli &lt;span class="nt"&gt;--help&lt;/span&gt;

&lt;span class="c"&gt;# Alias&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; mycli &lt;span class="nt"&gt;-h&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Different &lt;em&gt;delimiters&lt;/em&gt; are supported, depending on the CLI and Operating System. These are some of the most common:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Single space&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; mycli &lt;span class="nt"&gt;--file&lt;/span&gt; text.txt

&lt;span class="c"&gt;# =&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; mycli &lt;span class="nt"&gt;--file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;text.txt

&lt;span class="c"&gt;# :&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; mycli &lt;span class="nt"&gt;--file&lt;/span&gt;:text.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#31-flags"&gt;
  &lt;/a&gt;
  3.1. Flags
&lt;/h2&gt;

&lt;p&gt;Options that &lt;strong&gt;don't require a value&lt;/strong&gt; are often called Flags. They are boolean, meaning their presence indicates "true" and their absence "false".&lt;/p&gt;

&lt;p&gt;Some examples of commands using flags:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; git push &lt;span class="nt"&gt;--force&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--save-dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#4-the-help-flag"&gt;
  &lt;/a&gt;
  4. The --help flag
&lt;/h1&gt;

&lt;p&gt;Informing our users about the &lt;strong&gt;available commands&lt;/strong&gt; and their &lt;strong&gt;arguments and options&lt;/strong&gt; can be &lt;em&gt;tricky without a GUI&lt;/em&gt;. &lt;br&gt;
That's when the &lt;code&gt;--help&lt;/code&gt; flag comes in.&lt;/p&gt;

&lt;p&gt;When we include the help flag after a command, we ask the CLI to give us more information about it. &lt;br&gt;
Usually, this information will include a short description of the command, arguments, options, and aliases.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--help&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#41-common-aliases-for-the-help-flag"&gt;
  &lt;/a&gt;
  4.1. Common aliases for the --help flag:
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;-help, -h, -?, -H
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#42-levels-of-verbosity"&gt;
  &lt;/a&gt;
  4.2. Levels of verbosity
&lt;/h2&gt;

&lt;p&gt;Some CLIs allow the user to ask for &lt;strong&gt;different levels of help&lt;/strong&gt;. &lt;br&gt;
For example, the dotnet CLI will print the short version when we use &lt;code&gt;-h&lt;/code&gt; or &lt;code&gt;--help&lt;/code&gt; , and the long version when we use &lt;code&gt;-H&lt;/code&gt; or &lt;code&gt;-HELP&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Short version&lt;/span&gt;
dotnet &amp;lt;&lt;span class="nb"&gt;command&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;-h&lt;/span&gt;

&lt;span class="c"&gt;# Long version&lt;/span&gt;
dotnet &amp;lt;&lt;span class="nb"&gt;command&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;-H&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Similarly, git CLI prints a summary of the command briefly explaining how to use it when we use &lt;code&gt;-h&lt;/code&gt;, but redirects to the offline HTML documentation when we use &lt;code&gt;--help&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Short version&lt;/span&gt;
git &amp;lt;&lt;span class="nb"&gt;command&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;-h&lt;/span&gt;

&lt;span class="c"&gt;# Offline HTML docs&lt;/span&gt;
git &amp;lt;&lt;span class="nb"&gt;command&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;--help&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Learning about the different levels of verbosity was really helpful (I've been using it frequently), although it's a shame there's not a standard for it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#43-the-help-command"&gt;
  &lt;/a&gt;
  4.3. The help command
&lt;/h2&gt;

&lt;p&gt;Some CLIs also provide a &lt;strong&gt;help command&lt;/strong&gt;, which usually gives more detailed information than the &lt;code&gt;--help&lt;/code&gt; flag:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;program &lt;span class="nb"&gt;help&lt;/span&gt; &amp;lt;command-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For example, both dotnet CLI and npm CLI will open a browser and redirect you to the command's full documentation when we use the help command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;dotnet &lt;span class="nb"&gt;help&lt;/span&gt; &amp;lt;&lt;span class="nb"&gt;command&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

npm &lt;span class="nb"&gt;help&lt;/span&gt; &amp;lt;&lt;span class="nb"&gt;command&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#5-cli-description-syntax-conventions"&gt;
  &lt;/a&gt;
  5. CLI description syntax conventions
&lt;/h1&gt;

&lt;p&gt;When reading a CLI's documentation or a "man" page, you'll likely come across a particular &lt;strong&gt;syntax used to describe commands&lt;/strong&gt;, their arguments, and options (located often under "Synopsis"). &lt;br&gt;
I used to not pay much attention to it (other than trying and figuring out the general anatomy of the command) and going straight to the examples. But after learning about it and how to interpret it, these descriptions have become much more useful to me.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#51-required-parameters"&gt;
  &lt;/a&gt;
  5.1. Required Parameters
&lt;/h2&gt;

&lt;p&gt;Required parameters are often represented using just the name of the param, although in some cases, you may find them between angle brackets:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;dotnet new &amp;lt;template&amp;gt;&lt;/code&gt;: We can't create a new dotnet project without specifying a template.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;mv source dest&lt;/code&gt;: When moving a file/directory, we must specify the source and destination parameters.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#52-optional-parameters"&gt;
  &lt;/a&gt;
  5.2. Optional Parameters
&lt;/h2&gt;

&lt;p&gt;Optional parameters are most commonly represented using square brackets: &lt;code&gt;mycli command [optionalParameter]&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;docker container ls [options]&lt;/code&gt; We can add some flags and options to alter the command's behavior.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git remote [-v | --verbose]&lt;/code&gt; We can use -v or --verbose to get more information about each git remote.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#53-arguments-that-can-receive-many-values"&gt;
  &lt;/a&gt;
  5.3. Arguments that can receive many values
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Ellipses&lt;/strong&gt; indicate the argument/option expects &lt;strong&gt;many values&lt;/strong&gt;. It can be applied to optional or required parameters &lt;/p&gt;

&lt;p&gt;Here's how it looks like applied to &lt;strong&gt;optional parameters&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;mycli &lt;span class="nb"&gt;command&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;parameter...]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The previous statement tells us our parameter expects &lt;strong&gt;0 to N values&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Required parameters&lt;/strong&gt; that receive many values are usually represented in one of two ways. Here is one of them:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;mycli &lt;span class="nb"&gt;command&lt;/span&gt; &amp;lt;myParameter&amp;gt; &lt;span class="o"&gt;[&lt;/span&gt;myParameter...]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This statement tells us the command receives at least a single value for  &lt;code&gt;&amp;lt;myParameter&amp;gt;&lt;/code&gt; but can also receive more values, represented by &lt;code&gt;[myParameter...]&lt;/code&gt; &lt;strong&gt;resulting in 1 to N values&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Here's an example from the Docker CLI:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker container start &amp;lt;container&amp;gt; &lt;span class="o"&gt;[&lt;/span&gt;container...]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;When executing the start command, we must specify at least one container, but we can also start more than one in the same command.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The second way of representing required parameters with many 1 to N values is as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mycli command &amp;lt;myParameter...&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Or: &lt;code&gt;mycli command myParameter...&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since we are not using square brackets, it's clear &lt;code&gt;myParameter&lt;/code&gt; is required, which indicates it needs &lt;strong&gt;at least one value (1 to N)&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Here's an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;directory...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;We need to specify at least one directory to create when using mkdir, but we can also create more than one.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#54-mutually-exclusive-arguments"&gt;
  &lt;/a&gt;
  5.4. Mutually exclusive arguments
&lt;/h2&gt;

&lt;p&gt;Some arguments &lt;strong&gt;cannot be used together&lt;/strong&gt; in the same command. Their &lt;em&gt;exclusive relationship&lt;/em&gt; is represented using pipes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;mycli &lt;span class="nb"&gt;command&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nt"&gt;--option1&lt;/span&gt; | &lt;span class="nt"&gt;--option2&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The square brackets tell us we &lt;em&gt;don't have to&lt;/em&gt; use any of those options, and the pipe tells us that, if we decide to use them, we can't use them both at the same time. So any of the following are valid:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mycli command&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mycli command --option1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mycli command --option2&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But the following would be invalid:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mycli command --option1 --option2&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An example from git commit:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git commit &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nt"&gt;-a&lt;/span&gt; | &lt;span class="nt"&gt;--interactive&lt;/span&gt; | &lt;span class="nt"&gt;--patch&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The previous statement tells us we can use any of those flags (&lt;code&gt;-a&lt;/code&gt;, &lt;code&gt;--interactive&lt;/code&gt; or &lt;code&gt;--patch&lt;/code&gt; ) but not together&lt;/li&gt;
&lt;li&gt;Also, the square brackets indicate we can also decide not to use any of them.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here's what happens when we try to use &lt;code&gt;-a&lt;/code&gt; and &lt;code&gt;--patch&lt;/code&gt; together:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; git commit &lt;span class="nt"&gt;-a&lt;/span&gt; &lt;span class="nt"&gt;--patch&lt;/span&gt; 

fatal: Only one of &lt;span class="nt"&gt;--include&lt;/span&gt;/--only/--all/--interactive/--patch can be used.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This syntax is often used to represent &lt;strong&gt;aliases&lt;/strong&gt;: &lt;code&gt;git remote [ - v | --verbose ]&lt;/code&gt;. Both flags are valid individually, but it doesn't make sense to use them simultaneously.&lt;/p&gt;

&lt;p&gt;Similarly, there are cases when &lt;strong&gt;at least one option must be included&lt;/strong&gt;. In those cases, we use vertical bars, and we group the parameters using curly brackets or parentheses, like so:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mycli command { --option1 | --option2 }&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Or:  &lt;code&gt;mycli command ( --option1 | --option2 )&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The curly brackets or parentheses indicate that at least one option must be included.&lt;/p&gt;

&lt;p&gt;Here's an example from &lt;code&gt;git remote&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git remote set-head &amp;lt;name&amp;gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;-a&lt;/span&gt; | &lt;span class="nt"&gt;--auto&lt;/span&gt; | &lt;span class="nt"&gt;-d&lt;/span&gt; | &lt;span class="nt"&gt;--delete&lt;/span&gt; | &amp;lt;branch&amp;gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;parenthesis&lt;/strong&gt; indicates that we must &lt;strong&gt;choose at least one&lt;/strong&gt; of those options&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;pipes&lt;/strong&gt; tell us &lt;strong&gt;we can't choose two or more&lt;/strong&gt; of them&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If we don't use any of the required options, we get this error:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; git remote set-head origin 

usage: git remote set-head &amp;lt;name&amp;gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;-a&lt;/span&gt; | &lt;span class="nt"&gt;--auto&lt;/span&gt; | &lt;span class="nt"&gt;-d&lt;/span&gt; | &lt;span class="nt"&gt;--delete&lt;/span&gt; | &amp;lt;branch&amp;gt;&lt;span class="o"&gt;)&lt;/span&gt; 
    &lt;span class="nt"&gt;-a&lt;/span&gt;, &lt;span class="nt"&gt;--auto&lt;/span&gt;            &lt;span class="nb"&gt;set &lt;/span&gt;refs/remotes/&amp;lt;name&amp;gt;/HEAD according to remote 
    &lt;span class="nt"&gt;-d&lt;/span&gt;, &lt;span class="nt"&gt;--delete&lt;/span&gt;          delete refs/remotes/&amp;lt;name&amp;gt;/HEAD
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another example from &lt;code&gt;dotnet new&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;dotnet new &amp;lt;template&amp;gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;-lang&lt;/span&gt;|--language &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"C#"&lt;/span&gt;|&lt;span class="s2"&gt;"F#"&lt;/span&gt;|VB&lt;span class="o"&gt;}]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;So, the &lt;strong&gt;square brackets&lt;/strong&gt; indicate that passing a &lt;code&gt;-lang&lt;/code&gt;  or &lt;code&gt;--language&lt;/code&gt;  is optional&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;curly braces&lt;/strong&gt; and &lt;strong&gt;pipe&lt;/strong&gt; indicate that we must choose between C#, F#, and VB.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;I know I could have developed my CLI without stopping to learn any of this. After all, there are libraries that would take care of the syntax and interpretation of commands. Nonetheless, I found it extremely interesting, and I have been using this new knowledge a lot after acquiring it. Finding and reading CLIs documentation has become a lot easier, and I learned many tips that will definitely help me develop a better, more intuitive CLI following the conventions and standards described in this article.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#6-references"&gt;
  &lt;/a&gt;
  6. References
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.codecademy.com/articles/command-line-interface"&gt;Command Line Interface - Codeacademy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developers.google.com/style/code-syntax"&gt;Documenting command-line syntax - Google Developer Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/dotnet/core/tools/"&gt;.NET CLI documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git-scm.com/docs"&gt;Git CLI documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.npmjs.com/cli/v7/commands"&gt;NPM CLI documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>terminal</category>
      <category>cli</category>
      <category>commandline</category>
      <category>documentation</category>
    </item>
    <item>
      <title>Reflecting on my 1st month blogging; a retrospect 💭</title>
      <author>Amelia Vieira Rosado</author>
      <pubDate>Mon, 19 Apr 2021 11:51:56 +0000</pubDate>
      <link>https://dev.to/technoglot/reflecting-on-my-1st-month-blogging-a-retrospect-1c6k</link>
      <guid>https://dev.to/technoglot/reflecting-on-my-1st-month-blogging-a-retrospect-1c6k</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@adigold1?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Adi Goldstein&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/celebrate?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Hi there! 👋🏻 Fancy seeing you here! &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Disclaimer: This post is a little different from my other posts. Despite this, I hope you find value in it. 😊 Proceed at your own risk.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#brief-intro"&gt;
  &lt;/a&gt;
  Brief intro
&lt;/h1&gt;

&lt;p&gt;16 posts, 3 badges and almost 22K views later (at the time of this writing), here I am, celebrating my first month blogging! 🎉 I still can't believe how fast time has passed by! Time flies when you're having fun, right? 😁&lt;/p&gt;

&lt;p&gt;In this post, I'll walk you through some of the things I learned in the past month and some points that I wish to improve on in the future.&lt;/p&gt;

&lt;p&gt;Let's not waste more time and let us look back at my 1st month blogging! 🎉&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#blogging-platforms"&gt;
  &lt;/a&gt;
  Blogging platforms 👩🏻‍💻
&lt;/h1&gt;

&lt;p&gt;I won't lie. The plan was for me to use Hashnode as my main blogging platform and then cross-post to DEV.to. Well, guess what? &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--brdP8Ulw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://external-content.duckduckgo.com/iu/%3Fu%3Dhttps%253A%252F%252Fmedia.giphy.com%252Fmedia%252Fl2JeiETrmiLUlCyLS%252Fgiphy.gif%26f%3D1%26nofb%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--brdP8Ulw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://external-content.duckduckgo.com/iu/%3Fu%3Dhttps%253A%252F%252Fmedia.giphy.com%252Fmedia%252Fl2JeiETrmiLUlCyLS%252Fgiphy.gif%26f%3D1%26nofb%3D1" alt="change of plans GIF"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I am now using DEV.to as my main blogging platform. The reason? I just find that I get more engagement here than on the other side (Hashnode), and that is, with almost no effort and self-promo. As a bonus, at least on two or three occasions, &lt;a href="https://dev.to/devteam"&gt;the DEV team&lt;/a&gt; shared my posts on Twitter. (I only created a Twitter account about a week ago or so, therefore I'm essentially a nobody there. Zero shame in admitting this whatsoever 😁). &lt;/p&gt;

&lt;p&gt;With that being said, this made a HUGE difference in how much exposure my blogs got. So, a HUGE thank you goes to &lt;a href="https://dev.to/devteam"&gt;the DEV team&lt;/a&gt; for putting our work in the spotlight! 💖&lt;/p&gt;

&lt;p&gt;Furthermore, since I'm already so comfortable here and it REALLY feels like a community, I'll be more active here than on Hashnode. That's my choice for the time being. (We can go in more details in the comment section, if you like 😉)&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#sharing-on-socials"&gt;
  &lt;/a&gt;
  Sharing on socials 📣
&lt;/h1&gt;

&lt;p&gt;As I already hinted in the previous point: my social media presence is weak. Matter of fact; I'm not a fan of social platforms to begin with. (Has nothing to do with the fact that I'm an introvert by the way). &lt;/p&gt;

&lt;p&gt;I have a LinkedIn account, but I don't post on LinkedIn. To me LinkedIn is arguably the LAMEST social media platform to ever exist. (Oops, I said it) The atmosphere there also feels...well...uh....uptight. I honestly don't think my posts would benefit from LinkedIn, though PLEASE prove me wrong in the comments if you strongly disagree with me! 😂&lt;/p&gt;

&lt;p&gt;Then there is Twitter. Not gonna lie, I just can't seem to get the hang of Twitter yet. Lots of devs love being on there and I can understand why, but I cannot for the life of me figure out what to post yet. Any help is appreciated, so drop your tips in the comments! 👇🏻 Pretty please! 🥺&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;: In this past month, my focus has been exclusively on blogging. I haven't really cared much about promoting my content. Which ain't catastrophic or anything, but I do realize that in order to get my content to reach more people, I'll have to promote it to some degree. For now, this point is a WIP (Work In Progress).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#engagement-sucks"&gt;
  &lt;/a&gt;
  Engagement SUCKS 👎🏻
&lt;/h1&gt;

&lt;p&gt;Oh boy, this one is frustrating! Let me tell you something: I don't lose sleep over this, but if anything, I'd love to hear from others how they feel about my blogs. I personally value comments more than likes. I like to engage in intellectual conversations and discussions whenever possible, but truth is, most people have an easier time dropping likes and moving on with their lives. Totally acceptable, though it leaves me wondering how they really feel about my post.&lt;/p&gt;

&lt;p&gt;On that same note, I garnered almost 300 followers (at the time of this writing) here on DEV.to. In one month! 😲 WOW! Now, hold your horses... Before you go on and praise me (and while I'm thankful for their support), I can count on ONE hand, how many of them actively engage with my posts.&lt;/p&gt;

&lt;p&gt;Nuff complaining! (I ain't, by the way) Allow me to show some gratitude to those of you who either dropped a comment on a post of mine, or threw some 💖s my way or even gave me the 🦄 reaction. THANK YOU FOR YOUR SUPPORT. 🙇🏻‍♀️ And especially thanks for letting me know in one way or another, that my content reached you safe and sound.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#tags-matter"&gt;
  &lt;/a&gt;
  Tags matter #️⃣
&lt;/h1&gt;

&lt;p&gt;Like I said, for now, DEV.to is my main blogging platform of choice. In the future, however, I'll most probably self-host my blog. After all, I prefer being in control. -trust issues intensify- 😨. &lt;/p&gt;

&lt;p&gt;Now, as you already may be aware off, there are MANY tags (read hashtags) you can follow on here. But beware: not all of these tags are as popular. So use them at your own discretion.&lt;/p&gt;

&lt;p&gt;Here's a good example of one of my posts using the tag #datascience (among others):&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/technoglot" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eFu_rAsi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--tY0BDOkD--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/430182/bd897f8a-247e-44b6-bac8-db79fbe1a55b.jpeg" alt="technoglot image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/technoglot/what-on-earth-is-a-data-scientist-44oc" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;What on earth is a Data Scientist? 🤔&lt;/h2&gt;
      &lt;h3&gt;Amelia Vieira Rosado ・ Mar 22 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#discuss&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#help&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#healthydebate&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#datascience&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;That baby right there, got ZERO traction whatsoever. #datascience is dead as fudge. Prove me wrong!&lt;/p&gt;

&lt;p&gt;But seriously: tags matter. Tags matter more than the time at which you post (at least here on DEV.to, dunno about other platforms). Here on DEV.to you can't see how many people are following a certain tag, but you can see the amount of posts published using that tag. Two things can happen when you choose a tag that is heavily used:&lt;br&gt;
1) Your post gets traction&lt;br&gt;
2) Your post does NOT get traction&lt;/p&gt;

&lt;p&gt;(Excuse the lack of scientific proof here. This is just me making assumptions based on experience. My opinions are subject to change in the future 😂).&lt;/p&gt;

&lt;p&gt;So what tag gave me the most attention? Most probably #productivity. Oh, #javascript may probably make you go viral (or not 😜). #javascript is perhaps the most densely populated tag on here.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;💡 PRO tip: Do NOT use tags you came up with, thus tags that are not baked into the DEV.to platform. You risk not being noticed at all if you do this. But who am I to stop you, right?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;
  &lt;a href="#title-matters"&gt;
  &lt;/a&gt;
  Title matters ✍🏻
&lt;/h1&gt;

&lt;p&gt;Here's an all time favorite:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/jmdejager" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u8W7sdD6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--LKoll5jw--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/585443/75085886-a2b8-4def-86e3-c1ece79db805.jpeg" alt="jmdejager image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/jmdejager/top-5-tips-to-get-more-views-48cd" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Top 5 easy tips to get more views 😎🕵️‍♂️&lt;/h2&gt;
      &lt;h3&gt; 🐤🥇 Jasper de Jager ・ Apr  6 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#discuss&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;As &lt;a class="mentioned-user" href="https://dev.to/jmdejager"&gt;@jmdejager&lt;/a&gt;
 illustrates here, what makes a post great, is the amount of clickbaitiness in the title! 🤣 In all seriousness: title DOES matter. I have observed that for instance "listicles" are really popular (despite being allegedly despised by most 🧐). You know, these posts that go "50 (insert whatever here) you need in order to be a kick ass dev!". &lt;/p&gt;

&lt;p&gt;Nothing wrong with these posts by the way. I'm NOT mocking or bashing them by any means. I'm just saying that these are pretty popular in general. Probably because most folks don't want to read a 6 min bulky post anyway. They probably prefer to scan through a list with bullet points and move on. Whatever floats your boat. 🤷🏻‍♀️&lt;/p&gt;

&lt;p&gt;Moving forward, I'll pay more attention to my post titles. I want to make them more inviting and enticing to the potential reader. If I'm lucky, it may even help with SEO and discoverability on the net.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#post-views"&gt;
  &lt;/a&gt;
  Post views 👀
&lt;/h1&gt;

&lt;p&gt;I'm looking at ya, lurker! Nothing wrong with being one though. I tend to be one myself, depending on the platform. Point is: my blogs, much to my surprise, got lots of views this month. At the time of this writing, I have a humble total of (almost) 22K views. (Again, thanks lovelies. I appreciate it 😊). &lt;/p&gt;

&lt;p&gt;But, why am I surprised? Well, I got into blogging with near zero expectations. And remember: I did not promote my content on social media at all (or barely). Another thing I didn't see coming: #productivity gets a LOAD of attention. I really thought no one on here had any interest in productivity! &lt;/p&gt;

&lt;p&gt;When I first started posting here, I thought: "Gee, no dev is gonna want to read this. They all expect hardcore technical blogs!" WRONG. Yep, I was wrong. I admit defeat. 🙇🏻‍♀️ &lt;/p&gt;

&lt;p&gt;P.S.: Does views == reads? Let me know in the comments. 🤔&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#some-stats-amp-accomplishments"&gt;
  &lt;/a&gt;
  Some stats 📉 &amp;amp; accomplishments 🎉
&lt;/h1&gt;

&lt;p&gt;Let me share some stats with you data nerds, not for the sake of bragging, but for the sake of analysis. 🤓 All stats presented here are for the period of February 8th, 2021 till today, 19th of April, 2021. Note that I didn't post anything else after my first post on the 8th of February, until the 17th of March. Now, drumroll please 🥁... (just kidding, hehe).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Follower count: 293&lt;/li&gt;
&lt;li&gt;Total views: 22588&lt;/li&gt;
&lt;li&gt;Total reactions: 801 (and counting)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the past month I also managed to get three badges: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the Fab 5 badge,&lt;/li&gt;
&lt;li&gt;the 4-week-streak badge and most recently,&lt;/li&gt;
&lt;li&gt;the top 7 badge. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(Wasn't expecting the first one anyway, but I comment way too much 🤣. Current comment count: 300+).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;P.S.: Do not be driven by numbers like follower count, amount of likes and views. Though they are nice metrics, they are by no means, at least in my opinion, a measure of success. Do what YOU love, and success will automagically follow! 😉💖&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#a-parting-gift"&gt;
  &lt;/a&gt;
  A parting gift 🎁
&lt;/h1&gt;

&lt;p&gt;In case you missed 'em, find below links to my most popular posts of all time. Go on and binge-read them if you like.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/technoglot" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eFu_rAsi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--tY0BDOkD--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/430182/bd897f8a-247e-44b6-bac8-db79fbe1a55b.jpeg" alt="technoglot image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/technoglot/time-management-productivity-tips-for-devs-4d33" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Time management &amp;amp; productivity tips for devs ⏳&lt;/h2&gt;
      &lt;h3&gt;Amelia Vieira Rosado ・ Apr  6 ・ 8 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#writing&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#watercooler&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#discuss&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/technoglot" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eFu_rAsi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--tY0BDOkD--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/430182/bd897f8a-247e-44b6-bac8-db79fbe1a55b.jpeg" alt="technoglot image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/technoglot/prioritize-tasks-like-a-boss-with-the-eisenhower-method-5a5e" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Prioritize tasks like a BOSS with the Eisenhower method 😎&lt;/h2&gt;
      &lt;h3&gt;Amelia Vieira Rosado ・ Apr  8 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#writing&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#watercooler&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#discuss&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/technoglot" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eFu_rAsi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--tY0BDOkD--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/430182/bd897f8a-247e-44b6-bac8-db79fbe1a55b.jpeg" alt="technoglot image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/technoglot/supercharge-your-blogging-efforts-with-a-solid-system-3jhf" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Supercharge your blogging efforts with a solid system ⚡&lt;/h2&gt;
      &lt;h3&gt;Amelia Vieira Rosado ・ Apr 12 ・ 7 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#writing&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#techtalks&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#discuss&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h1&gt;
  &lt;a href="#its-a-wrap"&gt;
  &lt;/a&gt;
  It's a wrap 🌯
&lt;/h1&gt;

&lt;p&gt;That's it! Nothing else to add here. I might as well do another retrospective blog 3 months from now. 🤔 I'm curious to see how this experiment unfolds. Feel free to share your learnings from your blogging journey below! 👇🏻 I'd love to hear from you! If you have any questions, shoot 'em as well.&lt;/p&gt;


&lt;p&gt;Until then, &lt;a class="mentioned-user" href="https://dev.to/technoglot"&gt;@technoglot&lt;/a&gt;
 signing off ✌🏻&lt;br&gt;&lt;br&gt;
&lt;/p&gt;

&lt;br&gt;&lt;br&gt;
Still here? Catch me on &lt;a href="https://twitter.com/technoglot"&gt;Twitter&lt;/a&gt; or find me &lt;a href="https://linktr.ee/technoglot"&gt;elsewhere&lt;/a&gt;! If you like my blogs and are feeling generous, kindly consider to 👇🏻&lt;br&gt;&lt;br&gt;
&lt;a href="https://www.buymeacoffee.com/technoglot"&gt;&lt;img width="250" src="https://res.cloudinary.com/practicaldev/image/fetch/s--N3AmDEOc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ir6d1lh7uo59jfi2d2v4.png"&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b4J90nl3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/00o5biwvy4hi2os3vp8u.png" alt="Footer banner"&gt;

</description>
      <category>writing</category>
      <category>watercooler</category>
      <category>devjournal</category>
      <category>motivation</category>
    </item>
    <item>
      <title>Free desktop tool for insightful reporting. Let me know what you think😺</title>
      <author>Juliia Nikitina</author>
      <pubDate>Mon, 19 Apr 2021 11:51:31 +0000</pubDate>
      <link>https://dev.to/juliianikitina/flexmonster-desktop-on-product-hunt-4mij</link>
      <guid>https://dev.to/juliianikitina/flexmonster-desktop-on-product-hunt-4mij</guid>
      <description>&lt;p&gt;Hey Dev.to community😸, &lt;br&gt;
I want to share the project my team and I are working on. &lt;/p&gt;

&lt;p&gt;We are developers of JS data visualization library that is used by integrators as a powerful pivot table component for any web project. &lt;/p&gt;

&lt;p&gt;Our team has decided to give &lt;strong&gt;free access to the app to all people&lt;/strong&gt; using pivots in their everyday tasks.&lt;/p&gt;

&lt;p&gt;We have embedded our pivot table into a simple desktop application on the base of our integration with Electron.js.&lt;br&gt;
And now everyone can easily start working with it right after the download. This product is a convenient and simple solution for your fast reporting. And it doesn’t require any extra skills, knowledge or technical specialization.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Flexmonster Pivot Table &amp;amp; Charts for desktop&lt;/strong&gt; is a lightweight reporting tool that provides a rich set of data analysis features: grouping, aggregating, filtering, sorting, pivot charts.&lt;br&gt;
Once you build a pivot grid, emphasize important insights with formatting, customize your report or save results to any format, be it PDF, Excel, HTML, CSV, or PNG.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R1wPTTCm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8olz9bp4sdvx1h0pu463.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R1wPTTCm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8olz9bp4sdvx1h0pu463.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What makes Flexmonster Desktop an effective reporting tool for anyone is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a super quick start by loading data from desired sources,&lt;/li&gt;
&lt;li&gt;a lot of options to export your result to different formats,&lt;/li&gt;
&lt;li&gt;a simple way to change the view on your data: charts, compact or flat view,&lt;/li&gt;
&lt;li&gt;a convenient drag-and-drop and super friendly UI, that allow you to easily configure your report&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&amp;amp; more.&lt;/p&gt;

&lt;p&gt;You can just &lt;a href="https://desktop.flexmonster.com"&gt;download the app&lt;/a&gt;, run it on your computer and quickly make a customized report to present it to your boss or colleagues in just a few minutes.&lt;/p&gt;

&lt;p&gt;If you find it useful but need more custom scenarios for your own soft or website we have a &lt;a href="https://www.flexmonster.com"&gt;developer's version&lt;/a&gt; of our component that can be embedded in your own project. It is powered by extended API calls and different customization options for any use case. You can also customize the app basing it on our Electron integration&lt;/p&gt;

&lt;p&gt;😼 Today is a very important day for us - we are launching on ProductHunt: &lt;a href="https://www.producthunt.com/posts/flexmonster-desktop"&gt;https://www.producthunt.com/posts/flexmonster-desktop&lt;/a&gt;&lt;br&gt;
So we would greatly appreciate your feedback on the app and support on the platform😻.&lt;/p&gt;

&lt;p&gt;If reporting is something you are familiar with - do give it a try!&lt;/p&gt;

</description>
      <category>datascience</category>
      <category>analytics</category>
      <category>javascript</category>
      <category>report</category>
    </item>
    <item>
      <title>Why “dark mode” is more energy-efficent: How to calculate image energy-cost </title>
      <author>Mads Stoumann</author>
      <pubDate>Mon, 19 Apr 2021 11:42:37 +0000</pubDate>
      <link>https://dev.to/madsstoumann/why-dark-mode-is-more-energy-efficent-how-to-calculate-image-energy-cost-45pp</link>
      <guid>https://dev.to/madsstoumann/why-dark-mode-is-more-energy-efficent-how-to-calculate-image-energy-cost-45pp</guid>
      <description>&lt;p&gt;When I read Tom Greenfords execellent book &lt;a href="https://abookapart.com/products/sustainable-web-design"&gt;Sustainable Web Design&lt;/a&gt;, there was one fact that stuck with me in particular:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Running Google Maps in night mode reduced screen power draw by 63 percent.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Why is that?&lt;/p&gt;

&lt;p&gt;When you think about it, it's quite simple:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Black is the most efficient color for OLED screens as the pixels are switched off, and white is the most energy intensive&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So images use different amounts of energy, depending on the intensity of the &lt;code&gt;red&lt;/code&gt;, &lt;code&gt;green&lt;/code&gt; and &lt;code&gt;blue&lt;/code&gt; lights in the pixel.&lt;/p&gt;

&lt;p&gt;Tom goes on to show two examples of his website &lt;strong&gt;before&lt;/strong&gt; and &lt;strong&gt;after&lt;/strong&gt; an update:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Before:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Oye1nA2d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eotv0iy0eevzileimfx2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Oye1nA2d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eotv0iy0eevzileimfx2.png" alt="Before"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;After:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UYaxIY4Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rt3gk4vors0ac6w6cm47.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UYaxIY4Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rt3gk4vors0ac6w6cm47.png" alt="After"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The latter use almost half the energy of the first one! &lt;/p&gt;

&lt;p&gt;Unebelievable, right?&lt;/p&gt;

&lt;p&gt;So – I sat out to create a small tool for calculating the energy-intensity of an image!&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#draw-the-image-onto-a-raw-ltcanvasgt-endraw-"&gt;
  &lt;/a&gt;
  Draw the image onto a &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt;-tag has a really useful method: &lt;code&gt;getImageData()&lt;/code&gt;, which will return a (very large!) array of all the pixels in an image – in chunks of 4: &lt;code&gt;red&lt;/code&gt;, &lt;code&gt;green&lt;/code&gt;, &lt;code&gt;blue&lt;/code&gt; and &lt;code&gt;alpha&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;imgData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getImageData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this array, we can iterate and return an array of percentages:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;len&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;imgData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;imgData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;imgData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;imgData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;g&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;imgData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;imgData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;len&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;g&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;len&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;len&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To get the average:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;avg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ceil&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;g&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The tool is on &lt;a href="https://codepen.io/stoumann/full/vYgzpNp"&gt;Codepen&lt;/a&gt; – try uploading your own image to check the light/energy intensity. &lt;/p&gt;

&lt;p&gt;The initial image is a pure rgb-color-image, with &lt;code&gt;blue&lt;/code&gt; set to 127: &lt;code&gt;rgb(0, 0, 127)&lt;/code&gt;. That results in:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;R: 0%
G: 0%
B: 49%
Average: 17% 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/stoumann/embed/vYgzpNp?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#but-its-not-so-simple"&gt;
  &lt;/a&gt;
  But … It's Not So Simple
&lt;/h2&gt;

&lt;p&gt;While this tool will give you a hint about the energy-usage of an image, it's much more complex than that.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://en.wikipedia.org/wiki/Visible_spectrum"&gt;photon energy&lt;/a&gt; differs for different wavelengths, with red being lowest and violet being highest.&lt;/p&gt;

&lt;p&gt;A pixel contains approx. 10.000 photons, so I assume it's possible to calculate the &lt;strong&gt;eV&lt;/strong&gt; cost of an image in a particular resolution – and then convert that number to &lt;strong&gt;Watt&lt;/strong&gt; – but it's beyond my skills!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;It would be nice, if a tool like &lt;em&gt;Lighthouse&lt;/em&gt; could calculate the energy-effectiveness of a website – perhaps compared to a list of how much energy popular devices use, when all pixels are either black or white.&lt;/p&gt;

&lt;p&gt;This way you could test how much &lt;em&gt;battery drain&lt;/em&gt; you could prevent by designing darker websites!&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
      <category>html</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>performance</category>
    </item>
    <item>
      <title>How It’s Going</title>
      <author>Timi Bello</author>
      <pubDate>Mon, 19 Apr 2021 11:24:11 +0000</pubDate>
      <link>https://dev.to/ourtimefortech/how-it-s-going-20g</link>
      <guid>https://dev.to/ourtimefortech/how-it-s-going-20g</guid>
      <description>&lt;p&gt;Another week in Our Time for Tech has gone by. In the past week, we had a variety of discussions as regards the development process.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;First&lt;/strong&gt;, we had to stop the use of the Devise Gem and the reason was that as we worked further on different features of the App, it was seen (with our Senior Engineers’ help) that it is too complex to fit into the needs of our App. This caused us to have another version of the App on the GitHub repo, of which everything has been running smoothly so far. &lt;/p&gt;

&lt;p&gt;This also taught me that;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“Just because something is popular doesn’t mean that it’s going to fix your current project.” - Arit&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Additionally&lt;/em&gt;, we decided to reduce our App’s MVP by removing the worker-slots feature which allows businesses to alert workers as regards their availability which is specific for upcoming shifts. The removal of this feature was because working on this is far more complex for the time we have which is now less than 7 weeks, including QA(Quality Assurance/smoke testing) and User feedback.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Furthermore&lt;/em&gt;, I learned how important it is to document/write down your progress in whatever you’re learning as it helps you to communicate effectively what you’ve done, which is a vital skill for a developer. &lt;br&gt;
We were also advised and told of the importance of keeping our PRs(Pull Requests) small due to its efficiency and how it makes reviews easier. Everybody likes Small PRs while Long PRs are not liked as they are known to stay for a long time.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Currently&lt;/em&gt;, we’re all working on the UI styling of the App of which we are using SASS and Bootstrap which gives us readable code. In advance, I’m excited about how the guide on using the MiniTests Library is going to look like. As promised by Arit, a collaboration is ongoing with her and Chris Oliver Of GoRails in creating the guide for the testing of the App. &lt;/p&gt;

&lt;p&gt;I’m also glad about how my team and I (now 4 of us) have improved on collaborating, communicating more effectively, and growing together.  &lt;/p&gt;

&lt;p&gt;Some Noteworthy points I learned in the past week:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“It’s great to be comfortable with uncertainty”. &lt;br&gt;
“Uncertainty is something that’s part of a developer’s life.”&lt;br&gt;
“Get comfortable with being uncomfortable”&lt;br&gt;
“Assume best intentions when giving and receiving feedback.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I’m looking forward to more learning and excited to see where we go from here. Thanks for reading!&lt;/p&gt;

&lt;p&gt;Follow along with DEV posts from my cohort: &lt;br&gt;
&lt;a href="https://dev.to/ourtimefortech"&gt;https://dev.to/ourtimefortech&lt;/a&gt;&lt;br&gt;
Check out Our Time for Tech: &lt;br&gt;
&lt;a href="https://ourtimefortech.org/"&gt;https://ourtimefortech.org/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@ilyapavlov?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Ilya Pavlov&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/4096-by-4096-coding-picture?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>weeklylearn</category>
      <category>weeklyretro</category>
      <category>devsjournal</category>
      <category>rails</category>
    </item>
    <item>
      <title>DevDojo Weekly Winners Week 3 April 2021</title>
      <author>Bobby Iliev</author>
      <pubDate>Mon, 19 Apr 2021 10:49:31 +0000</pubDate>
      <link>https://dev.to/bobbyiliev/devdojo-weekly-winners-week-3-april-2021-4ink</link>
      <guid>https://dev.to/bobbyiliev/devdojo-weekly-winners-week-3-april-2021-4ink</guid>
      <description>&lt;p&gt;It's that time of the week again. That's right, the time of the week where we congratulate five winners on DevDojo to win a quick $20 for writing an awesome article or tutorial.&lt;/p&gt;

&lt;p&gt;If you want to learn more about how you can join in on this weekly contest. Click here to check out the official rules.&lt;/p&gt;

&lt;p&gt;Ok, below are the five posts that we have selected this week. In no particular order, here are your weekly winners. 🏆&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-25-marvelous-image-resources"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://devdojo.com/savio/25-marvelous-resources-to-satisfy-your-image-needs"&gt;25 Marvelous Image Resources&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Check out these awesome 25 resources to find the perfect image for any of your web development needs. Written by &lt;a href="https://devdojo.com/savio"&gt;savio&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://devdojo.com/savio/25-marvelous-resources-to-satisfy-your-image-needs"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--18tyYpG2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/posts/images/April2021/25-marvelous-resources-to-satisfy-your-image-needs1.jpg%3Fauto%3Dformat%26q%3D70%26w%3D1280" alt="25 Marvelous Image Resources"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-css-variables"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://devdojo.com/zfett/css-variables-what-are-they-how-can-they-be-used"&gt;CSS Variables&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Learn all about CSS variables. What are they and how to use them. This fantastic article was written by &lt;a href="https://devdojo.com/zfett"&gt;zfett&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://devdojo.com/zfett/css-variables-what-are-they-how-can-they-be-used"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Va5uyGP3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/posts/images/April2021/css-variables-what-are-they-how-can-they-be-used4.jpg%3Fauto%3Dformat%26q%3D70%26w%3D1280" alt="CSS Variables"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-what-is-redux"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://devdojo.com/rahulism/what-is-redux-practical-guide-to-redux"&gt;What is Redux?&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Learn about Redux and how you can use it in your React projects. This rad tutorial was written by &lt;a href="https://devdojo.com/rahulism"&gt;rahulism&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://devdojo.com/rahulism/what-is-redux-practical-guide-to-redux"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--unwcYXmL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/posts/images/April2021/what-is-redux-practical-guide-to-redux2.jpg%3Fauto%3Dformat%26q%3D70%26w%3D1280" alt="What is Redux?"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#4-how-to-stay-productive-as-a-developer"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://devdojo.com/bo-iliev/5-tips-on-how-to-stay-motivated-and-productive"&gt;How To Stay Productive as a Developer&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Here are five sure-fire ways to stay motivated and productive as a developer. You've got to check out this excellent article posted by &lt;a href="https://devdojo.com/bo-iliev"&gt;bo-iliev&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://devdojo.com/bo-iliev/5-tips-on-how-to-stay-motivated-and-productive"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wr-0fGbQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/posts/images/April2021/5-tips-on-how-to-stay-motivated-and-productive2.jpg%3Fauto%3Dformat%26q%3D70%26w%3D1280" alt="How To Stay Productive as a Developer"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#5-the-react-tutorial-for-2021"&gt;
  &lt;/a&gt;
  5. &lt;a href="https://devdojo.com/reedbarger/the-react-tutorial-for-2021-a-complete-guide"&gt;The React Tutorial for 2021&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;This post is the ultimate React Tutorial for 2021. It's a complete guide to help you learn the ins and outs of React. This bitchin' guide was written by &lt;a href="https://devdojo.com/reedbarger"&gt;reedbarger&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://devdojo.com/reedbarger/the-react-tutorial-for-2021-a-complete-guide"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cK3Ohq5M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/posts/images/April2021/the-react-tutorial-for-2021-a-complete-guide.jpg%3Fauto%3Dformat%26q%3D70%26w%3D1280" alt="The React Tutorial for 2021"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;We had another great week of tutorials and posts written on the DevDojo. Thanks to everyone who is helping to make this community thrive with excellent content 🙌&lt;/p&gt;

&lt;p&gt;I wish you a fantastic upcoming week. Remember to have fun as your coding away on your projects because being a developer truly is amazing. 😊&lt;/p&gt;

</description>
      <category>writing</category>
      <category>webdev</category>
      <category>react</category>
      <category>javascript</category>
    </item>
    <item>
      <title>GraphQL Schema - The Beginner's Guide to GraphQL Editor p.1</title>
      <author>Tomek Poniatowicz</author>
      <pubDate>Mon, 19 Apr 2021 10:45:37 +0000</pubDate>
      <link>https://dev.to/graphqleditor/graphql-schema-the-beginner-s-guide-to-graphql-editor-p-1-3c3</link>
      <guid>https://dev.to/graphqleditor/graphql-schema-the-beginner-s-guide-to-graphql-editor-p-1-3c3</guid>
      <description>&lt;p&gt;GraphQL Editor is a tool for both advanced users and those only starting to work on GraphQL APIs.&lt;/p&gt;

&lt;p&gt;On the off chance you don't know anything about GraphQL Editor it's a web tool that lets you see and better understand how the schema and various elements within it work, even if you’re not a programmer. &lt;/p&gt;

&lt;p&gt;You can even build a schema by joining the visualized blocks and having GraphQL Editor generate the code for them. That’s just the basics and tool has lots of other useful features a bunch of them added in the recent &lt;a href="https://blog.graphqleditor.com/graphql-editor-v45/"&gt;GraphQL Editor v. 4.5 update&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#schema"&gt;
  &lt;/a&gt;
  Schema
&lt;/h2&gt;

&lt;p&gt;So let’s try it out and set up a very basic schema that should be easy to grasp even for someone completely new to GraphQL. Let’s start by setting up the contact form input:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Let's add strings (email and message),&lt;/li&gt;
&lt;li&gt;we want make them required.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tbq4w1Ov--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d1r3uhulw4ct5nae1rhc.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tbq4w1Ov--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d1r3uhulw4ct5nae1rhc.gif" alt="Schema"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#creating-mutations"&gt;
  &lt;/a&gt;
  Creating Mutations
&lt;/h4&gt;

&lt;p&gt;Now it's time for the types. First let's add a mutation, for this sample mutation we will:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;add a type &amp;amp; set it as a &lt;code&gt;mutation&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;make it required,&lt;/li&gt;
&lt;li&gt;add boolean.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uDTT3sy7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dyyyzr6uunf7mjvvqij3.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uDTT3sy7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dyyyzr6uunf7mjvvqij3.gif" alt="Mutations"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#query"&gt;
  &lt;/a&gt;
  Query
&lt;/h4&gt;

&lt;p&gt;All we need now is a query to fetch the data, for that first lets:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;make a form type with strings for email and message,
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_sqrsxSx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n7del8kl47z9g96a1rc5.gif" alt="Form"&gt;
&lt;/li&gt;
&lt;li&gt;For the query we do the same thing we did before: add type, select &lt;code&gt;query&lt;/code&gt; and once again make it required.&lt;/li&gt;
&lt;li&gt;Now let's make it fetch from the form we made above so remember to check required and also check array and array required here as well.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DlnFkJ5V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j74b7al8iqefn56nzhl5.gif" alt="Query"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#and-its-done"&gt;
  &lt;/a&gt;
  And it's done
&lt;/h2&gt;

&lt;p&gt;As you can see as we finished this last step it automatically rounds it out as a schema and we can even find out how it looks in the visualization:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8XzVUwqo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i7fxtn7nnakabotzjzqr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8XzVUwqo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i7fxtn7nnakabotzjzqr.png" alt="Visualization"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And that’s it, you just created a simple GraphQL schema that can fetch two basic values like emails and messages from a database. Obviously, we haven't even scratched the surface of what GraphQL Editor can do so hopefully you’ll stick around to see what we do next time.&lt;/p&gt;




&lt;p&gt;&lt;em&gt;A guest blog post for &lt;a href="https://blog.graphqleditor.com/"&gt;GraphQL Editor blog&lt;/a&gt; by Michał Tyszkiewicz&lt;/em&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#speed-up-your-graphql-api-development"&gt;
  &lt;/a&gt;
  Speed up your GraphQL API development
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;GraphQL Editor&lt;/strong&gt; is a supportive tool for both advanced GraphQL users as well as those taking their first steps with GraphQL APIs. Our all-in-one development environment for GraphQL will help you build, manage &amp;amp; deploy your GraphQL API much faster. &lt;strong&gt;&lt;a href="https://graphqleditor.com"&gt;Try GraphQL Editor for free!&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://graphqleditor.com/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xh8ZaRkh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hz2iv2u1073dy9orexxf.gif" alt="New features of GraphQL Editor gif"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>graphql</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Lessons from PostgreSQL</title>
      <author>Timi Bello</author>
      <pubDate>Mon, 19 Apr 2021 10:37:55 +0000</pubDate>
      <link>https://dev.to/ourtimefortech/lessons-from-postgresql-4lem</link>
      <guid>https://dev.to/ourtimefortech/lessons-from-postgresql-4lem</guid>
      <description>&lt;p&gt;Hello there! Today, I’ll be talking about some noteworthy lessons I learnt while using PostgreSQL for Our Shiftwork App.&lt;br&gt;
 As much as we didn’t go in-depth using PostgreSQL on the App, they were still quite some things to learn using PostgreSQL. &lt;br&gt;
For the Shiftwork app, my team and I are building, the major thing PostgreSQL was to do was in creating the database. &lt;br&gt;
As I had said before in my blogpost &lt;a href="https://dev.to/ourtimefortech/journeying-as-a-codecollab-fellow-with-our-time-for-tech-1b28"&gt;here,&lt;/a&gt; I jumped from one error to another trying to get the database to be created with most of my issues; PostgreSQL related.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#postgresql-power"&gt;
  &lt;/a&gt;
  PostgreSQL Power
&lt;/h1&gt;

&lt;p&gt;Postgres is an incredibly powerful database that’s packed with many different features. Some of its most interesting and productive capabilities, however, aren’t always evident.&lt;br&gt;
 When we started the initial setup of the app, I wondered why we chose PostgreSQL over MySQL, but I got to learn that PostgreSQL is a superior choice over MySQL based on its rich features, active community, and support.&lt;/p&gt;

&lt;p&gt;As much as PostgreSQL and MySQL are both immensely popular open-source databases, and a variety of real-time applications today utilize both. MySQL is known to be the world’s most popular database, whereas PostgreSQL is known as the world’s most advanced RDBMS database(Relational Database Management System).&lt;/p&gt;

&lt;p&gt;As an RDBMS database, MySQL is not fully SQL compliant and does not have many of the features that PostgreSQL has. This is why PostgreSQL has become a great choice for developers, and its popularity is growing exponentially with each passing day.&lt;br&gt;
PostgreSQL also makes setting up and using databases easier and simpler both on-premises or in the cloud. PostgreSQL can also be a very good data warehouse for running complex reporting queries and procedures on large volumes of data. &lt;/p&gt;

&lt;p&gt;PostgreSQL is an easy-to-use database with its full stack of RDBMS database features and capabilities that can handle structured and unstructured data. Installations can be easily done on Linux-flavored environments using yum or source code from the PostgreSQL website. Installing from source code gives you much more fine-grained control over the installation.&lt;br&gt;
Just as it’s the same with Rails, I learned that a lot can be going under the “hood” despite how deceptively easy it might be to use.&lt;/p&gt;

&lt;p&gt;Another thing I learned was that there are no “users” in PostgreSQL, just roles. &lt;br&gt;
 By running psql Postgres in your terminal, you’ll automatically log in with your username to PostgreSQL, therefore accessing the role created. Once a role is created, you can see it by using the &lt;code&gt;\du&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;The following roles attributes are seen by default:&lt;br&gt;
&lt;code&gt;Superuser&lt;/code&gt;&lt;br&gt;
&lt;code&gt;Create role&lt;/code&gt;&lt;br&gt;
&lt;code&gt;Create DB&lt;/code&gt;&lt;br&gt;
&lt;code&gt;Replication&lt;/code&gt;&lt;br&gt;
&lt;code&gt;Bypass RLS&lt;/code&gt;&lt;br&gt;
and it’s possible not to be a member of any of the roles (Herein lies some of the major errors that might be encountered with PostgreSQL). &lt;/p&gt;

&lt;p&gt;Creating a new role&lt;br&gt;
A new role is created using the CREATE ROLE command:&lt;br&gt;
&lt;code&gt;CREATE ROLE &amp;lt;role&amp;gt;;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Quick Summary of useful commands in postgreSQL&lt;br&gt;
&lt;code&gt;sudo -u Postgres psql&lt;/code&gt;&lt;br&gt;
&lt;code&gt;postgres=# create database mydb;&lt;/code&gt;&lt;br&gt;
&lt;code&gt;postgres=# create user myuser with encrypted password 'mypass';&lt;/code&gt;&lt;br&gt;
&lt;code&gt;postgres=# grant all privileges on database mydb to myuser;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;As I had to consume some documentation and go through resources, I learned a tip which is the importance of reading the PostgreSQL Manual. The official documentation (or docs as they are referred to in short) of any product is the best place to find the largest wealth of information.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#the-little-things"&gt;
  &lt;/a&gt;
  The Little Things
&lt;/h2&gt;

&lt;p&gt;I remember running into this bug, &lt;strong&gt;“ActiveRecord::AdapterNotSpecified: 'PostgreSQL database is not configured”, “Rails Aborted”&lt;/strong&gt; when I was trying to migrate into the database.&lt;br&gt;
After checking and trying several solutions on StackOverflow, I found out the problem was because there was a space before development in the db config file. &lt;br&gt;
This was fixed by simply removing space from the first line and following the indentation. This got me past my hour+ blockade as I didn't know leading spaces were an issue.  Haha funny, isn’t it? &lt;/p&gt;

&lt;p&gt;From here I learned that: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“It can be the simplest things that can cause the most aggravating errors.”  - Arit Amana&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Below are some links to the helpful resources/documentations I used with the bugs I encountered, if you desire to know more: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/25608062/activerecordadapternotspecified-postgresql-database-is-not-configured"&gt;https://stackoverflow.com/questions/25608062/activerecordadapternotspecified-postgresql-database-is-not-configured&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://flaviocopes.com/postgres-user-permissions/"&gt;https://flaviocopes.com/postgres-user-permissions/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://medium.com/coding-blocks/creating-user-database-and-adding-access-on-postgresql-8bfcd2f4a91e"&gt;https://medium.com/coding-blocks/creating-user-database-and-adding-access-on-postgresql-8bfcd2f4a91e&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/52610485/how-to-restart-postgresql-in-ubuntu-18-04/52610486#52610486"&gt;https://stackoverflow.com/questions/52610485/how-to-restart-postgresql-in-ubuntu-18-04/52610486#52610486&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.digitalocean.com/community/tutorials/how-to-install-postgresql-on-ubuntu-20-04-quickstart"&gt;https://www.digitalocean.com/community/tutorials/how-to-install-postgresql-on-ubuntu-20-04-quickstart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://stackoverflow.com/questions/31645550/postgresql-why-psql-cant-connect-to-server"&gt;https://stackoverflow.com/questions/31645550/postgresql-why-psql-cant-connect-to-server&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://serverfault.com/questions/159339/ubuntu-get-postgresql-running"&gt;https://serverfault.com/questions/159339/ubuntu-get-postgresql-running&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://computingforgeeks.com/installing-postgresql-database-server-on-ubuntu/"&gt;https://computingforgeeks.com/installing-postgresql-database-server-on-ubuntu/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While I initially felt quite anxious and tired about how I kept running into one error from another, I’m glad that it has helped foster my learning process. I hope to learn more facets of PostgreSQL soon! Thank you for reading!&lt;/p&gt;

&lt;p&gt;Referencing: &lt;br&gt;
&lt;a href="https://www.enterprisedb.com/blog/postgresql-vs-mysql-360-degree-comparison-syntax-performance-scalability-and-features"&gt;https://www.enterprisedb.com/blog/postgresql-vs-mysql-360-degree-comparison-syntax-performance-scalability-and-features&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@cgower?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Christopher Gower&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/4096-by-4096-tech-pictures?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>postgres</category>
      <category>whatilearned</category>
      <category>rails</category>
    </item>
    <item>
      <title>Easy WordPress theme deployment using Deployer</title>
      <author>Nino Mihovilić</author>
      <pubDate>Mon, 19 Apr 2021 10:29:21 +0000</pubDate>
      <link>https://dev.to/bornfightcompany/easy-wordpress-theme-deployment-using-deployer-2ie7</link>
      <guid>https://dev.to/bornfightcompany/easy-wordpress-theme-deployment-using-deployer-2ie7</guid>
      <description>&lt;p&gt;In this article, I’ll show you an easy and fast way how to set up WordPress theme deployment without downtime using Deployer in 5 steps.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table Of Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#step-1"&gt;Setting up Deployer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#step-2"&gt;Setting up the Server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#step-3"&gt;Setting up SSH Agent Forwarding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#step-4"&gt;Setting up deploy.php&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#step-5"&gt;Testing our Script&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#step-1-setting-up-deployer"&gt;
  &lt;/a&gt;
  Step 1 &lt;a&gt; - Setting up Deployer
&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://deployer.org/docs/getting-started.html"&gt;Deployer&lt;/a&gt; is a simple &lt;strong&gt;open-source&lt;/strong&gt; PHP-based &lt;strong&gt;deployment&lt;/strong&gt; tool. It’s easy to use and set up.&lt;/p&gt;

&lt;p&gt;There are multiple ways to &lt;strong&gt;install&lt;/strong&gt; the tool on their website but the easiest way is to run these 3 commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;curl -LO https://deployer.org/deployer.phar
mv deployer.phar /usr/local/bin/dep
chmod +x /usr/local/bin/dep
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To check if everything is installed ok run the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dep
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-2-setting-up-the-server"&gt;
  &lt;/a&gt;
  Step 2 &lt;a&gt; - Setting up the Server
&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;In this tutorial, we will be using AWS Lighstail, but you can use any other server.&lt;br&gt;
The only requirement is that you have &lt;strong&gt;SSH Access&lt;/strong&gt;.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#creating-an-instance-you-can-skip-this-part-if-you-have-a-server-and-ssh-access"&gt;
  &lt;/a&gt;
  Creating an instance - you can skip this part if you have a server and SSH access
&lt;/h4&gt;

&lt;p&gt;Log in to your AWS account and search for Lightsail in the search bar. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C1vhywVp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r7g6c2bzs1xv8xyo0hmq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C1vhywVp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r7g6c2bzs1xv8xyo0hmq.png" alt="Lightsail"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Create an instance using the WordPress blueprint and Linux platform. When the server is up and running, open the server terminal and add your public SSH key to the &lt;strong&gt;~/.ssh/authorized_keys&lt;/strong&gt; file.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#setting-up-git"&gt;
  &lt;/a&gt;
  Setting up GIT
&lt;/h4&gt;

&lt;p&gt;We need &lt;strong&gt;Git&lt;/strong&gt; on the server because &lt;strong&gt;Deployer&lt;/strong&gt; will pull the theme from the repository. &lt;/p&gt;

&lt;p&gt;As we are on a Linux-based server, the command to install git is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt-get install git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To verify the installation run the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git --version
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-3-setting-up-ssh-agent-forwarding"&gt;
  &lt;/a&gt;
  Step 3 - Setting up SSH Agent Forwarding
&lt;/h3&gt;

&lt;p&gt;To be able to pull the repository, the server needs access to it. We can use &lt;strong&gt;deploy keys&lt;/strong&gt; or &lt;strong&gt;SSH Agent Forwarding&lt;/strong&gt;. Both ways are pretty straightforward when it comes to the set up, but we will go with Agent Forwarding in this tutorial.&lt;/p&gt;

&lt;p&gt;On your local machine position yourself in the &lt;strong&gt;~/.ssh&lt;/strong&gt; folder. If it doesn't exist, create a file named "config".&lt;br&gt;
Enter the following text into the file, replacing example.com with your server's domain name or IP:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Host example.com
  ForwardAgent yes
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The key must be available to &lt;strong&gt;ssh-agent&lt;/strong&gt;. You can check that by running the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ssh-add -L
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the command says that no identity is available, you'll need to add your key:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ssh-add yourkey
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;*For your server SSH Agent Forwarding troubleshooting refer to this tutorial -&amp;gt; &lt;a href="https://docs.github.com/en/developers/overview/using-ssh-agent-forwarding"&gt;Using SSH Agent Forwarding&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-4-setting-up-deployphp"&gt;
  &lt;/a&gt;
  Step 4 &lt;a&gt; - Setting up deploy.php
&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Deploy.php&lt;/strong&gt; is the main &lt;strong&gt;config file&lt;/strong&gt; for Deployer. As we want to only deploy the WordPress theme, we will put the deploy.php in the &lt;strong&gt;theme root&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Position yourself in the theme root and enter the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dep init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will need to provide some basic info. Choose the &lt;strong&gt;0 - Common script&lt;/strong&gt; as it has the basic stuff that we need. &lt;br&gt;
Next, enter your theme repository. In the repository, only the theme files should be present. &lt;br&gt;
In the last step, you can choose to submit anonymous usage information to the PHP-Deployer community.&lt;br&gt;
Now we have the basic deploy.php file. We will do some &lt;strong&gt;changes&lt;/strong&gt; to make our script work.&lt;/p&gt;

&lt;p&gt;First, let's name our application/theme:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;set('application', 'my_project');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can enter anything but let's put our theme name: "super-theme".&lt;/p&gt;

&lt;p&gt;We will set a new variable:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;set('theme_dir', 'path_to_themes_folder');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we need to enter the &lt;strong&gt;server path to the themes folder&lt;/strong&gt;. In our example, we used AWS Lightsail with preinstalled WordPress so the path is: "/home/bitnami/apps/wordpress/htdocs/wp-content/themes".&lt;/p&gt;

&lt;p&gt;Next, we set the host and modify it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;host( 'project.com_or_IP' )
    -&amp;gt;set( 'branch', 'master' )
    -&amp;gt;user( 'bitnami' )
    -&amp;gt;set( 'deploy_path', '~/{{application}}' )
    -&amp;gt;forwardAgent();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can use the &lt;strong&gt;domain name or IP&lt;/strong&gt; for the host. We set up the &lt;strong&gt;branch&lt;/strong&gt; that we want to deploy, the &lt;strong&gt;SSH user&lt;/strong&gt; in our case "bitnami". &lt;br&gt;
The &lt;strong&gt;deploy_path&lt;/strong&gt; contains the deployment path on the server that can be left as is, and we enable &lt;strong&gt;Agent Forwarding&lt;/strong&gt; so that our local SSH key is used for pulling the repository on the server.&lt;/p&gt;

&lt;p&gt;For our script, we need to add an &lt;strong&gt;additional task&lt;/strong&gt; that symlinks the current folder to the themes folder so that we can have the latest theme active after the deployment.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;task( 'deploy:theme', function () {
    run( 'ln -sfn {{deploy_path}}/current {{theme_dir}}/{{application}}' );
} );
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The last part is to &lt;strong&gt;add&lt;/strong&gt; the created task to the main task &lt;strong&gt;"deploy"&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;task( 'deploy', [
    'deploy:info',
    'deploy:prepare',
    'deploy:lock',
    'deploy:release',
    'deploy:update_code',
    'deploy:shared',
    'deploy:writable',
    'deploy:vendors',
    'deploy:clear_paths',
    'deploy:symlink',
    'deploy:theme',
    'deploy:unlock',
    'cleanup',
    'success'
] )-&amp;gt;desc( 'Deploy your theme' );
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We added the "deploy:theme" task after the current symlink is created.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;whole file&lt;/strong&gt; should look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;?php

namespace Deployer;

require 'recipe/common.php';

// Theme name
set( 'application', 'super-theme' );

// Theme repository
set( 'repository', 'git_repository' );

// Theme directory
set( 'theme_dir', '/home/bitnami/apps/wordpress/htdocs/wp-content/themes' );


// [Optional] Allocate tty for git clone. Default value is false.
set( 'git_tty', TRUE );

// Shared files/dirs between deploys
add( 'shared_files', [] );
add( 'shared_dirs', [] );

// Writable dirs by web server
add( 'writable_dirs', [] );
set( 'allow_anonymous_stats', FALSE );


// Hosts
host( 'project.com_or_IP' )
    -&amp;gt;set( 'branch', 'master' )
    -&amp;gt;user( 'bitnami' )
    -&amp;gt;set( 'deploy_path', '~/{{application}}' )
    -&amp;gt;forwardAgent();


task( 'deploy:theme', function () {
    run( 'ln -sfn {{deploy_path}}/current {{theme_dir}}/{{application}}' );
} );

/**
 * Main task
 */
task( 'deploy', [
    'deploy:info',
    'deploy:prepare',
    'deploy:lock',
    'deploy:release',
    'deploy:update_code',
    'deploy:shared',
    'deploy:writable',
    'deploy:vendors',
    'deploy:clear_paths',
    'deploy:symlink',
    'deploy:theme',
    'deploy:unlock',
    'cleanup',
    'success'
] )-&amp;gt;desc( 'Deploy your theme' );

// [Optional] If deploy fails automatically unlock.
after( 'deploy:failed', 'deploy:unlock' );
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-5-testing-our-script"&gt;
  &lt;/a&gt;
  Step 5 &lt;a&gt; - Testing our Script
&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;To run our script we enter the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dep deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If everything is &lt;strong&gt;successful&lt;/strong&gt; it should look like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b3yxZS6r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9midvc9gsw3457vz8i09.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b3yxZS6r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9midvc9gsw3457vz8i09.png" alt="Successful deploy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If something is wrong you can use the verbose mode to debug:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dep deploy -v, provides default installation view with the least information 
dep deploy -vv, provides some more details as compared with the default mode 
dep deploy -vvv, provides a detailed view of the installation output
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Those are the 5 steps for a fast deployment setup for a WordPress theme.&lt;br&gt;
 If you use the same server for all of your projects you can set up this only once and only modify the variables in the deploy.php file.&lt;/p&gt;

&lt;p&gt;There are many ways to manage a WordPress theme and set up deployments. I find this an easy way to quickly set up the workflow, what do you think?&lt;/p&gt;

</description>
      <category>engineeringmonday</category>
      <category>wordpress</category>
      <category>deployment</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>The Art of Celebrating Too Early And Backtracking to Save The Day. A Scraping Story.</title>
      <author>Constantin Cheptea</author>
      <pubDate>Mon, 19 Apr 2021 10:18:57 +0000</pubDate>
      <link>https://dev.to/ccheptea/the-art-of-celebrating-too-early-and-backtracking-to-save-the-day-a-scraping-story-48pp</link>
      <guid>https://dev.to/ccheptea/the-art-of-celebrating-too-early-and-backtracking-to-save-the-day-a-scraping-story-48pp</guid>
      <description>&lt;p&gt;One of our clients asked us if we could build a simple app for scanning product barcodes in stores. The goal is to instantly tell the user if the product is safe for consumption considering specified intolerances (e.g.: Gluten). We would get the product information from a partner website. Only, there's a tiny issue: there's no public API to get the data. On the bright side, we were allowed to scrape it 🕷.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#our-first-scraper"&gt;
  &lt;/a&gt;
  Our first scraper
&lt;/h3&gt;

&lt;p&gt;Building a scraper may seem like a daunting task. There are many tools online that you can use, but after a thorough assessment, we decided we can simplify things by using Elixir (functional programming language) and the Phoenix Framework. With Pheonix, we bootstrapped a basic admin panel in less than a day. The scraper itself is based on a tiny library called Crawly for making the web requests and Flow for parallelising the data processing. The products were not listing the barcodes but they did have high-quality images we could scan with ZBar. Image processing is slow in high-quality images - all the more reason to multithread. Long story short, our scraper turned out to be pretty slick 🚀.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#time-to-make-the-client-happy"&gt;
  &lt;/a&gt;
  Time to make the client happy
&lt;/h3&gt;

&lt;p&gt;We ran our scraper several times and made as many improvements as we could. Our database was ripe with thousands upon thousands of products ready to be picked by our soon-to-be long lasting customers. We were pretty confident we nailed it. Our client was pleased to find out we managed to pull the products without having any public API and took the app (built with ReactNative) for testing with friends and family. We went to celebrate with 🍻 and 🎮. &lt;/p&gt;

&lt;p&gt;A couple of days later our client scheduled a meeting. Time for laurels, we thought. But no, the app turned out to be completely useless. Our client had scanned his entire fridge and found just two products that we also had in our database. Same went for the others. How was that possible? We did scrape the entire website, didn't we? Were there products that were not listed on the website? &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#needle-in-a-haystack"&gt;
  &lt;/a&gt;
  Needle in a haystack
&lt;/h3&gt;

&lt;p&gt;Scraping is indeed a daunting task. After a day of uselessly testing and validating our code, we turned our heads towards the website. What if we looked for the products in the fridge? Namely, the ones we missed. Searching for them manually actually worked! They were on the website, only our scraper couldn't get to them.&lt;/p&gt;

&lt;p&gt;Now the fun begins.&lt;/p&gt;

&lt;p&gt;Our first discovery was that our website had a hard limit of 201 products per category. Meaning, no matter what category we were choosing to scrape we would always be getting the same 201 products. We scraped by category and dietary preference, but we also discovered that we could get completely different products if we applied different combinations of dietary preferences. This meant that if we were to make all possible combinations of dietary preferences we would end up with a lot more products if not all of them. But how do we solve that?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#back-to-high-school"&gt;
  &lt;/a&gt;
  Back to high school
&lt;/h3&gt;

&lt;p&gt;First, we defined our problem. Suppose we have a list of elements, where each number represents a dietary preference. We need to come up with a function that finds all possible unique combinations of those elements. For &lt;code&gt;list = [1, 2, 3]&lt;/code&gt;, our function should return the following possibilities:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Having simplified the terms of the problem we were relieved. Relieved because we knew what to do next, but also because all those years spent in college learning about algorithms are yet again useful (:feeling-grateful)!&lt;/p&gt;

&lt;p&gt;Like children at play, we took the challenge to solve the problem individually, then choose the best solution. Time to code-kata!&lt;/p&gt;

&lt;p&gt;Of course, none of us looked for anything fancy, because the scraper would only run once to get the data. An optimized brute force solution should be enough.&lt;/p&gt;

&lt;p&gt;Here are some of the raw solutions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="c1"&gt;# "To pad, or not to pad?", this is the question...&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;kata1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Enum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;limit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;round&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;IO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="no"&gt;Enum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;acc&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class="n"&gt;digits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;to_pad&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="no"&gt;Enum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;acc&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to_pad&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;Enum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="n"&gt;to_pad&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Enum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Enum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Enum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;([],&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;acc&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;acc&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="c1"&gt;#Using the wisdom of bits.&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;kata2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Enum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# (2^length)-1 -&amp;gt; limit&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pad_leading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"1"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="no"&gt;Enum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;limit&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;acc&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class="n"&gt;acc&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;
          &lt;span class="no"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;List&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:io_lib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"~&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.2.0B"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="no"&gt;Bitwise&lt;/span&gt;&lt;span class="o"&gt;.~~~&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)])),&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="ss"&gt;trim:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
          &lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Enum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
          &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Enum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Enum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"1"&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Enum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;([],&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;acc&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;acc&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="c1"&gt;# This one thinks it's all game of heads and tails.&lt;/span&gt;

&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;Combinations&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;combine&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;combine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;combine&lt;/span&gt;&lt;span class="p"&gt;([],&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;combine&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;current&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="n"&gt;combine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="n"&gt;combine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We ended up choosing the last solution presented above, which is a classic backtracking implementation. You don't implement backtracking algorithms every day. So, although you (should) learn to use it in high school, chances are you forget about it by the time you get your first programming job. Our advice is to do competitive programming whenever you find the time or simply solve problems on platforms such as HackerRank and Codewars. It's fun and it keeps you fresh. Internally, we have a dedicated Slack channel where we add challenges and discuss solutions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#to-be-continued"&gt;
  &lt;/a&gt;
  To be continued...
&lt;/h3&gt;

&lt;p&gt;After accommodating the backtracking solution with our existing code, it felt like our scraper was on steroids. The time to scrape the entire website doubled to around four hours. Clenching teeth, we regularly monitored the numbers in the database. In the end, it turned out well - the number of products almost doubled!&lt;/p&gt;

&lt;p&gt;You may be curious about what happened with the project. Well, with the new data our client was happy to rescan his fridge and ask friends to do the same in real grocery stores. So far, the feedback was relatively positive. As a proof of concept, it does enough to start a discussion about opening the much-needed public APIs to make it work in real life.&lt;br&gt;
For us, however, this was a short project stuffed with lots of fun challenges that required unusual, if not unorthodox, solutions. &lt;/p&gt;

</description>
      <category>elixir</category>
      <category>functional</category>
    </item>
    <item>
      <title>My First Dev Post</title>
      <author>Nish_kan</author>
      <pubDate>Mon, 19 Apr 2021 10:07:14 +0000</pubDate>
      <link>https://dev.to/queenish01/my-first-dev-post-2c7l</link>
      <guid>https://dev.to/queenish01/my-first-dev-post-2c7l</guid>
      <description>&lt;p&gt;In the month of February, a good friend of mine wanted me to participate in a hackathon with her, and she wanted to make a project using WebDev. Being a newbie in the coding world, I didn't even know HTML at that time, but I heard it was super easy, so I agreed to be on her team. &lt;br&gt;
Sadly, our idea was rejected, and so my motivation to learn Wed Development vanished. Poof.&lt;br&gt;
After about a month of Procrastinating, I've finally started learning Web Dev, Thanks to a Twitter user named Pratham, who shares really good content about WebDev. That really motivated me to "Get Started".&lt;br&gt;
Now, I've taken up a course on Coursera, completed my week 1 module and week 2 module in about 2 days :)&lt;br&gt;
No, I'm not that smart, but It's not that hard, just like what everyone says. &lt;br&gt;
So, right now, I know HTML, CSS Basics, Box Model, styling, positioning, and similar stuff. I've also taken up the commitment of "100 days of code" on Twitter, i.e. I tweet about my daily progress in Web Development so that I have something to be accountable for if I feel like quitting anytime. &lt;br&gt;
I'm happy to have finally started, and It's really fun, honestly.&lt;br&gt;
Right now, I'm working on submitting my week2 module assignment.&lt;br&gt;
I know it's due next to next week, but the sooner the better :)&lt;br&gt;
Looking forward to sharing my journey in the field of Web Development.&lt;/p&gt;

&lt;p&gt;Cheers!&lt;br&gt;
Nishi&lt;/p&gt;

&lt;p&gt;P.S.: I'm loving this Developer Community. I never really worked much in groups or participated in circles. But this seems fun, people are really genuine and helpful. &lt;/p&gt;

</description>
      <category>beginners</category>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
