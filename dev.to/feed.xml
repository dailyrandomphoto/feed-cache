<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Back To Basic: Mental Model to Understand Flexbox</title>
      <author>Theodorus Clarence</author>
      <pubDate>Sun, 18 Jul 2021 14:46:43 +0000</pubDate>
      <link>https://dev.to/theodorusclarence/back-to-basic-mental-model-to-understand-flexbox-5c7k</link>
      <guid>https://dev.to/theodorusclarence/back-to-basic-mental-model-to-understand-flexbox-5c7k</guid>
      <description>&lt;p&gt;Mental models are personal, internal representations of external reality that people use to interact with the world around them. They are constructed by individuals based on their unique life experiences, perceptions, and understandings of the world. These are the mental model that I use to really understand flexbox, and I hope these can help you to understand too.&lt;/p&gt;

&lt;p&gt;In this flexbox tutorial we will try to understand these properties &amp;amp; topics&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Flex Direction&lt;/li&gt;
&lt;li&gt;Justify Content&lt;/li&gt;
&lt;li&gt;Align Items&lt;/li&gt;
&lt;li&gt;How Flexbox Divides its children&lt;/li&gt;
&lt;li&gt;Flex Grow vs Width: 100%&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#flex-direction"&gt;
  &lt;/a&gt;
  Flex Direction
&lt;/h2&gt;

&lt;p&gt;There are 4 values for &lt;code&gt;flex-direction&lt;/code&gt; property which are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;column&lt;/li&gt;
&lt;li&gt;row&lt;/li&gt;
&lt;li&gt;column-reversed&lt;/li&gt;
&lt;li&gt;row-reversed&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://flexbox.help/"&gt;flexbox.help&lt;/a&gt; has a great interactive illustration if you want to check it out. These are all the output I reproduced:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BMKwcb-H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qkyfri4bcssgk15xoild.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BMKwcb-H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qkyfri4bcssgk15xoild.png" alt="Flex Direction"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Looking at the property's value, it is kind of confusing, because if we assign &lt;code&gt;flex-direction: row&lt;/code&gt; it is stacked to the right.&lt;/p&gt;

&lt;p&gt;But here is the mental model to understand and to remember it. I want you to remember that we are putting the &lt;code&gt;flex-direction&lt;/code&gt; to the red box, not the items. According to that, we are basically telling the red box to be a single row. Think of it as an excel spreadsheet. If the red box is a single row, we can only put elements to the right, like the excel spreadsheet.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xPhCDqHx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bz74rh3sva9p90ly7zjg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xPhCDqHx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bz74rh3sva9p90ly7zjg.png" alt="Spreadsheet"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Got it? &lt;/p&gt;

&lt;p&gt;&lt;code&gt;flex-direction: column&lt;/code&gt; is basically the same, you are telling the red box to be a single column in a spreadsheet, then you can only add items to the bottom.&lt;/p&gt;

&lt;p&gt;As for the column-reverse, and the row-reverse, I think you already got the hang of it, just reverse it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#justify-content"&gt;
  &lt;/a&gt;
  Justify Content
&lt;/h2&gt;

&lt;p&gt;Justify content is the property to move items around on the &lt;strong&gt;main axis&lt;/strong&gt;. What is the main axis? The main axis is the direction we declare using &lt;code&gt;flex-direction&lt;/code&gt;. For example with the same illustration on top, when we declare &lt;code&gt;flex-direction: row&lt;/code&gt;, then the main axis is horizontal or to left-right.&lt;/p&gt;

&lt;p&gt;Here is a great illustration from css-tricks.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d3gjbFNJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s5ylp0g0yrjor0m77pyw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d3gjbFNJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s5ylp0g0yrjor0m77pyw.png" alt="justify content"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The mental model I use to remember this is, Justify Content moves around items on the main axis.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I think the values of the property is very clear on the illustration.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#align-items"&gt;
  &lt;/a&gt;
  Align Items
&lt;/h2&gt;

&lt;p&gt;This is the opposite of &lt;code&gt;justify-content&lt;/code&gt; but &lt;code&gt;align-items&lt;/code&gt; do not have all property from justify-content. Align items work on the &lt;strong&gt;cross axis&lt;/strong&gt;. Which is the opposite of our main axis.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aacR9g4y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8d3tjtkrpy8wxjh3biep.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aacR9g4y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8d3tjtkrpy8wxjh3biep.png" alt="align-items"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Same with justify-content mental model, you only need to remember that Align Items work on the cross axis.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#how-flexbox-divide-its-children"&gt;
  &lt;/a&gt;
  How Flexbox divide its children
&lt;/h2&gt;

&lt;p&gt;We have a red box with 500px width, and 5 items with each 100px width.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7VaxNU-8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kpvs6tmdejox5nhokrl4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7VaxNU-8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kpvs6tmdejox5nhokrl4.png" alt="flexbox-divide"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;with code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;'red-box'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;1&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;2&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;3&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;4&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;5&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
    &lt;span class="nc"&gt;.red-box&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;500px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nc"&gt;.item&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I like to create a mental model where each item is requesting to the red box (which will we call &lt;strong&gt;Reddy&lt;/strong&gt; for short) how much do they need.&lt;/p&gt;

&lt;p&gt;In the beginning Reddy is 500px wide, and each items is requesting 100px.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Reddy: 500px

Request List:
1,2,3,4,5: 100px
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Because Reddy has 500px space, so Reddy gives each item the requested amount, which is 100px.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#case-1-when-reddys-width-is-larger-than-the-requested-amount"&gt;
  &lt;/a&gt;
  Case 1: When Reddy's width is larger than the requested amount
&lt;/h3&gt;

&lt;p&gt;Let's say that Reddy is 700px, Reddy will still only give the items the requested amount which is 100px and has some spare spaces.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QDxEUC-f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a041e657a844jbl59wny.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QDxEUC-f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a041e657a844jbl59wny.png" alt="larger"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#case-2-when-reddys-width-is-smaller-than-the-requested-amount"&gt;
  &lt;/a&gt;
  Case 2: When Reddy's width is smaller than the requested amount
&lt;/h3&gt;

&lt;p&gt;When Reddy has limited width, Reddy must give each item a &lt;strong&gt;fair&lt;/strong&gt; amount of width according to the &lt;strong&gt;request ratio&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Now, how do we calculate the ratio? That's quite easy, we need to find the ratio of all the requests, so:&lt;/p&gt;

&lt;p&gt;Item1 : Item2 : Item3 : Item4 : Item5 = 1 : 1 : 1 : 1 : 1&lt;/p&gt;

&lt;p&gt;So, from the ratio, Reddy will give each items equally.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XCrBc46s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ry5vs7d7epgftb5us4uu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XCrBc46s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ry5vs7d7epgftb5us4uu.png" alt="divide equal"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jPBpd8AY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ygr4x2dnevrwoaqfrejw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jPBpd8AY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ygr4x2dnevrwoaqfrejw.png" alt="firefox-devtools"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Firefox Devtool also has a nice information on how much each elements shrinks.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Now, how small will Reddy give to each item?&lt;/strong&gt; The items really care about the content they have, they don't want the content that they bring to get shrunk into non-existent&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sgFVYMxY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1o9yjttj1eyppyev2sju.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sgFVYMxY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1o9yjttj1eyppyev2sju.gif" alt="flex-shrink-behavior"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This illustration demonstrates that items won't shrink smaller than their content size, which in this case is 35px. Shrinking to content will create overflow.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#case-3-different-request-ratio"&gt;
  &lt;/a&gt;
  Case 3: Different Request Ratio
&lt;/h3&gt;

&lt;p&gt;We already know if the ratio is 1:1:1:1:1, it will shrink the items into equal sizes, let's see how they work when the item requests are not identical.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Reddy: 700px

Request List:
1,2,3,4,5: 100px
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kYQKaSZ3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7owaq4drkh7ffa83jbgj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kYQKaSZ3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7owaq4drkh7ffa83jbgj.png" alt="different request"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's calculate the &lt;strong&gt;request ratio&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Item Number = Ratio
1:2:3:4:5 = 100px:200px:100px:200px:100px
simplified,
1:2:3:4:5 = 1:2:1:2:1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, Reddy will give the items according to that list.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3t4CT4jk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pqlfi8uaxpz35ud1nmiq.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3t4CT4jk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pqlfi8uaxpz35ud1nmiq.gif" alt="different-ratio"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As we can see, when Reddy gets shrunk to 350px, the item sizes will be: 50 : 100 : 50 : 100 : 50, identical to the &lt;strong&gt;request ratio&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;You can also force the item to not shrink according to the requested width using &lt;code&gt;flex-shrink: 0&lt;/code&gt; on the &lt;code&gt;.item&lt;/code&gt;. Reddy will recognize the item as a VIP Member, and won't shrink it no matter what.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YL_kThk_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/33b5ltmqlalddkcorusr.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YL_kThk_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/33b5ltmqlalddkcorusr.gif" alt="shrink"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#flex-grow-vs-width-100"&gt;
  &lt;/a&gt;
  Flex Grow vs Width 100%
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RuaY08DI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h9s9mlf7u85ramgzv2ul.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RuaY08DI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h9s9mlf7u85ramgzv2ul.png" alt="flex-grow-width"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;width: 100%&lt;/code&gt; basically will translate to 100% of the container which is 500px. By doing that, this means that width: 100% &lt;strong&gt;will get calculated&lt;/strong&gt; in the &lt;strong&gt;request ratio&lt;/strong&gt; which is 1:5:1.&lt;/p&gt;

&lt;p&gt;But, using &lt;code&gt;flex-grow: 1&lt;/code&gt;, the items &lt;strong&gt;will not get calculated&lt;/strong&gt; in the &lt;strong&gt;request ratio&lt;/strong&gt;, but takes the rest of whatever is left.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;There you go, after I understand how flexbox actually works, working with flexbox is a breeze. I also have a blog post on &lt;a href="https://theodorusclarence.com/blog/btb-flexbox-grid"&gt;how to choose between flex and grid&lt;/a&gt;, you might want to check it out.&lt;/p&gt;

&lt;p&gt;Let me know if you guys have some question!&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Originally posted on &lt;a href="https://theodorusclarence.com/blog/btb-flex-mental-model?ref=devto"&gt;my personal site&lt;/a&gt;, find more &lt;a href="https://theodorusclarence.com/blog?ref=devto"&gt;blog posts&lt;/a&gt; and &lt;a href="https://theodorusclarence.com/library?ref=devto"&gt;code snippets library&lt;/a&gt; I put up for easy access on my site 🚀&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>css</category>
      <category>tutorial</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to learn Git slowly.</title>
      <author>Samuel FAURE</author>
      <pubDate>Sun, 18 Jul 2021 14:38:14 +0000</pubDate>
      <link>https://dev.to/samuelfaure/how-to-learn-git-slowly-38fa</link>
      <guid>https://dev.to/samuelfaure/how-to-learn-git-slowly-38fa</guid>
      <description>&lt;p&gt;&lt;em&gt;This post is dedicated to my wife who, despite being one of the smartest person I know, still sucks at Git&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I've been mentoring webdev students for a while now. So I'm in prime position to see what mistakes are common amongst beginners.&lt;/p&gt;

&lt;p&gt;I wrote a previous article about &lt;a href="https://dev.to/samuelfaure/how-to-start-learning-css-without-hating-yourself-2aj"&gt;how to start learning CSS&lt;/a&gt; - a great read for any CSS beginner.&lt;/p&gt;

&lt;p&gt;Now it's time to master Git. Git is... not easy to master.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://xkcd.com/"&gt;Related XKCD&lt;/a&gt;:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e3jEpjn0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xxb0q6w88x5k3pllbl3o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e3jEpjn0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xxb0q6w88x5k3pllbl3o.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Which is why beginners can get confused easily. And a mistake can cost a lot: no one wants to be that guy who deleted their peer's work.&lt;/p&gt;

&lt;p&gt;The best way to learn Git is gradually. Be sure to master each new step perfectly, before starting to add more to your knowledge. It can take quite some time before you're a real Git master.&lt;/p&gt;

&lt;p&gt;This guide intend to make your journey easier by organizing your learning path in simple, digestible clear-cut steps. Be sure to master each levels very well before switching to the next!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#i-basic-solo-use"&gt;
  &lt;/a&gt;
  I - Basic solo use
&lt;/h2&gt;

&lt;p&gt;These tools will allow you to use Git for your own usage. Don't bother with branches for now, just do everything on Main.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Concepts to understand perfectly:&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- What is the difference between Git and Github?
- What is a commit?
- What is the staging phase?
- What is a branch?
- What's the remote repository VS local repository?
- How to set one or more upstream repository?
- How to commit?
- How to push / pull to an upstream repository?
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Commands to know perfectly:&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git init
git clone &amp;lt;repository&amp;gt;
git status
git add &amp;lt;file&amp;gt;
git add --all
git commit
git remote add
git remote set-url
git remote -v
git push &amp;lt;repository&amp;gt; &amp;lt;branch&amp;gt;
git pull &amp;lt;repository&amp;gt; &amp;lt;branch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#ii-basic-tools"&gt;
  &lt;/a&gt;
  II - Basic tools
&lt;/h2&gt;

&lt;p&gt;These tools will allow you to be more at ease with Git as a working tool. We will also need to learn a little bit of configuration.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Concepts to understand perfectly:&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- The .gitignore file
- The .gitconfig file
- Seeing the commit log
- File manipulation with Reset, Clean, Checkout &amp;lt;file&amp;gt;, Rm
- Repo manipulation with the Stash
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Commands to know perfectly:&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git log (with and without --stat)
git checkout &amp;lt;file&amp;gt;
git reset &amp;lt;file&amp;gt; (DANGEROUS!)
git reset --hard (DANGEROUS!)
git clean -f (DANGEROUS!)
git rm &amp;lt;file&amp;gt; (DANGEROUS!)
git config --global user.name
git config --global user.email
git stash
git stash apply
git stash clear (Kinda dangerous)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#iii-basic-collaboration"&gt;
  &lt;/a&gt;
  III - Basic collaboration
&lt;/h2&gt;

&lt;p&gt;This will allow you to start collaborating with other people. You need to master this level BEFORE any attempt at collaboration.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Concepts to understand perfectly:&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- Branchs: What they are, why they exist, how to use them.
- Merging
- Conventions for branch naming
- How to write good commit messages
- What are forked repositories?
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Commands to know perfectly:&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git merge
git branch
git checkout &amp;lt;branch&amp;gt;
git checkout -b
git blame &amp;lt;file&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#iv-basic-collaboration-rebase-amp-pull-requests"&gt;
  &lt;/a&gt;
  IV - Basic collaboration: Rebase &amp;amp; Pull requests
&lt;/h2&gt;

&lt;p&gt;I put the whole "rebasing to the collaborative branch" apart, because it adds the first command that can damage your remote repository: &lt;code&gt;git push --force-with-lease&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Indeed, if you're rebasing your local branch, you will need to push with this option to your distant repository. So it's dangerous, but you still need to master this part if you collaborate in a team.&lt;/p&gt;

&lt;p&gt;I also add pull request here, because they're an important concept but they more of a Github/Gitlab concept than really a Git concept.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Concepts to understand perfectly:&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- Simple rebase (and how it differs from merging)
- What are pull requests?
- How to make a PR from branch to branch
- How to make a PR from a fork to the original repository
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Commands to know perfectly:&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git rebase
git push --force-with-lease (DANGEROUS)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#v-competent-level"&gt;
  &lt;/a&gt;
  V - Competent level
&lt;/h2&gt;

&lt;p&gt;This level allows you to better organize your work history, organize your branches, and navigate in your history with ease.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Concepts to understand perfectly:&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- How to rewrite your local history
- How to rebase interactively
- Branch management (prune, fetch)
- Use of HEAD notation or commit hashes
- Using Diff to compare commits
- How to revert a commit
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Commands to know perfectly:&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git commit --amend
git rebase -i
git squash &amp;lt;commit hash 1&amp;gt; &amp;lt;commit hash 2&amp;gt;
git prune
git fetch
git remote prune
git checkout HEAD/HEAD~1/&amp;lt;commit hash&amp;gt;
git diff &amp;lt;commit hash 1&amp;gt; &amp;lt;commit hash 2&amp;gt;
git revert &amp;lt;commit hash&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#vi-advanced-level"&gt;
  &lt;/a&gt;
  VI - Advanced level
&lt;/h2&gt;

&lt;p&gt;At this level, you can fix when you or someone else fuck something up.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Concepts to understand perfectly:&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- What is the reflog?
- How to clean sensitive data from the repository
- How to effectively hunt for bad commits
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Commands to know perfectly:&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git reflog
git-filter-branch
git-filter-repo
git bisect
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As a great alternative to the git-filter commands, I advise &lt;a href="https://rtyley.github.io/bfg-repo-cleaner/"&gt;BFG&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I hope this guide helped you navigate the treacherous route that is learning Git for the first time.&lt;/p&gt;

&lt;p&gt;If I forgot an important command you're using regularly, be sure to tell me!&lt;/p&gt;

&lt;p&gt;Happy coding!&lt;/p&gt;

</description>
      <category>github</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>git</category>
    </item>
    <item>
      <title>Top 5 Extensions for your VS Code 🧨</title>
      <author>Sameer Kumar</author>
      <pubDate>Sun, 18 Jul 2021 14:37:55 +0000</pubDate>
      <link>https://dev.to/sameer1612/top-5-extensions-for-your-vs-code-him</link>
      <guid>https://dev.to/sameer1612/top-5-extensions-for-your-vs-code-him</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;============&lt;/p&gt;

&lt;p&gt;Your productivity is governed by your tool belt. Obviously, you can write code in a notepad or a terminal, but if productivity does count for you, then VS Code is the most customizable of all editors/IDEs. I am primarily a Ruby on Rails developer but the extensions I am recommending below count for all languages except the first one.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-ruby-extension-pack"&gt;
  &lt;/a&gt;
  1. Ruby extension pack:
&lt;/h2&gt;

&lt;p&gt;Well, in short, it’s not an extension but a collection of numerous ruby on rails extensions. This extension pack includes Ruby, Ruby Solargraph, ruby-rubocop, Ruby Language Colorization, Ruby Haml, Simple Ruby ERB, ruby-linter, ruby-symbols.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cr-qlz45--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2ATtpSkz7xwIG41lX7M2P3ew.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cr-qlz45--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2ATtpSkz7xwIG41lX7M2P3ew.png" alt="ruby extension pack for vscode"&gt;&lt;/a&gt;Ruby extension pack for vscode&lt;/p&gt;

&lt;p&gt;Extension Link: &lt;a href="https://marketplace.visualstudio.com/items?itemName=walkme.Ruby-extension-pack"&gt;https://marketplace.visualstudio.com/items?itemName=walkme.Ruby-extension-pack&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-git-lens"&gt;
  &lt;/a&gt;
  2. Git Lens:
&lt;/h2&gt;

&lt;p&gt;Yeah, that’s the famous turbocharger. I mainly use it to blame code, i.e, knowing who wrote the line which I am about to change.&lt;/p&gt;

&lt;p&gt;GitLens &lt;strong&gt;supercharges&lt;/strong&gt; the Git capabilities built into Visual Studio Code. It helps you to &lt;strong&gt;visualize code authorship&lt;/strong&gt; at a glance via Git blame annotations and code lens, &lt;strong&gt;seamlessly navigate and explore&lt;/strong&gt; Git repositories, &lt;strong&gt;gain valuable insights&lt;/strong&gt; via powerful comparison commands, and so much more.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z26hIjCT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2ARhGBifmOmLm2_qZ28Bk64g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z26hIjCT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2ARhGBifmOmLm2_qZ28Bk64g.png" alt="Git Lens extension for vscode"&gt;&lt;/a&gt;Git Lens extension for vscode&lt;/p&gt;

&lt;p&gt;Extension Link: &lt;a href="https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens"&gt;https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-error-lens"&gt;
  &lt;/a&gt;
  3. Error Lens:
&lt;/h2&gt;

&lt;p&gt;Most certainly this is the cure for my OCD. ErrorLens turbo-charges language diagnostic features by making diagnostics stand out more prominently, highlighting the entire line wherever a diagnostic is generated by the language and also prints the message inline. Key features being:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Highlight lines containing diagnostics&lt;/li&gt;
&lt;li&gt;  Append diagnostic as text to the end of the line&lt;/li&gt;
&lt;li&gt;  Show icons in the gutter&lt;/li&gt;
&lt;li&gt;  Show message in the status bar&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8omrQVpG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2AIxx39j429lwwKDmxom9JXg.png" class="article-body-image-wrapper"&gt;&lt;img alt="Error lens extension for vscode" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8omrQVpG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2AIxx39j429lwwKDmxom9JXg.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Error lens extension for vscode&lt;/p&gt;

&lt;p&gt;Extension Link: &lt;a href="https://marketplace.visualstudio.com/items?itemName=usernamehw.errorlens"&gt;https://marketplace.visualstudio.com/items?itemName=usernamehw.errorlens&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-tabnine-ai-code-completion"&gt;
  &lt;/a&gt;
  4. Tabnine - AI Code Completion:
&lt;/h2&gt;

&lt;p&gt;Whether you call it &lt;strong&gt;IntelliSense, intelliCode, autocomplete, AI-assisted code completion, AI-powered code completion, AI copilot, AI code snippets, code suggestion, code prediction, code hinting&lt;/strong&gt;, or &lt;strong&gt;content assist&lt;/strong&gt;, you probably already know that it can save you tons of time, easily cutting your keystrokes in half. Whether you’re just getting started as a developer or if you’ve been doing it for decades, Tabnine will help you code twice as fast — all in your favourite IDE.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w_gYg7fM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2Ak6wECwaAc1vfOQtQak9vfQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w_gYg7fM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2Ak6wECwaAc1vfOQtQak9vfQ.png" alt="Tabnine extension for vscode"&gt;&lt;/a&gt;Tabnine extension for vscode&lt;/p&gt;

&lt;p&gt;Extension Link: &lt;a href="https://marketplace.visualstudio.com/items?itemName=TabNine.tabnine-vscode"&gt;https://marketplace.visualstudio.com/items?itemName=TabNine.tabnine-vscode&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-codesnap"&gt;
  &lt;/a&gt;
  5. CodeSnap:
&lt;/h2&gt;

&lt;p&gt;If you have seen my previous blogs, almost all of them contained a code screenshot at least. CodeSnap is really simple to use just select the code and it will generate a mac-ish screenshot for it on the fly. Features included:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Quickly save screenshots of your code&lt;/li&gt;
&lt;li&gt;  Copy screenshots to your clipboard&lt;/li&gt;
&lt;li&gt;  Show line numbers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nO2LOZh0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2Aj-xSzLxEVxUML1lSuRg7vw.png" class="article-body-image-wrapper"&gt;&lt;img alt="CodeSnap extension for vscode." src="https://res.cloudinary.com/practicaldev/image/fetch/s--nO2LOZh0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2Aj-xSzLxEVxUML1lSuRg7vw.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CodeSnap extension for vscode.&lt;/p&gt;

&lt;p&gt;Extension Link: &lt;a href="https://marketplace.visualstudio.com/items?itemName=adpyke.codesnap"&gt;https://marketplace.visualstudio.com/items?itemName=adpyke.codesnap&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Do comment if you guys have explored any hidden gem in the jungle of VS Code extensions that tops your recommendation list.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#to-connect"&gt;
  &lt;/a&gt;
  To Connect
&lt;/h2&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;🏠 Website: &lt;a href="https://hi-sameer.web.app/"&gt;https://hi-sameer.web.app&lt;/a&gt;&lt;br&gt;&lt;br&gt;
🏭 LinkedIn: &lt;a href="https://www.linkedin.com/in/sameerkumar1612/"&gt;https://www.linkedin.com/in/sameerkumar1612/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>ruby</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Understanding CSS Media Queries</title>
      <author>Aris Zagakos</author>
      <pubDate>Sun, 18 Jul 2021 13:46:41 +0000</pubDate>
      <link>https://dev.to/zagaris/understanding-css-media-queries-1md9</link>
      <guid>https://dev.to/zagaris/understanding-css-media-queries-1md9</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-are-css-media-queries-and-why-are-useful"&gt;
  &lt;/a&gt;
  What are CSS media queries and why are useful?
&lt;/h2&gt;

&lt;p&gt;CSS media queries give us the ability to control, modify and make the layout of a website responsive based on some rules we apply on them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-css-media-queries-work"&gt;
  &lt;/a&gt;
  How CSS media queries work?
&lt;/h2&gt;

&lt;p&gt;Media queries work with &lt;code&gt;@media&lt;/code&gt; declaration that gives to the applied block a condition. If the given condition is true then the corresponding rule is applied.&lt;/p&gt;

&lt;p&gt;The CSS media queries have four possible &lt;code&gt;types&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;all /* apply to all media type devices */
print /* apply on printers */
screen /* apply on screens */
speech /* apply on speech synthesizers */
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;@media type&lt;/code&gt; is optional and if we skip it, the &lt;code&gt;all&lt;/code&gt; type will be implied by default.&lt;/p&gt;

&lt;p&gt;Now, let's see some examples on how to apply &lt;code&gt;@media&lt;/code&gt; declaration based on different screen resolutions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@media screen and (min-width: 600px) {
 /* Apply when the browser is at least 600px or above */
 /* Equivalently we can write for any device */
 /* @media (min-width: 600px) */
}

@media screen and (max-width: 800px) {
 /* Apply when the browser is at maximum 800px or less */
 /* Equivalently we can write for any device */
 /* @media (max-width: 800px) */
}

@media screen and (min-width: 600px) and (max-width: 800px)
 /* Apply when the browser is from 600px to 800px */
 /* Equivalently we can write for any device */
 /* @media (min-width: 600px) and (max-width: 800px) */
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the examples bellow, we will discuss two cases where we use media queries. In these examples, the idea is how the navbar items change and reorganize as the screen resolution changes.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Moreover, on these examples i don't emphasize so much in the style of the elements, but in the way the media queries are applied on them. You can see the code in detail on the pinned codepens.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example-1"&gt;
  &lt;/a&gt;
  Example 1
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/zagaris/embed/rNmWqbX?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;When the screen width size is &lt;code&gt;800px or less&lt;/code&gt;, the &lt;code&gt;navbar  items&lt;/code&gt; will be centered in a column and when the screen width size is &lt;code&gt;600px or less&lt;/code&gt;, the &lt;code&gt;navbar  items&lt;/code&gt; will be blue.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@media (max-width: 800px) {
    nav ul {
        flex-direction: column;
        text-align: center;
    }
}

@media (max-width: 600px) {
    nav ul {
        flex-direction: column;
        text-align: center;
    }
    nav {
        background-color: rgb(62, 109, 149);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#example-2"&gt;
  &lt;/a&gt;
  Example 2
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/zagaris/embed/qBmqQEN?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;When the screen width size is &lt;code&gt;800px or less&lt;/code&gt;, a button appears and the navbar becomes hidden. &lt;br&gt;
When we click the button the &lt;code&gt;navbar items&lt;/code&gt; will appear in a column and when the screen width size is &lt;code&gt;600px or less&lt;/code&gt;, the &lt;code&gt;navbar items&lt;/code&gt; will be blue.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@media (max-width: 800px) {
  nav ul {
    display: none;
    flex-direction: column;
    width: 100%;
  }
  nav ul.show {
    display: flex;
  }
  .my-button {
    display: block;
  }
}

@media (max-width: 600px) {
    nav ul {
    display: none;
    flex-direction: column;
    width: 100%;
  }
  nav ul.show {
    display: flex;
  }
  .my-button {
    display: block;
  }
  nav {
    background-color: rgb(62, 109, 149);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Media_queries"&gt;MDN: Beginner's guide to media queries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.w3schools.com/css/css3_mediaqueries_ex.asp"&gt;W3Schools: CSS Media Queries&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>JavaScript question #Day 8</title>
      <author>Sooraj S</author>
      <pubDate>Sun, 18 Jul 2021 12:52:36 +0000</pubDate>
      <link>https://dev.to/soorajs98/javascript-question-day-8-3d2i</link>
      <guid>https://dev.to/soorajs98/javascript-question-day-8-3d2i</guid>
      <description>&lt;p&gt;&lt;strong&gt;What's the output ?&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;checkAge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;You are an adult!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;You are still an adult.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Hmm.. You don't have an age I guess`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;checkAge&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;A: &lt;code&gt;You are an adult!&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;B: &lt;code&gt;You are still an adult.&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;C: &lt;code&gt;Hmm.. You don't have an age I guess&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Answer: C&lt;/p&gt;

&lt;p&gt;When testing equality, primitives are compared by their &lt;em&gt;value&lt;/em&gt;, while objects are compared by their &lt;em&gt;reference&lt;/em&gt;. JavaScript checks if the objects have a reference to the same location in memory.&lt;/p&gt;

&lt;p&gt;The two objects that we are comparing don't have that: the object we passed as a parameter refers to a different location in memory than the object we used in order to check equality.&lt;/p&gt;

&lt;p&gt;This is why both &lt;code&gt;{ age: 18 } === { age: 18 }&lt;/code&gt; and &lt;code&gt;{ age: 18 } == { age: 18 }&lt;/code&gt; return &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>react</category>
      <category>angular</category>
    </item>
    <item>
      <title>The difference between Encoding, Encryption, Hashing and Obfuscation</title>
      <author>Amran Hussein</author>
      <pubDate>Sun, 18 Jul 2021 12:14:58 +0000</pubDate>
      <link>https://dev.to/amran92/the-difference-between-encoding-encryption-hashing-and-obfuscation-3men</link>
      <guid>https://dev.to/amran92/the-difference-between-encoding-encryption-hashing-and-obfuscation-3men</guid>
      <description>&lt;p&gt;Many programmers confuse the related terms Encryption, Encoding, Hashing, and Obfuscation. This article will look at what each of these terms is.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Encoding&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8YJaraXe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r4iovyhdnp34t9ps0hl9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YJaraXe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r4iovyhdnp34t9ps0hl9.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Encoding aims to transform data so that different systems can handle it in a correct and secure manner. For example: sending executables in an email or displaying special characters on a web page. The purpose here is not to keep the information confidential, but rather to ensure that it will be dealt with in an optimal manner.&lt;/p&gt;

&lt;p&gt;The encoding converts data from one format to another in a publicly accessible mechanism and the conversion can therefore be easily reversed. After encoding the data does not need a secret key to be able to deal with it, as the only requirement to be able to decode is the algorithm used in it.&lt;br&gt;
&lt;em&gt;Examples:&lt;/em&gt; ASCII, Unicode, URL encoding and Base64.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Encryption&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XUBNdKIg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wyxk9t5p7y9w0kg9gohw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XUBNdKIg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wyxk9t5p7y9w0kg9gohw.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Encryption is used to transform the form of data for the purpose of keeping it anonymous to others; For example, when you send a message to someone that you do not want others to be able to read or to deliver a secret password on the Internet. Encryption, rather than focusing on the usability of the information, aims to ensure that unauthorized persons cannot make use of the data.&lt;/p&gt;

&lt;p&gt;Encryption turns data into another form that only certain people can understand. To perform the cryptography, an encryption key, an algorithm, and the text to be converted are used. Decryption requires obtaining the encrypted text, the encryption algorithm, and the secret key (the same encryption key or another secret key).&lt;br&gt;
&lt;em&gt;Examples:&lt;/em&gt; AES, Blowfish, and RSA.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hashing&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MPIcXM9S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tzj1m7qqykou0cmi54av.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MPIcXM9S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tzj1m7qqykou0cmi54av.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hashing ensures the integrity of the data, integrity, meaning that if it has been modified, you will be able to find out. The hash operation takes a random input and produces a fixed-length character string that has the following properties.&lt;/p&gt;

&lt;p&gt;Hashing is used with authentication to obtain strong evidence that a message has not been modified. The process is done by taking a specific input, encrypting it with a specific key, hashing it with the same key, then encrypting the key with the public key of the sender, then signing the hash with the secret key of the sender.&lt;/p&gt;

&lt;p&gt;The addressee opens the message and then decrypts the key used to encrypt the message using his secret key, which enables him to obtain the original text of the message. It can then hash the message and compare the hash result with the hash signed by the sender. If a match occurs, it means that the message has not been modified and that it was sent by the waiting person.&lt;br&gt;
&lt;em&gt;Examples:&lt;/em&gt; SHA-3 and MD5 (obsolete)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Obfuscation&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YonNVUlF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dxvhflhvuy50pq1s81db.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YonNVUlF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dxvhflhvuy50pq1s81db.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Obfuscation aims to make information more difficult to understand, difficult to attack, or copy. A common use is to obfuscate the source code to make it more difficult to replicate a product when reverse engineering is applied to it.&lt;/p&gt;

&lt;p&gt;Note that there is a limit to obfuscation depending on the content. When obfuscation software code, for example, the limit is that the result of obfuscation must remain within what the computer can handle, otherwise the program will stop working.&lt;br&gt;
&lt;em&gt;Examples:&lt;/em&gt; JavaScript obfuscation and ProGuard.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Internet Explorer finally dies</title>
      <author>Oliver Williams</author>
      <pubDate>Sun, 18 Jul 2021 12:14:20 +0000</pubDate>
      <link>https://dev.to/otw/internet-explorer-finally-dies-26cn</link>
      <guid>https://dev.to/otw/internet-explorer-finally-dies-26cn</guid>
      <description>&lt;p&gt;I’ve written about the death of Internet Explorer before over on &lt;a href="https://css-tricks.com/a-business-case-for-dropping-internet-explorer/"&gt;CSS Tricks&lt;/a&gt; and &lt;a href="https://alistapart.com/article/the-slow-death-of-internet-explorer-and-future-of-progressive-enhancement/"&gt;A List Apart&lt;/a&gt;, perhaps prematurely, but we’ve finally reached a tipping point. &lt;/p&gt;

&lt;p&gt;Popular JavaScript frameworks have dropped support, including &lt;a href="https://github.com/vuejs/rfcs/discussions/296"&gt;Vue 3&lt;/a&gt; and &lt;a href="https://twitter.com/_developit/status/1387804823492440069"&gt;Preact 11&lt;/a&gt;. Angular has deprecated support for IE and will fully &lt;a href="https://blog.angular.io/angular-v12-is-now-available-32ed51fbfd49"&gt;remove support in version 13&lt;/a&gt;. &lt;a href="https://emberjs.com/browser-support/"&gt;Ember&lt;/a&gt; is removing support in version 4, to be released in September. &lt;a href="https://ionicframework.com/docs/reference/browser-support#desktop-browsers"&gt;Ionic&lt;/a&gt;, a library of UI components, also ditched IE. &lt;/p&gt;

&lt;p&gt;Bootstrap, still the most popular CSS framework, &lt;a href="https://getbootstrap.com/docs/5.0/getting-started/browsers-devices/#internet-explorer"&gt;officially dropped support for IE&lt;/a&gt; with the release of Bootstrap 5. Tailwind, another popular CSS library, also &lt;a href="https://tailwindcss.com/docs/browser-support"&gt;dropped support for IE11&lt;/a&gt; with the release of version 2. &lt;/p&gt;

&lt;p&gt;WordPress dropped support with the release of &lt;a href="https://wordpress.org/news/2021/05/dropping-support-for-internet-explorer-11/"&gt;version 5.8&lt;/a&gt;. Drupal will drop support with the forthcoming release of &lt;a href="https://www.drupal.org/node/3199540"&gt;Drupal 10&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The list of companies that have dropped support is growing by the day, and includes: &lt;a href="https://twitter.com/devongovett/status/1317225855249125377"&gt;Adobe&lt;/a&gt;, &lt;a href="https://developer.dailymotion.com/changelog/dailymotion-no-longer-supports-internet-explorer/"&gt;Dailymotion&lt;/a&gt;, &lt;a href="https://www.skillshare.com/unsupported-browser"&gt;Skillshare&lt;/a&gt;, LinkedIn, Twitter, &lt;a href="https://blogs.sap.com/2021/02/02/internet-explorer-11-will-no-longer-be-supported-by-various-sap-ui-technologies-in-newer-releases/"&gt;SAP&lt;/a&gt;, among many others. &lt;/p&gt;

&lt;p&gt;Many of &lt;a href="https://techcommunity.microsoft.com/t5/microsoft-365-blog/microsoft-365-apps-say-farewell-to-internet-explorer-11-and/ba-p/1591666"&gt;Microsoft's own products&lt;/a&gt; have already dropped support: Microsoft Teams web app ended support in November 2020. From August 17th, 2021, Microsoft 365 apps and services will also drop support.&lt;/p&gt;

&lt;p&gt;Senior Director of Engineering at GoDaddy &lt;a href="https://twitter.com/indexzero/status/1261033701548404749"&gt;tweeted&lt;/a&gt; back in 2020: “We dropped support &lt;a href="https://twitter.com/GoDaddy"&gt;@GoDaddy&lt;/a&gt; for IE11 in April. We've seen 25% bundle size reductions since targeting modern JavaScript for transpilation”&lt;/p&gt;

&lt;p&gt;It is now Safari that is the major outlier. Few users are stuck on old versions of Chrome or Firefox, but plenty of users get stuck on old versions of iOS. &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>css</category>
      <category>javascript</category>
    </item>
    <item>
      <title>a good example why tech companies test leetcode style questions.</title>
      <author>kevin074</author>
      <pubDate>Sun, 18 Jul 2021 12:12:32 +0000</pubDate>
      <link>https://dev.to/kevin074/a-good-example-why-tech-companies-test-leetcode-style-questions-44n0</link>
      <guid>https://dev.to/kevin074/a-good-example-why-tech-companies-test-leetcode-style-questions-44n0</guid>
      <description>&lt;p&gt;Today I came across a question that is simple enough for most developers to solve fast, but just slightly complex enough to worth a little bit of discussion. I believe this questions, and my answer to it, is a pretty good demonstration why leetcode style interview exists. Let's look at the problem first: &lt;br&gt;
&lt;a href="https://leetcode.com/problems/isomorphic-strings/"&gt;https://leetcode.com/problems/isomorphic-strings/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The real problem at hand is how do you confirm whether two strings are representationally the same. Representationally, sorry for the unclear diction, because you can transform the strings into a representations of the order of appearance and how many of different kinds in each word. &lt;/p&gt;

&lt;p&gt;so essentially, a good way to show an isomorphic representation of a string would be like:&lt;br&gt;
egg = 122&lt;br&gt;
add = 122&lt;br&gt;
therefore egg and add are isomorphic &lt;/p&gt;

&lt;p&gt;isomorphic = 1234356718;&lt;/p&gt;

&lt;p&gt;Please see code below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var isIsomorphic = function(s, t) {
    if (!s || !t) return false;
    if(s.length !== t.length) return false;

    let sMap = {};
    let tMap = {};
    let sNumString = '';
    let tNumString = '';
    let currentS = '';
    let currentT = ''
    for (let i=0; i&amp;lt;s.length; i++) {
        currentS = s[i];
        currentT = t[i];

        if(!sMap[currentS]) {
            sMap[currentS] = Object.keys(sMap).length + 1
        } 
        else {    
            sNumString += sMap[currentS]
        }


        if(!tMap[currentT]) {
            tMap[currentT] = Object.keys(tMap).length + 1
        }
        else {    
            tNumString += tMap[currentT]
        }
    }

    return sNumString === tNumString
};

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I think questions like one this really digs deep into whether a developer really knows and is skillful at general problem solving and would be an indicator whether the employee will be good for the company. &lt;/p&gt;

&lt;p&gt;(Although I don't know if my solution to this would be well-received at interviews when it is usually not possible to test the validity of code.)&lt;/p&gt;

&lt;p&gt;I really dislike problems that are very esoteric and dependent on contextual knowledge. For example, you'd need to know a specific formula for solving how many prime numbers are in [0 ... n]. This type of problem is just terrible and not worthwhile to learn. &lt;/p&gt;

&lt;p&gt;Another reason why I like the isomorphic string problem so much, because not only it is knowledge independent, but also does not require a huge mental aerobatic like &lt;a href="https://leetcode.com/problems/maximum-subarray/"&gt;https://leetcode.com/problems/maximum-subarray/&lt;/a&gt;&lt;br&gt;
I would say, however, questions like maximum-subarray do show whether a candidate has reach a higher level of computational, emphasis here, solving skill. Except that in interviews, it's hugely frustrating if you haven't seen a problem remotely similar beforehand.&lt;/p&gt;

&lt;p&gt;Do you have a similar question in mind that is like this one ? Please comment and let me know!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>career</category>
      <category>programming</category>
    </item>
    <item>
      <title>Accessible Code Reviews</title>
      <author>Mark Steadman</author>
      <pubDate>Sun, 18 Jul 2021 12:09:14 +0000</pubDate>
      <link>https://dev.to/steady5063/accessible-code-reviews-11j6</link>
      <guid>https://dev.to/steady5063/accessible-code-reviews-11j6</guid>
      <description>&lt;p&gt;In the agile world that we live in, especially in web development, the race to get the latest design and new functionality out the door has historically left accessibility  in the rearview mirror. &lt;/p&gt;

&lt;p&gt;However, over the last few years there has been a major shift of getting accessibility as part of the day to day development process. Even though this trend is fantastic, it is still a rather new concept and one that can always be improved. &lt;/p&gt;

&lt;p&gt;One way in which accessibility in the development process can be improved is through code reviews. A lot of development teams currently have an "honor system" for automated tests or manual accessibility testing, in which the developer claims they did those steps. Which is why they tend to continue to have issues and not see a downward trend. &lt;/p&gt;

&lt;p&gt;Adding accessibility to a code review of any pull request that your development team creates has great benefits. But what makes an accessible code review? Let's go through some tips and tricks to add accessibility into your code reviews.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dont-solely-rely-on-automation"&gt;
  &lt;/a&gt;
  Don't solely rely on automation
&lt;/h2&gt;

&lt;p&gt;Automated testing has become one of the staples of shifting accessibility left in development process. Automated testing is most popular with &lt;a href="https://github.com/dequelabs/axe-core"&gt;axe-core&lt;/a&gt; in developers unit or integration test cases. &lt;/p&gt;

&lt;p&gt;When a developer creates a new component, they then add a test case that checks if the component is accessible. If it comes back with any issues, they go back and fix them and look for green light on the test case. &lt;/p&gt;

&lt;p&gt;This is great, however automated accessibility testing with axe-core can only catch around 40% of accessibility violations. This leaves a lot of room for the possibility of "tricking" automation into thinking the content is accessible. It also is only checking the HTML as is, and won't suggest changes to semantic HTML or enforce accessible coding patterns. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#enforce-semantic-html"&gt;
  &lt;/a&gt;
  Enforce semantic HTML
&lt;/h2&gt;

&lt;p&gt;Speaking of semantic HTML, accessible code reviews can enforce the use of it! &lt;/p&gt;

&lt;p&gt;Lets say a developer checks in code like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;role=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="na"&gt;onClick=&lt;/span&gt;&lt;span class="s"&gt;{this.handleClick}&lt;/span&gt; 
&lt;span class="na"&gt;onKeyPress=&lt;/span&gt;&lt;span class="s"&gt;{this.handleClick}&lt;/span&gt; &lt;span class="na"&gt;tabindex=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Click me!&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Is there anything wrong with this? Technically it is accessible. However, the use of non semantic HTML here makes it so the developer has written extra code to include both click AND keyboard event. Also, anytime role and tabindex are used, there comes the risk that a future developer may not be accessibility aware and remove them, and then keyboard functionality is totally lost. &lt;/p&gt;

&lt;p&gt;This is where the enforcement of semantic HTML could explain the above, and suggest using a button like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;onClick=&lt;/span&gt;&lt;span class="s"&gt;{this.handleClick}&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Click me!&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Any time you get the chance to use semantic HTML and enforce it the better. It reduces the risk of misused ARIA and cuts down on the creation of extra code. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ensure-proper-aria-patterns"&gt;
  &lt;/a&gt;
  Ensure proper ARIA Patterns
&lt;/h2&gt;

&lt;p&gt;Sometimes semantic HTML is not possible, and ARIA is required to make HTML widgets fully accessible. ARIA is widely used, but often time implemented incorrectly. The best time to ensure that ARIA is properly used is in a code review. &lt;/p&gt;

&lt;p&gt;One ARIA issue that could easily be caught in a code review would be an incorrect or unnecessary value. Let's say code is checked in that has an aria-live value that is variable. The default of this variable is "off" when there is no text and then "assertive" when text appears. A code review could catch this and tell the developer it does this by default already, so they could have just used assertive.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;aria-live=&lt;/span&gt;&lt;span class="s"&gt;"{{currentState}}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;{{announcemetText}}&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another example would be using the same aria-labelledby id for a component that is used multiple times on a page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Fragment&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"dataInputLabel"&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inputLabel&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; 
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;aria&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;labelledby&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"dataInputLabel"&lt;/span&gt; 
&lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"form-control"&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"dataInput"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Fragment&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These are just a couple of examples, in the literally hundreds of different ARIA misuses that could be caught in a code review. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#enforce-accessible-coding-patterns"&gt;
  &lt;/a&gt;
  Enforce accessible coding patterns
&lt;/h2&gt;

&lt;p&gt;Last but not least, code reviews can be used to enforce accessible coding patterns. &lt;/p&gt;

&lt;p&gt;This sounds pretty self explanatory, however when I say to enforce accessible coding patterns I mean your development teams or companies coding patterns. &lt;/p&gt;

&lt;p&gt;Let's take a modals focus management as an example. When a modal opens up where does focus go? The body of the modal, the heading text, the button? Seems like every site you go to now a days has multiple different ways to do this. &lt;/p&gt;

&lt;p&gt;If you have an accessible coding pattern that is consistent, this can help make your site easier to navigate and understand for those with disabilities. This pattern can be easily enforced when looking at another developers pull request.&lt;/p&gt;

&lt;p&gt;Now instead of having 3 different ways that modals could potentially deal with focus. You simply have one consistently across your entire site. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#in-summary"&gt;
  &lt;/a&gt;
  In Summary
&lt;/h2&gt;

&lt;p&gt;Accessible code reviews can greatly improve the accessibility of your web content. By following the simple steps laid out in this article, you can help make developers that are not only accessibility aware, but that actually care about the content they are creating. At the end of the day, that is the goal. &lt;/p&gt;

&lt;p&gt;To create developers that give a damn about accessibility, and to do that it requires enforcement and proper accessible coding reviews! &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>codereview</category>
      <category>codequality</category>
      <category>a11y</category>
    </item>
    <item>
      <title>A look into Dynamic Programming - Matrix Chain Multiplication</title>
      <author>Andrei Visoiu</author>
      <pubDate>Sun, 18 Jul 2021 12:00:01 +0000</pubDate>
      <link>https://dev.to/kruzzy/a-look-into-dynamic-programming-matrix-chain-multiplication-34gb</link>
      <guid>https://dev.to/kruzzy/a-look-into-dynamic-programming-matrix-chain-multiplication-34gb</guid>
      <description>&lt;p&gt;In the beginning of the &lt;a href="https://dev.to/kruzzy/using-divide-and-conquer-closest-pair-of-points-5e2g"&gt;last article I wrote&lt;/a&gt;, I described two ways of solving a problem by splitting it into subproblems: on one hand, those problems can be solved independently from one another (a method called divide &amp;amp; conquer, which I described in the article); on the other hand, they can interact with each other, building up on the results. Problems on the latter category can be solved using a method called &lt;strong&gt;dynamic programming&lt;/strong&gt;, which will be the topic for today.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#formal-definition-of-dynamic-programming"&gt;
  &lt;/a&gt;
  Formal Definition of Dynamic Programming
&lt;/h2&gt;

&lt;p&gt;In the field of Computer Science, Dynamic Programming is derived from a mathematical optimisation method. It refers to simplifying a problem by breaking it down into smaller subproblems. If the results of those smaller subproblems overlap so they can be fit inside the larger problems, then there is a relation between them and the results of the larger problem.&lt;/p&gt;

&lt;p&gt;For example, by modifying the &lt;a href="https://dev.to/kruzzy/why-is-graph-theory-so-amazing-part-3-bfs-bipartite-graphs-2860"&gt;BFS algorithm I presented in this article&lt;/a&gt; to find the shortest path in an unweighted graph we can obtain a dynamic programming solution to the problem. &lt;/p&gt;

&lt;p&gt;This is possible by making a simple statement: if &lt;strong&gt;i&lt;/strong&gt; and &lt;strong&gt;j&lt;/strong&gt; are two nodes in an unweighted graph, then the shortest path from &lt;strong&gt;i&lt;/strong&gt; to &lt;strong&gt;j&lt;/strong&gt; would be obtained by first obtaining the shortest path from &lt;strong&gt;i&lt;/strong&gt; to a neighbour of &lt;strong&gt;j&lt;/strong&gt;. Described in pseudocode:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;min_dist[i][j] = infinity
for every neighbour k of j:
   min_dist[i][j] = min(min_dist[i][k]+1, min_dist[i][j])
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The last line of the snippet is called a &lt;strong&gt;reccurence relation&lt;/strong&gt;. (such relations are widely used in mathematics; another example is the way the &lt;a href="https://dev.to/kruzzy/the-magic-of-the-fibonacci-numbers-why-we-love-computing-them-part-1-18gp"&gt;Fibonacci sequence&lt;/a&gt; is calculated.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#subproblems-and-memoization"&gt;
  &lt;/a&gt;
  Subproblems and Memoization
&lt;/h2&gt;

&lt;p&gt;Subproblems are basically smaller instances (or versions) of the original problem. By saying that a problem has "overlapping subproblems", we mean that finding its solution involves solving the same subproblem multiple times.&lt;/p&gt;

&lt;p&gt;An accessible example is calculating the n-th Fibonacci number, which I presented in &lt;a href="https://dev.to/kruzzy/the-magic-of-the-fibonacci-numbers-why-we-love-computing-them-part-1-18gp"&gt;an earlier article&lt;/a&gt;. Let's look again at the recursion tree of the problem:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Lk7pc8lQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ryh3287x4xy4ox7piye.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Lk7pc8lQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ryh3287x4xy4ox7piye.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is clear that, if we do not store the results in some way, some numbers will be calculated multiple times, resulting in a staggering time complexity of O(1.62^n) (see the &lt;a href="https://dev.to/kruzzy/the-magic-of-the-fibonacci-numbers-why-we-love-computing-them-part-1-18gp"&gt;article&lt;/a&gt; for information about how this was calculated). &lt;br&gt;
This technique is called "memoization" - we can store the value of a Fibonacci number in an array after we calculate it for later use. This would decrease the time complexity, in this case, to an ~O(n).&lt;/p&gt;

&lt;p&gt;Memoization is widely used in dynamic programming (which is, in essence, an optimisation technique). Let us see how we can create such a solution.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#matrix-chain-multiplication"&gt;
  &lt;/a&gt;
  Matrix Chain Multiplication
&lt;/h2&gt;

&lt;p&gt;We know that matrix multiplication is &lt;strong&gt;not&lt;/strong&gt; a commutative operation, but it is associative. It also turns out that the order in which the multiplication is done affects the overall number of operations you do.&lt;/p&gt;

&lt;p&gt;Let's suppose we have three matrixes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;A&lt;/strong&gt;, of size 3 x 1 - a column matrix&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;B&lt;/strong&gt;, of size 1 x 3 - a line matrix&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;C&lt;/strong&gt;, of size 3 x 1 - a column matrix again&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can multiply them in two ways: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;(AB)C - multiplying A and B would yield a 3 x 3 matrix, and would take 9 operations. Multiplying (AB) with C would take another 9 operations, for a total of 18 operations.&lt;/li&gt;
&lt;li&gt;A(BC) - multiply B and C only takes 3 operations and yield a 1 x 1 matrix. Multiplying A with (BC) would take another 3 operations, for a total of 6 operations.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Keeping that in mind, we ask the question: what is the best order to do the multiplication? &lt;/p&gt;

&lt;p&gt;Let's suppose we have N matrixes (M_1 through M_N) whose sizes we store in an array S, such that S[i-1] and S[i] are the sizes for matrix &lt;strong&gt;i&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;We can solve the problem using dynamic programming by making the following observation: the first thing we need to determine is what multiplication should be done last. In other word, we search for a matrix &lt;strong&gt;i&lt;/strong&gt; such that our expression would look like (M_1 * M_2 * ... M_i ) * ( M_(i+1) * ... M_N), and both the products in parenthesis are also calculated optimally. &lt;/p&gt;

&lt;p&gt;We can construct an N x N 2D array, let's call it A, such that A[i][j] will hold the minimum cost (number of operations) to compute the product of matrixes from M_i through M_j. We will use this array to memoise the results.&lt;/p&gt;

&lt;p&gt;Let's see how we can calculate the cost for a "cut" in the product of matrixes from M_i through M_j. If we were to put the parenthesis such like (M_i * M_(i+1) * .... M_k) * (M_(k+1) * ... M_j), the cost would be the sum of the cost of the two parenthesis + the cost to multiply the matrix yield by those two, which will be S[i-1] * S[k] * S[j], as the first result would be of size S[i-1] x S[k], and the second would be of size S[k] * S[j].&lt;/p&gt;

&lt;p&gt;We now just have to find the best &lt;strong&gt;k&lt;/strong&gt; for our cut. We can make this in a recursive manner. Let us look at an implementation of the idea:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;The sizes for the matrixes is the one in the example above, rows and column matrixes. The code outputs the result as 6, as we have concluded earlier.&lt;/p&gt;

&lt;p&gt;This was achieved recursively, by first calling matrix_chain_cost for positions 1 through N. We used &lt;strong&gt;memoisation&lt;/strong&gt; to avoid redundant calculations, and then applied the formula we found above.&lt;/p&gt;

&lt;p&gt;The time complexity of the code above is O(n^3), as we are basically generating the cost for all the "cuts" we can do in the expression.&lt;/p&gt;

&lt;p&gt;That was all for today. &lt;strong&gt;The Magic of Computing&lt;/strong&gt; will be back with yet another interesting algorithmic topic. But, until then, maybe you fancy some &lt;a href="https://dev.to/kruzzy/why-is-graph-theory-so-amazing-part-1-5ii"&gt;Graph Theory&lt;/a&gt;? Or are you more of a &lt;a href="https://dev.to/kruzzy/exploring-backtracking-25dp"&gt;Backtracking&lt;/a&gt; person?&lt;/p&gt;

</description>
      <category>programming</category>
      <category>python</category>
      <category>algorithms</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>Deploy Kafka + Filebeat + ELK - Docker Edition - Part 2 </title>
      <author>Kshitij (kd)</author>
      <pubDate>Sun, 18 Jul 2021 11:49:32 +0000</pubDate>
      <link>https://dev.to/dhingrachief/deploy-kafka-filebeat-elk-docker-edition-part-2-hpj</link>
      <guid>https://dev.to/dhingrachief/deploy-kafka-filebeat-elk-docker-edition-part-2-hpj</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;This article is the last part of a two part series where we will deploy ELK stack using docker/docker-compose.&lt;br&gt;
In this article, we will be configuring Logstash, Elasticsearch and Kibana. If you haven't gone through the previous article, check out this &lt;a href="https://dev.to/dhingrachief/deploy-kafka-filebeat-elk-docker-edition-part-1-3m77"&gt;link&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#logstash"&gt;
  &lt;/a&gt;
  Logstash
&lt;/h2&gt;

&lt;p&gt;Logstash is a server-side data processing pipeline that consumes data from different sources and send it to elasticsearch. We touched on its importance when comparing with filebeat in the previous article.&lt;br&gt;
Now to install logstash, we will be adding three components &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a pipeline config - logstash.conf&lt;/li&gt;
&lt;li&gt;a setting config - logstash.yml&lt;/li&gt;
&lt;li&gt;docker-compose file&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pipeline configuration will include the information about your input (kafka in our case), any filteration that needs to be done, and output (aka elasticsearch).&lt;br&gt;
Create a folder named pipeline and add this configuration file to it.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#logstash-pipeline-logstashconf"&gt;
  &lt;/a&gt;
  Logstash pipeline - logstash.conf
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;input {
    kafka{
        bootstrap_servers =&amp;gt; "KAFKA_SERVERS_IP:KAFKA_SERVERS_PORT"
        topics =&amp;gt; ["applogs"]
    }
}
filter {
    json {
        source =&amp;gt; "message"
      }
}
## Add your filters / logstash plugins configuration here
output {
        elasticsearch {
    hosts =&amp;gt; ["ELASTICSEARCH_IP:9200"]
    user =&amp;gt; 'elastic'
    password =&amp;gt; 'somesecretpassword'
    }

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;As you can see, In the input section, we are listening to kafka on topic &lt;strong&gt;applogs&lt;/strong&gt;.&lt;br&gt;
In my case, I have added a filter which will jsonify the data that comes under the key named "message". There are several plugin &lt;a href="https://www.elastic.co/guide/en/logstash/6.8/filter-plugins.html"&gt;filters&lt;/a&gt; to choose from.&lt;br&gt;
The output is redirected towards elastic search, with username password configured for authentication.&lt;br&gt;
Create a folder named settings and add this configuration file to it&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#logstash-settings-logstashyml"&gt;
  &lt;/a&gt;
  logstash settings - logstash.yml
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;http.host: "0.0.0.0"
path.config: /usr/share/logstash/pipeline
path.logs: /var/log/logstash
config.reload.automatic: true
log.level: debug
xpack.monitoring.enabled: false

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The docker-compose file looks like this: &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#logstash-dockercompose"&gt;
  &lt;/a&gt;
  logstash docker-compose
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;version: '2'

services:
  logstash:
    image: docker.elastic.co/logstash/logstash:5.6.3
    ports:
      - "10000:10000"
    volumes:
      - ./settings/:/usr/share/logstash/config/
      - ./pipeline/:/usr/share/logstash/pipeline/
    container_name: logstash                          
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Here the configuration files mentioned above have been mounted.&lt;/p&gt;

&lt;p&gt;To run the above file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker-compose up -d
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, You will get an error as we have not setup elastic search yet. Now lets go ahead and install Elasticsearch and Kibana&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#elasticsearch-and-kibana"&gt;
  &lt;/a&gt;
  Elasticsearch and Kibana
&lt;/h2&gt;

&lt;p&gt;Kibana is an open source user interface that helps you monitor and visualise data, which in our case, is being provided by elasticsearch.&lt;br&gt;
Elasticsearch, as the name suggests, is a search and analytics engine for different types of data.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#elasticsearch-and-kibana-dockercompose"&gt;
  &lt;/a&gt;
  Elasticsearch and Kibana  docker-compose
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;version: "2"
services:
 elasticsearch:
  image: "docker.elastic.co/elasticsearch/elasticsearch:7.13.2"
  container_name: elasticsearch
  environment:
   - discovery.type=single-node
   - cluster.routing.allocation.disk.threshold_enabled=true
   - cluster.routing.allocation.disk.watermark.low=65%
   - cluster.routing.allocation.disk.watermark.high=70%
   - xpack.security.enabled=true
   - xpack.security.audit.enabled=true
   - ELASTIC_PASSWORD=somethingsecret
   - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
   - bootstrap.memory_lock=true

  ulimits:
    memlock:
      soft: -1
      hard: -1
  volumes:
    - ./data:/usr/share/elasticsearch/data
  ports:
   - "9200:9200"
  networks:
   - eknetwork

 kibana:
  depends_on:
   - elasticsearch
  image: "docker.elastic.co/kibana/kibana:7.13.2"
  container_name: kibana
  ports:
   - "5601:5601"
  environment:
   - ELASTICSEARCH_URL=http://localhost:9200
   - ELASTICSEARCH_USERNAME=elastic
   - ELASTICSEARCH_PASSWORD=somethingsecretpassword
  networks:
   - eknetwork

networks:
 eknetwork:
  driver: bridge
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Make sure to add same elasticsearch password as the one you have provided in your logstash pipeline configuration file.&lt;/p&gt;

&lt;p&gt;To run the above file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker-compose up -d
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that all our processes are running, You would need to configure Kibana's source from the UI so that you are able to see data on the UI. If you have done this setup on the server and want to configure UI immediately, I would suggest you to create a firewall rule for your public IP on port 5601&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ufw allow from YOUR_PUBLIC_IP to any port 5601
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now go to your favorite browser, type server's ip and port and you will see something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GmDvyEMN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zmqoyrr5dscizw9tlyn3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GmDvyEMN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zmqoyrr5dscizw9tlyn3.png" alt="Home page of Kibana"&gt;&lt;/a&gt;&lt;br&gt;
Enter the credentials as specified in the docker-compose above and you should be able to enter the application.&lt;/p&gt;

&lt;p&gt;And Voila! Your setup is complete. Just don't forget to add log-rotation to your docker instances.&lt;br&gt;
I have added all the configuration and docker file &lt;a href="https://github.com/kdsama/ELK"&gt;here&lt;/a&gt;&lt;/p&gt;

</description>
      <category>docker</category>
      <category>kafka</category>
      <category>elk</category>
      <category>devops</category>
    </item>
    <item>
      <title>Imagine using Spotify - Nerding Out Episode 1</title>
      <author>AkIonSight</author>
      <pubDate>Sun, 18 Jul 2021 11:48:20 +0000</pubDate>
      <link>https://dev.to/akionsight/imagine-using-spotify-nerding-out-episode-1-32f4</link>
      <guid>https://dev.to/akionsight/imagine-using-spotify-nerding-out-episode-1-32f4</guid>
      <description>&lt;p&gt;Well yeah why pay for spotify if can use VLC media player, a text file, a few youtube links and a small python script to listen to your playlist. Why? cuz you know thats the stuff I love to do and if this doesnt interest you, hey youre getting a Ad-Free Music Player without anyone collecting your data. And yeah all of this stuff is open-source, even the libraries i am using too&lt;/p&gt;

&lt;p&gt;Skip to the end if you just want the code&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-everything"&gt;
  &lt;/a&gt;
  Getting everything
&lt;/h2&gt;

&lt;p&gt;You will need some stuff to get this project done, but I guess you probably have some of it or all of it already on your machine. Ok so this is the stuff you will need&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;VLC Media Player (aka VideoLAN)&lt;/li&gt;
&lt;li&gt;Python (I made this on python 3.9 but this is pretty small and should work in anything above python2)&lt;/li&gt;
&lt;li&gt;The Youtube links of all your playlist songs (but you can use any link that works with VLC)&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#wait-a-sec-why-vlc-i-mean-there-are-a-lot-of-options"&gt;
  &lt;/a&gt;
  Wait a sec, why VLC? I mean there are a lot of options?
&lt;/h2&gt;

&lt;p&gt;Yeah lemme tell you. Imagine you know you use a custom music player that you are using to play songs at a party and then your non-existent friend asks, "hey wheres the equiliser" or "hey i wanna see the music video" or even "hey can you add subtitles" and then you don't have any answer because you didn't code that part out. VLC will help you in those situations, its pretty lightweight but it will help you get low-level customization done&lt;/p&gt;

&lt;p&gt;Also im lazy, let VLC do the hard part&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-go"&gt;
  &lt;/a&gt;
  Lets go
&lt;/h2&gt;

&lt;p&gt;First I assume you already have VLC on your computer. Also I assume you are on Windows. Now the thing is that VLC ships with command line tools too. To enable these you need to add the path to these command line tools in the PATH environment variable.&lt;/p&gt;

&lt;p&gt;To do so:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open Program files or Program Files(x86) and find the vlc folder or just use these locations&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;C:\Program Files\VideoLAN\VLC\&lt;/code&gt;&lt;br&gt;
or &lt;br&gt;
&lt;code&gt;C:\Program Files (x86)\VideoLAN\VLC\&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;if these folders exist, you can move ahead&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open windows search and type "edit environment variables". Something like this should pop up, click on it&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bWHO4bkl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pqab2jxyhnq3stfomi55.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bWHO4bkl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pqab2jxyhnq3stfomi55.png" alt="Environment Variables"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Or alternatively, you can open it from the command line&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Now select PATH and click edit. Something like this &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZXrTNkPn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5veybbkw9oxtwpfkq8gj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZXrTNkPn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5veybbkw9oxtwpfkq8gj.png" alt="Edit it lol"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Now click on new and then add the Program Files or Program Files(x86) for VLC. something like this. then press "OK"&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bSw8mIcK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0fwmen3t4kurf9wwprrj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bSw8mIcK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0fwmen3t4kurf9wwprrj.png" alt="🚀🚀"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then close the window&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Test it out. to test this, open a new command prompt window and type &lt;code&gt;vlc&lt;/code&gt; and check if any error is raised. If successful it should open vlc media player&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#part-2-script-time"&gt;
  &lt;/a&gt;
  Part 2: Script Time
&lt;/h2&gt;

&lt;p&gt;Create a python file, anywhere really and open it in your favorite code editor&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Import some modules 
we dont really need a lot, and none from outside the stdlib, we need &lt;code&gt;os&lt;/code&gt; and &lt;code&gt;random&lt;/code&gt; but random is optional (we will use it for shuffling songs but some people dont like it)
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;Create the &lt;code&gt;playlist.txt&lt;/code&gt; file&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is where all hyperlinks will be stored. you can execute &lt;code&gt;copy NUL playlist.txt&lt;/code&gt; to create this file too&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Add some test links to the file &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Add a few songs from your playlist, here are some to help you out&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://www.youtube.com/watch?v=dQw4w9WgXcQ
https://www.youtube.com/watch?v=QH2-TGUlwu4
https://www.youtube.com/watch?v=w0AOGeqOnFY
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Read the file&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;to do so write a simple read mode &lt;code&gt;open&lt;/code&gt; statement, something like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="nb"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'playlist.txt'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we also split the file on each newline hence creating a list, so each link must be on a separate line&lt;/p&gt;

&lt;p&gt;printing the output of file we should get something like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'https://www.youtube.com/watch?v=dQw4w9WgXcQ'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'https://www.youtube.com/watch?v=QH2-TGUlwu4'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'https://www.youtube.com/watch?v=w0AOGeqOnFY'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Now we shuffle the songs
This wont be hard we just use
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shuffle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Omit this line if you don't like your playlist shuffled&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Appending all values to a single string&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now we append all values of that list from above. We will see the importance of it below. We do it using this for loop&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;videos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;videos&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; "&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;printing the output of videos we get something like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://www.youtube.com/watch?v=w0AOGeqOnFY https://www.youtube.com/watch?v=QH2-TGUlwu4 https://www.youtube.com/watch?v=dQw4w9WgXcQ
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, all of them are in a single list&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Running VLC
Now we execute the command that loads vlc with your playlist
This statement does the job
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'vlc --no-video &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;videos&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;we use the &lt;code&gt;--no-video flag&lt;/code&gt; because we are listening to songs, not seeing their YouTube videos. This should also cut down on bandwidth usage&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Running it&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Execute the file and enjoy your playlist&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#full-code"&gt;
  &lt;/a&gt;
  Full code
&lt;/h2&gt;

&lt;p&gt;this is all the code we discussed here&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;

&lt;span class="nb"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'playlist.txt'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 

&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shuffle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Shuffle the Playlist
&lt;/span&gt;
&lt;span class="c1"&gt;## Add all hyperlinks to a single string
&lt;/span&gt;&lt;span class="n"&gt;videos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;videos&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; "&lt;/span&gt;

&lt;span class="c1"&gt;## Run it all
&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'vlc --no-video &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;videos&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Find the full code here &lt;a href="https://github.com/akionsight/Imagine-Using-Spotify"&gt;https://github.com/akionsight/Imagine-Using-Spotify&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#credits"&gt;
  &lt;/a&gt;
  Credits
&lt;/h2&gt;

&lt;p&gt;Credits to &lt;a href="https://www.vlchelp.com/add-vlc-command-prompt-windows/"&gt;this blog from vlchelp&lt;/a&gt; telling me about how to add VLC to path&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#end-notes"&gt;
  &lt;/a&gt;
  End Notes
&lt;/h2&gt;

&lt;p&gt;This is the first episode of this series, hope you like it and please tell me in the comments if you liked this blog or not. &lt;/p&gt;

&lt;p&gt;Thanks, cya&lt;/p&gt;

</description>
      <category>python</category>
      <category>nerds</category>
      <category>vlc</category>
    </item>
  </channel>
</rss>
