<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Node.js with MySQL database.</title>
      <author>popoola Temitope</author>
      <pubDate>Mon, 09 Aug 2021 21:13:20 +0000</pubDate>
      <link>https://dev.to/popoolatopzy/connecting-node-js-with-mysql-database-36dh</link>
      <guid>https://dev.to/popoolatopzy/connecting-node-js-with-mysql-database-36dh</guid>
      <description>&lt;p&gt;Connecting node.js project with MySQL database is easy, follow the following steps to connect to the the database&lt;/p&gt;

&lt;p&gt;&lt;code&gt;By reading this article I believe you have installed nodee Js on your system and familiar with it.&lt;/code&gt;&lt;/p&gt;

&lt;h4&gt; Step1&lt;/h4&gt;

&lt;p&gt;Open your code editor.&lt;/p&gt;

&lt;h4&gt; Step2&lt;/h4&gt;

&lt;p&gt;Create a new project&lt;br&gt;
Open your command prompt or terminal and enter&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; mkdir project_name
 cd project_name
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt; Step3&lt;/h4&gt;

&lt;p&gt;Create project file.&lt;br&gt;
enter&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; npm init -y
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;into the command prompt or terminal.&lt;/p&gt;

&lt;h4&gt; Step4&lt;/h4&gt;

&lt;p&gt;To be able to connect to mysql database you need to install MySQL module into your project.&lt;/p&gt;

&lt;p&gt;To do this is very simple, open your CMD or terminal and enter&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; npm install mysql
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;this command will install the module into your project.&lt;/p&gt;

&lt;h4&gt; Step5&lt;/h4&gt;

&lt;p&gt;Now we can open connection From our project code to mysql database&lt;br&gt;
add the code below to your app.js code to open a connection.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mysql&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mysql&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Creating a mysql connection&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;conn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mysql&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createConnection&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
   &lt;span class="na"&gt;host&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;localhost&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;db_username&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;db_password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="na"&gt;database&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;db_name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt; Step6&lt;/h4&gt;

&lt;p&gt;Let create a simple database and table&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Database connected successful&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;sql&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;CREATE TABLE books (book_name VARCHAR(255), book_description VARCHAR(255))&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="nx"&gt;con&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;,(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
         &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Table created&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can leave a comment...&lt;br&gt;
Thanks❤️&lt;/p&gt;

</description>
      <category>node</category>
      <category>mysql</category>
    </item>
    <item>
      <title>[Video] Learn how to debug web projects end-to-end in VS Code in 5 minutes</title>
      <author>Christian Heilmann</author>
      <pubDate>Mon, 09 Aug 2021 21:02:21 +0000</pubDate>
      <link>https://dev.to/codepo8/video-learn-how-to-debug-web-projects-end-to-end-in-vs-code-in-5-minutes-1kpa</link>
      <guid>https://dev.to/codepo8/video-learn-how-to-debug-web-projects-end-to-end-in-vs-code-in-5-minutes-1kpa</guid>
      <description>&lt;p&gt;This weekend I released a video on the &lt;a href="https://www.youtube.com/channel/UCs5Y5_7XK8HLDX0SLNwkd3w"&gt;YouTube Channel&lt;/a&gt; of &lt;a href="https://code.visualstudio.com"&gt;Visual Studio Code&lt;/a&gt; that shows end-to-end web project debugging. &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/vRNdnv_-X18"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;In five minutes I walk through debugging a web project bit by bit:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I open a project inside VS Code by opening its folder. The demo used is a simple, plain Vanilla JS/CSS/HTML ToDo app you can &lt;a href="https://github.com/codepo8/simple-to-do"&gt;download/fork on GitHub&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;I open a Terminal inside VS Code and start a local server. I use the server that comes with PHP as it already on my computer (for now - MacOS will soon deprecate this option)&lt;/li&gt;
&lt;li&gt;Instead of opening the project in the browser, I use the &lt;a href="https://code.visualstudio.com/docs/nodejs/browser-debugging"&gt;run and debug workflow&lt;/a&gt; of VS Code to open a dedicated browser instance to debug this project with. If I have a Chromium based browser on my device and have it set as my default browser, this will be the one VS Code uses. In my case, this opens a new window of Microsoft Edge, as this is my main browser on this MacOS computer (yes, it runs on Mac for over 1.5 years now). I use Edge to show extra functionality later that is only supported in this Chromium based browser.&lt;/li&gt;
&lt;li&gt;Having a dedicated browser instance also means that I get the &lt;a href="https://docs.microsoft.com/microsoft-edge/devtools-guide-chromium/console/"&gt;Browser Developer Tools Console&lt;/a&gt; functionality now inside the Debug Console of Visual Studio Code. The Debug Console shows any &lt;a href="https://docs.microsoft.com/en-us/microsoft-edge/devtools-guide-chromium/console/console-log"&gt;console.log&lt;/a&gt; messages from my JavaScript and I can also interact with the document in the browser using the &lt;a href="https://docs.microsoft.com/microsoft-edge/devtools-guide-chromium/console/utilities"&gt;Console convenience methods&lt;/a&gt; like &lt;code&gt;$&lt;/code&gt; for &lt;code&gt;querySelector()&lt;/code&gt;. I have full access to the window object and can change the DOM and the styles of the document in a programatic way.&lt;/li&gt;
&lt;li&gt;In addition to console.log() debugging I also have the opportunity to use &lt;a href="https://code.visualstudio.com/Docs/editor/debugging"&gt;breakpoint debugging&lt;/a&gt; instead, which gives me a lot more insight and also has the benefit of halting the execution of my script until I found out what's going on.&lt;/li&gt;
&lt;li&gt;As I am using Microsoft Edge as the debugging browser I also get an inspect button on the debugger toolbar. This one gives me access to the Edge Developer Tools right inside Visual Studio Code. This functionality is powered by the &lt;a href="https://aka.ms/devtools-for-code"&gt;Edge Tools for VS Code&lt;/a&gt; extension which gets installed for me the first time I select the inspect button&lt;/li&gt;
&lt;li&gt;Once the extension runs, I can access and change the DOM and the CSS of the current project right inside Visual Studio Code using the same tools I normally use in the browser. &lt;/li&gt;
&lt;li&gt;I also have access to the Network tool to inspect any Network requests and see if there are any issues of content not being loaded.&lt;/li&gt;
&lt;li&gt;In order to automate the process of starting the browser and opening the localhost address next time, I can also get the debugger extension to generate a launch.json file for me. Once I have that, next time all of the above happens automatically.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want to learn more about the JavaScript debugger in VS Code, you can check the documentation here or talk to &lt;a href="https://twitter.com/connorpeet"&gt;Connor Peet&lt;/a&gt; on Twitter. For the Edge DevTools for VS Code integration you can &lt;a href="https://docs.microsoft.com/en-us/microsoft-edge/visual-studio-code/microsoft-edge-devtools-extension"&gt;read the extension documentation&lt;/a&gt; and &lt;a href="https://github.com/microsoft/vscode-edge-devtools"&gt;check the code on GitHub&lt;/a&gt;. We're also welcoming filing any issues on GitHub and you can talk to me, &lt;a href="https://twitter.com/codepo8"&gt;codepo8&lt;/a&gt; on Twitter or the team at &lt;a href="https://twitter.com/edgedevtools"&gt;EdgeDevTools&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A special thank you to the team involved in all this work, James Lissiak, Michael Liao, Vidal Guillermo Diazleal Ortega, Brandon Goddard, Olivia Flynn, Tony Ross, Rob Paveza, Jason Stephen, Connor Peet and of course the VS Code team. &lt;/p&gt;

</description>
      <category>debugging</category>
      <category>javascript</category>
      <category>dom</category>
      <category>css</category>
    </item>
    <item>
      <title>Move Fast, Break Things &amp; Win: How Facebook Builds Software</title>
      <author>Conor Bronsdon</author>
      <pubDate>Mon, 09 Aug 2021 20:48:01 +0000</pubDate>
      <link>https://dev.to/linearb/move-fast-break-things-win-how-facebook-builds-software-2966</link>
      <guid>https://dev.to/linearb/move-fast-break-things-win-how-facebook-builds-software-2966</guid>
      <description>&lt;p&gt;Founder, professional poker player, podcaster and author, Jeff Meyerson, “broke his brain” to bring you the inside-story of Facebook.&lt;/p&gt;

&lt;p&gt;Interviewing more than two dozen Facebook engineers, Jeff spent two and a half years writing his new book &lt;a href="https://www.google.com/search?q=jeff+meyerson+Move+Fast%3A+How+Facebook+Builds+Software&amp;amp;rlz=1C1JZAP_enUS848US852&amp;amp;sxsrf=ALeKk00ivMbSB6KbO7TMGpD_-S1QgPQODg%3A1628534355776&amp;amp;ei=U3YRYenuLpuJwbkPz76NqAo&amp;amp;oq=jeff+meyerson+Move+Fast%3A+How+Facebook+Builds+Software&amp;amp;gs_lcp=Cgdnd3Mtd2l6EAM6BwgjELADECc6CQgAELADEAcQHjoHCAAQsAMQQzoICAAQgAQQsAM6BQgAEIAEOgoIABCABBCHAhAUOgUILhCABEoECEEYAVDvBliHC2DeFGgAcAB4AIABtwWIAZIJkgEHMC4zLjUtMZgBAKABAaABAsgBCsABAQ&amp;amp;sclient=gws-wiz&amp;amp;ved=0ahUKEwip5J6ey6TyAhWbRDABHU9fA6UQ4dUDCA4&amp;amp;uact=5"&gt;Move Fast: How Facebook Builds Software&lt;/a&gt;. Written from Facebook’s own view of their software strategy and tactics, Move Fast explores the product strategy, cultural principles, and technologies that made Facebook the dominant social networking company.&lt;/p&gt;

&lt;p&gt;Jeff joined Dev Interrupted to give us insight into his book and the secrets behind Facebook’s success, the founding story of the Software Daily podcast, the inside scoop on his new company SuperCompute, and how the skills and logic behind poker translate to software engineering.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#listen-to-the-full-episode"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Listen to the full episode&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/2DlVeUI9A9NoXN1rg1zGzL"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#episode-highlights-include"&gt;
  &lt;/a&gt;
  Episode Highlights Include:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The intersection of poker and software engineering&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Founding story of the Software Daily podcast&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How to think about winning a market&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;First steps to take when founding a company&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Product, culture and engineering — How do they relate?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Is the Facebook the Goldman Sach’s of software?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Why Facebook’s secret sauce is it’s onboarding process, not marketing&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O59fhwsr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nhfm87jqm0b10pu0y2gh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O59fhwsr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nhfm87jqm0b10pu0y2gh.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you haven't already heard&lt;/strong&gt;, Dev Interrupted is partnering with Dzone to host &lt;strong&gt;INTERACT:&lt;/strong&gt; An interactive, community-driven, digital conference on September 30th - by engineering leaders, for engineering leaders. 1 day, 10 speakers, 100s of engineers and engineering leaders, all free.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#register-now"&gt;
  &lt;/a&gt;
  &lt;a href="https://devinterrupted.com/event/interact/"&gt;Register Now&lt;/a&gt;
&lt;/h2&gt;




&lt;h2&gt;
  &lt;a href="#join-the-dev-interrupted-server"&gt;
  &lt;/a&gt;
  Join the Dev Interrupted Server
&lt;/h2&gt;

&lt;p&gt;With over 1500 members, the Dev Interrupted Discord Community is the best place for Engineering Leaders to engage in daily conversation. No sales people allowed. &lt;a href="https://discord.com/invite/devinterrupted"&gt;Join the community &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kzMuW5P1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a05i5erbpgoseb7nhlzd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kzMuW5P1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a05i5erbpgoseb7nhlzd.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Originally published at &lt;a href="https://devinterrupted.com/podcast/move-fast-break-things-win-how-facebook-builds-software"&gt;https://devinterrupted.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Improving microservice architecture with GraphQL API gateways</title>
      <author>Matt Angelosanto</author>
      <pubDate>Mon, 09 Aug 2021 20:20:32 +0000</pubDate>
      <link>https://dev.to/logrocket/improving-microservice-architecture-with-graphql-api-gateways-gb6</link>
      <guid>https://dev.to/logrocket/improving-microservice-architecture-with-graphql-api-gateways-gb6</guid>
      <description>&lt;p&gt;&lt;strong&gt;Written by &lt;a href="https://blog.logrocket.com/author/alecbrunelle/"&gt;Alec Brunelle&lt;/a&gt;&lt;/strong&gt; ✏️&lt;/p&gt;

&lt;p&gt;As your organization grows, it's common for multiple API services to be created, each one providing its own feature set. Alongside these services, you’ll want to provide different client apps for your users to use your product. Eventually, your architecture might look like this:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nurV3but--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/07/microservice-architecture-chart.png" alt="microservice architecture org chart"&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Every client app has different needs&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;There are many reasons why this happens. Over time, team structure may have directed service creation, and at the time, it was easier to have a single team own a single codebase instead of having a web of teams to service ownership.&lt;/p&gt;

&lt;p&gt;Another reason could be that different features in your product had different scaling concerns. For example, your analytics stack may have drastically different needs than your user login stack, and it doesn't make sense to combine the two.&lt;/p&gt;

&lt;p&gt;Whatever the reasons are, this type of architecture will slow down future development for both the backend service teams and frontend client teams. Client apps will need to interface with multiple protocols, use different authentication strategies, worry about which API gives them what type of data, and potentially make multiple API calls to retrieve data for a single page.&lt;/p&gt;

&lt;p&gt;Instead of refactoring every API service or re-building the entire architecture — which is costly and risky — &lt;a href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/architect-microservice-container-applications/direct-client-to-microservice-communication-versus-the-api-gateway-pattern"&gt;API gateways&lt;/a&gt; can help in this situation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-graphql-api-gateways"&gt;
  &lt;/a&gt;
  What are GraphQL API gateways?
&lt;/h2&gt;

&lt;p&gt;API gateways are nothing new to microservices. I've seen many developers use them to provide a single interface (and protocol) for client apps to get data from multiple sources.&lt;/p&gt;

&lt;p&gt;They can solve the problems previously described by providing a single API protocol, a single auth mechanism, and ensuring that clients only need to speak to one team when developing new features.&lt;/p&gt;

&lt;p&gt;Using GraphQL API gateways, on the other hand, is a relatively new concept that has become popular lately. This is because GraphQL has a few properties that lend themselves beautifully to API gateways.&lt;/p&gt;

&lt;p&gt;A GraphQL API gateway can have a single-defined schema and source data from across many different microservices, so clients can query a combination of fields without knowing where the data is coming from.&lt;/p&gt;

&lt;p&gt;With this feature, discovering how to retrieve data isn't a question of who to talk to, but where it lives in the &lt;a href="https://principledgraphql.com/integrity#1-one-graph"&gt;GraphQL schema&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RuPXjTG2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/07/graphQL-schema-data-retrieval.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RuPXjTG2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/07/graphQL-schema-data-retrieval.png" alt="A chart depicting graphQL schema data retrieval"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are many JavaScript packages that help with development. Some provide a layer of abstraction for implementing a GraphQL API gateway, while others can do much more for you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#schema-stitching-with-graphql-gateways"&gt;
  &lt;/a&gt;
  Schema stitching with GraphQL gateways
&lt;/h2&gt;

&lt;p&gt;We now need an API gateway service that will be responsible for receiving operations and returning data from both new and legacy services. We can do this in two different ways: &lt;a href="https://www.graphql-tools.com/docs/schema-stitching/"&gt;schema stitching&lt;/a&gt; or &lt;a href="https://principledgraphql.com/integrity#2-federated-implementation"&gt;federation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For the sake of time, we will look more closely at schema stitching, but you can learn more about &lt;a href="https://blog.logrocket.com/the-what-when-why-and-how-of-federated-graphql/"&gt;GraphQL federation in this article&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In terms of which JavaScript package to use, we could write our own custom Node.js GraphQL server with the likes of &lt;a href="https://github.com/apollographql/apollo-server"&gt;Apollo Server&lt;/a&gt; or &lt;a href="https://github.com/mercurius-js/mercurius"&gt;Mercurius&lt;/a&gt;, where we write code to interpret the GraphQL operations coming in from the clients, send it to downstream APIs, and return data mapped to what the client expects.&lt;/p&gt;

&lt;p&gt;This approach is time-intensive but may make sense depending on your situation. The advantage is that it can be tuned specifically to your organization and best practices.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-graphql-mesh-as-a-graphql-api-gateway"&gt;
  &lt;/a&gt;
  Using GraphQL Mesh as a GraphQL API gateway
&lt;/h2&gt;

&lt;p&gt;Libraries like &lt;a href="http://www.graphql-mesh.com/"&gt;GraphQL Mesh&lt;/a&gt;, on the other hand, automatically stitch multiple data sources into one single GraphQL API. This can save development time, but, like libraries that do a lot for you, you may need to provide custom overrides.&lt;/p&gt;

&lt;p&gt;GraphQL Mesh will not only act as our GraphQL API gateway but also as our data mapper. It supports different data sources, such as OpenAPI/Swagger REST APIs, gRPC APIs, databases, GraphQL (obviously), and more. It will take these data sources, transform them into GraphQL APIs, and then stitch them together.&lt;/p&gt;

&lt;p&gt;To demonstrate the power of a library like this, we will create a simple SpaceX Flight Journal API. Our app will record all the SpaceX launches we attended over the years. Here’s the &lt;a href="https://github.com/aleccool213/graphql-mesh-example"&gt;GitHub repo&lt;/a&gt; for this project.&lt;/p&gt;

&lt;p&gt;Our app will use two data sources: a public GraphQL API that tells us about SpaceX launches and a local MongoDB database.&lt;/p&gt;

&lt;p&gt;The GraphQL SpaceX API will be available to us via a proxy (all operation names are the same), but GraphQL Mesh will give us new operations for our MongoDB database connection. It will let us create users and mark the launches we attended.&lt;/p&gt;

&lt;p&gt;First, install the libraries:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; @graphql-mesh/cli @graphql-mesh/graphql @graphql-mesh/mongoose graphql mongoose
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, create basic Mongoose models that describe our MongoDB schema:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ./src/models.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Schema&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mongoose&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;UserSchema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Schema&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;users&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;User&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;UserSchema&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;LaunchesAttendedSchema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Schema&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;spacexLaunchID&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ObjectId&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;User&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;launches_attended&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;LaunchesAttended&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;LaunchesAttended&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;LaunchesAttendedSchema&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;LaunchesAttended&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, create a GraphQL Mesh config file, &lt;code&gt;.meshrc.yaml&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="s"&gt;// .meshrc.yml&lt;/span&gt;
&lt;span class="na"&gt;sources&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;SpaceX&lt;/span&gt;
    &lt;span class="na"&gt;handler&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;graphql&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;endpoint&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;https://api.spacex.land/graphql/&lt;/span&gt;
        &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;POST&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Mongoose&lt;/span&gt;
    &lt;span class="na"&gt;handler&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;mongoose&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;connectionString&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;mongodb://admin:password@localhost:27017/test?authSource=admin&amp;amp;readPreference=primary&amp;amp;appname=MongoDB%20Compass&amp;amp;directConnection=true&amp;amp;ssl=false&lt;/span&gt;
        &lt;span class="na"&gt;models&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;User&lt;/span&gt;
            &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;./src/models.js#User&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;LaunchesAttended&lt;/span&gt;
            &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;./src/models.js#LaunchesAttended&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Up the MongoDB database with Docker Compose (&lt;a href="https://github.com/aleccool213/graphql-mesh-example/blob/82deb3a32a94a3cd349541e463e25f2fd84d654f/docker-compose.yml#L4"&gt;example docker-compose.yml here&lt;/a&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker-compose up mongo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that's it! Serve up our new GraphQL server with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;./node_modules/.bin/graphql-mesh serve
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will take you to a GraphiQL instance, which is a nice interface for querying GraphQL servers. Click on the doc’s &lt;strong&gt;sidebar&lt;/strong&gt; and explore what options we have available. You will notice we have a way to see past launches.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--quJYAeXv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/07/GraphQL-GraphiQL-sidebar-API-gateways.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--quJYAeXv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/07/GraphQL-GraphiQL-sidebar-API-gateways.jpeg" alt="GraphiQI past launches sidebar"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To test our new capabilities, we can query for past launches, pick an &lt;code&gt;id&lt;/code&gt; from the list, and create a row in the MongoDB database for the user to SpaceX launch reference.&lt;/p&gt;

&lt;p&gt;First, create a user:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight graphql"&gt;&lt;code&gt;&lt;span class="k"&gt;mutation&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;CreateUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;CreateOneUserInput&lt;/span&gt;&lt;span class="p"&gt;!)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;userCreateOne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;record&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;recordId&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, get past launches:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight graphql"&gt;&lt;code&gt;&lt;span class="k"&gt;query&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PastLaunches&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;launchesPast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;mission_name&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;launch_date_local&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Mark a launch as attended:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight graphql"&gt;&lt;code&gt;&lt;span class="k"&gt;mutation&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;LaunchesAttendedCreateOne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;CreateOneLaunchesAttendedInput&lt;/span&gt;&lt;span class="p"&gt;!)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;launchesAttendedCreateOne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;record&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;recordId&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, see all the previous launches that you attended:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight graphql"&gt;&lt;code&gt;&lt;span class="k"&gt;query&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;LaunchesAttended&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;launchesAttendedFindMany&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;spacexLaunchID&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;userId&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In a short time (and after a few config files), we were able to build our own GraphQL API gateway, which stitched together the SpaceX GraphQL API, and a generated GraphQL API from a local MongoDB database, allowing us to create an app that records which launches we attended. This use case was a demonstration of how powerful GraphQL gateways can be for a client’s developer experience.&lt;/p&gt;

&lt;p&gt;Without this gateway, the client would have needed to query two APIs separately. Instead, GraphQL Mesh helped us quickly generate basic CRUD operations we could perform on our Mongo Database, making our app have user-specific features.&lt;/p&gt;

&lt;p&gt;Overall, there are many ways to use API gateways and a plethora of libraries to choose from to assist you in building a distributed system that can be fine-tuned for performance, security, and multi-team organizations.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#monitor-failed-and-slow-graphql-requests-in-production"&gt;
  &lt;/a&gt;
  Monitor failed and slow GraphQL requests in production
&lt;/h2&gt;

&lt;p&gt;While GraphQL has some features for debugging requests and responses, making sure GraphQL reliably serves resources to your production app is where things get tougher. If you’re interested in ensuring network requests to the backend or third party services are successful, &lt;a href="https://logrocket.com/signup"&gt;try LogRocket&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://logrocket.com/signup"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BsjLY60E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dbqi8ncnli9u7o0k36qt.png" alt="LogRocket Dashboard Free Trial Banner"&gt;&lt;/a&gt; &lt;a href="https://logrocket.com/signup"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8FGBNR-I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://logrocket.com/signup"&gt;LogRocket&lt;/a&gt; is like a DVR for web apps, recording literally everything that happens on your site. Instead of guessing why problems happen, you can aggregate and report on problematic GraphQL requests to quickly understand the root cause. In addition, you can track Apollo client state and inspect GraphQL queries' key-value pairs.&lt;/p&gt;

&lt;p&gt;LogRocket instruments your app to record baseline performance timings such as page load time, time to first byte, slow network requests, and also logs Redux, NgRx, and Vuex actions/state. &lt;a href="https://logrocket.com/signup"&gt;Start monitoring for free&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>graphql</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Amplify Geo + Amplify CDN + Svelte!</title>
      <author>Nicholas Reid</author>
      <pubDate>Mon, 09 Aug 2021 20:14:16 +0000</pubDate>
      <link>https://dev.to/njreid/amplify-geo-amplify-cdn-svelte-5faa</link>
      <guid>https://dev.to/njreid/amplify-geo-amplify-cdn-svelte-5faa</guid>
      <description>&lt;p&gt;Have you ever wanted to add maps to your Svelte app?&lt;/p&gt;

&lt;p&gt;So, we're already seeing some great feedback on our &lt;a href="https://docs.amplify.aws/cli/geo/maps"&gt;Amplify Geo&lt;/a&gt; developer preview release - thanks to everyone who has taken the time to play with it. I thought I'd share some hacky code I threw together to try out using our new CDN-delivered Amplify libraries in an mostly-unbundled Svelte app. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;CDN-powered unbundling can be &lt;em&gt;nice&lt;/em&gt;&lt;/em&gt;. Until recently, Amplify-powered JS apps have been conventionally bundled at build time. CDN unbundling is particularly handy for Svelte+Rollup, because none of the Amplify libraries need to be parsed each build iteration, meaning lightning-fast refreshes. Also, the resulting bundle is pretty small. My &lt;code&gt;bundle.js&lt;/code&gt; for this app  is just 19Kb, unminified.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#1-svelte-starter"&gt;
  &lt;/a&gt;
  1. Svelte Starter
&lt;/h3&gt;

&lt;p&gt;Grab your favorite &lt;a href="https://github.com/sveltejs/template"&gt;Svelte template&lt;/a&gt;. I'm a typescript+pug+stylus weirdo, but the standard Svelte-provided one is a good place to start.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx degit sveltejs/template my-geo-app
cd my-geo-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-add-the-amplify-cdn-libraries-to-your-indexhtml"&gt;
  &lt;/a&gt;
  2. Add the Amplify CDN libraries to your index.html
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width,initial-scale=1"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;My Example Map&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"icon"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"image/png"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/favicon.png"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/global.css"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/build/bundle.css"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;script
      &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.amplify.aws/packages/core/4.2.1-geo/aws-amplify-core.min.js"&lt;/span&gt;
      &lt;span class="na"&gt;integrity=&lt;/span&gt;&lt;span class="s"&gt;"sha384-ZJ0BipyxRjDHPcTLilxOMRf9grNEwTTUOmr8l8MUprgnpAnpK4Fz20ndOQElCtWb"&lt;/span&gt;
      &lt;span class="na"&gt;crossorigin=&lt;/span&gt;&lt;span class="s"&gt;"anonymous"&lt;/span&gt;
      &lt;span class="na"&gt;referrerpolicy=&lt;/span&gt;&lt;span class="s"&gt;"no-referrer"&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script
      &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.amplify.aws/packages/auth/5.0.4-geo/aws-amplify-auth.min.js"&lt;/span&gt;
      &lt;span class="na"&gt;integrity=&lt;/span&gt;&lt;span class="s"&gt;"sha384-rqyJfFR2070OQyXIQqomdGCYa6TaR/1asvv2oaz9wB6R8YSiIBC08mWwgVtr1NNk"&lt;/span&gt;
      &lt;span class="na"&gt;crossorigin=&lt;/span&gt;&lt;span class="s"&gt;"anonymous"&lt;/span&gt;
      &lt;span class="na"&gt;referrerpolicy=&lt;/span&gt;&lt;span class="s"&gt;"no-referrer"&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script
      &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.amplify.aws/packages/maplibre-gl/1.14.0/maplibre-gl.js"&lt;/span&gt;
      &lt;span class="na"&gt;integrity=&lt;/span&gt;&lt;span class="s"&gt;"sha384-jWZKsznBFj0Nl3kUaRKmmk89Hew9zDhTnmOz0pOLceWY7iag+l/8QNPeD0cQYaVG"&lt;/span&gt;
      &lt;span class="na"&gt;crossorigin=&lt;/span&gt;&lt;span class="s"&gt;"anonymous"&lt;/span&gt;
      &lt;span class="na"&gt;referrerpolicy=&lt;/span&gt;&lt;span class="s"&gt;"no-referrer"&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script
      &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.amplify.aws/packages/geo/0.0.2-geo.6648/aws-amplify-geo.min.js"&lt;/span&gt;
      &lt;span class="na"&gt;integrity=&lt;/span&gt;&lt;span class="s"&gt;"sha384-VBNaB4q1F3zSs1BgIf7mYogamWN2lITAmfVw3FyxuyFdyaKucigyjrJ6RmQvdbN2"&lt;/span&gt;
      &lt;span class="na"&gt;crossorigin=&lt;/span&gt;&lt;span class="s"&gt;"anonymous"&lt;/span&gt;
      &lt;span class="na"&gt;referrerpolicy=&lt;/span&gt;&lt;span class="s"&gt;"no-referrer"&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script
      &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.amplify.aws/packages/maplibre-gl-js-amplify/1.0.2/maplibre-gl-js-amplify.umd.min.js"&lt;/span&gt;
      &lt;span class="na"&gt;integrity=&lt;/span&gt;&lt;span class="s"&gt;"sha384-g2Tb3Pa8Gpt7OYj324blBhR91QsJeBhvwWqRwcjRHvWk8XE8rjiUs8E0aW/iDnPe"&lt;/span&gt;
      &lt;span class="na"&gt;crossorigin=&lt;/span&gt;&lt;span class="s"&gt;"anonymous"&lt;/span&gt;
      &lt;span class="na"&gt;referrerpolicy=&lt;/span&gt;&lt;span class="s"&gt;"no-referrer"&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;defer&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/build/bundle.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-create-an-amplifymap-component"&gt;
  &lt;/a&gt;
  3. Create an AmplifyMap component.
&lt;/h3&gt;

&lt;p&gt;Add a new file called &lt;code&gt;AmplifyMap.svelte&lt;/code&gt; to your &lt;code&gt;src&lt;/code&gt; directory, with something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;onMount&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;svelte&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;800px&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;600px&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;AmplifyMapLibreRequest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;maplibreAmplify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;AmplifyMapLibreRequest&lt;/span&gt;

  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;initializeMap&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;AmplifyMapLibreRequest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createMapLibreMap&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;container&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;map&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// An HTML Element or HTML element ID to render the map in https://maplibre.org/maplibre-gl-js-docs/api/map/&lt;/span&gt;
      &lt;span class="na"&gt;center&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;123.1187&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;49.2819&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="na"&gt;zoom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;region&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;us-west-2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;onMount&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;initializeMap&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"map"&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"width: {width}; height: {height};"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#4-add-amplifymap-to-app"&gt;
  &lt;/a&gt;
  4. Add AmplifyMap to App
&lt;/h3&gt;

&lt;p&gt;In your &lt;code&gt;App.svelte&lt;/code&gt;, import the AmplifyMap component you just created, and add it to the template. We're passing static height and width values to the map component, but a better way might be to make it responsive to window resizing by &lt;a href="https://svelte.dev/tutorial/dimensions"&gt;binding them dynamically&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;AmplifyMap&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./AmplifyMap.svelte&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;main&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;My Example Map&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"wrapper"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;AmplifyMap&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"900px"&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"600px"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/main&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#5-add-amplify"&gt;
  &lt;/a&gt;
  5. Add Amplify
&lt;/h3&gt;

&lt;p&gt;Last, but most important, you'll need to add AWS Amplify to your project. There are a few ways to do this, but the easiest is via the Amplify CLI. You can just follow the first page of our &lt;a href="https://docs.amplify.aws/lib/geo/getting-started/q/platform/js"&gt;Getting Started guide here&lt;/a&gt;. This takes you through the process of installing the Amplify CLI and provisioning the Amplify Geo backend services in your AWS account.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANT NOTE&lt;/strong&gt; Because the Geo functionality is under Developer Preview, you need to make sure you have the &lt;code&gt;@geo&lt;/code&gt; branch of the CLI installed, as described in the Geo Getting Started guide. We'll remove this requirement when Geo is generally available.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Your main.js (or &lt;code&gt;main.ts&lt;/code&gt;) file should look something like this after you've followed the instructions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./App.svelte&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="c1"&gt;//@ts-ignore&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Amplify&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;aws_amplify_core&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Amplify&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;awsconfig&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./aws-exports&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="nx"&gt;Amplify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;configure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;awsconfig&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;world&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#6-happy-mapping"&gt;
  &lt;/a&gt;
  6. Happy Mapping!
&lt;/h3&gt;

&lt;p&gt;If everything is wired up correctly, when you &lt;code&gt;npm run dev&lt;/code&gt; your app, you should see something like the following in your  &lt;code&gt;localhost:5000&lt;/code&gt; browser session:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lS63BVJY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mr5l1qlxdobcv8x79yf7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lS63BVJY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mr5l1qlxdobcv8x79yf7.png" alt="amplify_geo_svelte"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>svelte</category>
      <category>aws</category>
      <category>mapping</category>
      <category>cdn</category>
    </item>
    <item>
      <title>Cloud Native Chaos Engineering with Chaos Mesh</title>
      <author>Shardul Srivastava</author>
      <pubDate>Mon, 09 Aug 2021 19:51:35 +0000</pubDate>
      <link>https://dev.to/aws-builders/cloud-native-chaos-engineering-with-chaos-mesh-3a96</link>
      <guid>https://dev.to/aws-builders/cloud-native-chaos-engineering-with-chaos-mesh-3a96</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jGIR_DKL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gs1tq6sy5ex8xiw4x5qt.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jGIR_DKL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gs1tq6sy5ex8xiw4x5qt.jpg" alt="chaos-engineering"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With Cloud, distributed architectures have grown even more complex and with complexity comes the uncertainty in how the system could fail.&lt;/p&gt;

&lt;p&gt;Chaos Engineering aims to test system resiliency by injecting faults to identify weaknesses before they cause massive outages such as improper fallback settings for a service, cascading failures due to a single point of failure, or retry storms due to misconfigured timeouts.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#history"&gt;
  &lt;/a&gt;
  History
&lt;/h4&gt;

&lt;p&gt;Chaos Engineering started at Netflix back in 2010 when Netflix moved from on-prem servers to AWS infrastructure to test the resiliency of their infrastructure. &lt;/p&gt;

&lt;p&gt;In 2012, Netflix open-sourced &lt;a href="https://github.com/Netflix/chaosmonkey"&gt;ChaosMonkey&lt;/a&gt; under Apache 2.0 license as a tool to test the resilience of your application infrastructure. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#cloud-native-chaos-engineering-in-cncf-landscape"&gt;
  &lt;/a&gt;
  Cloud Native Chaos Engineering in CNCF Landscape
&lt;/h4&gt;

&lt;p&gt;CNCF focuses on Cloud Native Chaos Engineering defined as engineering practices focused on (and built on) Kubernetes environments, applications, microservices, and infrastructure.&lt;/p&gt;

&lt;p&gt;Cloud Native Chaos Engineering has 4 core principles:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open source&lt;/li&gt;
&lt;li&gt;CRDs for Chaos Management &lt;/li&gt;
&lt;li&gt;Extensible and pluggable&lt;/li&gt;
&lt;li&gt;Broad Community adoption&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;CNCF has two sandbox projects for Cloud Native Chaos Engineering &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/chaos-mesh/chaos-mesh"&gt;ChaosMesh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/litmuschaos/litmus"&gt;Litmus Chaos&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MMcN_0sm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gmb5uh3kd7q6izwjsf3i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MMcN_0sm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gmb5uh3kd7q6izwjsf3i.png" alt="cncf-chaos-engineering"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#chaos-mesh"&gt;
  &lt;/a&gt;
  Chaos Mesh
&lt;/h4&gt;

&lt;p&gt;Chaos Mesh is a cloud-native Chaos Engineering platform that orchestrates chaos on Kubernetes environments. It is based on &lt;a href="https://kubernetes.io/docs/concepts/extend-kubernetes/operator/"&gt;Kubernetes Operator pattern&lt;/a&gt; and provides a Chaos Operator to inject into the applications and Kubernetes infrastructure in a manageable way.&lt;/p&gt;

&lt;p&gt;Chaos Operator uses Custom Resource Defition(CRD) to define chaos objects. It provides a variety of these CRDs for fault injection such as :&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://chaos-mesh.org/docs/simulate-pod-chaos-on-kubernetes/"&gt;PodChaos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://chaos-mesh.org/docs/simulate-network-chaos-on-kubernetes"&gt;NetworkChaos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://chaos-mesh.org/docs/simulate-dns-chaos-on-kubernetes"&gt;DNSChaos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://chaos-mesh.org/docs/simulate-http-chaos-on-kubernetes"&gt;HTTPChaos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://chaos-mesh.org/docs/simulate-heavy-stress-on-kubernetes"&gt;StressChaos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://chaos-mesh.org/docs/simulate-io-chaos-on-kubernetes"&gt;IOChaos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://chaos-mesh.org/docs/simulate-time-chaos-on-kubernetes"&gt;TimeChaos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://chaos-mesh.org/docs/simulate-kernel-chaos-on-kubernetes"&gt;KernelChaos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://chaos-mesh.org/docs/simulate-aws-chaos"&gt;AWSChaos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://chaos-mesh.org/docs/simulate-gcp-chaos"&gt;GCPChaos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://chaos-mesh.org/docs/simulate-jvm-application-chaos"&gt;JVMChaos&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#chaos-mesh-installation"&gt;
  &lt;/a&gt;
  Chaos Mesh Installation
&lt;/h4&gt;

&lt;p&gt;Chaos Mesh can be installed quickly using &lt;a href="https://chaos-mesh.org/docs/quick-start#quick-installation"&gt;installtion script&lt;/a&gt;. However, it's recommended to use Helm 3 chart in production environments.&lt;/p&gt;

&lt;p&gt;To install Chaos Mesh using Helm :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add the Chaos Mesh repository to the Helm repository.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;helm repo add chaos-mesh https://charts.chaos-mesh.org
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;It's recommended to install ChaosMesh in a separate namespace, so you can either create a namespace &lt;code&gt;chaos-testing&lt;/code&gt; manually or let Helm create it automatically, if it doesn't exist :
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;helm upgrade &lt;span class="se"&gt;\&lt;/span&gt;
     &lt;span class="nt"&gt;--install&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
     chaos-mesh &lt;span class="se"&gt;\&lt;/span&gt;
     chaos-mesh/chaos-mesh &lt;span class="se"&gt;\&lt;/span&gt;
     &lt;span class="nt"&gt;-n&lt;/span&gt; chaos-testing &lt;span class="se"&gt;\&lt;/span&gt;
     &lt;span class="nt"&gt;--create-namespace&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
     &lt;span class="nt"&gt;--version&lt;/span&gt; v2.0.0 &lt;span class="se"&gt;\&lt;/span&gt;
     &lt;span class="nt"&gt;--wait&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note: If you're using GKE or EKS with &lt;code&gt;containerd&lt;/code&gt;, then use&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;helm upgrade &lt;span class="se"&gt;\&lt;/span&gt;
     &lt;span class="nt"&gt;--install&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
     chaos-mesh &lt;span class="se"&gt;\&lt;/span&gt;
     chaos-mesh/chaos-mesh &lt;span class="se"&gt;\&lt;/span&gt;
     &lt;span class="nt"&gt;-n&lt;/span&gt; chaos-testing &lt;span class="se"&gt;\&lt;/span&gt;
     &lt;span class="nt"&gt;--create-namespace&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
     &lt;span class="nt"&gt;--set&lt;/span&gt; chaosDaemon.runtime&lt;span class="o"&gt;=&lt;/span&gt;containerd &lt;span class="se"&gt;\&lt;/span&gt;
     &lt;span class="nt"&gt;--set&lt;/span&gt; chaosDaemon.socketPath&lt;span class="o"&gt;=&lt;/span&gt;/run/containerd/containerd.sock &lt;span class="se"&gt;\&lt;/span&gt;
     &lt;span class="nt"&gt;--version&lt;/span&gt; v2.0.0 &lt;span class="se"&gt;\&lt;/span&gt;
     &lt;span class="nt"&gt;--wait&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Verify if pods are running :
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kubectl get pods &lt;span class="nt"&gt;-n&lt;/span&gt; chaos-testing
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#run-first-chaos-mesh-experiment"&gt;
  &lt;/a&gt;
  Run First Chaos Mesh Experiment
&lt;/h4&gt;

&lt;p&gt;Chaos Experiment describes how and what type of fault is injected. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Setup a Nginx pod and expose it as a service on port 80.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kubectl run nginx &lt;span class="nt"&gt;--image&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;nginx &lt;span class="nt"&gt;--labels&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"app=nginx"&lt;/span&gt; &lt;span class="nt"&gt;--port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;80 &lt;span class="nt"&gt;--expose&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Open another terminal and setup a test pod to test the connectivity to nginx service :
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kubectl run &lt;span class="nt"&gt;-it&lt;/span&gt; test-connection &lt;span class="nt"&gt;--image&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;radial/busyboxplus:curl &lt;span class="nt"&gt;--&lt;/span&gt; sh
curl nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;this should show the response like this :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iz1fyzZa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yd4ilg8fn7zv6o9vzdja.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iz1fyzZa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yd4ilg8fn7zv6o9vzdja.png" alt="nginx-test"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create your first Chaos Experiment by running :
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kubectl apply &lt;span class="nt"&gt;-f&lt;/span&gt; - &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="no"&gt;EOF&lt;/span&gt;&lt;span class="sh"&gt;
apiVersion: chaos-mesh.org/v1alpha1
kind: NetworkChaos
metadata:
  name: nginx-network-delay
spec:
  action: delay
  mode: one
  selector:
    namespaces:
      - default
    labelSelectors:
      'app': 'nginx'
  delay:
    latency: '1s'
  duration: '12s'
&lt;/span&gt;&lt;span class="no"&gt;EOF
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;this will introduce a delay of 1 seconds in the response of nginx service for 12 seconds.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Test the response of you nginx service now to see the delay of 1 seconds.&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>kubernetes</category>
      <category>chaosengineering</category>
      <category>chaosmesh</category>
      <category>awscommunitybuilder</category>
    </item>
    <item>
      <title>My First Flask Application</title>
      <author>PhylisChumba</author>
      <pubDate>Mon, 09 Aug 2021 19:40:17 +0000</pubDate>
      <link>https://dev.to/phylis/my-first-flask-application-2mm</link>
      <guid>https://dev.to/phylis/my-first-flask-application-2mm</guid>
      <description>&lt;p&gt;INTRODUCTION&lt;/p&gt;

&lt;p&gt;Have you ever wished you knew how to program, but you have no idea where to start from?.&lt;a href="https://twitter.com/lux_academy"&gt;@Lux Tech Academy&lt;/a&gt; will guide you on how to Learn Programming, Software Engineering, Data Science, Data Structures, Algorithms and Developer Relations The Right Way.  &lt;/p&gt;

&lt;p&gt;For the past three weeks during the Python Bootcamp I have;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Gained basic Python programming concepts. You can check the python basics &lt;a href="https://dev.to/phylis/python-101-introduction-to-python-2eh4"&gt;Here&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Learnt how to develop real-world Python applications.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Learnt how  Python object-oriented programming can be applied to develop software more effectively &lt;a href="https://dev.to/phylis/python-classes-and-objects-51on"&gt;Here&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Learnt how to develop Python functions, and how to use flow control statements in python. &lt;a href="https://dev.to/phylis/introduction-to-control-flow-and-functions-in-python-41cc"&gt;Check it Here&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Been able to apply Python programming techniques in specific fields such as Web Development, Data Science, Machine Learning, and AI. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Applying all the basic knowledge  from introduction to python to application of python for web development, This article will provide you with the basic concepts of the Python Flask framework.&lt;/p&gt;

&lt;p&gt;The article is designed for beginners and professionals.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#introduction-to-flask-web-framework"&gt;
  &lt;/a&gt;
  Introduction to Flask Web Framework.
&lt;/h6&gt;

&lt;p&gt;&lt;strong&gt;What is a Web Framework?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A Web Framework represents a collection of libraries and modules that enable web application developers to write applications&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;What is Flask?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Flask is a web framework that provides libraries to build lightweight web applications in python.&lt;/li&gt;
&lt;li&gt;It was developed by Armin Ronacher, who led a team of international Python enthusiasts called Poocco. &lt;/li&gt;
&lt;li&gt;Flask is based on the &lt;strong&gt;Werkzeg WSGI&lt;/strong&gt; toolkit and the &lt;strong&gt;Jinja2&lt;/strong&gt; template engine.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;What is WSGI?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It is an acronym for web server gateway interface which is a standard for python web application development considered as the specification for the universal interface between the web server and web application.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;What is Jinja2?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;*Jinja2 is a web template engine which combines a template with a certain data source to render the dynamic web pages.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#flask-environment-setup"&gt;
  &lt;/a&gt;
  Flask Environment Setup.
&lt;/h6&gt;

&lt;p&gt;To install flask on the system, we need to have python 3 or higher installed on our system.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Install virtual environment (virtualenv)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Virtualenv is  is a tool to create isolated Python environments.&lt;br&gt;
It can be installed by using the following command;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pip install virtualenv
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once it is installed, we can create the new virtual environment into a folder as given below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ mkdir app   
$ cd app  
$ virtualenv venv
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To activate the corresponding environment, use the following command;&lt;br&gt;
On Linux&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ venv/bin/activate 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On Windows&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ venv\scripts\activate 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can now install the flask by using the following command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ pip install flask  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#first-flask-application"&gt;
  &lt;/a&gt;
  First Flask application
&lt;/h6&gt;

&lt;p&gt;To create your first program in the Flask, open file app.py under the app directory and add the following code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;  

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#creating the Flask class object   
&lt;/span&gt;
&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#decorator   
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;home&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;  
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"Hello world"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Save the code  and run this python code on the command line as follows.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aI1Ldbl5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2dkymempc6v4bsejn1kc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aI1Ldbl5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2dkymempc6v4bsejn1kc.png" alt="Screenshot (25)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Since it is a web application, therefore it is to be run to on the browser at &lt;a href="http://localhost:5000"&gt;http://localhost:5000&lt;/a&gt;.&lt;br&gt;
The output is;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YAwyB-dG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e1vww1spej5e15kfczsq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YAwyB-dG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e1vww1spej5e15kfczsq.png" alt="Screenshot (24)"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary.
&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;To build the python web application, we need to import the Flask module. An object of the Flask class is considered as the WSGI application.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We need to pass the name of the current module, i.e. &lt;strong&gt;name&lt;/strong&gt; as the argument into the Flask constructor.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The route() function of the Flask class defines the URL mapping of the associated function. The syntax is given below.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;It accepts the folowing parameters;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;rule:&lt;/strong&gt; It represents the URL binding with the function.&lt;br&gt;
&lt;strong&gt;options:&lt;/strong&gt; It represents the list of parameters to be associated with the rule object.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The run method of the Flask class is used to run the flask application on the local development server.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The syntax is given below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;host&lt;/strong&gt; :The default hostname is 127.0.0.1, i.e. localhost.&lt;br&gt;
&lt;strong&gt;port&lt;/strong&gt;: The port number to which the server is listening to. The default port number is 5000.&lt;br&gt;
&lt;strong&gt;debug&lt;/strong&gt;: The default is false. It provides debug information if it is set to true.&lt;br&gt;
&lt;strong&gt;options&lt;/strong&gt;: It contains the information to be forwarded to the server.&lt;/p&gt;

</description>
      <category>python</category>
      <category>webdev</category>
      <category>flask</category>
    </item>
    <item>
      <title>The best new Vue 3 UI libraries of 2021</title>
      <author>Matt Angelosanto</author>
      <pubDate>Mon, 09 Aug 2021 19:16:15 +0000</pubDate>
      <link>https://dev.to/logrocket/the-best-new-vue-3-ui-libraries-of-2021-3pef</link>
      <guid>https://dev.to/logrocket/the-best-new-vue-3-ui-libraries-of-2021-3pef</guid>
      <description>&lt;p&gt;&lt;strong&gt;Written by &lt;a href="https://blog.logrocket.com/author/dylan-tientcheu/"&gt;Dylan Tientcheu&lt;/a&gt;&lt;/strong&gt; ✏️&lt;/p&gt;

&lt;p&gt;This article is a follow-up to my previous article showcasing &lt;a href="https://blog.logrocket.com/the-best-ui-frameworks-for-vue-3/"&gt;a list of nine superb Vue 3 UI frameworks&lt;/a&gt;. These frameworks enhance your Vue app’s development experience, maintainability, and final design.&lt;/p&gt;

&lt;p&gt;Today, I’ll be talking about five more brand new Vue 3 UI frameworks that ship with a panoply of awesome components (e.g., navbars, inputs, and checkboxes) that will help you effortlessly build interfaces or your own components. Moreover, some of these frameworks ship with functions, plugins, and directives that may abstract a whole layer of complexity on your UI, like lazy loading, infinite scrolling, and debouncing, to name a few.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#oruga-ui"&gt;
  &lt;/a&gt;
  Oruga UI
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ighFGLGJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/08/Oruga-UI-homepage.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ighFGLGJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/08/Oruga-UI-homepage.png" alt="Screenshot of Oruga UI homepage"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://oruga.io/"&gt;Oruga UI&lt;/a&gt; was mentioned as a “most anticipated UI framework” in my previous post. This is because Oruga has been shipping lightweight and unobtrusive components since Vue 2, a nice trend that continues in the new Vue 3 version.&lt;/p&gt;

&lt;p&gt;Oruga provides components that focus on functionality rather than style, which makes it a solid foundation onto which you can build your own components.&lt;/p&gt;

&lt;p&gt;On their website, Oruga embraces a unique philosophy: “[We] want you to focus only on UI/UX aspects of your application and be totally flexible to future changes without having to touch a line of JavaScript.”&lt;/p&gt;

&lt;p&gt;This illustrates that Oruga provides a non-opinionated environment in which you can build anything you’d like. They took this thinking to the next level by providing a CSS toggle on their website; this toggle has the ability to enable and disable their custom CSS on the docs, allowing you to view components with none of the default styles applied.&lt;/p&gt;

&lt;p&gt;I would select Oruga as a framework if I’m looking for a nice pack of extremely customizable components on which I can apply my own style or design system. Plus, even if I want to edit the default styles, Oruga allows this with a ton of CSS variables waiting to receive custom styles to override or enhance. Oruga provides a great experience in terms of setup and customization.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#vuestic-ui"&gt;
  &lt;/a&gt;
  Vuestic UI
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nwORcuFq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/08/Vuestic-homepage.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nwORcuFq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/08/Vuestic-homepage.png" alt="Screenshot of Vuestic homepage"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://vuestic.dev/en/ui-elements/card"&gt;Vuestic&lt;/a&gt; is known for making one of the most beautiful, open source admin panels for Vue. They excel in writing maintainable Vue code and crafting slick components and interfaces.&lt;/p&gt;

&lt;p&gt;The team has recently announced Vuestic UI, their Vue 3 UI framework, containing all of the components used in the popular Vuestic Admin UI and much more. Vuestic emphasizes its out-of-the-box support for keyboard navigation, a feature prized in the frontend community due to the UX it provides.&lt;/p&gt;

&lt;p&gt;Vuestic provides more than 50 components with unique features and extensive configurability. Responsive by design, these components fit on nearly every screen. Vuestic ships with seamless translation support and keyboard accessibility throughout the framework.&lt;/p&gt;

&lt;p&gt;Vuestic has already established itself as one of the most aesthetically pleasing Vue 3 UI frameworks with their catalog of beautiful components. They are now on good pace to create much more complex components, like a date picker or a data table, which will surely look as inventive as their current offerings.&lt;/p&gt;

&lt;p&gt;Vuestic will fit perfectly to your app if you want to build good-looking and functional components. The components are responsive by design and will fit with any theme thanks to the high level of customizability.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#naive-ui"&gt;
  &lt;/a&gt;
  Naive UI
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H12amxBD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/08/Naive-UI-homepage.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H12amxBD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/08/Naive-UI-homepage.png" alt="Screenshot of Naive UI homepage"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.naiveui.com/en-US/os-theme"&gt;Naive UI&lt;/a&gt; was &lt;a href="https://twitter.com/07akioni/status/1401465511758598144?s=20"&gt;modestly announced to the world on Twitter&lt;/a&gt;, then retweeted by Vue’s creator, which brought a lot of traffic to this new component library. Now, Naive UI has a well-deserved 4.7k stars on GitHub within less than three months of existence.&lt;/p&gt;

&lt;p&gt;It ships more than 70 extremely well-crafted components that can seamlessly fit into almost any kind of Vue 3 app. Naive’s components are performant, extremely customizable, and have first-class TypeScript support to offer a great development experience.&lt;/p&gt;

&lt;p&gt;The documentation website is easy to navigate, and has full customization inputs to help developers preview how components will look within their own theme. You can play with the options to create your own full-blown theme with color patterns and fonts. This customized theme can be downloaded and easily added to your app to override the defaults.&lt;/p&gt;

&lt;p&gt;Within Naive’s large library of components, all of them are tree-shakable, support dark and light themes, and provide extensive props and events to make either a skeleton for your own complex component, or to seamlessly integrate into your own app.&lt;/p&gt;

&lt;p&gt;Naive ships almost everything one may need to develop a mature Vue 3 app. Every component is fast and consistent, and data-displaying components ship with great lazy loading abilities.&lt;/p&gt;

&lt;p&gt;I would select Naive to supercharge my Vue app without compromising speed or any of my existing components.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#varlet-ui"&gt;
  &lt;/a&gt;
  Varlet UI
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3gjeYTM0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/08/Varlet-homepage.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3gjeYTM0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/08/Varlet-homepage.png" alt="Screenshot of Varlet UI homepage"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://varlet.gitee.io/varlet-ui/#/en-US/"&gt;Varlet UI&lt;/a&gt; is a Material Design mobile component library for Vue 3. It can be regarded as a mobile-oriented and compatible version of the well-known &lt;a href="https://vuetifyjs.com/"&gt;Vuetify&lt;/a&gt; UI framework.&lt;/p&gt;

&lt;p&gt;Varlet ships with 40 lightweight and high quality components, and features great TypeScript, SSR, and internationalization support. Varlet leans on Material Design, which is already very well-established in mobile experiences, giving your users a step ahead in the process of learning how the components work.&lt;/p&gt;

&lt;p&gt;The tree-shakable nature of Varlet’s components allow them to be light and accessible. Additionally, Varlet offers an IDE set up guide and an extension to enhance developer’s productivity.&lt;/p&gt;

&lt;p&gt;Varlet is my pick if I’d like to have beautiful, responsive Material Design components with a bias towards mobile user interfaces.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#vant-ui"&gt;
  &lt;/a&gt;
  Vant UI
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1TL6syAF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/08/Vant-homepage.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1TL6syAF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/08/Vant-homepage.png" alt="Screenshot of Vant homepage"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://vant-contrib.gitee.io/vant/#/en-US/button"&gt;Vant UI&lt;/a&gt; offers more than 65 lightweight, reusable components. Vant’s components are known for being adapted for mobile use, and for their ability to be fully customizable. Vant is a strong competitor to the &lt;a href="https://blog.logrocket.com/react-native-vs-ionic/"&gt;Ionic framework&lt;/a&gt;, offering rare components like password inputs, countdowns, pull-to-refresh, notifications, and more.&lt;/p&gt;

&lt;p&gt;After browsing through Vant’s component catalog, it is clear they focus on smaller devices but stay flexible enough to be extended to web apps. It is worth mentioning that these components are all tree-shakable, and as such, they can be imported individually to your application.&lt;/p&gt;

&lt;p&gt;Vant has an extensive documentation website, featuring numerous demos, event APIs, slot APIs, code examples, and even edge-cases. Vant also offers typed components to help with code completions, and supports SSR, theming, and internationalization, making it a bulletproof solution for most developers.&lt;/p&gt;

&lt;p&gt;Vant would be awesome if ever you need to build an app that will look great on mobile. These components fit perfectly on any PWA and make your web app feel native without much hassle.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;As Vue grows exponentially, it organically raises much better libraries and frameworks due to the fact that authors have a powerful, performant, and extensive API to lean on. Now developers can come up with more inventive ways facilitate the creation of user interfaces while breaking most of the limits they previously encountered.&lt;/p&gt;

&lt;p&gt;Due to Vue’s keen approach to details that matter most for frontend developers (developer experience, performance, reactivity, and state management, to name a few), it is safe to say the whole Vue ecosystem is worth monitoring closely in the coming years.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#experience-your-vue-apps-exactly-how-a-user-does"&gt;
  &lt;/a&gt;
  Experience your Vue apps exactly how a user does
&lt;/h2&gt;

&lt;p&gt;Debugging Vue.js applications can be difficult, especially when there are dozens, if not hundreds of mutations during a user session. If you’re interested in monitoring and tracking Vue mutations for all of your users in production, &lt;a href="https://www2.logrocket.com/vue-performance-monitoring"&gt;try LogRocket&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www2.logrocket.com/vue-performance-monitoring"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---Rso_joi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://files.readme.io/00591d0-687474703a2f2f692e696d6775722e636f6d2f6a3049327856572e706e67.png" alt="LogRocket Dashboard Free Trial Banner"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www2.logrocket.com/vue-performance-monitoring"&gt;LogRocket&lt;/a&gt; is like a DVR for web apps, recording literally everything that happens in your Vue apps including network requests, JavaScript errors, performance problems, and much more. Instead of guessing why problems happen, you can aggregate and report on what state your application was in when an issue occurred.&lt;/p&gt;

&lt;p&gt;The LogRocket Vuex plugin logs Vuex mutations to the LogRocket console, giving you context around what led to an error, and what state the application was in when an issue occurred.&lt;/p&gt;

&lt;p&gt;Modernize how you debug your Vue apps - &lt;a href="https://www2.logrocket.com/vue-performance-monitoring"&gt;Start monitoring for free&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>vue</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>news</category>
    </item>
    <item>
      <title>Validando associações com Ecto: put_assoc vs cast_assoc</title>
      <author>Marcos Vinicius O. Silveira</author>
      <pubDate>Mon, 09 Aug 2021 19:12:42 +0000</pubDate>
      <link>https://dev.to/viniciussilveira/validando-associacoes-com-ecto-putassoc-vs-castassoc-47j9</link>
      <guid>https://dev.to/viniciussilveira/validando-associacoes-com-ecto-putassoc-vs-castassoc-47j9</guid>
      <description>&lt;p&gt;Recentemente fazendo algumas refatorações de código, identifiquei um problema onde a validação de alguns changesets não estavam funcionando, e olhando a implementação tudo estava aparentemente correto:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;create_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="no"&gt;User&lt;/span&gt;
  &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;changeset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;put_assoc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:personal_info&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;personal_info&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Repo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Debugando o código, vi que o problema era que ao executar o &lt;code&gt;create_user&lt;/code&gt;, o changeset do &lt;code&gt;personal_info&lt;/code&gt; não era executado. Então fui ver na documentação, e vi que a &lt;code&gt;put_assoc&lt;/code&gt; exige que os parâmetros tenham sido validados pelo &lt;code&gt;changeset&lt;/code&gt; antes da chamada da função, então o que eu precisava fazer era o seguinte:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;create_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="no"&gt;User&lt;/span&gt;
  &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;changeset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;put_assoc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:personal_info&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;build_personal_info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Repo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;defp&lt;/span&gt; &lt;span class="n"&gt;build_personal_info&lt;/span&gt;&lt;span class="p"&gt;(%{&lt;/span&gt;
  &lt;span class="ss"&gt;personal_info:&lt;/span&gt; &lt;span class="n"&gt;personal_info&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
 &lt;span class="no"&gt;PersonalInfo&lt;/span&gt;
 &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;PersonalInfo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;changeset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;personal_info&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;E dessa forma a validação passou a ser feita da maneira esperada. Porém, eu adicionei mais uma função privada no meu contexto. Então, eu fui atrás de uma forma melhor de resolver esse problema. A solução foi utilizar a &lt;code&gt;cast_assoc&lt;/code&gt; diretamente no &lt;code&gt;changeset&lt;/code&gt; do &lt;code&gt;User&lt;/code&gt;, pois ela faz a relação dos dados e trata as informações com o &lt;code&gt;changeset&lt;/code&gt;. E como os parâmetros já possuíam a chave &lt;code&gt;personal_info&lt;/code&gt;, eu não precisei informar qual parâmetro&lt;br&gt;
deveria ser validado, pois a função já faz isso:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;  &lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;MyApp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Accounts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;User&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;

    &lt;span class="n"&gt;schema&lt;/span&gt; &lt;span class="s2"&gt;"users"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="o"&gt;...&lt;/span&gt;
      &lt;span class="c1"&gt;# Atente a necessidade da relação estar declarada no schema&lt;/span&gt;
      &lt;span class="n"&gt;has_one&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:personal_info&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;PersonalInfo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;on_delete:&lt;/span&gt; &lt;span class="n"&gt;delete_all&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;changeset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;user&lt;/span&gt;
      &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;cast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;@optional_fields&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="nv"&gt;@required_fields&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;validate_required&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;@required_fields&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;cast_assoc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:personal_info&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;required:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Dessa forma, eu não precisei fazer nenhuma chamada no Contexto, nem criar uma nova função para validar os dados de &lt;code&gt;PersonalInfo&lt;/code&gt; ao salvar dados de uma nova pessoa usuária.&lt;/p&gt;

</description>
      <category>elixir</category>
      <category>ecto</category>
    </item>
    <item>
      <title>Jump to running tmux sessions with fzf</title>
      <author>Waylon Walker</author>
      <pubDate>Mon, 09 Aug 2021 19:05:20 +0000</pubDate>
      <link>https://dev.to/waylonwalker/jump-to-running-tmux-sessions-with-fzf-4p77</link>
      <guid>https://dev.to/waylonwalker/jump-to-running-tmux-sessions-with-fzf-4p77</guid>
      <description>&lt;p&gt;Quickly getting between tmux splits is critical skill for productivity.  You&lt;br&gt;
can get by with &lt;code&gt;next&lt;/code&gt; or &lt;code&gt;prev&lt;/code&gt; session for awhile, but if you have more than&lt;br&gt;
about three session you need something a bit more targeted.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#full-screen-selector"&gt;
  &lt;/a&gt;
  Full Screen selector
&lt;/h2&gt;

&lt;p&gt;I have used this fzf one keybinding for quite awhile,  honestly I did not make&lt;br&gt;
it up, and cannot remember where it came from. It will open up a session picker&lt;br&gt;
in a new full screen window.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;bind &lt;/span&gt;C-j new-window &lt;span class="nt"&gt;-n&lt;/span&gt; &lt;span class="s2"&gt;"session-switcher"&lt;/span&gt; &lt;span class="s2"&gt;"tmux list-sessions | sed -E 's/:.*&lt;/span&gt;&lt;span class="nv"&gt;$/&lt;/span&gt;&lt;span class="s2"&gt;/' | grep -v &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;^&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;tmux display-message &lt;span class="nt"&gt;-p&lt;/span&gt; &lt;span class="s1"&gt;'#S'&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="se"&gt;\$\"&lt;/span&gt;&lt;span class="s2"&gt; | fzf --reverse | xargs tmux switch-client -t"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#popup-selector"&gt;
  &lt;/a&gt;
  Popup selector
&lt;/h2&gt;

&lt;p&gt;Like with many of my keybindings I have swapped this one out for a popup&lt;br&gt;
version.  It just feels so smooth.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;bind &lt;/span&gt;C-j display-popup &lt;span class="nt"&gt;-E&lt;/span&gt; &lt;span class="s2"&gt;"tmux list-sessions | sed -E 's/:.*&lt;/span&gt;&lt;span class="nv"&gt;$/&lt;/span&gt;&lt;span class="s2"&gt;/' | grep -v &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;^&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;tmux display-message &lt;span class="nt"&gt;-p&lt;/span&gt; &lt;span class="s1"&gt;'#S'&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="se"&gt;\$\"&lt;/span&gt;&lt;span class="s2"&gt; | fzf --reverse | xargs tmux switch-client -t"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://waylonwalker.com/tmux-nav-2021/"&gt;https://waylonwalker.com/tmux-nav-2021/&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;for more information on how I navigate tmux, check out this full post&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Also check out the full YouTube&lt;br&gt;
&lt;a href="https://www.youtube.com/playlist?list=PLTRNG6WIHETB4reAxbWza3CZeP9KL6B"&gt;tmux-playlist&lt;/a&gt;&lt;br&gt;
to see all of the videos in this series.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://waylonwalker.com/tmux-nav-2021/"&gt;https://waylonwalker.com/tmux-nav-2021/&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;for more information on how I navigate tmux, check out this full post&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Also check out the full YouTube&lt;br&gt;
&lt;a href="https://www.youtube.com/playlist?list=PLTRNG6WIHETB4reAxbWza3CZeP9KL6B"&gt;tmux-playlist&lt;/a&gt;&lt;br&gt;
to see all of the videos in this series.&lt;/p&gt;

</description>
      <category>cli</category>
      <category>linux</category>
      <category>tmux</category>
    </item>
    <item>
      <title>Selecting low power networking — LoraWan,SigFox, Nb-IoT and LTE-M</title>
      <author>TheDailyTechTalk</author>
      <pubDate>Mon, 09 Aug 2021 18:54:43 +0000</pubDate>
      <link>https://dev.to/thedailytechtalk/selecting-low-power-networking-lorawan-sigfox-nb-iot-and-lte-m-1gp5</link>
      <guid>https://dev.to/thedailytechtalk/selecting-low-power-networking-lorawan-sigfox-nb-iot-and-lte-m-1gp5</guid>
      <description>&lt;h1&gt;
  &lt;a href="#selecting-low-power-networking-contrasting-pros-and-cons-of-lorawansigfox-nbiot-and-ltem"&gt;
  &lt;/a&gt;
  Selecting low power networking contrasting pros and cons of LoraWan,SigFox, Nb-IoT and LTE-M
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#what-is-low-power-wide-area-network"&gt;
  &lt;/a&gt;
  What is "Low power wide area network"?
&lt;/h2&gt;

&lt;p&gt;LPWAN is a type of wireless telecommunication designed for long-range communications between IoT devices, sensors etc. Its main purpose is to send small amounts of data over a great distance for a long period of time, even years on a single battery*.* Coverage can range from 1 km up to over 40 km.&lt;/p&gt;

&lt;p&gt;Frequency which LPWAN providers like SigFox or LoraWaN use depends on location (and sometimes even the country). Providers use either unlicensed ISM bands , 868 MHz in Europe, 915 Mhz in North America and 433 MHz in Asia, or licensed LTE frequency bands.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kt_J_-9t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.thedailytechtalk.com/_nuxt/uploads/63ed0e7-592.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kt_J_-9t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.thedailytechtalk.com/_nuxt/uploads/63ed0e7-592.jpg" alt="The advantages of Sigfox, LoRaWAN, and NB-IoT."&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;The respective advantages of Sigfox, LoRaWAN, and NB-IoT. Source: The Korean Institute of Communications and Information Sciences (KICS) as published in ICT Express, March 2019.&lt;/em&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#sigfox"&gt;
  &lt;/a&gt;
  SigFox
&lt;/h1&gt;

&lt;p&gt;Sigfox was founded in 2009 in France.Today they are available in over 60 countries and their numbers are constantly growing. They offer end-to-end LPWAN solutions. Sigfox network architecture is built using base stations in a star topology, but with their own cloud service acting as a middle man. That kind of architecture offers some great benefits such as data security and data flow via API.&lt;/p&gt;

&lt;p&gt;Pros:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Strong industry support and partners like Texas Instruments, Silicon Labs and Arduino&lt;/li&gt;
&lt;li&gt;Very long range&lt;/li&gt;
&lt;li&gt;Large coverage&lt;/li&gt;
&lt;li&gt;Cost effective&lt;/li&gt;
&lt;li&gt;Cloud service &amp;amp; API&lt;/li&gt;
&lt;li&gt;Easy to integrate with services like AWS, Azure and others&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Not an open standard&lt;/li&gt;
&lt;li&gt;Low security (16 bit encryption)&lt;/li&gt;
&lt;li&gt;US design architecture is different from European architecture&lt;/li&gt;
&lt;li&gt;Bad UI/UX in administration interface&lt;/li&gt;
&lt;li&gt;Bad latency performance&lt;/li&gt;
&lt;li&gt;Low maximum payload length&lt;/li&gt;
&lt;li&gt;Limited amount of UL / DL&lt;/li&gt;
&lt;li&gt;No private networks&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#lorawan"&gt;
  &lt;/a&gt;
  LoRaWaN
&lt;/h1&gt;

&lt;p&gt;LoRaWaN network architecture is deployed as a typical star topology, with a gateway in the middle that converts radio signal to IP and vice versa. They are mainly used for telemetric data transfers and object tracking. Messages transmitted by an end device with LoRaWAN are received by all base stations in the range, which increases the ratio of successfully received messages. However, that requires multiple base stations in range, as well as the need to filter duplicated messages, which leads to increased network deployment cost.&lt;/p&gt;

&lt;p&gt;Pros:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Strong industry support and partners such as Cisco, IBM and KPN&lt;/li&gt;
&lt;li&gt;Strong security (128 bit encryption) and authentication (2 layers of security)&lt;/li&gt;
&lt;li&gt;Great for communication with moving devices, since it is resistant to the Doppler effect&lt;/li&gt;
&lt;li&gt;Unlimited uplinks and downlinks&lt;/li&gt;
&lt;li&gt;Multiple classes of end devices for different requirements and situations&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Not an open standard&lt;/li&gt;
&lt;li&gt;The price and availability of the modules&lt;/li&gt;
&lt;li&gt;You can only use vendors approved by Semtech&lt;/li&gt;
&lt;li&gt;Expensive device certification required for most device types&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#nbiot"&gt;
  &lt;/a&gt;
  NB-IoT
&lt;/h1&gt;

&lt;p&gt;NB-IoT , which stands for Narrowband Internet of Things, uses licensed frequency spectrum, unlike SigFox and LoRa. Their communication protocol is based on the LTE protocol and it can coexist with both GSM and LTE protocols. NB-IoT frequency band width is 200 KHz, and because of that there are 3 operation modes possible: stand-alone operation which utilizes GSM frequency bands currently in use, guard-band operation that utilizes unused resource blocks within LTE band and in-band operation which utilizes resource blocks within an LTE carrier.&lt;/p&gt;

&lt;p&gt;Pros:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Big data rate (200 kbps)&lt;/li&gt;
&lt;li&gt;Large maximum payload length (1600) bytes&lt;/li&gt;
&lt;li&gt;LTE encryption&lt;/li&gt;
&lt;li&gt;Scalability&lt;/li&gt;
&lt;li&gt;Latency performance&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;No private networks&lt;/li&gt;
&lt;li&gt;Low coverage&lt;/li&gt;
&lt;li&gt;Cost efficiency&lt;/li&gt;
&lt;li&gt;Lower range than its competitors&lt;/li&gt;
&lt;li&gt;Low interference immunity&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#ltem"&gt;
  &lt;/a&gt;
  LTE-M
&lt;/h1&gt;

&lt;p&gt;CAT-M, officially known as LTE CAT-M1, is the second generation of LTE chips developed by 3GPP. As well as coexisting with 2G, 3G and 4G mobile networks , LTE-M network benefits from their security, privacy and other features. Unlike the rest of the world where GSM spectra are the norm, US service providers have system architecture for LTE-M.&lt;/p&gt;

&lt;p&gt;Pros:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Compatible with existing LTE network.&lt;/li&gt;
&lt;li&gt;High data rate&lt;/li&gt;
&lt;li&gt;Support of voice functionality via VoLTE&lt;/li&gt;
&lt;li&gt;Low power consumption&lt;/li&gt;
&lt;li&gt;Use of TCP / IP protocols&lt;/li&gt;
&lt;li&gt;Easy to deploy&lt;/li&gt;
&lt;li&gt;Supports mobility, no disconnections while moving between stations&lt;/li&gt;
&lt;li&gt;Low latency&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Firmware upgrades consume power&lt;/li&gt;
&lt;li&gt;High costs&lt;/li&gt;
&lt;li&gt;Bandwidth consumption&lt;/li&gt;
&lt;li&gt;Low support outside USA&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>iot</category>
      <category>watercooler</category>
      <category>writing</category>
    </item>
    <item>
      <title>Top 5 Things an Azure Developer Needs to Know: Introduction</title>
      <author>Pulumi Dev</author>
      <pubDate>Mon, 09 Aug 2021 18:10:05 +0000</pubDate>
      <link>https://dev.to/pulumi/top-5-things-an-azure-developer-needs-to-know-introduction-4pl2</link>
      <guid>https://dev.to/pulumi/top-5-things-an-azure-developer-needs-to-know-introduction-4pl2</guid>
      <description>&lt;p&gt;The Azure cloud platform includes over 200 products and cloud services. Wherever you are in your Microsoft cloud engineering journey, you should be familiar with these top 5 cloud tasks that are essential building blocks commonly used to deploy applications and infrastructure to the Azure cloud.&lt;/p&gt;

&lt;p&gt;In this series of articles, we’ll go in-depth on virtual machines, Azure Functions, building an Azure Kubernetes Service cluster and deploying applications on AKS, and DevOps with Azure App Service.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#azure-a-comprehensive-cloud-platform"&gt;
  &lt;/a&gt;
  Azure - a comprehensive cloud platform
&lt;/h2&gt;

&lt;p&gt;With Azure, you can develop, test, deploy and manage your applications in an integrated cloud computing environment. With the Azure Portal, you can manage the cloud infrastructure for your applications. Azure gives you the choice of a portal for managing services or managing them programmatically using service APIs and templates.&lt;/p&gt;

&lt;p&gt;With over 200 services, knowing which one to use can be confusing. Deciding where to host your application is the first step. This series of articles covers the most commonly used Azure services such as virtual machines, serverless functions, static websites, Kubernetes, and Azure App Service. In addition, we’ll cover how to deploy applications using Azure DevOps.&lt;/p&gt;

&lt;p&gt;In this article, we’ll match use cases to cloud services to help you navigate Azure.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#azure-virtual-machines"&gt;
  &lt;/a&gt;
  Azure Virtual Machines
&lt;/h2&gt;

&lt;p&gt;A common cloud migration path is to use virtual machines if you have existing infrastructure or on-premise applications. It is especially true if you want complete control over the infrastructure and application environment.&lt;/p&gt;

&lt;p&gt;Azure provides Infrastructure as a Service (IaaS) for deploying your applications on either Linux or Windows VMs. IaaS includes all necessary support, such as Azure Virtual Network and storage. As with any IaaS solution, you are responsible for the installation of software, configuration, and maintenance of your application and any maintenance the VM might require, such as operating system patches.&lt;/p&gt;

&lt;p&gt;If your application doesn’t fit into a Platform as a Service (PaaS) model, consider using virtual machines to provide the fine-grained control required for your deployment.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_IDlrDwa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t1voupxptho1vig69qb3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_IDlrDwa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t1voupxptho1vig69qb3.png" alt="Virtual Machine"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#serverless"&gt;
  &lt;/a&gt;
  Serverless
&lt;/h2&gt;

&lt;p&gt;At the opposite end of cloud infrastructure is serverless computing. Serverless eliminates the need to manage infrastructure and lets you focus on writing and deploying code. Azure automatically provisions, scales, and manages the infrastructure. You can write code that runs in response to events or on a schedule.&lt;/p&gt;

&lt;p&gt;Azure Functions lets you focus on the application’s business logic, and the code executes when called by a webhook, an HTTP or REST request, a schedule, or an event. Serverless is particularly appealing because you can use the development language of your choice, ranging from PHP, Python, Node.js, or .NET languages. Azure functions scale as needed, and consumption-based pricing means that you’re charged only when the code runs.&lt;/p&gt;

&lt;p&gt;If you don’t need a completely hosted project and only pay for what you use, choose Azure Functions triggered by web-based events, a schedule, or other Azure services.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gHS4zdre--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p90vgeablgjj6vkgsfn7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gHS4zdre--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p90vgeablgjj6vkgsfn7.png" alt="Serverless Function"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#static-websites"&gt;
  &lt;/a&gt;
  Static websites
&lt;/h2&gt;

&lt;p&gt;Static websites are quickly becoming the defacto way to publish content. Built from libraries and frameworks that don’t use server side rendering like React, Angular, or Vue, they include HTML, CSS, image assets, and Javascript in the application. Instead of serving assets from a server or servers scaled horizontally, the static assets are distributed through a Content Delivery Network (CDN). This reduces latency, resulting in faster websites and increased customer satisfaction.&lt;/p&gt;

&lt;p&gt;Azure provides two ways to deploy static websites. Azure lets you deploy a static web application with Azure App Service and the recently released Azure Static Web Apps. Azure App Service deploys websites by uploading the website to Azure storage configured to serve web content. Azure App Service automatically builds and deploys full stack web apps to Azure from a code repository, which follows the &lt;a href="https://jamstack.org/"&gt;Jamstack&lt;/a&gt; model for developing and deploying websites.&lt;/p&gt;

&lt;p&gt;We’ll look at both methods and discuss the pros and cons of both methods.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#kubernetes"&gt;
  &lt;/a&gt;
  Kubernetes
&lt;/h2&gt;

&lt;p&gt;Kubernetes is the leading container orchestration service. Azure Kubernetes Service (AKS) is a hosted service that can deploy, scale, and manage containerized applications in a cluster. AKS fulfills many different use cases, for example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you have an existing application, think n-tier applications, you can containerize the components and “lift and shift” your application to run in Kubernetes.&lt;/li&gt;
&lt;li&gt;You can deploy microservices on AKS to add horizontal scaling, load balancing, secrets management, and self-healing.&lt;/li&gt;
&lt;li&gt;Data scientists are training machine learning models on AKS using TensorFlow and Kubeflow.&lt;/li&gt;
&lt;li&gt;You can even use AKS as part of a build pipeline by pairing with a CI, such as Jenkins, to build containers for your application.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;AKS supports many use cases by providing provisioning, scaling, and resource upgrades without requiring expertise in container orchestration. With AKS, the Kubernetes master nodes are managed by Azure, and you are only charged for the worker nodes in your cluster.&lt;/p&gt;

&lt;p&gt;We’ll do two separate deep dives into deploying AKS clusters and deploying applications in AKS in this series.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#deploy-aks"&gt;
  &lt;/a&gt;
  Deploy AKS
&lt;/h3&gt;

&lt;p&gt;Azure provides many ways to deploy an AKS cluster, including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/cli/azure/"&gt;Azure CLI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/azure/aks/kubernetes-walkthrough-portal"&gt;Azure portal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/overview"&gt;Azure Resource Manager templates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Azure/bicep"&gt;Bicep&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.pulumi.com/docs/tutorials/azure/azure-cs-aks/"&gt;Infrastructure as Code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When you deploy an AKS Cluster, the worker nodes and Kubernetes master are configured with a basic configuration. You can additionally configure networking, storage, monitoring, and policies. We’ll cover configuring AKS in this series.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#deploy-applications"&gt;
  &lt;/a&gt;
  Deploy Applications
&lt;/h3&gt;

&lt;p&gt;Deploying applications on AKS is equally flexible, and you can deploy using:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#-strong-app-management-strong-"&gt;kubectl&lt;/a&gt; and YAML manifests&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.microsoft.com/en-us/azure/aks/kubernetes-helm"&gt;Helm&lt;/a&gt;, an open-source Kubernetes packaging tool&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/apps/cd/deploy-aks?view=azure-devops&amp;amp;tabs=java"&gt;Azure Pipelines Infrastructure as Code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We’ll examine these options and do a deep dive on application deployment in a follow-up article.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#devops-integration"&gt;
  &lt;/a&gt;
  DevOps integration
&lt;/h2&gt;

&lt;p&gt;Before Continuous integration (CI) and Continuous Deployment (CD) became prevalent, applications were manually built, compiled, and maintained in a large codebase. CI/CD automation lets you build quickly, test, and deploy services. Both application fixes and new features are shipped quickly to your customers, and you can rapidly respond to changing customer demands. For example, if demand increases, you can quickly add resources to your application or add a serverless function that increases and decreases resources as needed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yeUJ2kVN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9kpmputo046zm4ubf91h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yeUJ2kVN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9kpmputo046zm4ubf91h.png" alt="DevOps Architecture"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you’re deploying applications on Azure Functions, virtual machines, AKS, or provisioning infrastructure, the build process should be automated. Azure offers a range of services such as Azure Container Registry, AKS, and Azure Cosmos DB that can integrate with popular CI/CD pipelines like Azure DevOps, Jenkins, Github, and TeamCity.&lt;/p&gt;

&lt;p&gt;If you’re interested in using Azure DevOps to automate infrastructure and application delivery, stay tuned!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-get-started"&gt;
  &lt;/a&gt;
  Let’s Get Started!
&lt;/h2&gt;

&lt;p&gt;So here are the top 5 things essential to know as an Azure developer:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;configuring and deploying virtual machines&lt;/li&gt;
&lt;li&gt;developing and deploying Azure Functions&lt;/li&gt;
&lt;li&gt;deploying static websites on Azure&lt;/li&gt;
&lt;li&gt;configuring Azure Kubernetes Service and deploying containerized applications&lt;/li&gt;
&lt;li&gt;using Azure DevOps to automate the building and deployment of infrastructure and applications&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;First up and next in this series of articles is deploying Azure virtual machines with an application.&lt;/p&gt;

</description>
      <category>azure</category>
      <category>serverless</category>
      <category>devops</category>
      <category>kubernetes</category>
    </item>
  </channel>
</rss>
