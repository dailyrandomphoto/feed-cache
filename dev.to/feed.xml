<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network. Open source and radically transparent.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>A Practical Guide to SVG for Web to Print [+ 4 Free Tools]</title>
      <author>Tanya</author>
      <pubDate>Fri, 04 Dec 2020 16:03:25 +0000</pubDate>
      <link>https://dev.to/tetyanailchenko/a-practical-guide-to-svg-for-web-to-print-4-free-tools-158l</link>
      <guid>https://dev.to/tetyanailchenko/a-practical-guide-to-svg-for-web-to-print-4-free-tools-158l</guid>
      <description>&lt;p&gt;When it comes to creating or just adding graphical assets to the website, you can choose raster formats like popular PNG, JPG, GIF, or vector, like SVG, AI, or EPS. Nevertheless, using SVG format on the web is gaining popularity and becomes a powerful tool in the hands of designers, developers, and even printers. If you want to create logos, icons, animation, or use the image for print, SVG format is as applicable as ever. Let’s get deep into this, and we will explain what SVG is, how to use this, and why this is in demand.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-svg" class="anchor"&gt;
  &lt;/a&gt;
  What is SVG?
&lt;/h2&gt;

&lt;p&gt;SVG, or Scalable Vector Graphic, is a vector-based graphics in &lt;a href="https://www.w3schools.com/xml/default.asp"&gt;XML format&lt;/a&gt; which is used for the web and works with JavaScript, CSS, DOM, and other standards. Basically, an SVG image contains lines and curves, which can have any color value. However, some complicated SVG files can have embedded PNG, JPG images, or SVG image itself.&lt;/p&gt;

&lt;p&gt;Created with XML, vector images can be scaled to any size without losing resolution and still can look like high-quality images, even in huge sizes. Unlike PNG, the larger the image, the less the quality. Let’s take a look at the example of zoomed SVG and PNG images.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m4NxAgmU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.newtonideas.com/Xq1TSLfDbRMM0bgsqkcS.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m4NxAgmU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.newtonideas.com/Xq1TSLfDbRMM0bgsqkcS.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-benefits-of-using-svg" class="anchor"&gt;
  &lt;/a&gt;
  What benefits of using SVG?
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Scalable and adaptive to all screens&lt;/strong&gt;. All SVG assets are displayed in good quality on different screens like desktop, mobile, tablets, etc. Providing users high-grade images regardless of their devices is one of the main parts of an excellent user experience. &lt;/li&gt;
&lt;li&gt;You can use a &lt;strong&gt;text editor&lt;/strong&gt; to work with simple SVG graphics, for example, Notepad. This can significantly save your time on installing additional software and figuring out how to work with this. However, for the more complex graphic configuration, you may need to use some tools. I will provide a list of them at the end of the article.&lt;/li&gt;
&lt;li&gt;SVG is &lt;strong&gt;supported by all modern browsers&lt;/strong&gt; like Safari, Chrome, Firefox, etc.&lt;/li&gt;
&lt;li&gt;Compared to raster images, SVG has a &lt;strong&gt;smaller file size&lt;/strong&gt;. It is known that site speed plays a crucial role. Typically, the user leaves the page if it takes longer than 3 seconds to load. Therefore, having SVG assets instead of PNG can improve this indicator.&lt;/li&gt;
&lt;li&gt;SVG can be not only static. Because SVG format works with JavaScript, you can &lt;strong&gt;create animation&lt;/strong&gt;, which can significantly improve your website performance. &lt;/li&gt;
&lt;li&gt;Regardless of size, SVG images are &lt;strong&gt;high-quality&lt;/strong&gt;, which is well suited for printing.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#what-does-the-svg-file-consist-of" class="anchor"&gt;
  &lt;/a&gt;
  What does the SVG file consist of?
&lt;/h2&gt;

&lt;p&gt;SVG file consists of text - SVG markup. Every SVG file starts with a &lt;em&gt;&lt;/em&gt; tag, which contains the image’s width and height attributes. After this tag, you can add any shapes you need to create the desired graphic. For example, let’s start with a basic SVG image that contains only one line.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;

&amp;lt;svg height="210" width="500"&amp;gt;
  &amp;lt;line x1="30" y1="100" x2="400" y2="20" 
   style="stroke:rgb(115, 3, 252);stroke-width:4" /&amp;gt;
&amp;lt;/svg&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Result:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yK7tpRwB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.newtonideas.com/K6jxJZ0ZPgQbVrSktNmh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yK7tpRwB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.newtonideas.com/K6jxJZ0ZPgQbVrSktNmh.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;SVG uses a two-dimensional system of coordinates. This system starts from the top left corner (0,0). As you can see, the  contains the start point - &lt;em&gt;x1,y1&lt;/em&gt;, the endpoint - &lt;em&gt;x2,y2&lt;/em&gt;, style attribute defining color in RGB, and the line width. You may have already noticed that this code contains some HTML code. This means that every SVG graphics can be embedded into an HTML page directly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#shapes" class="anchor"&gt;
  &lt;/a&gt;
  Shapes
&lt;/h2&gt;

&lt;p&gt;The line is just one of the basic predefined shapes which you can use for graphic creation. &lt;br&gt;
You can also draw other shapes like &lt;em&gt;circle, rectangle, ellipse, polyline, and polygon&lt;/em&gt; using respective XML tags.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  &amp;lt;circle cx="190" cy="120" r="100" 
          stroke="black" stroke-width="1" 
          fill="white" /&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Result:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XV3Fzz9E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.newtonideas.com/nAyXxHHotRCAtetMGh27.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XV3Fzz9E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.newtonideas.com/nAyXxHHotRCAtetMGh27.png" alt=""&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  &amp;lt;polygon points="230,20 270,200 130,240" 
           style="fill:white;stroke:black; 
           stroke-width:1" /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Result:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_ZXWY38h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.newtonideas.com/7gcDpQadQh9H6RHh0oxF.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_ZXWY38h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.newtonideas.com/7gcDpQadQh9H6RHh0oxF.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#more-complex-shapes" class="anchor"&gt;
  &lt;/a&gt;
  More complex shapes
&lt;/h2&gt;

&lt;p&gt;Having basic shapes allows you to create plain assets. However, what if you want to create a more complicated design with unusual shapes? Here is why the &lt;em&gt;&lt;/em&gt; was created for. This attribute allows you to create curves, open and clothed paths and is one of the most adaptable SVG elements. If you want to use &lt;em&gt;&lt;/em&gt;, we recommend using professional tools for SVG creation instead of plain text editors. &lt;/p&gt;

&lt;p&gt;The idea of &lt;em&gt;&lt;/em&gt; is that all lines or shapes are built sequentially, from one point to another point. The tag &lt;em&gt;&lt;/em&gt; has a main &lt;em&gt;attribute d&lt;/em&gt;, which consists of commands that can create graphics.&lt;/p&gt;

&lt;p&gt;Let’s take a look at the rectangle created using a path.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;svg&amp;gt;
    &amp;lt;path d="M0,0 L300,0 L300,100 L0,100 Z" 
    style="fill:rgb(200,50,170)"/&amp;gt;
&amp;lt;/svg&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;em&gt;M&lt;/em&gt; set coordinates of the first point. In our case, this point starts from the top left corner. &lt;em&gt;L&lt;/em&gt; means draw the line from the current point to the specified one. &lt;em&gt;Z&lt;/em&gt; is used to complete the path and closes it. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Result:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YESkhZuW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.newtonideas.com/nJf1r0wPlPDMIwOJ3dRe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YESkhZuW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.newtonideas.com/nJf1r0wPlPDMIwOJ3dRe.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The same result you will get if you use the basic shape.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;svg&amp;gt;
  &amp;lt;rect width="300" height="100" 
  style="fill:rgb(200,50,170)" /&amp;gt;
&amp;lt;/svg&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The &lt;em&gt;&lt;/em&gt; has many other commands that allow you to draw arcs, curves, horizontal or vertical connections with two points. You can read more about all path commands &lt;a href="https://www.w3schools.com/graphics/svg_path.asp"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#can-i-add-text-to-svg" class="anchor"&gt;
  &lt;/a&gt;
  Can I add text to SVG?
&lt;/h2&gt;

&lt;p&gt;Yes, text can be added to SVG using the &lt;em&gt;&lt;/em&gt; tag. As for other elements, you should define coordinates for your text. Text color, size, and font values are also feasible. Please consider that font size should not be bigger than y coordinates because your text will look not entirely. You can also apply a style to your text using CSS properties. For example, &lt;em&gt;font-style, font-weight, text-transform&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;Text in SVG is indexed flawlessly, so it is an excellent opportunity to keep improving your SEO. Regardless this is a standalone file or file embedded in HTML, search engines can recognize the text.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;svg &amp;gt;
  &amp;lt;text x="80" y="60" font-size="40" 
   font-weight="bold" fill="green"&amp;gt; 
   Text here!
  &amp;lt;/text&amp;gt;
&amp;lt;/svg&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Result:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OGUYI7oh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.newtonideas.com/gC8c0R3LqtZJt8ysNEDY.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OGUYI7oh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.newtonideas.com/gC8c0R3LqtZJt8ysNEDY.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However, adding text through &lt;em&gt;&lt;/em&gt; tag can cause some problems with the font-family attribute. For example, when you specify a &lt;em&gt;font-family&lt;/em&gt; that is not available on the user’s web browser or is not installed on the desktop, tablet, etc., then this font will not be displayed correctly, or a font similar to it will be used instead. This may be risky, especially for those who sell personalized products for their decoration industries struggling to satisfy customers’ needs. In Liveart, we handle this by using vectorized text. We convert TTF, WOFF, OTF, or PFB files to JS file, where every symbol has its own &lt;em&gt;&lt;/em&gt;. This approach allows displaying text correctly without the additional need to install the font. &lt;/p&gt;

&lt;p&gt;Using vectorized text is also a good approach when you need to convert your SVG file to PNG, JPG, or PDF and use it for printing, as text elements will be displayed precisely with the font preserving. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#strokes-filters-effect-and-shadows" class="anchor"&gt;
  &lt;/a&gt;
  Strokes, filters, effect, and shadows
&lt;/h2&gt;

&lt;p&gt;To have your design more sophisticated, you can apply some filters, effects, and strokes. Strokes are used to define the color of a line or text. Besides color, you can set line thickness using the &lt;em&gt;stroke-width&lt;/em&gt; property or even create dashed lines with the &lt;em&gt;stroke-dasharray&lt;/em&gt; property*.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;svg&amp;gt;
    &amp;lt;path stroke="black" stroke-width="6" 
     stroke-dasharray="10,10" 
     d="M10 20 L230 20" /&amp;gt;
&amp;lt;/svg&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Result:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1fxkf35x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.newtonideas.com/stroke_svg.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1fxkf35x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.newtonideas.com/stroke_svg.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When working with strokes outline, you may face some issues with the stroke-width attribute. By default, width changes are applied to the outside and inside and cause changes in text thickness itself. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Old version of LiveArt HTML5 Designer (v0.10).&lt;/em&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h4L7VEIp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://img.newtonideas.com/LiveArt%2520HTML5%2520%281%29.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h4L7VEIp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://img.newtonideas.com/LiveArt%2520HTML5%2520%281%29.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Strokes in web to print requires preserving the initial appearance of the text - size, thickness, etc. In the last version of LiveArt Designer, this issue was solved by changing only the outside part of the stroke while saving the original text size. Having a properly configured stroke is an essential part of output generation and its further usage. Here you can check how strokes should work:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Actual version of LiveArt HTML5 Designer (v1.0).&lt;/em&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2VOadYY0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://img.newtonideas.com/Custom%2520Web2Print%2520Editor%2520Live%2520Demo%2520%282%29.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2VOadYY0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://img.newtonideas.com/Custom%2520Web2Print%2520Editor%2520Live%2520Demo%2520%282%29.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are also a lot of filter elements that you can apply to your graphics. For example, &lt;em&gt;&lt;/em&gt; for blur effect, &lt;em&gt;&lt;/em&gt; for shadow effect, or &lt;em&gt;&lt;/em&gt; for blending two images, and many others.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;svg&amp;gt;
 &amp;lt;defs&amp;gt;
  &amp;lt;filter id="f0" x="0" y="0"&amp;gt;
    &amp;lt;feGaussianBlur in="SourceGraphic" stdDeviation="15" /&amp;gt;
  &amp;lt;/filter&amp;gt;
 &amp;lt;/defs&amp;gt;
 &amp;lt;rect width="200" height="200" stroke="black" stroke-width="5" 
  fill="red" filter="url(#f0)" /&amp;gt;
&amp;lt;/svg&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Result:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---SRfhPYm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.newtonideas.com/filter_svg.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---SRfhPYm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.newtonideas.com/filter_svg.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To identify the unique filter name, we should use the &lt;em&gt;id&lt;/em&gt; attribute. You can also control the blur size with the &lt;em&gt;stdDeviation&lt;/em&gt; attribute.&lt;/p&gt;

&lt;p&gt;Unfortunately, filters are not supported by all browsers. Google Chrome supports filters only from version 8.0, Safari - from version 6.0, Opera - from version 9.6, Internet Explorer from version 10.0, and Firefox from version 3.0. To provide your users with a good experience, make sure that a default element (without filters) looks good.&lt;/p&gt;

&lt;p&gt;When talking about the web to print, it is quite risky to use filters for production output as we are not entirely sure that the customer’s browser will support this. However, LiveArt uses filters to visualize products and create a good impression during customization. We show some parts with thread effect for products like socks to get the product preview as real as possible. One more case where effects can be applied is custom jewelry products or custom tags. For such products, we suggest applying an effect to the text to make it more visible on the reference that will be used for the stamping.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z8BE5IUL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.newtonideas.com/tag.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z8BE5IUL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.newtonideas.com/tag.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can achieve a stamped effect not only with SVG filters but also using &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/box-shadow"&gt;CSS based on text-shadow property&lt;/a&gt;, yet the last one has no SVG filter flexibility and features.&lt;/p&gt;

&lt;p&gt;More about SVG in LiveArt&lt;/p&gt;

&lt;p&gt;LiveArt relies on the SVG format and considers it as one of the most convenient and flexible in usage. Developing robust solutions for more than ten years, we understood that vector format is useful for our customers. Therefore, we have implemented the support of multicolored SVG graphics in our &lt;a href="https://www.liveartdesigner.com/live-demo/html5-product-designer"&gt;online design software&lt;/a&gt;, which you can use from our free artwork gallery or upload your own. SVG format allows you to resize the image to any size without getting a “Low-resolution warning.” Moreover, SVG is easy to output and ready to use without any extra conversions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S-Xl3Clo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.newtonideas.com/artwork_svg.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S-Xl3Clo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.newtonideas.com/artwork_svg.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As well as graphics preparation, LiveArt also uses SVG format for product preparations, especially for multicolored uniforms. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jvEqTvK_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.newtonideas.com/product_svg.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jvEqTvK_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.newtonideas.com/product_svg.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These graphics need preliminary preparation. If you are interested in preparing vector graphics, you can check our &lt;a href="https://docs.liveartdesigner.com/graphics-preparation.html"&gt;documentation&lt;/a&gt; or see our &lt;a href="https://www.youtube.com/watch?v=jnIY3N5_-yg&amp;amp;ab_channel=LiveArtDesigner"&gt;YouTube video&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#free-tools" class="anchor"&gt;
  &lt;/a&gt;
  Free tools
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#inkscape" class="anchor"&gt;
  &lt;/a&gt;
  Inkscape
&lt;/h3&gt;

&lt;p&gt;Inkscape is an open-source tool for creating vector-based graphics. This tool allows rendering primitive shapes, changing colors, applying filters, adding text, working with paths, and object transformation. Developed for working with SVG files, this tool became one of the most popular free tools among designers and developers. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#snapsvg" class="anchor"&gt;
  &lt;/a&gt;
  Snap.svg
&lt;/h3&gt;

&lt;p&gt;Snap.svg is one of the most popular JavaScript libraries that was developed for working with SVG. It is entirely open-source, free, and not inferior in functionality to such libraries as SVG.js, Two.js, and D3.js. This library can work with existing SVG files and as well as with Snap generated. This library has a powerful API that can be useful for developers. Besides static SVG files, you can create animation and provide more engagement to your website.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#method-draw" class="anchor"&gt;
  &lt;/a&gt;
  Method Draw
&lt;/h3&gt;

&lt;p&gt;Method Draw is a straightforward online SVG editor. You do not need to install it on your desktop because this tool is available online, and you even do not need to sign up. The interface is straightforward and easy to use but provides a robust set of tools for graphic creation. You can export graphics as SVG and PNG. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#svgomg" class="anchor"&gt;
  &lt;/a&gt;
  SVGOMG
&lt;/h3&gt;

&lt;p&gt;SVGOMG is a free UI wrapper over SVGO that was created by Jake Archibald for optimizing and simplifying SVG images. This tool has a lot of features like removing metadata, raster images, viewbox, hidden element, empty text, and even prettify your markup. You can preview all changes by simply clicking on the respective buttons. This software is useful for developers and can help with SVG preparation for further work.&lt;/p&gt;

&lt;p&gt;Thanks for reading! Welcome to share your experience working with SVG format. Any ideas where you could use it as a developer?&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>html</category>
      <category>css</category>
      <category>design</category>
    </item>
    <item>
      <title>JWT Authentication Best Practices</title>
      <author>Fernando Doglio</author>
      <pubDate>Fri, 04 Dec 2020 10:12:47 +0000</pubDate>
      <link>https://dev.to/deleteman123/jwt-authentication-best-practices-3lf9</link>
      <guid>https://dev.to/deleteman123/jwt-authentication-best-practices-3lf9</guid>
      <description>&lt;p&gt;Microservices are a great tool when it comes to designing scalable and extensible architectures. They can be used to encapsulate different behaviors or responsibilities in a way that not a lot of other architecture paradigms can represent. &lt;br&gt;
And if you pair them with a REST-based interface, then you’re not only writing and creating a platform that can grow and scale automatically (given the right infrastructure of course), but you’re also creating a standard and easy-to-use product. &lt;/p&gt;

&lt;p&gt;If you haven’t noticed, I’m a fan of microservices and they’re usually the pattern I go with when designing new architectures, working with Big Data on a day-to-day basis, I tend to require flexibility and scalability out of the box, and they provide that to me.&lt;/p&gt;

&lt;p&gt;The thing not everyone considers when writing microservices though is that they require a way for you to authenticate against them. Both if you’re using a front-end client or just communicating with them through another microservice. And although there are several options out there to solve authentication, I want to cover one of the easiest, yet most powerful, alternative: JSON Web Tokens.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#jwtbased-authentication" class="anchor"&gt;
  &lt;/a&gt;
  JWT-based Authentication
&lt;/h1&gt;

&lt;p&gt;The basic thing you need to understand JWT-based authentication is that you’re dealing with an encrypted JSON which we’ll call “token”. This token has all the information required for the back-end system to understand who you are and if, indeed, you are who you say you are.&lt;/p&gt;

&lt;p&gt;The following diagram shows the steps involved in this process:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Lmyom2tH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_1048F41B3AC814B927887FF3C86602B940107555916A37D85A0BACB9135A34EA_1606545347515_jwt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Lmyom2tH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_1048F41B3AC814B927887FF3C86602B940107555916A37D85A0BACB9135A34EA_1606545347515_jwt.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, leaving out the user-based steps, you only need 4 steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First, the client application (here I used a front-end app, but you can do the same with another service) will send a sign-in request. This means you’re sending the log-in credentials, just this once.&lt;/li&gt;
&lt;li&gt;Second, the API will validate these credentials and if they’re correct, it’ll generate the token. This is the most important step because the generated token as I mentioned is nothing more than an encrypted JSON object. This allows you to add as much data into it as you want, and you will want to add data because JWT allows you to perform stateless authorization, which I’ll cover in a second.&lt;/li&gt;
&lt;li&gt;Third, with the JWT generated, all you have to do is return it back to the client application. &lt;/li&gt;
&lt;li&gt;Finally, the client app will later send this token on every subsequent request. This token means you’ve been authenticated and can access the secret section of the application.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That is it, the flow is very straightforward and you don’t need to redirect the user anywhere (I’m looking at you OAuth!). &lt;br&gt;
But let’s get into it with more details, let me break up each step for you to fully understand what is happening behind code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-backend-side-of-things" class="anchor"&gt;
  &lt;/a&gt;
  The back-end side of things
&lt;/h2&gt;

&lt;p&gt;For the back-end, or the microservice if you will, there are two major steps that you need to understand: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Generating the JSON Web Token. This is key, as I mentioned before because the information you add will be used later (kinda like saying “everything you say will be used against you in a court of law”).&lt;/li&gt;
&lt;li&gt;Validating the token for received requests. I left this part out of the authentication process because this is actually part of the authorization flow. Very similar, and easy to implement, but worth noting as well.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So, let’s get into it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Generating the JWT&lt;/strong&gt;&lt;br&gt;
To generate the token on your back-end microservice, you’ll normally use an existing server-side library. There is no need for you to understand how the token is generated, you just need to understand what goes into it. &lt;/p&gt;

&lt;p&gt;So, what actually goes into the token? You can literally use a JSON object such as:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "foo": "bar"
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;And that will be used and sent back to the front-end client, which may be for your business logic it makes sense, maybe your front-end client is waiting for the “foo” key. However, other than the custom attributes you can add, there are also pre-defined options that have a functional meaning for the specific algorithm that the library is using.&lt;/p&gt;

&lt;p&gt;Given I’ll be using the &lt;a href="https://www.npmjs.com/package/jsonwebtoken"&gt;jsonwebtoken&lt;/a&gt; library for Node.js, the main option you want to take into account is  &lt;code&gt;expiresIn&lt;/code&gt;. This is critical to generating a proper JWT because you want the token to have an expiration date. Otherwise, it will last forever, potentially leaving an open vulnerability for someone who can capture it and later use it to impersonate your identity. &lt;br&gt;
For this particular library, this value is expressed in seconds if you provide a number (or you can provide a string using a time unit for something like &lt;code&gt;"&lt;/code&gt;&lt;code&gt;2 days&lt;/code&gt;&lt;code&gt;"&lt;/code&gt; to signify 2 days of validity). &lt;/p&gt;

&lt;p&gt;And in turn, the library will add another one called &lt;code&gt;iat&lt;/code&gt; which stands for &lt;strong&gt;Issued At&lt;/strong&gt; and is a date reference used for expiration checks (i.e that’s the date it’ll take into account when checking if your token is still valid).&lt;/p&gt;

&lt;p&gt;And how do you add all this information into the token then? By signing it:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const jwt = require('jsonwebtoken');

const token = jwt.sign({
    data: 'foobar'
  }, 'your-secret-key-here', { expiresIn: 60 * 60 }); //1 hour

console.log(token)
//Outputs: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjoiZm9vYmFyIiwiaWF0IjoxNjA2NTUzNjc4LCJleHAiOjE2MDY1NTcyNzh9.3oV51hA7SKCqDhG7tbu2XQq7wW2LJE5XtK0HhVwEs0A
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Using the &lt;code&gt;sign&lt;/code&gt; method you can create the token, notice that your main object (the one containing the actual information you want to transfer to the front-end) is the first parameter, the second one is the secret key or phrase (you can either pass a secret phrase of your choosing, something that you’ll have to share with your clients) or the content of a PEM key. Either way, the second parameter is used for the encryption algorithm to encode and create the token. Finally, the third attribute contains the configuration options (in our case only the expiration time).&lt;/p&gt;

&lt;p&gt;This token (notice the output on the code above) is then returned as part of the authentication response, for the client to use. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Storing the token&lt;/strong&gt;&lt;br&gt;
As an optional step, you can also store the token in your database  to associate it with your user. Normally, you wouldn’t need to do this if all the user information can be stored in your token. &lt;br&gt;
However, if there is more information to manage that you can comfortably store in your token, then keeping an association with your user’s profile inside the database might be a good idea.&lt;br&gt;
In fact, given that looking up this token would be something you’d do on every request, a good alternative is to keep both, the token and the relevant information about your user inside some in-memory storage,  such as &lt;a href="https://redis.io/"&gt;Redis&lt;/a&gt;. &lt;br&gt;
The new flow, with storage incorporated and verification support is the following one:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v8web507--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_1048F41B3AC814B927887FF3C86602B940107555916A37D85A0BACB9135A34EA_1606580178077_jwt3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v8web507--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_1048F41B3AC814B927887FF3C86602B940107555916A37D85A0BACB9135A34EA_1606580178077_jwt3.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The taxing interaction here is not the first one (#4) with Redis, but rather the second one (#9) because this one would happen on every request received. We’ll see more about that in a second.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Checking the Token&lt;/strong&gt;&lt;br&gt;
Just because we’re getting a token as part of the request, it doesn’t mean such a request is safe, it could very well be a fake one or have an invalid or even expired token. This is why on every request of a secured resource (i.e an endpoint that requires an authenticated user to be accessed, or a section of your website that lives inside the member’s zone) you need to validate the token received.&lt;br&gt;
If you’ve skipped the storage step, then this is a relatively cheap task. All you have to do is use the same server-side framework to validate it:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const decodedToken = jwt.verify(token, 'your-secret-key-here')
console.log(decodedToken)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Notice how I’m using the same “secret phrase”, that’s definitely important because you need to keep using the same one throughout the same project otherwise validation will not work.&lt;br&gt;
An expired token would throw an exception such as:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gM7st74s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_1048F41B3AC814B927887FF3C86602B940107555916A37D85A0BACB9135A34EA_1606627819976_Captura%2Bde%2Bpantalla%2B2020-11-29%2Ba%2Blas%2B6.30.08.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gM7st74s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_1048F41B3AC814B927887FF3C86602B940107555916A37D85A0BACB9135A34EA_1606627819976_Captura%2Bde%2Bpantalla%2B2020-11-29%2Ba%2Blas%2B6.30.08.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And a valid one would just return a valid JSON that you can decode and use however you need.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{ data: 'foobar', iat: 1606581962, exp: 1606581963 }
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Notice the &lt;code&gt;iat&lt;/code&gt; and &lt;code&gt;exp&lt;/code&gt; parameters added by the library.&lt;br&gt;
An exception in this context would mean you need to invalidate the client’s request and send an invalid response. Normally you would send back a 403 error code since the request is (and the client) is no longer authenticated.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#spa-authentication" class="anchor"&gt;
  &lt;/a&gt;
  SPA authentication
&lt;/h2&gt;

&lt;p&gt;Now that we understand what it means for an API (or a microservice if you will) to be protected by a JWT authentication process, I wanted to cover the same process from the POV of a SPA application acting as the client app.&lt;br&gt;
In this case, as I mentioned, you’ll be contacting a service initially by sending your credentials and receiving a token which you’ll have to use on every following request.&lt;br&gt;
The first thing we need to understand though is that session-based authentication is not the same as token-based auth. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Session-based vs Token-based authentication&lt;/strong&gt;&lt;br&gt;
At a first glance, both of these strategies might seem similar, which is why I wanted to cover the difference. &lt;br&gt;
Essentially both methods work the same way:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You authenticate against a service.&lt;/li&gt;
&lt;li&gt;That service validates your credentials and sends back a token&lt;/li&gt;
&lt;li&gt;On every following request, you send that token to authenticate yourself with the service.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So as you can see, the process and the flow of data seem to be the same, but there are some major differences hidden.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For session-based tokens, the server returns a session key, which references the session data (all data relevant to you as a logged-in user). This data, however, is kept in the memory of the server. This essentially breaks one of the benefits of RESTful APIS: stateless services can scale effortlessly because there is no session information stored in memory. You see, the moment you log-in with a server that keeps session information in memory, every subsequent request sent by you needs to go to that server (because memory can’t be shared between different servers, or at least not easily). If you’re trying to scale up your architecture to handle more traffic, duplicating services to increase your capacity will not be as straightforward as it would be if you had stateless services.&lt;/li&gt;
&lt;li&gt;Session-based auth stores the session key in the browser’s cookies. They send the information as a cookie, and because of that, browsers have a problem when having microservices being served from different domains. This is not a problem for token-based auth, since the token is sent as a request header.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Essentially, these two big differences make token-based authentication more viable and my preferred method to implement whenever I have to do one.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dealing with XSS and CSRF with JWT&lt;/strong&gt;&lt;br&gt;
With that being said, there are other actual security threats that you need to take into consideration when implementing your authentication strategy.&lt;br&gt;
This is extremely relevant because you need to be careful about how you handle the JWT on your code. Both of these attacks can potentially take advantage of your vulnerabilities and use your token for malicious purposes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;XSS or Cross-Site Scripting&lt;/strong&gt; implies an attacker is somehow injecting malicious code into the front-end, affecting all users of the application. This can be achieved when the platform is using user input  without validating it or even encoding it. Imaging listing all logged user names on your homepage, if you’re not encoding and checking the input text for each username, an attacker could’ve input a JavaScript script instead of an actual username, causing your homepage to execute the script on every user’s laptop. This is definitely a problematic attack vector if you’re manually handling the token with your JavaScript code. &lt;br&gt;
This is why you don’t use Local Storage to store the JWT on the front-end. LS is publicly accessible to any JS code stored in the same domain, so if an attacker is capable of injecting code as I mentioned, everyone’s tokens are accessible. &lt;strong&gt;You do not want to use Local Storage to keep the token&lt;/strong&gt;. Remember that.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CSRF or Cross-Site Request Forgery&lt;/strong&gt; happens when an attacker takes advantage of the fact that cookies can be sent with every request (even on cross-domain requests). If somehow you as a user are tricked into clicking a malicious link, you can end up on a site sending a request to maybe change your password. Because in the past you’ve logged in against your secure site before and your browser has the cookie in storage still, the request will succeed. &lt;strong&gt;So do not store the token on your cookies either!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Wait, so what’s left? No local storage, no cookie, maybe in-memory? That’s definitely an option unless of course, you’re not into your users losing their session the moment they refresh the browser.&lt;br&gt;
Instead of going crazy with the fact that we’re running out of secure options, let’s go back to cookies for a minute. &lt;br&gt;
If you properly create the cookies, they can be safe enough for you to trust, that and with a few extra checks, you can provide a relatively secure process, let me explain:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://owasp.org/www-community/HttpOnly"&gt;&lt;strong&gt;httpOnly&lt;/strong&gt;&lt;/a&gt;: This option makes sure the cookie is not accessible through JavaScript. This is definitely a must-do when creating your cookies, you don’t need (nor want) them to be accessed via user code. &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://owasp.org/www-community/SameSite"&gt;&lt;strong&gt;SameSite&lt;/strong&gt;&lt;/a&gt; policy: As I mentioned before, cookies are sent on every request, unless of course, the browser is new (i.e you’re not using Internet Explorer 8 or previous) and that the SameSite policy of your cookie is empty. If you need your tokens to be sent to different domains, then a &lt;em&gt;Lax&lt;/em&gt; value would do the trick because it would allow you to make GET requests to other domains, POST request would not be possible, however. This is great because you’d have the option to do redirections, but a malicious code would not be able to send a POST request behind your back. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Both these options are great, but they’re not perfect. If you´re really looking to find a way to have your application be 100% secured, then you’ll probably have to make some compromises, such as disabling cross-domain requests, this is all part of the security analysis you’ll have to perform based on your actual security requirements.&lt;/p&gt;

&lt;p&gt;With that being said, and although all these security considerations are important, you’ll normally be using a library that already takes care of all of them for you. For example, if you’re using axios for your HTTP requests in your Vue projects, you can simply set one line of configuration in your &lt;code&gt;main.js&lt;/code&gt; file:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;axios.defaults.withCredentials = true
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;With that line, you won’t have to worry about handling a token or even a cookie during the entire process. As long as the back-end API creates the cookie correctly, you’ll be sending it on every subsequent request. You can access the full code of a sample project that interacts with a JWT-authenticated API &lt;a href="https://github.com/deleteman/sample-jwt-auth-vue"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Do you need HTTPS with JWT?&lt;/strong&gt;&lt;br&gt;
This is a very common question when it comes to client-server communication, and it’s especially common when setting up a JWT-based authentication because people tend to think that if you have your token, then you’d good to go.&lt;br&gt;
Truth is, that as I’ve mentioned above, being 100% secured is not only hard but nearly impossible. If someone skilled enough wants to hack you, they’ll find a way to do it. This is about discouraging 90% of potential attackers by taking care of the basic steps.&lt;br&gt;
So, is HTTPS required? Well, let’s consider what HTTPS actually means:&lt;/p&gt;

&lt;p&gt;An HTTPS connection between a client and a server-side service is an encrypted channel of communication between the two ends. There is no way (almost) for an attacker to read that stream from outside and figure out what’s being sent. So unlike normal HTTP which is not encrypted, HTTPS makes sure only a client that you correctly identified as valid is capable of talking to your services.&lt;/p&gt;

&lt;p&gt;What you’d normally want to do is have your public sections inside normal HTTP and anything that needs to be secured (i.e that needs you to be logged in to access it) will be behind HTTPS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;When not to use JWT&lt;/strong&gt;&lt;br&gt;
I always like to say, that there is no silver bullet when it comes to technology, for every reason pushing you towards a particular choice, there are two more pushing you in the opposite direction. &lt;br&gt;
And the same stays true for JWT-based authentication, many developers claim there are better and more secure options out there. The key there is correctly defining what “better” means to you and then going with that.&lt;br&gt;
After all, your context will be the deciding factor used to make all decisions. &lt;br&gt;
That being said, a very good reason why not to use JWT-based authentication would be when you’re developing a stateful back-end. After all, JWT shines when it is used to secure a stateless API, given the stateless nature of the data flow.&lt;br&gt;
Granted, it can be used when state is required as well, but then the line gets very blurry between JWT and session tokens. In these cases, it might be a better idea to go with other alternatives, such as server-side sessions, that were originally designed for it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Best JWT libraries&lt;/strong&gt;&lt;br&gt;
The last item I wanted to cover were libraries. If you’re working on the back-end side, you don’t need anything specific that’s compatible with Vue, but for the examples in this article, I used Node.js’ &lt;a href="https://www.npmjs.com/package/jsonwebtoken"&gt;jsonwebtoken&lt;/a&gt; server-side library.&lt;/p&gt;

&lt;p&gt;As for the front-end, as I mentioned before, axios is perfectly capable of already providing all the user-level support required to interact with a JWT-authenticated API. However, if you’re actually looking to perform more advanced tasks, such as manually decoding the token to use its internal information, you have some options, depending on your front-end framework of choice:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;For VueJS users&lt;/strong&gt;: you can use something like &lt;a href="https://www.npmjs.com/package/vuejs-jwt"&gt;vuejs-jwt&lt;/a&gt; which is a lightweight library that provides you with methods such as &lt;code&gt;decode&lt;/code&gt; or &lt;code&gt;hasToken&lt;/code&gt; that help you deal with the token directly.  If on the other hand, you’re looking for a more robust solution, you can also take a look at &lt;a href="https://websanova.com/docs/vue-auth/home"&gt;vue-auth&lt;/a&gt;, which provides you with support for several authentication algorithms, including, of course, JWT.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;For Angular  users&lt;/strong&gt;: you have Auth0’s library: &lt;a href="https://www.npmjs.com/package/@auth0/angular-jwt"&gt;angular-jwt&lt;/a&gt;. It provides you a simple interface to interact withe the token &lt;a href="https://www.npmjs.com/package/@auth0/angular-jwt"&gt;&lt;/a&gt;(i.e get its data, check for expiration dates, and so on).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;React users&lt;/strong&gt;: finally if you’re “one of those” (actually, just kidding, I’m a big fan of React), you can use &lt;a href="https://www.npmjs.com/package/react-jwt"&gt;react-jwt&lt;/a&gt; which provides a &lt;code&gt;useJwt&lt;/code&gt; hook as well, which allows you to react to changes on the validity of a token (you can check this directly on the front-end and immediately react to the expiration event).&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#final-thoughts" class="anchor"&gt;
  &lt;/a&gt;
  Final thoughts
&lt;/h1&gt;

&lt;p&gt;When it comes to securing a RESTful API (or any stateless back-end service really), the JWT-based approach is definitely an interesting option. By default, it might not be the most secure one, but with a little bit of work and configuration, most of the common attack vectors can be tackled.&lt;br&gt;
It provides a great level of control over what you do with, and how you generate, your tokens and it makes scaling your back-end infrastructure trivially simple.&lt;/p&gt;

&lt;p&gt;In the end, it’s up to you to decide, based on your context and your background. To me, JWT authentication has always been a great option and I try to advocate for it as much as I can, given I’m also a big fan of RESTful microservices.&lt;/p&gt;

&lt;p&gt;How about you? Have you used JSON Web Tokens in the past? Or do you rather using a different approach? Leave a comment down below and share your experience.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>jwt</category>
      <category>authentication</category>
    </item>
    <item>
      <title>Ways to Use Up Your Professional Development Budget</title>
      <author>Megan Sullivan</author>
      <pubDate>Fri, 04 Dec 2020 07:52:01 +0000</pubDate>
      <link>https://dev.to/meganesulli/ways-to-use-up-your-professional-development-budget-8no</link>
      <guid>https://dev.to/meganesulli/ways-to-use-up-your-professional-development-budget-8no</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;It's almost the end of 2020 (yay!), which means it's time to make sure you've used up all of your professional development (PD) budget for the year!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Out of ideas?&lt;/strong&gt; Here's a list of some resources I've either used or added to my own wishlist. It's mostly geared toward my own interests: web development, accessibility, and education.&lt;/p&gt;

&lt;p&gt;Leave a comment with links to where you like to splurge on learning resources!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Full disclosure: I don't have partnerships with any of these products, I just genuinely think they're neat!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#workshops-and-courses" class="anchor"&gt;
  &lt;/a&gt;
  👩‍🏫 Workshops and Courses
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://smashingconf.com/online-workshops/"&gt;&lt;strong&gt;Smashing Magazine Online Workshops&lt;/strong&gt;&lt;/a&gt;: Live online workshops about frontend web development and UX.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://beinganantiracist.com/"&gt;&lt;strong&gt;Being Antiracist&lt;/strong&gt;&lt;/a&gt; by &lt;a href="https://twitter.com/KimCrayton1"&gt;Kim Crayton&lt;/a&gt;: A series of online workshops for white people who want to learn how to be antiracist and to minimize the harm they have on others. The series is broken into three parts: &lt;a href="https://vi.to/hubs/introduction-to-being-an-antiracist"&gt;Introduction to Being Antiracist&lt;/a&gt;, &lt;a href="https://vi.to/hubs/being-an-antiracist-at-home"&gt;Being Antiracist at Home&lt;/a&gt;, and &lt;a href="https://vi.to/hubs/being-antiracist-at-work"&gt;Being Antiracist at Work&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;University Extension courses.&lt;/strong&gt; Many universities will let you enroll in one-off courses without being a full-time student. For example, &lt;a href="https://extension.berkeley.edu/"&gt;UC Berkeley Extension&lt;/a&gt; offers courses in web development, technical communication, and data science (among other things).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#books" class="anchor"&gt;
  &lt;/a&gt;
  📚 Books
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.smashingmagazine.com/printed-books/"&gt;&lt;strong&gt;Smashing Magazine Books&lt;/strong&gt;&lt;/a&gt;: Print or eBooks on a variety of frontend and UX topics. (I especially like &lt;a href="https://www.smashingmagazine.com/printed-books/inclusive-components/"&gt;Inclusive Components&lt;/a&gt; by &lt;a href="https://twitter.com/heydonworks"&gt;Heydon Pickering&lt;/a&gt;.)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://a11y-with-lindsey.ck.page/products/pre-order-the-bootcampers-guide-to-web"&gt;&lt;strong&gt;The Bootcamper's Guide to Web Accessibility&lt;/strong&gt;&lt;/a&gt; by &lt;a href="https://twitter.com/LittleKope/"&gt;Lindsey Kopacz&lt;/a&gt;: A thorough introduction to accessibility, intended for self-guided learners and bootcamp graduates. (But essential knowledge for web developers of all backgrounds!)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.stephaniemorillo.co/product-page/the-developer-s-guide-to-content-creation"&gt;&lt;strong&gt;The Developer's Guide to Content Creation&lt;/strong&gt;&lt;/a&gt; by &lt;a href="https://twitter.com/radiomorillo"&gt;Stephanie Morillo&lt;/a&gt;: This book guides you through the entire process of creating content, from coming up with ideas through writing and promoting your content. A must-read for anyone posting on this site!&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://mitpress.mit.edu/books/mismatch"&gt;&lt;strong&gt;Mismatch: How Inclusion Shapes Design&lt;/strong&gt;&lt;/a&gt; by &lt;a href="https://twitter.com/katholmes"&gt;Kat Holmes&lt;/a&gt;: This book explores a variety of case studies that showcase how design can lead to exclusion. It also proposes strategies for inclusive design.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://stackingthebricks.com/just-fucking-ship/"&gt;&lt;strong&gt;Just Fucking Ship&lt;/strong&gt;&lt;/a&gt; by &lt;a href="https://twitter.com/amyhoy"&gt;Amy Hoy&lt;/a&gt; with &lt;a href="https://twitter.com/alexhillman"&gt;Alex Hillman&lt;/a&gt;. A quick but game-changing read about how to actually finish your side projects.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.thecollectiveoakland.com/book/9780674729018"&gt;&lt;strong&gt;Make It Stick: The Science of Successful Learning&lt;/strong&gt;&lt;/a&gt; by Peter C. Brown, Henry L. Roediger III, and Mark A. McDaniel: This book explains how your brain works and what study habits will lead to successful knowledge retention.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://teachlikeachampion.com/books/practice-perfect/"&gt;&lt;strong&gt;Practice Perfect: 42 Rules for Getting Better at Getting Better&lt;/strong&gt;&lt;/a&gt; by Doug Lemov, Erica Woolway, and Katie Yezzi: A collection of tips for how to improve skills through intentional practice. A great read for educators and for folks who want to maximize their learning.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.hachettebookgroup.com/titles/ijeoma-oluo/so-you-want-to-talk-about-race/9781580056779/"&gt;&lt;strong&gt;So You Want to Talk About Race&lt;/strong&gt;&lt;/a&gt; by &lt;a href="https://twitter.com/IjeomaOluo"&gt;Ijeoma Oluo&lt;/a&gt;: This book helps readers navigate difficult conversations about race and racism.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.oreilly.com/library/view/learning-react-2nd/9781492051718/"&gt;&lt;strong&gt;Learning React, 2nd Edition&lt;/strong&gt;&lt;/a&gt; by &lt;a href="https://twitter.com/MoonTahoe"&gt;Alex Banks&lt;/a&gt; and &lt;a href="https://twitter.com/eveporcello"&gt;Eve Porcello&lt;/a&gt;: An introduction to functional JavaScript and React. The second edition has been updated to cover hooks!&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.oreilly.com/library/view/learning-graphql/9781492030706/"&gt;&lt;strong&gt;Learning GraphQL&lt;/strong&gt;&lt;/a&gt; by Eve Porcello and Alex Banks. An introduction to graph theory, GraphQL, and Apollo. Includes hands-on projects.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.thecollectiveoakland.com/book/9781484264171"&gt;&lt;strong&gt;Practical Machine Learning in JavaScript: Tensorflow.Js for Web Developers&lt;/strong&gt;&lt;/a&gt; by &lt;a href="https://twitter.com/devdevcharlie"&gt;Charlie Gerard&lt;/a&gt;: A hands-on introduction to machine learning for JavaScript developers.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#subscriptions" class="anchor"&gt;
  &lt;/a&gt;
  🔁 Subscriptions
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://frontendmasters.com/"&gt;&lt;strong&gt;Frontend Masters&lt;/strong&gt;&lt;/a&gt;: Full-length video courses about a wide variety of web development topics. Good if you're looking for in-depth instruction.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://egghead.io/"&gt;&lt;strong&gt;egghead.io&lt;/strong&gt;&lt;/a&gt;: Bite-sized videos with very practical steps. Good if you're looking for quick, example-driven explanations.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dequeuniversity.com/"&gt;&lt;strong&gt;Deque University&lt;/strong&gt;&lt;/a&gt;: A learning platform focused entirely on web accessibility and digital equality. They also have an entire course dedicated to preparing for the International Association of Accessibility Professionals (IAAP) certification.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://nesslabs.com/membership"&gt;&lt;strong&gt;Ness Labs&lt;/strong&gt;&lt;/a&gt;: Neuroscience-based content about how your brain works and ways to maximize learning. A yearly membership gives you access to workshops, virtual meetups, and an online community.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>learning</category>
      <category>programming</category>
      <category>webdev</category>
      <category>career</category>
    </item>
    <item>
      <title>Understanding the Object-Oriented Programming</title>
      <author>Rohan_Shakya</author>
      <pubDate>Fri, 04 Dec 2020 06:02:14 +0000</pubDate>
      <link>https://dev.to/rohanshakya/understanding-the-object-oriented-programming-34j3</link>
      <guid>https://dev.to/rohanshakya/understanding-the-object-oriented-programming-34j3</guid>
      <description>&lt;p&gt;Object-Oriented Programming is a design philosophy also known as OOP. Object-Oriented Programming(OOP) uses different sets of programming languages than old procedural programming languages(C, Pascal, etc.)Everything in OOP is grouped as self-sustainable “objects”. Hence you gain reusability by means of OOP concepts.&lt;/p&gt;

&lt;p&gt;OOP allows the decomposition of a problem into a number of entities called objects and then builds data and functions around these objects. Data cannot be accessed directly, they are only accessible through the member function. There might be a number of objects in a program written in OOP language. Those objects can communicate with each other by calling their respective member functions. Organization of data and function in OOP is shown below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8gSPNfWE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rxvst616jiynudx3c2tp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8gSPNfWE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rxvst616jiynudx3c2tp.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;OOP has taken the best ideas of structured programming and combined them with several powerful new concepts that encourage us to perform the task of programming in a new way. In general, when programming in an object-oriented fashion, we break down a problem into a subgroup of related parts that take into account both code and data related to each group.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-terminology-used-in-oop" class="anchor"&gt;
  &lt;/a&gt;
  The terminology used in OOP:
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#object" class="anchor"&gt;
  &lt;/a&gt;
  Object
&lt;/h2&gt;

&lt;p&gt;An object is any entity, thing, or organization that exists in the real world, It consists of two fundamentals characteristics: its attributes and behaviors. For example, a dog is an object having attributes such as color, weight, age, etc, and behaviors such as barking. In OOP, attributes are represented by data(variables) and the behaviors are represented by the functions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Object Car
Data                              Function
plateNumber = 120                 accelerate()
speed = 100                       
color = black
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Object in Javascript

// Defining object 

// Using an Object Literal
var car = {
  plateNumber: 120,
  maxSpeed: 100,
  color: 'black',
  accelerate: function(speed, time){
    console.log(speed * time);
  }
}

// Using an Object Constructor
var Car = function(plateNumber, maxSpeed, color){
  this.plateNumber = plateNumber;
  this.maxSpeed = maxSpeed;
  this.color = color;
  this.accelerate = function(speed, time){
    console.log(speed * time);
  }
}
var car1 = new Car(120, 100, 'black');
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Objects are the basic run-time entities in an object-oriented system that may be created or destroyed at run time. The data and function containing in an object are called its member data and member function. The member function of an object can only access its data. The concept behind OOP is to integrate both data and function into a single entity. This entity is also called an object.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#class" class="anchor"&gt;
  &lt;/a&gt;
  Class
&lt;/h3&gt;

&lt;p&gt;A class is simply a representation of a type of object. It is the blueprint/prototype that describes the details of an object. The entire set of data and code of an object can be made a user-defined data type with the help of a class. Once a class has been defined, we can create any number of objects associated with that class. For example, mango, apple, and orange are members of class fruit. If the fruit has been defined as a class, then the statement fruit mango will create an object mango belonging to the class fruit.&lt;/p&gt;

&lt;p&gt;A class has three areas: public, private, and protected. The functions and variables defined inside the public areas can be accessed by any object. The functions and variables defined inside the private areas can be accessed by the object of the same class and the protected areas can be accessed by the object from the same class and derived class. It incorporated the concept of data hiding.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Class Student                     Class Vehicle
Id                                Name
Name                              Maker
getName()                         Engine
printGrade()                      getDetails()
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Defining Class in Javascript using es6

class Vehicle { 
  constructor(name, maker, engine) { 
    this.name = name; 
    this.maker =  maker; 
    this.engine = engine; 
  } 
  getDetails(){ 
      return (`The name of the bike is ${this.name}.`) 
  } 
} 
// Making object with the help of the constructor 
let bike1 = new Vehicle('Hayabusa', 'Suzuki', '1340cc'); 
let bike2 = new Vehicle('Ninja', 'Kawasaki', '998cc'); 
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Defining class doesn't create an object but class is the description of the object’s attributes and behavior. So no memory is allocated when a class is created.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#data-abstraction-amp-encapsulation" class="anchor"&gt;
  &lt;/a&gt;
  Data Abstraction &amp;amp; Encapsulation
&lt;/h2&gt;

&lt;p&gt;In OOP, abstraction defines the conceptual boundaries of an object. Abstraction is the act of representing essential features without including the background details. It focuses on the outside view of an object, separating its essential behavior from its implementation. To understand this concept, take an example of ‘switch-board’. We only press particular switched as per our requirement. We need not know the internal working of these switched. This is an abstraction where we only know the essential things to operate on a switch-board without knowing the background details of the switch-board.&lt;/p&gt;

&lt;p&gt;Encapsulation is a way of organizing data and function into a structure (called class) by concealing (hiding) the way the object is implemented, which is preventing access to data by any means other than those specified. Encapsulation, therefore, guarantees the integrity of the data contained in the object. The best application of encapsulation is making the data fields private and using public access to functions. However, we cannot hide an entire object. To use an object, a part of it needs to be accessed by users. To provide this access, abstraction is used. Abstraction provides access to a specific part of data while encapsulation hides the data. Therefore, abstraction and encapsulation complement each other.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//encapsulation example 
class person{ 
    constructor(name,id){ 
        this.name = name; 
        this.id = id; 
    } 
    addAddress(addr){ 
        this.addr = addr; 
    } 
    getDetails(){ 
        console.log(`Name is ${this.name},Address is: ${this.addr}`); 
    } 
} 

let person1 = new person('John',20); 
person1.addAddress('California'); 
person1.getDetails(); 
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Abstraction example 

function person(fname,lname){ 
    let firstname = fname; 
    let lastname = lname; 

    let getDetails_noaccess = function(){ 
        return (`First name is: ${firstname} Last  
            name is: ${lastname}`); 
    } 

    this.getDetails_access = function(){ 
        return (`First name is: ${firstname}, Last  
            name is: ${lastname}`); 
    } 
} 
let person1 = new person('John','Smith'); 
console.log(person1.firstname); 
console.log(person1.getDetails_noaccess); 
console.log(person1.getDetails_access()); 
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#inheritance" class="anchor"&gt;
  &lt;/a&gt;
  Inheritance
&lt;/h2&gt;

&lt;p&gt;The process of creating a new class from an existing class in which objects of the new class inherit the attributes and behaviors of the existing class is known as inheritance. The newly created class is called the derived class or child class or subclass and the class from which the new class is created is class base class or parent class or super-class.&lt;/p&gt;

&lt;p&gt;The relationships of classes through inheritance give rise to a hierarchy. It permits the expansion and reuse of existing code without rewriting it hence, the concept of inheritance supports the concept of reusability.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#types" class="anchor"&gt;
  &lt;/a&gt;
  Types
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Single Inheritance:&lt;/strong&gt; The process of creating a new class from an existing class is a single inheritance that is there is only one base class and only derived class in single inheritance.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X3CpPqHw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2byk5gzq4koskh4zydfn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X3CpPqHw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2byk5gzq4koskh4zydfn.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Multiple Inheritance:&lt;/strong&gt; The process in which one class can have more than one superclass and inherit features from all parent classes is multiple inheritances.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JOcneLZf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5v5ozcqgps7zmn3r6xym.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JOcneLZf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5v5ozcqgps7zmn3r6xym.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Hierarchical Inheritance:&lt;/strong&gt; The process of creating several classes from only one class is called hierarchical inheritance that is there are two or more derived classes and only one base class in hierarchical inheritance.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IKi9rc-3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xya2gw43p46fvz612b8h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IKi9rc-3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xya2gw43p46fvz612b8h.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Multilevel Inheritance:&lt;/strong&gt; The process of creating a new class from another derived class is called multi-level inheritance.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6ZM3VEBU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/n972wy0yvq64om8edfd1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6ZM3VEBU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/n972wy0yvq64om8edfd1.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Hybrid Inheritance:&lt;/strong&gt; It is the combination of two or more types of inheritance.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//Inhertiance example 

class person{ 
    constructor(name){ 
        this.name = name; 
    } 

    //method to return the string 
    toString(){ 
        return (`Name of person: ${this.name}`); 
    } 
} 

class student extends person{ 
    constructor(name,id){ 
        //super keyword to for calling above class constructor 
        super(name); 
        this.id = id; 
    } 
    toString(){ 
        return (`${super.toString()},Student ID: ${this.id}`); 
    } 
} 
let student1 = new student('John',20); 
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#polymorphism" class="anchor"&gt;
  &lt;/a&gt;
  Polymorphism
&lt;/h2&gt;

&lt;p&gt;Polymorphism is a generic term that means ‘many forms’. It simply means ‘one name many forms’. More precisely Polymorphism means the ability to request that the same operations be performed by a wide range of different types of things.&lt;/p&gt;

&lt;p&gt;Polymorphism is an important feature of OOP which refers to the ability of an object to take on different forms depending upon situations. It simplifies coding and reduces the rework involved in modifying and developing an application. It is extensively used in implementing inheritance.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j-mEH25a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/otihjlawrpwre52y7mih.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j-mEH25a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/otihjlawrpwre52y7mih.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Operator overloading and function overloading are examples of polymorphism in OOP.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;The concept of an object helps to translate our thoughts into a program. It provides a way of solving a problem in the same way as a human being perceives a real-world problem and finds out the solution. It is possible to construct large reusable components using object-oriented techniques.&lt;/p&gt;

&lt;p&gt;Thanks for your time!! Hope you like it 😃😃&lt;/p&gt;

</description>
      <category>oop</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Get started with Flexbox.</title>
      <author>virensuthar</author>
      <pubDate>Fri, 04 Dec 2020 04:37:49 +0000</pubDate>
      <link>https://dev.to/virensuthar/get-started-with-flexbox-3in5</link>
      <guid>https://dev.to/virensuthar/get-started-with-flexbox-3in5</guid>
      <description>&lt;h1&gt;
  &lt;a href="#what-is-flexbox" class="anchor"&gt;
  &lt;/a&gt;
  What is Flexbox?
&lt;/h1&gt;

&lt;p&gt;Flexbox is a layout in CSS3. Flexbox is used to make responsive layouts and components on a webpage. Using is a good choice to use in CSS so you can design the page responsively. Here is a basic guide to getting starting with flexbox.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---3gDSFf1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fsln7je4ax7ft3er28hh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---3gDSFf1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fsln7je4ax7ft3er28hh.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Consider the above image and try to understand a layout there is one container, and inside that two elements are placed. This is an important part to understand, then using flexbox will be easy. Now plot that container into an x-y axis coordinate, horizontal part in flexbox called the Main axis and vertical part is called the Cross axis. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#using-flexbox" class="anchor"&gt;
  &lt;/a&gt;
  Using Flexbox
&lt;/h1&gt;

&lt;p&gt;Give property of &lt;code&gt;display: flex;&lt;/code&gt; to element for using flexbox.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#flexdirection" class="anchor"&gt;
  &lt;/a&gt;
  Flex-direction
&lt;/h4&gt;

&lt;p&gt;Flex-direction property is used to give direction to element should be placed, four types of properties are defined.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;flex-direction: row;&lt;/code&gt; place flex-items in row (horizontal).&lt;/li&gt;
&lt;li&gt; &lt;code&gt;flex-direction: row-reverse;&lt;/code&gt; place flex-items in row but in reverse order.&lt;/li&gt;
&lt;li&gt; &lt;code&gt;flex-direction: column;&lt;/code&gt; place flex-items in column (vertical).&lt;/li&gt;
&lt;li&gt; &lt;code&gt;flex-direction: column-reverse;&lt;/code&gt; place flex-items in column but in reverse order.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can see in the example below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s----O5J3PQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4jkkaafn2ef4osrtmhyg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s----O5J3PQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4jkkaafn2ef4osrtmhyg.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#flexwrap" class="anchor"&gt;
  &lt;/a&gt;
  Flex-wrap
&lt;/h4&gt;

&lt;p&gt;Flex-wrap property is used for wrapping flex-items inside the flex-container.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;flex-wrap : nowrap&lt;/code&gt; will not wrap flex-item in flex-container.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;flex-wrap : wrap&lt;/code&gt; will wrap flex-item in flex-container if it not fit in container size.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can see in the example below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JtwNc8_k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/krxb50fi5gp2h4xi6fbj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JtwNc8_k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/krxb50fi5gp2h4xi6fbj.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#justifying-and-aligning-flexitem" class="anchor"&gt;
  &lt;/a&gt;
  Justifying and aligning flex-item
&lt;/h3&gt;

&lt;p&gt;Now, this is a very important property of flexbox and you will use it regularly.&lt;br&gt;
Whenever we want to align flex-item to the Main axis (horizontally) use &lt;code&gt;justify-content&lt;/code&gt;, and if you want to align flex-items  to the Cross axis (vertically) use &lt;br&gt;
&lt;code&gt;align-items&lt;/code&gt;. Now let's see in detail.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#justifying-content-along-with-the-main-axis-horizontally" class="anchor"&gt;
  &lt;/a&gt;
  Justifying content along with the Main axis (Horizontally).
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;justify-content: flex-start&lt;/code&gt; will place flex-item to the start of flex-container &lt;em&gt;(refer the first image above)&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;justify-content: flex-end&lt;/code&gt; will place flex-item to the end of flex-container&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;justify-content: center&lt;/code&gt; to center flex-items.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;justify-content: space-around&lt;/code&gt;`  space up around item.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;&lt;/code&gt; justify-content: space-between &lt;code&gt;&lt;/code&gt; uses the whole frame and space item between.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;&lt;/code&gt; justify-content: space-evenly &lt;code&gt;&lt;/code&gt; space all item evenly&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#aligning-content-along-with-the-cross-axis-vertically" class="anchor"&gt;
  &lt;/a&gt;
  Aligning content along with the Cross axis (vertically).
&lt;/h4&gt;

&lt;p&gt;All properties are the same as  &lt;code&gt;&lt;/code&gt; justify-content &lt;code&gt;&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;&lt;/code&gt; align-items: flex-start &lt;code&gt;&lt;/code&gt; will place flex-item to the start of flex-container &lt;em&gt;(refer the first image above)&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;&lt;/code&gt; align-items: flex-end &lt;code&gt;&lt;/code&gt; will place flex-item to the end of flex-containers&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;&lt;/code&gt; align-items: center &lt;code&gt;&lt;/code&gt; to center flex-items.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;&lt;/code&gt; align-items: baseline &lt;code&gt;&lt;/code&gt; place flex-item to base item.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Tip: Flexbox is a good option for centering things in CSS. Make sure whatever element you want to center their parent element would have width and height defined and give parent element &lt;code&gt;&lt;/code&gt; justify-content: center &lt;code&gt;&lt;/code&gt; and &lt;code&gt;&lt;/code&gt; align-items: center &lt;code&gt;&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Thanks for reading.&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Create a custom React star rating component</title>
      <author>Michael Burrows</author>
      <pubDate>Fri, 04 Dec 2020 03:06:25 +0000</pubDate>
      <link>https://dev.to/michaelburrows/create-a-custom-react-star-rating-component-5o6</link>
      <guid>https://dev.to/michaelburrows/create-a-custom-react-star-rating-component-5o6</guid>
      <description>&lt;p&gt;In this tutorial we’ll be building a custom React star rating component. This type of component allows users to give something a rating between 1 and 5 stars with a single mouse click.&lt;/p&gt;

&lt;p&gt;Here’s how the completed component will look &amp;amp; function:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---4jBLQq4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/meeudjpxbvmyyo1abytj.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---4jBLQq4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/meeudjpxbvmyyo1abytj.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let’s get started by setting up an application using &lt;a href="https://www.michaelburrows.xyz/create-react-app/"&gt;Create React App&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npx creat-react-app star-rating&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then in the &lt;code&gt;/src&lt;/code&gt; directory create a file for the component named &lt;code&gt;StarRating.js&lt;/code&gt;. We’ll start with a bare bones component to test the setup then build out the full functionality:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;StarRating&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt; &lt;span class="nx"&gt;World&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;StarRating&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Next replace the contents of the &lt;code&gt;App.js&lt;/code&gt; file to load in the component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;StarRating&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./StarRating&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./App.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;StarRating&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Run the &lt;code&gt;npm start&lt;/code&gt; command and test that the component is being loaded.&lt;/p&gt;

&lt;p&gt;Now back to the &lt;code&gt;StarRating.js&lt;/code&gt; file, first thing we need to do is have the component output 5 stars which we do by mapping over an array:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;StarRating&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;star-rating&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{[...&lt;/span&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)].&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;star&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;        
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;         
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;star&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;amp;&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;9733&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&amp;gt;       &lt;/span&gt;&lt;span class="err"&gt; 
&lt;/span&gt;        &lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;})}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;code&gt;&amp;amp;#9733;&lt;/code&gt; is the HTML entity code for a star icon but you could also use an icon library like Font Awesome here if you wanted. Next we need to add the functionality that sets the star rating when clicked. For this we’ll wrap the stars in a &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; and with a &lt;code&gt;onClick()&lt;/code&gt; event:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;StarRating&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;rating&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setRating&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;star-rating&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{[...&lt;/span&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)].&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;star&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;
            &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;rating&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;on&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;off&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setRating&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
          &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;star&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;amp;&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;9733&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;})}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We’re using the &lt;a href="https://reactjs.org/docs/hooks-state.html"&gt;State hook&lt;/a&gt; to store the value (index) of the star clicked. Depending on the rating selected a class of either “on” or “off” is added, this will allow us to style the icons to give a visual representation of the rating selected.&lt;/p&gt;

&lt;p&gt;And here is the CSS which we’ll add to the App.css file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;outline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.on&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.off&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ccc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;With the CSS setup we have a functioning component that will show the star rating selected on click. For some added interactivity we’ll also implement a hover effect that indicates the rating that will be selected on click:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;StarRating&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;rating&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setRating&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;hover&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setHover&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;star-rating&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{[...&lt;/span&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)].&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;star&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;
            &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hover&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;rating&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;on&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;off&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setRating&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
            &lt;span class="nx"&gt;onMouseEnter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setHover&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
            &lt;span class="nx"&gt;onMouseLeave&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setHover&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rating&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
          &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;star&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;amp;&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;9733&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;})}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;There you have it, a custom star rating component without the need for any additional dependencies or frameworks. As usual the source code for this project can be found on &lt;a href="https://github.com/michael-burrows-github/blog/tree/master/2020/049%20-%20Create%20a%20custom%20React%20star%20rating%20component"&gt;GitHub&lt;/a&gt;. Thanks for reading :)&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Learning TypeScript: Part I</title>
      <author>samuel-casey</author>
      <pubDate>Fri, 04 Dec 2020 01:22:33 +0000</pubDate>
      <link>https://dev.to/samuelcasey/learning-typescript-part-i-2b8</link>
      <guid>https://dev.to/samuelcasey/learning-typescript-part-i-2b8</guid>
      <description>&lt;p&gt;&lt;strong&gt;&lt;em&gt;This is a repost of a Medium article I wrote a few months ago. I decided it makes sense to share here too in case anyone in the dev.to community is experienced with JavaScript and trying to teach themselves TypeScript for the first time. I have written a lot more TypeScript since publishing this article, and plan on posting Part II of this blog this weekend in which I'll go over some lessons learned from building and deploying my first React and API builds written in TypeScript.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This week, I built and deployed my first TypeScript project: a new &lt;a href="https://samcasey.life"&gt;portfolio site&lt;/a&gt;. Up until two weeks ago, I had only used JavaScript, JQuery, and React for web-development, but after watching &lt;a href="https://www.youtube.com/watch?v=bAB_nNf8-a0"&gt;this video by Ben Awad&lt;/a&gt; where he mentions that after you learn TypeScript, developing in JavaScript will feel like "playing web-dev on hardcore mode", I decided it was worth learning. This blog covers how I've been teaching myself, what I've learned so far, and how I'm going to continue learning TypeScript&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-ive-been-learning" class="anchor"&gt;
  &lt;/a&gt;
  How I've been learning
&lt;/h2&gt;

&lt;p&gt;I'm currently enrolled in a General Assembly (GA) Software Engineering Bootcamp. The focus of Unit 1 was HTML, CSS, and JavaScript. Given that I have a fair amount of experience with JavaScript, I decided to teach myself TypeScript alongside our JavaScript lessons. My workflow for teaching myself had four steps:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Take notes during my GA lectures focused on the fundamentals data types of JavaScript, Object Oriented Programming, and ES6 syntax.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;While I was doing this, I also had the TypeScript docs open on my other monitor so I could compare how data types work in JavaScript with how they work in TypeScript&lt;/p&gt;

&lt;p&gt;Here's a snippet from my lecture notes on Arrays:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x959HZ02--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/scimgcloud/image/upload/v1600800329/images-for-blogs/Screen_Shot_2020-09-22_at_2.43.43_PM_xpmimb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x959HZ02--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/scimgcloud/image/upload/v1600800329/images-for-blogs/Screen_Shot_2020-09-22_at_2.43.43_PM_xpmimb.png" alt="Screenshot of Notes"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Do my homework assignments in JavaScript first to think through the logic of the assignments.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I find it easier to focus on learning the idiosyncrasies of a new language or library when I don't have to think about both the new syntax and the actual application logic&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Refactor my homeworks into TypeScript&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When I was first learning React, I started by rebuilding a tic-tac-toe game that I originally had built in JQuery, and found that process to be a great way of learning. This homework, &lt;a href="https://github.com/samuel-casey/random-tarot"&gt;a random tarot card generator&lt;/a&gt;, is an example of one of the homeworks I refactored.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Google every single error I get and allow myself to go deep down rabbit holes while exploring solutions&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Usually when I come across errors while developing, I look to find the quickest fix to my errors and keep moving forward once I find a fix. While learning TypeScript, however, I've been exploring multiple possible fixes, testing them more thoroughly, and making sure that I understand &lt;em&gt;why&lt;/em&gt; the solutions I find are fixing my errors, not just considering it "good enough" when I stop seeing error messages.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-ive-learned-so-far" class="anchor"&gt;
  &lt;/a&gt;
  What I've learned so far
&lt;/h2&gt;

&lt;p&gt;The main things I've learned about TypeScript so far is how beneficial it will be for building larger scale applications, and that I'm a fan. My portfolio site is built with TypeScript, Sass, JQuery, and a Google Sheets API, but even though it's small and serverless, building it with TypeScript allowed me to see some of the benefits of a strongly-typed language. Below are two examples of things I learned about TypeScript while building my portfolio site, and the issues I faced that led to me learning them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Type-checking is about more than just checking primitive data types (interfaces are a wonderful thing)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The projects and blogs listed on my portfolio site are stored in a Google Sheet, per the requirements of my GA assignment. When first making AJAX requests to the Sheets API, I attempted to assign object properties for each project/blog to a new object without defining an Interface for what a Project or Blog object should look like. This resulted in a series of errors as I got further in my code, and helped me fully understand the purpose and benefits of Interfaces.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Functions in TypeScript should to have an explicitly defined return type in order to harness the full benefits of using TypeScript&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;On my second go around with AJAX, after I had defined Interfaces for my Projects and Blog objects, I kept getting the error: &lt;code&gt;TS2355: A function whose declared type is neither 'void' nor 'any' must return a value&lt;/code&gt;. The error arose when I tried to map the Array of entries in my Google Sheet to an array of ProjectSheetRow/BlogSheetRow objects. I originally solved the bug by setting the return type for my &lt;code&gt;.map()&lt;/code&gt; callback to &lt;code&gt;any&lt;/code&gt;, but after reading some Stack Overflow articles and the TypeScript docs, I realized that returning &lt;code&gt;any&lt;/code&gt; from a function in my situation was a cop-out. You might as well use JavaScript if you're going to just return &lt;code&gt;any&lt;/code&gt; from all of your functions. To fix this error, I returned {&lt;em&gt;object properties&lt;/em&gt;} as ProjectSheetRow or BlogSheetRow, which were the names of my Interfaces&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#next-steps-in-my-typescript-education" class="anchor"&gt;
  &lt;/a&gt;
  Next steps in my TypeScript education
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;1. Build a project with TypeScript + React&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I was required to use JQuery for my portfolio site because of my GA assignment, but I don't think I'll ever use JQuery + TypeScript ever again, as React is my favorite front-end tool and it seems to have good support for TypeScript.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Build a fullstack project using TypeScript&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;TypeScript is great for front-end development, but I'm most excited to start using it for the backend. A few months ago, I built an &lt;a href="https://tides-vis.herokuapp.com"&gt;app to help visualize realtime tide-levels&lt;/a&gt; at any beach around the United States which probably would have been easier to debug in TypeScript. When writing the function to compare the timezone from the user's inputted location to the list of tide stations in my database, I spent hours debugging an issue that stemmed from me trying to compare a &lt;code&gt;number&lt;/code&gt; to a &lt;code&gt;string&lt;/code&gt;. If I had been using TypeScript for this project, I probably would have discovered this error sooner and saved myself a lot of time and a major headache.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Get involved in the TypeScript community online&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I'm certain there are still things I do not fully understand about TypeScript yet, and while I'm confident in my abilities to teach myself new concepts, I think I'll learn much faster with help from others. I plan on posting StackOverflow questions, commenting on some Dev.to blogs about TypeScript, and eventually contributing to an open-source TypeScript project. &lt;/p&gt;

&lt;p&gt;In conclusion, if you're reading this blog and have any suggestions for how to become a TypeScript pro, or want to hear more about my TypeScript journey, please reach out! My dms are open on twitter &lt;a href="https://twitter.com/_samcasey"&gt;@_samcasey&lt;/a&gt;, and I welcome any comments on this blog as well.&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>webdev</category>
      <category>devjournal</category>
      <category>learning</category>
    </item>
    <item>
      <title>Understanding Kubernetes: part 38 – Kubernetes is deprecating Docker</title>
      <author>Aurélie Vache</author>
      <pubDate>Thu, 03 Dec 2020 23:34:12 +0000</pubDate>
      <link>https://dev.to/aurelievache/understanding-kubernetes-part-38-kubernetes-is-deprecating-docker-eh3</link>
      <guid>https://dev.to/aurelievache/understanding-kubernetes-part-38-kubernetes-is-deprecating-docker-eh3</guid>
      <description>&lt;p&gt;Understanding Kubernetes can be difficult or time-consuming. In order to spread knowledges about Cloud technologies I started to create sketchnotes about Kubernetes. I think it could be a good way, more visual, to explain Kubernetes (and others technologies).&lt;/p&gt;

&lt;p&gt;We continue the serie of Sketchnotes about Kubernetes, with an explanation about one news: Kubernetes is deprecating Docker as a container runtime after v1.20.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OWJViKXF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/dmi5ny2n5mp0lk057ewk.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OWJViKXF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/dmi5ny2n5mp0lk057ewk.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rZXafIiT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/v3c7k7k1m0i1mhfr8ect.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rZXafIiT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/v3c7k7k1m0i1mhfr8ect.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P_FkldXn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/dvtxpytzbce5f6nuwlmb.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P_FkldXn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/dvtxpytzbce5f6nuwlmb.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you are interested, I published all the sketchnotes on Kubernetes (and new ones!) to make a "book" of 120 pages: &lt;a href="https://gumroad.com/aurelievache#uCxcr"&gt;"Understanding Kubernetes in a visual way"&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As usual, if you like theses sketchnotes, you can follow me, and tell me what do you think. I will publish others sketchs shortly :-).&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>devops</category>
      <category>docker</category>
      <category>beginners</category>
    </item>
    <item>
      <title>AWS Heroes React to  AWS re:Invent 2020 Announcements 🤯</title>
      <author>Andrew Brown 🇨🇦</author>
      <pubDate>Thu, 03 Dec 2020 23:03:43 +0000</pubDate>
      <link>https://dev.to/aws-heroes/aws-heroes-react-to-aws-re-invent-2020-announcements-l67</link>
      <guid>https://dev.to/aws-heroes/aws-heroes-react-to-aws-re-invent-2020-announcements-l67</guid>
      <description>&lt;h3&gt;
  &lt;a href="#during-reinvent-this-article-is-being-constantly-updated" class="anchor"&gt;
  &lt;/a&gt;
  🚨 During re:Invent this article is being constantly updated.
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#keep-checking-in-to-see-new-reactions" class="anchor"&gt;
  &lt;/a&gt;
  👋 Keep checking in to see new reactions!
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#jump-to-the-reactions" class="anchor"&gt;
  &lt;/a&gt;
  👉👉 &lt;a href="#aws-hero-reactions-and-analysis"&gt;Jump to the reactions&lt;/a&gt; 👈👈
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#preamble" class="anchor"&gt;
  &lt;/a&gt;
  Preamble
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#what-is-reinvent" class="anchor"&gt;
  &lt;/a&gt;
  What is re:Invent?
&lt;/h3&gt;

&lt;p&gt;re:Invent is Amazon Web Service's (AWS) 5-day technology conference held in Las Vegas Nevada. Last year's conference had &lt;strong&gt;65,000+ attendance&lt;/strong&gt; from around the world.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-is-reinvent-so-important" class="anchor"&gt;
  &lt;/a&gt;
  Why is re:Invent so important?
&lt;/h3&gt;

&lt;p&gt;re:Invent is when AWS announces new features, improvements and cloud services. It's also a lot of fun, with hands-on training, creative demos project, lucrative swag and more!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-different-this-year" class="anchor"&gt;
  &lt;/a&gt;
  What is different this year?
&lt;/h3&gt;

&lt;p&gt;Due to the world situation AWS has made a few changes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The conference is 100% virtual&lt;/li&gt;
&lt;li&gt;Attendance is free (you still need to &lt;a href="https://register.virtual.awsevents.com/?sc_icampaign=event_reInvent_RegisterNow&amp;amp;sc_ichannel=ha&amp;amp;sc_icontent=eventsite_reinvent20&amp;amp;sc_ioutcome=Strategic_Events&amp;amp;sc_iplace=evnav&amp;amp;trk=direct"&gt;register&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;The conference is 3 weeks long&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#what-is-an-aws-hero" class="anchor"&gt;
  &lt;/a&gt;
  What is an AWS Hero?
&lt;/h3&gt;

&lt;p&gt;An AWS Hero is a recognized community leader in a specific category of cloud technologies.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-this-article" class="anchor"&gt;
  &lt;/a&gt;
  What is this article?
&lt;/h3&gt;

&lt;p&gt;There are thousands of talks and hundreds of announcements, and if you live a busy life, it can be hard to find the time to digest all the changes.&lt;/p&gt;

&lt;p&gt;This reaction article is to help contextualize the AWS announcements with some personal thoughts or expert opinion so you have an idea of how you can apply these in your future workloads.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aws-hero-reactions-and-analysis" class="anchor"&gt;
  &lt;/a&gt;
  AWS Hero Reactions and Analysis
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#andy-jassy-keynote-aws-reinvent-2020" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;a href="https://markn.ca/2020/andy-jassy-keynote-aws-reinvent/"&gt;Andy Jassy Keynote, AWS Re:Invent 2020&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;No longer do we really have to worry about significant up front entry costs, capacity limits, or start up times. We have more power available via one API call than an entire data center from ten years ago. But if you don’t change how you approach using these tools, you won’t see... &lt;a href="https://markn.ca/2020/andy-jassy-keynote-aws-reinvent/"&gt;(read full article)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;By &lt;a href="https://aws.amazon.com/developer/community/heroes/mark-nunnikhoven/"&gt;Mark Nunnikhoven&lt;/a&gt;, AWS Community Hero&lt;/em&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#aws-announces-babelfish-open-source-postgres-with-sql-server-compatibility" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;a href="https://www.ongres.com/blog/aws_announces_open_source_postgres_with_sql_server_compatibility/"&gt;AWS announces Babelfish: open source Postgres with SQL Server compatibility&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;But if it weren’t enough, SQL Server equivalent catalogs and also the SQL Server wire protocol (TDS) has been implemented. This means that you will be able to talk to Postgres Babelfish as if it were... &lt;a href="https://www.ongres.com/blog/aws_announces_open_source_postgres_with_sql_server_compatibility/"&gt;(read full article)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;By &lt;a href="https://aws.amazon.com/developer/community/heroes/alvaro-hernandez/"&gt;Álvaro Hernández&lt;/a&gt;, AWS Data Hero&lt;/em&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#serverless-comes-to-machine-learning-with-container-image-support-in-aws-lambda" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;a href="https://towardsdatascience.com/serverless-comes-to-machine-learning-with-container-image-support-in-aws-lambda-ee9d729d48d7"&gt;Serverless comes to machine learning with container image support in AWS Lambda&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;AWS announced a long-awaited update for AWS Lambda by many developers and data scientists because it could change the way we build functions. It comes with bonus features that make this release something very welcome in the serverless world: starting from today it is possible to... &lt;a href="https://towardsdatascience.com/serverless-comes-to-machine-learning-with-container-image-support-in-aws-lambda-ee9d729d48d7"&gt;(read full article)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;By &lt;a href="https://aws.amazon.com/developer/community/heroes/luca-bianchi/"&gt;Luca Bianchi&lt;/a&gt;, AWS Serverless Hero&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#andy-jassys-8-keys-to-success-aws-reinvent-2020-keynote" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;a href="https://medium.com/cloud-security/keys-to-aws-success-3a4ab2abebb9"&gt;Andy Jassy’s 8 keys to success ~ AWS re:Invent 2020 Keynote&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;AWS is at the top of the Gartner Magic Quadrant in 2020 — again. In fact, they widened the gap between themselves and next closest provider in the past year. Andy Jassy provided some keys to success at the AWS in his... &lt;a href="https://medium.com/cloud-security/keys-to-aws-success-3a4ab2abebb9"&gt;(read full article)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;By &lt;a href="https://aws.amazon.com/developer/community/heroes/teri-radichel/"&gt;Teri Radichel&lt;/a&gt;, AWS Community Hero&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-takeaways-from-andy-jassys-big-reinvent-keynote" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;a href="https://acloudguru.com/blog/engineering/5-takeaways-from-andy-jassys-big-reinvent-keynote"&gt;5 takeaways from Andy Jassy’s big re:Invent keynote&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;To tie all that together, we got AWS Proton – a fully managed deployment service for containers and serverless apps. Notice how those two concepts are starting to blend together? Watch for that trend to... &lt;a href="https://acloudguru.com/blog/engineering/5-takeaways-from-andy-jassys-big-reinvent-keynote"&gt;(read full article)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;By &lt;a href="https://aws.amazon.com/developer/community/heroes/forrest-brazeal/"&gt;Forrest Brazeal&lt;/a&gt;, AWS Serverless Hero&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#aws-lambda-can-now-run-php-using-docker-containers" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;a href="https://mnapoli.fr/aws-lambda-php-docker-containers/"&gt;AWS Lambda can now run PHP using Docker Containers&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;The good news is that while Lambda functions are limited to 250MB, containers can be up to 10GB. That will certainly help when deploying large monoliths to Lambda. One limitation to keep in mind is that after... &lt;a href="https://mnapoli.fr/aws-lambda-php-docker-containers/"&gt;(read full article)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;By &lt;a href="https://aws.amazon.com/developer/community/heroes/matthieu-napoli/"&gt;Matthieu Napoli&lt;/a&gt;, AWS Serverless Hero&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wait-did-aws-just-rewrite-the-manual-again-for-building-apps" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;a href="https://www.stackery.io/blog/reinvent-2020-andy-jassy-keynote-modern-architecture/"&gt;Wait, did AWS just rewrite the manual again for building apps?&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Andy Jassy's re:Invent keynote today was chock full of new features and services. I'm here to help break down the most important news related to modern application architecture… &lt;a href="https://www.stackery.io/blog/reinvent-2020-andy-jassy-keynote-modern-architecture/"&gt;(read full article)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;By &lt;a href="https://aws.amazon.com/developer/community/heroes/chase-douglas/"&gt;Chase Douglas&lt;/a&gt;, AWS Serverless Hero&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#serverless-at-reinvent-2020-hot-takes-1" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;a href="https://theburningmonk.com/2020/12/serverless-at-reinvent-2020-hot-takes-1/"&gt;Serverless at re:Invent 2020 – hot takes #1&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Lambda now bills you by the ms as opposed to 100 ms. So if your function runs for 42ms you will be billed for 42ms, not 100ms. This instantly makes everyone’s lambda bills cheaper without anyone having to lift a finger. It’s the best kind of optimization! However, this might not mean much in… &lt;a href="https://theburningmonk.com/2020/12/serverless-at-reinvent-2020-hot-takes-1/"&gt;(read full article)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;By &lt;a href="https://aws.amazon.com/developer/community/heroes/yan-cui/"&gt;Yan Cui&lt;/a&gt;, AWS Serverless Hero&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#database-announcements-at-reinvent-2020" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;a href="https://blog.dbi-services.com/database-announcements-at-reinvent-2020/"&gt;Database announcements at re:Invent 2020&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;There are 3 important new launches announced around databases: Babelfish for Aurora, Aurora Serverless v2 and AWS Glue Elastic Views but let’s start by a recap of the pre-reInvent new features from this year… &lt;a href="https://blog.dbi-services.com/database-announcements-at-reinvent-2020/"&gt;(read full article)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;By &lt;a href="https://aws.amazon.com/developer/community/heroes/franck-pachot/"&gt;Franck Pachot&lt;/a&gt;, AWS Data Hero&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#deploying-a-ml-model-using-the-new-aws-lambda-container-image-functionality" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;a href="https://dev.to/aws-heroes/deploying-a-ml-model-using-the-new-aws-lambda-container-image-functionality-4e7o"&gt;Deploying a ML model using the new AWS Lambda Container Image Functionality&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;This week at re:Invent we saw AWS announce the ability to bring your own container to Lambda functions. The scenario that gets me super excited is the deployment of ML models inside Lambda. Before, it was just too awkward for most use cases to do ML in Lambda but I will demonstrate below that it is very easy now… &lt;a href="https://dev.to/aws-heroes/deploying-a-ml-model-using-the-new-aws-lambda-container-image-functionality-4e7o"&gt;(read full article)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;By &lt;a href="https://aws.amazon.com/developer/community/heroes/matt-coulter/"&gt;Matt Coulter&lt;/a&gt;, AWS DevTools Hero&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#an-aws-hero-reacts-to-the-io2-block-express-announcement" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;a href="https://dev.to/aws-heroes/an-aws-hero-reacts-to-the-io2-block-express-announcement-4d70"&gt;An AWS Hero reacts to the io2 Block Express announcement&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;I want to talk about the elegance that is io2 Block Express and why it truly is the first "Cloud SAN". In a traditional high performance and highly available Storage Area Network, data traffic between a storage array and the consuming server rides on a dedicated network… &lt;a href="https://dev.to/aws-heroes/an-aws-hero-reacts-to-the-io2-block-express-announcement-4d70"&gt;(read full article)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;By &lt;a href="https://aws.amazon.com/developer/community/heroes/dave-stauffacher/"&gt;Dave Stauffacher&lt;/a&gt;, AWS Community Hero&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-container-images-with-aws-lambda" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;a href="https://hichaelmart.medium.com/using-container-images-with-aws-lambda-7ffbd23697f1"&gt;Using container images with AWS Lambda&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Container Image Support has just been announced for AWS Lambda and it’s a pretty big deal — I’m very excited because it’s something I’ve wanted for years… &lt;a href="https://hichaelmart.medium.com/using-container-images-with-aws-lambda-7ffbd23697f1"&gt;(read full article)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;By &lt;a href="https://aws.amazon.com/developer/community/heroes/michael-hart/"&gt;Michael Hart&lt;/a&gt;, AWS Serverless Hero&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-year-of-serverless" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;a href="https://www.stackery.io/blog/the-year-of-serverless/"&gt;The Year of Serverless&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Danilo and Sheen are incredibly smart engineers and have done great things at the LEGO group. They’re also both great at sharing their knowledge. From the talk abstract: After experiencing scaling issues on Black Friday, the LEGO team fully refactored its monolith to serverless microservices... &lt;a href="https://www.stackery.io/blog/the-year-of-serverless/"&gt;(read the full article)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;By &lt;a href="https://aws.amazon.com/developer/community/heroes/farrah-campbell/"&gt;Farrah Campbell&lt;/a&gt;, AWS Serverless Hero&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#aurora-serverless-v2-the-good-the-better-and-the-possibly-amazing" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;a href="https://www.jeremydaly.com/aurora-serverless-v2-preview/"&gt;Aurora Serverless v2: The Good, the Better, and the Possibly Amazing&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;That all changed with the introduction of Amazon Aurora Serverless v2. I finally got access to the preview and spent a few hours trying to break it. My first impression? This thing might just be a silver bullet! I know that’s a bold statement. 😉 But even though I’ve only been using it for a few hours… &lt;a href="https://www.jeremydaly.com/aurora-serverless-v2-preview/"&gt;(read the full article)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;By &lt;a href="https://aws.amazon.com/developer/community/heroes/jeremy-daly/"&gt;Jeremy Daly&lt;/a&gt;, AWS Serverless Hero&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#aws-lambda-container-image-support-example-for-nodejs" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;a href="https://sbstjn.com/blog/aws-lambda-container-docker-example/"&gt;AWS Lambda Container Image Support example for Node.js&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;I build a Continuous Integration and Continuous Deployment setup for AWS Lambda functions with docker images using GitHub Actions. Together with Semantic Releases and Conventional Commits, you can focus on writing your code. Automation takes care everything else... &lt;a href="https://sbstjn.com/blog/aws-lambda-container-docker-example/"&gt;(read the full article)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;By &lt;a href="https://aws.amazon.com/developer/community/heroes/sebastian-mueller/"&gt;Sebastian Müller&lt;/a&gt;, AWS Serverless Hero&lt;/em&gt;&lt;/p&gt;

</description>
      <category>aws</category>
    </item>
    <item>
      <title>Recurring Jira tickets with Reshuffle</title>
      <author>Alan Lee</author>
      <pubDate>Thu, 03 Dec 2020 22:49:40 +0000</pubDate>
      <link>https://dev.to/alanblee/recurring-jira-tickets-with-reshuffle-4ml5</link>
      <guid>https://dev.to/alanblee/recurring-jira-tickets-with-reshuffle-4ml5</guid>
      <description>&lt;p&gt;If you’re using Jira and have projects with repeating tickets that need to be added monthly, weekly or even daily, you know it can require painstaking manual labor to administer to all relevant projects, using up valuable time instead of solving the bigger problems. You could spend an hour or more configuring a system to automate this or even pay for a plugin on Jira, but, there is an easier way of doing this...and it's free!&lt;/p&gt;

&lt;p&gt;How? Simply use &lt;a href="https://dev.reshuffle.com/"&gt;Reshuffle&lt;/a&gt; connectors to easily create the integration.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-build-it" class="anchor"&gt;
  &lt;/a&gt;
  How to Build It
&lt;/h2&gt;

&lt;p&gt;Reshuffle makes it easy to build integrations that complete complex tasks, so you can deliver unique experiences and outcomes for the business and for customers. &lt;/p&gt;

&lt;p&gt;Reshuffle is an open source, lightweight, and event-driven framework that helps you integrate services — these integrations and workflows are created inside a Reshuffle App. The objects that let you interact with these services are called &lt;a href="https://dev.reshuffle.com/docs/connectors"&gt;connectors&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Imagine you want a recurring issue to remind you to check npm dependencies every week. Creating the issue manually can become tiresome. In this example, you'll see how simple it is to use the Cron connector as a scheduler to automate the creation of recurring Jira tickets every predefined period of time.&lt;/p&gt;

&lt;p&gt;See links for full documentation: &lt;br&gt;
&lt;a href="https://github.com/reshufflehq/reshuffle"&gt;Reshuffle&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/reshufflehq/reshuffle-jira-connector"&gt;Atlassian Jira Connector&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/reshufflehq/reshuffle/blob/master/doc/CronConnector.md"&gt;Cron Connector&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Reshuffle&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;jira&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;JiraConnector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
   &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="na"&gt;host&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;HOST&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// Your Jira instance url&lt;/span&gt;
       &lt;span class="na"&gt;protocol&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;JIRA_PROTOCOL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// ‘http’ or ‘https’&lt;/span&gt;
       &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;JIRA_USERNAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// username or email&lt;/span&gt;
       &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;JIRA_TOKEN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="na"&gt;baseURL&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;RUNTIME_BASE_URL&lt;/span&gt;
   &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cronConnector&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;CronConnector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now that we have the connectors configured, we need to find the project and issue type IDs using the Jira Connector actions. These IDs will be used later on to create the new ticket.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;project&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;jira&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sdk&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;getProject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;YOUR PROJECT NAME&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;projectId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;issueTypeId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;project&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;issueTypes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;project&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;//issueTypes[0] are regular tasks on jira&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Next, we’ll create a function to check if the recurring ticket already exists on the board. This will ensure that there won’t be any duplicates created.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;checkIssues&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;boardIssues&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;jira&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sdk&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;getIssuesForBoard&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;issue&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;boardIssues&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;issues&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;fields&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;issue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;summary&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;CHECK NPM DEPENDENCIES&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
        &lt;span class="nx"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Done&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Reshuffle is an events-based system, and you develop code to handle these events. The cron connector can be used to fire an event every "x" amount of time, which lets us check the issues periodically. If you’re unfamiliar with these expressions, visit &lt;a href="//crontab.guru"&gt;crontab.guru&lt;/a&gt; to help generate one.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//this expression is set to every minute, just to see if everything is working properly&lt;/span&gt;
&lt;span class="nx"&gt;cronConnector&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1 * * * * *&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;foundIssue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;checkIssues&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;foundIssue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;recurringIssue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;project&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;projectId&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="na"&gt;issuetype&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;issueTypeId&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="na"&gt;summary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;CHECK NPM DEPENDENCIES&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Recurring Issue - Every 1 minute&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;jira&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sdk&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;addNewIssue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;recurringIssue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Issue created&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Issue already exists&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Inside the event handler, we use the function created earlier to check if the task already exists. If it doesn’t, we create a new one using the Jira connector action.&lt;/p&gt;

&lt;p&gt;Lastly, let's initiate the integration by starting the Reshuffle App:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;See how easy it is? You can do this so quickly and really make it much easier to automate recurring Jira tickets without having to pay for plugins or searching through the community boards for hour-long solutions. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#now-make-it-happen" class="anchor"&gt;
  &lt;/a&gt;
  Now, Make it Happen
&lt;/h2&gt;

&lt;p&gt;As your developers and project management teams experience the ease of working with integrated applications, we encourage you to consider where else integrating workflows would benefit your teams. With so many different tools, the more you can consolidate them into one common interface, the easier people can get work done. &lt;/p&gt;

&lt;p&gt;Reshuffle is continually listening to what our customers need and desire. Don’t see a Connector to a service you’d like to integrate? Send a tweet to &lt;a href="https://twitter.com/reshufflehq"&gt;@ReshuffleHQ&lt;/a&gt; to let us know which Connector you’d like us to develop next.&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>javascript</category>
      <category>reshuffle</category>
      <category>jira</category>
    </item>
    <item>
      <title>3 Steps To Make HTML Tables Web Accessible</title>
      <author>Kyle Luke</author>
      <pubDate>Thu, 03 Dec 2020 22:29:01 +0000</pubDate>
      <link>https://dev.to/lukekyl/3-steps-to-make-html-tables-web-accessible-3jjf</link>
      <guid>https://dev.to/lukekyl/3-steps-to-make-html-tables-web-accessible-3jjf</guid>
      <description>&lt;p&gt;When it comes to web accessibility, many developers think that it's a lot of added work, and that it's too hard to get right. I wanted to break that myth when it comes to HTML Tables, based on an article I recently read that simplifies the requirements to making them satisfy the WCAG AA level of accessibility (Article titled: &lt;a href="https://adrianroselli.com/2020/11/under-engineered-responsive-tables.html"&gt;Under Engineered Responsive Tables by Adrian Roselli&lt;/a&gt;.  &lt;/p&gt;

&lt;p&gt;Basically, web accessibility has to include features that ensure the visually impaired can still use elements on the page in a friendly way (ie. even through the use of screen readers). &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wcag-accessibility-requirements-for-responsive-tables-by-level" class="anchor"&gt;
  &lt;/a&gt;
  WCAG Accessibility Requirements for Responsive Tables (by level):
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#level-a" class="anchor"&gt;
  &lt;/a&gt;
  Level A
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt;    &lt;a href="https://www.w3.org/WAI/WCAG21/quickref/#info-and-relationships"&gt;1.3.1 Info and Relationships&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;2.&lt;/strong&gt;    &lt;a href="https://www.w3.org/WAI/WCAG21/quickref/#meaningful-sequence"&gt;1.3.2 Meaningful Sequence&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;3.&lt;/strong&gt;    &lt;a href="https://www.w3.org/WAI/WCAG21/quickref/#keyboard"&gt;2.1.1 Keyboard&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;4.&lt;/strong&gt;    &lt;a href="https://www.w3.org/WAI/WCAG21/quickref/#name-role-value"&gt;4.1.2 Name, Role, Value&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#level-aa" class="anchor"&gt;
  &lt;/a&gt;
  Level AA
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;5.&lt;/strong&gt;    &lt;a href="https://www.w3.org/WAI/WCAG21/quickref/#reflow"&gt;1.4.10 Reflow&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;6.&lt;/strong&gt;    &lt;a href="https://www.w3.org/WAI/WCAG21/quickref/#non-text-contrast"&gt;1.4.11 Non-text Contrast&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;7.&lt;/strong&gt;    &lt;a href="https://www.w3.org/WAI/WCAG21/quickref/#headings-and-labels"&gt;2.4.6 Headings and Labels&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;8.&lt;/strong&gt;    &lt;a href="https://www.w3.org/WAI/WCAG21/quickref/#focus-visible"&gt;2.4.7 Focus Visible&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#steps-to-web-accessible-html-tables" class="anchor"&gt;
  &lt;/a&gt;
  Steps to Web Accessible HTML Tables
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#step-1-create-table-with-appropriate-html-tags" class="anchor"&gt;
  &lt;/a&gt;
  Step 1: Create Table With Appropriate HTML Tags
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;table&amp;gt;
      &amp;lt;caption id="table1Caption"&amp;gt;Example Accessible Table&amp;lt;/caption&amp;gt;
    &amp;lt;thead&amp;gt;
      &amp;lt;tr&amp;gt;
        &amp;lt;th&amp;gt;Number&amp;lt;/th&amp;gt;
        &amp;lt;th&amp;gt;WCAG Compliance Level&amp;lt;/th&amp;gt;
        &amp;lt;th&amp;gt;Requirement&amp;lt;/th&amp;gt;
        &amp;lt;th&amp;gt;Step Requirement is Hit&amp;lt;/th&amp;gt;
      &amp;lt;/tr&amp;gt;
    &amp;lt;/thead&amp;gt;
    &amp;lt;tbody&amp;gt;
      &amp;lt;tr&amp;gt;
        &amp;lt;td&amp;gt;1&amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;A&amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;1.3.1 Info and Relationships&amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;1&amp;lt;/td&amp;gt;
      &amp;lt;/tr&amp;gt;
      &amp;lt;tr&amp;gt;
        &amp;lt;td&amp;gt;2&amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;A&amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;1.3.2 Meaningful Sequence&amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;1&amp;lt;/td&amp;gt;
      &amp;lt;/tr&amp;gt;
      ...
      ...
  &amp;lt;/tbody&amp;gt;
&amp;lt;/table&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#requirements-this-hits" class="anchor"&gt;
  &lt;/a&gt;
  Requirements this hits:
&lt;/h5&gt;

&lt;p&gt;&lt;strong&gt;1, 2, 7&lt;/strong&gt;&lt;br&gt;
When filling in your table with data, all you have to do is use the correct HTML tags in the appropriate locations, such as &lt;code&gt;&amp;lt;thead&amp;gt;&lt;/code&gt; for the header row, &lt;code&gt;&amp;lt;tbody&amp;gt;&lt;/code&gt; for the body rows, &lt;code&gt;&amp;lt;tr&amp;gt;&lt;/code&gt; for a row, and &lt;code&gt;&amp;lt;th&amp;gt;&lt;/code&gt; (header cell) or &lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt; (body cell) for cells within a row.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#step-2-html" class="anchor"&gt;
  &lt;/a&gt;
  Step 2: HTML
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div role="region" aria-labelledby="table1Caption" tabindex="0"&amp;gt;
        &amp;lt;table&amp;gt;[…]&amp;lt;/table&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h5&gt;
  &lt;a href="#requirements-this-hits" class="anchor"&gt;
  &lt;/a&gt;
  Requirements this hits:
&lt;/h5&gt;

&lt;p&gt;&lt;strong&gt;3, 4&lt;/strong&gt;&lt;br&gt;
Keyboard readers require an accessible name for any element that receives focus. This is handled by the &lt;code&gt;aria-labelledby&lt;/code&gt; and &lt;code&gt;role&lt;/code&gt; attributes. Your table caption ID should match the &lt;code&gt;aria-labelledby&lt;/code&gt; value, and region is used as the &lt;code&gt;role&lt;/code&gt; value since it is a generic landmark.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#step-3-css" class="anchor"&gt;
  &lt;/a&gt;
  Step 3: CSS
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[role="region"][aria-labelledby][tabindex] {
  overflow: auto;
}

[role="region"][aria-labelledby][tabindex]:focus {
  outline: .1em solid rgba(0,0,0,.1);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h5&gt;
  &lt;a href="#requirements-this-hits" class="anchor"&gt;
  &lt;/a&gt;
  Requirements this hits:
&lt;/h5&gt;

&lt;p&gt;&lt;strong&gt;5, 6, 8&lt;/strong&gt;&lt;br&gt;
The &lt;code&gt;overflow:auto&lt;/code&gt; CSS property identified under the &lt;code&gt;[role="region"][aria-labelledby][tabindex]&lt;/code&gt; selector prevents the entire page from having two axes of scrolling, hitting requirement &lt;strong&gt;5&lt;/strong&gt;.&lt;br&gt;
The &lt;code&gt;outline&lt;/code&gt; CSS property, when used with a 3:1 contrast ratio covers both requirements &lt;strong&gt;6&lt;/strong&gt; and &lt;strong&gt;8&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Adrian Roselli also notes in his article: &lt;br&gt;
&lt;em&gt;This selector ensures the table will not be clipped unless the HTML is properly marked up to be accessible to keyboard and screen reader users. This approach is better than relying on a class or id as a selector since it helps enforce the needed HTML. You can tweak it to your needs, perhaps by using [tabindex="0"] instead of [tabindex] or [role] instead of [role="region"], but it partly depends on what you need to enforce.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#final-example" class="anchor"&gt;
  &lt;/a&gt;
  Final Example
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/lukekyl/embed/vYXLmKN?height=600&amp;amp;default-tab=html,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#resources" class="anchor"&gt;
  &lt;/a&gt;
  Resources
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://adrianroselli.com/2020/11/under-engineered-responsive-tables.html"&gt;Under Engineered Responsive Tables by Adrian Roselli&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.w3.org/WAI/WCAG21/quickref/?currentsidebar=%23col_customize&amp;amp;tags=tables"&gt;W3 WCAG How to Meet WCAG Quick Reference with Table filter applied&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Hopefully this list is somewhat helpful to some of my fellow Front-end developers in keeping their projects and websites web accessible. Accessibility doesn't have to be difficult!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What techniques do you use in making your own sites accessible? &lt;/p&gt;

&lt;p&gt;Are there any accessibility tools or topics you would like to learn more about?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let me know in the comments!&lt;/p&gt;

</description>
      <category>a11y</category>
      <category>html</category>
      <category>css</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Top 5 DEV Comments from the Past Week</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Thu, 03 Dec 2020 21:33:03 +0000</pubDate>
      <link>https://dev.to/devteam/top-5-dev-comments-from-the-past-week-54hg</link>
      <guid>https://dev.to/devteam/top-5-dev-comments-from-the-past-week-54hg</guid>
      <description>&lt;p&gt;This is a weekly roundup of awesome DEV comments that you may have missed.  You are welcome and encouraged to boost posts and comments yourself using the &lt;strong&gt;&lt;a href="https://dev.to/t/bestofdev"&gt;#bestofdev&lt;/a&gt;&lt;/strong&gt; tag.&lt;/p&gt;

&lt;p&gt;&lt;a class="comment-mentioned-user" href="https://dev.to/mpodlasin"&gt;@mpodlasin&lt;/a&gt;
 shared this on-point response to &lt;a href="https://dev.to/patarapolw/please-explain-why-i-need-software-architecture-fe5"&gt;"Please explain why I need software architecture"&lt;/a&gt; &lt;/p&gt;


&lt;div class="liquid-comment"&gt;
    &lt;div class="details"&gt;
      &lt;a href="/mpodlasin"&gt;
        &lt;img class="profile-pic" src="https://res.cloudinary.com/practicaldev/image/fetch/s--JTr_6JYJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--M1y0zJ58--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_50%2Cq_auto%2Cw_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/444444/0b2d63e2-03ad-4db7-99b0-caa86c9d2c4f.jpeg" alt="mpodlasin profile image"&gt;
      &lt;/a&gt;
      &lt;a href="/mpodlasin"&gt;
        &lt;span class="comment-username"&gt;Mateusz Podlasin&lt;/span&gt;
      &lt;/a&gt;
      &lt;span class="color-base-30 px-2"&gt;•&lt;/span&gt;
&lt;a href="https://dev.to/mpodlasin/comment/18iok" class="comment-date crayons-link crayons-link--secondary fs-s"&gt;
  &lt;time&gt;
    Dec  2
  &lt;/time&gt;
&lt;/a&gt;

    &lt;/div&gt;
    &lt;div class="body"&gt;
      &lt;p&gt;The answer is simple.&lt;/p&gt;

&lt;p&gt;When you begin coding, you &lt;em&gt;shouldn't&lt;/em&gt; worry about those. At all.&lt;/p&gt;

&lt;p&gt;And then, when you write sufficiently complex projects, your code will become a horrible mess... and then you will understand. :)&lt;/p&gt;


    &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;It's always heartening to hear that a global event like Hacktoberfest is what brought someone to DEV. We're thrilled to have you as part of the community, &lt;a class="comment-mentioned-user" href="https://dev.to/busseyl"&gt;@busseyl&lt;/a&gt;
 — and congrats on completing Hacktoberfest 🎉 &lt;br&gt;
&lt;/p&gt;
&lt;div class="liquid-comment"&gt;
    &lt;div class="details"&gt;
      &lt;a href="/busseyl"&gt;
        &lt;img class="profile-pic" src="https://res.cloudinary.com/practicaldev/image/fetch/s--SDnTQyxO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--OK-rSFua--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_50%2Cq_auto%2Cw_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/527440/19c2bcf9-ba69-4d6f-9b66-84f2b517a692.jpeg" alt="busseyl profile image"&gt;
      &lt;/a&gt;
      &lt;a href="/busseyl"&gt;
        &lt;span class="comment-username"&gt;Lucas Bussey&lt;/span&gt;
      &lt;/a&gt;
      &lt;span class="color-base-30 px-2"&gt;•&lt;/span&gt;
&lt;a href="https://dev.to/busseyl/comment/18khb" class="comment-date crayons-link crayons-link--secondary fs-s"&gt;
  &lt;time&gt;
    Dec  3
  &lt;/time&gt;
&lt;/a&gt;

    &lt;/div&gt;
    &lt;div class="body"&gt;
      &lt;p&gt;I've been reading DEV articles for years now and have always enjoyed the articles. Finally signed up to claim my Hacktoberfest (something else I've been participating in since the very first year).&lt;/p&gt;

&lt;p&gt;Thank you to everyone who supports this great community!&lt;/p&gt;


    &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Super interesting response by &lt;a class="comment-mentioned-user" href="https://dev.to/andreidascalu"&gt;@andreidascalu&lt;/a&gt;
 to &lt;a href="https://dev.to/koreymoffett/why-does-php-get-so-much-hate-42ca"&gt;Why Does PHP Get So Much Hate&lt;/a&gt;. I learned a lot from this. &lt;/p&gt;


&lt;div class="liquid-comment"&gt;
    &lt;div class="details"&gt;
      &lt;a href="/andreidascalu"&gt;
        &lt;img class="profile-pic" src="https://res.cloudinary.com/practicaldev/image/fetch/s--T5ZdfCU5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--fVBw4fEF--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_50%2Cq_auto%2Cw_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/110539/0e53c571-51ed-4cbc-8840-7399b45a4944.jpeg" alt="andreidascalu profile image"&gt;
      &lt;/a&gt;
      &lt;a href="/andreidascalu"&gt;
        &lt;span class="comment-username"&gt;Andrei Dascalu&lt;/span&gt;
      &lt;/a&gt;
      &lt;span class="color-base-30 px-2"&gt;•&lt;/span&gt;
&lt;a href="https://dev.to/andreidascalu/comment/18di7" class="comment-date crayons-link crayons-link--secondary fs-s"&gt;
  &lt;time&gt;
    Nov 26
  &lt;/time&gt;
&lt;/a&gt;

    &lt;/div&gt;
    &lt;div class="body"&gt;
      &lt;p&gt;I've got 17 years of PHP under the belt and there are some points to be said:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;PHP is a victim of its popularity. With lots of sites across the internet in PHP, there are many old versions there, each bearing significant differences, enough to be a pain to developers migrating between projects&lt;/li&gt;
&lt;li&gt;Wordpress. Just look at it. Its development is soundly grounded in early php 5 versions. If you have any format programming training, looking at the Wordpress API will leave you wondering if those guys simply hated OOP or any kind of engineering best practices (spoiler: no, but PHP became OOP-ish fairly late for Wordpress to change). Many say that Wordpress is what helped PHP survive enough to become a real language in the later 7.x installments&lt;/li&gt;
&lt;li&gt;inconsistent API. The core PHP API has always been messy (tons of 'utility' functions thrown around, inconsistent parameters, interfaces you can't implement, etc)&lt;/li&gt;
&lt;li&gt;it's a web language but ... needs a third-party server to run? That's the biggest pain and WTF for me. At some point PHP got a server as part of its platform, but with a big "don't use in production" sign. Just about any language comes with some webserver implementation as part of its core platform (Java, nodejs, Go, Rust, you name it). Some still recommend using an efficient reverse proxy / balancer (eg: node) but for most others you get it out of the box. PHP has FPM but still can't function without Apache/Nginx. Rubbing salt on the wound: in today's cloud-native world, you can't containerize PHP to simply work with an Nginx ingress or Cloud LB, you still need to package another damn webserver. Ok, nowadays there's a nice multithreaded application platform (Roadrunner) that removes the need for fpm &amp;amp; nginx.&lt;/li&gt;
&lt;li&gt;the fact that some many radically different versions still live make it difficult to progress as a developer and easy to get trapped in bad code world. Myself as a job candidate keep underlying that I 'support' only PHP &amp;gt;= 7.3, I won't take jobs developing PHP for older versions unless their primary medium-term goal is migration.&lt;/li&gt;
&lt;/ul&gt;


    &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;That's some great advice, &lt;a class="comment-mentioned-user" href="https://dev.to/toddpress"&gt;@toddpress&lt;/a&gt;
 👀&lt;br&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="liquid-comment"&gt;
    &lt;div class="details"&gt;
      &lt;a href="/toddpress"&gt;
        &lt;img class="profile-pic" src="https://res.cloudinary.com/practicaldev/image/fetch/s--2XxMZQpX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--9Ag_IhjP--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_50%2Cq_auto%2Cw_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/230206/995dd188-6ecb-4b5a-a430-e40138b31280.jpeg" alt="toddpress profile image"&gt;
      &lt;/a&gt;
      &lt;a href="/toddpress"&gt;
        &lt;span class="comment-username"&gt;Todd Pressley&lt;/span&gt;
      &lt;/a&gt;
      &lt;span class="color-base-30 px-2"&gt;•&lt;/span&gt;
&lt;a href="https://dev.to/toddpress/comment/18ge1" class="comment-date crayons-link crayons-link--secondary fs-s"&gt;
  &lt;time&gt;
    Nov 29
  &lt;/time&gt;
&lt;/a&gt;

    &lt;/div&gt;
    &lt;div class="body"&gt;
      &lt;p&gt;Thank you for articulating this in your own way and publishing :) This topic reminds me of something a favorite mentor once taught me, when confused about naming a particular function:  &lt;/p&gt;

&lt;p&gt;&lt;em&gt;"If you're having trouble naming a function, then it's most likely doing too many things."&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;Years later, when encountering similar issues, I play this back in my head and have found it very useful. It can be expanded to naming just about anything. &lt;/p&gt;

&lt;p&gt;Again, love the article!&lt;/p&gt;


    &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Congrats to &lt;a class="comment-mentioned-user" href="https://dev.to/codebyjustin"&gt;@codebyjustin&lt;/a&gt;
 for their first post here on DEV!&lt;br&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="liquid-comment"&gt;
    &lt;div class="details"&gt;
      &lt;a href="/codebyjustin"&gt;
        &lt;img class="profile-pic" src="https://res.cloudinary.com/practicaldev/image/fetch/s--euBefSav--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--lsIvA4GA--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_50%2Cq_auto%2Cw_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/402916/67dd72f9-daa2-48a3-8a38-b89117768a7c.png" alt="codebyjustin profile image"&gt;
      &lt;/a&gt;
      &lt;a href="/codebyjustin"&gt;
        &lt;span class="comment-username"&gt;Justin&lt;/span&gt;
      &lt;/a&gt;
      &lt;span class="color-base-30 px-2"&gt;•&lt;/span&gt;
&lt;a href="https://dev.to/codebyjustin/comment/18ed2" class="comment-date crayons-link crayons-link--secondary fs-s"&gt;
  &lt;time&gt;
    Nov 27
  &lt;/time&gt;
&lt;/a&gt;

    &lt;/div&gt;
    &lt;div class="body"&gt;
      &lt;p&gt;My win was publishing my first Dev.to article :D &lt;/p&gt;


    &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;See you next week for more great comments ✌&lt;/p&gt;

</description>
      <category>bestofdev</category>
    </item>
  </channel>
</rss>
