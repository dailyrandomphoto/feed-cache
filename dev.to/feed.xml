<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>ODD-EVEN Number using Recursion in JS üöÄ</title>
      <author>Shubham Jadhav</author>
      <pubDate>Sat, 25 Sep 2021 05:54:10 +0000</pubDate>
      <link>https://dev.to/dev_shubham/odd-even-number-using-recursion-in-js-2l3g</link>
      <guid>https://dev.to/dev_shubham/odd-even-number-using-recursion-in-js-2l3g</guid>
      <description>&lt;p&gt;Hello Guys, Today is this article we are taking about Recursion. &lt;br&gt;
 We are solving and understanding a problem by using Recursion in JavaScript.&lt;/p&gt;

&lt;p&gt;üëâ Problem :- Find odd-even number using Recursion ? &lt;/p&gt;

&lt;p&gt;Let's start today's article... &lt;/p&gt;

&lt;p&gt;‚Ä¢ What is recursion? &lt;br&gt;
=&amp;gt; Recursion mean calling itself till condition not true. A function call itself that's function called Recursive function. &lt;/p&gt;

&lt;p&gt;‚Ä¢ How to find odd even number in JavaScript? &lt;br&gt;
=&amp;gt; We are finding odd-even number by dividing 2. When the reminder is 0 it's mean the number is even or reminder is 1, it is odd number. Right... &lt;/p&gt;

&lt;p&gt;We are using same logic in today's solving problem using recursion but different. &lt;/p&gt;

&lt;p&gt;üëâ Let's start solving problems&lt;/p&gt;

&lt;p&gt;‚Ä¢ First we create a function and pass one parameter. As following üëá&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cNVwKbAp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gmci707lxv50i6tn23n8.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cNVwKbAp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gmci707lxv50i6tn23n8.jpg" alt="img1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚Ä¢ We are using same logic as we use always to find odd even number but in this problem we are consider if the parameter's value is 0 it is even or if it's value is 1 it means number is odd. &lt;/p&gt;

&lt;p&gt;‚Ä¢ See following code to better understand, we are using if-else condition. üëá&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mJdnHXfQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ir7tmt0r97la5xcfq0d7.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mJdnHXfQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ir7tmt0r97la5xcfq0d7.jpg" alt="img2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚Ä¢ Now time to use recursion function but before using recursion we simply decrease parameter 'num' value by 2.&lt;br&gt;
Because odd and even number difference is 2 for example 1 and 3 difference is 2 and also 2 and 4 difference is 2. See below üëá&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dSAEeqPd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/33q7fenkp7afg02f32mh.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dSAEeqPd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/33q7fenkp7afg02f32mh.jpg" alt="img3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚Ä¢ In the above code, in a line number 14 we are calling a function that's mean it will call itself till when given condition not true. &lt;/p&gt;

&lt;p&gt;‚Ä¢ Let's check the output üëá&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y4tNd9oi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/thaycqa2egdrbxi8qezm.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y4tNd9oi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/thaycqa2egdrbxi8qezm.jpg" alt="img4"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;üôè Thanks for reading...&lt;br&gt;
üëâ Stay with us for more.... &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>From Zero to Hero in Game Design: Beginner's Guide</title>
      <author>Mr. Unity Buddy</author>
      <pubDate>Sat, 25 Sep 2021 05:45:33 +0000</pubDate>
      <link>https://dev.to/unitybuddy/from-zero-to-hero-in-game-design-beginner-s-guide-1p9m</link>
      <guid>https://dev.to/unitybuddy/from-zero-to-hero-in-game-design-beginner-s-guide-1p9m</guid>
      <description>&lt;p&gt;Hello, buddies! Game design is an exciting, rewarding, and multi-faceted field with promising job prospects. However, becoming a game designer can be a challenging journey. Passion, patience, and persistence are essential!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-does-a-game-designer-do"&gt;
  &lt;/a&gt;
  What does a game designer do?
&lt;/h2&gt;

&lt;p&gt;A game designer is a creative driver responsible for bringing a game to life. They are generally a cross between a writer, artist, and programmer. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It's not just about playing games and having ideas. You need to not only understand how to apply your ideas into many different, and often conflicting, areas of game design; you must also understand HOW to design, WHAT to design WHEN to design each feature, and WHY you are designing what you are designing.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Every game is comprised of several different gameplay systems, mechanics, and features which all work together to create a fun and engaging experience for players.&lt;/p&gt;

&lt;p&gt;Your responsibilities may vary on your team/studio, the type of game you are working on, etc. But generally, Game design is all about - Design, Art, Code, Audio, Polish, and Marketing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-design"&gt;
  &lt;/a&gt;
  1. Design
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yxValvt4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632411198754/ZZ-IenRKX.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yxValvt4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632411198754/ZZ-IenRKX.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
You‚Äôve got a great idea, But how do you capture it in writing?&lt;/p&gt;

&lt;p&gt;Everyone has their own way of doing their best. Some compose 60-page design documents. Others, like me, write a page of badly-written notes, unreadable to anyone else. I don‚Äôt know what‚Äôs best for you. But I can give suggestions on what to write about:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Hook -  What makes your game idea great? Is it something that no one has done before?&lt;/li&gt;
&lt;li&gt;Mechanics - What does your player do?  Fighting with enemies to save the world, or just running to escape from evil?&lt;/li&gt;
&lt;li&gt;Story -  This may not be required in some types of games like hyper-casual. But in shooting games, puzzle-like games, etc it is important!. &lt;/li&gt;
&lt;li&gt;Mood - What impression does your game make? What are the visuals? Sound? First impressions matter. First impressions will hook ‚Äî then keep ‚Äî the player playing.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Use Notepad, Trello, or just a paper and a pencil for writing your ideas!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#art"&gt;
  &lt;/a&gt;
  Art
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nTxXdeGA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632412307553/tjR7v5IvL.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nTxXdeGA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632412307553/tjR7v5IvL.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
Art is essential for a game. Mainly, the Art part in a game contains, UI design and 2D Animations.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#ui"&gt;
  &lt;/a&gt;
  UI
&lt;/h3&gt;

&lt;p&gt;Think about a way that you can make your UI look unique and attractive ‚Äî have a distinct color scheme, font(s), shape(s), and icon(s) ‚Äî while &lt;em&gt;functional&lt;/em&gt;. Also, it should be readable so the Player can gain the correct info.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#2d-animations"&gt;
  &lt;/a&gt;
  2D Animations
&lt;/h3&gt;

&lt;p&gt;Don't worry, 2D Animations aren't hard as you think! &lt;/p&gt;

&lt;p&gt;If you need icons, fonts, and other UI stuff, just head to Behance. And if would recommend Blender for creating 3D assets or if you feel boring with doing everything yourself, just head over to &lt;a href="https://assetstore.unity.com/"&gt;Unity Asset Store!&lt;/a&gt;(If you're using Unity as a Game Engine)&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j_jrWfcD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632411285141/GpX75nn_K.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j_jrWfcD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632411285141/GpX75nn_K.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
Just don't fear this. I didn't know anything about C# or any other language before starting to make games!&lt;/p&gt;

&lt;p&gt;First, Decide on a game engine and an IDE (Integrated Development Environment ‚Äî basically, an app that lets you code). My recommended game engines + IDEs are in the Resources below.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Game Engines&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Unity(Great for beginners and have a large community)&lt;/li&gt;
&lt;li&gt;Unreal Engine&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;IDEs&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Visual Studio Code (For Mac)&lt;/li&gt;
&lt;li&gt;Visual Studio Community (For Windows)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So if you are a new buddy for C#/C++ or programming, just don't worry! You can learn them easily.&lt;/p&gt;

&lt;p&gt;Here let's see examples that you will need(these are written in C#, which is used in Unity. Very similar to C++)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Data types and variables&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The root of all code is data. That data is stored in variables. In games, GameObjects, Texts, are some examples of data stored in Variables. You can declare a variable like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;int&lt;/code&gt; is the data type. i is the variable name. And that &lt;code&gt;= 0&lt;/code&gt; assigns zero as the variable value.&lt;/p&gt;

&lt;p&gt;Some common data types: &lt;code&gt;int&lt;/code&gt; is an integer. &lt;code&gt;float&lt;/code&gt; and &lt;code&gt;double&lt;/code&gt; are decimal numbers. And &lt;code&gt;string&lt;/code&gt; is any sentence or a word. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If statements.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If statements evaluate if a certain condition is true. If it is, run the code that‚Äôs inside the if statement:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt; &lt;span class="c1"&gt;//true is always true!&lt;/span&gt;

    &lt;span class="nf"&gt;doThings&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;//I'm inside the if statement's brackets, run me!&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the condition isn‚Äôt true, we can evaluate other conditions with else if:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt; 

   &lt;span class="nf"&gt;doThings&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;

   &lt;span class="nf"&gt;doOtherThings&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;//I'm gonna be run!&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or, just run some other code with else:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;60000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;

  &lt;span class="nf"&gt;doThings&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; 

&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="nf"&gt;doOtherThings&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;//Again, I will run &lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;For/while loops&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;While loops continue while a certain condition is still true, executing the same lines of code over and over again. When the condition is false, the while loop exits.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;someBool&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt; &lt;span class="c1"&gt;//condition&lt;/span&gt;

   &lt;span class="nf"&gt;doThings&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;//We'll keep doing things until someBool is false&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;How long does this while loop last?&lt;/p&gt;

&lt;p&gt;Only while &lt;code&gt;someBool&lt;/code&gt; is true. When it becomes, False, &lt;code&gt;while&lt;/code&gt; loop will stop.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;

  &lt;span class="nf"&gt;doThings&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For loops are basically while loops where:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt; 

    &lt;span class="nf"&gt;doThings&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;++;&lt;/span&gt; &lt;span class="c1"&gt;//increment after doing things&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That‚Äôs equivalent to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;++){&lt;/span&gt;

    &lt;span class="nf"&gt;doThings&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Basic data structures.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So, we have data, and we ways to evaluate and manipulate that data. We can also store that data into some structure ‚Äî a data structure. Data structures you should know(As a Game Dev) are arrays, lists, and sets.&lt;/p&gt;

&lt;p&gt;Here‚Äôs a quick example of an array:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="cm"&gt;/*
Say you have numbers 0 through 9 that you want to store somewhere. You can store it in an array!
*/&lt;/span&gt;
&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// An array of floats&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;ages&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// An array of integers&lt;/span&gt;

&lt;span class="cm"&gt;/* 
If need an array of Gameobjects,

GameObject[] objects; // Depends on Game Engine
*/&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The [] brackets declare an array. We assign a new array to arr of size 10 - that means it can hold 10 elements. Array now looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;array&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;*/&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;++){&lt;/span&gt;

    &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//We assign whatever i is to the the ith index of the array.&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/*
After the for loop, our array data structure should look like this!
arr = [ 0 1 2 3 4 5 6 7 8 9 ]
*/&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Functions and exceptions.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Functions are basically a small line of code describing a big bunch of code. For example, if you call:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="nf"&gt;EatChoco&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;And&lt;/span&gt; &lt;span class="nf"&gt;EatChoco&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;looks&lt;/span&gt; &lt;span class="n"&gt;like&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

&lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;EatChoco&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt; &lt;span class="c1"&gt;//&amp;lt;---this is a function. &lt;/span&gt;

   &lt;span class="n"&gt;chocoAte&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

   &lt;span class="n"&gt;Debu&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"I hope mom won't find I ate her chocolate"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then the call to &lt;code&gt;EatChoco()&lt;/code&gt; is actually a call to the two statements within the &lt;code&gt;EatChoco()&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;If you do something bad in your code, an exception might get thrown. They‚Äôre angry red errors there to tell you, hey, back up, what you did right there just ain‚Äôt workin‚Äò out logically. Go revise it.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PFd5EXTj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632243483179/udMApnEvf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PFd5EXTj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632243483179/udMApnEvf.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
RIP&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Language&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;What language are you going to code in? C++? Javascript? C#? Every language is written somewhat differently and can let you do different things! Just don't let others demotivate you.&lt;/p&gt;

&lt;p&gt;Not only learn by doing but learn by seeing is also a great way by the way!&lt;/p&gt;

&lt;p&gt;Unreal and Unity both have a ton of free example projects. This‚Äôll let you discover how everything comes together. Plus, you can build your game idea off of the project.&lt;/p&gt;

&lt;p&gt;I know. Coding is scary at first. Nothing makes sense, you‚Äôre hitting constant roadblocks, and you might want to quit in the face of failures and exceptions. It doesn‚Äôt mean you‚Äôre bad at coding. Coding is challenging. It‚Äôs understandable to feel incompetent at first.&lt;/p&gt;

&lt;p&gt;But it just takes time, like any other skill. It‚Äôll get easier and fun!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#audio"&gt;
  &lt;/a&gt;
  Audio
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s8KX3pCH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632411742546/MseRW9uUc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s8KX3pCH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632411742546/MseRW9uUc.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
Audio can do wonders for immersion and mood. But, it can cost memory.&lt;/p&gt;

&lt;p&gt;Will you include music? Sound effects? Voiceovers or narration?&lt;/p&gt;

&lt;p&gt;For any of the above, record and mix them in a way that matches your game‚Äôs mood. For example, Bastion uses organic mouth and instrument sounds, matching its game world. Crypt of the Necrodancer uses a blend of electronic beats and chiptune rock to match the colorful, rhythmic game.&lt;/p&gt;

&lt;p&gt;Just check out the below resources!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://soundcloud.com/"&gt;Soundcloud&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://incompetech.com/music/"&gt;Incompetech&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.bensound.com/royalty-free-music"&gt;Bensound&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#polish"&gt;
  &lt;/a&gt;
  Polish
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R3JzmJiv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632412097111/keW3SsUHX.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R3JzmJiv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632412097111/keW3SsUHX.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
Finally, you've made a game! Congrats! But wait, this is not the end. We have to polish it before selling it!&lt;/p&gt;

&lt;p&gt;You‚Äôre done.. right?&lt;/p&gt;

&lt;p&gt;Well. There‚Äôs a 99.99999% chance there‚Äôre bugs.&lt;/p&gt;

&lt;p&gt;It‚Äôs time to bug test! &lt;/p&gt;

&lt;p&gt;Just don't do it yourself. Ask your friends. Of course, they'll be very happy to get early access for a new game! And be sure to play it on all targeted platforms. Sometimes, it might work well on Editor but in an android, it won't work. &lt;/p&gt;

&lt;p&gt;Alright, you found a bug. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Check the console for exceptions&lt;/strong&gt; Found one? Great! Find the file and line number where the exception was thrown. If the exception sounds like something from Mars or Jupiter, Google it and learn about it. Then figure out why that line number is throwing that exception.&lt;/p&gt;

&lt;p&gt;Still can‚Äôt figure it out? Write to console. Start tossing in them log statements in the place(s) you think are causing you trouble. Print variable values, and see whether what‚Äôs printed is what‚Äôs expected. If not, fix that. (&lt;code&gt;Debug.Log()&lt;/code&gt; is useful in that case. &lt;a href="https://docs.unity3d.com/ScriptReference/Debug.Log.html"&gt;More info&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;When worse comes to worst, check logs. The logs of your project will give you way more info than the console. Read the last lines where the exception occurred. Google anything you don‚Äôt know. Can you fix it now?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Sleep. It‚Äôll get fixed in the morning. This is just a bad dream. Right? (This is an approved solution, to be honest)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let's see some common errors (specially in Unity).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;NullReferenceException&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;var&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;doThing&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;//throws NullReferenceException: Object reference not set to an instance of an object&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Problem: You‚Äôre doing a thing on a null (nonexistent) variable.&lt;/p&gt;

&lt;p&gt;Quick fix: Check if the variable is null before doing the thing.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if(var != null)
    {
        var.doThing(); // do the thing safely!
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;SyntaxErrorException.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Problem: Your code has invalid syntax.&lt;/p&gt;

&lt;p&gt;Quick fix: In the Exception message, it should tell you what character is throwing the error. Change that character.&lt;/p&gt;

&lt;p&gt;Note: If the character is a double quote, make sure you‚Äôre using dumb quotes instead of smart quotes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="s"&gt;" //dumb quote
&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt; &lt;span class="c1"&gt;//smart quote.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Pink or black screen.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Possible problem: Some shaders can‚Äôt render.&lt;/p&gt;

&lt;p&gt;Possible causes: You‚Äôre using a 3D shader for a 2D game. Or, you‚Äôre using some shader feature unsupported by the target OS. Be sure to use mobile shaders for mobile games.&lt;/p&gt;

&lt;p&gt;Great, you've nicely polished your game! Then, the most important thing,&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#market"&gt;
  &lt;/a&gt;
  Market
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H47nYcZJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632412246580/UUBIQpFan.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H47nYcZJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632412246580/UUBIQpFan.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
Congrats! You‚Äôve made something. It‚Äôs time to show the world what you‚Äôve made.&lt;/p&gt;

&lt;p&gt;In general, marketing is our most anxiety-inducing stage. If you, too, get doubtful, the game developer community is helpful. You‚Äôre not alone in this. And you‚Äôve come so far ‚Äî might as well get through to the end, right?&lt;/p&gt;

&lt;p&gt;Good. So now what? Let's see with the essentials. You'll need:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A website&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Whether your website acts as a home base for all of your games, or just the one you're currently working on, it needs to be updated frequently and departmentalized. The home page should feature an extended overview, captivating screenshots (a picture of your UI isn't all that exciting), and relevant links. You'll also need a media page that houses images or videos. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Active Social Media&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;At the very least you should have a Facebook page and a Twitter profile. If your game is small or mid-sized this is probably enough, but in theory, you could subscribe to dozens of social media outlets. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A development blog:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;While development blogs are less essential than a website and a strong social media presence, gamers and developers alike love to read about the personal struggles and triumphs associated with making a game. Keep it personal, as if you're speaking directly to your readers. Humanize yourself and viewers will connect with and appreciate your plight. Post as frequently as necessary, but try to avoid posting about every little bug fix or new art piece. It's enough simply to prove that your game is coming along.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Trailers&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This comes a bit later but is probably one of the single most important things you can do to get people excited to play your game. Don't overload it with cheesy titles, and don't think you have to be an expert cinematographer to produce a compelling video. Instead, target each facet of gameplay at least once, clearly display the game's title and the name of your company (you do have one, right?), and keep the cut scenes down to a minimum.&lt;/p&gt;

&lt;p&gt;And remember to document everything and share them with your fellow team members!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g6mACXd5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632409948146/45EDKbG0u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g6mACXd5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632409948146/45EDKbG0u.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
Great documentation(I think so.. üòáüòá)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here are some tips that may help you to blow your game on Social Media&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The r/IndieGaming subreddit is a great place to link your YouTube trailers, preview, reviews and game demos. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Your website should link to your social media accounts. Your Twitter account should have links to your Facebook page and website. Your Facebook page... you get the point!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;It's worse to have a grossly outdated Facebook page and website than none at all. Keep things current. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you must relay your game dev failings to the Internet, try to be funny about it. The same goes for your announcements.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There‚Äôs no cheat code to making a game. It‚Äôs just a lot of determination and effort. You‚Äôll get confused. You‚Äôll make mistakes. You might even cry!&lt;/p&gt;

&lt;p&gt;But that‚Äôs okay. It means you‚Äôre growing. If you‚Äòre putting in that much effort, I believe in you and your game: You can do it!&lt;/p&gt;

&lt;p&gt;If you ever want a hearing ear, just Email me. I would be happy to help you technically as well but for now, I'm a little bit busy. Anyway, my inbox is open!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lKMyVQFp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632411088307/Xpi70m0D_.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lKMyVQFp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632411088307/Xpi70m0D_.gif" alt="1ws.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mr-unity-buddy.hashnode.dev/from-zero-to-hero-in-game-design-beginners-guide"&gt;Originally&lt;/a&gt; published on Hashnode&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gameifyouare.com/2019/05/15/indie-game-marketing-101-part-1-a-beginners-guide-to-games-marketing/"&gt;https://gameifyouare.com/2019/05/15/indie-game-marketing-101-part-1-a-beginners-guide-to-games-marketing/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.process.st/indie-game-marketing/"&gt;https://www.process.st/indie-game-marketing/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://elearningindustry.com/advertise/elearning-marketing-resources/blog/beginners-guide-marketing-your-games-online"&gt;https://elearningindustry.com/advertise/elearning-marketing-resources/blog/beginners-guide-marketing-your-games-online&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.gamedeveloper.com/discipline/a-beginner-s-guide-to-making-your-own-games"&gt;https://www.gamedeveloper.com/discipline/a-beginner-s-guide-to-making-your-own-games&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>gamedev</category>
      <category>beginners</category>
      <category>guide</category>
      <category>unity</category>
    </item>
    <item>
      <title>Difference Between Content Writing Vs Blogger in 2021</title>
      <author>Blog triggers</author>
      <pubDate>Sat, 25 Sep 2021 04:49:57 +0000</pubDate>
      <link>https://dev.to/blogtriggers/difference-between-content-writing-vs-blogger-in-2021-88i</link>
      <guid>https://dev.to/blogtriggers/difference-between-content-writing-vs-blogger-in-2021-88i</guid>
      <description>&lt;p&gt;We‚Äôve all heard of content marketing. You probably even have a blog that ‚Äúmarkets‚Äù your business. But have you ever wondered what the &lt;b&gt;&lt;a href="https://www.blogtriggers.com/2021/05/difference-between-bloggers-vs-content-writers.html"&gt;difference between content writing vs blogger&lt;/a&gt;&lt;/b&gt; is?&lt;/p&gt;

&lt;p&gt;The terms ‚Äúcontent writing‚Äù and ‚Äúblogger‚Äù have been making a lot of buzz for a while now. In this article, we will focus on the differences between the two.&lt;/p&gt;

&lt;h1&gt;Blogger Vs Content Writing&lt;/h1&gt;

&lt;p&gt;Content writing and blogger are two different things. The former is specific and the latter is generic.&lt;/p&gt;

&lt;p&gt;1) &lt;b&gt;Content writing&lt;/b&gt;, as the name suggest, deals with creating content to keep your website or blog updated. Here content means all those things that you come across on websites - from product reviews to news. &lt;/p&gt;

&lt;p&gt;1) &lt;b&gt;Blogger&lt;/b&gt;, on the other hand, describes a person whose hobby is to write blogs. Anyone who has a blog can be called a blogger irrespective of the content being blogged about.&lt;/p&gt;

&lt;p&gt;2) &lt;b&gt;Content writers&lt;/b&gt; need a degree in journalism, a short but highly competitive qualifying test, and a number of years of experience before they can make their own schedules.&lt;/p&gt;

&lt;p&gt;2) &lt;b&gt;Bloggers&lt;/b&gt; need nothing more than a computer with an Internet connection.&lt;/p&gt;

&lt;p&gt;3) A &lt;b&gt;content writer&lt;/b&gt; produces work that is factual and meant to inform and engage their audience&lt;/p&gt;

&lt;p&gt;3) A &lt;b&gt;blogger's&lt;/b&gt; writing is more personally oriented and opinionated.&lt;/p&gt;

&lt;p&gt;4) A &lt;b&gt;content writer&lt;/b&gt; is an expert writer who is capable of writing long content ranging from 500 words to 5000 or 10,000 words&lt;/p&gt;

&lt;p&gt;4) A &lt;b&gt;blogger&lt;/b&gt; or a freelancer is a general type of author that writes anything and everything.&lt;/p&gt;

&lt;p&gt;5)&lt;b&gt;Content writers&lt;/b&gt; on the other hand wont be published frequently at all, content writers might write only once a month and it will be a complete package of materials that can reach an industry, market or company. You cannot expect for a content writer to reach the peak of his/her career in just months. ¬†&lt;/p&gt;

&lt;p&gt;5) &lt;b&gt;Bloggers&lt;/b&gt; write to express an emotion or opinion. Blogger is usually written everytime they want to do such thing. So bloggers aim to publish several articles each day&lt;/p&gt;

&lt;p&gt;I hope you learn something new Things related to blogger vs content writer&lt;/p&gt;

&lt;p&gt;If you want to Know more about blogging and SEO then visit our website &lt;b&gt;&lt;a href="https://www.blogtriggers.com"&gt;Blogtriggers&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;If you have any doubt regarding blogging and SEO then join our telegram group chat: &lt;b&gt;&lt;a href="https://t.me/blogtriggers_group"&gt;Blogtriggers Discussion Group&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
      <category>blogger</category>
      <category>contentwriter</category>
      <category>difference</category>
      <category>content</category>
    </item>
    <item>
      <title>Tips To Become Great Programmer Of All Time</title>
      <author>Coder Helper</author>
      <pubDate>Sat, 25 Sep 2021 04:43:23 +0000</pubDate>
      <link>https://dev.to/f79sd/tips-to-become-great-programmer-of-all-time-3ic8</link>
      <guid>https://dev.to/f79sd/tips-to-become-great-programmer-of-all-time-3ic8</guid>
      <description>&lt;p&gt;¬†A good programmer is someone who always looks both ways before crossing a one-way street. ~Doug Linder&lt;/p&gt;

&lt;p&gt;Let me start by saying that I do not consider myself to be a competent coder. I consider my coding abilities to be mediocre, and I am still learning and have a long way to go before I am even remotely satisfied with them.Yes, I am better at programming than a lot of others, but that is just because they are lazy and choose to sit about idle all day instead of programming. Their dreadful abilities make my less dreadful abilities appear fantastic.&lt;/p&gt;

&lt;p&gt;So most of the tips I will mention below are lessons learnt from failed endeavours, they are what I have wanted to be and I am not. So lets dive in.¬†&lt;/p&gt;

&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.codelivly.com/tips-to-become-a-great-programmer/"&gt;Tips to become a great programmer&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>The Ember Times - Issue No. 189</title>
      <author>The Ember Times</author>
      <pubDate>Sat, 25 Sep 2021 04:29:32 +0000</pubDate>
      <link>https://dev.to/embertimes/the-ember-times-issue-no-189-1c0l</link>
      <guid>https://dev.to/embertimes/the-ember-times-issue-no-189-1c0l</guid>
      <description>&lt;p&gt;üëã Emberistas! üêπ&lt;/p&gt;

&lt;p&gt;RFC: Asset Import Spec, ember-element-query v4, EmberFest 2021 - best of both worlds, Glimmer cheatsheet, and Glimmer Apollo v0.4.0.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#rfc-asset-import-spec"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/emberjs/rfcs/pull/763"&gt;‚úçÔ∏è RFC: Asset Import Spec&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/ef4"&gt;Edward Faulkner (@ef4)&lt;/a&gt; proposed a new &lt;a href="https://github.com/emberjs/rfcs/pull/763"&gt;RFC&lt;/a&gt; which defines the standard semantics for what it means to depend on files that are not JavaScript or CSS, like images, fonts, and other media. The ecosystem today mostly relies on &lt;a href="https://github.com/ember-cli/broccoli-asset-rev"&gt;broccoli-asset-rev&lt;/a&gt; which is a Broccoli plugin that adds fingerprint checksums and CDN URLs to your assets. The RFC argues that the broccoli-asset-rev plugin does not take advantage of the newer capabilities we have in &lt;a href="https://github.com/ef4/ember-auto-import"&gt;ember-auto-import&lt;/a&gt; and &lt;a href="https://github.com/embroider-build/embroider"&gt;embroider&lt;/a&gt;. The proposed pull-based design lets code declare what assets it needs and then not worry about how those assets will get delivered is safer and easier to change in the future.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;myImage&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./hello.png&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;myImage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;myImage&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight handlebars"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="k"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;myImage&lt;/span&gt;&lt;span class="k"&gt;}}&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If this is something you are interested in, please read and discuss the &lt;a href="https://github.com/emberjs/rfcs/pull/763"&gt;Asset Import Spec RFC on GitHub&lt;/a&gt;!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#emberelementquery-v4"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/lolmaus/ember-element-query/"&gt;‚ú® ember-element-query v4&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/lolmaus"&gt;Andrey Mikhaylov (@lolmaus)&lt;/a&gt; announced the &lt;a href="https://twitter.com/lolmaus_en/status/1424083417591914499"&gt;release&lt;/a&gt; of &lt;a href="https://github.com/lolmaus/ember-element-query/"&gt;ember-element-query&lt;/a&gt; v4, a &lt;strong&gt;complete rewrite for Octane&lt;/strong&gt; with a new convenient API.&lt;/p&gt;

&lt;p&gt;Element queries are a technique to do responsive transformations based on the element's own size, rather than the viewport size. You can implement reusable responsive components with encapsulated styles, that are decoupled from their parent context. Such components will realign their content depending on how much space is available to them.&lt;/p&gt;

&lt;p&gt;For example, if you put a responsive component into a tight sidebar, it will align its content vertically. When the sidebar expands, the component will realign horizontally, in order to efficiently use available space. Check out &lt;a href="https://www.smashingmagazine.com/2016/07/how-i-ended-up-with-element-queries-and-how-you-can-use-them-today/"&gt;Element Queries, And How You Can Use Them Today&lt;/a&gt; on Smashing Magazine to learn more.&lt;/p&gt;

&lt;p&gt;Historically, &lt;code&gt;ember-element-query&lt;/code&gt; was the first Ember addon to offer element queries out of the box, but back then it used an inefficient implementation and was written in the now-outdated Classic Ember paradigm. It served as one of inspirations for &lt;a href="https://github.com/chadian"&gt;Chad Carbert's (@chadian)&lt;/a&gt; &lt;a href="https://github.com/chadian/ember-fill-up"&gt;ember-fill-up&lt;/a&gt;. &lt;a href="https://www.youtube.com/watch?v=RIdjk9_RSBY"&gt;Announced&lt;/a&gt; at EmberFest 2019 as a proof-of-concept, &lt;code&gt;ember-fill-up&lt;/code&gt; saw no updates and was discontinued.&lt;/p&gt;

&lt;p&gt;The first element query addon to be released with feature completeness, full test coverage and lasting support was &lt;a href="https://github.com/ijlee2/"&gt;Isaac Lee's (@ijlee2)&lt;/a&gt; &lt;code&gt;ember-container-query&lt;/code&gt;, featured in &lt;a href="https://blog.emberjs.com/the-ember-times-issue-153/"&gt;The Ember Times #153&lt;/a&gt;. The re-release of &lt;code&gt;ember-element-query&lt;/code&gt; followed suit with a subjectively more convenient, opinionated API, backed by modern, efficient &lt;code&gt;ResizeObserver&lt;/code&gt; under the hood. &lt;a href="https://github.com/ijlee2/"&gt;@ijlee2&lt;/a&gt; provided kind support, criticism and generously shared the demo app with &lt;a href="https://github.com/lolmaus"&gt;@lolmaus&lt;/a&gt;'s &lt;code&gt;ember-element-query&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Check out the detailed &lt;a href="https://github.com/lolmaus/ember-element-query/"&gt;README&lt;/a&gt; and give the addon a spin!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#emberfest-2021-best-of-both-worlds"&gt;
  &lt;/a&gt;
  &lt;a href="https://emberfest.eu"&gt;üèõÔ∏è EmberFest 2021 - best of both worlds&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Next week, after a year of absence because of COVID, &lt;a href="https://emberfest.eu"&gt;EmberFest&lt;/a&gt; is back. On the 30th of September and the 1st of October, Emberistas will gather &lt;strong&gt;digitally&lt;/strong&gt; and &lt;strong&gt;on-site&lt;/strong&gt; in Rome to hear awesome Ember talks.&lt;/p&gt;

&lt;p&gt;There will be well-known EmberConf/Fest speakers like &lt;a href="https://github.com/MelSumner"&gt;Melanie Sumner (@MelSumner)&lt;/a&gt; and &lt;a href="https://github.com/ef4"&gt;Edward Faulkner (@ef4)&lt;/a&gt;, as well as first-time speakers like &lt;a href="https://github.com/BobrImperator"&gt;Bartlomiej Dudzik (@BobrImperator)&lt;/a&gt;, &lt;a href="https://github.com/JennyJudova"&gt;Jenny Judova (@JennyJudova)&lt;/a&gt;, and &lt;a href="https://github.com/ZoeBijl"&gt;Zo√´ Bijl (@ZoeBijl)&lt;/a&gt;. The &lt;a href="https://emberfest.eu/schedule/"&gt;line-up&lt;/a&gt; is super diverse and interesting for all Ember enthusiasts.&lt;/p&gt;

&lt;p&gt;Remote tickets are still available. A few on-site tickets too, if you plan on arriving at the last minute. We hope you enjoy EmberFest wherever you decide to join.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#%EF%B8%8F-glimmer-cheatsheet"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/nullvoxpopuli/status/1439652161625985037"&gt;‚ö°Ô∏è Glimmer Cheatsheet&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;If you've ever found the Ember Octane vs Ember Classic Cheat Sheet cheatsheet helpful, and you're also interested in Glimmer.js, you might want to check out the in-progress and exciting, but &lt;strong&gt;unofficial&lt;/strong&gt;, &lt;a href="https://cheatsheet.glimmer.nullvoxpopuli.com/docs"&gt;Glimmer Cheatsheet&lt;/a&gt; that &lt;a href="https://github.com/NullVoxPopuli"&gt;NullVoxPopuli (@NullVoxPopuli)&lt;/a&gt; recently started to put together.&lt;/p&gt;

&lt;p&gt;So far only part of the &lt;a href="https://cheatsheet.glimmer.nullvoxpopuli.com/docs/templates"&gt;templates page&lt;/a&gt; has been written, but if you're interested in contributing there is a rough outline and placeholder i18n to help get you started.&lt;/p&gt;

&lt;p&gt;Take a look at the &lt;a href="https://github.com/nullvoxpopuli/ember-cheat-sheet"&gt;GitHub repo&lt;/a&gt; or the &lt;a href="https://cheatsheet.glimmer.nullvoxpopuli.com/docs"&gt;deployed app&lt;/a&gt; for more!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#glimmer-apollo-v040"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/josemarluedke/status/1441532888072142859"&gt;üìà Glimmer Apollo v0.4.0&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/josemarluedke"&gt;Josemar Luedke (@josemarluedke)&lt;/a&gt; recently released a new &lt;a href="https://github.com/josemarluedke/glimmer-apollo/releases/tag/v0.4.0"&gt;v0.4.0&lt;/a&gt; of Glimmer Apollo that includes support for &lt;a href="https://glimmer-apollo.com/docs/fetching/subscriptions/"&gt;subscriptions&lt;/a&gt;! üî•&lt;/p&gt;

&lt;p&gt;If you haven't checked out Glimmer Apollo and you would like to make use of Apollo to access GraphQL data in your Glimmer or Ember app, you should take a look at this &lt;a href="https://github.com/josemarluedke/glimmer-apollo"&gt;exciting project&lt;/a&gt; and give &lt;a href="https://glimmer-apollo.com/docs"&gt;the docs&lt;/a&gt; a read.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#contributors-corner"&gt;
  &lt;/a&gt;
  &lt;a href="https://guides.emberjs.com/release/contributing/repositories/"&gt;üëè Contributors' corner&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This week we'd like to thank &lt;a href="https://github.com/davideferre" rel="noopener noreferrer"&gt;Davide Ferrero (@davideferre)&lt;/a&gt;, &lt;a href="https://github.com/chriskrycho" rel="noopener noreferrer"&gt;Chris Krycho (@chriskrycho)&lt;/a&gt;, &lt;a href="https://github.com/lifeart" rel="noopener noreferrer"&gt;Alex Kanunnikov (@lifeart)&lt;/a&gt;, &lt;a href="https://github.com/tben" rel="noopener noreferrer"&gt;Ben Tidy (@tben)&lt;/a&gt;, &lt;a href="https://github.com/enspandi" rel="noopener noreferrer"&gt;Andreas Minnich (@enspandi)&lt;/a&gt;, &lt;a href="https://github.com/StephanH90" rel="noopener noreferrer"&gt;@StephanH90&lt;/a&gt;, &lt;a href="https://github.com/NullVoxPopuli" rel="noopener noreferrer"&gt;@NullVoxPopuli&lt;/a&gt;, &lt;a href="https://github.com/jkeen" rel="noopener noreferrer"&gt;Jeff Keen (@jkeen)&lt;/a&gt;, &lt;a href="https://github.com/nlfurniss" rel="noopener noreferrer"&gt;Nathaniel Furniss (@nlfurniss)&lt;/a&gt;, &lt;a href="https://github.com/ro0gr" rel="noopener noreferrer"&gt;Ruslan Hrabovyi (@ro0gr)&lt;/a&gt;, &lt;a href="https://github.com/rwwagner90" rel="noopener noreferrer"&gt;Robert Wagner (@rwwagner90)&lt;/a&gt;, &lt;a href="https://github.com/jherdman" rel="noopener noreferrer"&gt;James Herdman (@jherdman)&lt;/a&gt;, &lt;a href="https://github.com/colenso" rel="noopener noreferrer"&gt;@colenso&lt;/a&gt;, &lt;a href="https://github.com/bmish" rel="noopener noreferrer"&gt;Bryan Mishkin (@bmish)&lt;/a&gt;, &lt;a href="https://github.com/chrisrng" rel="noopener noreferrer"&gt;Chris Ng (@chrisrng)&lt;/a&gt;, &lt;a href="https://github.com/snewcomer" rel="noopener noreferrer"&gt;Scott Newcomer (@snewcomer)&lt;/a&gt;, &lt;a href="https://github.com/MinThaMie" rel="noopener noreferrer"&gt;Anne-Greeth Schot-van Herwijnen (@MinThaMie)&lt;/a&gt;, &lt;a href="https://github.com/rwjblue" rel="noopener noreferrer"&gt;Robert Jackson (@rwjblue)&lt;/a&gt;, &lt;a href="https://github.com/ijlee2" rel="noopener noreferrer"&gt;Isaac Lee (@ijlee2)&lt;/a&gt;, &lt;a href="https://github.com/gilest" rel="noopener noreferrer"&gt;Giles Thompson (@gilest)&lt;/a&gt;, &lt;a href="https://github.com/Baltazore" rel="noopener noreferrer"&gt;Kirill Shaplyko (@Baltazore)&lt;/a&gt;, &lt;a href="https://github.com/charlesfries" rel="noopener noreferrer"&gt;Charles Fries (@charlesfries)&lt;/a&gt;, &lt;a href="https://github.com/locks" rel="noopener noreferrer"&gt;Ricardo Mendes (@locks)&lt;/a&gt;, &lt;a href="https://github.com/jfdnc" rel="noopener noreferrer"&gt;Jacob (@jfdnc)&lt;/a&gt;, &lt;a href="https://github.com/kategengler" rel="noopener noreferrer"&gt;Katie Gengler (@kategengler)&lt;/a&gt;, &lt;a href="https://github.com/jenweber" rel="noopener noreferrer"&gt;Jen Weber (@jenweber)&lt;/a&gt;, &lt;a href="https://github.com/maxfierke" rel="noopener noreferrer"&gt;Max Fierke (@maxfierke)&lt;/a&gt;, &lt;a href="https://github.com/raido" rel="noopener noreferrer"&gt;Raido Kuli (@raido)&lt;/a&gt;, &lt;a href="https://github.com/amyrlam" rel="noopener noreferrer"&gt;Amy Lam (@amyrlam)&lt;/a&gt;, &lt;a href="https://github.com/sly7-7" rel="noopener noreferrer"&gt;Sylvain Mina (@sly7-7)&lt;/a&gt;, &lt;a href="https://github.com/ddzz" rel="noopener noreferrer"&gt;Darius Dzien (@ddzz)&lt;/a&gt;, &lt;a href="https://github.com/jaredgalanis" rel="noopener noreferrer"&gt;Jared Galanis (@jaredgalanis)&lt;/a&gt;, and &lt;a href="https://github.com/ndekeister-us" rel="noopener noreferrer"&gt;Nathana√´l Dekeister (@ndekeister-us)&lt;/a&gt; for their contributions to Ember and related repositories! üíñ&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#connect-with-us"&gt;
  &lt;/a&gt;
  &lt;a href="https://docs.google.com/forms/d/e/1FAIpQLScqu7Lw_9cIkRtAiXKitgkAo4xX_pV1pdCfMJgIr6Py1V-9Og/viewform"&gt;ü§ì Connect with us&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FSjd7Dlx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/73io6soifsratf82s6qa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FSjd7Dlx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/73io6soifsratf82s6qa.png" alt="Office Hours Tomster mascot"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Wondering about something related to Ember, Ember Data, Glimmer, or addons in the Ember ecosystem, but don't know where to ask? Readers‚Äô Questions are just for you!&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;Submit your own&lt;/strong&gt; short and sweet &lt;strong&gt;question&lt;/strong&gt; under &lt;a href="https://bit.ly/ask-ember-core"&gt;bit.ly/ask-ember-core&lt;/a&gt;. And don‚Äôt worry, there are no silly questions, we appreciate them all - promise! ü§û&lt;/p&gt;


&lt;p&gt;Want to write for the Ember Times? Have a suggestion for next week's issue? Join us at &lt;a href="https://discordapp.com/channels/480462759797063690/485450546887786506"&gt;#support-ember-times&lt;/a&gt; on the &lt;a href="https://discord.gg/emberjs"&gt;Ember Community Discord&lt;/a&gt; or ping us &lt;a href="https://twitter.com/embertimes"&gt;@embertimes&lt;/a&gt; on Twitter.&lt;/p&gt;


&lt;p&gt;Keep on top of what's been going on in Emberland this week by subscribing to our &lt;a href="https://embertimes.substack.com/"&gt;e-mail newsletter&lt;/a&gt;! You can also find our posts on the &lt;a href="https://blog.emberjs.com/tag/newsletter"&gt;Ember blog&lt;/a&gt;. See you in two weeks!&lt;/p&gt;




&lt;p&gt;That's another wrap! ‚ú®&lt;/p&gt;

&lt;p&gt;Be kind,&lt;/p&gt;

&lt;p&gt;Chris Ng, Anne-Greeth Schot-van Herwijnen, Jared Galanis, Amy Lam, and the Learning Team&lt;/p&gt;

</description>
      <category>ember</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Go/Golang Basics - Pointers and Functions</title>
      <author>Tarun Kumar J</author>
      <pubDate>Sat, 25 Sep 2021 03:59:23 +0000</pubDate>
      <link>https://dev.to/tarunj096/go-golang-basics-pointers-and-functions-27f9</link>
      <guid>https://dev.to/tarunj096/go-golang-basics-pointers-and-functions-27f9</guid>
      <description>&lt;p&gt;A &lt;code&gt;function&lt;/code&gt; is a group of statements that can be used repeatedly in a program. Below is a simple function definition in &lt;code&gt;Go&lt;/code&gt; language :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;helloUser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

         &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;" Hello, World!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above-defined function helloUser() has a print statement in it and It runs it when we call the function.&lt;/p&gt;

&lt;p&gt;A function starts with the keyword func followed by the function name. Below is a function that is defined with parameters.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;addNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num1&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num2&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 

         &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;num1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;num2&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above function has two parameters num1 and num2 and there's a return type specified after the parentheses. The return type here is Int. A Go function can return multiple values&lt;/p&gt;

&lt;p&gt;Since the above function has the parameters with the same datatype we can write it as :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;addNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num2&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;*&lt;em&gt;Note *&lt;/em&gt;: Go uses &lt;code&gt;Pass by value&lt;/code&gt; to pass arguments in a function. It cannot change the arguments within the function that are being passed.&lt;/p&gt;

&lt;p&gt;Below is an example of multiple return values in a Go function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="s"&gt;"fmt"&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

          &lt;span class="n"&gt;num1&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;
          &lt;span class="n"&gt;num2&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="m"&gt;30&lt;/span&gt;
          &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mul&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;addandMultiplyNum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Result after adding is :"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Result after multiplying is :"&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;mul&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;addandMultiplyNum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;num2&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
       &lt;span class="n"&gt;result1&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;num1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;num2&lt;/span&gt;
       &lt;span class="n"&gt;result2&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;num1&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;num2&lt;/span&gt;
       &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result2&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#pointers"&gt;
  &lt;/a&gt;
  Pointers
&lt;/h3&gt;

&lt;p&gt;As I said above Go uses Pass by value in functions. Go is a &lt;code&gt;Pass by value&lt;/code&gt; language.&lt;br&gt;
It means that it only passes the value of the argument and the argument itself. The changes that take place in function stay within that.&lt;/p&gt;

&lt;p&gt;To change the values we use &lt;strong&gt;Pointers&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;A Pointer is a variable that is used to store the memory address of another variable. Every time we use a variable we retrieve the value stored at the variable's address. To access the address of the variable we use &lt;code&gt;&amp;amp;&lt;/code&gt; operator.&lt;/p&gt;

&lt;p&gt;Below is the example for that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;55&lt;/span&gt;

&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c"&gt;// Prints the address of num&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To store the addresses we use pointers. The&lt;code&gt;*&lt;/code&gt;operator is used to declare a pointer. &lt;br&gt;
An example of that is :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;55&lt;/span&gt;
&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;pointertoNum&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt; 

&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pointertoNum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;//Prints the address of num&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we'd want to store a different value in the variable, We can access the value stored in the address by the&lt;code&gt;*&lt;/code&gt; operator. That is also called dereferencing.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;55&lt;/span&gt;
&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;pointertoNum&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt; 

&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pointertoNum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;45&lt;/span&gt;

&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;// Prints 45&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To change values that are passed to function, We can use Pointers.&lt;br&gt;
Below is a example for that :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="s"&gt;"fmt"&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;changeNumtoZero&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numptr&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;  &lt;span class="c"&gt;//The parameter here is pointer to num&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;numptr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;
&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;// Prints 20&lt;/span&gt;
&lt;span class="n"&gt;changeNumtoZero&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;//Pass the address of num&lt;/span&gt;
&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;// Prints 0&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's It for this blog ‚úÖ.&lt;/p&gt;

&lt;p&gt;For more information, You can always check out the official documentation. &lt;br&gt;
&lt;a href="https://golang.org"&gt;This &lt;/a&gt; is the official site üíØ.&lt;/p&gt;

&lt;p&gt;If you are new to the Go language and you want to check out more,&lt;br&gt;
 Below are some &lt;strong&gt;resources&lt;/strong&gt; üî•.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Free coding exercises(Gophercises) course in Go by John Calhoun. You can check it out &lt;a href="https://gophercises.com"&gt; here&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A full video course on  &lt;a href="https://www.youtube.com/watch?v=YS4e4q9oBaU"&gt;freecodecamp&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There's a course on Codecademy on Go language. You can check it out  &lt;a href="https://www.codecademy.com/learn/learn-go"&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>100daysofcode</category>
      <category>go</category>
      <category>beginners</category>
    </item>
    <item>
      <title>40+ JavaScript Projects for Beginners ‚Äì Easy Ideas to Get Started Coding JS</title>
      <author>Coder Helper</author>
      <pubDate>Sat, 25 Sep 2021 03:57:38 +0000</pubDate>
      <link>https://dev.to/f79sd/40-javascript-projects-for-beginners-easy-ideas-to-get-started-coding-js-5hha</link>
      <guid>https://dev.to/f79sd/40-javascript-projects-for-beginners-easy-ideas-to-get-started-coding-js-5hha</guid>
      <description>&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;b&gt;The best way to learn a new programming language is to build projects.

I have created a list of 40 beginner friendly project tutorials in Vanilla JavaScript, React, and TypeScript.

My advice for tutorials would be to watch the video, build the project, break it apart and rebuild it your own way. Experiment with adding new features or using different methods.

That will test if you have really learned the concepts or not.

You can click on any of the projects listed below to jump to that section of the article.

&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/40-javascript-projects-for-beginners/&amp;amp;ved=2ahUKEwiB9tj0rPjyAhUMX30KHZQ5CG0QFnoECAgQAQ&amp;amp;usg=AOvVaw26RDQjHugdhbATVS83LI83"&gt;40+ JavaScript Projects for Beginners ‚Äì Easy Ideas to Get Started Coding JS

&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Open Source: My first Pull Request</title>
      <author>MizuhoOkimoto</author>
      <pubDate>Sat, 25 Sep 2021 03:38:53 +0000</pubDate>
      <link>https://dev.to/okimotomizuho/open-source-my-first-pull-request-1356</link>
      <guid>https://dev.to/okimotomizuho/open-source-my-first-pull-request-1356</guid>
      <description>&lt;p&gt;After I published an open source project which creates a static site generator(SSG), my second lab assignment was adding new features and making a Pull Request with my partner's same project. My partner, Anatoliy, also created a SSG in JavaScript and his way to convert text file(s) to HTML file(s) was organized and clear.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Anatoliy's Project on GitHub: &lt;a href="https://github.com/aserputov/qck-ssg-final"&gt;https://github.com/aserputov/qck-ssg-final&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;My Project on GitHub: &lt;a href="https://github.com/MizuhoOkimoto/pajama-ssg"&gt;https://github.com/MizuhoOkimoto/pajama-ssg&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#new-features"&gt;
  &lt;/a&gt;
  New features
&lt;/h2&gt;

&lt;p&gt;There are 2 required features.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Modify the file handling so that it supports both .txt files as well as .md, and parse one aspect of Markdown into HTML.&lt;/li&gt;
&lt;li&gt;Implement one of the Markdown syntax features for Italics, Bold, Heading1.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;First of all, I used Fork on his GitHub repository, and cloned to my GitHub repository. Then, I cloned it to my local computer, and created a new branch for my work with this command &lt;code&gt;git checkout -b issue-5&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#initial-thoughts"&gt;
  &lt;/a&gt;
  Initial Thoughts
&lt;/h2&gt;

&lt;p&gt;Last week, when I tested and reviewed his project, I thought I understood his way and the code structure. However, when I started trying to implement the new features, I hit a wall. I had to ask him to explain his way and he sent me some videos to explain!(It was at 2am! Thank you, my sweet friendüò≠)&lt;br&gt;
I communicated with him and I finally implemented the new features by adding some functions for reading .md file, and used replace methods to replace to markdown. Unfortunately, I had another problem. I installed Prettier on my local machine globally, so when I type &lt;code&gt;**&lt;/code&gt; to make the line bold, it became &lt;code&gt;-&lt;/code&gt;or &lt;code&gt;\*&lt;/code&gt;, so I couldn't test the implementations.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#making-a-pull-request"&gt;
  &lt;/a&gt;
  Making a Pull Request
&lt;/h2&gt;

&lt;p&gt;After I finished the implementations, I made a &lt;a href="https://github.com/aserputov/qck-ssg-final/pull/6"&gt;pull request&lt;/a&gt; on my fork repository.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ylvRGCBe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m96p61i3m7zd9snejacy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ylvRGCBe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m96p61i3m7zd9snejacy.png" alt="image"&gt;&lt;/a&gt; &lt;br&gt;
On my terminal, I changed the branch to issue-5, added the JavaScript file and updated README.md, committed, and pushed to the issue-5.&lt;br&gt;
I posted a comment what I implemented with a sample on GitHub, and asked him to review and merge it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#receiving-a-pull-request"&gt;
  &lt;/a&gt;
  Receiving a Pull Request
&lt;/h2&gt;

&lt;p&gt;I received a &lt;a href="https://github.com/MizuhoOkimoto/pajama-ssg/pull/15"&gt;pull request&lt;/a&gt; from Anatoliy, and I found a problem. After he Fork my repository, I updated my project, so there were some conflicts. I was afraid I would lose my updates when I merged his code, so I asked my professor and he worked me through how to merge.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-i-merged-and-rebased"&gt;
  &lt;/a&gt;
  How I merged and rebased
&lt;/h2&gt;

&lt;p&gt;First, I cloned my project's repository on my local computer, and checked with &lt;code&gt;git status&lt;/code&gt;. It showed &lt;code&gt;Your branch is up to date with 'origin/main'&lt;/code&gt;. Then, viewing git remote configurations(&lt;code&gt;$git remote&lt;/code&gt;), and added Anatoliy's repository and named it &lt;code&gt;anatoliy&lt;/code&gt;(&lt;code&gt;$git remote add anatoliy https://github.com/aserputov/pajama-ssg.git&lt;/code&gt;). After I added his repository, I checked remote configuration again, it showed &lt;code&gt;anatoliy&lt;/code&gt;&lt;code&gt;origin&lt;/code&gt;. So I downloaded the commits, files, and refs from a remote repository into my local repo(&lt;code&gt;$git fetch anatoliy&lt;/code&gt;), and checked the past commits.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JjdIzrgY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/as52b3a7gped8sne5dvm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JjdIzrgY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/as52b3a7gped8sne5dvm.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Then, I went back to my main branch(&lt;code&gt;$git checkout main&lt;/code&gt;), and merged issue-5(&lt;code&gt;$git merge issue-5&lt;/code&gt;).&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Pn880Tk0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gsstxli1a5zhxoqkr3gt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Pn880Tk0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gsstxli1a5zhxoqkr3gt.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
I had some unmerged files, so I opened a pull request and filed changes on GitHub, so I could check what I should or shouldn't merge. For Example: &lt;code&gt;$ git rm .\.DS_Store&lt;/code&gt;and &lt;code&gt;$git add README.md&lt;/code&gt;&lt;br&gt;
After I committed it (&lt;code&gt;$git commit&lt;/code&gt; without message), I checked with &lt;code&gt;$git log&lt;/code&gt;, and I could see that I finally merged everything.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zAsYZ19Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/doysvrj8cfde8dbga0kf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zAsYZ19Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/doysvrj8cfde8dbga0kf.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#closing-a-pull-request"&gt;
  &lt;/a&gt;
  Closing a Pull Request
&lt;/h2&gt;

&lt;p&gt;My professor taught me how to send a request change based on the pull request. First, inside the pull request page, I clicked the "View changes" button, checked the changes, then made a Review changes and submitted. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kDO6fh3q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4qwdkoc6gaswa0t1auhy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kDO6fh3q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4qwdkoc6gaswa0t1auhy.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Conclusion:&lt;br&gt;
I didn't like Git before, because it's complicated and I always get a bunch of error messages. However, after I watched my professor's lectures and through this assignment, I'm getting to like it. I feel like Git is magicüí• It was great to collaborate with my partner and get support from my professor.&lt;br&gt;
I still have some &lt;a href="https://github.com/MizuhoOkimoto/pajama-ssg/issues"&gt;issues&lt;/a&gt; to improve my project, so I will update it soon üëç&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>github</category>
      <category>webdev</category>
    </item>
    <item>
      <title>7 Best Tools For Developers - They Can't Live Without It</title>
      <author>Coder Helper</author>
      <pubDate>Sat, 25 Sep 2021 02:42:54 +0000</pubDate>
      <link>https://dev.to/f79sd/7-best-tools-for-developers-they-can-t-live-without-it-j8n</link>
      <guid>https://dev.to/f79sd/7-best-tools-for-developers-they-can-t-live-without-it-j8n</guid>
      <description>&lt;p&gt;¬†&lt;span&gt;The&lt;/span&gt;&lt;span&gt;¬†&lt;/span&gt;&lt;b&gt;best tools for developers¬†&lt;/b&gt;&lt;span&gt;are a priority for them to work. As a developer, he always works with code editors, browsers, terminals, etc. to improve his productivity. VS Code is one of the best editors, every developer would like to work with it. I've also listed the&lt;/span&gt;&lt;span&gt;¬†&lt;/span&gt;VS Code extensions for JS¬†&lt;span&gt;that are useful for a developer. And browser extensions are also a great way to improve productivity and I've also listed&lt;/span&gt;&lt;span&gt;¬†&lt;/span&gt;&lt;b&gt;Chrome extensions for a developer&lt;/b&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;If you are a junior programmer, this will give you an idea the improve your coding skills, and if you are a senior developer, you are still learn something new from it. Extensions are one the¬†&lt;b&gt;best tools for developers.&lt;/b&gt;&lt;/span&gt;&lt;span&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/span&gt;&lt;span&gt;Let's see the best tools for developers.&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;Read More: &lt;b&gt;&lt;a href="https://www.codelivly.com/7-best-tools-for-developers-they-cant-live-without-it/"&gt;7 Best Tools For Developers - They Can't Live Without It&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;

</description>
    </item>
    <item>
      <title>What is Hacking? Types of Hackers | Introduction to Cybercrime</title>
      <author>Coder Helper</author>
      <pubDate>Sat, 25 Sep 2021 02:38:55 +0000</pubDate>
      <link>https://dev.to/f79sd/what-is-hacking-types-of-hackers-introduction-to-cybercrime-46c1</link>
      <guid>https://dev.to/f79sd/what-is-hacking-types-of-hackers-introduction-to-cybercrime-46c1</guid>
      <description>&lt;p&gt;&lt;span&gt;Hacking&lt;/span&gt;¬†is the activity of identifying weaknesses in a computer system or a network to exploit the security to gain access to personal data or business data. An example of computer hacking can be: using a password cracking algorithm to gain access to a computer system.&lt;/p&gt;
&lt;p&gt;Computers have become mandatory to run a successful businesses. It is not enough to have isolated computers systems; they need to be networked to facilitate communication with external businesses. This exposes them to the outside world and hacking. System hacking means using computers to commit fraudulent acts such as fraud, privacy invasion, stealing corporate/personal data, etc. Cyber crimes cost many organizations millions of dollars every year. Businesses need to protect themselves against such attacks.¬†&lt;/p&gt;

&lt;p&gt;READ More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/what-is-hacking-types-of-hackers/&amp;amp;ved=2ahUKEwjwxemH_ZjzAhV2wjgGHRsSCHUQFnoECAcQAQ&amp;amp;usg=AOvVaw3DB9EkvJieotIl99lrXj3B"&gt;What is Hacking? Types of Hackers | Introduction to Cybercrime&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>7 Amazing Tips While Redesigning Your Website</title>
      <author>Coder Helper</author>
      <pubDate>Sat, 25 Sep 2021 02:37:29 +0000</pubDate>
      <link>https://dev.to/f79sd/7-amazing-tips-while-redesigning-your-website-1dkn</link>
      <guid>https://dev.to/f79sd/7-amazing-tips-while-redesigning-your-website-1dkn</guid>
      <description>&lt;p&gt;Redesigning a website may be a stressful, time-consuming, and complex task. It‚Äôs natural if the amount of information you need to know in order to build a new, fresh design repulses you. However, if you take the time to educate yourself and gain hands-on experience, you can avoid making mistakes and achieve your goals. Here are seven golden pointers for redesigning your website to get you started:&lt;/p&gt;
&lt;p&gt;When you consider rebuilding your website, you most likely imagine something huge and powerful. It‚Äôs the ideal opportunity to give your website a bold and dramatic new appearance. However, the world is not what you might assume.¬†&lt;/p&gt;

&lt;p&gt;&lt;b&gt;READ More&lt;/b&gt;: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/7-amazing-tips-while-redesigning-your-website/&amp;amp;ved=2ahUKEwjCx8Gc_JjzAhXawzgGHeQLBh4QFnoECAQQBQ&amp;amp;usg=AOvVaw1MCPezHaMcqtc9wW14T5Lx"&gt;7 Amazing Tips While Redesigning Your Website&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Making a Toggle Switch into a New HTML Element</title>
      <author>Timothy Foster</author>
      <pubDate>Sat, 25 Sep 2021 01:40:05 +0000</pubDate>
      <link>https://dev.to/auroratide/making-a-toggle-switch-into-a-new-html-element-425c</link>
      <guid>https://dev.to/auroratide/making-a-toggle-switch-into-a-new-html-element-425c</guid>
      <description>&lt;p&gt;Hey, let's build a light bulb!&lt;/p&gt;

&lt;p&gt;Or, at least the on/off switch part of the light bulb... The &lt;strong&gt;toggle switch&lt;/strong&gt; is a super common user interface element to indicate whether some feature is active or not.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/auroratide/embed/JjJBKrW?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Switches like these are in fact so common, it would sure be nice if they were their own HTML element...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;label&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;strong&amp;gt;&lt;/span&gt;Lightbulb&lt;span class="nt"&gt;&amp;lt;/strong&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;toggle-switch&amp;gt;&amp;lt;/toggle-switch&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Well, through the magic of &lt;strong&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components"&gt;web components&lt;/a&gt;&lt;/strong&gt;, it's actually possible to make this!&lt;/p&gt;

&lt;p&gt;My goal is to illustrate one way how to both &lt;strong&gt;build&lt;/strong&gt; and &lt;strong&gt;test&lt;/strong&gt; a web component. However, instead of going step-by-step "here's the code for making a toggle switch," we're gonna acutally (in some sense) assemble a light bulb representing the &lt;strong&gt;key aspects to building a reusable web component&lt;/strong&gt;, which apply when creating &lt;em&gt;any&lt;/em&gt; reusable element.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JUGrJwuk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5r2nq00x9t96i6id2tto.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JUGrJwuk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5r2nq00x9t96i6id2tto.png" alt="Light bulb, with parts represented by accessibility, attributes, javascript, events, and styling."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As we assemble this light bulb piece by piece, we will also be making the &lt;code&gt;toggle-switch&lt;/code&gt; component we know and love!&lt;/p&gt;

&lt;p&gt;So all that said, let's build a light bulb!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="#inventing-a-light-bulb"&gt;Inventing a Light Bulb&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#semantics-the-schematic"&gt;Semantics: The Schematic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#accessibility-the-cap"&gt;Accessibility: The Cap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#attributes-the-contact-wires"&gt;Attributes: The Contact Wires&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#javascript-the-filament"&gt;Javascript: The Filament&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#events-the-inert-gas"&gt;Events: The Inert Gas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#styling-the-globe"&gt;Styling: The Globe&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#we-invented-a-light-bulb"&gt;Summary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#full-code"&gt;Full Code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;small&gt;For the code bits, I will be assuming some familiarity with the following:&lt;/small&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;small&gt;HTML, CSS, and Javascript (see &lt;a href="https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web"&gt;Getting Started with the Web&lt;/a&gt;)&lt;/small&gt;&lt;/li&gt;
&lt;li&gt;&lt;small&gt;Using &lt;a href="https://docs.npmjs.com/about-npm"&gt;npm&lt;/a&gt; to install dependencies (see &lt;a href="https://nodesource.com/blog/an-absolute-beginners-guide-to-using-npm/"&gt;Beginner's Guide to Using npm&lt;/a&gt;)&lt;/small&gt;&lt;/li&gt;
&lt;li&gt;&lt;small&gt;Testing code with code (see &lt;a href="https://www.freecodecamp.org/news/how-to-start-unit-testing-javascript/"&gt;How to start unit testing&lt;/a&gt;)&lt;/small&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#key-takeaways"&gt;
  &lt;/a&gt;
  Key Takeaways
&lt;/h2&gt;

&lt;p&gt;Here's a bit of a tl;dr showing all the big points to think about when creating web components.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Web Components create &lt;strong&gt;new semantics&lt;/strong&gt; through custom elements.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Accessible&lt;/strong&gt; components allow for multiple methods of interaction.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Attributes&lt;/strong&gt; surface important state, configuration, and nuanced meaning.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Javascript functions&lt;/strong&gt; expose key element behaviours and actions.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Events&lt;/strong&gt; communicate key actions or changes for other elements to react to.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Styling&lt;/strong&gt; is made available through carefully chosen CSS variables and shadow parts.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And here are all the web component coding ideas that are touched by implementing the &lt;code&gt;&amp;lt;toggle-switch&amp;gt;&lt;/code&gt; component. See how we use them to build the component, or just reference the resources below!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements"&gt;Constructing web components&lt;/a&gt;&lt;/strong&gt; like a pro.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://open-wc.org/docs/testing/testing-package/"&gt;@open-wc/testing&lt;/a&gt;&lt;/strong&gt; provides useful testing helpers for putting our component on a web page.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://open-wc.org/guides/developing-components/testing/"&gt;@web/test-runner&lt;/a&gt;&lt;/strong&gt;  runs our tests in a real browser.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://open-wc.org/docs/testing/helpers/#test-fixtures"&gt;Test Fixtures&lt;/a&gt;&lt;/strong&gt; set up an element on a page for testing.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements#using_the_lifecycle_callbacks"&gt;connectedCallback&lt;/a&gt;&lt;/strong&gt;  initializes an element when inserted onto the page.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://alligator.io/web-components/attributes-properties/"&gt;Attributes and properties&lt;/a&gt;&lt;/strong&gt;  can be set on custom elements.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://alligator.io/web-components/attributes-properties/#listening-for-changed-attributes"&gt;observedAttributes and attributeChangedCallback&lt;/a&gt;&lt;/strong&gt;  react to changes in attributes.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements#using_the_lifecycle_callbacks"&gt;disconnectedCallback&lt;/a&gt;&lt;/strong&gt;  cleans up after an element when it is removed from the document.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://open-wc.org/docs/testing/helpers/#testing-events"&gt;oneEvent&lt;/a&gt;&lt;/strong&gt;  tests that an event has occurred.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/Events/Creating_and_triggering_events"&gt;Custom Events&lt;/a&gt;&lt;/strong&gt;  let you dispatch events specific to your component.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_shadow_DOM"&gt;Shadow DOM&lt;/a&gt;&lt;/strong&gt;  encapsulates structure, style, and behaviour from the overall document.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part"&gt;Shadow Parts&lt;/a&gt;&lt;/strong&gt;  allow outside CSS to customize specific inner elements of a web component.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:host"&gt;:host&lt;/a&gt;&lt;/strong&gt;  lets you style the web component itself from its shadow dom.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I have also created a &lt;code&gt;&amp;lt;toggle-switch&amp;gt;&lt;/code&gt; web component you can install and use on your projects or use as reference:&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Auroratide"&gt;
        Auroratide
      &lt;/a&gt; / &lt;a href="https://github.com/Auroratide/toggle-switch"&gt;
        toggle-switch
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#inventing-a-light-bulb"&gt;
  &lt;/a&gt;
  Inventing a Light Bulb
&lt;/h2&gt;

&lt;p&gt;In each section, I will:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Discuss an aspect of web components, including why it is important&lt;/li&gt;
&lt;li&gt;Apply that aspect to building the &lt;code&gt;&amp;lt;toggle-switch&amp;gt;&lt;/code&gt; component, with code&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#semantics-the-schematic"&gt;
  &lt;/a&gt;
  Semantics: The Schematic
&lt;/h3&gt;

&lt;p&gt;All good inventions start off with a drawing showing the design! Before building the web component, we need to think about &lt;em&gt;why&lt;/em&gt; we're building it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_JXNUam7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yp028j63tr98cizsegap.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_JXNUam7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yp028j63tr98cizsegap.png" alt="Schematic of a light bulb, labelled with 'Semantics'."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Well, what is a &lt;strong&gt;web component&lt;/strong&gt; anyway?&lt;/p&gt;

&lt;p&gt;To answer that question, we need to answer a different question: What is a &lt;strong&gt;block quote&lt;/strong&gt;?&lt;/p&gt;

&lt;p&gt;Well, it's pretty common for articles like this one to want to quote someone or something, for instance Thomas Edison:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;To invent, you need a good imagination and a pile of junk.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can tell it's a quote of some kind by its formatting. And thankfully, the code to make this happen is quite simple:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;blockquote&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;To invent, you need a good imagination and a pile of junk.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/blockquote&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;&amp;lt;blockquote&amp;gt;&lt;/code&gt; bit is an HTML tag with special meaning. When a developer uses it, they are declaring that the following text is a &lt;q&gt;section that is quoted from another source&lt;/q&gt;.&lt;/p&gt;

&lt;p&gt;You see, to achieve the formatting of a block quote, I didn't need to use the &lt;code&gt;blockquote&lt;/code&gt; element at all. I could have used some other HTML element and forced it to look like a quote, but while that may be useful for visual readers, it would not be useful to bots or to readers relying on assistive technology to read the page out loud.&lt;/p&gt;

&lt;p&gt;
  &lt;small&gt;What is &lt;strong&gt;assistive technology&lt;/strong&gt;?&lt;/small&gt;
  &lt;small&gt;Many people have disabilities which hinder them from using a site in common ways, and so they rely on assistive technology to navigate the internet. An example of such a technology is a screen reader, which verbally reads the page so vision-impaired people can understand the content.&lt;/small&gt; 

&lt;/p&gt;

&lt;p&gt;In other words, that &lt;code&gt;blockquote&lt;/code&gt; tag has special meaning, called &lt;strong&gt;semantics&lt;/strong&gt;, and those semantics allow anything reading the page to understand what the contents represent. Just like block quotes, most HTML elements have special semantics associated with them.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wR7ATXLU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2qz4b1c6ifsklt0rn2wl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wR7ATXLU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2qz4b1c6ifsklt0rn2wl.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ok Timothy, what do block quotes have to do with web components?&lt;/p&gt;

&lt;p&gt;So, our goal is to create a new HTML element, &lt;code&gt;&amp;lt;toggle-switch&amp;gt;&lt;/code&gt;. Keeping in mind that most HTML elements have associated semantics, this leads us to an interesting insight:&lt;/p&gt;

&lt;p&gt;Web components create &lt;strong&gt;new semantics&lt;/strong&gt; through custom HTML elements.&lt;/p&gt;

&lt;p&gt;This is not normally the way I see web components described. Usually, web components are thought of in developer-centric terms like reusability and encapsulation. While those are indeed great goals and outcomes, framing a web component in terms of its semantics really helps capture why we are making it and what it will do.&lt;/p&gt;

&lt;p&gt;So, when it comes to building a new component, the first step is to understand what is its &lt;strong&gt;purpose&lt;/strong&gt;, and that helps you decide what its responsibilities and scope are.&lt;/p&gt;

&lt;p&gt;For our &lt;code&gt;&amp;lt;toggle-switch&amp;gt;&lt;/code&gt; component, it's pretty similar to a native HTML checkbox, but with one distinction: whereas a checkbox is either checked or unchecked, our switch element is either &lt;strong&gt;on or off&lt;/strong&gt;, which is a subtly different semantic.&lt;/p&gt;

&lt;p&gt;&lt;small&gt;Also, checkboxes have a third "&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Input/checkbox#indeterminate"&gt;indeterminate&lt;/a&gt;" value that is neither checked nor unchecked. Such a third value does not make sense for an on/off switch.&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wR7ATXLU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2qz4b1c6ifsklt0rn2wl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wR7ATXLU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2qz4b1c6ifsklt0rn2wl.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once we have defined the what and why of the web component, we can create a bit of scaffolding! Let's start with a skeleton component:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// toggle-switch.js&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ToggleSwitch&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;HTMLElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;elementName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;toggle-switch&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;customElements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ToggleSwitch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elementName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ToggleSwitch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;customElements.define&lt;/code&gt; global function is what actually defines a web component, and it must be supplied with both the name of the element and a class extending an &lt;code&gt;HTMLElement&lt;/code&gt;. All of our eventual functionality will go into the &lt;code&gt;ToggleSwitch&lt;/code&gt; class.&lt;/p&gt;

&lt;p&gt;As for testing, we are going to rely on two libraries:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;@open-wc/testing&lt;/code&gt;: A testing library providing useful helpers for mounting our component&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;@web/test-runner&lt;/code&gt;: A program that will actually run our tests against a real browser
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I'm highlighting the "against a real browser" bit because doing so provides the highest confidence that the element as it behaves in tests will be the same as it behaves in the wild. This is opposed to using something like &lt;a href="https://github.com/jsdom/jsdom"&gt;jsdom&lt;/a&gt;, which has classically had poor support for web components.&lt;/p&gt;

&lt;p&gt;These libraries can be installed with npm:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i -D @open-wc/testing @web/test-runner
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;With that, all we need now is a skeletal test file and the ability to run said test:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// toggle-switch.spec.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;expect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@open-wc/testing&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./toggle-switch.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;toggle-switch&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;works&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Running the test:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;wtr --node-resolve ./**/*.spec.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;And with that, we are finally ready to start building out our &lt;code&gt;&amp;lt;toggle-switch&amp;gt;&lt;/code&gt; component!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Features:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements"&gt;Constructing web components&lt;/a&gt;&lt;/strong&gt; like a pro.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://open-wc.org/docs/testing/testing-package/"&gt;@open-wc/testing&lt;/a&gt;&lt;/strong&gt; provides useful testing helpers for putting our component on a web page.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://open-wc.org/guides/developing-components/testing/"&gt;@web/test-runner&lt;/a&gt;&lt;/strong&gt;  runs our tests in a real browser.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#accessibility-the-cap"&gt;
  &lt;/a&gt;
  Accessibility: The Cap
&lt;/h3&gt;

&lt;p&gt;The light bulb's cap is where it &lt;em&gt;accesses&lt;/em&gt; its power. Therefore, the cap represents &lt;strong&gt;accessibility&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BVdPVZ8V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rlqgy96lpr3y31d59jbq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BVdPVZ8V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rlqgy96lpr3y31d59jbq.png" alt="The cap of a light bulb marked as 'Accessibility'."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Accessibility&lt;/strong&gt; is the practice of making things usable by as many people as possible, regardless of ability or disability. For example, if a blind person is relying on a screen reader to read the page out loud to them, then when they reach the toggle switch, they need to be made aware that the element is indeed a switch.&lt;/p&gt;

&lt;p&gt;It is a fairly broad topic that I cannot possibly cover in full here, but when it comes to web components, there are some key questions we can ask:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles"&gt;role&lt;/a&gt; or set of roles does our component serve?&lt;/li&gt;
&lt;li&gt;How will readers know what this component is and how to use it?&lt;/li&gt;
&lt;li&gt;In what ways might people use this component, and do we need to do anything special to accommodate those?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Accessible&lt;/strong&gt; components allow for multiple methods of interaction.&lt;/p&gt;

&lt;p&gt;Personally, I like using accessibility as a starting point so that good practices are built into the component earlier rather than later. Let's apply this concretely to the toggle switch!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wR7ATXLU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2qz4b1c6ifsklt0rn2wl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wR7ATXLU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2qz4b1c6ifsklt0rn2wl.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For coding, let's start by answering the key questions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What role or set of roles does our component serve?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;WAI-ARIA defines a &lt;a href="https://www.w3.org/TR/wai-aria-1.1/#switch"&gt;role called "switch"&lt;/a&gt; which actually fits our component perfectly. If we specify this role on our component, assistive technologies such as screen readers can inform their listeners that they can toggle something on and off.&lt;/p&gt;

&lt;p&gt;
  &lt;small&gt;What is &lt;strong&gt;WAI-ARIA&lt;/strong&gt;?&lt;/small&gt;
  &lt;small&gt;&lt;a href="https://www.w3.org/WAI/standards-guidelines/aria/"&gt;WAI-ARIA&lt;/a&gt; stands for Accessible Rich Internet Applications, and it essecially provides a framework for making advanced website stuff more accessible to people with disabilities.&lt;/small&gt; 

&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How will readers know what this component is and how to use it?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sometimes special labelling is needed to properly inform people who can't see the element what it is. In our case, we can rely on the switch role to do that: when a screen reader encounters an element marked as a switch, it should announce that the element is a switch without us having to do any extra work!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In what ways might people use this component, and do we need to do anything special to accommodate those?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Besides clicking on the switch, some people might not have or cannot use a mouse, and hence the switch should be interactable via keyboard.&lt;/p&gt;

&lt;p&gt;Taking these two concerns together, this means:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We should set the &lt;code&gt;role&lt;/code&gt; attribute to &lt;code&gt;switch&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;We should make the element focusable, which can be done by setting &lt;code&gt;tabindex&lt;/code&gt; (see &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex"&gt;tabindex attribute&lt;/a&gt;).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To take care of the first item, let's first &lt;strong&gt;write a test&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;expect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@open-wc/testing&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;accessibility&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;default role&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&amp;lt;toggle-switch&amp;gt;&amp;lt;/toggle-switch&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;role&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;switch&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This test does two things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a &lt;strong&gt;fixture&lt;/strong&gt; which contains our new &lt;code&gt;toggle-switch&lt;/code&gt; element.&lt;/li&gt;
&lt;li&gt;Assert whether the element's accessible role is a switch.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The &lt;code&gt;fixture&lt;/code&gt; function provided by &lt;code&gt;@open-wc/testing&lt;/code&gt; is rather nifty! It essentially sets up an HTML document and puts our element onto the page, allowing us to mess with and inspect it.&lt;/p&gt;

&lt;p&gt;Our test implies we should set up our element to have the "switch" role immediately. To do that, we will rely on a &lt;strong&gt;lifecycle method&lt;/strong&gt; called &lt;code&gt;connectedCallback&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ToggleSwitch&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;HTMLElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;connectedCallback&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;role&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;switch&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;
  &lt;small&gt;What are &lt;strong&gt;lifecycle methods&lt;/strong&gt;?&lt;/small&gt;
  &lt;small&gt;Just like how all living things are born and eventually die, elements on a web page may come and go. Lifecycle methods represent key moments for an element, such as when it gets inserted on the page, removed from the page, or updated.&lt;/small&gt; 

&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;connectedCallback&lt;/code&gt; function is called every time an element gets inserted into the page, which is great for initialization!&lt;/p&gt;

&lt;p&gt;
  &lt;small&gt;What is different between &lt;strong&gt;connectedCallback&lt;/strong&gt; and the constructor?&lt;/small&gt;
  &lt;p&gt;&lt;small&gt;The constructor is called when an element is created for the first time, whereas the &lt;code&gt;connectedCallback&lt;/code&gt; is called just after the element is added to a page. One way to think of it is if the &lt;em&gt;same&lt;/em&gt; element is added to and removed from a page over and over again, the constructor is only called once, wherease &lt;code&gt;connectedCallback&lt;/code&gt; is called each time it's added back to the page.&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;Here's a good summary of what to do with the &lt;a href="https://stackoverflow.com/questions/59970043/custom-element-setup-constructor-vs-connectedcallback"&gt;constructor vs connectedCallback&lt;/a&gt;.&lt;/small&gt;&lt;/p&gt; 



&lt;/p&gt;
&lt;p&gt;For our tabbable requirement, the test and initialization is very similar. Setting &lt;code&gt;tabindex="0"&lt;/code&gt; is all that's needed to make an element tabbable, allowing keyboard users to access our switch!&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ToggleSwitch&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;HTMLElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;connectedCallback&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;role&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;switch&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;tabindex&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now, for our aria role, there's actually &lt;em&gt;a little bit more&lt;/em&gt; we need to do for our component to actually be an accessible switch. Conveniently, we'll be talking about that in the very next section...&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Features:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://open-wc.org/docs/testing/helpers/#test-fixtures"&gt;Test Fixtures&lt;/a&gt;&lt;/strong&gt; set up an element on a page for testing.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements#using_the_lifecycle_callbacks"&gt;connectedCallback&lt;/a&gt;&lt;/strong&gt;  initializes an element when inserted onto the page.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#attributes-the-contact-wires"&gt;
  &lt;/a&gt;
  Attributes: The Contact Wires
&lt;/h3&gt;

&lt;p&gt;Next on our light bulb are the contact wires which supply power to the part that lights up. This will represent &lt;strong&gt;attributes&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--olZvX0m8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bpxpo4u723z547xw5bkz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--olZvX0m8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bpxpo4u723z547xw5bkz.png" alt="The contact wires of a light bulb marked as 'Attributes'."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;HTML elements have &lt;strong&gt;attributes&lt;/strong&gt; which basically tell more about the element's current state or how it should work. For example, the &lt;code&gt;&amp;lt;blockquote&amp;gt;&lt;/code&gt; element has an attribute called &lt;code&gt;cite&lt;/code&gt; which is a link to the source of the quote.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;blockquote&lt;/span&gt; &lt;span class="na"&gt;cite=&lt;/span&gt;&lt;span class="s"&gt;"https://html.spec.whatwg.org/#the-blockquote-element"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;If the cite attribute is present, it must be a valid URL. . .&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/blockquote&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;As such, custom elements are also able to expose attributes! Their three key uses are for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;State&lt;/strong&gt;: Such as an element's initial or current value&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Configuration&lt;/strong&gt;: Such as whether the element is disabled, has input boundaries, and so forth&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Nuanced Meaning&lt;/strong&gt;: Specifying more details to an element's semantic value&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Attributes&lt;/strong&gt; surface important state, configuration, and nuanced meaning.&lt;/p&gt;

&lt;p&gt;&lt;small&gt;Regarding &lt;strong&gt;nuanced meaning&lt;/strong&gt;, a good example is the &lt;code&gt;cite&lt;/code&gt; attribute on &lt;code&gt;blockquote&lt;/code&gt;. It doesn't have a functional purpose, nor does it configure the element in any way. It just enhances the element's meaning: it's not just any quote, but a quote from a particular source.&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wR7ATXLU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2qz4b1c6ifsklt0rn2wl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wR7ATXLU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2qz4b1c6ifsklt0rn2wl.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Building out the &lt;code&gt;&amp;lt;toggle-switch&amp;gt;&lt;/code&gt; element, there is at least one important state we want to convey with an attribute: whether the switch is on or off. Let's follow these three steps for creating that attribute:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Determine a &lt;strong&gt;name&lt;/strong&gt; and &lt;strong&gt;allowed values&lt;/strong&gt; for the attribute.&lt;/li&gt;
&lt;li&gt;Set a &lt;strong&gt;property&lt;/strong&gt; for the attribute.&lt;/li&gt;
&lt;li&gt;Determine whether a &lt;strong&gt;change&lt;/strong&gt; in the attribute triggers a change on the element.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To mimic a bit how the vanilla checkbox input element works, we'll call our attribute &lt;code&gt;checked&lt;/code&gt;, and it will be a boolean attribute, meaning its presence or absence will represent true or false respectively.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- off --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;toggle-switch&amp;gt;&amp;lt;/toggle-switch&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- on --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;toggle-switch&lt;/span&gt; &lt;span class="na"&gt;checked&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/toggle-switch&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Setting a &lt;strong&gt;property&lt;/strong&gt; for the element's class essentially declares the attribute is important. In truth, any element can have any attribute, so by creating a property we communicate that &lt;code&gt;checked&lt;/code&gt; is important for the toggle switch.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ToggleSwitch&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;HTMLElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;checked&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hasAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;checked&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="nx"&gt;checked&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;checked&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;checked&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;And the interesting question: does a change in &lt;code&gt;checked&lt;/code&gt; require a change on the element?&lt;/p&gt;

&lt;p&gt;I can think of at least two things that should change when the &lt;code&gt;checked&lt;/code&gt; attribute is added or removed from the toggle switch:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The switch should animate (but we'll get to that when we discuss &lt;a href="#styling-the-globe"&gt;styling&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;aria-checked&lt;/code&gt; attribute should reflect the &lt;code&gt;checked&lt;/code&gt; attribute.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;...&lt;em&gt;what&lt;/em&gt;?&lt;/p&gt;

&lt;p&gt;Recall from earlier that we are relying on the &lt;a href="https://www.w3.org/TR/wai-aria-1.1/#switch"&gt;switch role&lt;/a&gt; for accessibility. That role &lt;em&gt;requires&lt;/em&gt; that an accessibility attribute called &lt;code&gt;aria-checked&lt;/code&gt; be set to either "true" or "false".&lt;/p&gt;

&lt;p&gt;So, when &lt;code&gt;checked&lt;/code&gt; is present, &lt;code&gt;aria-checked&lt;/code&gt; must be "true", and when &lt;code&gt;checked&lt;/code&gt; is absent, &lt;code&gt;aria-checked&lt;/code&gt; must be "false".&lt;/p&gt;

&lt;p&gt;Let's write a test for that!&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;checked attribute is updated&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&amp;lt;toggle-switch&amp;gt;&amp;lt;/toggle-switch&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aria-checked&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;false&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;checked&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aria-checked&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;true&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;In this test, we first ensure that an unchecked toggle switch starts with an &lt;code&gt;aria-checked&lt;/code&gt; of "false", indicating it is off to accessibility stuff. Then, we add the &lt;code&gt;checked&lt;/code&gt; attribute and verify that &lt;code&gt;aria-checked&lt;/code&gt; has changed to "true".&lt;/p&gt;

&lt;p&gt;Now, to actually accomplish this in code requires using a cool feature of web components: &lt;code&gt;observedAttributes&lt;/code&gt; and &lt;code&gt;attributeChangedCallback&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;observedAttributes&lt;/code&gt; is just a list of attributes that the element should react to if changed.&lt;/li&gt;
&lt;li&gt;And &lt;code&gt;attributeChangedCallback&lt;/code&gt; is the function that gets fired when any of the listed attributes change.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ToggleSwitch&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;HTMLElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;observedAttributes&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;checked&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;attributeChangedCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;oldValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;newValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;checked&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aria-checked&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;checked&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;And finally, we will want to make sure the initial state is taken care of in &lt;code&gt;connectedCallback&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ToggleSwitch&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;HTMLElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;connectedCallback&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aria-checked&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;checked&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Code Features:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://alligator.io/web-components/attributes-properties/"&gt;Attributes and properties&lt;/a&gt;&lt;/strong&gt;  can be set on custom elements.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://alligator.io/web-components/attributes-properties/#listening-for-changed-attributes"&gt;observedAttributes and attributeChangedCallback&lt;/a&gt;&lt;/strong&gt;  react to changes in attributes.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#javascript-the-filament"&gt;
  &lt;/a&gt;
  Javascript: The Filament
&lt;/h3&gt;

&lt;p&gt;And now for the part of the bulb that actually glows: the filament! As the heart of the light bulb, it's fitting for the filament to represent the heart of our component, the &lt;strong&gt;javascript API&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GNL3tt4a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y3y3dcxxswtdld7c3vh9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GNL3tt4a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y3y3dcxxswtdld7c3vh9.png" alt="The filament of a light bulb marked as 'Javascript'."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;
  &lt;small&gt;What is an &lt;strong&gt;API&lt;/strong&gt;?&lt;/small&gt;
  &lt;p&gt;&lt;small&gt;API stands for Application Programming Interface. If you think of a car as a program, then its API would be the steering wheel, gas pedal, and brake. You cannot directly manipulate what the engine does and can only do so through those three accessible things.&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;As such, an API exposes ways to use an element without needing to know all of its messy guts.&lt;/small&gt;&lt;/p&gt; 



&lt;/p&gt;
&lt;p&gt;Although a web component could be as simple as just coloring text, custom elements are additionally useful for bundling complex functionality into a single doodad. For example, the toggle switch component must allow someone to toggle it on and off, and so a click action must be bound to do that.&lt;/p&gt;

&lt;p&gt;Perhaps that's not surprising, so what I find useful is to think of those potential actions as &lt;strong&gt;public javascript functions&lt;/strong&gt;. Another way of putting it, if a reader is able to click the component to toggle it, then there should be a &lt;code&gt;toggle()&lt;/code&gt; function available so that &lt;em&gt;other javascript code&lt;/em&gt; can simulate the reader's action.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Javascript functions&lt;/strong&gt; expose key element behaviours and actions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wR7ATXLU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2qz4b1c6ifsklt0rn2wl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wR7ATXLU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2qz4b1c6ifsklt0rn2wl.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For the toggle switch, when someone clicks on it, the element should go from off to on, or from on to off. As usual, we start with a test!&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;toggling on and off&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;via clicking&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&amp;lt;toggle-switch&amp;gt;&amp;lt;/toggle-switch&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;checked&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;be&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;

    &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;checked&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;be&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;

    &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;checked&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;be&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Here, we are able to use the &lt;code&gt;click()&lt;/code&gt; function to simulate someone clicking the element.&lt;/p&gt;

&lt;p&gt;To make this test pass, all we have to do is listen for a "click" event and toggle the &lt;code&gt;checked&lt;/code&gt; state. We will do this in &lt;code&gt;connectedCallback&lt;/code&gt; since that's a good place to handle initialization.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ToggleSwitch&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;HTMLElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;connectedCallback&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;checked&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;checked&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Looks great, except! Remember our key point:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Key element behaviours are exposed as &lt;strong&gt;Javascript functions&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This means we should have a &lt;code&gt;toggle()&lt;/code&gt; method exposing this is a key way not only readers can interact with the component, but other javascript code can too.&lt;/p&gt;

&lt;p&gt;In fact, we'll make test for this as well!&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;toggling on and off&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;via the api&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&amp;lt;toggle-switch&amp;gt;&amp;lt;/toggle-switch&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;checked&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;be&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;

    &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;checked&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;be&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;

    &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;checked&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;be&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This test is extremely similar to the previous test, with the primary difference this uses a public function (&lt;code&gt;toggle()&lt;/code&gt;) rather than a user action (clicking).&lt;/p&gt;

&lt;p&gt;Doing this allows two things. First, we can actually simplify the event listener from above to use our new function:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ToggleSwitch&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;HTMLElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;toggle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;checked&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;checked&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;connectedCallback&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;But additionally, we can now &lt;strong&gt;clean up&lt;/strong&gt; the event listener with the &lt;code&gt;disconnectedCallback&lt;/code&gt; hook!&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ToggleSwitch&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;HTMLElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;disconnectedCallback&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;As a mirror to &lt;code&gt;connectedCallback&lt;/code&gt;, the &lt;code&gt;disconnectedCallback&lt;/code&gt; function is called every time the element is removed from the document. It is most useful for cleaning up listeners it may have set up elsewhere.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Features:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements#using_the_lifecycle_callbacks"&gt;disconnectedCallback&lt;/a&gt;&lt;/strong&gt;  cleans up after an element when it is removed from the document.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#events-the-inert-gas"&gt;
  &lt;/a&gt;
  Events: The Inert Gas
&lt;/h3&gt;

&lt;p&gt;So it turns out there's a part of a light bulb you can't see but is nonetheless important for it to work: the inert gas! The bulb is filled with special air that extends the lifetime of the filament.&lt;/p&gt;

&lt;p&gt;Continuing our Light Bulb of Web Components, the gas is represented by the &lt;strong&gt;event API&lt;/strong&gt;, stuff happening under the surface but significant for other things to react to changes in our component.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---Nafk5hx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/onlbr7ty80d04am46kl0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---Nafk5hx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/onlbr7ty80d04am46kl0.png" alt="The empty part of a light bulb marked as 'Events'."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;An &lt;strong&gt;event&lt;/strong&gt; is essentially a tidbit of code declaring that something happened, for instance "Hey, somebody toggled me on!" By emitting an event like this, &lt;strong&gt;listeners&lt;/strong&gt; can react with some appropriate action.&lt;/p&gt;

&lt;p&gt;When building a web component, we should think about what events it should emit that other elements may need to react to. In fact, this is the primary mechanism by which our &lt;code&gt;&amp;lt;toggle-switch&amp;gt;&lt;/code&gt; element will even be useful!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Events&lt;/strong&gt; communicate key actions or changes for other elements to react to.&lt;/p&gt;

&lt;p&gt;In essence, our goal is for our element to be used like this:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toggleSwitch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;toggle-switch&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;toggleSwitch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;toggle-switch:change&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// code toggling light/dark mode&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wR7ATXLU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2qz4b1c6ifsklt0rn2wl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wR7ATXLU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2qz4b1c6ifsklt0rn2wl.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thinking about our &lt;code&gt;&amp;lt;toggle-switch&amp;gt;&lt;/code&gt; component again, what are the key events we want it to emit? For the most part, there's just one: whether its state changes from off to on or vice versa.&lt;/p&gt;

&lt;p&gt;So, whenever the &lt;code&gt;checked&lt;/code&gt; state changes, the element should emit an event!&lt;/p&gt;

&lt;p&gt;To write a test, we must ask three questions.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;What is the event's &lt;strong&gt;name&lt;/strong&gt;?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;When&lt;/strong&gt; does the event occur?&lt;/li&gt;
&lt;li&gt;What &lt;strong&gt;details&lt;/strong&gt; should be shipped with the event?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The answers to these questions will fit into this nice testing template:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;oneEvent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;expect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@open-wc/testing&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;events&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;turned on&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&amp;lt;toggle-switch&amp;gt;&amp;lt;/toggle-switch&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="cm"&gt;/* (2) WHEN */&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;detail&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;oneEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="cm"&gt;/* (1) NAME */&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="cm"&gt;/* (3) ASSERT DETAILS */&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Answering the questions...&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Name&lt;/strong&gt;: Since our event represents a &lt;em&gt;change&lt;/em&gt; in the state, we'll call the event "toggle-switch:change".&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;When&lt;/strong&gt;: Let's emit the event any time &lt;code&gt;checked&lt;/code&gt; is added or removed from the element.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Details&lt;/strong&gt;: Events can carry additional information so that listeners know both &lt;em&gt;what&lt;/em&gt; happened and anything else that may be relevant. For our one event, it's probably important to know whether the switch was toggled on or toggled off, so we'll add that to details.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If we plug these things into our testing template, we get a decent test!&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;oneEvent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;expect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@open-wc/testing&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;events&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;turned on&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&amp;lt;toggle-switch&amp;gt;&amp;lt;/toggle-switch&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;checked&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;detail&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;oneEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;toggle-switch:change&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;detail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;checked&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;be&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The two important functions in this test are &lt;code&gt;setTimeout&lt;/code&gt; (provided by Javascript) and &lt;code&gt;oneEvent&lt;/code&gt; (provided by open-wc).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;oneEvent&lt;/code&gt; just waits for one event to occur, and times out with a failure if the event never occurs.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;setTimeout&lt;/code&gt; adds our toggle to a list of things for Javascript to do eventually. It's needed because if we &lt;em&gt;didn't&lt;/em&gt; use it, our event could potentially fire before we even started listening for it!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ok, let's actually emit the event now!&lt;/p&gt;

&lt;p&gt;Since our event is custom to our new element, we will dispatch a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Events/Creating_and_triggering_events"&gt;Custom Event&lt;/a&gt;, and since we want to do it any time &lt;code&gt;checked&lt;/code&gt; changes, we'll perform the dispatch with the code that reacts to when that attribute changes.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ToggleSwitch&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;HTMLElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;attributeChangedCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;oldValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;newValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;checked&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aria-checked&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;checked&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatchEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;CustomEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;toggle-switch:change&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;detail&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;checked&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;checked&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}))&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Code Features:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://open-wc.org/docs/testing/helpers/#testing-events"&gt;oneEvent&lt;/a&gt;&lt;/strong&gt;  tests that an event has occurred.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/Events/Creating_and_triggering_events"&gt;Custom Events&lt;/a&gt;&lt;/strong&gt;  let you dispatch events specific to your component.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#styling-the-globe"&gt;
  &lt;/a&gt;
  Styling: The Globe
&lt;/h3&gt;

&lt;p&gt;So, we've done &lt;em&gt;all this coding&lt;/em&gt; so far, but we can't actually &lt;em&gt;see&lt;/em&gt; the switch yet... Let's finally put the globe on our light bulb by adding some &lt;strong&gt;styling&lt;/strong&gt; to our element!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ev8dvVE0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wy3wkbrrotcv7qwg2k64.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ev8dvVE0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wy3wkbrrotcv7qwg2k64.png" alt="The globe of a light bulb marked as 'Styling'."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To be honest, styling web components is entirely deserving of its own article, made both interesting and complicated by a tiny thing called the &lt;strong&gt;Shadow DOM&lt;/strong&gt;. MDN covers &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_shadow_DOM"&gt;using the shadow dom&lt;/a&gt; in good detail, so for the purposes of this article we'll talk about it just enough to style the &lt;code&gt;&amp;lt;toggle-switch&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Shadow DOM allows web components to, in essence, carry around their own personal document hidden from the primary web page document. It's kind of like... &lt;strong&gt;flowers&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BjBqJ3ao--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wdd9q6kchhklq9uiqy40.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BjBqJ3ao--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wdd9q6kchhklq9uiqy40.png" alt="Yellow flowers."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As a gardener, you can't tell a flower what shape to take or how many petals to have, as that's determined by its own DNA. You &lt;em&gt;can&lt;/em&gt; determine how many flowers are in your garden, and maybe you can influence some of the flower's colors by feeding it colored water, but beyond that you don't get much say.&lt;/p&gt;

&lt;p&gt;Similarly, an element's shadow dom (flower) is &lt;em&gt;encapsulated&lt;/em&gt; from the rest of the document, meaning the document (gardener) cannot directly influence elements defined in the shadow dom; neither can different web components clash with each other.&lt;/p&gt;



&lt;p&gt;This turns out to be rather important for &lt;code&gt;&amp;lt;toggle-switch&amp;gt;&lt;/code&gt; because we now have competing concerns:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We must use the shadow dom to give our element a decent default "switch look"&lt;/li&gt;
&lt;li&gt;But we also want developers to customize it &lt;em&gt;from outside the component&lt;/em&gt; to fit their website's look and feel&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These competing concerns are incredibly common, and therefore the shadow dom is actually not &lt;em&gt;completely&lt;/em&gt; impenetrable. Although the parent document can never arbitrarily customize stuff in the shadow dom, there are a few exceptions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties"&gt;CSS variables&lt;/a&gt; can take on values from beyond the shadow dom.&lt;/li&gt;
&lt;li&gt;Elements within the shadow dom can be assigned &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part"&gt;shadow part names&lt;/a&gt; which can be directly selected with CSS.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These exceptions form a web component's &lt;strong&gt;Styling API&lt;/strong&gt;, specifically defined opportunities for customization. And just like how we have to intentionally decide what attributes, javascript functions, and events to expose, we also have to choose what CSS variables or parts can be styled.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Styling&lt;/strong&gt; is made available through carefully chosen CSS variables and shadow parts.&lt;/p&gt;

&lt;p&gt;
  &lt;small&gt;Earlier I said we "must" use the shadow dom. Why?&lt;/small&gt;
  &lt;p&gt;&lt;small&gt;In our case, we want to maintain the &lt;em&gt;internal structure&lt;/em&gt; of the element, which means it shouldn't be exposed to the outside. Deciding what goes in shadow dom or not is important for creating an element's style API, but is complex enough to merit its own article.&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://stackoverflow.com/questions/61626493/slotted-css-selector-for-nested-children-in-shadowdom-slot/61631668#61631668"&gt;This stack overflow post&lt;/a&gt; helped me understand this concept and links to other useful resources.&lt;/small&gt;&lt;/p&gt; 



&lt;/p&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wR7ATXLU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2qz4b1c6ifsklt0rn2wl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wR7ATXLU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2qz4b1c6ifsklt0rn2wl.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At long last, let's style this web component!&lt;/p&gt;

&lt;p&gt;To make the switch easy to customize, we are going to minimally style it. Our base switch is gonna be just a square that moves back and forth along a track like this:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/auroratide/embed/RwgeKOj?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;First, we must attach a &lt;strong&gt;shadow root&lt;/strong&gt; to the element and create a basic template for our element.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;template&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`
  &amp;lt;style&amp;gt;
    /* CSS HERE */
  &amp;lt;/style&amp;gt;
  &amp;lt;span part="track"&amp;gt;
    &amp;lt;span part="slider"&amp;gt;&amp;lt;/span&amp;gt;
  &amp;lt;/span&amp;gt;
`&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ToggleSwitch&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;HTMLElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attachShadow&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;open&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cloneNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Of note, we want developers using this toggle switch to be able to customize both the sliding bit and the track underneath it, so to make that possible we are assigning &lt;strong&gt;shadow parts&lt;/strong&gt; to each element. This will make it possible for users to style those specific components like this:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;toggle-switch&lt;/span&gt;&lt;span class="nd"&gt;::part&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;slider&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;With the basic template structure done, all that's left is adding CSS! All CSS added will go into the &lt;code&gt;style&lt;/code&gt; tag in the template above.&lt;/p&gt;

&lt;p&gt;First, let's give the element some basic sizing.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;:host&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inline-block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inline-block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;line-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Two things of interest here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;:host&lt;/code&gt; selector is special in the context of shadow dom. It basically means "style the thing &lt;em&gt;that contains&lt;/em&gt; the shadow dom", which is the web component itself. In our case, this styles the &lt;code&gt;toggle-switch&lt;/code&gt; tag.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;span&lt;/code&gt; only selects spans &lt;em&gt;within the shadow dom&lt;/em&gt; of the element. It does &lt;em&gt;not&lt;/em&gt; globally style all spans on the page! That's part of the power of encapsulation.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, we'll style the track and slider to look like our squareish examples:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;part&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"track"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#dddddd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;part&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"slider"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#777777&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;vertical-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;text-top&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;And for the last part, we need to style what the component looks like when it has been checked. Recall that the &lt;code&gt;checked&lt;/code&gt; attribute on the &lt;code&gt;&amp;lt;toggle-switch&amp;gt;&lt;/code&gt; tag determines its on/off state. This can be selected for with an attribute selector using &lt;code&gt;:host&lt;/code&gt;!&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;part&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"track"&lt;/span&gt;&lt;span class="o"&gt;],&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;part&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"slider"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="m"&gt;256ms&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nd"&gt;:host&lt;/span&gt;&lt;span class="o"&gt;([&lt;/span&gt;&lt;span class="nt"&gt;checked&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;part&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"slider"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translateX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Code Features:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_shadow_DOM"&gt;Shadow DOM&lt;/a&gt;&lt;/strong&gt;  encapsulates structure, style, and behaviour from the overall document.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part"&gt;Shadow Parts&lt;/a&gt;&lt;/strong&gt;  allow outside CSS to customize specific inner elements of a web component.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:host"&gt;:host&lt;/a&gt;&lt;/strong&gt;  lets you style the web component itself from its shadow dom.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#we-invented-a-light-bulb"&gt;
  &lt;/a&gt;
  We Invented a Light Bulb!
&lt;/h2&gt;

&lt;p&gt;And with that, we just covered the &lt;strong&gt;six key aspects&lt;/strong&gt; to building great web components! And in the process we built both a light bulb &lt;em&gt;and&lt;/em&gt; a toggle switch!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JUGrJwuk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5r2nq00x9t96i6id2tto.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JUGrJwuk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5r2nq00x9t96i6id2tto.png" alt="Light bulb, with parts represented by accessibility, attributes, javascript, events, and styling."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Web Components create &lt;strong&gt;new semantics&lt;/strong&gt; through custom elements.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Accessible&lt;/strong&gt; components allow for multiple methods of interaction.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Attributes&lt;/strong&gt; surface important state, configuration, and nuanced meaning.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Javascript functions&lt;/strong&gt; expose key element behaviours and actions.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Events&lt;/strong&gt; communicate key actions or changes for other elements to react to.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Styling&lt;/strong&gt; is made available through carefully chosen CSS variables and shadow parts.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But... is it truly complete?&lt;/p&gt;

&lt;p&gt;Almost! There are a few things I skipped over to simplify the tutorial:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Accessibility: How do we label the switch? Can we integrate this with the HTML &lt;code&gt;label&lt;/code&gt; element?&lt;/li&gt;
&lt;li&gt;Javascript: When someone tabs to the toggle, can they activate it by pressing Enter or Space?&lt;/li&gt;
&lt;li&gt;Attributes: Can a toggle switch be &lt;code&gt;disabled&lt;/code&gt; like other HTML input controls?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Feel free to try to tackle these issues yourself! Or, see how it all works in my implementation of the &lt;code&gt;&amp;lt;toggle-switch&amp;gt;&lt;/code&gt; element on Github.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Auroratide"&gt;
        Auroratide
      &lt;/a&gt; / &lt;a href="https://github.com/Auroratide/toggle-switch"&gt;
        toggle-switch
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#full-code"&gt;
  &lt;/a&gt;
  Full Code
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;template&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`
  &amp;lt;style&amp;gt;
    :host {
      display: inline-block;
      width: 2em;
      height: 1em;
      cursor: pointer;
    }

    span {
      box-sizing: border-box;
      display: inline-block;
      line-height: 1;
    }

    [part="track"] {
      width: 100%;
      height: 100%;
      background-color: #dddddd;
      text-align: left;
    }

    [part="slider"] {
      width: 50%;
      height: 100%;
      background-color: #777777;
      vertical-align: text-top;
    }

    [part="track"], [part="slider"] {
      transition: all 256ms;
    }

    :host([checked]) [part="slider"] {
      transform: translateX(100%);
    }
  &amp;lt;/style&amp;gt;

  &amp;lt;span part="track"&amp;gt;
    &amp;lt;span part="slider"&amp;gt;&amp;lt;/span&amp;gt;
  &amp;lt;/span&amp;gt;
`&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ToggleSwitch&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;HTMLElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;elementName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;toggle-switch&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;observedAttributes&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;checked&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attachShadow&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;open&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cloneNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;connectedCallback&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;role&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;switch&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;tabindex&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;disconnectedCallback&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;attributeChangedCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;oldValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;newValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;checked&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aria-checked&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;checked&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatchEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;CustomEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;toggle-switch:change&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;detail&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;checked&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;checked&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}))&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;checked&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hasAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;checked&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="nx"&gt;checked&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;checked&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;checked&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;toggle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;checked&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;checked&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;customElements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ToggleSwitch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elementName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ToggleSwitch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;expect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@open-wc/testing&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;toggle-switch&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;accessibility&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;default role&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&amp;lt;toggle-switch&amp;gt;&amp;lt;/toggle-switch&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

      &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;role&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;switch&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;tabbing&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&amp;lt;toggle-switch&amp;gt;&amp;lt;/toggle-switch&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

      &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;tabindex&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;

  &lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;attributes&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;checked attribute is updated&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&amp;lt;toggle-switch&amp;gt;&amp;lt;/toggle-switch&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

      &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aria-checked&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;false&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

      &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;checked&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aria-checked&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;true&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;

  &lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;toggling on and off&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;via clicking&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&amp;lt;toggle-switch&amp;gt;&amp;lt;/toggle-switch&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

      &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;checked&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;be&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;

      &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;checked&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;be&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;

      &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;checked&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;be&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;via the api&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&amp;lt;toggle-switch&amp;gt;&amp;lt;/toggle-switch&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

      &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;checked&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;be&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;

      &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;checked&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;be&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;

      &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;checked&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;be&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;

  &lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;events&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;turned on&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&amp;lt;toggle-switch&amp;gt;&amp;lt;/toggle-switch&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

      &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;checked&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;detail&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;oneEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;toggle-switch:change&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

      &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;detail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;checked&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;be&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements"&gt;Constructing web components&lt;/a&gt;&lt;/strong&gt; like a pro.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://open-wc.org/docs/testing/testing-package/"&gt;@open-wc/testing&lt;/a&gt;&lt;/strong&gt; provides useful testing helpers for putting our component on a web page.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://open-wc.org/guides/developing-components/testing/"&gt;@web/test-runner&lt;/a&gt;&lt;/strong&gt;  runs our tests in a real browser.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://open-wc.org/docs/testing/helpers/#test-fixtures"&gt;Test Fixtures&lt;/a&gt;&lt;/strong&gt; set up an element on a page for testing.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements#using_the_lifecycle_callbacks"&gt;connectedCallback&lt;/a&gt;&lt;/strong&gt;  initializes an element when inserted onto the page.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://alligator.io/web-components/attributes-properties/"&gt;Attributes and properties&lt;/a&gt;&lt;/strong&gt;  can be set on custom elements.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://alligator.io/web-components/attributes-properties/#listening-for-changed-attributes"&gt;observedAttributes and attributeChangedCallback&lt;/a&gt;&lt;/strong&gt;  react to changes in attributes.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements#using_the_lifecycle_callbacks"&gt;disconnectedCallback&lt;/a&gt;&lt;/strong&gt;  cleans up after an element when it is removed from the document.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://open-wc.org/docs/testing/helpers/#testing-events"&gt;oneEvent&lt;/a&gt;&lt;/strong&gt;  tests that an event has occurred.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/Events/Creating_and_triggering_events"&gt;Custom Events&lt;/a&gt;&lt;/strong&gt;  let you dispatch events specific to your component.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_shadow_DOM"&gt;Shadow DOM&lt;/a&gt;&lt;/strong&gt;  encapsulates structure, style, and behaviour from the overall document.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part"&gt;Shadow Parts&lt;/a&gt;&lt;/strong&gt;  allow outside CSS to customize specific inner elements of a web component.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:host"&gt;:host&lt;/a&gt;&lt;/strong&gt;  lets you style the web component itself from its shadow dom.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>html</category>
      <category>webdev</category>
      <category>webcomponents</category>
    </item>
  </channel>
</rss>
