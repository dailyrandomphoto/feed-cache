<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Reverse Each word in a String</title>
      <author>Suresh Ayyanna</author>
      <pubDate>Sat, 15 Jan 2022 15:36:55 +0000</pubDate>
      <link>https://dev.to/sureshayyanna/reverse-each-word-in-a-string-1868</link>
      <guid>https://dev.to/sureshayyanna/reverse-each-word-in-a-string-1868</guid>
      <description>&lt;p&gt;&lt;strong&gt;Program to Reverse each word in String&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package InterviewPrograms;

import java.util.Scanner;

public class ReverseEachWord {

    // Method 01
    public static String revWordsOfString(String str) {
        // s1.Split the String with whitespace
        String[] words = str.split(" ");

        // s2. Using for each loop read each word and reverse it
        String revstr = "";
        for (String w : words) {
            String revword = "";
            for (int i = w.length() - 1; i &amp;gt;= 0; i--) {
                revword = revword + w.charAt(i);
            }
            revstr = revstr + revword + " ";
        }
        return revstr;
    }

//Method 02
    public static String revWordOfString(String str) {
        // s1.Split the String with Space Reg.Expression(\\s)

        String[] word = str.split(" \\s");

        String revword = "";
        for (String w : word) {
            StringBuilder sb = new StringBuilder(w);
            sb.reverse();

            revword = revword + sb.toString() + " ";
        }
        return revword;
    }

    public static void main(String[] args) {
        System.out.println("Enter the Actual String:");
        Scanner input = new Scanner(System.in);
        String actualString = input.nextLine();

        String ExpectedString = revWordsOfString(actualString);

        System.out.println("The Reverse word of each string of given String from Method 1: " + ExpectedString);
        System.out.println(
                "The Reverse word of each string of given String from Method 2:" + revWordOfString(actualString));
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>java</category>
      <category>programming</category>
      <category>beginners</category>
      <category>javainterviewquestion</category>
    </item>
    <item>
      <title>When to use the useCallback hook ? </title>
      <author>The Nerdy Dev</author>
      <pubDate>Sat, 15 Jan 2022 15:36:22 +0000</pubDate>
      <link>https://dev.to/thenerdydev/when-to-use-the-usecallback-hook--50f7</link>
      <guid>https://dev.to/thenerdydev/when-to-use-the-usecallback-hook--50f7</guid>
      <description>&lt;p&gt;Hey everyone üëãüèª,&lt;/p&gt;

&lt;p&gt;In this article, let us learn about a very special React Hook called as the &lt;strong&gt;useCallback&lt;/strong&gt; hook and understand how and when to use it. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;This article was first published on &lt;a href="https://the-nerdy-dev.com/when-to-use-the-usecallback-hook/"&gt;https://the-nerdy-dev.com&lt;/a&gt;.&lt;br&gt;
Check the website for more interesting articles and tutorials on Web Development.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-is-the-raw-usecallback-endraw-hook-"&gt;
  &lt;/a&gt;
  What is the &lt;code&gt;useCallback&lt;/code&gt; hook ?
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;useCallback&lt;/code&gt; is a React Hook which was introduced to prevent re-creation of a specific function in case our component re-renders.&lt;br&gt;
It does so by &lt;em&gt;memoizing&lt;/em&gt; the callback function that this hook takes and this &lt;em&gt;memoized&lt;/em&gt; version will only change when one of the inputs has changed. This is useful when passing callbacks to optimized child components that rely on reference equality to prevent unnecessary renders.&lt;/p&gt;

&lt;p&gt;So typically we should make use of the &lt;code&gt;useCallback&lt;/code&gt; hook in one of the following cases : &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;If you are passing the function on to child component as props and the child component doesn't often need re-rendering except when a certain prop change then &lt;code&gt;useCallback&lt;/code&gt; might prevent certain re-renders.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You are specifying a function as a dependency to &lt;code&gt;useEffect&lt;/code&gt;. In such a case you must ensure that the function is not recreated on every render or the &lt;code&gt;useEffect&lt;/code&gt; will be triggered on every render.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So in the essence, the decision to make use of the &lt;code&gt;useCallback&lt;/code&gt; must be made judiciously instead of blindly since you might just overdo the advantage offered by &lt;code&gt;useCallback&lt;/code&gt; and end up degrading the performance since &lt;code&gt;useCallback&lt;/code&gt; will also &lt;em&gt;memoize&lt;/em&gt; the functions and a frequently changing dependency might anyways need to recreate the function.&lt;/p&gt;

&lt;p&gt;If the dependencies of the &lt;code&gt;useCallback&lt;/code&gt; change, only then the function will get recreated otherwise it will use the exact one and the same instance of that function across the re-renders.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#example-"&gt;
  &lt;/a&gt;
  Example :
&lt;/h2&gt;

&lt;p&gt;In JavaScript, we know that when a function gets executed we know that each and every thing (variables functions, objects etc) that is present within the function gets re-created into the memory. So this happens on each execution of the function. Now for a function we might not want it to get re-created on each re-render of the component and in turn we may want to use the exact same instance for that specific function in each of our renders. We might only want to re-create the function when a specific dependency which that function uses gets changed and &lt;strong&gt;NOT&lt;/strong&gt; otherwise. This is something that we can achieve by making use of the &lt;code&gt;useCallback&lt;/code&gt; hook.  &lt;/p&gt;

&lt;p&gt;Let's see a simple Counter component.&lt;br&gt;
Here we have a single piece of state which we call as counter and we have a corresponding state updating function for it which we named as &lt;code&gt;setCounter&lt;/code&gt;. The initial value for &lt;code&gt;counter&lt;/code&gt; is given as 0. &lt;br&gt;
Next we have a &lt;code&gt;handleIncrement&lt;/code&gt; counter function and all it does is that it increments the value of counter by 1.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCounter&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleIncrement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setCounter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="na"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;br&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleIncrement&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Increment&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now the interesting thing to note here is that the &lt;code&gt;handleIncrement&lt;/code&gt; function will get re-created on each render of the component. This means that each time the component re-renders, &lt;code&gt;handleIncrement&lt;/code&gt; function will get re-created at a separate spot in memory. And due to this reason, when React tries to make a referential equality comparison, it finds a change because of the re-creation of the &lt;code&gt;handleIncrement&lt;/code&gt; function. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#now-what-if-we-wrap-this-with-the-raw-usecallback-endraw-hook-"&gt;
  &lt;/a&gt;
  Now what if we wrap this with the &lt;code&gt;useCallback&lt;/code&gt; hook ?
&lt;/h2&gt;

&lt;p&gt;What the &lt;code&gt;useCallback&lt;/code&gt; does is that it internally caches the first created version of the function and returns it to the caller if the listed dependencies haven't changed. In case the listed dependencies does change, then it automatically gives us a new instance of that function. &lt;br&gt;
So if we introduce the &lt;code&gt;useCallback&lt;/code&gt; hook into our above code, then our code should look something like this :&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCounter&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleIncrement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setCounter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="na"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;br&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleIncrement&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Increment&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now with the above code, what React will do is that it will cache the &lt;code&gt;handleIncrement&lt;/code&gt; function internally and will make sure to return the exact same instance of the function in case no external dependencies of the &lt;code&gt;useCallback&lt;/code&gt; have changed. In case, the external dependencies do change, then in that case a brand new instance of the &lt;code&gt;handleIncrement&lt;/code&gt; function will get created for us. For our case, there are no external dependencies for the &lt;code&gt;handleIncrement&lt;/code&gt; function. &lt;/p&gt;

&lt;p&gt;Now caching the function internally by using the &lt;code&gt;useCallback&lt;/code&gt; has its own cons. The cached instance of the function call will not have direct access to the variables of our current function call. Instead of that it will have visibility of the variables that were introduced in the initial closure call where the stored function was created. So in essence, this means that our call will not work for the updated variables. Therefore, we need to specify those variables or dependencies of the function that can change. The list of dependencies is to be passed as the second argument of the &lt;code&gt;useCallback&lt;/code&gt;. In our example, we need to tell to &lt;code&gt;useCallback&lt;/code&gt; function that we need a fresh version of our &lt;code&gt;counter&lt;/code&gt; variable on each call. If we don't do that, then the &lt;code&gt;counter&lt;/code&gt; variable after the call will always be 1 and this is what comes from the original value 0 plus 1.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCounter&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleIncrement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setCounter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="na"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;br&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleIncrement&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Increment&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The above version of code will not re-render on every call. &lt;/p&gt;

&lt;p&gt;So this is it for this article. Thanks for reading. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you enjoy my articles, consider following me on Twitter for more interesting stuff :&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xdzF7_iP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lf9dc7pby59jmgkstw74.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xdzF7_iP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lf9dc7pby59jmgkstw74.png" alt="Image description" width="284" height="255"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;‚ö°Twitter : &lt;a href="https://twitter.com/The_Nerdy_Dev"&gt;https://twitter.com/The_Nerdy_Dev&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don't forget to leave a like if you loved the article. Also share it with your friends and colleagues.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MGpya8n1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3qpl01uwp1qlmbqkhfpm.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MGpya8n1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3qpl01uwp1qlmbqkhfpm.gif" alt="Alt Text" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PS&lt;/strong&gt; - If you are looking to learn Web Development, I have curated a &lt;strong&gt;FREE&lt;/strong&gt; course for you on my YouTube Channel, check the below article :&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/thenerdydev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dvgjnxQX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j2i8W0Wf--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/297820/e861379b-e75a-48e5-bc39-44b3e940c086.png" alt="thenerdydev"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/thenerdydev/2021-web-developer-full-course-html-css-javascript-node-js-and-mongodb-27pb" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;(2021) - Web Developer Full Course : HTML, CSS, JavaScript, Node.js and MongoDB&lt;/h2&gt;
      &lt;h3&gt;The Nerdy Dev „Éª Apr 28 '21 „Éª 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#node&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;p&gt;Looking to learn React.js with one Full &lt;strong&gt;Project&lt;/strong&gt;, check this out : &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/thenerdydev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dvgjnxQX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j2i8W0Wf--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/297820/e861379b-e75a-48e5-bc39-44b3e940c086.png" alt="thenerdydev"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/thenerdydev/learn-react-with-one-big-project-notes-included-demo-and-video-link-4fe5" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Learn React with one BIG Project [NOTES included] - Demo and Video Link&lt;/h2&gt;
      &lt;h3&gt;The Nerdy Dev „Éª Jun 10 '21 „Éª 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#100daysofcode&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>javascript</category>
      <category>react</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Reverse of a String</title>
      <author>Suresh Ayyanna</author>
      <pubDate>Sat, 15 Jan 2022 14:57:37 +0000</pubDate>
      <link>https://dev.to/sureshayyanna/reverse-of-a-string-g6h</link>
      <guid>https://dev.to/sureshayyanna/reverse-of-a-string-g6h</guid>
      <description>&lt;p&gt;&lt;strong&gt;Write a program to Reverse a String&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
package InterviewPrograms;

import java.util.Scanner;

public class ReverseString {

    private static String reveresedString = "";

//Method 01 - Using String methods
    public static String revString(String str) {
        int len = str.length();

        for (int i = len - 1; i &amp;gt;= 0; i--) {
            reveresedString += str.charAt(i);
        }
        return reveresedString;
    }

//Method 02 - Using StringArray
    public static String revofString(String str) {
        char a[] = str.toCharArray();
        int len = a.length;
        String revStr = "";
        for (int i = len - 1; i &amp;gt;= 0; i--) {
            revStr += a[i];
        }
        return revStr;
    }

//Method 3 : Using String buffer class
    public static StringBuffer revofAString(String str) {
    StringBuffer sb=new StringBuffer(str);
    StringBuffer revOfString= sb.reverse();
    return revOfString;
    }

    public static void main(String[] args) {
        System.out.println("The Actual string is: ");

        Scanner input = new Scanner(System.in);
        String actualString = input.nextLine();

        reveresedString = revString(actualString);
        System.out.println("The Reversed string from Method 1 is: " + reveresedString);
        System.out.println("Reversed string from Method 2: " + revofString(actualString));
        System.out.println("Reversed string from Method 3: " + revofAString(actualString));
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>java</category>
      <category>programming</category>
      <category>javainterviewquestion</category>
      <category>beginners</category>
    </item>
    <item>
      <title>What are Vault User Policies &amp; how to create them? Hashicorp Vault </title>
      <author>Tharun Shiv</author>
      <pubDate>Sat, 15 Jan 2022 14:43:01 +0000</pubDate>
      <link>https://dev.to/developertharun/what-are-vault-user-policies-how-to-create-them-hashicorp-vault-31ko</link>
      <guid>https://dev.to/developertharun/what-are-vault-user-policies-how-to-create-them-hashicorp-vault-31ko</guid>
      <description>&lt;h2&gt;
  &lt;a href="#hashicorp-vault"&gt;
  &lt;/a&gt;
  Hashicorp Vault
&lt;/h2&gt;

&lt;p&gt;Hashicorp Vault is an opensource software from Hashicorp. Vault is used to manage secrets.&lt;/p&gt;

&lt;p&gt;What is a secret?&lt;/p&gt;

&lt;p&gt;Secrets can be considered as anything that one uses to authenticate, authorize themselves. Secrets are also pieces of information that are private to any user.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-policies"&gt;
  &lt;/a&gt;
  What are policies?
&lt;/h2&gt;

&lt;p&gt;Policies help you create rules that define access to various secrets. We can create policies that allow certain level access like create access, update access, read access, delete access and so on. We then assign this policy to a particular authentication mechanism of a user. This user will have only those access mentioned in the policies attached to his credentials. This way, Vault makes sure that we provide minimal and only necessary access to Vault stakeholders.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# export variables that will be used by Vault when commands &lt;/span&gt;
&lt;span class="c"&gt;# are run in the current terminal session&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;VAULT_ADDR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'http://127.0.0.1:8200'&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;VAULT_TOKEN&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'s.hfAJfADfj...'&lt;/span&gt;

&lt;span class="c"&gt;# check Vault server status&lt;/span&gt;
vault status

&lt;span class="c"&gt;# login into Vault&lt;/span&gt;
vault login

&lt;span class="c"&gt;# view current logged in token information&lt;/span&gt;
vault token lookup

&lt;span class="c"&gt;# create policies and respective tokens&lt;/span&gt;
vim secret-user-policy.hcl
path &lt;span class="s2"&gt;"secret/data/*"&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;  capabilities &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"read"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;

vim secret-admin-policy.hcl
path &lt;span class="s2"&gt;"secret/data/*"&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;  capabilities &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"read"&lt;/span&gt;, &lt;span class="s2"&gt;"create"&lt;/span&gt;, &lt;span class="s2"&gt;"update"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;# command to write policy&lt;/span&gt;
vault policy write secret-user-policy secret-user-policy.hcl
vault policy write secret-admin-policy secret-admin-policy.hcl

&lt;span class="c"&gt;# read policy&lt;/span&gt;
vault &lt;span class="nb"&gt;read &lt;/span&gt;secret-user-policy
vault &lt;span class="nb"&gt;read &lt;/span&gt;secret-admin-policy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;hcl&lt;/code&gt; file contains the &lt;code&gt;path&lt;/code&gt; and &lt;code&gt;capabilities&lt;/code&gt; mainly. The path is used to mention which capabilities the enclosed ones are applicable to. Paths allow us to use regular expressions in them to match various Vault paths. The capabilities include:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;read&lt;/strong&gt;: Similar to the GET HTTP method, allows reading the data at the given path.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;create&lt;/strong&gt;: Similar to the POST &amp;amp; PUT HTTP Method, allows creating data at the given path. Very few parts of Vault distinguish between create and update, so most operations require both create and update capabilities. Parts of Vault that provide such a distinction are noted in documentation.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;update&lt;/strong&gt;: Similar to the POST &amp;amp; PUT HTTP Method, allows changing the data at the given path. In most parts of Vault, this implicitly includes the ability to create the initial value at the path.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;delete&lt;/strong&gt;: Similar to the DELETE HTTP Method, allows deleting the data at the given path.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;list&lt;/strong&gt;: Allows listing values at the given path.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;sudo&lt;/strong&gt;: Allows access to paths that are root-protected. Tokens are not permitted to interact with these paths unless they have the sudo capability&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;deny&lt;/strong&gt;: Disallows access. This always takes precedence regardless of any other defined capabilities, including sudo.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://www.vaultproject.io/docs/concepts/policies"&gt;Source&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#testing-the-policies"&gt;
  &lt;/a&gt;
  Testing the policies
&lt;/h2&gt;

&lt;p&gt;Now testing the policies&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# now open two tmux sessions for each type of user to test policies&lt;/span&gt;
tmux new &lt;span class="nt"&gt;-s&lt;/span&gt; demo &lt;span class="c"&gt;# and split screens for admin and user&lt;/span&gt;

&lt;span class="c"&gt;# at each of the tmux window&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;VAULT_ADDR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'http://127.0.0.1:8200'&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;VAULT_TOKEN&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'s.hfAJfADfj...'&lt;/span&gt;

vault login &lt;span class="c"&gt;# enter repective tokens&lt;/span&gt;
vault token lookup &lt;span class="c"&gt;# to view current logged in token information&lt;/span&gt;

&lt;span class="c"&gt;# on admin window &amp;amp; notice versions&lt;/span&gt;
vault kv put secret/data/mysql &lt;span class="nv"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;root

&lt;span class="c"&gt;# add multiple keys in a single command &lt;/span&gt;
vault kv put secret/data/mysql &lt;span class="nv"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;root &lt;span class="nv"&gt;password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;root

&lt;span class="c"&gt;# prevent recording the value of the token in terminal history&lt;/span&gt;
vault kv put secret/data/googlecloud &lt;span class="nv"&gt;token&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;-

&lt;span class="c"&gt;# read from a json file&lt;/span&gt;
vault kv put secret/data/googlecloud @apitoken.json

&lt;span class="c"&gt;# add multiple keys in a single command &lt;/span&gt;
vault kv put secret/data/aerospike &lt;span class="se"&gt;\&lt;/span&gt;
     &lt;span class="nv"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;root &lt;span class="se"&gt;\&lt;/span&gt;
     &lt;span class="nv"&gt;password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;root &lt;span class="se"&gt;\&lt;/span&gt;
     &lt;span class="nv"&gt;tlsname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;securecert &lt;span class="se"&gt;\&lt;/span&gt;
     &lt;span class="nv"&gt;namespace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;hashicorp

&lt;span class="c"&gt;# read secret&lt;/span&gt;
vault kv get secret/data/mysql

&lt;span class="c"&gt;# ON USER WINDOW&lt;/span&gt;
vault kv put secret/data/mysql &lt;span class="nv"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;root &lt;span class="c"&gt;# Will not work since this user does not have privileges&lt;/span&gt;

vault kv get secret/data/mysql
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Thus, we have seen what goes into creating a policy, how to create one, and have also tested the policies to see the difference between them.&lt;/p&gt;

&lt;p&gt;More trending articles on Hashicorp Vault:&lt;/p&gt;

&lt;p&gt;What is Vault? Why do we need it?&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/developertharun" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cdxCiXS_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--CuAC2zZW--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/378811/dfe9c221-cff5-4e4d-9fcb-61fb3ca2bdd0.png" alt="developertharun"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/developertharun/hashicorp-vault-what-why-all-you-need-to-know-about-vault-secrets-management-for-roadrunners-3j1n" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Hashicorp Vault | What &amp;amp; Why? | All you need to know about Vault | Secrets management for roadrunners&lt;/h2&gt;
      &lt;h3&gt;Tharun Shiv „Éª Jan 2 „Éª 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#security&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#devops&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;p&gt;Set up a Vault Dev and Production server in 5 minutes:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/developertharun" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cdxCiXS_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--CuAC2zZW--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/378811/dfe9c221-cff5-4e4d-9fcb-61fb3ca2bdd0.png" alt="developertharun"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/developertharun/hashicorp-vault-dev-and-prod-server-setup-unseal-policies-tls-setup-48mo" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Hashicorp Vault | Dev and Prod server setup | Unseal | Policies | TLS setup&lt;/h2&gt;
      &lt;h3&gt;Tharun Shiv „Éª Jan 2 „Éª 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#security&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#database&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#devops&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;You can find more articles here: &lt;a href="https://dev.to/developertharun"&gt;https://dev.to/developertharun&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Roadrunners is a series that is aimed at delivering concepts as precisely as possible. Here, a roadrunner is referred to as a person who does things super fast &amp;amp; efficiently. Are you a roadrunner?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Thank you&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>tutorial</category>
      <category>devops</category>
      <category>security</category>
    </item>
    <item>
      <title>[CSS Hack] Dark Mode Within a Second!</title>
      <author>Al Nahian</author>
      <pubDate>Sat, 15 Jan 2022 14:35:09 +0000</pubDate>
      <link>https://dev.to/alnahian2003/css-hack-dark-mode-within-second-17np</link>
      <guid>https://dev.to/alnahian2003/css-hack-dark-mode-within-second-17np</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qbY8_XgJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lj4ycsdutzeob8xwk0pl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qbY8_XgJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lj4ycsdutzeob8xwk0pl.png" alt="Thumbnail" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
Who doesn't like Dark Mode? In this CSS Hack, you'll learn about How To Convert a HTML Page to dark theme just using a single CSS property.&lt;br&gt;
Let's see it in quick action!&lt;/p&gt;

&lt;p&gt;In this post, we'll talk about a simple CSS filter property, which will invert colors and help us to get a Dark theme page instantly.&lt;br&gt;
And the &lt;strong&gt;Magic Property&lt;/strong&gt; Is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;html {
  filter: invert(100%) hue-rotate(180deg);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I don't feel comfort reading documentation websites for a long duration, if it doesn't have any Dark Theme functionalities.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FkCZwWSu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yahv6q6lbmzvcnevlp54.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FkCZwWSu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yahv6q6lbmzvcnevlp54.png" alt="Light Theme" width="880" height="500"&gt;&lt;/a&gt;&lt;br&gt;
As we can see in the image above, the website is in pure white theme. So, reading text contents for so long at night, can give me real headache!&lt;/p&gt;

&lt;p&gt;So how can I put all my attention together to complete reading those documentations? I can either install a Dark Mode enabler browser extension or go for a real quick solution like this.&lt;/p&gt;

&lt;p&gt;If I open Inspect Element on my browser, and then select the &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; or the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; tag using cursor, and add this little one liner css property to it's style tab just like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dlzUVlsF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o6fbno07pdq71x0rq6gq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dlzUVlsF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o6fbno07pdq71x0rq6gq.png" alt="style tab" width="346" height="192"&gt;&lt;/a&gt;&lt;br&gt;
The entire webpage will magically turn into dark mode and the contents of the page will get some adorable colors just like below:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MDXSDpGu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pszm6ma94awlnktym0i1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MDXSDpGu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pszm6ma94awlnktym0i1.png" alt="Webpage turned Dark" width="880" height="494"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, if you want to implement this real quick css magic trick in your website, then either you can append a toggler button or a checkbox or something. It's up to you!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Edit: One of my Facebook friends have asked me, "what if there are some images on the page? Will they get discolored? How you will fix that thing?"&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Well!&lt;br&gt;
In some cases, you may don't want image colors to be inverted. Then you can apply a global pseudo CSS rule like below to ignore all the images or the given argument tag inside the parameter&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:not(img){
  filter: filter: invert(100%) hue-rotate(180deg);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://caniuse.com/mdn-css_types_filter-function_invert"&gt;Check &lt;code&gt;filter: invert()&lt;/code&gt; Browser Support&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BwW3VT7u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fplqtf1u1bgeoc3f9ask.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BwW3VT7u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fplqtf1u1bgeoc3f9ask.png" alt="Browser Support" width="880" height="269"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I know it's neither a secret trick, nor something new. But it's cool, right?&lt;/p&gt;

&lt;p&gt;‚ö† &lt;strong&gt;Invert filter is only good for monochrome or minimal color. If you have so many color, then you have to add more filter to those part to avoid unnecessary inverted.&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Setup Eslint, Prettier with Typescript and React</title>
      <author>Anjan Shomooder</author>
      <pubDate>Sat, 15 Jan 2022 14:26:24 +0000</pubDate>
      <link>https://dev.to/thatanjan/setup-eslint-prettier-with-typescript-and-react-lnj</link>
      <guid>https://dev.to/thatanjan/setup-eslint-prettier-with-typescript-and-react-lnj</guid>
      <description>&lt;p&gt;In this blog, I will teach you, how to set up eslint, prettier with TypeScript and React. Even if you are not using TypeScript or react you can still follow along.&lt;/p&gt;

&lt;p&gt;In case if you don't know what eslint and prettier is:&lt;br&gt;
Eslint is a linter which enforces developer to write good and consistent code all over Project. Prettier is a good formatter tool that automatically formats the source code.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#video-tutorial"&gt;
  &lt;/a&gt;
  Video tutorial
&lt;/h2&gt;

&lt;p&gt;I have already created a video about it on my youtube channel. Check that out for more details.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/T-n0mrssDiw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;If you like this video, please like share, and Subscribe to my channel.&lt;/p&gt;

&lt;p&gt;For react, I will use Nextjs. Again the principles are the same. You can also use it with create-react-app.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#editor-setup"&gt;
  &lt;/a&gt;
  Editor setup
&lt;/h2&gt;

&lt;p&gt;You need to install eslint and prettier plugins for your editor. To learn more, visit these links.&lt;br&gt;
&lt;a href="https://eslint.org/docs/user-guide/integrations#editors"&gt; Eslint &lt;/a&gt;&lt;br&gt;
&lt;a href="https://prettier.io/docs/en/editors.html"&gt;Prettier&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn create-next-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Then put your app name. I am going to call it &lt;code&gt;eslint-prettier-typescript-react&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;After that, it will set everything for you.&lt;/p&gt;

&lt;p&gt;Now change the directory to the folder.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;eslint-prettier-typescript-react
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#typescript-setup-for-nextjs-optional"&gt;
  &lt;/a&gt;
  TypeScript setup for Nextjs (optional)
&lt;/h3&gt;

&lt;p&gt;Create a &lt;code&gt;tsconfig.json&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;touch &lt;/span&gt;tsconfig.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Install typescript packages.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add &lt;span class="nt"&gt;--dev&lt;/span&gt; typescript @types/react
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then start the server.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It will fill up the &lt;code&gt;tsconfig.json&lt;/code&gt; file. Now convert all the javascript files to typescript files.&lt;/p&gt;

&lt;p&gt;By the way, this blog is originally published on &lt;a href="https://www.culescoding.space/blog/setup-eslint-prettier-with-typescript-and-react"&gt;cules coding website.&lt;/a&gt;. I would be glad if you give it a visit.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YdzWc6ct--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6u2t5zkrm6w8x8nohm7i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YdzWc6ct--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6u2t5zkrm6w8x8nohm7i.png" alt="Image description" width="880" height="498"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setup-absolute-import"&gt;
  &lt;/a&gt;
  Setup Absolute import
&lt;/h3&gt;

&lt;p&gt;Absolute Import vs Relative Import&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I4CG_cu8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/400gedk393xdn0h631ql.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I4CG_cu8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/400gedk393xdn0h631ql.png" alt="Alt Text" width="880" height="480"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Inside the &lt;code&gt;tsconfig.json&lt;/code&gt; file. create a new property &lt;code&gt;baseUrl&lt;/code&gt; and set the import point. I will create an &lt;code&gt;src&lt;/code&gt; folder and put all source code inside that.&lt;/p&gt;

&lt;p&gt;So add this extra code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"baseUrl"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"src/"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"include"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"next-env.d.ts"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"**/*.ts"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"**/*.tsx"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"src/"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#setup-eslint"&gt;
  &lt;/a&gt;
  Setup eslint
&lt;/h3&gt;

&lt;p&gt;Since Nextjs version 11.0.0, eslint is already configured out of the box. But that's not enough for me. I want more. So, I will customize that more.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Install eslint globally on your computer.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;    yarn global add eslint
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;  Inside your project initialize eslint.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;    eslint &lt;span class="nt"&gt;--init&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;  Choose 3.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BM7Xfqqq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5a5qy6a4goz8yjtwgbm8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BM7Xfqqq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5a5qy6a4goz8yjtwgbm8.png" alt="Alt Text" width="880" height="163"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Choose 1&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aFqqN3Dl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fcm9x4buujeufr1skj33.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aFqqN3Dl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fcm9x4buujeufr1skj33.png" alt="Alt Text" width="880" height="163"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Choose your framework if you are using it. In my case &lt;code&gt;react&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZmAof9OI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aw6b38hxdgjgrqp1d0jt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZmAof9OI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aw6b38hxdgjgrqp1d0jt.png" alt="Alt Text" width="880" height="196"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  If you are using TypeScript then &lt;code&gt;yes&lt;/code&gt;. I am using TypeScript.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QSw2gj_d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e4eutfvqk6vweeu4phcg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QSw2gj_d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e4eutfvqk6vweeu4phcg.png" alt="Alt Text" width="880" height="196"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Browser in my case.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c8vK4xy_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iql056fynfoz6390k4m7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c8vK4xy_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iql056fynfoz6390k4m7.png" alt="Alt Text" width="880" height="243"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Use a popular style guide.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_pUts8dB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nkrsxzg3l71ah8p1vea9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_pUts8dB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nkrsxzg3l71ah8p1vea9.png" alt="Alt Text" width="880" height="292"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  I would like to use the Airbnb style guide. You can choose any style guide. But Airbnb is good and I recommend it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_4JjhjEw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jk8bfygud485tck9hh3c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_4JjhjEw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jk8bfygud485tck9hh3c.png" alt="Alt Text" width="880" height="292"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  I will use json for my config file.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8TG4YWbj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ntnjtfvmpvnwbbyffp64.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8TG4YWbj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ntnjtfvmpvnwbbyffp64.png" alt="Alt Text" width="880" height="344"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  It will ask you to install some packages to Install with &lt;code&gt;npm&lt;/code&gt;. If you want to use &lt;code&gt;npm&lt;/code&gt; then go ahead. But I will use yarn.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mTXKVSHQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q8u06509o0ztw7h3mlag.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mTXKVSHQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q8u06509o0ztw7h3mlag.png" alt="Alt Text" width="880" height="114"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So For those who are using yarn like me, You can copy and paste package names and install them.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#with-typescript"&gt;
  &lt;/a&gt;
  With typescript:
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add &lt;span class="nt"&gt;--dev&lt;/span&gt; eslint-plugin-react @typescript-eslint/eslint-plugin@latest eslint-config-airbnb@latest eslint eslint-plugin-import eslint-plugin-jsx-a11y eslint-plugin-react-hooks  @typescript-eslint/parser@latest
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#without-typescript"&gt;
  &lt;/a&gt;
  Without typescript:
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add &lt;span class="nt"&gt;--dev&lt;/span&gt; eslint-plugin-react  eslint-config-airbnb@latest eslint eslint-plugin-import eslint-plugin-jsx-a11y eslint-plugin-react-hooks
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It will create an eslint config file &lt;code&gt;.eslintrc&lt;/code&gt;. It will be a hidden file.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prettier-setup"&gt;
  &lt;/a&gt;
  Prettier Setup
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;  Let's install prettier.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add &lt;span class="nt"&gt;--dev&lt;/span&gt; eslint-config-prettier prettier
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;  Create a prettier config file.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;touch&lt;/span&gt; .prettierrc.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you can put your config in the &lt;code&gt;.prettierrc.json&lt;/code&gt; file in json format. You can find the options from &lt;a href="https://prettier.io/docs/en/configuration.html"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My basic config for prettier.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"singleQuote"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"useTabs"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"tabWidth"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"semi"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"jsxSingleQuote"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"arrowParens"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"avoid"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we are done with prettier. Let's set up eslint config.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#eslint-config-setup"&gt;
  &lt;/a&gt;
  ESlint config setup
&lt;/h3&gt;

&lt;p&gt;Your &lt;code&gt;.eslintrc&lt;/code&gt; file should look like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"env"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"browser"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"es2021"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"extends"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"plugin:react/recommended"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"airbnb"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"parser"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"@typescript-eslint/parser"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"parserOptions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"ecmaFeatures"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"jsx"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"ecmaVersion"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"sourceType"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"module"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"plugins"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"react"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"@typescript-eslint"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"rules"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We need to extend the eslint config with prettier and nextjs. So add &lt;code&gt;prettier&lt;/code&gt; and &lt;code&gt;next/core-web-vitals&lt;/code&gt; to &lt;code&gt;extends&lt;/code&gt; array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"extends"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"next/core-web-vitals"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"plugin:react/recommended"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"airbnb"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"prettier"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Explanation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Extends array takes configs. But configs need to be ordered. The last items will have more priority than previous configs. For example, if any rule gets conflict between &lt;code&gt;airbnb&lt;/code&gt; and &lt;code&gt;prettier&lt;/code&gt;, the Airbnb config rule will be overridden by prettier.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#run-eslint-from-the-command-line"&gt;
  &lt;/a&gt;
  Run eslint from the command line
&lt;/h2&gt;

&lt;p&gt;For nextjs(11.0.0 +):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"lint"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"next lint"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For every other case:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"lint"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"eslint . --ext ts --ext tsx --ext js"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#lets-fix-some-eslint-errors"&gt;
  &lt;/a&gt;
  Let's fix some eslint errors
&lt;/h6&gt;

&lt;p&gt;To turn any rule &lt;code&gt;off&lt;/code&gt; or &lt;code&gt;on&lt;/code&gt;, add the rules to the rules array. You can find the docs from &lt;a href="https://eslint.org/docs/user-guide/configuring/rules"&gt;here&lt;/a&gt;. Please watch my video to understand it well.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  allow jsx on other extensions.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"rules"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"react/jsx-filename-extension"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"extensions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;".js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;".jsx"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;".ts"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;".tsx"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;  File extension on import statement.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"rules"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"import/extensions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="s2"&gt;"error"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="s2"&gt;"always"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"js"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"never"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"jsx"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"never"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"ts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"never"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"tsx"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"never"&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;  Import unresolved error for absolute import(if you are using).
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"settings"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"import/resolver"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"node"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"extensions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;".js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;".jsx"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;".ts"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;".tsx"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"moduleDirectory"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"node_modules"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"src/"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can find my Eslint config from &lt;a href="https://gist.github.com/thatanjan/c3c2622e0360ecacb7aba9c7418023a1"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, that's it for today. I hope I have covered everything that you need to know about how to set up.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#shameless-plug"&gt;
  &lt;/a&gt;
  Shameless Plug
&lt;/h2&gt;

&lt;p&gt;I have made few project based videos with vanilla HTML, CSS, and JavaScript.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/OWz0kpNvbBM"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/jwwbR_3p-pM"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/HkOcmKGm0zU"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/DwvJnDQgIIU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;You will learn about:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Javascript intersection observer to add cool effects&lt;/li&gt;
&lt;li&gt;  DOM manipulation&lt;/li&gt;
&lt;li&gt;  Aligning elements with CSS positions.&lt;/li&gt;
&lt;li&gt;  How to make responsive websites.&lt;/li&gt;
&lt;li&gt;  How to create slide based webpage.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These will be great projects to brush up on your front end skills.&lt;/p&gt;

&lt;p&gt;If you are interested you can check the videos.&lt;/p&gt;

&lt;p&gt;You can also demo the application from here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://thatanjan.github.io/hulu-landing-page-clone-yt/"&gt;Hulu&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://thatanjan.github.io/spaceX-landing-page-clone-yt/"&gt;SpaceX&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://thatanjan.github.io/tesla-clone-yt/"&gt;Tesla&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://thatanjan.github.io/fullpage-landing-page-yt"&gt;Fullpage landing page&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please like and subscribe to &lt;a href="https://www.youtube.com/channel/UCBaGowNYTUsm3IDaHbLRMYw?sub_confirmation=1"&gt;Cules Coding&lt;/a&gt;. It motivates me to create more content like this.&lt;/p&gt;

&lt;p&gt;That's it for this blog. I have tried to explain things simply. If you get stuck, you can ask me questions.&lt;/p&gt;

&lt;p&gt;By the way, I am looking for a new opportunity in a company where I can provide great value with my skills. If you are a recruiter, looking for someone skilled in full stack web development and passionate about revolutionizing the world, feel free to contact me. Also, I am open to talking about any freelance project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#about-me"&gt;
  &lt;/a&gt;
  About me
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#why-do-i-do-what-i-do"&gt;
  &lt;/a&gt;
  Why do I do what I do?
&lt;/h4&gt;

&lt;p&gt;The Internet has revolutionized our life. I want to make the internet more beautiful and useful.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-do-i-do"&gt;
  &lt;/a&gt;
  What do I do?
&lt;/h4&gt;

&lt;p&gt;I ended up being a full-stack software engineer.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-can-i-do"&gt;
  &lt;/a&gt;
  What can I do?
&lt;/h4&gt;

&lt;p&gt;I can develop complex full-stack web applications like social media applications or e-commerce sites. See more of my work from &lt;a href="https://www.thatanjan.me/projects"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-have-i-done"&gt;
  &lt;/a&gt;
  What have I done?
&lt;/h4&gt;

&lt;p&gt;I have developed a social media application called &lt;a href="https://con-fession.vercel.app/"&gt;Confession&lt;/a&gt;. The goal of this application is to help people overcome their imposter syndrome by sharing our failure stories.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#screenshot"&gt;
  &lt;/a&gt;
  Screenshot
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g3wyVLL9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/thatanjan/confession/master/screenshots/homepage.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g3wyVLL9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/thatanjan/confession/master/screenshots/homepage.png" alt="Homepage" width="880" height="442"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/thatanjan/confession/blob/master/screenshots.md"&gt;More screenshots&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I also love to share my knowledge. So, I run a youtube channel called &lt;a href="https://www.youtube.com/channel/UCBaGowNYTUsm3IDaHbLRMYw?sub_confirmation=1"&gt;Cules Coding&lt;/a&gt; where I teach people full-stack web development, data structure algorithms, and many more. So, Subscribe to Cules Coding so that you don't miss the cool stuff.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#want-to-work-with-me"&gt;
  &lt;/a&gt;
  Want to work with me?
&lt;/h2&gt;

&lt;p&gt;I am looking for a team where I can show my ambition and passion and produce great value for them.&lt;br&gt;
Contact me through my email or any social media as &lt;a class="mentioned-user" href="https://dev.to/thatanjan"&gt;@thatanjan&lt;/a&gt;. I would be happy to have a touch with you.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#contacts"&gt;
  &lt;/a&gt;
  Contacts
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;  Email: &lt;a href="mailto:thatanjan@gmail.com"&gt;thatanjan@gmail.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  linkedin: &lt;a href="https://linkedin.com/in/thatanjan/"&gt;@thatanjan&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  portfolio: &lt;a href="https://thatanjan.me/"&gt;anjan&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  Github: &lt;a href="https://github.com/thatAnjan/"&gt;@thatanjan&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  Instagram (personal): &lt;a href="https://instagram.com/thatAnjan/"&gt;@thatanjan&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  Instagram (youtube channel): &lt;a href="https://instagram.com/cules_coding/"&gt;@thatanjan&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  twitter: &lt;a href="https://twitter.com/thatAnjan"&gt;@thatanjan&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Blogs you might want to read:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://www.culescoding.space/blog/setup-eslint-prettier-with-typescript-and-react"&gt;Eslint, prettier setup with TypeScript and react &lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.culescoding.space/blog/what-is-client-side-rendering"&gt;What is Client-Side Rendering?&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.culescoding.space/blog/what-is-server-side-rendering"&gt;What is Server Side Rendering?&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.culescoding.space/blog/everything-you-need-to-know-about-tree-data-structure"&gt;Everything you need to know about tree data structure&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.culescoding.space/blog/13-reasons-why-you-should-use-Nextjs"&gt;13 reasons why you should use Nextjs&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.culescoding.space/blog/beginners-guide-to-quantum-computers"&gt;Beginners guide to quantum computers&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Videos might you might want to watch:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/s6J2Q2vOhf0"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/rSa8sUC8m_4"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/0an2g0lq7LU"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/kVjOEYKUXxE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>nextjs</category>
      <category>react</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How I Bypassed Netflix Profile Lock?</title>
      <author>Krishnadev P Melevila</author>
      <pubDate>Sat, 15 Jan 2022 14:15:02 +0000</pubDate>
      <link>https://dev.to/krishnadevpmelevila/how-i-bypassed-netflix-profile-lock-1ana</link>
      <guid>https://dev.to/krishnadevpmelevila/how-i-bypassed-netflix-profile-lock-1ana</guid>
      <description>&lt;p&gt;Hi hackers,&lt;br&gt;
My name is Krishnadev P Melevila, Actually I write regularly on &lt;a href="https://krishnadevpmelevila.medium.com"&gt;medium blog&lt;/a&gt;, and this is my first time in Dev.to, Actually I am a 19 year old self-learned cyber security analyst. To know more about me, Just &lt;strong&gt;search ‚ÄúWho is Krishnadev P Melevila‚Äù On Google or Ask your Google Assistant.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The vulnerability is that one can easily bypass Netflix profile lock with response manipulation.&lt;br&gt;
Profile lock means, In Netflix, there is an option to add multiple users to one account and for the multiple accounts they can set up a profile lock for each profile with a 4 digit pin. So when someone login to the main account they are asked ‚ÄúWho is watching?‚Äù&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YkRK0FpC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9a3k5v489eit6aov4y5l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YkRK0FpC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9a3k5v489eit6aov4y5l.png" alt="Netflix Profile Lock Bypass" width="700" height="329"&gt;&lt;/a&gt;&lt;br&gt;
so after clicking profile they need to enter the profile pin to access the browse section. But there is a vulnerability in that feature. Steps to reproduce is given below:&lt;/p&gt;

&lt;p&gt;Step 1: Visit &lt;a href="https://www.netflix.com/"&gt;https://www.netflix.com/&lt;/a&gt; and login with your account then you will be asked ‚Äú Who is watching?‚Äù like the above screenshot&lt;/p&gt;

&lt;p&gt;Step2: Here all users except guests and children have profile locks. So we are going to bypass this lock.&lt;/p&gt;

&lt;p&gt;Step3: To do that we need to know at least one profile pin, say the profile pin of Krishnadev is 1704 then I will enter that pin and intercept the response of that request on burp and copy that whole success response.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;HTTP/2 200 OK
X-Robots-Tag: noindex, nofollow
X-Frame-Options: DENY
X-Debug-Tz: GMT+5.50
X-Netflix.request.toplevel.uuid: 7d4b8b6b-fed5-44de-973b-1e14de56366f-422157414
X-Netflix.execution-Time: 6
Content-Type: application/json;charset=UTF-8
Date: Mon, 27 Dec 2021 03:48:33 GMT
Content-Length: 48
Via: 2 i-01d773509d78ec561 (us-west-2)
Server: api-prod-website i-00db4a31230d33cec
X-Xss-Protection: 1; mode=block; report=https://www.netflix.com/ichnaea/log/freeform/xssreport
X-Content-Type-Options: nosniff
Strict-Transport-Security: max-age=31536000; includeSubDomains
Access-Control-Allow-Credentials: true
Access-Control-Allow-Headers: Authorization,Content-Type,Content-Encoding,Accept,X-Netflix.application.name,X-Netflix.application.version,X-Netflix.esn,X-Netflix.device.type,X-Netflix.certification.version,X-Netflix.request.uuid,X-Netflix.originating.request.uuid,X-Netflix.user.id,X-Netflix.oauth.consumer.key,X-Netflix.oauth.token,X-Netflix.ichnaea.request.type,X-Netflix.Request.Routing,X-NETFLIX-PREAPP-PARTNER-ID, X-NETFLIX-PREAPP-INTEGRITY-VALUE, X-Netflix.Request.Priority,X-Netflix.Retry.Client.Policy,X-Netflix.Client.Request.Name,X-Netflix.Request.Retry.Policy,X-Netflix.Request.Retry.Policy.Default,X-Netflix.request.client.user.guid,X-Netflix.Request.NonJson.Headers,X-Netflix.esnPrefix,X-Netflix.browserName,X-Netflix.browserVersion,X-Netflix.osName,X-Netflix.osVersion,X-Netflix.uiVersion,X-Netflix.clientType,X-NETFLIX-PERSONALIZATION-ID,X-NETFLIX-DET-TOKEN,X-NETFLIX-DET-PARTNER-PAI,X-NETFLIX-RESPONSE-OVERRIDDEN,X-NETFLIX-DET-DEPRECATION
Access-Control-Expose-Headers: X-Netflix.Retry.Server.Policy,X-Netflix.Response.Tag,X-Netflix.Geo.Info,X-Netflix.request.inbound.identity.changed,Via,X-Netflix.Retry.Server.Policy.retryAfterSeconds,X-Netflix.Retry.Server.Policy.maxRetries,X-Ftl-Error,X-Netflix.uiVersion
Access-Control-Allow-Methods: GET, POST
Access-Control-Allow-Origin: https://www.netflix.com
X-Originating-Url: http://www.netflix.com/api/shakti/v5185b692/profileLock
X-Netflix.nfstatus: 1_1
Set-Cookie: &amp;lt;REDACTED&amp;gt;
X-Netflix.proxy.execution-Time: 16
{"codeName":"S-Icarus-6.Alster","success":true}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Step4: Now let us bypass the profile lock of any other user, To do that first enter a wrong pin for any user and intercept the response of that request and replace the response with the above success response. and BOOM!! We got access to the Other user profiles without any authentication.&lt;/p&gt;

&lt;p&gt;I reported this to Netflix, But they said that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Hi krishnadevpmelevila,
The functionality is only intended as a barrier for children accessing mature content within an account. Local bypass, such as this one, is considered Won't Fix. Your effort is appreciated and we hope that you will continue to research and submit any future security issues you find.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But, My doubt is that, Then what is the use of that feature?&lt;br&gt;
Don‚Äôt forget to follow me on Dev.to and other social media and that's my inspiration to write more!!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://instagram.com/krishnadev_p_melevila"&gt;My Instagram handle&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/Krishnadev_P_M"&gt;My Twitter handle&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.linkedin.com/in/krishnadevpmelevila/"&gt;My LinkedIn handle&lt;/a&gt;&lt;br&gt;
&lt;a href="http://krishnadevpmelevila.com/"&gt;My Personnel website&lt;/a&gt;&lt;/p&gt;

</description>
      <category>cybersecurity</category>
      <category>webdev</category>
      <category>news</category>
      <category>programming</category>
    </item>
    <item>
      <title>How to make NFT</title>
      <author>aman-km</author>
      <pubDate>Sat, 15 Jan 2022 13:56:14 +0000</pubDate>
      <link>https://dev.to/amankm/how-to-make-nft-2mak</link>
      <guid>https://dev.to/amankm/how-to-make-nft-2mak</guid>
      <description>&lt;p&gt;Hi everyone, Welcome to my blog, I like to talk about NFT's and how to make a NFT. So what is NFT ? A non-fungible token is a unique and non-interchangeable unit of data stored on a blockchain, a form of digital ledger. NFTs can be associated with reproducible digital files such as photos, videos, and audio - by google. To make NFT you will need a Ethereum wallet I prefer using &lt;a href="https://metamask.io/"&gt;Metamask&lt;/a&gt;. To mint NFT you will need an account in &lt;a href="https://opensea.io/"&gt;opensea&lt;/a&gt;. Open sea is the largest NFT market place in the internet. To mint a NFT you can go to "create" in the opensea website&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--forG9VSo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/clglsibvm85hwnzk10ai.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--forG9VSo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/clglsibvm85hwnzk10ai.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt; then upload the file which you want to convert into an NFT give it a name fill the options and then change the blockchain from Ethereum to Polygon. for a gas-free NFT minting. If you choose Ethereum block chain it will cost you some gas-fuel or some Ethereum. After all click on create and sell it and earn money through it.&lt;/p&gt;

&lt;p&gt;Don't forget to check out my NFT : &lt;a href="https://opensea.io/assets/matic/0x2953399124f0cbb46d2cbacd8a89cf0599974963/1299616809676038212545255797853704081022923385157718136009954669133201145906/"&gt;Opensea link&lt;/a&gt; &lt;br&gt;
My personal blog : &lt;a href="//aman-km.blogspot.com"&gt;Blog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank you for reading this blog.. Wish you a fantastic day.&lt;/p&gt;

</description>
      <category>nft</category>
      <category>blockchain</category>
      <category>python</category>
      <category>javascript</category>
    </item>
    <item>
      <title>What technologies should you know to become a Front-End Developer in 2022.</title>
      <author>Nourdine Labib</author>
      <pubDate>Sat, 15 Jan 2022 13:43:57 +0000</pubDate>
      <link>https://dev.to/nourdinedev/what-technologies-should-you-know-to-become-a-front-end-developer-in-2022-hci</link>
      <guid>https://dev.to/nourdinedev/what-technologies-should-you-know-to-become-a-front-end-developer-in-2022-hci</guid>
      <description>&lt;p&gt;In this article, I will show you everything you need to know to start a career as a Front-end developers in 2022, from the common tools to the advance technologies you will need to learn if you are considering becoming a Front-end developers.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-fundamentals"&gt;
  &lt;/a&gt;
  The fundamentals.
&lt;/h1&gt;

&lt;p&gt;There are three technologies that every web developer should know, &lt;strong&gt;HTML&lt;/strong&gt;, &lt;strong&gt;CSS&lt;/strong&gt; and &lt;strong&gt;JavaScript&lt;/strong&gt;, and these technologies are the three building blocks that you'll find in any website. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#html"&gt;
  &lt;/a&gt;
  HTML.
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Qgp8gNtz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/29tnnbrzjz95yynjmzcu.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qgp8gNtz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/29tnnbrzjz95yynjmzcu.jpg" alt="HTML" width="880" height="528"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;Hyper Text Markup Language&lt;/strong&gt;, or &lt;strong&gt;HTML&lt;/strong&gt; is the standard markup language for documents designed to be displayed in a web browser, &lt;strong&gt;HTML&lt;/strong&gt; is essentially the ‚Äúskeleton‚Äù for your website. &lt;strong&gt;HTML&lt;/strong&gt; is how you structure your website. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#css"&gt;
  &lt;/a&gt;
  CSS.
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8jVGMK-r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rh1umtpqpvjakc6ocf71.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8jVGMK-r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rh1umtpqpvjakc6ocf71.png" alt="CSS" width="880" height="528"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cascading Style Sheets&lt;/strong&gt;, or &lt;strong&gt;CSS&lt;/strong&gt; is a style sheet language used for describing the presentation of a document written in a markup language such as &lt;strong&gt;HTML&lt;/strong&gt;, &lt;strong&gt;CSS&lt;/strong&gt; is responsible for giving &lt;strong&gt;HTML&lt;/strong&gt; documents and webpages a face. In other words, it describes how an &lt;strong&gt;HTML&lt;/strong&gt; page should look. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#javascript"&gt;
  &lt;/a&gt;
  JavaScript.
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4-nSyIlm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xtzpcep2nru3mv6vrxgu.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4-nSyIlm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xtzpcep2nru3mv6vrxgu.jpg" alt="JavaScript" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;, often abbreviated &lt;strong&gt;JS&lt;/strong&gt;, is a programming language that is one of the core technologies of the World Wide Web, alongside &lt;strong&gt;HTML&lt;/strong&gt; and &lt;strong&gt;CSS&lt;/strong&gt;. Over &lt;strong&gt;97%&lt;/strong&gt; of websites use &lt;strong&gt;JavaScript&lt;/strong&gt; on the client side for web page behavior.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#dive-into-frontend-development"&gt;
  &lt;/a&gt;
  Dive into front-end development.
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#git-and-github"&gt;
  &lt;/a&gt;
  Git and GitHub.
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_PwXnUkD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kfz3w0nubem1ndc6ya26.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_PwXnUkD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kfz3w0nubem1ndc6ya26.png" alt="Git and GitHub" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://git-scm.com"&gt;Git&lt;/a&gt;&lt;/strong&gt; is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com"&gt;GitHub&lt;/a&gt;&lt;/strong&gt; is a provider of internet hosting for software development and version control using Git. It offers the distributed version control and source code management functionality of Git, plus its own features.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#npm"&gt;
  &lt;/a&gt;
  npm
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---pxpghtg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h6i1ci8o3yeqqk87iwl6.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---pxpghtg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h6i1ci8o3yeqqk87iwl6.jpg" alt="npm" width="880" height="588"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.npmjs.com"&gt;npm&lt;/a&gt;&lt;/strong&gt; is a package manager for the JavaScript programming language maintained by npm, Inc. npm is the default package manager for the JavaScript runtime environment Node.js.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sass"&gt;
  &lt;/a&gt;
  Sass
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B1TvDGUp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hop7ytfavbu52466kdfz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B1TvDGUp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hop7ytfavbu52466kdfz.png" alt="Sass" width="683" height="342"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://sass-lang.com"&gt;Sass&lt;/a&gt;&lt;/strong&gt; is a preprocessor scripting language that is interpreted or compiled into Cascading Style Sheets. It lets you write maintainable CSS and provides features like variable, nesting, mixins, extension, functions, loops, conditionals and so on.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tailwind-css"&gt;
  &lt;/a&gt;
  Tailwind CSS
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K8GdBIz2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b5drejxxbo7sxjkmz3gd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K8GdBIz2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b5drejxxbo7sxjkmz3gd.png" alt="Tailwind CSS" width="880" height="427"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://dev.toTailwind%20CSS"&gt;Tailwind CSS&lt;/a&gt;&lt;/strong&gt; is a CSS Framework that provides atomic CSS classes to help you style components e.g. flex, pt-4, text-center and rotate-90 that can be composed to build any design, directly in your markup.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#react"&gt;
  &lt;/a&gt;
  React
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DVAh2mET--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zvrvbyiat76p1idx0j02.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DVAh2mET--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zvrvbyiat76p1idx0j02.jpg" alt="React" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://reactjs.org"&gt;React&lt;/a&gt;&lt;/strong&gt; is the most popular front-end JavaScript library for building user interfaces. React can also render on the server using Node and power mobile apps using React Native.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#chakra-ui"&gt;
  &lt;/a&gt;
  Chakra UI
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CQhNDDwS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4biol65vigty70z739ha.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CQhNDDwS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4biol65vigty70z739ha.png" alt="Chakra UI" width="880" height="462"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://chakra-ui.com"&gt;Chakra UI&lt;/a&gt;&lt;/strong&gt; is a simple, modular and accessible component library that gives you the building blocks you need to build your React applications.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#redux"&gt;
  &lt;/a&gt;
  Redux
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hVhMPE4x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u4khilxo0q9cw9bwr6nv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hVhMPE4x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u4khilxo0q9cw9bwr6nv.png" alt="Redux" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://redux.js.org"&gt;Redux&lt;/a&gt;&lt;/strong&gt; is a predictable state container for JavaScript apps. It helps you write applications that behave consistently, run in different environments (client, server, and native), and are easy to test. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nextjs"&gt;
  &lt;/a&gt;
  Next.js
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DN0MheIZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ba6eks8ybauab09oxhmj.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DN0MheIZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ba6eks8ybauab09oxhmj.jpeg" alt="Next.js" width="650" height="366"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="//Next.js"&gt;Next.js&lt;/a&gt;&lt;/strong&gt; is an open-source development framework built on top of Node.js enabling React based web applications functionalities such as server-side rendering and generating static websites.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#typescript"&gt;
  &lt;/a&gt;
  Typescript
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7C1rk-C9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tw3xhib6y8x0qdm7fmof.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7C1rk-C9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tw3xhib6y8x0qdm7fmof.png" alt="Typescript" width="880" height="462"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.typescriptlang.org"&gt;TypeScript&lt;/a&gt; is a strongly typed programming language that builds on JavaScript, giving you better tooling at any scale.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;There are more and more technologies out there, and you will use some of them based on your projects needs. Based on my opinion the best skill you should have is the ability to read documentations, because technologies change and gets updated day by day, so as a developer, you never going to stop learning.&lt;/p&gt;

&lt;p&gt;If you want a more detailed roadmaps check out &lt;strong&gt;&lt;a href="https://roadmap.sh"&gt;roadmap.sh&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Emmet Shortcuts You Should Know</title>
      <author>Junaid Shaikh</author>
      <pubDate>Sat, 15 Jan 2022 13:23:54 +0000</pubDate>
      <link>https://dev.to/junaidshaikhjs/emmet-shortcuts-you-should-know-pl2</link>
      <guid>https://dev.to/junaidshaikhjs/emmet-shortcuts-you-should-know-pl2</guid>
      <description>&lt;p&gt;Hey readers  üëã&lt;/p&gt;

&lt;p&gt;This is my first post on DEV, I hope you all will love it. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;In this post, we will look at some of the useful Emmet shortcuts. Though there are tons of Emmet shortcuts, we will be looking at major and useful ones. &lt;/p&gt;

&lt;p&gt;Before getting started, what Emmet actually is? As per &lt;a href="https://emmet.io/"&gt;official website&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Emmet is a plugin for many popular text editors which greatly improves HTML &amp;amp; CSS workflow&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That's right. Emmet helps you to improve your HTML and CSS workflow, we will look at how. You have been using Emmet if you are using VS Code ( Duh, who doesn‚Äôt use VS Code? )  &lt;/p&gt;

&lt;p&gt;Okay, without further ado, let‚Äôs get started. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#html-boilerplate"&gt;
  &lt;/a&gt;
  HTML Boilerplate
&lt;/h2&gt;

&lt;p&gt;You can type ( ! ) and hit enter to get the HTML boilerplate&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oj-ApErT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dzizfreh77tvxy9lzdzb.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oj-ApErT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dzizfreh77tvxy9lzdzb.gif" alt="HTML Boilerplate" width="880" height="330"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The same can be achieved by &lt;code&gt;html:5&lt;/code&gt; but as a developer, we love to type fewer characters.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nesting-operators"&gt;
  &lt;/a&gt;
  Nesting Operators
&lt;/h2&gt;

&lt;p&gt;Nesting operators will help you to generate HTML elements that may be nested or can be placed as a sibling or you can add text and generate numbers too. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#child-gt"&gt;
  &lt;/a&gt;
  Child:  &amp;gt;
&lt;/h3&gt;

&lt;p&gt;The child (&amp;gt;) operator can be used to nest elements inside each other.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;nav&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dQYNllFv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dv8tw2vbkokvc4xh7zd9.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dQYNllFv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dv8tw2vbkokvc4xh7zd9.gif" alt="child operator" width="880" height="330"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sibling-"&gt;
  &lt;/a&gt;
  Sibling:  +
&lt;/h3&gt;

&lt;p&gt;Let‚Äôs say you need to place three elements as siblings, use + operator to achieve this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;header&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nt"&gt;main&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nt"&gt;footer&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3L8puDOw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2k0s71iqnwtbv1pq4ujm.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3L8puDOw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2k0s71iqnwtbv1pq4ujm.gif" alt="Sibling Operator" width="880" height="330"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#climb-up-"&gt;
  &lt;/a&gt;
  Climb up:  ^
&lt;/h3&gt;

&lt;p&gt;What if you need to climb one stage up? We are nesting element using child (&amp;gt;) operator but with ( ^ ) operator you can go one step up.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;header+main&amp;gt;section&amp;gt;article^h1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vd_QfzZD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/57qceui9xo31b91bgigs.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vd_QfzZD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/57qceui9xo31b91bgigs.gif" alt="Climb up operator" width="880" height="330"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here we are inserting &lt;code&gt;section&lt;/code&gt; and &lt;code&gt;article&lt;/code&gt; inside of &lt;code&gt;main&lt;/code&gt; but we want to add &lt;code&gt;h1&lt;/code&gt; nested inside the &lt;code&gt;main&lt;/code&gt; and sibling of &lt;code&gt;section&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#multiplication-"&gt;
  &lt;/a&gt;
  Multiplication:  *
&lt;/h3&gt;

&lt;p&gt;My favorite one. Using this operator we can specify how many elements we want.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;ol&amp;gt;li*5
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8Au4Dd7D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mlumlv9vu5yerjjx3trq.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8Au4Dd7D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mlumlv9vu5yerjjx3trq.gif" alt="Multiplication Operator" width="880" height="273"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#grouping-"&gt;
  &lt;/a&gt;
  Grouping: ()
&lt;/h3&gt;

&lt;p&gt;Grouping allows us to create complex markup. It basically considers a group a single element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;header&amp;gt;(nav&amp;gt;ul&amp;gt;li*5)+main+footer
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OKAPyzPp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vyn1rhphdrgqh5uvjuky.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OKAPyzPp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vyn1rhphdrgqh5uvjuky.gif" alt="Grouping Operator" width="880" height="273"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can also multiply the group and it will return the group multiple time&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;dl&amp;gt;(dt+dd)*3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#attribute-operators"&gt;
  &lt;/a&gt;
  Attribute Operators
&lt;/h2&gt;

&lt;p&gt;Emmet allows you to set the attributes for your HTML elements.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#id-and-class"&gt;
  &lt;/a&gt;
  ID and Class
&lt;/h3&gt;

&lt;p&gt;To set the ID on your HTML element use # and for class attribute use dot ( . )&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;div.container&amp;gt;h1#heading 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3JqQrEBW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/21ugidmk1mqx7av45i8l.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3JqQrEBW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/21ugidmk1mqx7av45i8l.gif" alt="Adding ID and Classes" width="880" height="273"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#custom-attributes"&gt;
  &lt;/a&gt;
  Custom Attributes
&lt;/h3&gt;

&lt;p&gt;Just like the attribute selector in CSS, we can use Emmet to set the custom attribute&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;input[type='text']
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P66j3T-D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/alhl5bwo7vz8alahtybc.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P66j3T-D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/alhl5bwo7vz8alahtybc.gif" alt="Custom Attributes" width="880" height="273"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We can specify as many attributes as we want.&lt;/li&gt;
&lt;li&gt;We also don‚Äôt need to add value to the attribute, providing only attribute names will generate elements with empty attributes.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#text-"&gt;
  &lt;/a&gt;
  Text - {}
&lt;/h2&gt;

&lt;p&gt;The last shortcut we will be looking at is adding text content in the element. And also the lorem ipsum text generation. &lt;/p&gt;

&lt;p&gt;Use {} to add text and &lt;code&gt;lorem&lt;/code&gt; keyword to add the dummy text&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;p{lorem}

p&amp;gt;lorem10
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y-r2tHk6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3z6q665eu5vihtm0e04y.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y-r2tHk6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3z6q665eu5vihtm0e04y.gif" alt="Text Operator" width="880" height="273"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#css"&gt;
  &lt;/a&gt;
  CSS
&lt;/h2&gt;

&lt;p&gt;Emmet provides a lot of CSS abbreviations to write faster. It will be tiresome to add all of them here.  I will link the cheat sheet at the end of the article. &lt;/p&gt;

&lt;p&gt;Some of the examples of CSS are &lt;code&gt;pos&lt;/code&gt; get converted into &lt;code&gt;position: relative&lt;/code&gt; you can also specify which position value you need like &lt;code&gt;pos:a&lt;/code&gt; it will give &lt;code&gt;position: absolute&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;Similarly, there are shortcuts for margin and padding, border, outline, box-sizing, and so on. &lt;/p&gt;




&lt;p&gt;Awesome! You reached the end of this article. Thank you for taking the time to read this. &lt;/p&gt;

&lt;p&gt;If you liked this article, you will love my tweets. I share useful tips around web development and resources to learn the same. &lt;/p&gt;

&lt;p&gt;You can follow me on &lt;a href="https://twitter.com/junaidshaikh_js"&gt;Twitter&lt;/a&gt; or connect with me on &lt;a href="https://www.linkedin.com/in/junaidshaikhjs/"&gt;LinkedIn&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Here is the &lt;a href="https://docs.emmet.io/cheat-sheet/"&gt;cheatsheet&lt;/a&gt; I was talking about. &lt;/p&gt;

&lt;p&gt;Keep coding üòÉ&lt;/p&gt;

&lt;p&gt;You can support this article here...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/junaidshaikhjs"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zQj764Ae--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/default-orange.png" alt="Buy Me A Coffee" width="434" height="100"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>vscode</category>
      <category>webdev</category>
      <category>html</category>
    </item>
    <item>
      <title>Nu Shell and Databricks</title>
      <author>Darren Fuller</author>
      <pubDate>Sat, 15 Jan 2022 12:59:57 +0000</pubDate>
      <link>https://dev.to/dazfuller/nu-shell-and-databricks-4eof</link>
      <guid>https://dev.to/dazfuller/nu-shell-and-databricks-4eof</guid>
      <description>&lt;p&gt;I'm a big fan of the command line. It's often something that can seem daunting to people at first, but with a little time and patience you can often speed up many tasks just by knowing some useful commands and how to chain them together.&lt;/p&gt;

&lt;p&gt;Most of the time I'm in Powershell which, thanks to &lt;a href="https://github.com/powershell/powershell"&gt;Powershell Core&lt;/a&gt;, is now cross-platform and incredibly powerful. But I'm finding myself also using &lt;a href="https://www.nushell.sh/"&gt;Nu&lt;/a&gt; more and more. In both shells I also use the &lt;a href="https://docs.databricks.com/dev-tools/cli/index.html"&gt;Databricks CLI&lt;/a&gt; a lot. Want to check the status of jobs? Use the CLI. Want to upload and download data? Use the CLI. And so on.&lt;/p&gt;

&lt;p&gt;Whilst the Databricks CLI is useful, there's times where I want a little more power over it. Such as, using the CLI to find a Databricks runtime version which is under Long Term Support (LTS) and is &lt;a href="https://databricks.com/product/photon"&gt;Photon&lt;/a&gt; enabled. So, I can do this using, for instance, the Databricks CLI and some &lt;a href="https://stedolan.github.io/jq/"&gt;jq&lt;/a&gt;. But I'm also lazy and wanted something that's a bit easier to query, and displays nicer, and is easier to output to something like CSV afterwards.&lt;/p&gt;

&lt;p&gt;Well, I can get all of that from Nushell. The only downside is that it's quite a few commands to get the data into the right shape to make querying it easy. So, instead, lets do the tedious bits and save them as a &lt;a href="https://www.nushell.sh/book/configuration.html"&gt;command aliases&lt;/a&gt;. So, lets fire up Nushell and give it a go.&lt;/p&gt;

&lt;p&gt;First up, lets find our config file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; config path
C:&lt;span class="se"&gt;\U&lt;/span&gt;sers&lt;span class="se"&gt;\D&lt;/span&gt;arrenFuller&lt;span class="se"&gt;\A&lt;/span&gt;ppData&lt;span class="se"&gt;\R&lt;/span&gt;oaming&lt;span class="se"&gt;\n&lt;/span&gt;ushell&lt;span class="se"&gt;\n&lt;/span&gt;u&lt;span class="se"&gt;\c&lt;/span&gt;onfig&lt;span class="se"&gt;\c&lt;/span&gt;onfig.toml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yours will look different to this, but this is the file we need to add our command aliases to.&lt;/p&gt;

&lt;p&gt;Now, lets work out what our command looks like. I want to create a command that calls the Databricks CLI for the runtime versions and adds some useful information such as if it's an LTS version. So what does that look like?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  databricks clusters spark-versions 
    | from json 
    | get versions 
    | insert isLTS &lt;span class="o"&gt;{&lt;/span&gt; get name | str contains &lt;span class="s2"&gt;"LTS"&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; 
    | insert isML &lt;span class="o"&gt;{&lt;/span&gt; get name | str contains &lt;span class="s2"&gt;"ML"&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; 
    | insert photonEnabled &lt;span class="o"&gt;{&lt;/span&gt; get name | str contains &lt;span class="nt"&gt;-i&lt;/span&gt; &lt;span class="s2"&gt;"Photon"&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
    | insert details &lt;span class="o"&gt;{&lt;/span&gt; get name | parse &lt;span class="s2"&gt;"{runtime} (includes Apache Spark {spark},{remainder}"&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
    | insert runtime &lt;span class="o"&gt;{&lt;/span&gt; get details.runtime &lt;span class="o"&gt;}&lt;/span&gt; 
    | insert spark &lt;span class="o"&gt;{&lt;/span&gt; get details.spark &lt;span class="o"&gt;}&lt;/span&gt;
    | reject details
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I've put that over multiple lines to make it easier to read, but if you want to run it you'll need to have it all on the same line, like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; databricks clusters spark-versions | from json | get versions | insert isLTS &lt;span class="o"&gt;{&lt;/span&gt; get name | str contains &lt;span class="s2"&gt;"LTS"&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; | insert isML &lt;span class="o"&gt;{&lt;/span&gt; get name | str contains &lt;span class="s2"&gt;"ML"&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; | insert photonEnabled &lt;span class="o"&gt;{&lt;/span&gt; get name | str contains &lt;span class="nt"&gt;-i&lt;/span&gt; &lt;span class="s2"&gt;"Photon"&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; | insert details &lt;span class="o"&gt;{&lt;/span&gt; get name | parse &lt;span class="s2"&gt;"{runtime} (includes Apache Spark {spark},{remainder}"&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; | insert runtime &lt;span class="o"&gt;{&lt;/span&gt; get details.runtime &lt;span class="o"&gt;}&lt;/span&gt; | insert spark &lt;span class="o"&gt;{&lt;/span&gt; get details.spark &lt;span class="o"&gt;}&lt;/span&gt; | reject details
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So what's it doing? Lets break it down a bit.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;command&lt;/th&gt;
&lt;th&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;databricks clusters spark-versions&lt;/td&gt;
&lt;td&gt;Run the Databricks CLI to get the available runtime information&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;from json&lt;/td&gt;
&lt;td&gt;Parses the response from JSON as a table&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;get versions&lt;/td&gt;
&lt;td&gt;Gets the "version" part of the response object&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;insert isLTS { get name&lt;/td&gt;
&lt;td&gt;str contains "LTS" }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;insert isML { get name&lt;/td&gt;
&lt;td&gt;str contains "ML" }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;insert photonEnabled { get name&lt;/td&gt;
&lt;td&gt;str contains -i "Photon"&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;insert details { get name&lt;/td&gt;
&lt;td&gt;parse "{runtime} (includes Apache Spark {spark},{remainder}"&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;insert runtime { get details.runtime }&lt;/td&gt;
&lt;td&gt;Adds a new "runtime" column by getting the runtime information from the details column&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;insert spark { get details.spark }&lt;/td&gt;
&lt;td&gt;Adds a new "spark" column by getting the spark version information from the details column&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;reject detail&lt;/td&gt;
&lt;td&gt;Removes the "details" column&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;That's a lot of commands to run each time, so lets instead save this as a command alias in our config file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight toml"&gt;&lt;code&gt;&lt;span class="py"&gt;startup&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s"&gt;"alias dbx-runtimes = ( databricks clusters spark-versions | from json | get versions | insert isLTS { get name | str contains &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s"&gt;LTS&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s"&gt; } | insert isML { get name | str contains &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s"&gt;ML&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s"&gt; } | insert photonEnabled { get name | str contains -i &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s"&gt;Photon&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s"&gt; } | insert details { get name | parse &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s"&gt;{runtime} (includes Apache Spark {spark},{remainder}&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s"&gt; } | insert runtime { get details.runtime } | insert spark { get details.spark } | reject details )"&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here I've aliased the command with the name &lt;code&gt;dbx-runtimes&lt;/code&gt;. I've also had to escape the double-quotation marks. But now that we have this we can run all of the above by simply calling the alias.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; dbx-runtimes
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
 #  ‚îÇ               key                ‚îÇ                                name                                ‚îÇ isLTS ‚îÇ isML  ‚îÇ photonEnabled ‚îÇ          runtime           ‚îÇ spark
‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  0 ‚îÇ 6.4.x-esr-scala2.11              ‚îÇ 6.4 Extended Support (includes Apache Spark 2.4.5, Scala 2.11)     ‚îÇ false ‚îÇ false ‚îÇ false         ‚îÇ 6.4 Extended Support       ‚îÇ 2.4.5
  1 ‚îÇ 7.3.x-cpu-ml-scala2.12           ‚îÇ 7.3 LTS ML (includes Apache Spark 3.0.1, Scala 2.12)               ‚îÇ true  ‚îÇ true  ‚îÇ false         ‚îÇ 7.3 LTS ML                 ‚îÇ 3.0.1
  2 ‚îÇ 7.3.x-hls-scala2.12              ‚îÇ 7.3 LTS Genomics (includes Apache Spark 3.0.1, Scala 2.12)         ‚îÇ true  ‚îÇ false ‚îÇ false         ‚îÇ 7.3 LTS Genomics           ‚îÇ 3.0.1
  3 ‚îÇ 10.2.x-gpu-ml-scala2.12          ‚îÇ 10.2 ML (includes Apache Spark 3.2.0, GPU, Scala 2.12)             ‚îÇ false ‚îÇ true  ‚îÇ false         ‚îÇ 10.2 ML                    ‚îÇ 3.2.0
  4 ‚îÇ 7.3.x-gpu-ml-scala2.12           ‚îÇ 7.3 LTS ML (includes Apache Spark 3.0.1, GPU, Scala 2.12)          ‚îÇ true  ‚îÇ true  ‚îÇ false         ‚îÇ 7.3 LTS ML                 ‚îÇ 3.0.1
  5 ‚îÇ 8.4.x-photon-scala2.12           ‚îÇ 8.4 Photon (includes Apache Spark 3.1.2, Scala 2.12)               ‚îÇ false ‚îÇ false ‚îÇ true          ‚îÇ 8.4 Photon                 ‚îÇ 3.1.2
  6 ‚îÇ 10.1.x-photon-scala2.12          ‚îÇ 10.1 Photon (includes Apache Spark 3.2.0, Scala 2.12)              ‚îÇ false ‚îÇ false ‚îÇ true          ‚îÇ 10.1 Photon                ‚îÇ 3.2.0
  7 ‚îÇ 9.1.x-photon-scala2.12           ‚îÇ 9.1 LTS Photon (includes Apache Spark 3.1.2, Scala 2.12)           ‚îÇ true  ‚îÇ false ‚îÇ true          ‚îÇ 9.1 LTS Photon             ‚îÇ 3.1.2
  8 ‚îÇ 10.2.x-photon-scala2.12          ‚îÇ 10.2 Photon (includes Apache Spark 3.2.0, Scala 2.12)              ‚îÇ false ‚îÇ false ‚îÇ true          ‚îÇ 10.2 Photon                ‚îÇ 3.2.0
  9 ‚îÇ 8.3.x-scala2.12                  ‚îÇ 8.3 (includes Apache Spark 3.1.1, Scala 2.12)                      ‚îÇ false ‚îÇ false ‚îÇ false         ‚îÇ 8.3                        ‚îÇ 3.1.1
 10 ‚îÇ 9.0.x-photon-scala2.12           ‚îÇ 9.0 Photon (includes Apache Spark 3.1.2, Scala 2.12)               ‚îÇ false ‚îÇ false ‚îÇ true          ‚îÇ 9.0 Photon                 ‚îÇ 3.1.2
 11 ‚îÇ 8.4.x-cpu-ml-scala2.12           ‚îÇ 8.4 ML (includes Apache Spark 3.1.2, Scala 2.12)                   ‚îÇ false ‚îÇ true  ‚îÇ false         ‚îÇ 8.4 ML                     ‚îÇ 3.1.2
 12 ‚îÇ 10.1.x-gpu-ml-scala2.12          ‚îÇ 10.1 ML (includes Apache Spark 3.2.0, GPU, Scala 2.12)             ‚îÇ false ‚îÇ true  ‚îÇ false         ‚îÇ 10.1 ML                    ‚îÇ 3.2.0
 13 ‚îÇ 9.1.x-scala2.12                  ‚îÇ 9.1 LTS (includes Apache Spark 3.1.2, Scala 2.12)                  ‚îÇ true  ‚îÇ false ‚îÇ false         ‚îÇ 9.1 LTS                    ‚îÇ 3.1.2
 14 ‚îÇ 10.0.x-cpu-ml-scala2.12          ‚îÇ 10.0 ML (includes Apache Spark 3.2.0, Scala 2.12)                  ‚îÇ false ‚îÇ true  ‚îÇ false         ‚îÇ 10.0 ML                    ‚îÇ 3.2.0
 15 ‚îÇ 9.0.x-gpu-ml-scala2.12           ‚îÇ 9.0 ML (includes Apache Spark 3.1.2, GPU, Scala 2.12)              ‚îÇ false ‚îÇ true  ‚îÇ false         ‚îÇ 9.0 ML                     ‚îÇ 3.1.2
 16 ‚îÇ 9.0.x-scala2.12                  ‚îÇ 9.0 (includes Apache Spark 3.1.2, Scala 2.12)                      ‚îÇ false ‚îÇ false ‚îÇ false         ‚îÇ 9.0                        ‚îÇ 3.1.2
 17 ‚îÇ 8.3.x-cpu-ml-scala2.12           ‚îÇ 8.3 ML (includes Apache Spark 3.1.1, Scala 2.12)                   ‚îÇ false ‚îÇ true  ‚îÇ false         ‚îÇ 8.3 ML                     ‚îÇ 3.1.1
 18 ‚îÇ 10.1.x-cpu-ml-scala2.12          ‚îÇ 10.1 ML (includes Apache Spark 3.2.0, Scala 2.12)                  ‚îÇ false ‚îÇ true  ‚îÇ false         ‚îÇ 10.1 ML                    ‚îÇ 3.2.0
 19 ‚îÇ 10.0.x-scala2.12                 ‚îÇ 10.0 (includes Apache Spark 3.2.0, Scala 2.12)                     ‚îÇ false ‚îÇ false ‚îÇ false         ‚îÇ 10.0                       ‚îÇ 3.2.0
 20 ‚îÇ apache-spark-2.4.x-esr-scala2.11 ‚îÇ Light 2.4 Extended Support (includes Apache Spark 2.4, Scala 2.11) ‚îÇ false ‚îÇ false ‚îÇ false         ‚îÇ Light 2.4 Extended Support ‚îÇ 2.4
 21 ‚îÇ 10.1.x-scala2.12                 ‚îÇ 10.1 (includes Apache Spark 3.2.0, Scala 2.12)                     ‚îÇ false ‚îÇ false ‚îÇ false         ‚îÇ 10.1                       ‚îÇ 3.2.0
 22 ‚îÇ 9.1.x-cpu-ml-scala2.12           ‚îÇ 9.1 LTS ML (includes Apache Spark 3.1.2, Scala 2.12)               ‚îÇ true  ‚îÇ true  ‚îÇ false         ‚îÇ 9.1 LTS ML                 ‚îÇ 3.1.2
 23 ‚îÇ 10.2.x-scala2.12                 ‚îÇ 10.2 (includes Apache Spark 3.2.0, Scala 2.12)                     ‚îÇ false ‚îÇ false ‚îÇ false         ‚îÇ 10.2                       ‚îÇ 3.2.0
 24 ‚îÇ 10.2.x-cpu-ml-scala2.12          ‚îÇ 10.2 ML (includes Apache Spark 3.2.0, Scala 2.12)                  ‚îÇ false ‚îÇ true  ‚îÇ false         ‚îÇ 10.2 ML                    ‚îÇ 3.2.0
 25 ‚îÇ 8.3.x-photon-scala2.12           ‚îÇ 8.3 Photon (includes Apache Spark 3.1.1, Scala 2.12)               ‚îÇ false ‚îÇ false ‚îÇ true          ‚îÇ 8.3 Photon                 ‚îÇ 3.1.1
 26 ‚îÇ 10.0.x-photon-scala2.12          ‚îÇ 10.0 Photon (includes Apache Spark 3.2.0, Scala 2.12)              ‚îÇ false ‚îÇ false ‚îÇ true          ‚îÇ 10.0 Photon                ‚îÇ 3.2.0
 27 ‚îÇ 10.0.x-gpu-ml-scala2.12          ‚îÇ 10.0 ML (includes Apache Spark 3.2.0, GPU, Scala 2.12)             ‚îÇ false ‚îÇ true  ‚îÇ false         ‚îÇ 10.0 ML                    ‚îÇ 3.2.0
 28 ‚îÇ 8.4.x-scala2.12                  ‚îÇ 8.4 (includes Apache Spark 3.1.2, Scala 2.12)                      ‚îÇ false ‚îÇ false ‚îÇ false         ‚îÇ 8.4                        ‚îÇ 3.1.2
 29 ‚îÇ 9.1.x-gpu-ml-scala2.12           ‚îÇ 9.1 LTS ML (includes Apache Spark 3.1.2, GPU, Scala 2.12)          ‚îÇ true  ‚îÇ true  ‚îÇ false         ‚îÇ 9.1 LTS ML                 ‚îÇ 3.1.2
 30 ‚îÇ apache-spark-2.4.x-scala2.11     ‚îÇ Light 2.4 (includes Apache Spark 2.4, Scala 2.11)                  ‚îÇ false ‚îÇ false ‚îÇ false         ‚îÇ Light 2.4                  ‚îÇ 2.4
 31 ‚îÇ 7.3.x-scala2.12                  ‚îÇ 7.3 LTS (includes Apache Spark 3.0.1, Scala 2.12)                  ‚îÇ true  ‚îÇ false ‚îÇ false         ‚îÇ 7.3 LTS                    ‚îÇ 3.0.1
 32 ‚îÇ 8.4.x-gpu-ml-scala2.12           ‚îÇ 8.4 ML (includes Apache Spark 3.1.2, GPU, Scala 2.12)              ‚îÇ false ‚îÇ true  ‚îÇ false         ‚îÇ 8.4 ML                     ‚îÇ 3.1.2
 33 ‚îÇ 9.0.x-cpu-ml-scala2.12           ‚îÇ 9.0 ML (includes Apache Spark 3.1.2, Scala 2.12)                   ‚îÇ false ‚îÇ true  ‚îÇ false         ‚îÇ 9.0 ML                     ‚îÇ 3.1.2
 34 ‚îÇ 8.3.x-gpu-ml-scala2.12           ‚îÇ 8.3 ML (includes Apache Spark 3.1.1, GPU, Scala 2.12)              ‚îÇ false ‚îÇ true  ‚îÇ false         ‚îÇ 8.3 ML                     ‚îÇ 3.1.1
‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Your output might look different depending on when you run the command.&lt;/p&gt;

&lt;p&gt;But from this we can now start adding in some filters to get to the records we want. So if I want to find all of the runtimes which are Long Term Support but aren't ML instances I can do the following.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; dbx-runtimes | where isLTS | where isML &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nv"&gt;$false&lt;/span&gt; | sort-by key
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
 # ‚îÇ          key           ‚îÇ                            name                            ‚îÇ isLTS ‚îÇ isML  ‚îÇ photonEnabled ‚îÇ     runtime      ‚îÇ spark
‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
 0 ‚îÇ 7.3.x-hls-scala2.12    ‚îÇ 7.3 LTS Genomics (includes Apache Spark 3.0.1, Scala 2.12) ‚îÇ true  ‚îÇ false ‚îÇ false         ‚îÇ 7.3 LTS Genomics ‚îÇ 3.0.1
 1 ‚îÇ 7.3.x-scala2.12        ‚îÇ 7.3 LTS (includes Apache Spark 3.0.1, Scala 2.12)          ‚îÇ true  ‚îÇ false ‚îÇ false         ‚îÇ 7.3 LTS          ‚îÇ 3.0.1
 2 ‚îÇ 9.1.x-photon-scala2.12 ‚îÇ 9.1 LTS Photon (includes Apache Spark 3.1.2, Scala 2.12)   ‚îÇ true  ‚îÇ false ‚îÇ true          ‚îÇ 9.1 LTS Photon   ‚îÇ 3.1.2
 3 ‚îÇ 9.1.x-scala2.12        ‚îÇ 9.1 LTS (includes Apache Spark 3.1.2, Scala 2.12)          ‚îÇ true  ‚îÇ false ‚îÇ false         ‚îÇ 9.1 LTS          ‚îÇ 3.1.2
‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A lot simpler to read, and very easy to now work with. And if I want to save the results I could just add &lt;code&gt;| save runtimes.csv&lt;/code&gt; and I'll have a csv with the same data in it.&lt;/p&gt;

&lt;p&gt;I've done the same with the Databricks cluster node types as well, though that is a lot less complex than the above one, but it makes being able to query for the information a lot simpler. And with Nushell providing great features for filtering, displaying, and getting data, it's a smooth and easy workflow. &lt;/p&gt;

</description>
      <category>nushell</category>
      <category>databricks</category>
      <category>commandline</category>
      <category>nu</category>
    </item>
    <item>
      <title>How to Commit like a Boss</title>
      <author>Gourav Singh Rawat</author>
      <pubDate>Sat, 15 Jan 2022 12:39:03 +0000</pubDate>
      <link>https://dev.to/seek4samurai/how-to-commit-like-a-boss-jf0</link>
      <guid>https://dev.to/seek4samurai/how-to-commit-like-a-boss-jf0</guid>
      <description>&lt;h2&gt;
  &lt;a href="#whats-committing-anyways"&gt;
  &lt;/a&gt;
  What's Committing anyways?
&lt;/h2&gt;

&lt;p&gt;Well committing in here refers to staging up the changes that you make in your local machine and far from this pushing it to the branch where other teammates can get themselves update with what you've done in project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-is-it-to-learn-committing-cant-you-commit-just-right-away"&gt;
  &lt;/a&gt;
  Why is it to learn committing, can't you commit just right away?
&lt;/h2&gt;

&lt;p&gt;No, talking about myself I generally work on different projects almost daily. And which lead to change in programming environment.&lt;br&gt;
By this I mean like if you're working on some project and commits some changes with some message that might not be very descriptive and you switch to some other work.&lt;/p&gt;

&lt;p&gt;When you return back to the older project to work on it again, you might need to get familiar with what you did last time and what changes have already been made by your teammates(if you have any :P) before you actually start to work.&lt;/p&gt;

&lt;p&gt;This leads to confusion and reduced in degree of DRY rule.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-right-way-to-commitcommunication"&gt;
  &lt;/a&gt;
  The right way to commit/communication
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Commenting as you work&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When you're doing some work on a project make sure you place comments on what these lines of code do. This slowly but surely increases the productivity of you and your team when they return to work, as it reminds the programmer about things rather than understanding them him/herself.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Writing less but more&lt;/strong&gt;&lt;br&gt;
Writing a message during your commit gives idea about what this commit does and contributes to. So, giving a write message counts +1 towards productivity.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-not-to-do"&gt;
  &lt;/a&gt;
  What not to do
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Don't commit after every changes&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It's recommended that you commit once you're sure you'd commit your work. Completing a section of work and doing commits in order always benefits.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don't write weird and non-sense messages&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Committing a small yet informative message is necessary. It doesn't have to be a whole novel.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git commit -m "today i changed some theme colors and added few of mine because your colors suck I fkin hated them so i got rid of them. Apart from this I also added a Palette section it's was a hell lot of work i better get a raise :P"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Instead&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git commit -m "added Palette section &amp;amp; few theme changes"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Hope you find this informative.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>beginners</category>
      <category>productivity</category>
      <category>github</category>
    </item>
  </channel>
</rss>
