<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Relational Data Services in Azure</title>
      <author>geetcloud</author>
      <pubDate>Wed, 01 Sep 2021 15:26:43 +0000</pubDate>
      <link>https://dev.to/geetcloud/relational-data-services-in-azure-151f</link>
      <guid>https://dev.to/geetcloud/relational-data-services-in-azure-151f</guid>
      <description>&lt;p&gt;&lt;strong&gt;In this article&lt;/strong&gt;, we are going to see all of the Relational Data Services that are available in Azure&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Infrastructure as a service (IaaS) - SQL Server on VMs&lt;/p&gt;

&lt;p&gt;Platform as a Service (PaaS) - Azure SQL Database , Azure SQL Managed&lt;br&gt;
Instance, Azure Database for MySQL, PostgreSQL &amp;amp; MariaDB.&lt;/p&gt;

&lt;p&gt;For Hybrid On-Premise extension - SQL Stretch Database&lt;/p&gt;

&lt;p&gt;For IoT - Azure SQL Edge&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#sql-server-on-azure-vm"&gt;
  &lt;/a&gt;
  SQL Server on Azure VM
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--saYcRp5M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-Fk4UtQIf0ew/YRm2YRH0xsI/AAAAAAAAAIM/9D9v1FDBq_sI-B1YXB5V7rrtwFSOUGk7ACLcBGAsYHQ/w200-h200/sqlonvm.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--saYcRp5M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-Fk4UtQIf0ew/YRm2YRH0xsI/AAAAAAAAAIM/9D9v1FDBq_sI-B1YXB5V7rrtwFSOUGk7ACLcBGAsYHQ/w200-h200/sqlonvm.jpeg" alt="SQL Server on Azure VM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With SQL Server on Azure VM, on-premise SQL workloads can be easily shifted to Azure while maintaining complete SQL Server compatibility and operating system-level access.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Key Features&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Infrastructure as Service (IaaS) with a complete set of features.&lt;/li&gt;
&lt;li&gt;  Requires no code changes except the connection string.&lt;/li&gt;
&lt;li&gt;  Full control over the server in the cloud as similar to on-premise server.&lt;/li&gt;
&lt;li&gt;  Leverage existing expertise in SQL Server and continue working the same way as on the on-premise server.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#azure-sql-database"&gt;
  &lt;/a&gt;
  Azure SQL Database
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6n7djrk3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-YKWOsdHAttQ/YRm4MtRKalI/AAAAAAAAAIk/6VIYOrZ8t7Qv80pLHqw1dpmspMKeg8ZQgCLcBGAsYHQ/w200-h200/Azure%252BSQL%252BDatabase.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6n7djrk3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-YKWOsdHAttQ/YRm4MtRKalI/AAAAAAAAAIk/6VIYOrZ8t7Qv80pLHqw1dpmspMKeg8ZQgCLcBGAsYHQ/w200-h200/Azure%252BSQL%252BDatabase.png" alt="Azure SQL Database"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Azure SQL Database is the most preferred solution for normal relational and transactional databases. Azure provides the option to create a database server and deploy our databases to the cloud. A SQL Database server is a logical construct that acts as a central administrative point for multiple single or pooled databases, logins, firewall rules, auditing rules, threat detection policies, and failover groups. Azure SQL Database is available with several options: Single Database, Elastic Pool, and Managed Instance.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.blogger.com/u/1/blog/post/edit/7467356195560229083/2964710571868763031#"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e8MVL62N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-A7_BCuswNxE/YRm5hMmBZlI/AAAAAAAAAI4/GKMcMHWvBSsbAuniK6ozw0NxNk5PNqAaACLcBGAsYHQ/w640-h301/Screen%252BShot%252B2021-08-15%252Bat%252B5.30.30%252BPM.png" alt="Azure SQL Managed Instance"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#azure-sql-managed-instance"&gt;
  &lt;/a&gt;
  Azure SQL Managed Instance
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eLMV8w04--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-Zao380bPz-Q/YRm4xkI_JLI/AAAAAAAAAIw/molZ0pGPZbQ9uO8FGeJKLcdX0n5ztsWEwCLcBGAsYHQ/w198-h200/sqlmanagedinstance.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eLMV8w04--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-Zao380bPz-Q/YRm4xkI_JLI/AAAAAAAAAIw/molZ0pGPZbQ9uO8FGeJKLcdX0n5ztsWEwCLcBGAsYHQ/w198-h200/sqlmanagedinstance.png" alt="Azure SQL Managed Instance"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Azure SQL Database restricts some of the administrative features available in SQL Server. Within Azure SQL Managed Instance, we have full control over the instance, as much as you would for an on-premises server. We can deploy as many as databases we want in the server.&lt;/p&gt;

&lt;p&gt;With the support of other Azure Services, managed instance automates backups, software updates, monitoring etc., it is always up-to-date.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Key Features&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Easy lift and shift - Fully-fledged SQL instance with 100%
compatibility with on-premise instance.

&lt;ul&gt;
&lt;li&gt;  Fully Managed PaaS service with a complete set of features.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt; Enhanced Security and isolation with VNet and a private IP address.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#azure-database-for-mysql"&gt;
  &lt;/a&gt;
  Azure Database for MySQL
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.blogger.com/u/1/blog/post/edit/7467356195560229083/2964710571868763031#"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OAdqSUML--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-TGSqkhqE-58/YRnHvpFMpPI/AAAAAAAAAJQ/dDYTHXy5NvEStDJPUm2WDdDLQmcb80CzQCLcBGAsYHQ/w200-h200/mysql.jpeg" alt="Azure Database for MySQL"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;MySQL is the leading open source relational database for Linux, Apache, MySQL, and PHP (LAMP) stack apps.&lt;/p&gt;

&lt;p&gt;Azure Database for MySQL based on the MySQL free community edition offers high availability and elastic scaling to open-source mobile and web apps or migrate MySQL workloads to the cloud.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Key Features&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Built-in high availability features&lt;/li&gt;
&lt;li&gt;  Enhanced security with compliance&lt;/li&gt;
&lt;li&gt;  Automatic backups and point-in-time restore for up to 35 days&lt;/li&gt;
&lt;li&gt;  Easy scaling option&lt;/li&gt;
&lt;li&gt;  Pay-as-you-go pricing - only pay for what you use.&lt;/li&gt;
&lt;li&gt;  Offers integration with Azure App Services and Azure Kubernete Services for simplified development&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#azure-database-for-postgresql"&gt;
  &lt;/a&gt;
  Azure Database for PostgreSQL
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://1.bp.blogspot.com/-rmjuZ_1mvHg/YRnLJ1SVvXI/AAAAAAAAAJY/CmVOVPLE_RQifZ-_rcny1zSJOvwpuzEFgCLcBGAsYHQ/s161/postgresql.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nU8AvDDe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-rmjuZ_1mvHg/YRnLJ1SVvXI/AAAAAAAAAJY/CmVOVPLE_RQifZ-_rcny1zSJOvwpuzEFgCLcBGAsYHQ/w180-h200/postgresql.png" alt="Azure Database for PostgreSQL"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Azure PostgreSQL helps in building scalable, secure, and fully managed enterprise-ready apps on open-source PostgreSQL, scale out single-node PostgreSQL with high performance, or migrate PostgreSQL and Oracle workloads to the cloud.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Key Features&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Offers extensions which MySQL does not have&lt;/li&gt;
&lt;li&gt;  PostgreSQL Extensions provides additional custom data types, functions, JSONB, full text-search, index types, language-types, caching, geospatial support etc.,&lt;/li&gt;
&lt;li&gt;  Supports geometric data such as lines, circles and polygons&lt;/li&gt;
&lt;li&gt;  Supports both relational and non-relational data&lt;/li&gt;
&lt;li&gt;  Provides high performance horizontal scaling using Hyperscale (Citus)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Similarities with MySQL&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Both are Open Source, and support relational database and fully managed services.&lt;/li&gt;
&lt;li&gt;  Makes it easier to lift and shift your applications to Azure&lt;/li&gt;
&lt;li&gt;  No need to convert your datastore to SQL Server or SQL Database&lt;/li&gt;
&lt;li&gt;  Use the same tools as SQL Database for scaling and monitoring&lt;/li&gt;
&lt;li&gt;  Intelligent Performance Recommendations&lt;/li&gt;
&lt;li&gt;  Enhanced Security Capabilities&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#azure-maria-db"&gt;
  &lt;/a&gt;
  Azure Maria DB
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://1.bp.blogspot.com/-FOz1A0EhMeI/YRnLdo5SrZI/AAAAAAAAAJg/JywNIKAGvukvgRjcsHEL_cLCgUjt1sEcQCLcBGAsYHQ/s225/azuremariadb.jpeg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ena1pbm6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-FOz1A0EhMeI/YRnLdo5SrZI/AAAAAAAAAJg/JywNIKAGvukvgRjcsHEL_cLCgUjt1sEcQCLcBGAsYHQ/w200-h200/azuremariadb.jpeg" alt="Azure Maria DB"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MariaDB&lt;/strong&gt; is a newer database management system, created by the original developers of MySQL.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Key Features&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Built-in support for temporal data. A table can hold several versions of data, enabling an application to query the data as it appeared at some point in the past&lt;/li&gt;
&lt;li&gt;  Offers compatibility with Oracle Database&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Azure MariaDB&lt;/strong&gt; based on free community edition offers high availability and elastic scaling to open-source mobile and web apps with a managed community MariaDB database service&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Key Features of Azure MariaDB&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Relational Database as a fully managed service&lt;/li&gt;
&lt;li&gt;  High Availability&lt;/li&gt;
&lt;li&gt;  Scaling as needed within seconds&lt;/li&gt;
&lt;li&gt;  Automatic backups and point-in-time restore for up to 35 days&lt;/li&gt;
&lt;li&gt;  Support for many languages and frameworks&lt;/li&gt;
&lt;li&gt;  Enhanced Security Capabilities with Azure IP Advantage&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#hybrid-database-using-sql-server-stretch-db"&gt;
  &lt;/a&gt;
  Hybrid Database using SQL Server Stretch DB
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://1.bp.blogspot.com/-BFQX_Ja3y7s/YRnL3XgNPYI/AAAAAAAAAJo/8v_Te3AV-68Ny69QJ3KKycWNvJ2K2RcfwCLcBGAsYHQ/s270/Sqlstretch.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5plLxo8a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-BFQX_Ja3y7s/YRnL3XgNPYI/AAAAAAAAAJo/8v_Te3AV-68Ny69QJ3KKycWNvJ2K2RcfwCLcBGAsYHQ/w200-h139/Sqlstretch.png" alt="SQL Server Stretch DB"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Scenarios where we choose to go for the hybrid option&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  When you have an existing database that is running out of space&lt;/li&gt;
&lt;li&gt;  When you have an on premise server with large database running lot of applications&lt;/li&gt;
&lt;li&gt;  To retain existing Traditional Architecture of Legacy system. The hardest option out of the rest.&lt;/li&gt;
&lt;li&gt;  For these scenarios, upgrading to a new server might be difficult and painful. One option would be to extend "cool" data to the cloud, so we can extend the life of the on premise server.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Using Stretch Database, data can be split between on-premises storage and cloud storage. We can push the cold, historical data to the cloud (which will be accessed rarely) and warm active data can be retained on-premises to boost the performance.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#azure-sql-edge"&gt;
  &lt;/a&gt;
  Azure SQL Edge
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://1.bp.blogspot.com/-jvan2s6c8L4/YRnNKmOaruI/AAAAAAAAAJw/wI1bc7y2PJ0ER84jxRv9uFbPgj7SZ9NVwCLcBGAsYHQ/s272/sqledge.jpeg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R2HW3nnT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-jvan2s6c8L4/YRnNKmOaruI/AAAAAAAAAJw/wI1bc7y2PJ0ER84jxRv9uFbPgj7SZ9NVwCLcBGAsYHQ/w200-h193/sqledge.jpeg" alt="Azure SQL Edge"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Azure SQL Edge is an optimized relational database engine that is specially designed for IoT and IoT Edge deployments.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Key Features&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Able to create excellent data storage and processing layer for different IoT applications.&lt;/li&gt;
&lt;li&gt;  Since it is built on top of the SQL Server database engine, we can use the same T-SQL programming in SQL Server&lt;/li&gt;
&lt;li&gt;  Provides the most demanding machine learning and artificial intelligence capabilities&lt;/li&gt;
&lt;li&gt;  Its built-in streaming capability helps you with complex event processing and realtime analytics&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;This time, we covered the Relational data store related services that are available in Azure. Stay tuned to learn more about other types of data stores in Azure, as this is just the beginning.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://azure.microsoft.com/en-ca/product-categories/databases/"&gt;https://azure.microsoft.com/en-ca/product-categories/databases/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/learn/modules/explore-relational-data-offerings/2-azure-data-services"&gt;https://docs.microsoft.com/en-us/learn/modules/explore-relational-data-offerings/2-azure-data-services&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/azure/architecture/guide/technology-choices/data-store-overview"&gt;https://docs.microsoft.com/en-us/azure/architecture/guide/technology-choices/data-store-overview&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#thanks-for-reading-this-post"&gt;
  &lt;/a&gt;
  Thanks for reading this post!
&lt;/h2&gt;

&lt;p&gt;I hope this article is informative and helpful in some way. If it is, please like and share this article. Follow me on &lt;a href="https://twitter.com/geetcloud"&gt;Twitter&lt;/a&gt; | &lt;a href="https://www.linkedin.com/in/sangeetha-karthik/"&gt;LinkedIn&lt;/a&gt; for more related tips and posts.&lt;/p&gt;

&lt;p&gt;Happy learning! &lt;/p&gt;

</description>
      <category>azure</category>
      <category>mysql</category>
      <category>postgres</category>
      <category>cloud</category>
    </item>
    <item>
      <title>Developing for the web with Flask; creating a web application.</title>
      <author>Billy</author>
      <pubDate>Wed, 01 Sep 2021 15:09:17 +0000</pubDate>
      <link>https://dev.to/billyndirangu/developing-for-the-web-with-flask-creating-a-web-application-2257</link>
      <guid>https://dev.to/billyndirangu/developing-for-the-web-with-flask-creating-a-web-application-2257</guid>
      <description>&lt;p&gt;Hey there, In this tutorial i will be showing you how to develop your first fullstack web-app project with flask-python.&lt;br&gt;
In this tutorial or rather a documentation of how i did it, buckle up dev, and may the ride begin!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Basic python language skills.&lt;/li&gt;
&lt;li&gt;Basic command line commands.(linux)&lt;/li&gt;
&lt;li&gt;PIP( a package manager for python)
&lt;a href="https://pip.pypa.io/en/stable/installation/"&gt;Installation&lt;/a&gt;
allows you to install required libraries for a specific project, i.e: Flask&lt;/li&gt;
&lt;li&gt;IDE(vscode, atom, sublime)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.python.org/downloads/"&gt;Python&lt;/a&gt; installed.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#contents"&gt;
  &lt;/a&gt;
  Contents
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#launch"&gt;Launch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#inst"&gt;Installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#temp"&gt;Templating&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#statements"&gt;Conditionals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#loops"&gt;Looping&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#forms"&gt;Web Forms&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#configure"&gt;Configurations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#form-templates"&gt;Templating forms&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#db"&gt;Database&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#migrations"&gt;Database migrations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#models"&gt;Database models&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#migrate"&gt;Migrating Data to the DB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#update-db"&gt;Adding data to the database&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#posts"&gt;Viewing Posts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#summary"&gt;Summary&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#launch"&gt;
  &lt;/a&gt;
  Launch &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Now setup up your project structure.&lt;br&gt;
launch your code editor and create a directory in it.&lt;br&gt;
&lt;code&gt;mkdir blogger &amp;amp;&amp;amp; cd blogger&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Now create your starting files:
&lt;code&gt;mkdir app &amp;amp;&amp;amp; cd app&lt;/code&gt;
&lt;code&gt;touch app.py routes.py models.py&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;While in the app directory create two directories
&lt;code&gt;mkdir templates static&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Navigate to the root directory &lt;code&gt;blogger&lt;/code&gt; and create the following files
&lt;code&gt;touch blog.py config.py&lt;/code&gt;
all is set and your project structure should be looking like this:-
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;blogger&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="o"&gt;|-&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
     &lt;span class="o"&gt;|-&lt;/span&gt;&lt;span class="n"&gt;templates&lt;/span&gt; &lt;span class="c1"&gt;#html files directory
&lt;/span&gt;     &lt;span class="o"&gt;|-&lt;/span&gt;&lt;span class="n"&gt;static&lt;/span&gt; &lt;span class="c1"&gt;#css&amp;amp; images directory
&lt;/span&gt;     &lt;span class="o"&gt;|-&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
     &lt;span class="o"&gt;|-&lt;/span&gt;&lt;span class="n"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="c1"&gt;#site navigation capability
&lt;/span&gt;     &lt;span class="o"&gt;|-&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="c1"&gt;#db logic goes here
&lt;/span&gt;&lt;span class="o"&gt;|-&lt;/span&gt;&lt;span class="n"&gt;blog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="c1"&gt;# main apprunning module
&lt;/span&gt;&lt;span class="o"&gt;|-&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;

&lt;span class="c1"&gt;#tip: identation shows file location, eg; templates is in app dir
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;When working with external libraries it is good to run your project in a virtual environment, go ahead and install virtualenv via the terminal&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;virtualenv&lt;/span&gt;
&lt;span class="c1"&gt;#create a virtual environment 
&lt;/span&gt;&lt;span class="n"&gt;virtualenv&lt;/span&gt; &lt;span class="n"&gt;bloggerenv&lt;/span&gt;
&lt;span class="c1"&gt;# you can name your env any name
# activating 
# windows
&lt;/span&gt;&lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;bloggerenv&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Scripts&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;activate&lt;/span&gt;
&lt;span class="c1"&gt;# linux
&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="n"&gt;bloggerenv&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;activate&lt;/span&gt;

&lt;span class="c1"&gt;#deactivating the env
&lt;/span&gt;&lt;span class="n"&gt;deactivate&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#installing-libraries"&gt;
  &lt;/a&gt;
  Installing libraries &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;We use the PIP to install the required libraries&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bloggerenv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt; 
&lt;span class="c1"&gt;# this are the underlying packages to start a project
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;open the &lt;strong&gt;init&lt;/strong&gt;.py in app directory type this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#__init__.py
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#flask object instance
&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;routes&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;first we import the Flask class from the flask module.&lt;/li&gt;
&lt;li&gt;next we create the app object as an instance of the Flask class.&lt;/li&gt;
&lt;li&gt;then import the &lt;code&gt;routes&lt;/code&gt; module, to be created later&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Open the &lt;strong&gt;routes.py&lt;/strong&gt; file and we create the first route and test if everything is working.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/index'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"Hello, World!"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first line imports the application instance.&lt;br&gt;
This is a view function, what it does it returns the string Hello World, to the browser when the app is run.&lt;br&gt;
The two first lines &lt;code&gt;@app.route&lt;/code&gt; are called &lt;strong&gt;decorators&lt;/strong&gt;, they create urls for the web-app.&lt;/p&gt;

&lt;p&gt;Head over to the blog.py file and create the app running logic.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#blog.py
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'__main__:
    app.run()
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this our app is done and can be previewed in the browser.But before running Flask needs to be told how to import it, through the &lt;code&gt;FLASK_APP&lt;/code&gt; environment.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bloggerenv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;export&lt;/span&gt; &lt;span class="n"&gt;FLASK_APP&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;blog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you are using a windows OS use the keyword &lt;code&gt;set&lt;/code&gt; instead of &lt;code&gt;export&lt;/code&gt;.&lt;br&gt;
You can run your app in the terminal now:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bloggerenv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;flask&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;
 &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Serving&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="s"&gt;'blog.py'&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lazy&lt;/span&gt; &lt;span class="n"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Environment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;production&lt;/span&gt;
   &lt;span class="n"&gt;WARNING&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;development&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Do&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;use&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;production&lt;/span&gt; &lt;span class="n"&gt;deployment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
   &lt;span class="n"&gt;Use&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;production&lt;/span&gt; &lt;span class="n"&gt;WSGI&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="n"&gt;instead&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
 &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Debug&lt;/span&gt; &lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;off&lt;/span&gt;
 &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Running&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="mf"&gt;127.0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Press&lt;/span&gt; &lt;span class="n"&gt;CTRL&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;quit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Copy the url &lt;code&gt;http://127.0.0.1:5000/&lt;/code&gt; in the browser.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yY8G0Eul--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.miguelgrinberg.com/static/images/mega-tutorial/ch01-hello-world.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yY8G0Eul--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.miguelgrinberg.com/static/images/mega-tutorial/ch01-hello-world.png" alt="App preview"&gt;&lt;/a&gt;&lt;br&gt;
Voila! app running and good.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#templating"&gt;
  &lt;/a&gt;
  Templating &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;In this section i'll show how to work with templates to generate more elaborate web pages with more complex structures. &lt;br&gt;
We are going to use Jinja2, it is a templating engine for &lt;br&gt;
flask.&lt;br&gt;
We are going to store the template/html files in the templates folder.&lt;br&gt;
Create an &lt;code&gt;index.html&lt;/code&gt; file and open it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
    &lt;span class="o"&gt;|-&lt;/span&gt;&lt;span class="n"&gt;templates&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; 
               &lt;span class="o"&gt;|-&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I want the homepage to display a custom welcome message to the user&lt;br&gt;
In the routes file create a python dictionary that holds our mock user:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/index'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'username'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Developer'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'index.html'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'Home'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we import the &lt;code&gt;render_template&lt;/code&gt; function from the &lt;code&gt;flask&lt;/code&gt; module. It handles &lt;code&gt;html&lt;/code&gt; rendering in python&lt;br&gt;
Then we create mock data as a python dictionary for a user, this will change henceforth as we include a database.&lt;/p&gt;

&lt;p&gt;Let's code the &lt;code&gt;index.html&lt;/code&gt; file:-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;{{ title }} - blogger&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Hello, {{ user.username }}!&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we run this version of the app, we get a nice preview with the username printed out. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vcY-0NDR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://jinja.palletsprojects.com/en/3.0.x/templates/" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vcY-0NDR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://jinja.palletsprojects.com/en/3.0.x/templates/" alt="Jinja2"&gt;&lt;/a&gt;substitutes &lt;code&gt;{{ ... }}&lt;/code&gt; blocks with corresponding values, given by the arguments provided in the &lt;code&gt;render_template()&lt;/code&gt; call.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JDOCh6Dm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ys86v10pwdxq9d0jlgy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JDOCh6Dm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ys86v10pwdxq9d0jlgy.png" alt="App in browser preview"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#conditional-statements-in-jinja2"&gt;
  &lt;/a&gt;
  Conditional statements in jinja2 &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Jinja2 supports control statements given inside &lt;code&gt;{%..%}&lt;/code&gt;&lt;br&gt;
Add a conditional statement to the &lt;code&gt;index.html&lt;/code&gt; that will print the documents title when provided in the &lt;code&gt;render_template()&lt;/code&gt; call and prints out a default title if None is provided.&lt;br&gt;
Put this block in the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; section:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;{% if title %}
  &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;{{ title }}&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
{% else %}
  &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;App | blogger&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
{% endif %}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#loops"&gt;
  &lt;/a&gt;
  Loops &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;And yes jinja2 also supports looping, what did you expect!😂&lt;br&gt;
lets add a mock data in our &lt;code&gt;routes.py&lt;/code&gt; file for posts&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/index'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'username'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Developer'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;'author'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'username'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Guido'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="s"&gt;'body'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'I designed python language'&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="s"&gt;'author'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'username'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Jack'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="s"&gt;'body'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Blue is a cool color'&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'index.html'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'Homer'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;posts&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;I create a list &lt;code&gt;posts&lt;/code&gt; with nested dictionaries, where each element is a dictionary that has &lt;code&gt;author&lt;/code&gt; &amp;amp; &lt;code&gt;body&lt;/code&gt; fields.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now head on to &lt;code&gt;index.html&lt;/code&gt; and handle the rendering of posts in the browser, posts can be of any number and we need to tell the temlate how to render them all, for that case we use a &lt;code&gt;for&lt;/code&gt; loop.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;{{ title }} - blogger&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt; 
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    {% if user.username %}
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Hello, {{ user.username }}&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    {% else %}
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Hello, World!&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    {% endif %}

    &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;My posts!&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
    {% for post in posts %}
        &lt;span class="nt"&gt;&amp;lt;b&amp;gt;&lt;/span&gt;{{ post.author.username }}&lt;span class="nt"&gt;&amp;lt;/b&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;{{ post.body }}&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    {% endfor %}
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Give this new version a try and voila!!🤯🤯&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nL99iB-c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bgxp6my041evvt259unk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nL99iB-c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bgxp6my041evvt259unk.png" alt="app posts preview"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When the structure of the app gets bigger and bigger we need to separate some preferences, for example, when linking css files or having a navbar in our website, its needed anyway.😊  we ought to do it in a separate template file.&lt;br&gt;
We call this template inheritance:-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Go ahead and create; &lt;code&gt;base.html&lt;/code&gt; in the templates directory.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- base.html --&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"{{ url_for('static', filename='style.css') }}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    {% block title %} 
        &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Document&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    {% endblock %}
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    {% block content %}

    {% endblock %}
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;With this we can now simplify our &lt;code&gt;index.html&lt;/code&gt; file:-&lt;br&gt;
to inherit a template file we use the &lt;code&gt;{% extends %}&lt;/code&gt; tag, at the top of the child template.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;{% extends 'base.html' %}
{% block title %}
    {% if user.username %}
        &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;{{ title }}- blogger&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    {% else %}
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Blogger&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    {% endif %}
{% endblock %}
{% block content %}
    &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;My posts!&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
    {% for post in posts %}
        &lt;span class="nt"&gt;&amp;lt;b&amp;gt;&lt;/span&gt;{{ post.author.username }}&lt;span class="nt"&gt;&amp;lt;/b&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;{{ post.body }}&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    {% endfor %}
{% endblock %}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Template inheritance allows us to have the same look in every page without duplication.&lt;br&gt;
Hence enabling us to be 'DRY'.&lt;br&gt;
If you go and run this the results will be the same as above.&lt;/p&gt;

&lt;p&gt;As the application growsn it will require more functionality and features; like web forms, etc.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#web-forms"&gt;
  &lt;/a&gt;
  Web forms. &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;In this chapter I'll show you how to create web forms to take user input via the browser.&lt;br&gt;
We use an extension called &lt;strong&gt;Flask-WTF&lt;/strong&gt;, it is a wrapper found in the package WTForms, that integrates well with Flask.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bloggerenv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;flask&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;wtf&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#configurations"&gt;
  &lt;/a&gt;
  Configurations &lt;a&gt;&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;For tutorial purposes I am going to create just a simple form.&lt;br&gt;
But before that, I am going to set some configuration variables, for &lt;em&gt;separation of concerns&lt;/em&gt; i am going to define my app configs in the &lt;code&gt;config.py&lt;/code&gt; module in the top most directory.&lt;br&gt;
I'll use a class to store any config variables and new configuration variables can be added here.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# config.py
&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;SECRET_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'SECRET_KEY'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="s"&gt;'you-will-never-guess'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;the &lt;code&gt;SECRET_KEY&lt;/code&gt; configuration variable is an important config in most flask apps, it is used by the Flask-WTF to protect web forms against the &lt;a href="https://en.wikipedia.org/wiki/Cross-site_request_forgery"&gt;Cross Site Request Forgery&lt;/a&gt;(CSRF) attack.&lt;br&gt;
The value of the secret key is set as an expression with two terms, joined by the or operator. The first term looks for the value of an environment variable, also called &lt;code&gt;SECRET_KEY&lt;/code&gt;. The second term, is just a hardcoded string. &lt;br&gt;
For now the app is small and doesn't require much security, i'll just use the hardcoded string, but when deploying it needs to be replaced with a unique key, can be generated in the python shell using the &lt;code&gt;urandom&lt;/code&gt; module&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;urandom&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;urandom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\x1d\x00\x08\x8b&lt;/span&gt;&lt;span class="s"&gt; &lt;/span&gt;&lt;span class="se"&gt;\xd8\xae\xe9&lt;/span&gt;&lt;span class="s"&gt;....
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that i have the config set up, i have to tell Flask to read and apply it. This can be done right after the flask app instance in the &lt;code&gt;__init__.py&lt;/code&gt; using the &lt;code&gt;app.config.from_object()&lt;/code&gt; method:.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;config&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Config&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;routes&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Creating&lt;/strong&gt; the first form, once again having the separation of concerns in mind, in the &lt;code&gt;app directory&lt;/code&gt; create a file &lt;code&gt;forms.py&lt;/code&gt;&lt;br&gt;
The Flask-WTF extension uses Python classes to represent web forms. A form class simply defines the fields of the form as class variables.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#app/forms.py
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask_wtf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FlaskForm&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;wtforms&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;StringField&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TextAreaField&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SubmitField&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;wtforms.validators&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;DataRequired&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PostForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FlaskForm&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;StringField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'User name'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;validators&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;DataRequired&lt;/span&gt;&lt;span class="p"&gt;()])&lt;/span&gt;
    &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TextAreaField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Post'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;validators&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;DataRequired&lt;/span&gt;&lt;span class="p"&gt;()])&lt;/span&gt;
    &lt;span class="n"&gt;submit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SubmitField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Submit'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Import the FlaskForm base class.&lt;/li&gt;
&lt;li&gt;For each form you will need you create a separate class variable, each field is given a label as the first argument.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;validators&lt;/code&gt; field is used to attach validation behaviors to form fields.
-The &lt;code&gt;DataRequired&lt;/code&gt; validator checks that a field is not submitted empty.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#form-templates"&gt;
  &lt;/a&gt;
  Form Templates &lt;a&gt;&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;Next is to add the form to a HTML template, so it gets rendered to the web page.&lt;br&gt;
The &lt;code&gt;LoginForm&lt;/code&gt; class knows how to render itself as HTML, this makes the next part fairly simple.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;create a file &lt;code&gt;new_post.html&lt;/code&gt; in &lt;code&gt;app/template/new_post.html&lt;/code&gt;
N/B:For uniformity inherit the &lt;code&gt;base.html&lt;/code&gt; template inside the new template.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;{% extends 'base.html' %}
{% block title %}
    {% if title %}
        &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;{{ title }}- blogger&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    {% else %}
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Blogger&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    {% endif %}
{% endblock %}
{% block content %}
    &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"POST"&lt;/span&gt; &lt;span class="na"&gt;novalidate&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        {{ form.hidden_tag() }}
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
            {{ form.username.label }} &lt;span class="nt"&gt;&amp;lt;br&amp;gt;&lt;/span&gt;
            {{ form.username(size=32) }}
        &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
            {{ form.post.label }} &lt;span class="nt"&gt;&amp;lt;br&amp;gt;&lt;/span&gt;
            {{ form.post(size=120) }}
        &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
            {{ form.submit() }}
        &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
{% endblock %}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This template expects a form object be instantiated in the &lt;code&gt;PostForm&lt;/code&gt; class to be given as an argument.Which is referenced as &lt;code&gt;form&lt;/code&gt;, the argument will be sent by the &lt;code&gt;post&lt;/code&gt; view function.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the html &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; element is used as  the container for the web form.&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;action&lt;/code&gt; attribute tells the browser the url to use when the form data is submitted. when set to an empty string the form is submitted to the current URL in the browser.&lt;/li&gt;
&lt;li&gt;The method attribute specifies the HTTP request method to be used when submitting the form to the server.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;novalidate&lt;/code&gt; tells the browser not to validate the forms as that is the work of Flask application running in the server.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;form.hidden_tag()&lt;/code&gt; template argument generates a hidden field that includes a token that is used to protect the form against CSRF attacks.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;{{ form.&amp;lt;field_name&amp;gt;.label }}&lt;/code&gt; replaces the label element, and the &lt;code&gt;{{ form.&amp;lt;field_name&amp;gt;() }}&lt;/code&gt; goes where the form field is needed.
&lt;a href="https://jinja.palletsprojects.com/en/3.0.x/templates/"&gt;Read more&lt;/a&gt; on the jinja2 documentation.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
  &lt;a href="#form-view-function"&gt;
  &lt;/a&gt;
  Form view function.
&lt;/h4&gt;

&lt;p&gt;In order to render the Form to the web page a route functionality is needed, In the routes.py module add the following view function at the end.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#....
&lt;/span&gt;
&lt;span class="c1"&gt;# route to the post form
&lt;/span&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/post'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;post&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PostForm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'new_post.html'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'Add post'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Here i imported the &lt;code&gt;PostForm&lt;/code&gt; class from &lt;em&gt;forms.py&lt;/em&gt;, instantiated an  object &lt;code&gt;form = PostForm()&lt;/code&gt; from it and sent the object down to the template &lt;code&gt;form=form&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;form=form&lt;/code&gt; parses the form object to the template form, it is what's required to render the form fields.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When you run the app and navigate to &lt;code&gt;http://127.0.0.1:5000/post&lt;/code&gt; a html form is displayed. But when you try to submit it a &lt;code&gt;method not allowed&lt;/code&gt; is thrown. I'll fix that in a minute.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qVaT0-Nb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xl0u5oddt8ztgextbrjy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qVaT0-Nb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xl0u5oddt8ztgextbrjy.png" alt="app form fields jinja2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next I'm going to create the navigation links inside the &lt;code&gt;base.html&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- .... --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;b&amp;gt;&lt;/span&gt;Blogger:&lt;span class="nt"&gt;&amp;lt;/b&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"{{ url_for('index') }}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Home&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"{{ url_for('post') }}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Add Post&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;hr&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- .... --&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add the above block just below the &lt;code&gt;body&lt;/code&gt; tag, when the app is run we get a simple navbar at the top. That actually works 😉.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;As you noticed when i created the navbar links i used a different method, the &lt;code&gt;url_for()&lt;/code&gt; function from Flask. which generates URLs using iternal mapping of urls to view functions.&lt;a href="https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-iii-web-forms"&gt;Read&lt;/a&gt; ahead and practice working with forms.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cEGYtobG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d5afyw1bs6wodmc6t9yc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cEGYtobG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d5afyw1bs6wodmc6t9yc.png" alt="App navbar preview"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Remember when you tried running the app and an error came shouting, that was because the &lt;code&gt;post&lt;/code&gt; view function didn't understand what to do.&lt;br&gt;
To fix it we add the &lt;code&gt;methods=['POST', 'GET']&lt;/code&gt; in the &lt;code&gt;route decorator&lt;/code&gt;.&lt;br&gt;
The new updated route should look like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# route to the post form
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;flash&lt;/span&gt;
&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/post'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'POST'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'GET'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;post&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PostForm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;validate_on_submit&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Hey, &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;! Your post '&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'  was successfully submitted! "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/index'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'new_post.html'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'Add post'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Here we use an &lt;code&gt;if&lt;/code&gt; statement to validate the &lt;code&gt;form&lt;/code&gt; data in the view function.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;validated_on_submit()&lt;/code&gt; runs validation of a form, Call validate only if the form is submitted. This is a shortcut for form.is_submitted() and form.validate().&lt;/li&gt;
&lt;li&gt;Here I use the &lt;code&gt;print()&lt;/code&gt; function to print a custom message in the terminal, later I will be using the Flask &lt;code&gt;flash()&lt;/code&gt; function to flash messages in the web page.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;redirect&lt;/code&gt;: this function redirects to a specified url.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;flash&lt;/code&gt;: it flashes a message to the web page after an action has been carried. &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#database"&gt;
  &lt;/a&gt;
  Database. &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Flask doesn't support databases natively, it isn't opinionated in this field, so it gives you the freedom to choose across a variety of database options that best fits your application.&lt;/p&gt;

&lt;p&gt;Databases can be separated into two, those that follow &lt;a href="https://en.wikipedia.org/wiki/Relational_model#:~:text=The%20relational%20model%20(RM)%20for,of%20tuples%2C%20grouped%20into%20relations."&gt;&lt;em&gt;relational models&lt;/em&gt;&lt;/a&gt; and those that do not. referred as &lt;em&gt;NoSQL&lt;/em&gt; dbs.&lt;/p&gt;

&lt;p&gt;We are going to use Flask-sqlalchemy, an extension that provides a Flask-friendly wrapper to the popular &lt;a href="https://docs.sqlalchemy.org/en/14/"&gt;&lt;strong&gt;SQLAlchemy&lt;/strong&gt;&lt;/a&gt; package, &lt;strong&gt;SQLAlchemy&lt;/strong&gt; is an ORM&lt;a href="https://en.wikipedia.org/wiki/Object%E2%80%93relational_mapping"&gt;Object Relational Mapper&lt;/a&gt;.&lt;br&gt;
An ORM allows applications to manage databases using high level entities such as classes, objects &amp;amp; methods instead of tables and SQL. The work of an ORM is to convert high-level operations into database commands.&lt;br&gt;
Installing &lt;em&gt;flask-sqlalchemy&lt;/em&gt; run this in the terminal.&lt;br&gt;
&lt;code&gt;(blogger) $ pip install flask-sqlalchemy&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#database-migrations"&gt;
  &lt;/a&gt;
  Database Migrations &lt;a&gt;&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;As the application continues to grow, it might need changes or updates, also the database needs be updated. This is done through migrations and the flask extension that handles this is : &lt;code&gt;Flask-migrate&lt;/code&gt;.&lt;br&gt;
This extension is a Flask wrapper for Alembic a flask database migration framework for SQLAlchemy. Install the extension;&lt;br&gt;
&lt;code&gt;(blogger) $ pip install flask-migrate&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#flasksqlalchemy-configuration"&gt;
  &lt;/a&gt;
  Flask-SQLalchemy configuration
&lt;/h4&gt;

&lt;p&gt;In the development phase I will be using SQLite database. It saves each database file on disk.&lt;br&gt;
When the app reaches production, I will use a database server: PostgreSQL or MySQL.&lt;br&gt;
Two configurations are required in the &lt;code&gt;config.py&lt;/code&gt; module:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="n"&gt;basedir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;SECRET_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'SECRET_KEY'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="s"&gt;'you-will-never-guess'&lt;/span&gt;
    &lt;span class="n"&gt;SQLALCHEMY_DATABASE_URI&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'DATABASE_URL'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="s"&gt;'sqlite:///'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;basedir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'app.db'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;SQLALCHEMY_TRACK_MODIFICATIONS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The Flask extension gets the location of the apps database from the &lt;code&gt;SQLALCHEMY_DATABASE_URI&lt;/code&gt; configuration variable.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;As I did with the &lt;code&gt;SECRET_KEY&lt;/code&gt; variable fallback, I also provide a fallback value if the config variable doesn't define the &lt;em&gt;database url&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;SQLALCHEMY_TRACK_MODIFICATIONS&lt;/code&gt; configuration if set to &lt;code&gt;False&lt;/code&gt; disables a &lt;code&gt;Flask-SQLAlchemy&lt;/code&gt; feature that sends a signal to the application every time a change is about to be made to the database. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The database is represented in the application by a &lt;em&gt;database instance&lt;/em&gt;. This is done in the &lt;code&gt;app/__init__.py&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;config&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Config&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask_sqlalchemy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SQLAlchemy&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask_migrate&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Migrate&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#configuration 
&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SQLAlchemy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#database instance
&lt;/span&gt;&lt;span class="n"&gt;migrate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Migrate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;In this change of the &lt;strong&gt;init&lt;/strong&gt; file, I imported two new extensions: SQLAlchemy &amp;amp; flask_migrate.&lt;/li&gt;
&lt;li&gt;I have added a &lt;em&gt;db&lt;/em&gt; object, it represents the database.&lt;/li&gt;
&lt;li&gt;The migrate variable handles the migration engine.&lt;/li&gt;
&lt;li&gt;At the bottom I've imported a new module &lt;code&gt;models&lt;/code&gt; , This module defines the structure of the database.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#database-models"&gt;
  &lt;/a&gt;
  Database models. &lt;a&gt;&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;Data stored in the database will be represented by a collection of classes, usually known as &lt;em&gt;database models&lt;/em&gt;. The ORM layer will handle the translastions required for mapping objects created from this classes to the correct rows in the database tables. &lt;br&gt;
Let's create a database model, create a new file &lt;code&gt;app/models.py&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;primary_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;unique&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;120&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__repr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&amp;lt;User&amp;gt;: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;, &amp;lt;Post&amp;gt;: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;id&lt;/code&gt; field is usually in all models, and is used as the &lt;em&gt;primary key&lt;/em&gt;. Each user is assigned a new &lt;code&gt;id&lt;/code&gt; and is stored in this field.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;username&lt;/code&gt; &amp;amp; &lt;code&gt;post&lt;/code&gt; field are defined as strings(in database is known as &lt;code&gt;VARCHAR&lt;/code&gt;) and their maximum lengths specified.&lt;/li&gt;
&lt;li&gt;The Post class created above inherits from db.Model, a base class for all models from Flask-SQLAlchemy.&lt;/li&gt;
&lt;li&gt;Fields are created as instances of the &lt;code&gt;db.Column&lt;/code&gt; class, whih takes field type as arguments.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;__repr__&lt;/code&gt; tells python how to print objects of this class. It is useful for debugging.
Open python in a terminal try to assign some data to our class objects.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;blogger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Post&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"John"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Hello, World!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;John&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Post&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;World&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The model created above defines the initial database structure or &lt;em&gt;schema&lt;/em&gt; of this application.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#create-a-migration-repository"&gt;
  &lt;/a&gt;
  Create a migration repository. &lt;a&gt;&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;When the app continues to grow, we need to handle the changes such as adding new things, modifying or removing items.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The Alembic extension takes care of this schema changes.
It maintains the &lt;em&gt;migration repository&lt;/em&gt;, a directory in which it stores the migration scripts.&lt;/li&gt;
&lt;li&gt;Each a change is made to the database schema, a migration script is added to the repository with the details of the change.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To apply the migrations to a database, these migration scripts are executed in the sequence they were created.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;flask db&lt;/code&gt; sub-command is added by flask-migrate to manage everything related to database migrations.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To create a migration repository :&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;blogger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;flask&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;
&lt;span class="n"&gt;Creating&lt;/span&gt; &lt;span class="n"&gt;directory&lt;/span&gt; &lt;span class="n"&gt;E&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;\&lt;span class="n"&gt;code&lt;/span&gt;\&lt;span class="n"&gt;projects&lt;/span&gt;\&lt;span class="n"&gt;blogger&lt;/span&gt;\&lt;span class="n"&gt;migrations&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;  &lt;span class="n"&gt;done&lt;/span&gt;
&lt;span class="n"&gt;Creating&lt;/span&gt; &lt;span class="n"&gt;directory&lt;/span&gt; &lt;span class="n"&gt;E&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;\&lt;span class="n"&gt;code&lt;/span&gt;\&lt;span class="n"&gt;projects&lt;/span&gt;\&lt;span class="n"&gt;blogger&lt;/span&gt;\&lt;span class="n"&gt;migrations&lt;/span&gt;\&lt;span class="n"&gt;versions&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;  &lt;span class="n"&gt;done&lt;/span&gt;
&lt;span class="n"&gt;Generating&lt;/span&gt; &lt;span class="n"&gt;E&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;\&lt;span class="n"&gt;code&lt;/span&gt;\&lt;span class="n"&gt;projects&lt;/span&gt;\&lt;span class="n"&gt;blogger&lt;/span&gt;\&lt;span class="n"&gt;migrations&lt;/span&gt;\&lt;span class="n"&gt;alembic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ini&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;  &lt;span class="n"&gt;done&lt;/span&gt;
&lt;span class="n"&gt;Generating&lt;/span&gt; &lt;span class="n"&gt;E&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;\&lt;span class="n"&gt;code&lt;/span&gt;\&lt;span class="n"&gt;projects&lt;/span&gt;\&lt;span class="n"&gt;blogger&lt;/span&gt;\&lt;span class="n"&gt;migrations&lt;/span&gt;\&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;  &lt;span class="n"&gt;done&lt;/span&gt;
&lt;span class="n"&gt;Generating&lt;/span&gt; &lt;span class="n"&gt;E&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;\&lt;span class="n"&gt;code&lt;/span&gt;\&lt;span class="n"&gt;projects&lt;/span&gt;\&lt;span class="n"&gt;blogger&lt;/span&gt;\&lt;span class="n"&gt;migrations&lt;/span&gt;\&lt;span class="n"&gt;README&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;  &lt;span class="n"&gt;done&lt;/span&gt;
&lt;span class="n"&gt;Generating&lt;/span&gt; &lt;span class="n"&gt;E&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;\&lt;span class="n"&gt;code&lt;/span&gt;\&lt;span class="n"&gt;projects&lt;/span&gt;\&lt;span class="n"&gt;blogger&lt;/span&gt;\&lt;span class="n"&gt;migrations&lt;/span&gt;\&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mako&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;  &lt;span class="n"&gt;done&lt;/span&gt;
&lt;span class="n"&gt;Please&lt;/span&gt; &lt;span class="n"&gt;edit&lt;/span&gt; &lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;logging&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="s"&gt;'E:&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;code&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;projects&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;blogger&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;migrations&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;alembic.ini'&lt;/span&gt; &lt;span class="n"&gt;before&lt;/span&gt; &lt;span class="n"&gt;proceeding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;flask&lt;/code&gt; command relies on the &lt;code&gt;FLASK_APP&lt;/code&gt; environment variable, after a successful run a new &lt;code&gt;migrations&lt;/code&gt; directory is added.&lt;br&gt;
Now we need to create our fist database migration.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;blogger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;flask&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="n"&gt;migrate&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="s"&gt;'posts table'&lt;/span&gt;
&lt;span class="n"&gt;INFO&lt;/span&gt;  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;alembic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;runtime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;migration&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;Context&lt;/span&gt; &lt;span class="n"&gt;impl&lt;/span&gt; &lt;span class="n"&gt;SQLiteImpl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;INFO&lt;/span&gt;  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;alembic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;runtime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;migration&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;Will&lt;/span&gt; &lt;span class="n"&gt;assume&lt;/span&gt; &lt;span class="n"&gt;non&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;transactional&lt;/span&gt; &lt;span class="n"&gt;DDL&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;INFO&lt;/span&gt;  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;alembic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;autogenerate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compare&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;Detected&lt;/span&gt; &lt;span class="n"&gt;added&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt; &lt;span class="s"&gt;'post'&lt;/span&gt;
&lt;span class="n"&gt;INFO&lt;/span&gt;  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;alembic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;autogenerate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compare&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;Detected&lt;/span&gt; &lt;span class="n"&gt;added&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="s"&gt;'ix_post_post'&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="s"&gt;'['&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="s"&gt;']'&lt;/span&gt;
&lt;span class="n"&gt;INFO&lt;/span&gt;  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;alembic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;autogenerate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compare&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;Detected&lt;/span&gt; &lt;span class="n"&gt;added&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="s"&gt;'ix_post_username'&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="s"&gt;'['&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="s"&gt;']'&lt;/span&gt;
&lt;span class="n"&gt;Generating&lt;/span&gt; &lt;span class="n"&gt;E&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;\&lt;span class="n"&gt;code&lt;/span&gt;\&lt;span class="n"&gt;projects&lt;/span&gt;\&lt;span class="n"&gt;blogger&lt;/span&gt;\&lt;span class="n"&gt;migrations&lt;/span&gt;\&lt;span class="n"&gt;versions&lt;/span&gt;\&lt;span class="mi"&gt;549&lt;/span&gt;&lt;span class="n"&gt;b927398fe_posts_table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;  &lt;span class="n"&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After running this, no change has been made to the database it just generates a migration script. Now we need to make changes to the database, To do that we use a &lt;code&gt;flask&lt;/code&gt; sub-command &lt;code&gt;flask db upgrade&lt;/code&gt; in the python shell context.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;flask&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="n"&gt;upgrade&lt;/span&gt;
&lt;span class="n"&gt;INFO&lt;/span&gt;  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;alembic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;runtime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;migration&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;Context&lt;/span&gt; &lt;span class="n"&gt;impl&lt;/span&gt; &lt;span class="n"&gt;SQLiteImpl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;INFO&lt;/span&gt;  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;alembic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;runtime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;migration&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;Will&lt;/span&gt; &lt;span class="n"&gt;assume&lt;/span&gt; &lt;span class="n"&gt;non&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;transactional&lt;/span&gt; &lt;span class="n"&gt;DDL&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;INFO&lt;/span&gt;  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;alembic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;runtime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;migration&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;Running&lt;/span&gt; &lt;span class="n"&gt;upgrade&lt;/span&gt;  &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;549&lt;/span&gt;&lt;span class="n"&gt;b927398fe&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;posts&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this point you can play with the database a little, Let's try to add the previous post to the database.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;db&lt;/code&gt; changes are done in a database session context.&lt;/li&gt;
&lt;li&gt;To add data to the db we use &lt;code&gt;db.session.add(p)&lt;/code&gt;, &lt;em&gt;p&lt;/em&gt; is the object created for the corresponding database table.&lt;/li&gt;
&lt;li&gt;To write the changes use: &lt;code&gt;db.session.commit()&lt;/code&gt;.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;blogger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Post&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"John"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Hello, World!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;John&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Post&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;World&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Ariana&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Post&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Testing&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;John&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Post&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;World&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;first import the database object from the app module&lt;/li&gt;
&lt;li&gt;Import the Post class from the &lt;code&gt;models&lt;/code&gt; module.&lt;/li&gt;
&lt;li&gt;Create a Post object name it &lt;em&gt;p&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;use the db session context to &lt;em&gt;add&lt;/em&gt; and &lt;em&gt;push&lt;/em&gt; the change to the db.&lt;/li&gt;
&lt;li&gt;The last command &lt;code&gt;Post.query.all()&lt;/code&gt; answers queries and returns all posts in the database.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#adding-data-to-the-database"&gt;
  &lt;/a&gt;
  Adding data to the database &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;When a user types their data in the forms, and hits submit button the form data needs to be written in the database. &lt;br&gt;
To do that I shall add the db session commands in the view function &lt;code&gt;/post&lt;/code&gt;.&lt;br&gt;
Your new changed &lt;code&gt;app/routes.py&lt;/code&gt; should look like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# route to the post form
&lt;/span&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/post'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'POST'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'GET'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;post&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PostForm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;validate_on_submit&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
        &lt;span class="n"&gt;flash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Hey, &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;! Your post '&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'  was successfully submitted! "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/index'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'new_post.html'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'Add post'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now when a user enters data in the web forms and hits submit the data gets written to the database, we can view the data in a browser.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#viewing-posts-in-the-webpage"&gt;
  &lt;/a&gt;
  Viewing Posts in the Web-page &lt;a&gt;&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;This part is rather simple, I just need to create a template that renders the posts in the database I will just use a &lt;code&gt;for&lt;/code&gt; loop to loop through the available posts in the database.&lt;/p&gt;

&lt;p&gt;Head over to the IDE and create a new template file, name it whatever you prefer. &lt;code&gt;app/templates/all_posts.html&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;{% extends 'base.html' %}
{% block title %}
    {% if title %}
        &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;{{ title }}- blogger&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    {% else %}
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Blogger&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
        {% endif %}
{% endblock %}

{% block content %} 
    &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Published Posts.&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
    {% for post in posts %}
        &lt;span class="nt"&gt;&amp;lt;b&amp;gt;&lt;/span&gt;{{ post.username }}&lt;span class="nt"&gt;&amp;lt;/b&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;{{ post.post }}&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    {% endfor %}
{% endblock %}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you run the application and navigate to &lt;code&gt;http://127.0.0.1:5000/view&lt;/code&gt; all our posts are displayed in the web-page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9HJ8g5EF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v65qj5rowr5htwf2q80g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9HJ8g5EF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v65qj5rowr5htwf2q80g.png" alt="app preview"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we can head and add a nav link for viewing all our posts, this is will be added in the &lt;code&gt;base.html&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"{{ url_for('view') }}"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;Posts&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add this line of code in the div inside the &lt;code&gt;base&lt;/code&gt; template file. Preview the app in the browser and a new a navbar link has been added.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;In this article I took you through working with flask to create a minimal web application that takes user input via a web form and saves it in a database and retrieves it and displays it in a web-page.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I worked you on using the Flask-SQLAlchemy and integrating a flask app with a database.&lt;/li&gt;
&lt;li&gt;Creating a database and managing the database modifications.&lt;/li&gt;
&lt;li&gt;Templating and rendering web-pages.
Go ahead and play with the UI by changing the &lt;code&gt;style.css&lt;/code&gt; inside the &lt;code&gt;app/static&lt;/code&gt; directory
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#7fffd4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rrAPZzoB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/at27fnxwgvrlzufmpl37.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rrAPZzoB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/at27fnxwgvrlzufmpl37.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When I add a the background color property the web page color changed, I shall write more on this in another article.&lt;/p&gt;

&lt;p&gt;Thank you for taking your time to go through this article, Any feedback, advice or help is appreciated. Drop me a comment for any issue with running the code or improvement suggestions ;-)&lt;/p&gt;

&lt;p&gt;In the next article i'll cover on deploying this flask app to heroku.&lt;br&gt;
&lt;strong&gt;References:&lt;/strong&gt; [&lt;a href="https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world"&gt;https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;The whole code is available on &lt;a href="https://github.com/Willbeckh/flask-app-tutorial"&gt;Github&lt;/a&gt;, go ahead and star the repo or clone it for your practice.&lt;/p&gt;

&lt;p&gt;Thank you &lt;a class="mentioned-user" href="https://dev.to/grayhat"&gt;@grayhat&lt;/a&gt;
 and Lux Tech Academy.&lt;/p&gt;

&lt;p&gt;Be cool and Keep coding! mic drop...dev out&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>python</category>
      <category>beginners</category>
      <category>database</category>
    </item>
    <item>
      <title>Tips For Aspiring Artists - 3 Must Know Tips for Aspiring Artists</title>
      <author>AWs Architektur</author>
      <pubDate>Wed, 01 Sep 2021 15:00:52 +0000</pubDate>
      <link>https://dev.to/awsarchitektur/tips-for-aspiring-artists-3-must-know-tips-for-aspiring-artists-2nde</link>
      <guid>https://dev.to/awsarchitektur/tips-for-aspiring-artists-3-must-know-tips-for-aspiring-artists-2nde</guid>
      <description>&lt;p&gt;As a budding artist, I'd like to share with you a few tips and advice that I hope can be helpful in your artistic journey. Whether you are a painter or a budding artist, these tips would help you learn how to paint better and earn more money in your art form. So, please indulge me as I show you what you need to know:&lt;/p&gt;

&lt;p&gt;If you are a beginner, I would suggest investing in a good paint program. This would give you step-by-step instructions on the whole painting process &lt;a href="https://www.wboc.com/story/44639795/7-essential-spotify-tips-for-aspiring-artists"&gt;&lt;/a&gt;&lt;a href="https://www.wboc.com/story/44639795/7-essential-spotify-tips-for-aspiring-artists"&gt;https://www.wboc.com/story/44639795/7-essential-spotify-tips-for-aspiring-artists&lt;/a&gt; . And, best of all, you would get step-by-step visual guidance on the product second by step instruction on how you will apply the paint. &lt;/p&gt;

&lt;p&gt;Tips For Aspiring Artists Overview&lt;/p&gt;

&lt;p&gt;It's like having a professional painter with you all the time, explaining to you each and every step of the process. And, since you will follow the instructions and the visual cues right on your computer screen, this wouldn't just save you money buying materials and having someone else do all the laborious work for you - this would also save you time in terms of workload and preparation.&lt;/p&gt;

&lt;p&gt;Another thing to consider is purchasing art supplies. This step is important and should be your first priority if you are serious about being a successful painter. Buying art supplies early on will save you from spending more money later on. For example, you should always invest in oil paints, canvases and brushes. &lt;/p&gt;

&lt;p&gt;This is because when you see other painters working on their paintings, you can easily tell that those who invested in good art supplies and tools, have spent more time and effort making that masterpiece.&lt;/p&gt;

&lt;p&gt;One very effective way to become better at your daily painting and earn more money from it is by joining a painting group. Painting groups are usually a weekly meeting that you can join wherein you meet other artists with similar interests &lt;a href="https://en.wikipedia.org/wiki/Artist"&gt;artist&lt;/a&gt; . Through this, you will be able to learn more strategies in painting and apply those tips in your own paintings. These tips will help you bring out your best works and build on your confidence in painting abstractly.&lt;/p&gt;

&lt;p&gt;Painting groups also offer classes where you can learn from professionals and other painters how to bring out your best works. This is a great way of enhancing your skills as an artist and practicing your painting techniques every day. Another benefit that you can get from joining these groups is that they offer art supplies and you can buy them from them. &lt;/p&gt;

&lt;p&gt;So, instead of buying from a local artist or store, you can buy your art supplies from them. This will cost you less and will be a more convenient way of starting your own art supplies business.&lt;/p&gt;

&lt;p&gt;Here's another tip for aspiring artists: Don't stop painting. Most artists say that there is a need to keep practicing, so don't think that once you start painting, it's all over for you. Continue making your 30-paintings-in-30-days challenge or follow up with other painting activities. &lt;/p&gt;

&lt;p&gt;This will be your constant creative practice and it will help sharpen your painting skills. Another benefit of continuing your daily painting activities is that, it will help you make more money. So, it's not just a matter of how much you paint but how much you earn from it.&lt;/p&gt;

&lt;p&gt;The last tip for aspiring artists is to not let the process of painting overwhelm you. Painting should be something fun and interesting. If you get caught up in the creative process, you may tend to paint the same thing day after day. So, instead of doing this, it's better to do different colors every day or try your hand at creating different textures and effects.&lt;/p&gt;

&lt;p&gt;Final Words&lt;/p&gt;

&lt;p&gt;So, there you have it. I hope these tips for painting would help you become more excited about painting. Painting is not as difficult as you might have thought. It's actually quite easy if you just remember to stay focus and just have fun while painting.&lt;/p&gt;

</description>
      <category>artists</category>
      <category>aspiringartist</category>
      <category>architecture</category>
    </item>
    <item>
      <title>Building a Web App User Interface with Python</title>
      <author>Ryan Britnell</author>
      <pubDate>Wed, 01 Sep 2021 14:53:09 +0000</pubDate>
      <link>https://dev.to/britnellryan/building-a-web-app-user-interface-with-python-5668</link>
      <guid>https://dev.to/britnellryan/building-a-web-app-user-interface-with-python-5668</guid>
      <description>&lt;h1&gt;
  &lt;a href="#how-to-build-a-web-ui-with-python"&gt;
  &lt;/a&gt;
  How to build a web UI with Python
&lt;/h1&gt;

&lt;p&gt;Anvil lets you build your app’s &lt;strong&gt;front-end entirely in Python&lt;/strong&gt; - no HTML, CSS or Javascript required. You can build your UI by dragging and dropping components in Anvil's visual designer or by adding components using Python code:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4HdumRU3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://anvil-website-static.s3.eu-west-2.amazonaws.com/blog/uis-in-100-seconds/drag-and-drop.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4HdumRU3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://anvil-website-static.s3.eu-west-2.amazonaws.com/blog/uis-in-100-seconds/drag-and-drop.gif" alt="Dragging and dropping a Button component"&gt;&lt;/a&gt;Dragging and dropping a Button component&lt;/p&gt;

&lt;p&gt;Let's look at how you can use the &lt;a href="https://anvil.works/docs/editor"&gt;Anvil editor&lt;/a&gt; to create a user interface by turning this app into a "hello world" app that says hello to your users.&lt;/p&gt;

&lt;p&gt;In the middle of the Anvil IDE is the &lt;a href="https://anvil.works/docs/editor#form-editor"&gt;Form Editor&lt;/a&gt; which is split into the Design View and the Code View. On the right of the Anvil editor you will find the &lt;a href="https://anvil.works/docs/editor#toolbox"&gt;Toolbox&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HUra4YPs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://anvil-website-static.s3.eu-west-2.amazonaws.com/blog/uis-in-100-seconds/editor-tour.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HUra4YPs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://anvil-website-static.s3.eu-west-2.amazonaws.com/blog/uis-in-100-seconds/editor-tour.gif" alt="A quick tour of the Anvil Editor"&gt;&lt;/a&gt;A quick tour of the Anvil Editor&lt;/p&gt;

&lt;p&gt;You can drag and drop components, like &lt;a href="https://anvil.works/docs/client/components/basic#label"&gt;Labels&lt;/a&gt;, from the toolbox to build your user interface. This hello world app will also need a &lt;a href="https://anvil.works/docs/client/components/basic#textbox"&gt;TextBox&lt;/a&gt; for users to enter their name:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C4CMqX1s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://anvil-website-static.s3.eu-west-2.amazonaws.com/blog/uis-in-100-seconds/add-label-textbox.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C4CMqX1s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://anvil-website-static.s3.eu-west-2.amazonaws.com/blog/uis-in-100-seconds/add-label-textbox.gif" alt="Dragging in a Label and a TextBox"&gt;&lt;/a&gt;Dragging in a Label and a TextBox&lt;/p&gt;

&lt;p&gt;To configure components, you can edit their &lt;a href="https://anvil.works/docs/client/components/basic#basic-components"&gt;properties&lt;/a&gt; on the right hand side in the &lt;a href="https://anvil.works/docs/editor#properties-panel"&gt;Properties Panel&lt;/a&gt;. This includes both the information the component displays and its styling:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oFTMZ8e8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://anvil-website-static.s3.eu-west-2.amazonaws.com/blog/uis-in-100-seconds/component-properties.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oFTMZ8e8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://anvil-website-static.s3.eu-west-2.amazonaws.com/blog/uis-in-100-seconds/component-properties.gif" alt="Changing the properties of the Label and Button components"&gt;&lt;/a&gt;Changing the properties of the Label and Button components&lt;/p&gt;

&lt;p&gt;Every component is a Python object, so you can also set the component's properties in the &lt;a href="https://anvil.works/docs/editor"&gt;Form Editor's&lt;/a&gt; Code View:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I0GtbJXQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://anvil-website-static.s3.eu-west-2.amazonaws.com/blog/uis-in-100-seconds/properties-in-code.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I0GtbJXQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://anvil-website-static.s3.eu-west-2.amazonaws.com/blog/uis-in-100-seconds/properties-in-code.gif" alt="Changing component properties in code"&gt;&lt;/a&gt;Changing component properties in code&lt;/p&gt;

&lt;p&gt;All components have &lt;a href="https://anvil.works/docs/client/ui#component-events"&gt;events&lt;/a&gt; they can raise. For example, when a user of your app clicks a &lt;a href="https://anvil.works/docs/client/components/basic#button"&gt;Button&lt;/a&gt; component it raises a click event. We can create a Python method in the Code View to be called when this happens. In your Button's click method, you can call Anvil's &lt;a href="https://anvil.works/docs/client/python/alerts-and-notifications#alerts-and-notifications"&gt;&lt;code&gt;alert&lt;/code&gt; function&lt;/a&gt; to display an alert that says hello to your users:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SJtbYss2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://anvil-website-static.s3.eu-west-2.amazonaws.com/blog/uis-in-100-seconds/click-event.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SJtbYss2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://anvil-website-static.s3.eu-west-2.amazonaws.com/blog/uis-in-100-seconds/click-event.gif" alt="Configuring a click event for the 'Say Hi' button"&gt;&lt;/a&gt;Configuring a click event for the 'Say Hi' button&lt;/p&gt;

&lt;p&gt;Now you can click run to test your app and it's interface. Your users can now enter their name and clicking the &lt;code&gt;say hi&lt;/code&gt; button displays the alert:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EH_SPhz1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://anvil-website-static.s3.eu-west-2.amazonaws.com/blog/uis-in-100-seconds/run-your-app.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EH_SPhz1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://anvil-website-static.s3.eu-west-2.amazonaws.com/blog/uis-in-100-seconds/run-your-app.gif" alt="Running the app and testing the 'Say Hi' button"&gt;&lt;/a&gt;Running the app and testing the 'Say Hi' button&lt;/p&gt;

&lt;p&gt;Using the drag and drop designer isn't your only option for building user interfaces in Anvil. You can also create and add components to your user interface directly in code:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JlqdbK21--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://anvil-website-static.s3.eu-west-2.amazonaws.com/blog/uis-in-100-seconds/add-components-in-code.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JlqdbK21--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://anvil-website-static.s3.eu-west-2.amazonaws.com/blog/uis-in-100-seconds/add-components-in-code.gif" alt="Adding a component to the UI in code"&gt;&lt;/a&gt;Adding a component to the UI in code&lt;/p&gt;

&lt;p&gt;Anvil comes with all the &lt;a href="https://anvil.works/docs/client/components"&gt;usual UI components&lt;/a&gt; - buttons, text boxes, drop-downs, tables, and so on. And if that’s not enough, you can create your own &lt;a href="https://anvil.works/docs/client/custom-components"&gt;custom components&lt;/a&gt; and share them with other applications.&lt;/p&gt;




&lt;p&gt;That was user interfaces with nothing but Python. To learn more about creating user interfaces with Anvil, why not &lt;strong&gt;get started with Anvil's 10 minute Feedback Form Tutorial?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://anvil.works/learn/tutorials/feedback-form"&gt;10 minute Feedback Form Tutorial&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Web Scraping with Javascript and Node.js</title>
      <author>Ander Rodriguez</author>
      <pubDate>Wed, 01 Sep 2021 14:51:35 +0000</pubDate>
      <link>https://dev.to/anderrv/web-scraping-with-javascript-and-node-js-2d</link>
      <guid>https://dev.to/anderrv/web-scraping-with-javascript-and-node-js-2d</guid>
      <description>&lt;p&gt;Javascript and web scraping are both on the rise. We will combine them to build a simple scraper and crawler from scratch using Javascript in Node.js.&lt;/p&gt;

&lt;p&gt;Avoiding blocks is an essential part of website scraping, so we will also add some features to help in that regard. And finally, parallelize the tasks to go faster thanks to &lt;a href="https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/"&gt;Node's event loop&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h3&gt;

&lt;p&gt;For the code to work, you will need &lt;a href="https://nodejs.org/en/"&gt;Node&lt;/a&gt; (or &lt;a href="https://github.com/nvm-sh/nvm"&gt;nvm&lt;/a&gt;) and npm installed. Some systems have it pre-installed. After that, install all the necessary libraries by running &lt;code&gt;npm install&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;axios cheerio playwright
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;We are using Node v12, but you can always &lt;a href="https://node.green/"&gt;check the compatibility of each feature&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://axios-http.com/"&gt;Axios&lt;/a&gt; is a "promise based HTTP client" that we will use to get the HTML from a URL. It allows several options such as headers and proxies, which we will cover later. If you use TypeScript, they "include TypeScript definitions and a type guard for Axios errors."&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cheerio.js.org/"&gt;Cheerio&lt;/a&gt; is a "fast, flexible &amp;amp; lean implementation of core jQuery." It lets us find nodes with selectors, get text or attributes, and many other things. We will pass the HTML to cheerio and then query it as we would in a browser environment.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/microsoft/playwright"&gt;Playwright&lt;/a&gt; "is a Node.js library to automate Chromium, Firefox and WebKit with a single API." When Axios is not enough, we will get the HTML using a headless browser to execute Javascript and wait for the async content to load.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#scraping-the-basics"&gt;
  &lt;/a&gt;
  Scraping the Basics
&lt;/h2&gt;

&lt;p&gt;The first thing we need is the HTML. We installed Axios for that, and its usage is straightforward. We'll use &lt;a href="https://scrapeme.live/shop/"&gt;scrapeme.live&lt;/a&gt; as an example, a fake website prepared for scraping.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;Nice! Then, using cheerio, we can query for the two things we want right now: paginator links and products. To know how to do that, we will look at the page with Chrome DevTools open. All modern browsers offer developer tools such as these. Pick your favorite.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UYaVEZO8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/24j9eq9mjh8hiuce23yo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UYaVEZO8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/24j9eq9mjh8hiuce23yo.png" alt="Paginator in DevTools"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We marked the interesting parts in red, but you can go on your own and try it yourselves. In this case, all the &lt;a href="https://www.w3schools.com/cssref/css_selectors.asp"&gt;CSS selectors&lt;/a&gt; are straightforward and do not need nesting. Check the guide if you are looking for a different outcome or cannot select it. You can also use DevTools to get the selector.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yXgQ-7Yx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o206qbgxwxoy42js5bot.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yXgQ-7Yx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o206qbgxwxoy42js5bot.png" alt="Copy Selector from DevTools"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On the Elements tab, right-click on the node ➡ Copy ➡ Copy selector.&lt;br&gt;
But the outcome is usually very coupled to the HTML, as in this case: &lt;code&gt;#main &amp;gt; div:nth-child(2) &amp;gt; nav &amp;gt; ul &amp;gt; li:nth-child(2) &amp;gt; a&lt;/code&gt;. This approach might be a problem in the future because it will stop working after any minimal change. Besides, it will only capture one of the pagination links, not all of them.&lt;/p&gt;

&lt;p&gt;We could capture all the links on the page and then filter them by content. If we were to write a full-site crawler, that would be the right approach. In our case, we only want the pagination links. Using the provided class, &lt;code&gt;.page-numbers a&lt;/code&gt; will capture all and then extract the URLs (&lt;code&gt;href&lt;/code&gt;s) from those. The selector will match all the link nodes with an ancestor containing the class &lt;code&gt;page-numbers&lt;/code&gt;.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;As for the products (Pokémon in this case), we will get id, name, and price. Check the image below for details on selectors, or try again on your own. We will only log the content for now. Check the final code for adding them to an array.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kE3i0NFG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fjlzv65b6mv97tbn7cwl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kE3i0NFG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fjlzv65b6mv97tbn7cwl.png" alt="Product (Charmander) in DevTools"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see above, all the products contain the class &lt;code&gt;product&lt;/code&gt;, which makes our job easier. And for each of them, the &lt;code&gt;h2&lt;/code&gt; tag and &lt;code&gt;price&lt;/code&gt; node hold the content we want. As for the product ID, we need to match an attribute instead of a class or node type. That can be done using the syntax &lt;code&gt;node[attribute="value"]&lt;/code&gt;. We are looking only for the node with the attribute, so there is no need to match it to any particular value.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;There is no error handling, as you can see above. We will omit it for brevity in the snippets but take it into account in real life. Most of the time, returning the default value (i.e...., empty array) should do the trick.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#following-links"&gt;
  &lt;/a&gt;
  Following Links
&lt;/h2&gt;

&lt;p&gt;Now that we have some pagination links, we should also visit them. If you run the whole code, you'll see that they appear twice - there are two pagination bars.&lt;/p&gt;

&lt;p&gt;We will add two &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set"&gt;sets&lt;/a&gt; to keep track of what we already visited and the newly discovered links. We are using sets instead of arrays to avoid dealing with duplicates, but either one would work. To avoid crawling too much, we'll also include a maximum.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;For the next part, we will use &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function"&gt;async/await&lt;/a&gt; to avoid callbacks and nesting. An async function is an alternative to writing promise-based functions as chains. In this case, the Axios call will remain asynchronous. It might take around 1 second per page, but we write the code sequentially, with no need for callbacks.&lt;/p&gt;

&lt;p&gt;There is a small gotcha with this: &lt;code&gt;await is only valid in async function&lt;/code&gt;. That will force us to wrap the initial code inside a function, concretely in an &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/IIFE"&gt;IIFE&lt;/a&gt; (Immediately Invoked Function Expression). The syntax is a bit weird. It creates a function and then calls it immediately.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#avoid-blocks"&gt;
  &lt;/a&gt;
  Avoid Blocks
&lt;/h2&gt;

&lt;p&gt;As said before, we need mechanisms to avoid blocks, captchas, login walls, and several other defensive techniques. It is complicated to prevent them 100% of the time. But we can achieve a high success rate with simple efforts. We will apply two tactics: adding proxies and full-set headers.&lt;/p&gt;

&lt;p&gt;There are &lt;a href="https://free-proxy-list.net/"&gt;Free Proxies&lt;/a&gt; even though we do not recommend them. They might work for testing but are not reliable. We can use some of those for testing, as we'll see in some examples.&lt;br&gt;
&lt;em&gt;Note that these &lt;a href="https://free-proxy-list.net/"&gt;free proxies&lt;/a&gt; might not work for you. They are short-time lived.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Paid proxy services, on the other hand, offer IP Rotation. Meaning that our service will work the same, but the target website will see a different IP. In some cases, they rotate for every request or every few minutes. In any case, they are much harder to ban. And when it happens, we'll get a new IP after a short time.&lt;/p&gt;

&lt;p&gt;We will use &lt;a href="https://httpbin.org/"&gt;httpbin&lt;/a&gt; for testing. It offers several endpoints that will respond with headers, IP addresses, and many more.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The next step would be to check our request headers. The most known one is &lt;a href="https://en.wikipedia.org/wiki/User_agent"&gt;User-Agent&lt;/a&gt; (UA for short), but there are many more. Many software tools have their own, for example, Axios (&lt;code&gt;axios/0.21.1&lt;/code&gt;). In general, it is a good practice to send actual headers along with the UA. That means we need a real-world set of headers because not all browsers and versions use the same ones. We include two in the snippet: Chrome 92 and Firefox 90 in a Linux machine.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#headless-browsers"&gt;
  &lt;/a&gt;
  Headless Browsers
&lt;/h2&gt;

&lt;p&gt;Until now, every page visited was done using &lt;code&gt;axios.get&lt;/code&gt;, which can be inadequate in some cases. Say we need Javascript to load and execute or interact in any way with the browser (via mouse or keyboard). While avoiding them would be preferable - for performance reasons -, sometimes there is no other choice. &lt;a href="https://www.selenium.dev/"&gt;Selenium&lt;/a&gt;, &lt;a href="https://github.com/puppeteer/puppeteer"&gt;Puppeteer&lt;/a&gt;, and &lt;a href="https://github.com/microsoft/playwright"&gt;Playwright&lt;/a&gt; are the most used and known libraries. The snippet below shows only the User-Agent, but since it is a real browser, the headers will include the entire set (Accept, Accept-Encoding, etcetera).&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;This approach comes with its own problem: take a look a the User-Agents. The Chromium one includes "HeadlessChrome," which will tell the target website, well, that it is a headless browser. They might act upon that.&lt;/p&gt;

&lt;p&gt;As with Axios, we can provide extra headers, proxies, and many other options to customize every request. An excellent choice to hide our "HeadlessChrome" User-Agent. And since this is a real browser, we can intercept requests, block others (like CSS files or images), take screenshots or videos, and more.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Now we can separate getting the HTML in a couple of functions, one using Playwright and the other Axios. We would then need a way to select which one is appropriate for the case at hand. For now, it is hardcoded. The output, by the way, is the same but quite faster when using Axios.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#using-javascripts-async"&gt;
  &lt;/a&gt;
  Using Javascript's Async
&lt;/h2&gt;

&lt;p&gt;We already introduced async/await when crawling several links sequentially. If we were to crawl them in parallel, just by removing the &lt;code&gt;await&lt;/code&gt; would be enough, right? Well... not so fast.&lt;/p&gt;

&lt;p&gt;The function would call the first &lt;code&gt;crawl&lt;/code&gt; and immediately take the following item from the &lt;code&gt;toVisit&lt;/code&gt; set. The problem is that the set is empty since the crawling of the first page didn't occur yet. So we added no new links to the list. The function keeps running in the background, but we already exited from the main one.&lt;/p&gt;

&lt;p&gt;To do this properly, we need to create a queue that will execute tasks when available. To avoid many requests at the same time, we will limit its concurrency.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;If you run the code above, it will print numbers from 0 to 3 almost immediately (with a timestamp) and from 4 to 7 after 2 seconds. It might be the hardest snippet to understand - review it without hurries.&lt;/p&gt;

&lt;p&gt;We define &lt;code&gt;queue&lt;/code&gt; in lines 1-20. It will return an object with the function &lt;code&gt;enqueue&lt;/code&gt; to add a task to the list. Then it checks if we are above the concurrency limit. If we are not, it will sum one to &lt;code&gt;running&lt;/code&gt; and enter a loop that gets a task and runs it with the provided params. Until the task list is empty, then subtract one from &lt;code&gt;running&lt;/code&gt;. This variable is the one that marks when we can or cannot execute any more tasks, only allowing it below the concurrency limit. In lines 23-28, there are helper functions &lt;code&gt;sleep&lt;/code&gt; and &lt;code&gt;printer&lt;/code&gt;. Instantiate the queue in line 30 and enqueue items in 32-34 (which will start running 4).&lt;/p&gt;

&lt;p&gt;We have to use the queue now instead of a for loop to run several pages concurrently. The code below is partial with the parts that change.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Remember that Node runs in a single thread, so we can take advantage of its event loop but cannot use multiple CPUs/threads. What we've seen works fine because the thread is idle most of the time - network requests do not consume CPU time.&lt;/p&gt;

&lt;p&gt;To build this further, we need to use some storage (database) or distributed queue system. Right now, we rely on variables, which are not shared between threads in Node. It is not overly complicated, but we covered enough ground in this blog post.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-code"&gt;
  &lt;/a&gt;
  Final Code
&lt;/h2&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We'd like you to part with four main points:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Understand the basics of website parsing and crawling.&lt;/li&gt;
&lt;li&gt;Separate responsibilities and use abstractions when necessary.&lt;/li&gt;
&lt;li&gt;Apply the required techniques to avoid blocks.&lt;/li&gt;
&lt;li&gt;Be able to figure out the following steps to scale up.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We can build a custom web scraper using Javascript and Node.js using the pieces we've seen. It might not scale to thousands of websites, but it will run perfectly for a few ones. And moving to distributed crawling is not that far from here.&lt;/p&gt;

&lt;p&gt;Thanks for reading! Did you find the content helpful? Please, spread the word and share it. 👈&lt;/p&gt;




&lt;p&gt;Originally published at &lt;a href="https://www.zenrows.com/blog/web-scraping-with-javascript-and-nodejs?utm_source=devto&amp;amp;utm_medium=blog&amp;amp;utm_campaign=scraping_javascript"&gt;https://www.zenrows.com&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>tutorial</category>
      <category>programming</category>
    </item>
    <item>
      <title>Real Time Searching In ReactJS</title>
      <author>ShubhamTiwari909</author>
      <pubDate>Wed, 01 Sep 2021 14:43:56 +0000</pubDate>
      <link>https://dev.to/shubhamtiwari909/real-time-searching-in-reactjs-3mfm</link>
      <guid>https://dev.to/shubhamtiwari909/real-time-searching-in-reactjs-3mfm</guid>
      <description>&lt;p&gt;Hello Guys today I am going to show you how to search element in React in Real Time without clicking a button. The Search will be Real time , when you type a word then all the elements containing that word will be filtered and showed to you .&lt;/p&gt;

&lt;p&gt;I have used a sample data for this code, You can use your data for this code as well.&lt;/p&gt;

&lt;p&gt;Data -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;

        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;61050f211ab57ba6cd86b1e8&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Valeria Ramos&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;61050f21aa707624a853421b&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Campos Daniels&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;61050f21ec0c4d434eedda85&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Kate Gilbert&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;61050f21a4543be9235f4643&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hunt Lynch&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;
    &lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Code for Searching -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,{&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Data&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./SampleData&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setList&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;


    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text-center my-5&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; 
            &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;search...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;setList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}}&lt;/span&gt;
            &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;  &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;main&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;())){&lt;/span&gt;
                        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;

                &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;items&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; 
                      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Working - &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;First we created a state for the input element using useState.&lt;/li&gt;
&lt;li&gt;Then we created an input element using input tag and inside it we have onChange event and inside onChange we change the state of the list matching to the word typed in the input field.&lt;/li&gt;
&lt;li&gt;Then we filtered the Data using Filter method.
4.if(list===""){ return item;} , it means if the input field is empty, then return the whole data.&lt;/li&gt;
&lt;li&gt;else if(item.name.toLowerCase().includes(list.toLowerCase())){
return item }
It first convert the name to lowercase using toLowerCase() method then it checks that the typed word is included in the Dataset or not using included() method and also it converts the input word in to lowercase using toLowerCase() method because the names are also in lowercase format.&lt;/li&gt;
&lt;li&gt;Then after filtering the data, we mapped the data using map() method&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;CSS -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;150px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;150px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;crimson&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;antiquewhite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.main&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="py"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output - &lt;/p&gt;

&lt;p&gt;Before Searching &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Tv_uDULf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b3i4zqz7o0yrendlu5lr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Tv_uDULf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b3i4zqz7o0yrendlu5lr.png" alt="Screenshot (4)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After Searching &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xGtuXqmF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9rve2pqjb83zv1apfhfh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xGtuXqmF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9rve2pqjb83zv1apfhfh.png" alt="Screenshot (5)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hope you understand the process and if there is any mistake please mention it in the comment section. It will help me also to know my mistakes so that i can fix it.&lt;/p&gt;

&lt;p&gt;THANK YOU FOR READING THIS POST&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>react</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Desktop Development for the Web Developer - Part 5</title>
      <author>Doug Grubba</author>
      <pubDate>Wed, 01 Sep 2021 14:22:40 +0000</pubDate>
      <link>https://dev.to/douggrubba/desktop-development-for-the-web-developer-part-5-3hin</link>
      <guid>https://dev.to/douggrubba/desktop-development-for-the-web-developer-part-5-3hin</guid>
      <description>&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;Welcome back! Haha, it has been a little while but let's get back into building our app.&lt;/p&gt;

&lt;p&gt;It is time to cover adding state management to our app with &lt;a href="https://vuex.vuejs.org/"&gt;vuex&lt;/a&gt;. There are certain pieces of data in our app that we are going to want to get once and then have easy access from that point on.  While there are other positives from using state management, that is a good way to think about when to use it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4TRZ-6dg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dg-site-static.s3.amazonaws.com/flow.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4TRZ-6dg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dg-site-static.s3.amazonaws.com/flow.png" alt="The Flow of Data"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Some good examples of places to use it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;basic data on the current user&lt;/li&gt;
&lt;li&gt;data that probably wont' change (list of countries, genders, etc)&lt;/li&gt;
&lt;li&gt;the state of the ui (sidebar open/closed, modal shown/hidden, etc)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All these pieces of data benefit from being in one place that we can quickly grab, analyze, and/or mutate.&lt;/p&gt;

&lt;p&gt;With that said, not everything is a good candidate to be part of our store:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;data that is often changing&lt;/li&gt;
&lt;li&gt;extremely large and complicated datasets&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I don't like to store data that is constantly changing in something like &lt;a href="https://vuex.vuejs.org/"&gt;vuex&lt;/a&gt;. To me it is just adding overhead. Instead we can put calls to the API in a service class and just use them in various components.&lt;/p&gt;

&lt;p&gt;Large data sets also aren't a good fit for a store. &lt;a href="https://vuex.vuejs.org/"&gt;Vuex&lt;/a&gt; is going to keep this data in memory, Let's say you have some data that is in the megabyte(s) range. That is probably not something you are going to ask the client to keep and manage.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h2&gt;

&lt;p&gt;To get vuex working with our app we are going to follow the structure that is suggested right here in the official &lt;a href="https://next.vuex.vuejs.org/guide/structure.html"&gt;docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;➜ yarn add vuex@next --save&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Create a directory for the store:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;➜ mkdir src/store&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Create the index to load the store modules:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;➜ touch src/store/index.js&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And put in the basic parts we will need for it to load our &lt;a href="https://gist.github.com/douggrubba/f6228f63b9f6382f92b46311f84a9c28"&gt;store modules&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Next let's create a basic module to set and get data:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;➜ mkdir src/store/modules &amp;amp;&amp;amp; touch src/store/modules/user.js&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Our &lt;a href="https://gist.github.com/douggrubba/b3556d638e0de23984c0fed121cd76ad"&gt;user module&lt;/a&gt; will be the way that we can set a user&lt;br&gt;
object and keep it in memory.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h2&gt;

&lt;p&gt;We are now ready to actually use our store. To let our Vue app know about it we'll alter our &lt;a href="https://gist.github.com/douggrubba/dd6855f20bea89912d2dd2e8f5383cd7"&gt;main.js&lt;/a&gt; to "use" it.&lt;/p&gt;

&lt;p&gt;As mentioned above, stores are great for data that you are going to need to access often. User data is a good example. We'll need the &lt;em&gt;id&lt;/em&gt;, &lt;em&gt;name&lt;/em&gt;, etc... over and over again.&lt;/p&gt;

&lt;p&gt;The typical pattern for getting user data would be returning it from your API when they login. Since we are just focusing on the front-end aspect of this project we can just spoof it. In our &lt;strong&gt;mounted&lt;/strong&gt; method on our &lt;a href="https://gist.github.com/douggrubba/eb5433023b93f6fda03998a810945a04"&gt;HomeScreen.vue component&lt;/a&gt; we'll call the &lt;code&gt;setUserData&lt;/code&gt; action with a name of "Tom Cook".&lt;/p&gt;

&lt;p&gt;Great! Now we can get the value of the user's name in our little &lt;a href="https://gist.github.com/douggrubba/7c49a759c914339b8c1b37ff9fe364d6"&gt;ProfileButton.vue component&lt;/a&gt; and take out the hardcoded value. Using the getter we put in our store we have a nice expressive and resuable way to get the user's name. If there is some sort of translation we want to do to the name, say like capitalizing, this would be great place to do it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yNpImGBG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dg-site-static.s3.amazonaws.com/tom-cook.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yNpImGBG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dg-site-static.s3.amazonaws.com/tom-cook.png" alt="Tom Cook"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is true that stores will add a little complexity to your app. If you are going something small and simple, you probably won't need it. But as a app grows both and code and the number of hands working on it, a central store's advantages become evident.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#next-up"&gt;
  &lt;/a&gt;
  Next Up
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Node and Vue Communication&lt;/strong&gt; Communicating between the front-end and "back-end"&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reference"&gt;
  &lt;/a&gt;
  Reference
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://douggrubba.com/post/desktop-dev-for-the-web-dev-part-1"&gt;Desktop Development for the Web Developer - Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://douggrubba.com/post/desktop-dev-for-the-web-dev-part-2"&gt;Desktop Development for the Web Developer - Part 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://douggrubba.com/post/desktop-dev-for-the-web-dev-part-3"&gt;Desktop Development for the Web Developer - Part 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://douggrubba.com/post/desktop-dev-for-the-web-dev-part-4"&gt;Desktop Development for the Web Developer - Part 4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://douggrubba.com/post/desktop-dev-for-the-web-dev-part-5"&gt;Desktop Development for the Web Developer - Part 5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Desktop Development for the Web Developer - Part 6&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://github.com/douggrubba/vvte-qs/tree/part-5"&gt;github repo - part 5&lt;/a&gt;&lt;/p&gt;

</description>
      <category>vue</category>
      <category>electron</category>
      <category>javascript</category>
      <category>tailwindcss</category>
    </item>
    <item>
      <title>Linux make install command</title>
      <author>Kinjal</author>
      <pubDate>Wed, 01 Sep 2021 13:56:49 +0000</pubDate>
      <link>https://dev.to/skypy/linux-make-install-command-2dd6</link>
      <guid>https://dev.to/skypy/linux-make-install-command-2dd6</guid>
      <description>&lt;p&gt;While installing packages in linux, we come across the following commands many times.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ make install
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's understand this with a simple example.&lt;code&gt;install&lt;/code&gt; is a command that was written for software installation, but it can do more than that. &lt;code&gt;make install&lt;/code&gt; will do whatever instruction is defined in &lt;code&gt;makefile&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This example uses a sample hello world C program.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt; 
int main() {
 printf("Hello, World!"); 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is the directory structure of &lt;code&gt;testapp&lt;/code&gt; which is created for this example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ls testapp
installer.sh  makefile  testapp  testapp.c  testapp.conf 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's take closer look at &lt;code&gt;installer.sh&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/bin/bash
ROOTDIR=${1:-/opt/testapp}
OWNER=${2:-testapp}
GROUP=${3:-testapp}

# Create bin and opt directories
install -v -m 755 -o $OWNER -g $GROUP -d $ROOTDIR/bin $ROOTDIR/etc
if [ "$?" -ne "0" ]; then
  echo "Install: Failed to create directories."
  exit 1
fi

# install binary
install -b -v -m 750 -o $OWNER -g $GROUP -s testapp $ROOTDIR/bin
if [ "$?" -ne "0" ]; then
  echo "Install: Failed to install the binary"
  exit 2
fi

# install configuration file
install -b -v -m 600 -o $OWNER -g $GROUP testapp.conf $ROOTDIR/etc
if [ "$?" -ne "0" ]; then
  echo "Install: Failed to install the config file"
  exit 3
fi

echo "installation completed.."
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All the &lt;code&gt;chown&lt;/code&gt; &lt;code&gt;install&lt;/code&gt; ect commands are defined in &lt;code&gt;installer.sh&lt;/code&gt; and &lt;code&gt;insatller&lt;/code&gt; itself is wrapped up in &lt;code&gt;makefile&lt;/code&gt; so that &lt;code&gt;makefile&lt;/code&gt; can be kept clean.&lt;/p&gt;

&lt;p&gt;Here is &lt;code&gt;makefile&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;all:    testapp.c
    $(CC) -o testapp     testapp.c

clean:
    rm -f testapp

install: testapp
    ./installer.sh /opt/testapp kiwi kiwi

purge:
    rm -rf /opt/testapp
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the content of sample conf file &lt;code&gt;testapp.conf&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cat testapp.conf
testapp=testapp
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, running it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo make install
./installer.sh /opt/testapp kiwi kiwi
'testapp' -&amp;gt; '/opt/testapp/bin/testapp' (backup: '/opt/testapp/bin/testapp~')
'testapp.conf' -&amp;gt; '/opt/testapp/etc/testapp.conf' (backup: '/opt/testapp/etc/testapp.conf~')
installation completed..
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;testapp&lt;/code&gt; can be found in &lt;code&gt;/opt&lt;/code&gt; directory if the installation is successful.&lt;/p&gt;

&lt;p&gt;That's a very simple example. Here is one &lt;a href="https://thoughtbot.com/blog/the-magic-behind-configure-make-make-install"&gt;useful link &lt;/a&gt; for further reading.&lt;/p&gt;

&lt;p&gt;Download the code &lt;a href="https://github.com/skypy/sample/tree/main/testapp"&gt;here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>linux</category>
      <category>install</category>
      <category>makefile</category>
      <category>shellscript</category>
    </item>
    <item>
      <title>MongoDB equivalent of SQL LIKE query</title>
      <author>Tito</author>
      <pubDate>Wed, 01 Sep 2021 13:54:24 +0000</pubDate>
      <link>https://dev.to/tios/mongodb-equivalent-of-sql-like-query-4keg</link>
      <guid>https://dev.to/tios/mongodb-equivalent-of-sql-like-query-4keg</guid>
      <description>&lt;p&gt;A quick snippet for anyone looking for equivalent SQL LIKE queries for mongodb.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;db.users.find({name: /a/}) 
SELECT * FROM USERS WHERE name LIKE '%a%';

db.users.find({name: /^ja/}) 
SELECT * FROM USERS WHERE name LIKE 'ja%'

db.users.find({name: /jo$/}) 
SELECT * FROM USERS WHERE name LIKE '%jo'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>mongodb</category>
      <category>sql</category>
      <category>regex</category>
    </item>
    <item>
      <title>The Ultimate Tutorial on JavaScript DOM - JS DOM with Examples</title>
      <author>Kingsley Ubah</author>
      <pubDate>Wed, 01 Sep 2021 13:51:09 +0000</pubDate>
      <link>https://dev.to/ubahthebuilder/the-ultimate-tutorial-on-javascript-dom-js-dom-with-examples-1b47</link>
      <guid>https://dev.to/ubahthebuilder/the-ultimate-tutorial-on-javascript-dom-js-dom-with-examples-1b47</guid>
      <description>&lt;h3&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  TABLE OF CONTENTS
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#1-what-is-the-dom"&gt;
  &lt;/a&gt;
  1. What is the DOM?
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#2-dom-api"&gt;
  &lt;/a&gt;
  2. DOM API
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#3-our-project"&gt;
  &lt;/a&gt;
  3. Our Project
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#4-examining-the-document-object"&gt;
  &lt;/a&gt;
  4. Examining the Document Object
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;console.dir(document)&lt;/li&gt;
&lt;li&gt;document.doctype&lt;/li&gt;
&lt;li&gt;document.URL&lt;/li&gt;
&lt;li&gt;document.lastModified&lt;/li&gt;
&lt;li&gt;document.head&lt;/li&gt;
&lt;li&gt;document.body&lt;/li&gt;
&lt;li&gt;document.forms&lt;/li&gt;
&lt;li&gt;document.all&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#5-selecting-elements-from-the-dom"&gt;
  &lt;/a&gt;
  5. Selecting Elements from the DOM
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;  document.getElementbyID()&lt;/li&gt;
&lt;li&gt;  document.getElementsbyClassName()&lt;/li&gt;
&lt;li&gt;  document.getElementsbyTagName()&lt;/li&gt;
&lt;li&gt;  document.getElementsbyName()&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#6-selecting-elements-from-the-dom"&gt;
  &lt;/a&gt;
  6. Selecting Elements from the DOM
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;  document.getElementbyID()&lt;/li&gt;
&lt;li&gt;  document.getElementsbyClassName()&lt;/li&gt;
&lt;li&gt;  document.getElementsbyTagName()&lt;/li&gt;
&lt;li&gt;  document.getElementsbyName()&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#7-querying-for-elements-using-css-selectors"&gt;
  &lt;/a&gt;
  7. Querying For Elements using CSS Selectors
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;  document.querySelector()&lt;/li&gt;
&lt;li&gt;  document.queryselectorAll()&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#8-working-with-texts"&gt;
  &lt;/a&gt;
  8. Working with Texts
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;  textContent&lt;/li&gt;
&lt;li&gt;  innerText&lt;/li&gt;
&lt;li&gt;  innerHTML&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#9-working-with-styles"&gt;
  &lt;/a&gt;
  9. Working with styles
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;  style&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#10-traversing-the-dom"&gt;
  &lt;/a&gt;
  10. Traversing the DOM
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;parentElement&lt;/li&gt;
&lt;li&gt;children&lt;/li&gt;
&lt;li&gt;firstElementChild&lt;/li&gt;
&lt;li&gt;lastElementChild&lt;/li&gt;
&lt;li&gt;previousElementSibling&lt;/li&gt;
&lt;li&gt;nextElementSibling&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#11-creating-a-newelement-and-setting-attributes"&gt;
  &lt;/a&gt;
  11. Creating a newElement and setting attributes
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;createElement()&lt;/li&gt;
&lt;li&gt;appendChild()&lt;/li&gt;
&lt;li&gt;insertBefore()&lt;/li&gt;
&lt;li&gt;createTextNode()&lt;/li&gt;
&lt;li&gt;setAttribute()&lt;/li&gt;
&lt;li&gt;getAttribute()&lt;/li&gt;
&lt;li&gt;className&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#what-is-the-dom"&gt;
  &lt;/a&gt;
  What is the DOM?
&lt;/h3&gt;

&lt;p&gt;One of my ways of explaining the DOM is with this short Alien Invasion story I made up:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;A couple of aliens invaded Earth. The aliens bring some sort of writing to warn humans of an imminent apocalypse. However, the humans do not know what the writing says. So the aliens translates it into a human readable language and also makes it a model for translation, just in case they decide to come back in future.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Comparing this to the web: the alien language is the HTML, the translation is the DOM, and the human is JavaScript.&lt;/p&gt;

&lt;p&gt;In simple terms, the Document Object Model (DOM)  is a model for translating HTML elements into a form JavaScript can understand and interact with.&lt;/p&gt;

&lt;p&gt;This is important because JavaScript needs to understand the web page in order to work on it. Another question is how does JavaScript actually access each of the elements in order to work on them? &lt;strong&gt;The answer is through the DOM API.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-dom-api"&gt;
  &lt;/a&gt;
  THE DOM API
&lt;/h3&gt;

&lt;p&gt;The DOM API (Application Programming Interface) is essentially the gateway between your HTML document rendered on the web and your JavaScript. &lt;/p&gt;

&lt;p&gt;The DOM API provides a set of properties and methods which makes it possible to access information about our document or specific elements inside our script, as well as change their state on the browser.&lt;/p&gt;

&lt;p&gt;In other words, JavaScript interacts with the page through the DOM API.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#our-project"&gt;
  &lt;/a&gt;
  OUR PROJECT
&lt;/h3&gt;

&lt;p&gt;To learn about the DOM API and the various properties and methods available for working with the DOM, we will be using a simple project which I call &lt;strong&gt;My Bucket List&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is just a static bucket list page containing a list of things we want to experience in future, as well as a form input for adding a new item. The website is styled using Bootstrap classes.&lt;/p&gt;

&lt;p&gt;You can get the full code from its  &lt;a href="https://github.com/KingsleyUbah/bucket-list-page"&gt;GitHub repository&lt;/a&gt; . All properties and methods covered here will be in there as well.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g9OKlxXE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630054936946/Xo-Ksihs-.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g9OKlxXE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630054936946/Xo-Ksihs-.png" alt="My-Bucket-List-view.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is the markup for the web page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"ie=edge"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;My Bucket List&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css"&lt;/span&gt; &lt;span class="na"&gt;integrity=&lt;/span&gt;&lt;span class="s"&gt;"sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm"&lt;/span&gt;
  &lt;span class="na"&gt;crossorigin=&lt;/span&gt;&lt;span class="s"&gt;"anonymous"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;header&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"main-header"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"bg-info text-black p-4 m-4"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"header-title"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;My Bucket List&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;

      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card card-body"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"title"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Add a new experience&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-inline m-3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-control m-2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-success"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"Include!"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"title"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Your List&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;ul&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"items"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"list-group"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"list-group-item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Ride on a horse&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"list-group-item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Visit Rome&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"list-group-item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Climb mount everest&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"list-group-item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Travel to 50 Countries&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./domapi.js"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/body&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/html&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#examining-the-document-object"&gt;
  &lt;/a&gt;
  EXAMINING THE DOCUMENT OBJECT
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;Console.dir(document)&lt;/code&gt; gives us an interactive representation of our document. Interactive because it becomes very easy to expand the document object and inspect the properties and methods inside the document object.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KbBoFeu9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630056876311/gmXR6Xkj5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KbBoFeu9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630056876311/gmXR6Xkj5.png" alt="console.dir.png"&gt;&lt;/a&gt; - Tree-like representation of our document&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The document object contains a set of information pertaining to that document, such as its properties as well as methods to interact with it from our script. We can check for any property by using the &lt;code&gt;document.property&lt;/code&gt; syntax. We can see a ton of attributes which the document object contains. Let’s take a look at some of the most popular properties.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#checking-for-the-document-type"&gt;
  &lt;/a&gt;
  Checking for the Document Type
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log(document.doctype)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There have been various versions of HTML Markup since its invention in 1993. With the &lt;code&gt;doctype&lt;/code&gt; property, we can get information about the type and version of the HTML Markup being used in the document.&lt;/p&gt;

&lt;p&gt;Here is what is logged onto our console:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vzP5wBId--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630057095359/JabIUAHR5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vzP5wBId--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630057095359/JabIUAHR5.png" alt="doctype.png"&gt;&lt;/a&gt; - Getting the Document Type Declaration&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#getting-the-pages-url"&gt;
  &lt;/a&gt;
  Getting the page's URL
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log(document.URL)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will log the URL for our web page onto the console. In our case, it will return the default "dummy" URL used by the local server for projects&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--djQPmLMs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630057442668/7lUuT-Q1G.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--djQPmLMs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630057442668/7lUuT-Q1G.png" alt="URL.png"&gt;&lt;/a&gt; - Getting the page's URL&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#time-of-last-modification"&gt;
  &lt;/a&gt;
  Time of last modification
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastModified&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can also check to see when last our document (HTML) was modified. The above code will log the information to the console:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4cYgCPuw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630057710099/ZlIYtR5F5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4cYgCPuw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630057710099/ZlIYtR5F5.png" alt="lastmodified.png"&gt;&lt;/a&gt; - Checking when the document was last modified&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#view-the-head-part-of-the-html-document"&gt;
  &lt;/a&gt;
  View the head part of the HTML Document
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will log the HTML &lt;code&gt;head&lt;/code&gt; tag as well as every other tags nested inside of it&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DDaorxo6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630058027836/b9c97D-IU.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DDaorxo6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630058027836/b9c97D-IU.png" alt="head.png"&gt;&lt;/a&gt; - Inspecting the head tag&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#get-the-body-of-the-document"&gt;
  &lt;/a&gt;
  Get the Body of the document
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This logs a HTML representation of the &lt;code&gt;body&lt;/code&gt; tag and all nested tags, onto the browser console&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_pxLi0D2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630058375510/OioJMJMIn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_pxLi0D2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630058375510/OioJMJMIn.png" alt="body.png"&gt;&lt;/a&gt; - Inspecting the body part&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#get-the-forms-within-the-document"&gt;
  &lt;/a&gt;
  Get the Form(s) within the document.
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log(document.forms)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will return a HTMLCollection (similar to an array) showing the number of forms (if any) present in the document as well as their index properties.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AbtRxNZY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630058648655/tj5PtqtJd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AbtRxNZY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630058648655/tj5PtqtJd.png" alt="FORMS.png"&gt;&lt;/a&gt; - Retrieve forms, if any is present&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#get-the-entire-html-mark-up"&gt;
  &lt;/a&gt;
  Get the entire HTML mark up
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will log the entire markup within the HTML document onto the console. In our case, a HTMLCollection containing 25 items (HTML elements) will be shown on the console:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tNbjMs_6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630058951262/Z_ByYlq6V.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tNbjMs_6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630058951262/Z_ByYlq6V.png" alt="ALL.png"&gt;&lt;/a&gt; - Get the entire HTML&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Technically, we can access a whole lot of other attributes on the document object. To see the full list of available properties, simply log the document object onto the console with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;directory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#acessing-elements-from-the-dom"&gt;
  &lt;/a&gt;
  ACESSING ELEMENTS FROM THE DOM
&lt;/h3&gt;

&lt;p&gt;HTML elements can be accessed or "selected" from the Document Object Model using a variety of ways.&lt;/p&gt;

&lt;p&gt;You can choose any of them depending of what element you want to access, where the element is situated on the page, how many you want to access and so many other factors.&lt;/p&gt;

&lt;p&gt;Here are the popular ways of accessing elements from the DOM&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#get-an-element-by-its-unique-id"&gt;
  &lt;/a&gt;
  Get an Element by its unique ID
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log(document.getElementById('items'))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;getElementById&lt;/code&gt; method enables us access a given element by its unique id attribute. This method can return only one single element since only one id attribute value can exist in a given document.&lt;/p&gt;

&lt;p&gt;The above code will log element with an id of &lt;strong&gt;items&lt;/strong&gt; (which is the &lt;code&gt;ul&lt;/code&gt;) onto the browser console&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v6AOgQRx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630060237133/nxf3zX0bf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v6AOgQRx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630060237133/nxf3zX0bf.png" alt="GETBYID.png"&gt;&lt;/a&gt; - Get element by id&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#get-a-group-of-elements-by-their-common-class-name"&gt;
  &lt;/a&gt;
  Get a group of Elements by their common class name
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log(document.getElementsByClassName('list-group-item)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;getElementsByClassName&lt;/code&gt; method will retrieve a group of elements sharing the same class name into a &lt;code&gt;HTMLCollection&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here is what our own code returns:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--56lqidwl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630060776112/Pv6NTC_4U.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--56lqidwl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630060776112/Pv6NTC_4U.png" alt="GETBYCLASSNAME.png"&gt;&lt;/a&gt; - Get elements by Class Name&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#get-a-group-of-elements-by-their-common-tag-names"&gt;
  &lt;/a&gt;
  Get a group of Elements by their common tag names
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log(`document.getElementsByTagName('li'))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This method is similar to &lt;code&gt;getElementsByClassName&lt;/code&gt;. The main difference is that this one retrieves elements of similar tag names, not class names. It also returns a &lt;code&gt;HTMLCollection&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The above code returns a collection containing all  four list items (&lt;code&gt;li&lt;/code&gt;) inside of our document&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--56lqidwl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630060776112/Pv6NTC_4U.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--56lqidwl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630060776112/Pv6NTC_4U.png" alt="GETBYTAGNAME.png"&gt;&lt;/a&gt; - Get elements by Tag Name&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#get-elements-by-a-specified-name-value-of-their-name-attributes"&gt;
  &lt;/a&gt;
  Get Elements By a Specified Name (Value of their name attributes)
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log(document.getElementsByName('list'))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The getElementsById() method is also similar to the previous two examples mentioned. However, this method accesses the element(s) by the value of their &lt;strong&gt;name&lt;/strong&gt; attribute.&lt;/p&gt;

&lt;p&gt;For example, lets add the name attribute to all of our list items, passing in a common name attribute ('list')&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"list-group-item"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"list"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Ride on a horse&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"list-group-item"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"list"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Visit Rome&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"list-group-item"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"list"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Climb mount everest&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"list-group-item"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"list"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Travel to 50 Countries&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Running the code will log the following to the browser console&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6K8cqFZs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630062071476/1e1LXefCh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6K8cqFZs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630062071476/1e1LXefCh.png" alt="GETMYNAMES.png"&gt;&lt;/a&gt; - By names&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#querying-for-elements-with-css-selectors"&gt;
  &lt;/a&gt;
  QUERYING FOR ELEMENTS WITH CSS SELECTORS
&lt;/h3&gt;

&lt;p&gt;You can also select element(s) using any of the CSS selectors available. Your are not limited to a &lt;code&gt;class&lt;/code&gt; or &lt;code&gt;id&lt;/code&gt; selector.&lt;/p&gt;

&lt;p&gt;Two methods are used for this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;querySelector()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;querySelectorAll()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#querying-for-the-first-match-using-a-css-selector"&gt;
  &lt;/a&gt;
  Querying for the &lt;strong&gt;first&lt;/strong&gt; match using a CSS selector
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log(querySelector('list-group-item)); 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want to access only the &lt;strong&gt;first&lt;/strong&gt; instance of a query, based on a defined CSS selector, use the querySelector() method.&lt;/p&gt;

&lt;p&gt;For example, despite having four list items with an id attribute of "list-group-item", the above code will log only the first match found&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FNR5eCiY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630063214823/8QDiBn7zs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FNR5eCiY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630063214823/8QDiBn7zs.png" alt="queryselector.png"&gt;&lt;/a&gt; - It returns only the first out of the four total list items &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We can also change the query to use an id selector&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#header-title));
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This should log the header title to the console&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KvCP54k0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630063897642/RXTtTdhTQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KvCP54k0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630063897642/RXTtTdhTQ.png" alt="queryallclass.png"&gt;&lt;/a&gt; - Selecting By Id&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#querying-for-all-matches-using-a-css-selector"&gt;
  &lt;/a&gt;
  Querying for &lt;strong&gt;all&lt;/strong&gt; matches using a CSS selector
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log(querySelector('.list-group-item)); 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you however want to access all instances which matches agive CSS query, use &lt;code&gt;querySelectorAll()&lt;/code&gt; instead.&lt;/p&gt;

&lt;p&gt;The console.log statement will log a NodeList conatining all matches onto the console&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iWCUfY91--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630063974576/UD68YfInt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iWCUfY91--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630063974576/UD68YfInt.png" alt="queryall.png"&gt;&lt;/a&gt; - Grabs all instances&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can also use the class selector, or any other CSS selector you wish to use.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#working-with-texts"&gt;
  &lt;/a&gt;
  WORKING WITH TEXTS
&lt;/h3&gt;

&lt;p&gt;When working texts in the DOM, there are three properties you will frequently come across:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;textContent&lt;/li&gt;
&lt;li&gt;innerText&lt;/li&gt;
&lt;li&gt;innerHTML&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#how-to-use-textcontent-to-read-and-write-text-into-an-element"&gt;
  &lt;/a&gt;
  How to use textContent to read and write text into an element
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;firstItem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.list-group-item&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firstItem&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;textContent&lt;/code&gt; property gets the inner text of a HTML element. For example, the above code will log the following text to the console&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iA1q0c9J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630067642118/cwzLATV-v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iA1q0c9J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630067642118/cwzLATV-v.png" alt="first item.png"&gt;&lt;/a&gt; - Access the text content&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Just as we can access the text, we can also change the text inside of the element, from our script&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.list-group-item&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Ride on a Camel instead, sorry Horse!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will alter the text inside of the first list item.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fPeH8mUE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630067810027/9VBqt-a4n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fPeH8mUE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630067810027/9VBqt-a4n.png" alt="doc.textcontensorry.png"&gt;&lt;/a&gt; - Change the text content&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;innerText&lt;/code&gt; works very similarly to &lt;code&gt;textContent&lt;/code&gt;, bar some minor difference.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adding-an-inner-html-element-to-another-element-with-raw-innerhtml-endraw-"&gt;
  &lt;/a&gt;
  Adding an inner HTML element to another element with &lt;code&gt;innerHTML&lt;/code&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;formTitle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.title&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;h1&amp;gt;Stop adding any more items!&amp;lt;/h1&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;formTitle&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;While you could only alter texts with textContent and innerText, you can pass in an entire element into a target element inside the DOM with the innerHTML property.&lt;/p&gt;

&lt;p&gt;For example, the above code will &lt;strong&gt;insert&lt;/strong&gt; the &lt;code&gt;h1&lt;/code&gt; title into the &lt;code&gt;h2&lt;/code&gt; (target) title&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ypIaJ0SD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630069678673/CWjD1_g5x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ypIaJ0SD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630069678673/CWjD1_g5x.png" alt="stop adding items.png"&gt;&lt;/a&gt; - Inserts another element&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here is how the markup will look like in the HTML Elements tab:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BB2RO2kQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630069593664/FAkqmty_4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BB2RO2kQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630069593664/FAkqmty_4.png" alt="implic.png"&gt;&lt;/a&gt; - The h2 was not replaced. Instead, the h1 was inserted inside of it&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#working-with-styles"&gt;
  &lt;/a&gt;
  WORKING WITH STYLES
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;firstItem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.list-group-item&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;boldItem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;firstItem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;backgroundColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;red&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Texts are not the only thing you can change. The DOM API also offers the style property, which is a way of accessing and applying styles on your DOM elements right from your script.&lt;/p&gt;

&lt;p&gt;In the above code, we are accessing the first list item and changing its backgroung color to red. Here is the result:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OzWswAt3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630070957247/EAW6ChEgp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OzWswAt3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630070957247/EAW6ChEgp.png" alt="redbackground.png"&gt;&lt;/a&gt; - Now a red background&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#dom-traversal"&gt;
  &lt;/a&gt;
  DOM TRAVERSAL
&lt;/h3&gt;

&lt;p&gt;This section will cover a few properties and methods useful for traversing the DOM, DOM traversal simply means moving up and down the DOM, checking for an element to match.&lt;/p&gt;

&lt;p&gt;Here are some important methods for traversing the DOM&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;parentElement&lt;/li&gt;
&lt;li&gt;children&lt;/li&gt;
&lt;li&gt;firstElementChild&lt;/li&gt;
&lt;li&gt;lastElementChild&lt;/li&gt;
&lt;li&gt;previousElementSibling&lt;/li&gt;
&lt;li&gt;nextElementSibling&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#accessing-the-parent-node-element-with-parentelement-method"&gt;
  &lt;/a&gt;
  Accessing the parent node element with parentElement method
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#items&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parentElement&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want to access the actual element in which a particular child is nested in (aka its parent), you can use the parentElement method.&lt;/p&gt;

&lt;p&gt;The above code will return the parent element of our unordered list (ul), which is the div&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--77wII7VP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630073260988/ZRTiHdJoM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--77wII7VP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630073260988/ZRTiHdJoM.png" alt="parentElement.png"&gt;&lt;/a&gt; - Finding the parent element&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#accessing-all-the-children-elements-within-a-parent-with-children"&gt;
  &lt;/a&gt;
  Accessing all the children elements within a parent with children
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#items&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All elements nested inside of a particluar parent can also be retrieved using the children property.&lt;/p&gt;

&lt;p&gt;For example, the above code will retrieve all four list items (li), which are the children of the unordered list (ul)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CG1Q0sXI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630073617968/q5XoPpp8l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CG1Q0sXI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630073617968/q5XoPpp8l.png" alt="children.png"&gt;&lt;/a&gt; - Finds a group of children&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#accessing-the-first-child-of-a-parent-element-using-firstelementchild"&gt;
  &lt;/a&gt;
  Accessing the first child of a parent element using firstElementChild
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#items&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstElementChild&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first child element of a particular parent can be accessed using the firstElementChild property&lt;/p&gt;

&lt;p&gt;For example, the above code will retrieve the first list item inside the unordered list&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wMgLumZr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630073984117/UHKbg8seK.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wMgLumZr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630073984117/UHKbg8seK.png" alt="firstchild.png"&gt;&lt;/a&gt; - Grabs the first child&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#accessing-the-last-child-of-a-parent-element-using-lastelementchild"&gt;
  &lt;/a&gt;
  Accessing the last child of a parent element using lastElementChild
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#items&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastElementChild&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The last child element of a particular parent can be accessed using the lastElementChild property&lt;/p&gt;

&lt;p&gt;For example, the above code will retrieve the last list item inside the unordered list&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xei2WtGa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630074204349/TH7XWG3V4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xei2WtGa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630074204349/TH7XWG3V4.png" alt="last child.png"&gt;&lt;/a&gt; - Grabs the last child&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#accessing-the-next-sibling-element-using-nextelementsibling"&gt;
  &lt;/a&gt;
  Accessing the next sibling element using nextElementSibling
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.form-inline&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nextElementSibling&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The immediate sibling element next to (downwards) a particular parent can be accessed using the nextElementSibling property.&lt;/p&gt;

&lt;p&gt;For example, the above code will retirive the next sibling to the form, which is the level two heading (h2)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lmKhIeEx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630074774663/Ls__GKxUx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lmKhIeEx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630074774663/Ls__GKxUx.png" alt="nextsibling.png"&gt;&lt;/a&gt; - Grabs the next sibling&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#accessing-the-previous-sibling-element-using-previouselementsibling"&gt;
  &lt;/a&gt;
  Accessing the previous sibling element using previousElementSibling
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.form-inline&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nextElementSibling&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The immediate sibling element behind (upwards) a particular parent can be accessed using the prevousElementSibling property.&lt;/p&gt;

&lt;p&gt;For example, the above code will retrieve the previous sibling to the level two heading, which is the form&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k0ERWhIM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630075150609/CH_6slRoY.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k0ERWhIM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630075150609/CH_6slRoY.png" alt="prevsibling.png"&gt;&lt;/a&gt; - Grabs the previous sibling&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#creating-a-new-element-and-setting-attributes"&gt;
  &lt;/a&gt;
  CREATING A NEW ELEMENT AND SETTING ATTRIBUTES
&lt;/h3&gt;

&lt;p&gt;In this section, we are going to be looking at how we can create and insert a new element into the DOM as well as adding attributes on any of them. &lt;/p&gt;

&lt;p&gt;Some of the most important methods for this are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;createElement()&lt;/li&gt;
&lt;li&gt;appendChild()&lt;/li&gt;
&lt;li&gt;insertBefore()&lt;/li&gt;
&lt;li&gt;createTextNode()&lt;/li&gt;
&lt;li&gt;setAttribute()&lt;/li&gt;
&lt;li&gt;getAttribute()&lt;/li&gt;
&lt;li&gt;className()&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#creating-a-new-element-using-createelement-and-appending-text-using-appendchild"&gt;
  &lt;/a&gt;
  Creating a new element using createElement and appending text using appendChild
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;newH2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;h2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;warning&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createTextNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Must not exceed five items!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// add text to h2&lt;/span&gt;
&lt;span class="nx"&gt;newH2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;warning&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newH2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code, we create a new element (a level two header tag) as well as an inner text for it. We then append the text into h2 using the appendChild method.&lt;/p&gt;

&lt;p&gt;Logging the new element to the console will show the following&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bmfX1apY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630076975494/5vyEeEmKo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bmfX1apY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630076975494/5vyEeEmKo.png" alt="newh2.png"&gt;&lt;/a&gt; - New element created&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#setting-attributes-on-our-new-element-using-setattribute-and-classname"&gt;
  &lt;/a&gt;
  Setting attributes on our new element using setAttribute and className
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// setting a class on it&lt;/span&gt;
&lt;span class="nx"&gt;newH2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;warning-btn&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// setting an attribute on it&lt;/span&gt;
&lt;span class="nx"&gt;newH2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;title&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;warning text&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newH2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7p3Adpl---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630077768185/IzVjMR8dy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7p3Adpl---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630077768185/IzVjMR8dy.png" alt="setattributes-dom.png"&gt;&lt;/a&gt; - Setting attributes&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#inserting-our-new-element-to-the-dom"&gt;
  &lt;/a&gt;
  Inserting our new Element to the DOM
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Inserting into the DOM&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;cardBody&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.card&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#items&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;cardBody&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insertBefore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newH2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this point, our element only exists as an object inside our JavaScript. To see it in our web page, we will have to insert into the DOM.&lt;/p&gt;

&lt;p&gt;In the above code, we do the following things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Query for the parent div where we want to insert our new element into, using it's classname&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Query for the unordered list, because we will be inserting our new element right before (on top of) it&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We finally insert our new H2 inside the DOM. We put it before the list, inside of the card&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is how our page now looks like:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VcveNBVx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630078452327/F7pEV3kH3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VcveNBVx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630078452327/F7pEV3kH3.png" alt="insertBefore.png"&gt;&lt;/a&gt; - Insert into the DOM&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  WRAPPING UP
&lt;/h3&gt;

&lt;p&gt;This is it!&lt;/p&gt;

&lt;p&gt;In this tutorial, we have covered most of the important DOM manipulation propeties and methods in JavaScript.&lt;/p&gt;

&lt;p&gt;I hope you got something valuable from this piece. Next up, we will be taking a deep look at the event object as well as the DOM event handler methods.&lt;/p&gt;

&lt;p&gt;The entire properties and methods covered here can be obtained from this projects &lt;a href="https://github.com/KingsleyUbah/bucket-list-page"&gt;GitHub repository&lt;/a&gt;. Have any suggestions? Reach out to me on  &lt;a href="https://twitter.com/UbahTheBuilder"&gt;Twitter!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Stay blessed! &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Work With Your Mind; Rest With Your Hands (How To Avoid Burnout As A Developer)</title>
      <author>Michael Mangialardi</author>
      <pubDate>Wed, 01 Sep 2021 13:47:57 +0000</pubDate>
      <link>https://dev.to/michaelmangial1/work-with-your-mind-rest-with-your-hands-how-to-avoid-burnout-as-a-developer-1ind</link>
      <guid>https://dev.to/michaelmangial1/work-with-your-mind-rest-with-your-hands-how-to-avoid-burnout-as-a-developer-1ind</guid>
      <description>&lt;p&gt;If you’re a developer, you may have felt these feelings before:&lt;/p&gt;

&lt;p&gt;1) You started working on implementing a new feature. You spent the entire day making progress on it. You weren’t stuck, rather, you were quite productive. Despite a productive day, your mind continues to race about what’s left for you to do to finish implementing the feature.&lt;/p&gt;

&lt;p&gt;2) You worked on a bug the entire day and didn’t make the kind of progress you hoped. Your mind isn’t racing (you’re actually quite tired), but you have a hard time doing anything after work vigorously as the sense of incompleteness looms over you.&lt;/p&gt;

&lt;p&gt;3) You feel super productive. You’ve knocked out several bugs and even implemented a feature on top of code reviews. However, the next day, as you begin working on a new feature. The QA testing found issues on all your previous work. Suddenly, you feel overwhelmed with how much you have to do. Work ends but you feel stressed. You’ve worked a full day, but you feel as if you haven’t hit a good stopping point.&lt;/p&gt;

&lt;p&gt;4) You are cruising through your work, and you feel like things are going great. You’ve been super productive, and you’ve even received recognition for your efforts. But as you move on to the next thing, you feel kinda fuzzy (even though it’s a bit elusive).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wHDawMEX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1511203466129-824e631920d7%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D1049%26q%3D80" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wHDawMEX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1511203466129-824e631920d7%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D1049%26q%3D80" alt="thinking"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;I could multiply examples, but the point is that being a software developer, despite all its perks, is a mentally exhausting industry.&lt;/p&gt;

&lt;p&gt;If you were furniture mover for a living, you would be careful to take care of your back as it is essential to your work.&lt;/p&gt;

&lt;p&gt;If you were a musician, you would take good care of your instrument.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m3M-9lQm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1593697820940-43e77b53a1e1%3Fixlib%3Drb-1.2.1%26ixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26auto%3Dformat%26fit%3Dcrop%26w%3D1050%26q%3D80" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m3M-9lQm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1593697820940-43e77b53a1e1%3Fixlib%3Drb-1.2.1%26ixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26auto%3Dformat%26fit%3Dcrop%26w%3D1050%26q%3D80" alt="instrument"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In any work profession, you need to take care of the instrument by which your work is produced. In the case of a developer, this is your mind.&lt;/p&gt;

&lt;p&gt;So, how do you take care of your mind?&lt;/p&gt;

&lt;p&gt;I won’t launch into a diatribe about psychology and modern theories on mental health. &lt;/p&gt;

&lt;p&gt;Neither will I talk about how some of the stressful situations mentioned above could have been avoided. Honestly, there is always going to be a difficulty in labor and no industry is immune; no, not even software development.&lt;/p&gt;

&lt;p&gt;Rather, let me emphasize that all those stressful situations I mentioned above are indicative of the need to rest.&lt;/p&gt;

&lt;p&gt;By rest, I don’t mean good sleep (although, you certainly should be aiming for that). I don’t mean the days you take off from work (which are vital). I mean a way to take the edge off from the stress that accumulates during a work day.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;As a general rule, those who work with their hands rest well with their minds, and those who work with their minds rest well with their heads.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, what does this mean for developers?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Find a way to rest with your hands.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What does this look like? Well, I would simply recommend something physical that you enjoy and where you can see clear progress before and after.&lt;/p&gt;

&lt;p&gt;Exercise is great, but you don’t even need a gym membership to do exercise.&lt;/p&gt;

&lt;p&gt;Recently, my wife and I moved I from our rental into a new home. As a first-time homeowner, I’ve been getting my exercise by painting walls, mowing the lawn, weed-whacking, making an outdoor fire pit, etc. etc.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uzS5xOpV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1619191949595-16a8961477ba%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D967%26q%3D80" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uzS5xOpV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1619191949595-16a8961477ba%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D967%26q%3D80" alt="yard-work"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here’s how I approach it:&lt;/p&gt;

&lt;p&gt;Work with your mind until you feel fuzzy. Then, either take a break with physical work or plan to do physical work when you are done with your work day.&lt;/p&gt;

&lt;p&gt;I pick something that’s not only physical but has a concrete before and after (like mowing the lawn) so I can have a sense of accomplishment regardless of how the coding day went.&lt;/p&gt;

&lt;p&gt;Of course, things come up. But if you simply emphasize on testing with your hands, it will do you no small amount of good.&lt;/p&gt;




&lt;p&gt;What do you do to actively rest from coding?&lt;/p&gt;

</description>
      <category>career</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Working with Vault and Golang</title>
      <author>Ankit malik</author>
      <pubDate>Wed, 01 Sep 2021 13:36:06 +0000</pubDate>
      <link>https://dev.to/ankitmalikg/working-with-vault-and-golang-395m</link>
      <guid>https://dev.to/ankitmalikg/working-with-vault-and-golang-395m</guid>
      <description>&lt;p&gt;Hi, This is my first post on this portal.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is Vault:&lt;/strong&gt;&lt;br&gt;
Vault is a tool by which you can securely access you credentials. It is developed by Hashicorp. It is similar to AWS Parameter store. It helps in managing credentials effectively.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sample Code for CRUD Operations in Vault:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"fmt"&lt;/span&gt;
    &lt;span class="s"&gt;"net/http"&lt;/span&gt;
    &lt;span class="s"&gt;"time"&lt;/span&gt;

    &lt;span class="s"&gt;"github.com/hashicorp/vault/api"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;httpClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Timeout&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Second&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;"your token"&lt;/span&gt;
    &lt;span class="n"&gt;vaultAddr&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;"your url"&lt;/span&gt;

    &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Address&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;vaultAddr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;HttpClient&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;httpClient&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;panic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetToken&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;//writing the data&lt;/span&gt;
    &lt;span class="n"&gt;inputData&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="k"&gt;interface&lt;/span&gt;&lt;span class="p"&gt;{}{&lt;/span&gt;
        &lt;span class="s"&gt;"data"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="k"&gt;interface&lt;/span&gt;&lt;span class="p"&gt;{}{&lt;/span&gt;
            &lt;span class="s"&gt;"first"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"ankit"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Logical&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"secret/data/abd"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inputData&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;panic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;//deleting the data&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Logical&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"secret/data/hello"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;panic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;//deleting the data&lt;/span&gt;
    &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Logical&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"secret/metadata/abd"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;panic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Things to Focus here is code&lt;/strong&gt;&lt;br&gt;
If we look at in this code then it is very easy to miss the write operation. We need to check &lt;code&gt;inputData&lt;/code&gt; and how it is structured because according to golang object type it seems that we should use in this way rather than of how we used it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;inputData&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="k"&gt;interface&lt;/span&gt;&lt;span class="p"&gt;{}{&lt;/span&gt;
        &lt;span class="s"&gt;"first"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"ankit"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Where should I use Vault?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It should be used when we are initialising the project. &lt;/li&gt;
&lt;li&gt;All the configurations should be read from Vault or any other secret manager. &lt;/li&gt;
&lt;li&gt;There should be no configurations saved on server.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>go</category>
      <category>hashicorpvault</category>
      <category>security</category>
      <category>credential</category>
    </item>
  </channel>
</rss>
