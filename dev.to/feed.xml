<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>12+ Github Repositories to Help You Ace Your Job Interview</title>
      <author>Harry</author>
      <pubDate>Thu, 30 Sep 2021 05:38:45 +0000</pubDate>
      <link>https://dev.to/uu7j/12-github-repositories-to-help-you-ace-your-job-interview-i99</link>
      <guid>https://dev.to/uu7j/12-github-repositories-to-help-you-ace-your-job-interview-i99</guid>
      <description>&lt;p&gt;The word "interview" is frequently associated with anxiety and discomfort. However, you may prepare vital tools to brighten up and organise fruitful interviews with this article's assistance.&lt;/p&gt;
&lt;p&gt;I'll provide you with a list of GitHub repositories that will assist you in preparing for your next technical/coding interview. &lt;/p&gt;

&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/10-awesome-github-repos-every-web-developer-should-know/&amp;amp;ved=2ahUKEwi7_pjE_aXzAhWj7nMBHT9cAd8QFnoECBMQAQ&amp;amp;usg=AOvVaw1YdY91hlP3suK6HGMF0MXW"&gt;12+ Github Repositories to Help You Ace Your Job Interview&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>15 Developer Tools to Make You Super Productive</title>
      <author>Harry</author>
      <pubDate>Thu, 30 Sep 2021 04:50:21 +0000</pubDate>
      <link>https://dev.to/uu7j/15-developer-tools-to-make-you-super-productive-4an4</link>
      <guid>https://dev.to/uu7j/15-developer-tools-to-make-you-super-productive-4an4</guid>
      <description>&lt;p&gt;The best software developers arm themselves with superior knowledge of specific tools that get the job done.&lt;/p&gt;
&lt;p&gt;Pairing with experienced developers leaves you with many tips, tricks, shortcuts, and tools that they have access to and mastered to help them focus on a product’s business logic.&lt;/p&gt;
&lt;p&gt;Today, I’ll show you 15 developer tools that’ll improve your productivity immensely.&lt;/p&gt;
&lt;p&gt;Let’s go! &lt;/p&gt;

&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/7-best-tools-for-developers-they-cant-live-without-it/&amp;amp;ved=2ahUKEwivot_j8qXzAhVVjeYKHTLoDMcQFnoECAYQAQ&amp;amp;usg=AOvVaw1L8LdsK7AZhqLDllCtK7lz"&gt;15 Developer Tools to Make You Super Productive&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Tip's to Become Great Programmer Of All Time</title>
      <author>Harry</author>
      <pubDate>Thu, 30 Sep 2021 04:45:52 +0000</pubDate>
      <link>https://dev.to/uu7j/tip-s-to-become-great-programmer-of-all-time-343b</link>
      <guid>https://dev.to/uu7j/tip-s-to-become-great-programmer-of-all-time-343b</guid>
      <description>&lt;p&gt; A good programmer is someone who always looks both ways before crossing a one-way street. ~Doug Linder&lt;/p&gt;

&lt;p&gt;Let me start by saying that I do not consider myself to be a competent coder. I consider my coding abilities to be mediocre, and I am still learning and have a long way to go before I am even remotely satisfied with them.Yes, I am better at programming than a lot of others, but that is just because they are lazy and choose to sit about idle all day instead of programming. Their dreadful abilities make my less dreadful abilities appear fantastic.&lt;/p&gt;

&lt;p&gt;So most of the tips I will mention below are lessons learnt from failed endeavours, they are what I have wanted to be and I am not. So lets dive in. &lt;/p&gt;

&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.codelivly.com/tips-to-become-a-great-programmer/"&gt;Tips to become a great programmer&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>JS Coding Question #10: Is Balanced Parenthesis [Very Common Question]</title>
      <author>Let's Code</author>
      <pubDate>Thu, 30 Sep 2021 04:40:45 +0000</pubDate>
      <link>https://dev.to/frontendengineer/js-coding-question-10-is-balanced-parenthesis-very-common-question-2b1c</link>
      <guid>https://dev.to/frontendengineer/js-coding-question-10-is-balanced-parenthesis-very-common-question-2b1c</guid>
      <description>&lt;h4&gt;
  &lt;a href="#interview-question-10"&gt;
  &lt;/a&gt;
  Interview Question #10:
&lt;/h4&gt;

&lt;p&gt;Write a function or program that checks if a string is a balanced parenthesis.🤔 &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you need practice, try to solve this on your own without looking at the solution below.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Feel free to bookmark 🔖 even if you don't need this for now. You may need to refresh/review down the road when it is time for you to look for a new role.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#codepen"&gt;
  &lt;/a&gt;
  Codepen:
&lt;/h4&gt;

&lt;p&gt;If you want to play around and experiment with the code: &lt;a href="https://codepen.io/angelo_jin/pen/OJgwaed"&gt;https://codepen.io/angelo_jin/pen/OJgwaed&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Solution below uses a stack which is a great algorithm to use in this kind of problem. With a small tweak on the code below, you can solve problem that checks for balanced curly braces, brackets and parenthesis as well.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;isBalanced&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stack&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;char&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;char&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;char&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; 

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Small Cleanup/Refactor&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;isBalanced&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stack&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;char&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;char&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;char&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Happy coding and good luck if you are interviewing!&lt;/p&gt;

&lt;p&gt;If you want to support me - &lt;a href="https://www.buymeacoffee.com/letscode77"&gt;Buy Me A Coffee&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Video below if you prefer instead of bunch of text/code 👍😊&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/1TjtX4HR44w"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>challenge</category>
      <category>javascript</category>
      <category>tutorial</category>
      <category>career</category>
    </item>
    <item>
      <title>7 UI Design Fundamentals for Developers</title>
      <author>Harry</author>
      <pubDate>Thu, 30 Sep 2021 04:34:03 +0000</pubDate>
      <link>https://dev.to/uu7j/7-ui-design-fundamentals-for-developers-222n</link>
      <guid>https://dev.to/uu7j/7-ui-design-fundamentals-for-developers-222n</guid>
      <description>&lt;p&gt;Hello everyone, my name is Vansh and I'm a frontend developer. A lot of people have asked me this question,"Do I need to learn design to be Front end developer?"&lt;/p&gt;
&lt;p&gt;Before I answer this question first you need to understand that many companies do have in-house UX/UI designers, who will do the designing part and build mockups while you can concentrate on the development part. It's our task to give life to mockups, to make them interactive. &lt;/p&gt;

&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/6-ux-tips-to-become-a-better-front-end-developer/&amp;amp;ved=2ahUKEwiB-s6D76XzAhXExIsBHT2kA9A4ChAWegQIExAB&amp;amp;usg=AOvVaw3YEGKl-uXFR-yVmonqkAxv"&gt;7 UI Design Fundamentals for Developers&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>How GitHub Uses Codespaces to Build GitHub</title>
      <author>Davide 'CoderDave' Benvegnù</author>
      <pubDate>Thu, 30 Sep 2021 04:12:08 +0000</pubDate>
      <link>https://dev.to/n3wt0n/how-github-uses-codespaces-to-build-github-4a5o</link>
      <guid>https://dev.to/n3wt0n/how-github-uses-codespaces-to-build-github-4a5o</guid>
      <description>&lt;p&gt;GitHub Codespaces is a great service. But did you know that GitHub Engineering has switched over to it, so now &lt;strong&gt;GitHub uses Codespaces to build GitHub&lt;/strong&gt;?&lt;/p&gt;

&lt;p&gt;In this live stream, we talk with Mike McQuaid (Staff Software Engineer at GitHub) about how GitHub uses Codespaces to Build GitHub, the challenges, the gains, and the future of how GitHub builds GitHub.&lt;/p&gt;

&lt;p&gt;The GitHub.com codebase is almost 14 years old. And over those 14 years, the core repository powering GitHub has seen over a million commits And over the past months, GitHub's Engineering has evolved and moved to GitHub Codespaces for the majority of GitHub development.&lt;/p&gt;

&lt;p&gt;This is your chance to discover how GitHub uses GitHub to build GitHub :)&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/xrZo4SHOdg0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/xrZo4SHOdg0"&gt;Link to the video: https://youtu.be/xrZo4SHOdg0&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;See you there!And bring your questions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#time-for-the-live"&gt;
  &lt;/a&gt;
  ⏲️ TIME FOR THE LIVE:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Tuesday, October 5th, 9.30 pm HKT&lt;/li&gt;
&lt;li&gt;Tuesday, October 5th, 7.00 pm IST&lt;/li&gt;
&lt;li&gt;Tuesday, October 5th, 1.30 pm UTC&lt;/li&gt;
&lt;li&gt;Tuesday, October 5th, 9.30 am ET&lt;/li&gt;
&lt;li&gt;Tuesday, October 5th, 6.30 am PT&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Like, share and follow me&lt;/strong&gt; 🚀 for more content:&lt;/p&gt;

&lt;p&gt;📽 &lt;a href="https://www.youtube.com/CoderDave"&gt;YouTube&lt;/a&gt;&lt;br&gt;
☕ &lt;a href="https://buymeacoffee.com/CoderDave"&gt;Buy me a coffee&lt;/a&gt;&lt;br&gt;
💖 &lt;a href="https://patreon.com/CoderDave"&gt;Patreon&lt;/a&gt;&lt;br&gt;
📧 &lt;a href="https://coderdave.io/newsletter"&gt;Newsletter&lt;/a&gt;&lt;br&gt;
🌐 &lt;a href="https://coderdave.io"&gt;CoderDave.io Website&lt;/a&gt;&lt;br&gt;
👕 &lt;a href="https://geni.us/cdmerch"&gt;Merch&lt;/a&gt;&lt;br&gt;
👦🏻 &lt;a href="https://www.facebook.com/CoderDaveYT"&gt;Facebook page&lt;/a&gt;&lt;br&gt;
🐱‍💻 &lt;a href="https://github.com/n3wt0n"&gt;GitHub&lt;/a&gt;&lt;br&gt;
👲🏻 &lt;a href="https://www.twitter.com/davide.benvegnu"&gt;Twitter&lt;/a&gt;&lt;br&gt;
👴🏻 &lt;a href="https://www.linkedin.com/in/davidebenvegnu/"&gt;LinkedIn&lt;/a&gt;&lt;br&gt;
🔉 &lt;a href="https://geni.us/cdpodcast"&gt;Podcast&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/CoderDave"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/xrZo4SHOdg0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>github</category>
      <category>codespaces</category>
      <category>vscode</category>
      <category>podcast</category>
    </item>
    <item>
      <title>I wrote a fully-functioning File Explorer, using TypeScript.</title>
      <author>Harry</author>
      <pubDate>Thu, 30 Sep 2021 04:06:59 +0000</pubDate>
      <link>https://dev.to/uu7j/i-wrote-a-fully-functioning-file-explorer-using-typescript-8mh</link>
      <guid>https://dev.to/uu7j/i-wrote-a-fully-functioning-file-explorer-using-typescript-8mh</guid>
      <description>&lt;p&gt;I am very happy to introduce &lt;a href="https://xplorer.vercel.app/"&gt;Xplorer&lt;/a&gt; to help you organize your files and/or folders.&lt;br&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N3Tr9i8d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ecv6gk12ld5lij18gmeu.png"&gt;&lt;img alt="Xplorer win" src="https://res.cloudinary.com/practicaldev/image/fetch/s--hBmk6MCp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--N3Tr9i8d--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ecv6gk12ld5lij18gmeu.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;br&gt;&lt;/h2&gt;
&lt;h2&gt;
&lt;a href="https://dev.to/kimlimjustin/i-wrote-a-fully-functioning-file-explorer-using-typescript-1e4n#features"&gt;&lt;/a&gt;Features&lt;/h2&gt;
&lt;h3&gt;
&lt;a href="https://dev.to/kimlimjustin/i-wrote-a-fully-functioning-file-explorer-using-typescript-1e4n#designed-out-of-the-box"&gt;&lt;/a&gt;Designed Out Of The Box&lt;/h3&gt;
&lt;p&gt;Xplorer is not written on traditional language like C, C++ or C#. It is written on TypeScript, HTML and SCSS, using the Electron framework, this makes Xplorer looks much more modern, and it will support theme customization in the future release. There are four available default themes for now.&lt;/p&gt;
&lt;h3&gt;
&lt;a href="https://dev.to/kimlimjustin/i-wrote-a-fully-functioning-file-explorer-using-typescript-1e4n#cross-platform"&gt;&lt;/a&gt;Cross Platform&lt;/h3&gt;
&lt;p&gt;As I mentioned, Xplorer is powered by the web because it's written with the Electron framework, this makes it possible to run Xplorer from any platform. &lt;/p&gt;

&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/ethical-hacking-roadmap-a-beginners-guide/&amp;amp;ved=2ahUKEwjPiI64s6PzAhW4wjgGHTZOBx0QFnoECB8QAQ&amp;amp;usg=AOvVaw3-vFooaWUJypOS-FfvXpjK"&gt;I wrote a fully-functioning File Explorer, using TypeScript&lt;/a&gt;&lt;/b&gt;. &lt;/p&gt;






</description>
    </item>
    <item>
      <title>How to make the most out of HacktoberFest 2021</title>
      <author>Siddhant Khisty</author>
      <pubDate>Thu, 30 Sep 2021 02:48:34 +0000</pubDate>
      <link>https://dev.to/siddhantkhisty/how-to-make-the-most-out-of-hacktoberfest-2021-39g</link>
      <guid>https://dev.to/siddhantkhisty/how-to-make-the-most-out-of-hacktoberfest-2021-39g</guid>
      <description>&lt;p&gt;Hey there folks, HacktoberFest 2021 is right around the corner. It would be beneficial for you to make the most out of HacktoberFest and get started into Open Source Contributions. Lets start with some basics.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-hacktoberfest-and-why-should-i-care"&gt;
  &lt;/a&gt;
  What is HacktoberFest and Why should I care?
&lt;/h2&gt;

&lt;p&gt;Well, in simple language, HacktoberFest is a event hosted by DigitalOcean every year throughout the month of October in order to encourgae more and more folks regardless of wheather they have development skills or not to start contributing to Open Source Projects. Open Source is a great way to build up your online presence and get known by folks around the world. This will open up plently of opportunites for you based on your skills. &lt;/p&gt;

&lt;p&gt;For example, lets say you are not great at development but you are great at creating graphics. You can find a project that needs some sort of Graphics Designs, and sumbmit your designs to that project. This way folks will come to know about your designing skills and could very well reach out to you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-i-get-started-with-hacktoberfest"&gt;
  &lt;/a&gt;
  How do I get started with HacktoberFest?
&lt;/h2&gt;

&lt;p&gt;First thing you will need to do is learn &lt;a href="https://www.youtube.com/watch?v=apGV9Kg7ics&amp;amp;t=1584s"&gt;Git and Github&lt;/a&gt;. You should learn how to make commits, push your commits and make a Pull Request(PR). There are more things but these are the basics you will need for Hacktober.&lt;/p&gt;

&lt;p&gt;Next, head over to the official website of &lt;a href="https://hacktoberfest.digitalocean.com/"&gt;HacktoberFest 2021&lt;/a&gt; and register yourself for the event. Note that you will require a GitHub or a GitLab account in order to sign up. Github is the most famous open source website, but there are others as well.&lt;/p&gt;

&lt;p&gt;Now, starting on October 1, till the end of the month, you will require to make good, meaningfull PRs on repositories which have the tag &lt;code&gt;HacktoberFest 2021&lt;/code&gt;. Pull requests which are Spam will not be counted towards the progress on this event. These PR's will count towards your progress towards HacktoberFest. Once 5 PR's that you make get approved and merged with the repositores, you will be eligible to get HacktoberFest swag which includes a HacktoberFest T-shirt. There is a possibility of other swags as well. &lt;/p&gt;

&lt;p&gt;Please make a note of the following not just for hacktoberfest but for any, and every event: &lt;strong&gt;Don't let the Swag be your main motivation for joining the event. Let the motivation be of learning something new, networking and innovation.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#benefits-of-hacktoberfest"&gt;
  &lt;/a&gt;
  Benefits of HacktoberFest
&lt;/h2&gt;

&lt;p&gt;HacktoberFest is a great way to show that you are involved with communities and are keen on contributing to various projects. It will help you to get into Open Source which in itself is a great place to devleop your skills, get guidance, network and a lot more. &lt;/p&gt;

&lt;p&gt;I look forward to seeing all you folks participate in HacktoberFest this year and start getting into Open Source.&lt;br&gt;
Be well and continue learning.&lt;/p&gt;

</description>
      <category>hacktoberfest</category>
      <category>beginners</category>
      <category>opensource</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Bookmark These Front-End Websites Now!</title>
      <author>Harry</author>
      <pubDate>Thu, 30 Sep 2021 02:20:06 +0000</pubDate>
      <link>https://dev.to/uu7j/bookmark-these-front-end-websites-now-ka9</link>
      <guid>https://dev.to/uu7j/bookmark-these-front-end-websites-now-ka9</guid>
      <description>&lt;p&gt;Now that I've been working with front-end web frameworks professionally for over 2 years, I can confidently say that I &lt;em&gt;mostly&lt;/em&gt; know what I'm doing.&lt;/p&gt;
&lt;p&gt;Through this journey I've come across many useful resources and websites that have been extremely valuable to my success.&lt;br&gt;Here is a list of useful resources that I recommend every front-end developer has bookmarked (especially for those new in the space 😊):&lt;/p&gt;

&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.codelivly.com/bookmark-these-front-end-websites-now/"&gt;Bookmark These 10 Front-End Websites Now!&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>10 Common HTML Mistakes you should avoid</title>
      <author>Harry</author>
      <pubDate>Thu, 30 Sep 2021 01:34:16 +0000</pubDate>
      <link>https://dev.to/uu7j/10-common-html-mistakes-you-should-avoid-1bf7</link>
      <guid>https://dev.to/uu7j/10-common-html-mistakes-you-should-avoid-1bf7</guid>
      <description>&lt;p id="f9e9"&gt;HTML is the queen of web development. It’s the markup language that every web developer must know. It allows you to easily create elements for web pages by using tags and attributes in your code.&lt;/p&gt;
&lt;p id="4d42"&gt;HTML has a lot of cool features that you can benefit from as a web developer. However, writing semantic and quality HTML code is not that easy. There are some mistakes that a lot of developers do without noticing that.&lt;/p&gt;
&lt;p id="caf7"&gt;That’s why in this article, we will cover some common HTML mistakes that every developer should avoid. So let’s get right into it. &lt;/p&gt;
&lt;p id="caf7"&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/&amp;amp;ved=2ahUKEwiJ-uH95KTzAhWA7XMBHVeKBdwQFnoECAgQAg&amp;amp;usg=AOvVaw1PUPii-XosNgl1ZTInOseb"&gt;5 Common HTML Mistakes you should avoid&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Make your own API under 30 lines of code</title>
      <author>Harry</author>
      <pubDate>Thu, 30 Sep 2021 01:32:39 +0000</pubDate>
      <link>https://dev.to/uu7j/make-your-own-api-under-30-lines-of-code-dml</link>
      <guid>https://dev.to/uu7j/make-your-own-api-under-30-lines-of-code-dml</guid>
      <description>&lt;h1&gt;Make your own API under 30 lines of code&lt;/h1&gt;
&lt;p&gt;Hey readers 👋🏻, in this blog we are going to discuss about making our own API in just 30 lines of code.&lt;/p&gt;
&lt;h3&gt;
&lt;a href="https://dev.to/shreyazz/make-your-own-api-under-30-lines-of-code-4doh#topics-covered-"&gt;&lt;/a&gt;Topics Covered :&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;What is an API.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Tech used to make one.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How to code it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How to deploy it (FOR FREE).&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;&lt;p&gt;Those who all know what APIs are and don't want to know anything else then 'How to code it', you can skip to that part directly.&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3&gt;
&lt;a href="https://dev.to/shreyazz/make-your-own-api-under-30-lines-of-code-4doh#what-is-an-api-"&gt;&lt;/a&gt;What is an API :&lt;/h3&gt;
&lt;p&gt;API stands for &lt;span&gt;Application Programming Interface&lt;/span&gt;, which is a way for computer to talk to each other. APIs are just like website, except the UI part, it sends a &lt;span&gt;request&lt;/span&gt; to a server and in return the server send a &lt;span&gt;response&lt;/span&gt; .&lt;/p&gt;
&lt;p&gt;Most APIs which we use are &lt;span&gt;RESTFUL APIs&lt;/span&gt;, which means they follow a set of protocols/rules .&lt;/p&gt;
&lt;p&gt;You all already know what URLs are, but APIs use &lt;span&gt;URIs&lt;/span&gt; which stands for &lt;span&gt;Uniform Resource Identifiers&lt;/span&gt; and they help to differentiate between data on a server. &lt;/p&gt;

&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/&amp;amp;ved=2ahUKEwjxi6XKxqXzAhW1yTgGHS6yASoQFnoECAgQAg&amp;amp;usg=AOvVaw1PUPii-XosNgl1ZTInOseb"&gt;Make your own API under 30 lines of code &lt;/a&gt;&lt;/b&gt;&lt;/p&gt;




</description>
    </item>
    <item>
      <title>Hiring is broken! Let's fix it with empathy.</title>
      <author>David Whitney</author>
      <pubDate>Thu, 30 Sep 2021 01:28:25 +0000</pubDate>
      <link>https://dev.to/david_whitney/hiring-is-broken-let-s-fix-it-with-empathy-2om9</link>
      <guid>https://dev.to/david_whitney/hiring-is-broken-let-s-fix-it-with-empathy-2om9</guid>
      <description>&lt;p&gt;Hiring technical people is difficult, and doubly so if you want to get people who are a good fit for you and the teams you're working with, yet repeatedly &lt;strong&gt;we seem to get it awfully wrong as an industry&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The tropes are real&lt;/strong&gt; – and we're now in our second iteration of "hiring terribly". Where the 80s and early 90s were characterised by mystery puzzle hiring ("how would you work out how many cars you can fit into three cruise ships?"), the 2010s are defined by the tired trope of the interview that is orders of magnitude more difficult to pass and bares increasingly less resemblance to the job you do once you get the role.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Over fifteen years of hiring people for coding jobs, a few things still seem to hold:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The ability to talk fluently about what you like and don't like about code for an hour or so is the most reliable indicator of a good fit.&lt;/li&gt;
&lt;li&gt;It's a bad idea to hire someone if you have never seen code they have written.&lt;/li&gt;
&lt;li&gt;Interview processes are stressful, unnatural, and frequently don't get the best from people.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We're faced with the quandary – how do we find people from a pool of unknowns, who will quickly be able to contribute, work in relative harmony, and enjoy being a part of your team.&lt;/p&gt;

&lt;p&gt;The kind of people who will fit best in your organisations is inevitably variable – as it's driven by the qualities you desire in your team's – but personally, I value kind people who are clear communicators who are a pleasure to work with. Those are not everyone's values, but I want to speak to how I've tried to cultivate those kinds of teams.&lt;/p&gt;

&lt;p&gt;You're going to need to know how to write an excellent job spec, construct a good interview process, evaluate technical performance, and give meaningful feedback. Let's cover each of those topics in turn.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-construct-a-kind-interview-process"&gt;
  &lt;/a&gt;
  How to construct a kind interview process
&lt;/h2&gt;

&lt;p&gt;A good interview process respects everyone's time.&lt;/p&gt;

&lt;p&gt;Set amongst the hellscape of FAANG multi-stage interview processes with one hundred asinine divisional directors, &lt;strong&gt;it's simple to put together an interview process that isn't hell on earth&lt;/strong&gt; for everyone involved.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Write a job spec that captures your cultural values.&lt;/li&gt;
&lt;li&gt;Have an hour-long conversation with them about themselves, their experiences, and their opinions.&lt;/li&gt;
&lt;li&gt;See some code they've written.&lt;/li&gt;
&lt;li&gt;Have the team they would join, or someone else representative, talk to them about code.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There's no reason for this process to take any longer than three hours end-to-end, and ideally shouldn't be a chore for anybody involved.&lt;/p&gt;

&lt;p&gt;The first bit is all on you, the interviewer. It's important that a job spec contains &lt;strong&gt;concrete information&lt;/strong&gt; on the work that the role involves, that the only skills listened as mandatory are &lt;strong&gt;skills used in the actual role&lt;/strong&gt;, and that you are clear about constraints and salary conditions.&lt;/p&gt;

&lt;p&gt;The conversation is what most people are used to as an interview. Be kind. Understand people are humans and might be nervous, make sure they know that the best outcome is that you both "win" – &lt;strong&gt;don't be there to get a rise out of someone&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-be-a-good-interviewer"&gt;
  &lt;/a&gt;
  How to be a good interviewer
&lt;/h2&gt;

&lt;p&gt;The first and most important thing about being a good interviewer is that you're not there to trip people up or catch people out. If that's what you feel an interview should be, I implore you to pass on interviewing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Interviews are not meant to be hostile environments, and as a candidate, if you encounter one, do not under any circumstances take the job&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;You're in an interview to &lt;strong&gt;verify someone's experience, understand their communication style, and discuss the expectations&lt;/strong&gt; of the role you're hiring for.&lt;/p&gt;

&lt;p&gt;You're there to &lt;strong&gt;sell the position&lt;/strong&gt;, hopefully stimulating enthusiasm in the candidate, and to &lt;strong&gt;set expectations of what the job is like&lt;/strong&gt;, day-to-day, so that neither you nor the candidate is surprised if you both choose to work together.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You need to be honest&lt;/strong&gt; – both about the problem space, and the work. You need to be clear about where you need to grow as a team or organisation. There is nothing worse, as a candidate, than being sold a lie. &lt;strong&gt;Much rather articulate your challenges up front lest you ruin your own reputation.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You need to &lt;strong&gt;ask clear and relevant questions&lt;/strong&gt; – learn from the mistakes of a thousand poor "balance a binary tree" style interview questions and leave that stuff at home.&lt;/p&gt;

&lt;p&gt;Ask candidates questions about their &lt;strong&gt;relevant experience&lt;/strong&gt;. Ask them how they would solve problems that you have already solved in the course of your work, or how they would approach them. &lt;strong&gt;Don't ask meaningless brain teasers.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You need to &lt;strong&gt;give them space&lt;/strong&gt; to talk about broad topics – I love asking candidates what they think makes good code. I love to ask the question because everyone will say "readable" or "maintainable" and then we get to have a conversation on what they think satisfies those qualities in a codebase.&lt;/p&gt;

&lt;p&gt;As an interviewer, I don't care that you learnt to say, "it follows the solid principles", I'd &lt;strong&gt;much rather a candidate has the floor to talk&lt;/strong&gt; about how code makes them feel and why. Nice big broad questions are good at opening the floor to a discussion once you've talked about experience.&lt;/p&gt;

&lt;p&gt;Take notes. &lt;strong&gt;Don't interrupt the candidate&lt;/strong&gt;.&lt;br&gt;
 Give them time to speak, and &lt;strong&gt;actively listen&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#seeing-some-code"&gt;
  &lt;/a&gt;
  Seeing some code
&lt;/h2&gt;

&lt;p&gt;You're going to want to see some code for technical roles – this is an absolute minefield, but the thing that I've settled on after trying all sorts of techniques here is to &lt;strong&gt;offer the candidates choice&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;My standard process here is to offer candidates any of the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Bring me some code you have written that you're comfortable talking about&lt;/li&gt;
&lt;li&gt;Do a well-known kata, in your own time, and send it across&lt;/li&gt;
&lt;li&gt;Set up a one-hour session and I will pair program the kata with you&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I ask the candidates to &lt;strong&gt;"please pick whichever is less stressful for you".&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;People perform differently under different types of assessment, and qualitatively, I get the same outcome from a candidate regardless of the path they pick. I like to hope that this opens the door for more neurodiversity in applicants and protects me from only hiring people that share my exact mental model. &lt;strong&gt;Choice is good, it doesn't hurt to be kind, it costs nothing&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Each approach has subtle pros and cons – their own arbitrary code might not quite give me the same high-quality signal, but it's a great way for people who are &lt;strong&gt;unquestionably competent to avoid wasting their own time&lt;/strong&gt;. The take-home kata is a nice happy medium, though could potentially accidentally have a candidate thrashing around trying to complete something that doesn't need to be complete. The pairing session requires a little bit more of the interviewer's time and is probably the &lt;strong&gt;more high-stress option&lt;/strong&gt; as people sometimes don't perform well when they feel like they're being actively evaluated, but you know &lt;strong&gt;precisely&lt;/strong&gt; how someone works in those conditions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Technical tests are intimidating&lt;/strong&gt; to all but the most confident of candidates, this choice lets them wrestle a little bit of confidence and control back to at least feel like they're not being ambushed by something with which they cannot reckon.&lt;/p&gt;

&lt;p&gt;It's the right thing to do.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-set-a-good-technical-test"&gt;
  &lt;/a&gt;
  How to set a good technical test
&lt;/h2&gt;

&lt;p&gt;I've been involved in setting a lot of technical tests over the years – and I'm extremely sensitive to the ire that tech tests often cause in people. I've seen so many borderline abusive practices masquerading as technical tests that I'm not even remotely surprised.&lt;/p&gt;

&lt;p&gt;The commandments of good tech tests:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A test should take &lt;strong&gt;no longer than one hour&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;It should be &lt;strong&gt;completable by a junior to the most senior, senior&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;It should &lt;strong&gt;not be in your problem domain&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;It should &lt;strong&gt;not be unpaid work&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;answer should be provided&lt;/strong&gt; in the question&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are a couple of potentially controversial points here.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;tech tests should respect a candidate's time&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;You are not the only place they are applying, and the candidate does not owe you their time. Anything more than thirty minutes to half an hour can act as implicit discrimination against people that don't have unlimited time, or have families, or other social constraints.&lt;/p&gt;

&lt;p&gt;Using the same test for your most junior developers to your most senior allows you to &lt;strong&gt;understand the comparative skill of candidates&lt;/strong&gt; who are applying, on a level playing field. You might not expect the same level of assessment or scrutiny between submissions, but that baseline is a powerful way of &lt;strong&gt;removing the vast discrepancies between titles and pay&lt;/strong&gt; and focusing on a candidate's capability.&lt;/p&gt;

&lt;p&gt;The test should be synthetic, and not part of your domain. For years I believed the opposite of this and was a fan of making tests look like "real work", but this often fails because it &lt;strong&gt;expects that the candidate often must understand a whole set of new concepts&lt;/strong&gt; that doesn't help you assess their capability for the job.&lt;/p&gt;

&lt;p&gt;And finally, providing the answer in the question deliberately reinforces that &lt;strong&gt;it's not a "puzzle", but an interview aid.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If a tech test contains the answer, and isn't domain specific, then what is it really for?&lt;/p&gt;

&lt;p&gt;A tech test exists to verify, at the most basic level, that a &lt;strong&gt;candidate can code at all&lt;/strong&gt;. The extremely non-zero number of people I have interviewed that couldn't so much as add new classes to an application is real, and it's why &lt;a href="https://en.wikipedia.org/wiki/Fizz_buzz"&gt;FizzBuzz&lt;/a&gt; is a good traditional screening question – it does little more than "test" if you can write an if-statement.&lt;/p&gt;

&lt;p&gt;Once you've established a candidate can code, &lt;strong&gt;you're looking to see how they approach problem solving&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Do they write &lt;strong&gt;tests&lt;/strong&gt;?&lt;br&gt;
 Do they write code that is &lt;strong&gt;stylistically alike to your team's preferences&lt;/strong&gt;?&lt;br&gt;
 Can they &lt;strong&gt;clearly articulate why they made the choices&lt;/strong&gt; they made, however small?&lt;/p&gt;

&lt;p&gt;A technical test isn't there to see if a candidate can complete a problem under exam conditions, it's just an &lt;strong&gt;indicator&lt;/strong&gt; as to the way they approach a problem.&lt;/p&gt;

&lt;p&gt;A good technical test is the &lt;strong&gt;quickest shortcut to providing you these signals&lt;/strong&gt;. I've come to value well known code katas as recruitment tests as they tend to fulfil most of these criteria trivially, without having to be something of my own invention.&lt;/p&gt;

&lt;p&gt;I tend to use the Diamond Kata –&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Given a character from the alphabet, print a diamond of its output with that character being the midpoint of the diamond. Write appropriate tests.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ru0-HU0a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cig6m4mej8f7pwxzrdpv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ru0-HU0a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cig6m4mej8f7pwxzrdpv.png" alt="Example of the Diamond Kata - find it on github davidwhitney Code Katas"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#giving-feedback"&gt;
  &lt;/a&gt;
  Giving feedback
&lt;/h2&gt;

&lt;p&gt;If a candidate has given you an hour of their time, it's responsible to give them meaningful feedback as notes. It doesn't have to be much, and you don't need to review them – just a few hints as to what they could have done in future to be more successful ("we didn't feel like you had enough experience in Some Framework" or "We didn't feel confident that the tests you were writing") is absolutely fine.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Be kind.&lt;/strong&gt; Hope they take the feedback away and think about it.&lt;/p&gt;

&lt;p&gt;There are hundreds of examples of "failed interview candidate later the hiring manager" out there – being nice to people even if they don't get the job is a good precedent for when you inevitably meet them in the future.&lt;/p&gt;

&lt;p&gt;An unfortunate majority of job roles won't contact unsuccessful candidates at all – and there is a balance to be struck. You're certainly not obligated to everyone that applies to a CV screen funnel, but &lt;strong&gt;anyone you talk to deserves the courtesy of feedback for their time spent&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adapt-to-fit"&gt;
  &lt;/a&gt;
  Adapt to fit
&lt;/h2&gt;

&lt;p&gt;The best interview processes accurately reflect your own personal values and set the stage for the experience your new team members are going to have when they join your organisation. Because of this, it's an absolute truth that no one way will work for everyone – it's impossible.&lt;/p&gt;

&lt;p&gt;I hope that the pointers in here will &lt;strong&gt;stimulate a little bit of thought&lt;/strong&gt; as to how you can re-tool your own interview process to &lt;strong&gt;be simpler, kinder, and much quicker&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Below is an appendix about marking technical recruitment tests that may be useful in this process.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#appendix-how-to-mark-a-technical-test"&gt;
  &lt;/a&gt;
  Appendix: How to mark a technical test
&lt;/h2&gt;

&lt;p&gt;Because I tend to use the same technical tests for people across the entire skill spectrum, I've come to use a &lt;strong&gt;standard marking sheet to understand where a particular candidate fits&lt;/strong&gt; in the process. I &lt;strong&gt;expect less from candidates earlier on in their careers&lt;/strong&gt; than more experienced individuals – this grading sheet isn't the be all and end all, but as you scale out your process and end up with different people reviewing technical tests and seeing candidates, it's &lt;strong&gt;important that people are assessing work they see through the same lens.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Feel free to use this if it is helpful for you understanding what good looks like.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Problem domain and understanding of question&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Submitter suggested irrelevant implementation / entirely misunderstood domain&lt;/li&gt;
&lt;li&gt;Submitter modelled single concept correctly&lt;/li&gt;
&lt;li&gt;Submitter modelled a few concepts in domain&lt;/li&gt;
&lt;li&gt;Submitter modelled most concepts in domain&lt;/li&gt;
&lt;li&gt;Submitter modelled all concepts in domain&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Accuracy of solution&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Code does not compile&lt;/li&gt;
&lt;li&gt;Code does not function as intended, no features work&lt;/li&gt;
&lt;li&gt;Code builds and functions, but only some of the acceptance criteria are met&lt;/li&gt;
&lt;li&gt;~90% of the acceptance criteria are met. Bugs outside of the scope of the acceptance criteria allowed&lt;/li&gt;
&lt;li&gt;All acceptance criteria met. Any "hidden" bugs found and solved.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Simplicity of solution&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Is hopeless spaghetti code, illegible, confusing, baffling&lt;/li&gt;
&lt;li&gt;An overdesigned mess, or nasty hacky code - use of large frameworks for simple problems, misusing DI containers, exceptions as flow control, needless repetition, copy-­pasting of methods, lack of encapsulation, overuse of design patterns to show off, excess of repetitive comments, long methods&lt;/li&gt;
&lt;li&gt;Code is concise, size of solution fits the size of the problem, no surprises. Maybe a few needless comments, the odd design smell, but nothing serious&lt;/li&gt;
&lt;li&gt;Code is elegant, minimalist, and concise without being code-golf, no side effects, a good read. Methods and functions are descriptive and singular in purpose&lt;/li&gt;
&lt;li&gt;Perfect, simple solution. Absolutely no needless comments, descriptive method names. Trivial to read, easy to understand&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Presentation of solution&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Ugly code, regions, huge comment blocks, inconsistent approach to naming or brace style, weird amounts of whitespace&lt;/li&gt;
&lt;li&gt;Average looking code. No regions, fewer odd comment blocks, no bizarre whitespace&lt;/li&gt;
&lt;li&gt;Nice respectable code. Good code organisation, no odd comment blocks or lines (no stuff like //======= etc), internally consistent approach to naming and brace style&lt;/li&gt;
&lt;li&gt;Utterly consistent, no nasty comment blocks, entirely consistent naming and brace style, effective use of syntactic sugar (modern language features in the given language etc)&lt;/li&gt;
&lt;li&gt;Beautiful code. Great naming, internally consistent style. Follows conventions of language of test. Skillful use of whitespace / stanzas in code to logically group lines of code and operations. Code flows well and is optimised for the reader.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Quality of unit tests&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;No test coverage, tests that are broken, illegible, junk&lt;/li&gt;
&lt;li&gt;Tests that don't test the class that's supposed to be under test, some tests test some functionality. Vaguely descriptive naming. AAA pattern in unit tests.&lt;/li&gt;
&lt;li&gt;Descriptive, accurate names. AAA in unit tests. Use of test setup to DRY out tests if appropriate. Reasonable coverage.&lt;/li&gt;
&lt;li&gt;Complete test coverage to address all acceptance criteria, setup if appropriate, good descriptive names. BDD style tests with contexts are appreciated.&lt;/li&gt;
&lt;li&gt;Full coverage, all acceptance criteria covered, great naming that represents the user stories accurately, little to no repetition, no bloated repetitive tests, effective use of data driven tests if appropriate, or other framework features.&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>culture</category>
      <category>webdev</category>
      <category>leadership</category>
      <category>career</category>
    </item>
  </channel>
</rss>
