<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>What are Closures in JavaScript?</title>
      <author>Naveen Kamath</author>
      <pubDate>Sat, 11 Dec 2021 14:53:22 +0000</pubDate>
      <link>https://dev.to/naveenkamath/what-are-closures-in-javascript-4gf3</link>
      <guid>https://dev.to/naveenkamath/what-are-closures-in-javascript-4gf3</guid>
      <description>&lt;p&gt;Hello Readers,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Keep Reading this Blog to know more about Closures ....&lt;/li&gt;
&lt;li&gt;Lets Look at this Example:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1. function x(){
2.     var a=14;
3.     function y(){
4.         console.log(a);
5.     }
6.     y();
7. }
8. x();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The above is a Example for Closure. We already know the output of this program ie a equals 14, but lets understand theory behind this.&lt;/li&gt;
&lt;li&gt;First we need to Understand what &lt;strong&gt;Lexical Scoping(LS)&lt;/strong&gt; means, &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jToSj7yr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hf717uc56xwafgsbtedq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jToSj7yr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hf717uc56xwafgsbtedq.png" alt="Image description" width="728" height="401"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;LS means when y() gets called, it tries to find &lt;strong&gt;a&lt;/strong&gt; variable inside local memory but a is not found, so it goes to its Lexical Parent and it finds variable a and thus console logs it. This is called Lexical Scoping.&lt;/li&gt;
&lt;li&gt;A Function bundled together with its Lexical Environment forms Closure. Here the Function y was bundled to variables of x.&lt;/li&gt;
&lt;li&gt;so in One Way, This is what &lt;strong&gt;Closure&lt;/strong&gt; is !!!!&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#closure-deep-dive"&gt;
  &lt;/a&gt;
  Closure Deep Dive
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Consider the Example:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1. function x(){
2.     var a=14;
3.     function y(){
4.         console.log(a);
5.     }
6.     return y;
7. }
8. var z=x();
9. z();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;what is the output of the above program?&lt;/li&gt;
&lt;li&gt;The answer is when z() called in line9 returns 14, But how is that possible????&lt;/li&gt;
&lt;li&gt;We Know that &lt;strong&gt;&lt;em&gt;JS is Synchronus&lt;/em&gt;&lt;/strong&gt; ie after running line 8, x is Deleted ie X() &lt;strong&gt;Execution Context(EC) gets Deleted in Call Stack&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;To know more about EC, &lt;a href="https://dev.to/naveenkamath/how-javascript-code-is-executed--iif"&gt;Read my EC Blog&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;In the above Example, '&lt;strong&gt;a&lt;/strong&gt;' is not in Global Scope and x gets deleted after line 8, So how program console logs 14. Here Closure comes into picture.&lt;/li&gt;
&lt;li&gt;When Functions are Returned from Another Function, They still maintain their &lt;strong&gt;Lexical Scoping&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;When y is returned, not just function code gets returned but &lt;strong&gt;Closure enclosed function along with its Lexical Environment&lt;/strong&gt; gets returned and was assigned to z. This is the use case of Closures.&lt;/li&gt;
&lt;li&gt;Other Uses of Closures:&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;Currying&lt;/li&gt;
&lt;li&gt;setTimeout&lt;/li&gt;
&lt;li&gt;memoize etc&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;Thanks for Reading my Blog folks, Have a great Day :)&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Crea un generador de proyectos con React 🚀</title>
      <author>Jhony Vega</author>
      <pubDate>Sat, 11 Dec 2021 14:49:06 +0000</pubDate>
      <link>https://dev.to/jhony/crea-un-generador-de-proyectos-con-react-pmp</link>
      <guid>https://dev.to/jhony/crea-un-generador-de-proyectos-con-react-pmp</guid>
      <description>&lt;p&gt;En este pequeño tutorial crearemos un CLI el cual nos permita crear proyectos en la ruta donde estemos.&lt;br&gt;
Para realizar esto usaremos una base de plantillas y un archivo de configuración.&lt;br&gt;
Una de las cosas interesantes es que usaremos React para definir opciones mas dinámicas y para ellos nos estaremos apoyando de la librería &lt;a href="https://github.com/vadimdemedes/ink"&gt;React Ink&lt;/a&gt;. Comencemos! 😁&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#configurando-el-proyecto"&gt;
  &lt;/a&gt;
  Configurando el proyecto
&lt;/h3&gt;

&lt;p&gt;Primero se instalará las siguientes dependencias.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# dependencias&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;yarn add ink ink-select-input ink-spinner ink-text-input react yaml fs-extra @babel/runtime

&lt;span class="c"&gt;# dependencias de desarrollo&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;yarn add @babel/cli @babel/core @babel/node @babel/preset-env @babel/preset-react @babel/plugin-transform-runtime babel-loader nodemon &lt;span class="nt"&gt;--dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Una vez instalado, añadimos en el archivo &lt;strong&gt;package.json&lt;/strong&gt; los siguientes scripts, para poder usar en desarrollo y para generar nuestro código listo para producción.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"babel src -d dist"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"dev"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"nodemon --no-stdin --exec babel-node src/index.js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"node ./dist/index.js"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Y ahora que sigue? Creamos un archivo &lt;strong&gt;.babelrc&lt;/strong&gt; donde solo añadiremos la configuración de los presets y plugins necesarios.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"presets"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"@babel/preset-env"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"@babel/preset-react"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"plugins"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"@babel/plugin-transform-runtime"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#estructurando-los-archivos"&gt;
  &lt;/a&gt;
  Estructurando los archivos
&lt;/h2&gt;

&lt;p&gt;La estructura final quedaría de la siguiente forma la cual veremos para que sirve cada uno de los archivos.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YZ4jaQpU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mlag0f22jqx26dwxmrhb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YZ4jaQpU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mlag0f22jqx26dwxmrhb.png" alt="Project structure" width="752" height="840"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#src"&gt;
  &lt;/a&gt;
  src
&lt;/h3&gt;

&lt;p&gt;Aquí irá nuestro código para crear el CLI 👋.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#templatesgeneratoryaml"&gt;
  &lt;/a&gt;
  templates.generator.yaml
&lt;/h3&gt;

&lt;p&gt;Archivo de configuración para definir nuestros proyectos que podremos generar. Como se puede ver en la imagen también existe una carpeta &lt;em&gt;&lt;strong&gt;templates.generator&lt;/strong&gt;&lt;/em&gt; la cual contiene el mismo nombre que el archivo yaml. Aquí se encontrará nuestros proyectos base. Por ejemplo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.0&lt;/span&gt;
&lt;span class="na"&gt;templates&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
 &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;angular project&lt;/span&gt;
   &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/angular&lt;/span&gt; 
 &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;react project&lt;/span&gt;
   &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/react&lt;/span&gt;
 &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;vue project&lt;/span&gt;
   &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/vue&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Aquí tendríamos una lista de plantillas, cada uno con su nombre y la ruta donde se encuentra, no es necesario añadir la carpeta de &lt;strong&gt;templates.generator&lt;/strong&gt; ya que automaticamente lo detectaría.&lt;/p&gt;

&lt;p&gt;Dentro de la carpeta se tendría la siguiente estructura:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;templates.generator
  ├── angular
  ├── react
  └── vue
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#creando-el-cli"&gt;
  &lt;/a&gt;
  Creando el CLI
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#creando-las-constantes-necesarios"&gt;
  &lt;/a&gt;
  Creando las constantes necesarios
&lt;/h3&gt;

&lt;p&gt;Usaremos 4 constantes principales:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;currentDirectory&lt;/code&gt;: para ubicarnos en el directorio actual.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;templateDirectory&lt;/code&gt;: Directorio donde se tendrá las plantillas.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;templateName&lt;/code&gt;: Nombre del archivo de configuración.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;STEPS&lt;/code&gt;: Pasos que se irán mostrando en el CLI.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//src/constants.js&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;currentDirectory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cwd&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;templateDirectory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;templates.generator&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;templateName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;templateDirectory&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.yaml`&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;STEPS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;NAME&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;SELECT&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;LOADING&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;END&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#definiendo-funciones-principales"&gt;
  &lt;/a&gt;
  Definiendo funciones principales
&lt;/h3&gt;

&lt;p&gt;Usaremos 3 funciones principales, para obtener el archivo de configuración YAML como json, formatear el json con rutas absolutas y la última para copiar una carpeta o archivo a otro directorio.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//src/utils.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;currentDirectory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;templateDirectory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;templateName&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./constants&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Yaml&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;yaml&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;fsExtra&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fs-extra&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getTemplateGenerator&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentDirectory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;templateName&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;utf8&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;parseFile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Yaml&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;formatPathsInTemplate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parseFile&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;formatPathsInTemplate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;generator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="nx"&gt;generator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;templates&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;generator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;templates&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentDirectory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;templateDirectory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;generator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;templates&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;copyTemplateToCurrentDirectory&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fsExtra&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentDirectory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#creando-al-archivo-principal"&gt;
  &lt;/a&gt;
  Creando al archivo principal
&lt;/h3&gt;

&lt;p&gt;Por el momento solo crearemos un simple mensaje para poder ver su uso.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;//src/index.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Box&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Text&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ink&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Box&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hello world&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Box&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;App&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Si ahora ejecutamos el script &lt;code&gt;yarn dev&lt;/code&gt; verémos en consola lo siguiente:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;Hello world
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#definiendo-el-state"&gt;
  &lt;/a&gt;
  Definiendo el state
&lt;/h3&gt;

&lt;p&gt;Creamos un estado inicial para los siguientes casos: el paso en el que se encuentra, la lista de plantillas y el directorio en donde se creará el proyecto.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//src/core/state.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;STEPS&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../constants&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;step&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;STEPS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;templates&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
    &lt;span class="na"&gt;directory&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#a%C3%B1adiendo-el-reducer"&gt;
  &lt;/a&gt;
  Añadiendo el reducer
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//src/core/reducer.js&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ACTIONS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;SET_TEMPLATES&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;SET_TEMPLATES&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;SET_STEP&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;SET_STEP&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;SET_NAME_DIRECTORY&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;SET_NAME_DIRECTORY&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;reducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nx"&gt;ACTIONS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SET_TEMPLATES&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;templates&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nx"&gt;ACTIONS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SET_STEP&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;step&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nx"&gt;ACTIONS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SET_NAME_DIRECTORY&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;directory&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#creando-el-hook-usegenerator"&gt;
  &lt;/a&gt;
  Creando el hook useGenerator
&lt;/h3&gt;

&lt;p&gt;Y ahora creamos el hook en el cuál estaremos encapsulando la lógica necesaria para generar proyectos, leer la lista de opciones que tenemos del archivo YAML y movernos a los siguientes o anteriores pasos.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//src/useGenerator.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useReducer&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;STEPS&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./constants&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ACTIONS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reducer&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./core/reducer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./core/state&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;copyTemplateToCurrentDirectory&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./utils&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useGenerator&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reducer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;setDirectory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ACTIONS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SET_NAME_DIRECTORY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;setStep&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ACTIONS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SET_STEP&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;setTemplates&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ACTIONS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SET_TEMPLATES&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onSelectTemplate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setStep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;STEPS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;LOADING&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;copyTemplateToCurrentDirectory&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
          &lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;directory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="nx"&gt;setStep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;STEPS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;END&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onCompleteTypingDirectory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setStep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;STEPS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SELECT&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;onSelectTemplate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;onCompleteTypingDirectory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;setTemplates&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;setDirectory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;setStep&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;dispatch&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#redefiniendo-el-componente-principal"&gt;
  &lt;/a&gt;
  Redefiniendo el componente principal
&lt;/h3&gt;

&lt;p&gt;Es momento de actualizar el archivo donde se encontraba nuestro componente añadiendo los pasos y nuevos componentes creados con esta librería. Nos apoyaremos de 3 principales:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/vadimdemedes/ink-select-input"&gt;ink-select-input&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/vadimdemedes/ink-spinner"&gt;ink-spinner&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/vadimdemedes/ink-text-input"&gt;ink-text-input&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#importando-lo-necesario"&gt;
  &lt;/a&gt;
  Importando lo necesario
&lt;/h3&gt;

&lt;p&gt;Inicialmente importaremos todo lo que usaremos para crear el CLI.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;//src/index.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Box&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Text&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ink&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Select&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ink-select-input&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Loading&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ink-spinner&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getTemplateGenerator&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./utils&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;STEPS&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./constants&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Input&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ink-text-input&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;useGenerator&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./useGenerator&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#integrando-el-hook-usegenerator"&gt;
  &lt;/a&gt;
  Integrando el hook useGenerator
&lt;/h3&gt;

&lt;p&gt;Primero daremos un formato a la lista de opciones para que el componente &lt;strong&gt;Select&lt;/strong&gt; pueda aceptarlo. Asímismo vamos a traer la lista de las plantillas para poder elejir la que se requiera.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;setTemplates&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;setDirectory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;onCompleteTypingDirectory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;onSelectTemplate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useGenerator&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;templateItems&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;templates&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
      &lt;span class="p"&gt;}),&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;templates&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;getTemplateGenerator&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;setTemplates&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Box&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;hello&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Box&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#a%C3%B1adiendo-los-componentes-con-las-interacciones"&gt;
  &lt;/a&gt;
  Añadiendo los componentes con las interacciones
&lt;/h3&gt;

&lt;p&gt;Finalmente añadimos los componentes usando el hook y los datos necesarios para mostrar cada paso y generar un proyecto.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;/// ... &lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Box&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;step&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;STEPS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NAME&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Box&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Text&lt;/span&gt; &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"cyanBright"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Name directory:&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Input&lt;/span&gt;
            &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;directory&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;setDirectory&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="na"&gt;onSubmit&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onCompleteTypingDirectory&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Box&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;step&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;STEPS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Box&lt;/span&gt; &lt;span class="na"&gt;flexDirection&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"column"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Box&lt;/span&gt; &lt;span class="na"&gt;marginTop&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Text&lt;/span&gt; &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"cyanBright"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Select a template&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Box&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Select&lt;/span&gt;  &lt;span class="na"&gt;items&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;templateItems&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;onSelect&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onSelectTemplate&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Box&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;step&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;STEPS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;LOADING&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Box&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Text&lt;/span&gt; &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"yellowBright"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Loading&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"dots"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Loading&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"dots"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Loading&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"dots"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Text&lt;/span&gt; &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"yellow"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Creando proyecto...&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Box&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;step&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;STEPS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;END&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Box&lt;/span&gt; &lt;span class="na"&gt;paddingY&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Text&lt;/span&gt; &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"rgb(50,220,230)"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          ====================== ✨ Proyecto creado!!! ✨ ======================
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Box&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Box&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#uso-final"&gt;
  &lt;/a&gt;
  Uso final
&lt;/h2&gt;

&lt;p&gt;Para este caso ejecutaremos el siguiente script &lt;code&gt;yarn build&lt;/code&gt; y después  &lt;code&gt;yarn start&lt;/code&gt; para poder ver el funcionamiento. Y listo, lo logramos!! 😄🎉🎉.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_a1ztlfc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/knbipyyusscdzjkxppnx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_a1ztlfc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/knbipyyusscdzjkxppnx.png" alt="React CLI example" width="880" height="186"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;En caso de querer más detalles te dejo el link del repositorio y el link de la librería 😊.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/jhony-24/react-ink-generator-example"&gt;Código fuente de ejemplo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/vadimdemedes/ink"&gt;React Ink&lt;/a&gt;&lt;/p&gt;

</description>
      <category>node</category>
      <category>react</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>React-Redux How It's Works ?</title>
      <author>Shubham Athawane</author>
      <pubDate>Sat, 11 Dec 2021 14:18:27 +0000</pubDate>
      <link>https://dev.to/shubhamathawane/react-redux-how-its-works--13g6</link>
      <guid>https://dev.to/shubhamathawane/react-redux-how-its-works--13g6</guid>
      <description>&lt;h4&gt;
  &lt;a href="#how-redux-works-with-react-lets-see-in-this-tutorial-we-trying-to-learn-the-concept-of-reactredux-for-beginners-we-will-be-creating-a-small-increment-decrement-application-using-reactredux-which-i-think-is-best-example-to-learn-complex-concepts-like-these-so-lets-start"&gt;
  &lt;/a&gt;
  How Redux works with React ? Let's see, In this tutorial we trying to learn the concept of react-redux (for beginners), We will be creating a small increment - decrement application using react-redux, Which I think is best example to learn complex concepts like these, So let's start.
&lt;/h4&gt;

&lt;p&gt;-———————————————————————————&lt;/p&gt;

&lt;p&gt;First of all create Your React App using &lt;code&gt;npx create-react-app app-name&lt;/code&gt; and install following decencies :&lt;/p&gt;

&lt;p&gt;→ &lt;code&gt;npm install react-redux redux&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;after all installation and creating-app write in command &lt;code&gt;npm start&lt;/code&gt; to run your application and follow the below steps : -&lt;/p&gt;

&lt;p&gt;&lt;em&gt;important note&lt;/em&gt;: - there is problem with numbering, So please adjust&lt;br&gt;
-———————————————————————————&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;  Create Folder inside the src called actions, and inside the action folder create file called index.js and Inside that file we will create Actions like INCREMENT / DECREMENT , basically we will called it as &lt;strong&gt;What kind of action to do with&lt;/strong&gt; and write following code inside index.js file
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// .actions/index.js&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;incNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;INCREMENT&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;decNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;DECREMENT&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resetNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;RESET&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Here in this file we have created the function which will trigged by an action using &lt;code&gt;dispatch&lt;/code&gt; method, in this file we have created 3 functions and exported them separately using export keyword, in here &lt;code&gt;inNumber()&lt;/code&gt; will trigger "INCREMENT" method and so on.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Create another folder in src called &lt;code&gt;reducers&lt;/code&gt;, and inside reducers folder create file &lt;code&gt;upDown.js&lt;/code&gt; and &lt;code&gt;index.js&lt;/code&gt;.  &lt;code&gt;upDown.js&lt;/code&gt; we will create a functions that will change the state of our application. &lt;code&gt;upDown.js&lt;/code&gt; file will contain following code.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;This file will contain How to Do scenario.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;


&lt;/blockquote&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;//reducer/upDown.js&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;// It is always better to initial our state with 0 or to initialize &lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;changeTheNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;INCREMENT&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;DECREMENT&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;RESET&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;changeTheNumber&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Then inside the &lt;code&gt;index.js&lt;/code&gt; we will import the the function &lt;code&gt;ChangeTheNumber&lt;/code&gt; from &lt;code&gt;upDown.js&lt;/code&gt; file and here we will use &lt;code&gt;CombineReducers&lt;/code&gt; from redux and will create function &lt;code&gt;rootReducers&lt;/code&gt; it is most important step , and after creating the &lt;code&gt;rootReducers&lt;/code&gt; we'll export it, like bellow&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ..reducers/index.js&lt;/span&gt;
    &lt;span class="c1"&gt;// Imprting reducer from upDown file &lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;changeTheNumber&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./upDown&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;// Importing combineReducers object &lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;combineReducers&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;redux&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// Creating RootReducer &lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rootReducer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;combineReducers&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="nx"&gt;changeTheNumber&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="c1"&gt;//Exporting rootReducer&lt;/span&gt;
    &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;rootReducer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt; In this step we will create a store for our react-redux application, so we will need to install react-redux package into your application using &lt;code&gt;npm install react-redux&lt;/code&gt; , ( ignore if you already install ) after installation write the following code inside store.js file
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// sc/store.js&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createStore&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;redux&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

    &lt;span class="c1"&gt;// Importing RootReducers&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;rootReducer&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./reducer/index&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

    &lt;span class="c1"&gt;//Creating Store and passing rootreducer&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createStore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rootReducer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__REDUX_DEVTOOLS_EXTENSION__&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__REDUX_DEVTOOLS_EXTENSION__&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

    &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and we will &lt;em&gt;export that store to import inside index.js&lt;/em&gt; to make it global store. So let's how we can make it global store in next step.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Go to you index.js file from src, Here import store which we exported from store.js file and also import Provider from react-redux like below.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// index.js&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./index.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;reportWebVitals&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./reportWebVitals&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./store&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Provider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-redux&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getState&lt;/span&gt;&lt;span class="p"&gt;()));&lt;/span&gt;

    &lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;StrictMode&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt; &lt;span class="na"&gt;store&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;StrictMode&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;,&lt;/span&gt;
      &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;reportWebVitals&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Your index.js file will look like this, here we have wrap our App inside  and Pass the store={store} as a prop&lt;/p&gt;

&lt;p&gt;( You can use redux &lt;code&gt;devtool&lt;/code&gt; if you want : and add following code to work with &lt;code&gt;devtool&lt;/code&gt; , It is optional to see reducers inside browsers but makes working with reducers easy )&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getState&lt;/span&gt;&lt;span class="p"&gt;()));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt; Final Step : Go to your app.js file and import the functions we created inside &lt;code&gt;/actions/&lt;/code&gt; file such as &lt;code&gt;{ decNumber, incNumber, resetNumber }&lt;/code&gt; and create a variable which will hold the state result. we use dispatch method to trigger events like dispatch( functionName() ). after all our app.js file will look like this →
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./App.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;useSelector&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useDispatch&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-redux&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;decNumber&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;incNumber&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;resetNumber&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./action&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useSelector&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;changeTheNumber&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useDispatch&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Increment / Decrement Counter&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h4&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Using React and Redux&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h4&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"quantity"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"quantity_minus"&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Decrement"&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;decNumber&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; - &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt;
              &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"quantity"&lt;/span&gt;
              &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;
              &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"quantity_input"&lt;/span&gt;
              &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;myState&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"quantity_plus"&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Increament"&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;incNumber&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; + &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"quantity_plus"&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Reset Count"&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resetNumber&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; Reset &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is how application is looking like : -&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8tqo_aMN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/51iq76kd0umaghb0xldl.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8tqo_aMN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/51iq76kd0umaghb0xldl.jpg" alt="Image description" width="880" height="277"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So this is how we can implement react-redux in our react application, Hopefully you find this tutorial helpful. Thank You.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>redux</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Determine Odd / Even Numbers using JavaScript</title>
      <author>SnowBit</author>
      <pubDate>Sat, 11 Dec 2021 14:07:11 +0000</pubDate>
      <link>https://dev.to/snowbit/determine-odd-even-numbers-using-javascript-1fgm</link>
      <guid>https://dev.to/snowbit/determine-odd-even-numbers-using-javascript-1fgm</guid>
      <description>&lt;p&gt;In this article, we are going to talk about numbers, odd and even numbers with some JavaScript.&lt;/p&gt;

&lt;p&gt;Let's gets started,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Choose a random number
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;As we know this number is &lt;strong&gt;even&lt;/strong&gt;, but let's check this with &lt;strong&gt;JavaScript&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; is an even number`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; is odd number`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;This gives the following output,
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// 24 is an even number&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is how you can determine &lt;strong&gt;odd / even&lt;/strong&gt; numbers using JavaScript.&lt;/p&gt;

&lt;p&gt;By the way, I have a tutorial on it so make sure to check that out&lt;/p&gt;




&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/07AlsKyqDbc"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>programming</category>
    </item>
    <item>
      <title>Adding an in-browser code preview to your React Application with Sandpack</title>
      <author>Anish De</author>
      <pubDate>Sat, 11 Dec 2021 13:20:59 +0000</pubDate>
      <link>https://dev.to/anishde12020/adding-an-in-browser-code-preview-to-your-react-application-with-sandpack-59dm</link>
      <guid>https://dev.to/anishde12020/adding-an-in-browser-code-preview-to-your-react-application-with-sandpack-59dm</guid>
      <description>&lt;p&gt;&lt;a href="https://sandpack.codesandbox.io/"&gt;Sandpack&lt;/a&gt; is a live coding environment that runs on the browser. It is made by the team behind &lt;a href="https://codesandbox.io/"&gt;CodeSandbox&lt;/a&gt;. The main objective here is to provide interactive examples to play around with, to users. I see it being widely used in things like blog posts and documentation (in fact the, work in progress, &lt;a href="https://beta.reactjs.org/learn"&gt;new React Docs&lt;/a&gt; is using Sandpack). In this article, we are going to look at how to add Sandpack to a React Application and then we will look at integrating it with &lt;a href="https://github.com/hashicorp/next-mdx-remote"&gt;Next MDX Remote&lt;/a&gt; in a NextJS Application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-sandpack-to-our-project"&gt;
  &lt;/a&gt;
  Adding Sandpack to our Project
&lt;/h2&gt;

&lt;p&gt;We are going to be adding Sandpack to a react application (made with &lt;a href="https://github.com/facebook/create-react-app"&gt;create react app&lt;/a&gt;) thought the process should be quite the same for NextJS or Gatsby. &lt;/p&gt;

&lt;p&gt;Create a starter react project and navigate into it -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-react-app sandpack-demo
&lt;span class="nb"&gt;cd &lt;/span&gt;sandpack-demo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note: Feel free to use the Yarn package manager if that is what you prefer.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now, let us install Sandpack&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; @codesandbox/sandpack-react
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That is it for dependencies, now let us move on to adding Sandpack to the application.&lt;/p&gt;

&lt;p&gt;Go ahead and delete &lt;code&gt;App.css&lt;/code&gt;,  &lt;code&gt;App.test.js&lt;/code&gt;, &lt;code&gt;setupTests.js&lt;/code&gt;, and &lt;code&gt;logo.svg&lt;/code&gt;. Also remove all the boilerplate code in &lt;code&gt;App.js&lt;/code&gt;. It should look like this -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let us import Sandpack in &lt;code&gt;App.js&lt;/code&gt; -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Sandpack&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@codesandbox/sandpack-react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@codesandbox/sandpack-react/dist/index.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we are also importing a CSS file that contains the styles for the editor and preview.&lt;/p&gt;

&lt;p&gt;We should also add the Sandpack component -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Sandpack&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That is it!!! Now let us start the dev server by running &lt;code&gt;npm start&lt;/code&gt;. Navigate to &lt;a href="http://localhost:3000/"&gt;http://localhost:3000/&lt;/a&gt; and this is what you should see - &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eaBPj0wO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639209440921/6ANlUGyU7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eaBPj0wO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639209440921/6ANlUGyU7.png" alt="image.png" width="880" height="497"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#custom-templates"&gt;
  &lt;/a&gt;
  Custom Templates
&lt;/h3&gt;

&lt;p&gt;The default template that Sandpack uses is vanilla js but we can also use other templates like react, vue, angular, etc. Let us see the react template in action. Just add the &lt;code&gt;template&lt;/code&gt; attribute and specify the value as &lt;code&gt;react&lt;/code&gt; -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Sandpack&lt;/span&gt; &lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Feel free to go through the &lt;a href="https://sandpack.codesandbox.io/docs/getting-started/custom-content"&gt;Sandpack Custom Content documentation&lt;/a&gt; for more templates and information on how to add your custom code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#custom-theme"&gt;
  &lt;/a&gt;
  Custom Theme
&lt;/h3&gt;

&lt;p&gt;We can also customize the theme. Let us look at adding a pre-built theme -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Sandpack&lt;/span&gt; &lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sandpack-dark&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is how the editor should look like - &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RVQhrw9h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639210107545/AhqKN0slh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RVQhrw9h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639210107545/AhqKN0slh.png" alt="image.png" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Feel free to go through the &lt;a href="https://sandpack.codesandbox.io/docs/getting-started/custom-ui"&gt;Sandpack Custom UI documentation&lt;/a&gt; for more themes and information on building your theme.&lt;/p&gt;

&lt;p&gt;At last, this is how our &lt;code&gt;App.js&lt;/code&gt; looks like -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Sandpack&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@codesandbox/sandpack-react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@codesandbox/sandpack-react/dist/index.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Sandpack&lt;/span&gt; &lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sandpack-dark&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, that was just getting started with Sandpack but now let us look at it being used in a more real world example. Feel free to go through the &lt;a href="https://sandpack.codesandbox.io/docs/"&gt;Sandpack documentation&lt;/a&gt; for more detailed guides and an API reference.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-sandpack-with-next-mdx-remote"&gt;
  &lt;/a&gt;
  Using Sandpack with Next MDX Remote
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/hashicorp/next-mdx-remote"&gt;Next MDX Remote&lt;/a&gt; is a library that parses MDX content (markdown but with support for JSX as well) and helps load them via &lt;code&gt;getStaticProps&lt;/code&gt; or &lt;code&gt;getServersideProps&lt;/code&gt; in NextJS. It is mainly used for documentation and blog posts. Today, we are going to be adding Next MDX Remote to a NextJS application and customize the code component by replacing it with Sandpack. First of all, let us make a new NextJS application and navigate into it -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-next-app sandpack-next-mdx-remote
&lt;span class="nb"&gt;cd &lt;/span&gt;sandpack-next-mdx-remote
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let us delete &lt;code&gt;Home.module.css&lt;/code&gt; under the &lt;code&gt;styles&lt;/code&gt; directory and remove the boilerplate code in &lt;code&gt;index.js&lt;/code&gt; under the &lt;code&gt;pages&lt;/code&gt; directory. This is how it should look like -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#adding-next-mdx-remote"&gt;
  &lt;/a&gt;
  Adding Next MDX Remote
&lt;/h3&gt;

&lt;p&gt;The next step is to add and setup Next MDX Remote so let us do that -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;next-mdx-remote
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let us go to &lt;code&gt;index.js&lt;/code&gt; and add the following code -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;serialize&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;next-mdx-remote/serialize&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;MDXRemote&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;next-mdx-remote&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;source&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;MDXRemote&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getStaticProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;source&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;```

html&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;h1&amp;gt;Hello World&amp;lt;/h1&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;

```&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mdxSource&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;serialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;mdxSource&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that I am just writing down some basic markdown with a code block. Usually, this markdown is sourced from external files and paired with frontmatter but that is not something I am going to go over in this article.&lt;/p&gt;

&lt;p&gt;Now let us start the development server by running &lt;code&gt;npm run dev&lt;/code&gt;. Upon navigating to &lt;a href="http://localhost:3000/"&gt;http://localhost:3000/&lt;/a&gt;, this is what our page should look like - &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NO0GJMby--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639212161614/eLQBXGSiy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NO0GJMby--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639212161614/eLQBXGSiy.png" alt="image.png" width="880" height="498"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note that a simple HTML &lt;code&gt;code&lt;/code&gt; element is being rendered now&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ODFWA7Or--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639212200694/GbuCJJR00.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ODFWA7Or--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639212200694/GbuCJJR00.png" alt="image.png" width="471" height="112"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, I could add syntax highlighting to this using &lt;a href="https://www.npmjs.com/package/remark-prism"&gt;remark prism&lt;/a&gt; but as we are anyways going to use Sandpack, let us move onto that instead.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adding-sandpack-to-next-mdx-remote"&gt;
  &lt;/a&gt;
  Adding Sandpack to Next MDX Remote
&lt;/h3&gt;

&lt;p&gt;First of all, let us install the Sandpack package -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; @codesandbox/sandpack-react
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let us create a directory called &lt;code&gt;components&lt;/code&gt; and add a file named &lt;code&gt;CustomMDXCode.js&lt;/code&gt; in there. Add the following code to that file -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Sandpack&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@codesandbox/sandpack-react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@codesandbox/sandpack-react/dist/index.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;CustomMDXCode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Sandpack&lt;/span&gt;
      &lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;`/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
    &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;CustomMDXCode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we are importing Sandpack, making a custom component, which is passed in some props. These props will contain the filename of the file, the template to use, and of course, the code. Note that we are adding a &lt;code&gt;/&lt;/code&gt; to the beginning of the filename through string interpolation as it is required by Sandpack. &lt;/p&gt;

&lt;p&gt;Now, let us go back to our &lt;code&gt;index.js&lt;/code&gt; file and make some changes to leverage the use of the new component -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;serialize&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;next-mdx-remote/serialize&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;MDXRemote&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;next-mdx-remote&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;CustomMDXCode&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../components/CustomMDXCode&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;source&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;MDXRemote&lt;/span&gt;
        &lt;span class="nx"&gt;components&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;code&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;CustomMDXCode&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&amp;gt; }&lt;/span&gt;&lt;span class="err"&gt;}
&lt;/span&gt;        &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getStaticProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;source&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;```

js template=react filename=App.js&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;export default function App() {&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;  return &amp;lt;h1&amp;gt;Just some text...&amp;lt;/h1&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;

```&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mdxSource&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;serialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;mdxSource&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we are adding a custom component for the code attribute (reference for all mdx components - &lt;a href="https://mdxjs.com/table-of-components/"&gt;https://mdxjs.com/table-of-components/&lt;/a&gt;), which is nothing but the Sandpack component we created earlier. We have also changed the markdown source to &lt;code&gt;javascript&lt;/code&gt;, added a &lt;code&gt;template&lt;/code&gt; attribute and pointed that to &lt;code&gt;react&lt;/code&gt;, added a &lt;code&gt;filename&lt;/code&gt; attribute and named the file &lt;code&gt;App.js&lt;/code&gt;, and wrote a simple function that displays some text for the code part.&lt;/p&gt;

&lt;p&gt;This is how our page should look like now - &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lyjGGD3D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639214269118/VUgIybb6A6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lyjGGD3D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639214269118/VUgIybb6A6.png" alt="image.png" width="880" height="496"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;That is it for this article. I hope you enjoyed it and learned how to add Sandpack to your react application. Feel free to comment on this post or reach out to me via &lt;a href="https://twitter.com/AnishDe12020"&gt;Twitter&lt;/a&gt; in case you have any questions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#links"&gt;
  &lt;/a&gt;
  Links
&lt;/h2&gt;

&lt;p&gt;Sandpack - &lt;a href="https://sandpack.codesandbox.io/"&gt;https://sandpack.codesandbox.io/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sanpack Documentation - &lt;a href="https://sandpack.codesandbox.io/docs/"&gt;https://sandpack.codesandbox.io/docs/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sandpack GitHub - &lt;a href="https://github.com/codesandbox/sandpack"&gt;https://github.com/codesandbox/sandpack&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next MDX Remote - &lt;a href="https://github.com/hashicorp/next-mdx-remote"&gt;https://github.com/hashicorp/next-mdx-remote&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All MDX Component - &lt;a href="https://mdxjs.com/table-of-components/"&gt;https://mdxjs.com/table-of-components/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
      <category>nextjs</category>
    </item>
    <item>
      <title>VS Code : Organization</title>
      <author>freeOne</author>
      <pubDate>Sat, 11 Dec 2021 13:07:46 +0000</pubDate>
      <link>https://dev.to/free_one/vs-code-organization-4p2j</link>
      <guid>https://dev.to/free_one/vs-code-organization-4p2j</guid>
      <description>&lt;p&gt;To manage your time and complete projects successfully, you must &lt;strong&gt;organize&lt;/strong&gt; your tasks as a developer. When you first decide to learn how to code, it's common to try out a variety of languages, code editors, IDEs, and other tools, making it difficult to keep track of your projects as a whole and &lt;em&gt;subfolders + files&lt;/em&gt; within those projects. This was a huge struggle for me as well. In just a over a year, I accumulated over a hundred tiny micro-projects. I also spent a lot of time quickly concatenating files together as projects. Luckily there are some very useful extensions that solve these problems.&lt;br&gt;
These VS Code extensions will assist you in becoming &lt;u&gt;more organized and productive&lt;/u&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you like my &lt;strong&gt;&lt;em&gt;Series&lt;/em&gt;&lt;/strong&gt;, make sure to click the ❤️ icon on every post and 🔖 bookmark to save for later 😄 .&lt;/p&gt;
&lt;/blockquote&gt;






&lt;h3&gt;
  &lt;a href="#1-project-dashboard"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://marketplace.visualstudio.com/items?itemName=kruemelkatze.vscode-dashboard"&gt;&lt;u&gt;Project Dashboard&lt;/u&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mdGo8XCN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lmascai7s0j92pn5rgyc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mdGo8XCN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lmascai7s0j92pn5rgyc.png" alt="Project Dashboard" width="880" height="352"&gt;&lt;/a&gt;&lt;br&gt;
Project Dashboard is a "plugin that allows you to manage your projects in a speed-dial style". To rapidly access commonly visited folders, files, and SSH remotes, pin them to a dashboard. The dashboard is a dedicated user interface that can be opened with &lt;code&gt;CMD / CTRL + F1&lt;/code&gt; and set to open automatically. &lt;code&gt;CMD / CTRL + Click&lt;/code&gt; launches a project in the current window.&lt;br&gt;
Surprisingly, it hasn't received as many downloads, which is quite shocking.&lt;br&gt;
Projects are organized into groups and can be color-coded to make them easier to find. The dashboard is used to manage the groups and projects.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If the &lt;u&gt;Project Dashboard&lt;/u&gt; isn't for you, the &lt;a href="https://marketplace.visualstudio.com/items?itemName=alefragnani.project-manager"&gt;Project Manager&lt;/a&gt; might be a better fit (although it isn't as intuitive).&lt;/p&gt;
&lt;/blockquote&gt;






&lt;h3&gt;
  &lt;a href="#2-todo-tree-amp-todo-highlight"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://marketplace.visualstudio.com/items?itemName=Gruntfuggly.todo-tree"&gt;&lt;u&gt;TODO TREE&lt;/u&gt;&lt;/a&gt; &amp;amp; &lt;a href="https://marketplace.visualstudio.com/items?itemName=wayou.vscode-todo-highlight"&gt;&lt;u&gt;TODO HIGHLIGHT&lt;/u&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;TODO TREE:&lt;/strong&gt; This extension quickly searches (&lt;em&gt;"using ripgrep"&lt;/em&gt;) your workspace for comment tags like &lt;strong&gt;TODO and FIXME&lt;/strong&gt;, and displays them in a tree view in the explorer pane. Clicking a TODO within the tree will open the file and put the cursor on the line containing the TODO.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lCePW9NT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rkambs4sre5kcf13l427.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lCePW9NT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rkambs4sre5kcf13l427.png" alt="todo tree vscode extension" width="880" height="388"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;TODO HIGHLIGHT:&lt;/strong&gt; Sometimes you forget to review the &lt;strong&gt;TODOs&lt;/strong&gt; you've added while coding before you publish the code to production. This an extension that highlights them and reminds you that there are &lt;em&gt;notes&lt;/em&gt; or things not done yet. Found &lt;em&gt;TODOs&lt;/em&gt; can also be highlighted in open files.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n11L0dDA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/epsj0ctyq2d8oprj22kp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n11L0dDA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/epsj0ctyq2d8oprj22kp.png" alt="todo highlight vscode extension" width="880" height="559"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;






&lt;h3&gt;
  &lt;a href="#3-bookmark"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://marketplace.visualstudio.com/items?itemName=alefragnani.Bookmarks"&gt;&lt;u&gt;BookMark&lt;/u&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mAZHEDzT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rdsedjukn9lrxmyd3etl.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mAZHEDzT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rdsedjukn9lrxmyd3etl.gif" alt="bookmark vscode extension" width="662" height="448"&gt;&lt;/a&gt;&lt;br&gt;
It helps you to &lt;strong&gt;navigate in your code&lt;/strong&gt;, moving between important positions easily and quickly. No more need to search for code. It also supports a set of selection commands, which allows you to select bookmarked lines and regions between bookmarked lines. It's really useful for &lt;strong&gt;log file analysis&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Here are some features "Bookmark" offers:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Mark/unmark positions in your code&lt;/li&gt;
&lt;li&gt;Mark positions in your code and give it name&lt;/li&gt;
&lt;li&gt;Jump forward and backward between bookmarks 🔖&lt;/li&gt;
&lt;li&gt;Icons in &lt;em&gt;gutter and overview ruler&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;See a list of all Bookmarks in one file and project&lt;/li&gt;
&lt;li&gt;A dedicated &lt;em&gt;Side Bar&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;






&lt;blockquote&gt;
&lt;p&gt;I would like some suggestions on many other Extensions which are tailored towards easier Project structure management ❤️. Drop a suggestion in the Comments section 👇...&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>vscode</category>
      <category>productivity</category>
      <category>webdev</category>
      <category>tooling</category>
    </item>
    <item>
      <title>10 useful Git tips to improve your workflow</title>
      <author>Jordan Soo Yen Yih</author>
      <pubDate>Sat, 11 Dec 2021 12:20:02 +0000</pubDate>
      <link>https://dev.to/yenyih/10-useful-git-tips-to-improve-your-workflow-kf1</link>
      <guid>https://dev.to/yenyih/10-useful-git-tips-to-improve-your-workflow-kf1</guid>
      <description>&lt;p&gt;&lt;a href="https://git-scm.com/"&gt;Git&lt;/a&gt; is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency. &lt;/p&gt;

&lt;p&gt;Whether you’re just getting started with Git, or you know your way around a command line, it’s always nice to brush up on your skills. Below I would like to share 10 useful Git tips to improve your Git-based workflow.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#1-git-aliases-%F0%9F%8F%B7"&gt;
  &lt;/a&gt;
  1. Git aliases 🏷
&lt;/h2&gt;

&lt;p&gt;Create your own aliases for common commands to save you some time in the terminal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git config --global alias.co checkout
git config --global alias.ci commit
git config --global alias.br branch
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Instead of typing &lt;code&gt;git checkout master&lt;/code&gt;, you only need to type &lt;code&gt;git co master&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You could also edit these commands or add more by modifying the &lt;code&gt;~/.gitconfig&lt;/code&gt; file directly:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[alias]
    co = checkout
    ci = commit
    br = branch
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-compare-commits-%E2%9A%96"&gt;
  &lt;/a&gt;
  2. Compare commits ⚖
&lt;/h2&gt;

&lt;p&gt;A simple way to compare the differences between commits or versions of the same file is to use the &lt;code&gt;git diff&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;If you want to compare the same file between different commits, you run the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git diff $start_commit..$end_commit -- path/to/file
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want to compare the changes between two commits:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git diff $start_commit..$end_commit
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These commands will open the diff view inside the terminal, but if you prefer to use a more visual tool to compare your diffs, you can use &lt;code&gt;git difftool&lt;/code&gt;. &lt;a href="https://meldmerge.org/"&gt;Meld&lt;/a&gt; is a useful viewer/editor to visually compare diffs.&lt;/p&gt;

&lt;p&gt;To configure Meld:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git config --global diff.tool git-meld
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To start viewing the diffs:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git difftool $start_commit..$end_commit -- path/to/file
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git difftool $start_commit..$end_commit
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-stashing-uncommitted-changes"&gt;
  &lt;/a&gt;
  3. Stashing uncommitted changes 🔖
&lt;/h2&gt;

&lt;p&gt;If you’re ever working on a feature and need to do an emergency fix on the project, you could run into a problem.😰 You don’t want to commit an unfinished feature, and you also don’t want to lose current changes. The solution is to temporarily remove these changes with the Git stash command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git stash
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The git stash command hides changes, giving you a clean working directory and the ability to switch to a new branch to make updates, without having to commit a meaningless snapshot in order to save the current state.&lt;/p&gt;

&lt;p&gt;Once you’re done working on a fix and want to revisit your previous changes, you can run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git stash pop
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And your changes will be recovered. 🎉&lt;/p&gt;

&lt;p&gt;If you no longer need those changes and want to clear the stash stack, you can do so with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git stash drop
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#4-pull-frequently"&gt;
  &lt;/a&gt;
  4. Pull frequently 📥
&lt;/h2&gt;

&lt;p&gt;In order to avoid major conflicts, you should frequently pull the changes from the master branch to your branch to resolve any conflicts as soon as possible and to make merging your branch to master easier.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-autocomplete-commands"&gt;
  &lt;/a&gt;
  5. Autocomplete commands 🤖
&lt;/h2&gt;

&lt;p&gt;Using &lt;a href="https://github.com/git/git/tree/master/contrib/completion"&gt;completion scripts&lt;/a&gt;, you can quickly create the commands for &lt;code&gt;bash&lt;/code&gt;, &lt;code&gt;tcsh&lt;/code&gt; and &lt;code&gt;zsh&lt;/code&gt;. If you want to type &lt;code&gt;git pull&lt;/code&gt;, you can type just the first letter with &lt;code&gt;git p&lt;/code&gt; followed by &lt;code&gt;Tab&lt;/code&gt; will show the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pack-objects   -- create packed archive of objects
pack-redundant -- find redundant pack files
pack-refs      -- pack heads and tags for efficient repository access
parse-remote   -- routines to help parsing remote repository access parameters
patch-id       -- compute unique ID for a patch
prune          -- prune all unreachable objects from the object database
prune-packed   -- remove extra objects that are already in pack files
pull           -- fetch from and merge with another repository or local branch
push           -- update remote refs along with associated objects
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To show all available commands, type &lt;code&gt;git&lt;/code&gt; in your terminal followed by &lt;code&gt;Tab&lt;/code&gt; + &lt;code&gt;Tab&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-set-a-global-raw-gitignore-endraw-"&gt;
  &lt;/a&gt;
  6. Set a global &lt;code&gt;.gitignore&lt;/code&gt; 🚫
&lt;/h2&gt;

&lt;p&gt;If you want to avoid committing files like &lt;code&gt;.DS_Store&lt;/code&gt; or Vim &lt;code&gt;swp&lt;/code&gt; files, you can set up a global &lt;code&gt;.gitignore&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Create the file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;touch ~/.gitignore
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git config --global core.excludesFile ~/.gitignore
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or manually add the following to your &lt;code&gt;~/.gitconfig&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[core]
  excludesFile = ~/.gitignore
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can create a list of the things you want Git to ignore. To learn more, visit the &lt;a href="https://git-scm.com/docs/gitignore"&gt;gitignore documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-delete-local-branches-that-have-been-removed-from-remote-on-fetchpull-%F0%9F%97%91"&gt;
  &lt;/a&gt;
  7. Delete local branches that have been removed from remote on fetch/pull 🗑
&lt;/h2&gt;

&lt;p&gt;You likely have stale branches in your local repository that no longer exist in the remote one. To delete them in each fetch/pull, run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git config --global fetch.prune true
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or manually add the following to your &lt;code&gt;~/.gitconfig&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[fetch]
  prune = true
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#8-use-git-blame-more-efficiently"&gt;
  &lt;/a&gt;
  8. Use Git blame more efficiently 🕵️‍♂️
&lt;/h2&gt;

&lt;p&gt;Git blame is a handy way to discover who changed a line in a file. Depending on what you want to show, you can pass different flags:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git blame -w  # ignores white space

git blame -M  # ignores moving text

git blame -C  # ignores moving text into other files
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#9-an-alias-of-raw-head-endraw-"&gt;
  &lt;/a&gt;
  9. An alias of &lt;code&gt;HEAD&lt;/code&gt; 👀
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;@&lt;/code&gt; is the same as &lt;code&gt;HEAD&lt;/code&gt;. Using it during a rebase is a lifesaver:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git rebase -i @~2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#10-resetting-files-%E2%86%A9"&gt;
  &lt;/a&gt;
  10. Resetting files ↩
&lt;/h2&gt;

&lt;p&gt;You’re modifying your code when you suddenly realize that the changes you made are not great, and you’d like to reset them. Rather than clicking undo on everything you edited, you can reset your files to the HEAD of the branch&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git reset --hard HEAD
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or if you want to reset a single file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git checkout HEAD -- path/to/file
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, if you already committed your changes, but still want to revert back, you can use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git reset --soft HEAD~1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#extras"&gt;
  &lt;/a&gt;
  Extras: ✨
&lt;/h2&gt;

&lt;p&gt;If you want to elevate Git with more commands, try out the &lt;a href="https://github.com/tj/git-extras"&gt;git-extras plugin&lt;/a&gt;, which includes &lt;code&gt;git info&lt;/code&gt; (show information about the repository) and &lt;code&gt;git effort&lt;/code&gt; (number of commits per file).&lt;/p&gt;

</description>
      <category>git</category>
      <category>beginners</category>
      <category>productivity</category>
    </item>
    <item>
      <title>How to do web development only on mobile</title>
      <author>SHUBHAM </author>
      <pubDate>Sat, 11 Dec 2021 12:18:50 +0000</pubDate>
      <link>https://dev.to/shubham_ingale/how-to-do-web-development-only-on-mobile-4ia3</link>
      <guid>https://dev.to/shubham_ingale/how-to-do-web-development-only-on-mobile-4ia3</guid>
      <description>&lt;p&gt;Hey there today I am sharing how I created &lt;a href="http://notableapp.github.io"&gt;boosted notes&lt;/a&gt; in mobile only. &lt;/p&gt;

&lt;h2 id="sharing-topics"&gt;Sharing topics&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Apps to use ( &lt;a href="#apps-to-use"&gt;@apps-to-use&lt;/a&gt; ) &lt;/li&gt;
&lt;li&gt;Console for mobile &lt;/li&gt;
&lt;li&gt;Hosting via mobiles&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id="apps-to-use"&gt;Apps to use&lt;/h2&gt;

&lt;p&gt;There are many code editors on mobile I'll share two of them. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Treb edit
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TharBvqN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://encrypted-tbn0.gstatic.com/images%3Fq%3Dtbn:ANd9GcQrsbFN6GFcEF51PDuOT7EoMSBDEKijhhShUA%26usqp%3DCAU" alt="TrebEdit app logo" width="512" height="512"&gt; 
Teb edit is best app to use for web development on mobile. 
PROS:-
Better syntax highlight
Better app experience
JavaScript console
CONS:-
No local server &lt;/li&gt;
&lt;li&gt;Spck
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dtvZFMLg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://encrypted-tbn0.gstatic.com/images%3Fq%3Dtbn:ANd9GcQ-RT3N4YlPB6P9CNAlsthNGNiiub5R1BDZIw%26usqp%3DCAU" alt="Spck code" width="512" height="512"&gt;
Spck is better to use if you are working with git.
PROS:-
Support git
Zip file extraction
Intellisense
Local server support
CONS:-
No better responsiveness.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id="console-in-mobile"&gt;console in mobile&lt;/h2&gt;

&lt;p&gt;You can use &lt;a href="https://github.com/liriliri/eruda"&gt;eruda console&lt;/a&gt; which is very simple to use in mobile.&lt;/p&gt;

&lt;h3 id="lets-try-it"&gt;Let's try it&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt; &lt;del&gt;First open any website on you browser&lt;/del&gt; (you've already opened this page)&lt;/li&gt;
&lt;li&gt; Enter following code in address bar&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;&lt;span class="hljs-attr"&gt;javascript&lt;/span&gt;:(&lt;span class="hljs-keyword"&gt;function&lt;/span&gt; (&lt;span class="hljs-params"&gt;&lt;/span&gt;) { &lt;span class="hljs-keyword"&gt;var&lt;/span&gt; script = &lt;span class="hljs-variable language_"&gt;document&lt;/span&gt;.&lt;span class="hljs-title function_"&gt;createElement&lt;/span&gt;(&lt;span class="hljs-string"&gt;'script'&lt;/span&gt;); script.&lt;span class="hljs-property"&gt;src&lt;/span&gt;=&lt;span class="hljs-string"&gt;"//cdn.jsdelivr.net/npm/eruda"&lt;/span&gt;; &lt;span class="hljs-variable language_"&gt;document&lt;/span&gt;.&lt;span class="hljs-property"&gt;body&lt;/span&gt;.&lt;span class="hljs-title function_"&gt;appendChild&lt;/span&gt;(script); script.&lt;span class="hljs-property"&gt;onload&lt;/span&gt; = &lt;span class="hljs-keyword"&gt;function&lt;/span&gt; (&lt;span class="hljs-params"&gt;&lt;/span&gt;) { eruda.&lt;span class="hljs-title function_"&gt;init&lt;/span&gt;() } })();&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id="demo-images-of-console"&gt;demo images of console&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--llFUgJKh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/SGI-CAPP-AT2/SGI-CAPP-AT2.github.io/main/blogs/How%2520to%2520do%2520web%2520development%2520only%2520on%2520mobile/eruda%2520console%2520button.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--llFUgJKh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/SGI-CAPP-AT2/SGI-CAPP-AT2.github.io/main/blogs/How%2520to%2520do%2520web%2520development%2520only%2520on%2520mobile/eruda%2520console%2520button.jpg" alt="image of eruda button" width="880" height="269"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GTQ9wD9l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/SGI-CAPP-AT2/SGI-CAPP-AT2.github.io/main/blogs/How%2520to%2520do%2520web%2520development%2520only%2520on%2520mobile/eruda%2520console%2520screenshot.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GTQ9wD9l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/SGI-CAPP-AT2/SGI-CAPP-AT2.github.io/main/blogs/How%2520to%2520do%2520web%2520development%2520only%2520on%2520mobile/eruda%2520console%2520screenshot.jpg" alt="image of console eruda" width="880" height="1455"&gt;&lt;/a&gt;&lt;/p&gt; 

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>android</category>
    </item>
    <item>
      <title>Everything about Programming, in One Place</title>
      <author>Arghya Sarkar</author>
      <pubDate>Sat, 11 Dec 2021 12:08:55 +0000</pubDate>
      <link>https://dev.to/arghyasarkar/everything-about-programming-in-one-place-2ej2</link>
      <guid>https://dev.to/arghyasarkar/everything-about-programming-in-one-place-2ej2</guid>
      <description>&lt;p&gt;As a programmer, or a CS enthusiast, or even a CS student, what are the most common stuff you do except writing code?&lt;/p&gt;

&lt;p&gt;Probably it's&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Searching up articles&lt;/li&gt;
&lt;li&gt;Looking for resources here and there&lt;/li&gt;
&lt;li&gt;Finding challenges to learn from&lt;/li&gt;
&lt;li&gt;To explore happenings of the computer science world&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In any of the cases, we can feel you. I know, it just sucks to find stuff out cuz that's time taking, it affects your productivity for sure. There's not always you find suitable stuff. Me for example, find the same challenges in most of the websites, very common ones. &lt;/p&gt;

&lt;p&gt;So this post is about a Newsletter. &lt;strong&gt;WAIT&lt;/strong&gt;, before fleeing off thinking I'm acting like a salesperson, c'mon, read the whole post then judge. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cs-voyager"&gt;
  &lt;/a&gt;
  CS Voyager
&lt;/h3&gt;

&lt;p&gt;After months of work, we are on our journey to making CS Voyager more awesome&lt;/p&gt;

&lt;p&gt;If you dont know what in world this &lt;strong&gt;CS Voyager&lt;/strong&gt; is, let me brief it.&lt;/p&gt;

&lt;p&gt;We believe that, In the near future many new CS domains and techs are going to emerge to revolutionize the world.To keep ourselves updated with these changing technologies, we (youth) should also have the latest skills in the field of CS, which in turn can help us contribute to digitizing our planet and being a CS-aware citizen in the world of technology.&lt;/p&gt;

&lt;p&gt;So, To keep the motivation and knowledge flowing, We have came us with an Idea of "CS Voyager"&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CS Voyager&lt;/strong&gt; is a monthly newsletter which will keep you updated with the latest happenings around the globe in the field of Computer Science &amp;amp; will provide focused knowledge specifically designed for CS enthusiasts. Just like a person who goes on voyages, our newsletter is on its voyage &amp;amp; shall explore a different part of CS and this evolving Technology era &amp;amp; present them in front of the reader.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-all-can-i-get"&gt;
  &lt;/a&gt;
  What all can I get?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;News and Latest Happenings&lt;/strong&gt;&lt;br&gt;
You will get the latest info about fascinating thing which has happened or is going to happen, in the field of CS around the globe recently.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Programming Tips and Tricks&lt;/strong&gt;&lt;br&gt;
You will be given few coding tips &amp;amp; tricks every month to improve the execution of your coding skills &amp;amp; may be to show off your friends...&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Games and CodeJams&lt;/strong&gt;&lt;br&gt;
Bored..? So here we are with some cool games through which you can relax yourself along in your journey of learning &amp;amp; exploring CS &amp;amp; CodeJams will help you to compete with your fellow learners to know your standings at the national level&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A lot to learn&lt;br&gt;
Various articles will be published on learning new skills and enriching your skills. You'll get a lot of fun stuff to explore and can get hands on with more resources without much searching.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fascinating Stories and Articles&lt;br&gt;
Stories About incidents that have happened recently in the field of CS, sometimes funny sometimes scandalous, which will make you a CS-Aware citizens &amp;amp; Fun activites will keep your motivation high to keep learning in this field.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#faq"&gt;
  &lt;/a&gt;
  FAQ
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#when-does-the-newsletter-get-updated"&gt;
  &lt;/a&gt;
  When does the newsletter get updated
&lt;/h4&gt;

&lt;p&gt;The newsletter is updated on the 7th of each month.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#why-should-you-read-cs-voyager"&gt;
  &lt;/a&gt;
  Why should you read CS Voyager?
&lt;/h4&gt;

&lt;p&gt;CS Voyager helps you to learn more about technology. We include articles on great inventions using technology which will help you learn more about the Computer Science field and will increase your curiosity and interest for learning more! It's not about school, it's not about limited access to education, it's totally about YOU&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#who-should-read-cs-voyager"&gt;
  &lt;/a&gt;
  Who should read CS Voyager?
&lt;/h4&gt;

&lt;p&gt;Are you interested in learning about Computer Science? Are you a technology enthusiast? Are you curious about inventions done with Computer Science? Then this website is the one for you! Go for it!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#subscribe-to-the-newsletter"&gt;
  &lt;/a&gt;
  Subscribe to the Newsletter
&lt;/h3&gt;

&lt;p&gt;Subscribing is as free as the Subscribe button in YouTube (without the Ads ofcourse)&lt;/p&gt;

&lt;p&gt;Just few simple steps!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Subscribe using &lt;a href="https://docs.google.com/forms/d/e/1FAIpQLSe6AqJ9IK7z16QmKeZ3REErG1QpH1ZkJGyrD_XyXVDQ69daJQ/viewform?pli=1"&gt;this form&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Referral Code: &lt;strong&gt;DEVTO&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Subscription is easy, just enter a few details and you are done!&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#write-for-csv"&gt;
  &lt;/a&gt;
  Write for CSV
&lt;/h4&gt;

&lt;p&gt;Wanna publish your article at the newsletter to make it reach hundreds of other people?&lt;/p&gt;

&lt;p&gt;Join us through &lt;a href="https://discord.gg/AkR6U7eF6S"&gt;discord&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OR&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Mail us at &lt;a href="mailto:computersciencevoyager@gmail.com"&gt;computersciencevoyager@gmail.com&lt;/a&gt; giving a brief about your article, how it will help people and attaching a link/file of your article&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#current-status"&gt;
  &lt;/a&gt;
  Current Status
&lt;/h3&gt;

&lt;p&gt;We have successfully published 2 editions of our newsletter, and are looking forward to our next one, which will arrive soon&lt;/p&gt;

&lt;p&gt;CS Voyager has crossed 100 subscribers!! Hence more than 100 people are now reading CS Voyager from around the world&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#contact-us"&gt;
  &lt;/a&gt;
  Contact Us
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Official Website:&lt;/strong&gt; &lt;a href="https://csvoyager.netlify.app/"&gt;https://csvoyager.netlify.app/&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Discord&lt;/strong&gt;: &lt;a href="https://discord.gg/AkR6U7eF6S"&gt;https://discord.gg/AkR6U7eF6S&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Mail&lt;/strong&gt;: &lt;a href="mailto:computersciencevoyager@gmail.com"&gt;computersciencevoyager@gmail.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As always, I'm open to feedback&lt;/p&gt;

&lt;p&gt;Thank You,&lt;/p&gt;

</description>
      <category>computerscience</category>
      <category>news</category>
      <category>ai</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Using Node.js for Backend Web Development in 2022</title>
      <author>Yuriy Luchaninov</author>
      <pubDate>Sat, 11 Dec 2021 11:55:29 +0000</pubDate>
      <link>https://dev.to/yuriyl/using-nodejs-for-backend-web-development-in-2022-4jo4</link>
      <guid>https://dev.to/yuriyl/using-nodejs-for-backend-web-development-in-2022-4jo4</guid>
      <description>&lt;p&gt;Developing modern software applications is an essential undertaking for any growing business. Fortunately, the ongoing advancements in application development technology have presented business owners and project managers with a plethora of options to choose from. However, the breadth of possible technologies available can be overwhelming. It’s important to choose the right tech stack for your business based on the objectives and priorities you have established.&lt;/p&gt;

&lt;p&gt;One such technology that is widely in use today is Node.js. As a modern application framework, Node.js has been adopted by many companies to build their backend tech stack. Its usage can be seen across industries as a popular option for server-side application development.&lt;/p&gt;

&lt;p&gt;The popularity of Node.js today is increasing exponentially. Node.js is currently in use by well-known companies like &lt;a href="https://netflixtechblog.com/making-netflix-com-faster-f95d15f2e972"&gt;Netflix&lt;/a&gt;, &lt;a href="https://eng.uber.com/uber-tech-stack-part-two/"&gt;Uber&lt;/a&gt;, &lt;a href="https://medium.com/paypal-tech/node-js-at-paypal-4e2d1d08ce4f"&gt;PayPal&lt;/a&gt;, &lt;a href="https://blog.twitter.com/engineering/en_us/topics/open-source/2017/how-we-built-twitter-lite"&gt;Twitter&lt;/a&gt;, and more. And among programmers, Node.js was ranked as the 6th most popular technology (though, this includes also Javascript, SQL and TypeScript, as they are used in Node.js development) according to &lt;a href="https://insights.stackoverflow.com/survey/2021#most-popular-technologies-language"&gt;StackOverflow’s 2021 Developer Survey&lt;/a&gt;, with over one-third of professional developers ranking it in the top.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--clGQzLCU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2aq00wx6emsf8speqtk1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--clGQzLCU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2aq00wx6emsf8speqtk1.jpg" alt="Top Languages 2021" width="880" height="516"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But what is Node.js? How does it work, and is it still relevant in today’s technological and business landscape? More importantly, why are so many big-name companies and professional developers using it? These are the questions we will answer in this article.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-nodejs-and-how-it-works"&gt;
  &lt;/a&gt;
  What is Node.js and How it Works
&lt;/h2&gt;

&lt;p&gt;In terms of application stacks, Node.js presents an interesting intersection of frontend and backend technologies. Built on JavaScript, which is traditionally a frontend, client-side web scripting language, Node.js extends the capabilities of JavaScript to run on the backend, server-side portion of a web application architecture, as well as for serverless architecture.&lt;/p&gt;

&lt;p&gt;Node.js does this by executing within its own runtime on the server. A good analogy to draw is the comparison between Node.js and Java, which also runs applications within their own runtime. The Node.js runtime is designed to be lightweight and efficient, with non-blocking I/O and a package manager to make building applications in the Node.js ecosystem even easier.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dzZeioQB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oqoyy92aw7biv661aww2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dzZeioQB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oqoyy92aw7biv661aww2.jpg" alt="How Node.js Works" width="880" height="516"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The package manager for Node.js is called npm. Its purpose is to serve as an index of libraries built by the Node.js community of developers which are easily shared and imported by other projects. These packages provide helpful solutions to common functions and code that simplify scaffolding new projects and improving old ones.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nodejs-frameworks-approaches"&gt;
  &lt;/a&gt;
  Node.js Frameworks / Approaches
&lt;/h2&gt;

&lt;p&gt;Even though Node.js itself is a powerful and versatile platform, there are frameworks/approaches that have built upon Node.js to improve it even further.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nestjs"&gt;
  &lt;/a&gt;
  NESTJS
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://docs.nestjs.com"&gt;NestJS&lt;/a&gt; is an open-source, extensible, and versatile Node.js framework which incorporates TypeScript (a superset of JavaScript which is a strongly typed programming language). It is built on an abstraction of other Node.js frameworks like Express and Fastify. This abstraction makes it easy to learn and get up to speed building projects.&lt;/p&gt;

&lt;p&gt;NestJS is built on the concepts of Modules, Providers, and Controllers. Modules are logical units of code organized together. Every application will have at least one root Module, but more can be built on top of that as the code is organized. Providers are abstractions of code that can be injected as dependencies. Controllers handle incoming requests from the client to perform application logic and return a response.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1gS2ZvKO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l5vq7j9bqf72xv261u5i.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1gS2ZvKO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l5vq7j9bqf72xv261u5i.jpg" alt="NestJS Architecture" width="880" height="516"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The NestJS framework is great for the advantages of TypeScript and the benefits of other abstracted frameworks. The ease of use and extensibility are good for developing applications around a microservice architecture as well. The framework provides a strict project structure and implies a team work of several programmers, which helps set up a less buggy development process.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#electron"&gt;
  &lt;/a&gt;
  ELECTRON
&lt;/h3&gt;

&lt;p&gt;JavaScript is primarily a language for web application development, so it makes sense that most of the frameworks built on it are also intended for the web. However, Electron combines the Chromium rendering engine and the Node.js runtime and allows the development of desktop applications using JavaScript.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.electronjs.org"&gt;Electron&lt;/a&gt; simplifies desktop application development by allowing programmers to write these apps in platform-agnostic web languages like HTML5 and CSS. It also makes the packaging and installation of these applications much easier.&lt;/p&gt;

&lt;p&gt;Electron is therefore good to consider when your business use requires a desktop application without the complexity and redundancy of developing native applications for different platforms. The Electron framework’s usage of web languages speeds up the development process and reduces the time to market for new products.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#deno"&gt;
  &lt;/a&gt;
  DENO
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://deno.land"&gt;Deno&lt;/a&gt; was released by the creator of Node.js in 2018 to address many of the problems Node.js developers and users had experienced. Specifically, these included addressing issues around security, modules, and compatibility.&lt;/p&gt;

&lt;p&gt;Like Node.js, the Deno runtime executes code in its own application. However, Deno programs are more secure in that the runtime executes within a sandbox, isolated from the underlying file system. This adds security that prevents attackers from “breaking out” of the executable runtime and gaining access to the server the code is running on.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x28Klyq5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/46d1o0pk05h6c1rc2c8f.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x28Klyq5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/46d1o0pk05h6c1rc2c8f.jpg" alt="Deno Sandboxing by Default" width="880" height="516"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Deno also eliminates the need for a centralized package manager system like Node.js’s npm. It does this by allowing modules to be imported directly by a URL and caching those modules in case the hosting URL is unavailable.&lt;/p&gt;

&lt;p&gt;Finally, Deno supports TypeScript and strives for enhanced browser compatibility. For these reasons, there are a &lt;a href="https://github.com/denoland/deno/wiki#companies-interested-in-deno"&gt;number of companies&lt;/a&gt; who are already expressing interest in adopting Deno for their own use cases, however you should keep in mind that it is not yet supported by the major cloud providers, so &lt;a href="https://github.com/denoland/deno_docker"&gt;Docker images&lt;/a&gt; should be used.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-use-nodejs"&gt;
  &lt;/a&gt;
  Why Use Node.js
&lt;/h2&gt;

&lt;p&gt;Node.js is an applicable solution for many different types of use cases. As a primarily server-side framework, Node.js lends itself to applications within the backend side of the technology stack. Below are a few of the instances when Node.js makes sense to use.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lightweight-fast-applications-with-realtime-communication"&gt;
  &lt;/a&gt;
  LIGHTWEIGHT, FAST APPLICATIONS WITH REAL-TIME COMMUNICATION
&lt;/h3&gt;

&lt;p&gt;Understanding the size of your product is essential for choosing the right technology to build it with. The flexible and efficient nature of Node.js lends itself to building small, fast, and scalable applications. Real-time applications like instant messaging and collaboration tools are one example of this. This, coupled with the fast synchronization abilities of Node.js also make it useful for event-based applications. Examples of these include applications that use WebSockets and WebRTC.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#serverless-and-microservice-architecture"&gt;
  &lt;/a&gt;
  SERVERLESS AND MICROSERVICE ARCHITECTURE
&lt;/h3&gt;

&lt;p&gt;Because of its flexibility, Node.js is very good for building both serverless and microservice-based applications. These design styles are both very popular for saving resources and efficiently managing application lifecycles.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.serverless.com"&gt;Serverless architecture&lt;/a&gt; is popular for its ability to save computing costs by only requiring the resources the application needs to run with no additional overhead. These applications are stateless and lightweight. This makes Node.js integration with serverless architecture a great combination. There are npm packages for serverless design, and building a serverless Node.js application works well with an overall microservice architecture in C2C and B2C use cases when the server load is volatile.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#internet-of-things"&gt;
  &lt;/a&gt;
  INTERNET OF THINGS
&lt;/h3&gt;

&lt;p&gt;Node.js is very good at handling simultaneous connections. Since IoT is built on many devices sending small messages that must be handled quickly, Node.js makes a good backend for these kinds of applications, providing serverless architecture and real-time communication support.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#audiovideo-processing"&gt;
  &lt;/a&gt;
  AUDIO/VIDEO PROCESSING
&lt;/h3&gt;

&lt;p&gt;Node.js handles asynchronous input and output much better than other technologies. So, when combined with external media tools, Node.js can be used as an option for processing and handling multimedia data. For example, a streaming setup can be easily configured using Node.js.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#rapid-development"&gt;
  &lt;/a&gt;
  RAPID DEVELOPMENT
&lt;/h3&gt;

&lt;p&gt;The ease of use that Node.js offers by being built on common web languages makes ramp-up times very minimal. New products can be built quickly and brought to market without delay. The amount of engineering resources required to do so is also reduced because of this.&lt;/p&gt;

&lt;p&gt;This &lt;a href="https://mobidev.biz/case-studies/node-js-web-development-online-workplace"&gt;case study&lt;/a&gt; shows how Node.js helps meet strict deadlines. The product, an online marketplace for hail damage repair contractors and clients, was set to be launched before the high season started. Choosing between PHP and Node.js, we decided to go with Node.js to meet both the functional requirements and deadlines. Using isomorphic architecture allowed us to reduce the development time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#integration-with-c-code"&gt;
  &lt;/a&gt;
  INTEGRATION WITH C++ CODE
&lt;/h3&gt;

&lt;p&gt;Node.js is able to seamlessly integrate with existing C++ libraries. This is because the Node.js runtime is essentially built on a C++ server that runs on the host node. That allows Node.js to quickly transmit data between C++ and application code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#comparing-nodejs-to-other-backend-technologies"&gt;
  &lt;/a&gt;
  Comparing Node.js to Other Backend Technologies
&lt;/h2&gt;

&lt;p&gt;It may seem confusing that Node.js is distinct from other technologies, and the differences between them might not be immediately apparent. After all, each framework is designed for a purpose. Below are some of the most common comparisons between Node.js and similar technologies.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nodejs-vs-java"&gt;
  &lt;/a&gt;
  Node.js vs Java
&lt;/h2&gt;

&lt;p&gt;It is common to compare Node.js to Java because each tool runs programs within its own runtime environment. However, that is where most of the similarities end. Java is a compiled, object-oriented programming language with syntax similar to C++. Java programs are typically large and costly to develop. In contrast, Node.js programs are lightweight and based on non-compiled web languages like JavaScript. It is also much more suited for I/O applications and efficient server-side handling of HTTP requests.&lt;/p&gt;

&lt;p&gt;So, even though Java and Node.js may share similarities in their runtime applications, their use cases are actually quite different. Due to the event loop, Node.js is more efficient when operating with I/O applications, whilst Java’s thread pool is more powerful for complex computations. However, we can leverage both as microservices in one project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nodejs-vs-python"&gt;
  &lt;/a&gt;
  Node.js vs Python
&lt;/h2&gt;

&lt;p&gt;Python is a widely popular programming language due to its simple syntax and easy usability. These make building new projects in Python very easy, which has led to its popularity and explains its similarity to Node.js. However, Python is another object-oriented language like Java. And even though it is interpreted (like JavaScript), its programs can consume large amounts of computing resources.&lt;/p&gt;

&lt;p&gt;It is however useful in big projects for areas like AI and math-heavy simulations, which are not areas that Node.js is useful for. Python’s libraries make it easier to build the application logic, however its architecture makes performance challenging and requires a highly skilled programmer involvement.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when-not-to-use-nodejs"&gt;
  &lt;/a&gt;
  When NOT to Use Node.js
&lt;/h2&gt;

&lt;p&gt;What are the cases when Node.js should not be used?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#developing-financial-software"&gt;
  &lt;/a&gt;
  DEVELOPING FINANCIAL SOFTWARE
&lt;/h3&gt;

&lt;p&gt;Unfortunately, the financial sphere is the single sphere where Node.js is definitely not recommended because of the specifics of work with the floating decimal point—it can lead to accumulation of errors in variables that deal with finances, which is unacceptable. There are tools that allow you to build logic with high-precision calculations; however, all of them have drawbacks and must be used wisely. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#application-with-complex-cpu-calculations"&gt;
  &lt;/a&gt;
  APPLICATION WITH COMPLEX CPU CALCULATIONS
&lt;/h3&gt;

&lt;p&gt;Node.js is not the best solution when it comes to work with highly loaded threads that involve CPU. A good example is when audio and video processing is written on the back end—as opposed to the abovementioned recommended use of external processing tools, e.g. either ffmpeg / imagemagic or external libraries of C++ or Go.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nodejs-trends-in-2022-and-beyond"&gt;
  &lt;/a&gt;
  Node.js Trends in 2022 and Beyond
&lt;/h2&gt;

&lt;p&gt;The domination of Node.js as a popular backend technology is well established. And with current adoption by &lt;a href="https://javascript.plainenglish.io/top-node-js-trends-that-will-dominate-in-2021-73dbc40e9c26"&gt;over 20 million websites&lt;/a&gt;, Node.js is sure to remain in use for the foreseeable future. But looking into 2022 and beyond, how will that popularity evolve?&lt;/p&gt;

&lt;p&gt;The advent of Deno as an alternative to Node.js is one trend that looks to continue. The improvements to security and compatibility that Deno offers are much needed as more businesses expand into web technology. Along with Deno, NestJS is gaining adoption thanks to its extensibility and modularity that make it flexible for growing apps.&lt;/p&gt;

&lt;p&gt;The need for scalability is boosted by a widespread shift to serverless and microservice application design. These small, lightweight architectural styles are much different from the large monoliths of traditional software design. Lightweight applications are cheaper and easier to build, and their reactiveness makes them ideal for real-time applications and IoT.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrap-up"&gt;
  &lt;/a&gt;
  Wrap Up
&lt;/h2&gt;

&lt;p&gt;In summary, the number of use cases for Node.js is already large and continuing to grow as advancements in other technical areas can apply to Node.js as well. There are no indications that this growth will slow any time soon. So with the proper research and the right use cases, Node.js can be an excellent choice for building many different types of products now and in the future.&lt;/p&gt;

&lt;p&gt;There are no “good” or “bad” technologies as such. Each one is good for its particular set of tasks. Every software product owner has to identify the most important criteria of choice, according to business goals and existing constraints—and after that, the choice will be much more obvious.&lt;/p&gt;

&lt;p&gt;If you have any specific questions regarding your own project, feel free to ask!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>node</category>
      <category>javascript</category>
      <category>python</category>
    </item>
    <item>
      <title>Higher-Order Array Functions forEach, map and filter</title>
      <author>Anil Seervi</author>
      <pubDate>Sat, 11 Dec 2021 11:27:06 +0000</pubDate>
      <link>https://dev.to/anilseervi/higher-order-array-function-foreach-map-and-filter-f64</link>
      <guid>https://dev.to/anilseervi/higher-order-array-function-foreach-map-and-filter-f64</guid>
      <description>&lt;p&gt;Array methods such as &lt;code&gt;forEach()&lt;/code&gt;, &lt;code&gt;map()&lt;/code&gt; and &lt;code&gt;filter()&lt;/code&gt; are some of the &lt;em&gt;Higher Order &lt;strong&gt;Array&lt;/strong&gt; Functions&lt;/em&gt; that come in very handy when you have to work with data that's in an Array.&lt;/p&gt;

&lt;p&gt;In this article we'll be discussing the following Higher-Order Functions, with examples :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;forEach()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;map()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;filter()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I'll be assuming that you have a basic understanding of what &lt;em&gt;Higher-Order Functions&lt;/em&gt; are and how to work with them, &lt;strong&gt;if not&lt;/strong&gt;, I recommend you read my previous article on it.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/anilseervi" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yQfVL4JM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--chCiyP9_--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/727026/0a94299f-f08f-4ec7-b3ca-6ac1e1145e44.png" alt="anilseervi"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/anilseervi/what-are-higher-order-functions-3p0p" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Understanding Higher Order Functions in JavaScript.&lt;/h2&gt;
      &lt;h3&gt;Anil Seervi ・ Dec 4 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#functions&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#es6&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;h2&gt;
  &lt;a href="#-raw-arrayforeach-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;Array.forEach()&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;forEach()&lt;/code&gt; method is very useful to perform certain operation(s) for every element in the Array.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;forEach()&lt;/code&gt; method on an Array executes the provided &lt;em&gt;callback function&lt;/em&gt; for each element in the array in ascending index(starting 0).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;callbackFn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="cm"&gt;/* ... */&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#parameters"&gt;
  &lt;/a&gt;
  Parameters
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;callbackFn&lt;/code&gt;&lt;br&gt;
Function to execute on each element. It accepts one to three arguments :&lt;/p&gt;

&lt;p&gt;&lt;code&gt;element&lt;/code&gt; : The current element being processed in the array.&lt;br&gt;
&lt;code&gt;index&lt;/code&gt; (&lt;em&gt;optional&lt;/em&gt;) : The index of &lt;code&gt;element&lt;/code&gt; in array.&lt;br&gt;
&lt;code&gt;array&lt;/code&gt; (&lt;em&gt;optional&lt;/em&gt;) : The array on which &lt;code&gt;forEach()&lt;/code&gt; was called upon.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;forEach()&lt;/code&gt; method doesn't return anything : &lt;code&gt;undefined&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you look at the signature of the callback function in this method, it looks similar to the &lt;code&gt;forEach()&lt;/code&gt; function that I created in the previous &lt;strong&gt;Higher-Order Functions&lt;/strong&gt; article.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/anilseervi" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yQfVL4JM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--chCiyP9_--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/727026/0a94299f-f08f-4ec7-b3ca-6ac1e1145e44.png" alt="anilseervi"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/anilseervi/what-are-higher-order-functions-3p0p" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Understanding Higher Order Functions in JavaScript.&lt;/h2&gt;
      &lt;h3&gt;Anil Seervi ・ Dec 4 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#functions&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#es6&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  Examples
&lt;/h3&gt;

&lt;p&gt;Let's recreate the same example now using the &lt;code&gt;Array.forEach()&lt;/code&gt; method :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;numbs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;                 &lt;span class="c1"&gt;// Array of numbers&lt;/span&gt;

&lt;span class="nx"&gt;numbs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;              &lt;span class="c1"&gt;// n =&amp;gt; element, i =&amp;gt; index, arr =&amp;gt; array(numbs)&lt;/span&gt;
 &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;                             &lt;span class="c1"&gt;// add 2 to current element&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;numbs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;        &lt;span class="c1"&gt;// logs all element one-by-one&lt;/span&gt;
&lt;span class="c1"&gt;// 7&lt;/span&gt;
&lt;span class="c1"&gt;// 11&lt;/span&gt;
&lt;span class="c1"&gt;// 12&lt;/span&gt;
&lt;span class="c1"&gt;// 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As the &lt;code&gt;forEach()&lt;/code&gt; is a method on the array itself, we can call it on any array using the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors#dot_notation"&gt;&lt;em&gt;dot notation&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the above example we've called &lt;code&gt;Array.forEach()&lt;/code&gt; &lt;em&gt;Higher-Order function&lt;/em&gt; twice with arrow functions as callbacks, defined right withing &lt;code&gt;forEach()&lt;/code&gt;'s parameters.&lt;/p&gt;




&lt;p&gt;Say we have an Array of full names and you are required to separate all the full names into &lt;code&gt;firstName&lt;/code&gt; and &lt;code&gt;lastName&lt;/code&gt; of an object and push them into an array that already contains same kind-of data. How'd you do it?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fullNames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Adam Benson&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Clare Donaldson&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Ben Adams&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Donald Clarkson&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's how you can use the &lt;code&gt;forEach()&lt;/code&gt; to push objects containing &lt;code&gt;firstName&lt;/code&gt; and &lt;code&gt;lastName&lt;/code&gt; property to the &lt;code&gt;names&lt;/code&gt; array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Anil&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Seervi&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="nx"&gt;fullNames&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;                             &lt;span class="c1"&gt;// empty object for initialization&lt;/span&gt;
 &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="s2"&gt;` `&lt;/span&gt; &lt;span class="c1"&gt;// split at spaces and destructure initialize&lt;/span&gt;
 &lt;span class="nx"&gt;names&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                            &lt;span class="c1"&gt;// push the object to names array&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;names&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="cm"&gt;/*
[
  { firstName: 'Anil', lastName: 'Seervi' }
  { firstName: 'Adam', lastName: 'Benson' },
  { firstName: 'Clare', lastName: 'Donaldson' },
  { firstName: 'Ben', lastName: 'Adams' },
  { firstName: 'Donald', lastName: 'Clarkson' }
]
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example, within our callback, we create an empty object &lt;code&gt;obj&lt;/code&gt; to store the properties. Then we split the current element of the array at spaces, destructure it right away storing it to properties &lt;code&gt;firstName&lt;/code&gt; and &lt;code&gt;lastName&lt;/code&gt; in the object &lt;code&gt;obj&lt;/code&gt;. At last we push the object into the &lt;code&gt;names&lt;/code&gt; array.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#-raw-arraymap-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;Array.map()&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Array.map()&lt;/code&gt; method comes very handy when you have to create a new array from executing a certain function on an existing array.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Array.map()&lt;/code&gt; method on an Array returns a new array populated with the return value of the &lt;em&gt;callback function&lt;/em&gt; called for every element in an array in ascending index(starting 0).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;callbackFn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="cm"&gt;/* ... */&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// returns a new array populated with results of callbackFn&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#parameters"&gt;
  &lt;/a&gt;
  Parameters
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;callbackFn&lt;/code&gt;&lt;br&gt;
Function to execute on each element of &lt;code&gt;arr&lt;/code&gt;. Each time &lt;code&gt;callbackFn&lt;/code&gt; executes, the return value is added to the &lt;code&gt;newArray&lt;/code&gt;.&lt;br&gt;
It accepts one to three arguments :&lt;/p&gt;

&lt;p&gt;&lt;code&gt;element&lt;/code&gt; : The current element being processed in the array.&lt;br&gt;
&lt;code&gt;index&lt;/code&gt; (&lt;em&gt;optional&lt;/em&gt;) : The index of &lt;code&gt;element&lt;/code&gt; in array.&lt;br&gt;
&lt;code&gt;array&lt;/code&gt; (&lt;em&gt;optional&lt;/em&gt;) : The array on which &lt;code&gt;map()&lt;/code&gt; was called upon.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#return-value"&gt;
  &lt;/a&gt;
  Return value
&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;map()&lt;/code&gt; method returns a &lt;strong&gt;new Array&lt;/strong&gt; with each element being the result of the callback function.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  Examples
&lt;/h3&gt;

&lt;p&gt;Let's assume we are given the following array and are told to produce another array of consisting of the sqaures of all the respective elements.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;numbs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;     &lt;span class="c1"&gt;// our boring array of numbers&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The easiest way to do this will be by using the &lt;code&gt;Array.map()&lt;/code&gt; method :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;squares&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;numbs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Yes, its easy as that!!&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numbs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// [ 5, 9, 10, 1 ]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sqaures&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// [ 25, 81, 100, 1 ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That was so easy right. All we need to do is to call the &lt;code&gt;map()&lt;/code&gt; method on our &lt;code&gt;numbs&lt;/code&gt; array and return the square of the current element within it for our logic. As the &lt;code&gt;map()&lt;/code&gt; method itself returns a new Array, we store it in the variable &lt;code&gt;sqaures&lt;/code&gt;.&lt;/p&gt;




&lt;p&gt;Now let's look at another example where we'll convert an array of objects with &lt;code&gt;firstName&lt;/code&gt; and &lt;code&gt;lastName&lt;/code&gt; properties that we got as our output in the &lt;a href="//#Array.forEach()"&gt;&lt;code&gt;forEach()&lt;/code&gt;&lt;/a&gt; and create another array which will consist of only full names. Kinda the reverse of what we did in &lt;code&gt;forEach()&lt;/code&gt; example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// array of objects with firstName and lastName&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
 &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Anil&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
 &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Adam&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Benson&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
 &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Clare&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Donaldson&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
 &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Ben&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Adams&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
 &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Donald&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Clarkson&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;// create a new Array of fullNames using names Array&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fullNames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;names&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;full_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;full_name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;trimEnd&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fullNames&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// [ 'Anil', 'Adam Benson', 'Clare Donaldson', 'Ben Adams', 'Donald Clarkson' ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Above, the first thing you'll notice while looking at the example is we don't have &lt;code&gt;lastName&lt;/code&gt; property for my name and our logic will have to handle that too.&lt;/p&gt;

&lt;p&gt;Within the callback of our &lt;code&gt;map()&lt;/code&gt; method we are using template literals to concatenate &lt;code&gt;firstName&lt;/code&gt; and &lt;code&gt;lastName&lt;/code&gt;(if any: using optional chaining) to form the &lt;code&gt;full_name&lt;/code&gt;. And returning trimmed &lt;code&gt;full_name&lt;/code&gt; from the callback.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-arrayfilter-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;Array.filter()&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;As the name implies, this method is used to filter out the array which meets a certain condition.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Array.filter()&lt;/code&gt; method on the Array returns an new Array with only the elements that pass the test condition within the &lt;em&gt;callback function&lt;/em&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;callbackFn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="cm"&gt;/* ... */&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="c1"&gt;// returns a new array with elements that satisfy the callback condition.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#parameters"&gt;
  &lt;/a&gt;
  Parameters
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;callbackFn&lt;/code&gt;&lt;br&gt;
Function is a predicate to execute on each element of &lt;code&gt;arr&lt;/code&gt;. Each time &lt;code&gt;callbackFn&lt;/code&gt; is called, only the &lt;code&gt;element&lt;/code&gt;'s that coerce to &lt;code&gt;true&lt;/code&gt; are added into the new Array.&lt;br&gt;
It accepts one to three arguments :&lt;/p&gt;

&lt;p&gt;&lt;code&gt;element&lt;/code&gt; : The current element being processed in the array.&lt;br&gt;
&lt;code&gt;index&lt;/code&gt; (&lt;em&gt;optional&lt;/em&gt;) : The index of &lt;code&gt;element&lt;/code&gt; in array.&lt;br&gt;
&lt;code&gt;array&lt;/code&gt; (&lt;em&gt;optional&lt;/em&gt;) : The array on which &lt;code&gt;filter()&lt;/code&gt; was called upon.&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#return-value"&gt;
  &lt;/a&gt;
  Return Value
&lt;/h5&gt;

&lt;p&gt;The &lt;code&gt;filter()&lt;/code&gt; method returns a &lt;strong&gt;new Array&lt;/strong&gt; with only the elements that satisfy the test condition in the &lt;code&gt;callbackFn&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  Examples
&lt;/h3&gt;

&lt;p&gt;To keep it easier to understand I'm taking our same old &lt;code&gt;numbs&lt;/code&gt; array to work on.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;numbs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;       &lt;span class="c1"&gt;// hey, I'm bigger this time :)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;lets pose a couple question so to &lt;code&gt;filter&lt;/code&gt; our boring array.&lt;/p&gt;

&lt;p&gt;Q1. &lt;em&gt;Obtain an array of &lt;strong&gt;Odd Numbers&lt;/strong&gt; from &lt;code&gt;numbs&lt;/code&gt;&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;odd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;numbs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;odd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// [ 5, 9, 1, 3]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Within the callback, we return true only for &lt;em&gt;odd&lt;/em&gt; numbers in our array which in-turn returns all odd numbers in our &lt;code&gt;numbs&lt;/code&gt; array.&lt;/p&gt;

&lt;p&gt;Q2. &lt;em&gt;Obtain an array of &lt;strong&gt;Prime Numbers&lt;/strong&gt; from &lt;code&gt;numbs&lt;/code&gt;&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;isPrime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numb&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numb&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;numb&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numbs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isPrime&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;// [ 5, 3 ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here &lt;code&gt;isPrime&lt;/code&gt; is our callback for &lt;code&gt;filter&lt;/code&gt; method which gets called with every element in &lt;code&gt;numbs&lt;/code&gt; and acts as our condition to filter out numbers that are &lt;em&gt;prime&lt;/em&gt;.&lt;/p&gt;




&lt;p&gt;Below is a composite example of both &lt;code&gt;map()&lt;/code&gt; and &lt;code&gt;filter()&lt;/code&gt; methods. I'm going to create an Array that'll contain names of my GitHub Repos which are majorly written with &lt;strong&gt;SCSS&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The example is an &lt;em&gt;async&lt;/em&gt; &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/IIFE"&gt;&lt;code&gt;IIFE&lt;/code&gt;(Immediately Invoked Function Expression)&lt;/a&gt; Function that'll get &lt;em&gt;called as soon as it's defined&lt;/em&gt;. Within our async function, I'm fetching the data related to my GitHub repos in JSON format using GitHub's REST API.&lt;/p&gt;

&lt;p&gt;The API returns an Array of Objects that contain information about my public GitHub repositories listed alphabetically. You can see the response of the API by visiting the below URL:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Maximum of 30 repos: &lt;a href="https://api.github.com/users/AnilSeervi/repos"&gt;https://api.github.com/users/AnilSeervi/repos&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;All the repos : &lt;a href="https://api.github.com/users/anilseervi/repos?per_page=100"&gt;https://api.github.com/users/anilseervi/repos?per_page=100&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;The API only returns a maximum of 30 repos without any query parameters.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;jsRepos&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://api.github.com/users/AnilSeervi/repos?per_page=100&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c1"&gt;// fetch the JSON from API&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;                                      &lt;span class="c1"&gt;// parse JSON to JavaScript Object&lt;/span&gt;

 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;filterJSRepos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;language&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;SCSS&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;      &lt;span class="c1"&gt;// filter the Repos based on language&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;repoNames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;filterReposData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                 &lt;span class="c1"&gt;// Create an array of filtered Repo names&lt;/span&gt;

 &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;repoNames&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="c1"&gt;// ['DevFolio', 'mdn-minimalist', 'ts-portfolio']&lt;/span&gt;
&lt;span class="p"&gt;})()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The response(in JSON) fetched from the &lt;strong&gt;URL&lt;/strong&gt; is stored in &lt;code&gt;res&lt;/code&gt; and then converted to a JavaScript Object that is stored in &lt;code&gt;data&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: The names and number of repos may change based on the time you are reading this.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now we have an Array of objects of all the repos which we need to be filtered based on the &lt;code&gt;language&lt;/code&gt; property. Objects whose language property is &lt;code&gt;SCSS&lt;/code&gt; are filtered into &lt;code&gt;filterJSRepos&lt;/code&gt; constant.&lt;/p&gt;

&lt;p&gt;After filtering the Repos, we can now grab just the &lt;code&gt;name&lt;/code&gt; property of the filtered Repos using &lt;code&gt;map()&lt;/code&gt; and &lt;em&gt;voila&lt;/em&gt;, there's our array that contains the names of my repos those majorly contain &lt;strong&gt;SCSS&lt;/strong&gt;.&lt;/p&gt;




&lt;p&gt;I hope this article helped you understand the &lt;strong&gt;Higher-Order Array Functions&lt;/strong&gt;(&lt;code&gt;forEach()&lt;/code&gt;, &lt;code&gt;map()&lt;/code&gt;, &lt;code&gt;filter()&lt;/code&gt;).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to ask questions and leave any comments down here and, let's connect on &lt;a href="https://twitter.com/linASeervi"&gt;Twitter!&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>tutorial</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Day 60 of 100 Days of Code &amp; Scrum: Ninth Weekly Retrospective</title>
      <author>Rammina</author>
      <pubDate>Sat, 11 Dec 2021 11:25:06 +0000</pubDate>
      <link>https://dev.to/rammina/day-60-of-100-days-of-code-scrum-ninth-weekly-retrospective-17f9</link>
      <guid>https://dev.to/rammina/day-60-of-100-days-of-code-scrum-ninth-weekly-retrospective-17f9</guid>
      <description>&lt;p&gt;Happy weekend, everyone!&lt;/p&gt;

&lt;p&gt;This week is also one of the least productive ones in this challenge. However, I'm pretty satisfied with how my professional blog is heading towards, so that kind of evens it out. I'm hoping that the next week is productive, because the Christmas holiday getting closer.&lt;/p&gt;

&lt;p&gt;Let's move on to my weekly retrospective!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#weekly-sprint-goals"&gt;
  &lt;/a&gt;
  Weekly Sprint Goals
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;code my blog's Next.js frontend.&lt;/li&gt;
&lt;li&gt;setup Ghost headless CMS.&lt;/li&gt;
&lt;li&gt;have the frontend communicate with Ghost Content API.&lt;/li&gt;
&lt;li&gt;fix the bugs in my company website.&lt;/li&gt;
&lt;li&gt;continue to learn Next.js and Typescript by using concepts while I build my blog or maybe just from reading documentations.&lt;/li&gt;
&lt;li&gt;continue studying for Professional Scrum Master I (PSM I) certification.&lt;/li&gt;
&lt;li&gt;continue networking.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#weekly-review"&gt;
  &lt;/a&gt;
  Weekly Review
&lt;/h2&gt;

&lt;p&gt;Here are the things I've managed to do:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;connected the &lt;a href="https://www.rammina.com/"&gt;Rammina development blog&lt;/a&gt;'s Next.js frontend with GhostContentAPI.&lt;/li&gt;
&lt;li&gt;setup Ghost headless CMS.&lt;/li&gt;
&lt;li&gt;style the blog homepage, as well as a specific blog post's page.&lt;/li&gt;
&lt;li&gt;fix some of the bugs in my company website.&lt;/li&gt;
&lt;li&gt;learned more about Next.js, GhostContentAPI, and Typescript while working on the blog.&lt;/li&gt;
&lt;li&gt;continue my studies for PSM I (not by much).&lt;/li&gt;
&lt;li&gt;expanded my network.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#weekly-retrospective"&gt;
  &lt;/a&gt;
  Weekly Retrospective
&lt;/h2&gt;

&lt;p&gt;Moving on, let's tackle what I've managed to do well, what my shortcomings are, and what I could do better next time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-went-great"&gt;
  &lt;/a&gt;
  What Went Great
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;I finally got my professional blog working.&lt;/li&gt;
&lt;li&gt;learn plenty regarding Ghost and Next.js.&lt;/li&gt;
&lt;li&gt;discovered a little bit more about Typescript.&lt;/li&gt;
&lt;li&gt;expanded my network a little bit more.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#some-mistakes-ive-made"&gt;
  &lt;/a&gt;
  Some Mistakes I've Made
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;I still had days where I didn't code at all.&lt;/li&gt;
&lt;li&gt;I pretty much neglected studying Typescript and Scrum.&lt;/li&gt;
&lt;li&gt;got distracted at times and couldn't focus much.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#things-i-could-improve-on"&gt;
  &lt;/a&gt;
  Things I Could Improve On
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;learn a little bit even if it's not much, on bad days.&lt;/li&gt;
&lt;li&gt;be more disciplined with learning new things every day.&lt;/li&gt;
&lt;li&gt;prioritize tasks that are more likely to help me meet my weekly goals.&lt;/li&gt;
&lt;li&gt;try to automate the things I don't really have to do myself.&lt;/li&gt;
&lt;li&gt;make some of my chores a lot easier to do in terms of workflow.&lt;/li&gt;
&lt;li&gt;I should DEFINITELY install something that blocks me from checking certain sites at a specific time.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#resourcesrecommended-readings"&gt;
  &lt;/a&gt;
  Resources/Recommended Readings
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.creative-tim.com/blog/web-design/free-open-source-ghost-themes/"&gt;10+ Free and Open-Source Ghost Themes for 2021&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://reactjs.org/docs/dom-elements.html#dangerouslysetinnerhtml"&gt;dangerouslySetInnerHTML | React documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ghost.org/docs/content-api/"&gt;Content API | Ghost&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nextjs.org/learn/excel/typescript/nextjs-types"&gt;Next.js Specific Types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.typescriptlang.org/docs/handbook/intro.html"&gt;The Typescript Handbook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://scrumguides.org/scrum-guide.html"&gt;The 2020 Scrum Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mlapshin.com/index.php/scrum-quizzes/"&gt;Mikhail Lapshin's Scrum Quizzes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thank you for the support, everyone! Enjoy your weekend!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9gNNIpK9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9ayfxxxaz2g2hfcqbsk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9gNNIpK9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9ayfxxxaz2g2hfcqbsk.png" alt="Rammina Thank You Banner" width="880" height="293"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  DISCLAIMER
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;This is not a guide&lt;/strong&gt;, it is just me sharing my experiences and learnings. This post only expresses my thoughts and opinions (based on my limited knowledge) and is in no way a substitute for actual references. If I ever make a mistake or if you disagree, I would appreciate corrections in the comments!&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#other-media"&gt;
  &lt;/a&gt;
  Other Media
&lt;/h3&gt;

&lt;p&gt;Feel free to reach out to me in other media!&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;a href="https://www.rammina.com/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BK-zilS2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/rammina/image/upload/v1638444046/rammina-button-128_x9ginu.png" alt="Rammina Logo" width="128" height="50"&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;a href="https://twitter.com/RamminaR"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C341ckO3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/rammina/image/upload/v1636792959/twitter-logo_laoyfu_pdbagm.png" alt="Twitter logo" width="128" height="50"&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;a href="https://github.com/Rammina"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u4ZlXeay--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/rammina/image/upload/v1636795051/GitHub-Emblem2_epcp8r.png" alt="Github logo" width="128" height="50"&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>productivity</category>
    </item>
  </channel>
</rss>
