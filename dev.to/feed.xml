<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Dropzone UI: the new way of providing Drag and Drop File Uploads in React app.</title>
      <author>Jin Jose Manuel</author>
      <pubDate>Sun, 26 Sep 2021 03:51:42 +0000</pubDate>
      <link>https://dev.to/jinssj3/dropzone-ui-the-new-way-of-providing-drag-and-drop-file-uploads-in-react-app-5djd</link>
      <guid>https://dev.to/jinssj3/dropzone-ui-the-new-way-of-providing-drag-and-drop-file-uploads-in-react-app-5djd</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://www.npmjs.com/package/dropzone-ui"&gt;Dropzone UI&lt;/a&gt; is a complete set of react components that allows developers to spend less time in coding a drag and drop zone for file uploads.&lt;/p&gt;

&lt;p&gt;In standard HTML5 you can perform file uploads through &lt;br&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file"&gt;&amp;lt;input type="file"&amp;gt;&lt;/a&gt;. Additionally there are packages like &lt;a href="https://www.npmjs.com/package/dropzone"&gt;dropzone&lt;/a&gt; and &lt;a href="https://www.npmjs.com/package/react-dropzone"&gt;react-dropzone&lt;/a&gt; that can handle this task very well.&lt;br&gt;
However, inspired in the last ones, there was created something new and more powerful: &lt;a href="https://www.npmjs.com/package/dropzone-ui"&gt;dropzone-ui&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gen1QpWE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/43678736/132642335-dc7e7ceb-ae86-4f81-8625-4ee28dc5f593.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gen1QpWE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/43678736/132642335-dc7e7ceb-ae86-4f81-8625-4ee28dc5f593.png" alt="dropzone-ui-ondrag-sample"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With this new tool you can easily display previews and also restrict file types, file size and amount of files. Furthermore, you can change the view mode to see the files as an horizontal list or as a grid.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--57mojbcI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/43678736/132642339-2cd996a3-7754-46c9-89ed-56291972154f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--57mojbcI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/43678736/132642339-2cd996a3-7754-46c9-89ed-56291972154f.png" alt="dropzone-ui-ondrop-grid"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As I said before, you can change the view mode by clicking the button on the top next to the "remove all" button: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pWSbtO6g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/43678736/132642341-b1eb2bfe-8134-4cdf-a808-62b14058b4c1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pWSbtO6g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/43678736/132642341-b1eb2bfe-8134-4cdf-a808-62b14058b4c1.png" alt="dropzone-ui-ondrop-list"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The last sample is important because you can also see 2 excellent functionalities:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Info layer&lt;/li&gt;
&lt;li&gt;File status&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#info-layer"&gt;
  &lt;/a&gt;
  Info Layer
&lt;/h3&gt;

&lt;p&gt;The layer that shows all the relevant info about the file such as name, type and size.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#file-status"&gt;
  &lt;/a&gt;
  File Status
&lt;/h3&gt;

&lt;p&gt;The status of the file after being validated according to the validation criteria.&lt;/p&gt;

&lt;p&gt;To make a Dropzone that supports the screenshots showed above you just need this code taken from CodesandBox:&lt;br&gt;
&lt;a href="https://codesandbox.io/s/complete-946hz?file=/src/index.js"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pzpI10jk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codesandbox.io/static/img/play-codesandbox.svg" alt="Edit Button"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Dropzone&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;FileItem&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;FullScreenPreview&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dropzone-ui&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setFiles&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;imageSrc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setImageSrc&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;updateFiles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;incommingFiles&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;incomming files&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;incommingFiles&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;setFiles&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;incommingFiles&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onDelete&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setFiles&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleSee&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;imageSource&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setImageSrc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;imageSource&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Dropzone&lt;/span&gt;
      &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;updateFiles&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;maxFiles&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;maxFileSize&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;2998000&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FileItem&lt;/span&gt;
          &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="na"&gt;onDelete&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onDelete&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="na"&gt;onSee&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleSee&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="na"&gt;preview&lt;/span&gt;
          &lt;span class="na"&gt;info&lt;/span&gt;
          &lt;span class="na"&gt;hd&lt;/span&gt;
        &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Dropzone&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#full-screen-preview"&gt;
  &lt;/a&gt;
  Full Screen preview
&lt;/h2&gt;

&lt;p&gt;One killer feature is that, combined with other component called "FullScreenPreview" from the same package, you can see a full screen image preview of a file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Dropzone&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;FileItem&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;FullScreenPreview&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dropzone-ui&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setFiles&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;imageSrc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setImageSrc&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;updateFiles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;incommingFiles&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;incomming files&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;incommingFiles&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;setFiles&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;incommingFiles&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onDelete&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setFiles&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleSee&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;imageSource&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setImageSrc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;imageSource&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Dropzone&lt;/span&gt;
      &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;updateFiles&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nx"&gt;maxFiles&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nx"&gt;maxFileSize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;2998000&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;FileItem&lt;/span&gt;
          &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="nx"&gt;onDelete&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onDelete&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="nx"&gt;onSee&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleSee&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="nx"&gt;preview&lt;/span&gt;
          &lt;span class="nx"&gt;info&lt;/span&gt;
          &lt;span class="nx"&gt;hd&lt;/span&gt;
        &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;))}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;FullScreenPreview&lt;/span&gt;
        &lt;span class="nx"&gt;imgSource&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;imageSrc&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;openImage&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;imageSrc&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;onClose&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;handleSee&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
      &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Dropzone&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And this is the result after dropping files, and clicking on the &lt;code&gt;view&lt;/code&gt; button on the file item wanted:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O5h16Z7o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5wxk14o6zhloz2z3zypy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O5h16Z7o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5wxk14o6zhloz2z3zypy.png" alt="ironman-fullscreen-dropzone-ui"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#localization"&gt;
  &lt;/a&gt;
  Localization
&lt;/h2&gt;

&lt;p&gt;Last but not least, dropzone ui is available in Spanish through the &lt;code&gt;localization&lt;/code&gt; prop:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Dropzone&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;FileItem&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;FullScreenPreview&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dropzone-ui&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setFiles&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;imageSrc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setImageSrc&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;updateFiles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;incommingFiles&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;incomming files&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;incommingFiles&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;setFiles&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;incommingFiles&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onDelete&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setFiles&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleSee&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;imageSource&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setImageSrc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;imageSource&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Dropzone&lt;/span&gt;
      &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;updateFiles&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;maxFiles&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;maxFileSize&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;2998000&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;localization&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ES-es&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FileItem&lt;/span&gt;
          &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="na"&gt;onDelete&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onDelete&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="na"&gt;onSee&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleSee&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="na"&gt;localization&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ES-es&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="na"&gt;preview&lt;/span&gt;
          &lt;span class="na"&gt;info&lt;/span&gt;
          &lt;span class="na"&gt;hd&lt;/span&gt;
        &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FullScreenPreview&lt;/span&gt;
        &lt;span class="na"&gt;imgSource&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;imageSrc&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="na"&gt;openImage&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;imageSrc&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="na"&gt;onClose&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;handleSee&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Dropzone&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A5xjuOxM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x87x055vdd6dtrmooaj5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A5xjuOxM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x87x055vdd6dtrmooaj5.png" alt="dropzone-ui-spanish"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In conclusion, this is an amazing library for drag and drop files with image previews. This post cannot show the complete potential of &lt;a href="https://www.npmjs.com/package/dropzone-ui"&gt;dropzone-ui&lt;/a&gt;, but a general overview was provided. In fact, the information here is enough for start developing with his amazing tool. You can find more info in the documentation &lt;a href="https://www.npmjs.com/package/dropzone-ui"&gt;https://www.npmjs.com/package/dropzone-ui&lt;/a&gt;. In next posts I will show this package in deep.&lt;/p&gt;

</description>
      <category>react</category>
      <category>npm</category>
      <category>upload</category>
      <category>javascript</category>
    </item>
    <item>
      <title>An Intro to Amazon Simple Notification Service (SNS)</title>
      <author>Anuvindh Sankaravilasam</author>
      <pubDate>Sun, 26 Sep 2021 03:28:27 +0000</pubDate>
      <link>https://dev.to/aws-builders/amazon-simple-notification-service-sns-4gf7</link>
      <guid>https://dev.to/aws-builders/amazon-simple-notification-service-sns-4gf7</guid>
      <description>&lt;h1&gt;
  &lt;a href="#amazon-sns-simple-notification-service"&gt;
  &lt;/a&gt;
  Amazon SNS - Simple Notification Service
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Sn7HjQxj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uw7q7dbd1o672f6phtkx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Sn7HjQxj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uw7q7dbd1o672f6phtkx.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Amazon SNS is a fully managed Serverless solution from AWS. A message publishing and processing service. As it’s a serverless solution, with automatic scaling. Also allows fanout to millions of consumers. SNS topics can be an event topic and consumers can subscribe to that topic.&lt;br&gt;
It is recommended to use a standard topic (High Throughput) . For Security enable Encryption , SNS support in-transit encryption by default but enabling SSE helps to encrypt the topic at-rest&lt;br&gt;
Enable Redrive Policy to send undeliverable messages to a dead-letter queue(resiliency).&lt;br&gt;
Features&lt;/p&gt;

&lt;p&gt;Watch a 10 min intro from &lt;a href="https://www.aws.training/Details/Video?id=15881"&gt;aws.training&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of Contents
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="#anazon-sns---simple-notification-service"&gt;Anazon SNS - Simple Notification Service&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#features"&gt;Features&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hands-on-lab-links"&gt;Hands On Lab Links&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;SNS support notification up to 12,500,000 per topic and 100,000 topics.&lt;/li&gt;
&lt;li&gt;Subscribers can be HTTP(S), SMS, SNS Mobile Push, Email/Email-JSON, SQS, Lambda functions.&lt;/li&gt;
&lt;li&gt;Pub / Sub Messaging&lt;/li&gt;
&lt;li&gt;SNS can create public topics&lt;/li&gt;
&lt;li&gt;SNS Supports Message archiving and analytics&lt;/li&gt;
&lt;li&gt;SNS is serverless –Do not have to worry about scaling out&lt;/li&gt;
&lt;li&gt;Message security Server-side encryption protects the contents of messages that are stored in Amazon SNS topics, using encryption keys provided by AWS KMS&lt;/li&gt;
&lt;li&gt;Redrive policy (dead-letter queue) - optional, can Send undeliverable messages to a dead-letter queue.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#hands-on-lab-links"&gt;
  &lt;/a&gt;
  Hands On Lab Links
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;🔗 Links&lt;/th&gt;
&lt;th&gt;What you learn&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://acloudguru.com/hands-on-labs/creating-and-subscribing-to-aws-sns-topics"&gt;A Cloud Guru&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Create an SNS Topic,Create a Lambda Function , Send Your SNS Topic to Multiple Endpoints&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://play.whizlabs.com/site/task_details?task_id=32&amp;amp;quest_id=37"&gt;whizlabs.com&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Creating and Subscribing to SNS Topics, Adding SNS event for S3 bucket&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://awsworkshop.io/tags/sns/"&gt;AWS Workshop&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Debug serverless applications with Lumigo , Applied Observability for Modern Applications with Epsagon&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://cloudacademy.com/"&gt;CloudAcademy&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Amazon SNS Image Resizing Challenge&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

</description>
    </item>
    <item>
      <title>Setup ESLINT and PRETTIER in React app</title>
      <author>Ankit Kumar</author>
      <pubDate>Sun, 26 Sep 2021 02:28:39 +0000</pubDate>
      <link>https://dev.to/knowankit/setup-eslint-and-prettier-in-react-app-357b</link>
      <guid>https://dev.to/knowankit/setup-eslint-and-prettier-in-react-app-357b</guid>
      <description>&lt;p&gt;Setting up &lt;strong&gt;ESlint&lt;/strong&gt; and &lt;strong&gt;Prettier&lt;/strong&gt; is tedious for beginners, I know this because I have faced this issue too. You will find many articles about setting up the linting on the internet. Some of them will work for you, some will not but most of them will be outdated because of the continuous growing of the library.&lt;/p&gt;

&lt;p&gt;So, instead of picking our brain too much, we should try to understand few things.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-eslint"&gt;
  &lt;/a&gt;
  What is ESLint?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://eslint.org/"&gt;ESLint&lt;/a&gt; statically analyses our code and find the problems. It is present in most of the editors.ESLint fixes are syntax-aware so you won't experience errors introduced by traditional find-and-replace algorithms.&lt;/p&gt;

&lt;p&gt;Write your own rules that work alongside ESLint's built-in rules. You can customise ESLint to work exactly the way you need it for your project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-prettier"&gt;
  &lt;/a&gt;
  What is Prettier?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://prettier.io/"&gt;Prettier&lt;/a&gt; is an opinionated code formatter which is compatible with most of the languages. It saves a lot of time. It quickly indents our code on save (depends on VSCode/editor settings).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-make-them-work-together"&gt;
  &lt;/a&gt;
  How to make them work together?
&lt;/h2&gt;

&lt;p&gt;ESLint has also formatting rules which could conflict with prettier. So we should configure it carefully (sounds tough but it is very simple 😅)&lt;/p&gt;

&lt;p&gt;Let's begin&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-"&gt;
  &lt;/a&gt;
  Step 1 : -
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;eslint &lt;span class="nt"&gt;--save-dev&lt;/span&gt;
 or
yarn add eslint &lt;span class="nt"&gt;--dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-2-"&gt;
  &lt;/a&gt;
  Step 2 : -
&lt;/h3&gt;

&lt;p&gt;Create &lt;code&gt;.eslintrc.json&lt;/code&gt; by running&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx eslint &lt;span class="nt"&gt;--init&lt;/span&gt;
 or
yarn run eslint &lt;span class="nt"&gt;--init&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--51MaNypo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1k6lm2nke17wpiys7o84.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--51MaNypo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1k6lm2nke17wpiys7o84.gif" alt="ESLint"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-3-"&gt;
  &lt;/a&gt;
  Step 3 : -
&lt;/h3&gt;

&lt;p&gt;In &lt;code&gt;React - 17.0.0&lt;/code&gt;, importing react to a file is optional,&lt;br&gt;
To fix this, we will add a rule to our &lt;code&gt;.eslintrc&lt;/code&gt; file. So open your &lt;code&gt;.eslintrc&lt;/code&gt; file and add this line "react/react-in-jsx-scope": "off" inside the rules.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  "rules": {
    "react/react-in-jsx-scope": "off"
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-4-"&gt;
  &lt;/a&gt;
  Step 4 : -
&lt;/h3&gt;

&lt;p&gt;If you are using &lt;code&gt;jest&lt;/code&gt; then you will find that &lt;code&gt;eslint&lt;/code&gt; is giving us an error that test or expect is not defined . To fix this we need to add "jest": true inside env.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  "env": {
    "browser": true,
    "es2021": true,
    "jest": true
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-5-"&gt;
  &lt;/a&gt;
  Step 5 : -
&lt;/h3&gt;

&lt;p&gt;Now, add esling plugins to make it work with react, and make proper configuration for eslint and prettier so that they don't collide with each other&lt;/p&gt;

&lt;p&gt;Install&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install eslint-config-prettier eslint-plugin-prettier prettier --save-dev
or 
yarn add eslint-config-prettier eslint-plugin-prettier prettier --dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Please check each of their git repositories.&lt;br&gt;
&lt;a href="//Turns%20off%20all%20rules%20that%20are%20unnecessary%20or%20might%20conflict%20with%20Prettier."&gt;eslint-config-prettier&lt;/a&gt; - Turns off all rules that are unnecessary or might conflict with Prettier.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/prettier/eslint-plugin-prettier"&gt;eslint-plugin-prettier&lt;/a&gt; - Runs Prettier as an ESLint rule&lt;/p&gt;

&lt;p&gt;After installing above, make changes to &lt;code&gt;.eslintrc&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; "extends": ["eslint:recommended", "plugin:react/recommended", "plugin:prettier/recommended"]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can run prettier separately but we want &lt;code&gt;eslint&lt;/code&gt; to run it for us so that it does not conflict with the &lt;code&gt;eslint&lt;/code&gt; rules.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-6-"&gt;
  &lt;/a&gt;
  Step 6: -
&lt;/h3&gt;

&lt;p&gt;Create &lt;code&gt;.prettierrc&lt;/code&gt; and paste the below code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
{
  "semi": true,
  "tabWidth": 2,
  "printWidth": 100,
  "singleQuote": true,
  "trailingComma": "none",
  "jsxBracketSameLine": true
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, eslint and prettier is setup lets add the script to the &lt;code&gt;package.json&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"lint": "eslint .",
"lint:fix": "eslint --fix",
"format": "prettier --write './**/*.{js,jsx,ts,tsx,css,md,json}' --config ./.prettierrc"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This should work but before you test it, it is better to restart your VSCode.&lt;/p&gt;

&lt;p&gt;You are all setup to write your awesome code.&lt;br&gt;
Thanks for dropping by 🌟&lt;/p&gt;

&lt;p&gt;Support me by following me on &lt;a href="https://twitter.com/knowankit"&gt;twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>webdev</category>
      <category>react</category>
    </item>
    <item>
      <title>TC39/proposal-pipeline-operator Hack-style |&gt; hijacks Grouping operator ( ) </title>
      <author>Ken Okabe</author>
      <pubDate>Sat, 25 Sep 2021 23:28:23 +0000</pubDate>
      <link>https://dev.to/stken2050/the-current-tc39-proposal-pipeline-operator-hack-style-hijacks-grouping-operator-1dam</link>
      <guid>https://dev.to/stken2050/the-current-tc39-proposal-pipeline-operator-hack-style-hijacks-grouping-operator-1dam</guid>
      <description>&lt;p&gt;&lt;a href="https://github.com/tc39/proposal-pipeline-operator"&gt;TC39 proposal  Hack Pipeline Operator&lt;/a&gt; &lt;code&gt;|&amp;gt;&lt;/code&gt; is incompatible with  &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Grouping"&gt;Grouping operator&lt;/a&gt; &lt;code&gt;()&lt;/code&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#short-version"&gt;
  &lt;/a&gt;
  Short version
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#grouping-operator-raw-endraw-"&gt;
  &lt;/a&gt;
  &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Grouping"&gt;Grouping operator&lt;/a&gt;  &lt;code&gt;( )&lt;/code&gt;
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;The grouping operator  &lt;code&gt;( )&lt;/code&gt;  controls the precedence of evaluation in expressions.&lt;/p&gt;

&lt;p&gt;The grouping operator consists of a pair of parentheses around an expression or sub-expression to override the normal operator precedence so that  &lt;strong&gt;expressions with lower precedence can be evaluated before an expression with higher priority.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#test-code-1"&gt;
  &lt;/a&gt;
  Test Code 1:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const f = a =&amp;gt; a * 2;
const g = a =&amp;gt; a + 1;

1 |&amp;gt; f(^) |&amp;gt; g(^);
1 |&amp;gt; (f(^) |&amp;gt; g(^));  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we made  &lt;code&gt;(f(^) |&amp;gt; g(^))&lt;/code&gt;  to be evaluated before other expressions with higher priority.&lt;/p&gt;

&lt;p&gt;I've investigated with Babel, and the transpiled result is the identical, which means:&lt;br&gt;
 &lt;code&gt;(f(^) |&amp;gt; g(^))&lt;/code&gt;   is NOT evaluated before other expressions with the rule of Grouping operator &lt;code&gt;( )&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JZVowjGT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/1316994/134595674-9a280ced-0fb3-4c04-ac91-9fd84e483404.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JZVowjGT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/1316994/134595674-9a280ced-0fb3-4c04-ac91-9fd84e483404.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Does the current proposal  Hack &lt;code&gt;|&amp;gt;&lt;/code&gt; hijack the  &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Grouping"&gt;Grouping operator&lt;/a&gt;  ?&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#test-code-2"&gt;
  &lt;/a&gt;
  Test Code 2:
&lt;/h3&gt;

&lt;p&gt;Now I have a &lt;code&gt;log&lt;/code&gt; function.&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const right = a =&amp;gt; b =&amp;gt; b;
const log = a =&amp;gt; right(console.log(a))(a);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;This behaves like identity function: &lt;code&gt;a =&amp;gt; a&lt;/code&gt;&lt;br&gt;
but, &lt;code&gt;console.log(a)&lt;/code&gt; in the process.&lt;/p&gt;

&lt;p&gt;Now, we want to know the evaluated value of &lt;code&gt;(f(%) |&amp;gt; g(%))&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1 |&amp;gt; (log(f(%) |&amp;gt; g(%)));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;This should be totally fine because &lt;code&gt;(f(%) |&amp;gt; g(%))&lt;/code&gt; must have some value of the evaluation according to:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The grouping operator consists of a pair of parentheses around an expression or sub-expression to override the normal operator precedence so that &lt;strong&gt;expressions with lower precedence can be evaluated before an expression with higher priority.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PAIkRGjG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://upload.wikimedia.org/wikipedia/commons/5/54/Some_babel_code.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PAIkRGjG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://upload.wikimedia.org/wikipedia/commons/5/54/Some_babel_code.jpg" alt="File:Some babel code.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The vanilla JS code is:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var _ref, _ref2, _ref3, _ref4;
const id = a =&amp;gt; a;
const right = a =&amp;gt; b =&amp;gt; b;
const log = a =&amp;gt; right(console.log(a))(a);
const f = a =&amp;gt; a * 2;
const g = a =&amp;gt; a + 1;
_ref2 = 1, (_ref = f(_ref2), g(_ref));
_ref4 = 1, log((_ref3 = f(_ref4), g(_ref3)));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;and the result is:&lt;br&gt;
&lt;code&gt;3&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Therefore,&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1 |&amp;gt; (log(f(%) |&amp;gt; g(%)));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;where  &lt;code&gt;(log(f(%) |&amp;gt; g(%)))&lt;/code&gt; == &lt;code&gt;3&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;1 |&amp;gt; (log(f(%) |&amp;gt; g(%)))&lt;/code&gt; &lt;br&gt;
 &lt;code&gt;==&lt;/code&gt;&lt;br&gt;
&lt;code&gt;1 |&amp;gt; 3&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;???&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;and the evaluation value of whole &lt;code&gt;1 |&amp;gt; (log(f(%) |&amp;gt; g(%)))&lt;/code&gt;  is &lt;code&gt;3&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;1 |&amp;gt; 3 == 3&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I have no idea for this hack-pipe-operator, and simply think this has broken the laws of Mathematics, and more importantly, it seems &lt;strong&gt;the current proposal  Hack &lt;code&gt;|&amp;gt;&lt;/code&gt; hijacks the  &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Grouping"&gt;Grouping operator&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#the-babel-implementation"&gt;
  &lt;/a&gt;
  The Babel implementation
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/tc39/proposal-pipeline-operator/issues/227#issuecomment-926136875"&gt;https://github.com/tc39/proposal-pipeline-operator/issues/227#issuecomment-926136875&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Babel implementation has been done by &lt;a href="https://github.com/js-choi"&gt;@js-choi&lt;/a&gt; (one of the champions of the Hack pipes proposal).&lt;br&gt;&lt;br&gt;
The "reasonable stardard" is the spec proposal: either you learn how to read it (I'd be happy to help, if you are confused about any spec part), or you trust what who can read it says.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#issue"&gt;
  &lt;/a&gt;
  Issue
&lt;/h3&gt;

&lt;p&gt;In fact, I made an issue for this.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Does the current proposal override the Grouping operator ( ) with Hack |&amp;gt; ?  #229&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://github.com/tc39/proposal-pipeline-operator/issues/229"&gt;https://github.com/tc39/proposal-pipeline-operator/issues/229&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6xBF2UbF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/1316994/134628159-8c1f10ec-e6c9-4a7a-b0bd-9c0948de65cf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6xBF2UbF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/1316994/134628159-8c1f10ec-e6c9-4a7a-b0bd-9c0948de65cf.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/tc39/proposal-pipeline-operator/issues/229#issuecomment-926308352"&gt;https://github.com/tc39/proposal-pipeline-operator/issues/229#issuecomment-926308352&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;As had been explained already, parentheses don't work the way you seen to think they do. The result you're getting from Babel is entirely correct and expected, with exactly the same precedence and execution order that you'd get from parenthesizing a sequence of additions.&lt;/p&gt;

&lt;p&gt;As this question has been answered, I'm closing this thread.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4AfG3mzG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://upload.wikimedia.org/wikipedia/commons/4/43/Tc39_terms.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4AfG3mzG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://upload.wikimedia.org/wikipedia/commons/4/43/Tc39_terms.jpg" alt="File:Tc39 terms.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Issue closed with the tag of &lt;strong&gt;invalid&lt;/strong&gt;, well, I don't think so.&lt;/p&gt;

&lt;p&gt;@js-choi has explained to me for sure:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/tc39/proposal-pipeline-operator/issues/227#issuecomment-926317660"&gt;https://github.com/tc39/proposal-pipeline-operator/issues/227#issuecomment-926317660&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#jschoi-explanation"&gt;
  &lt;/a&gt;
  @js-choi explanation
&lt;/h2&gt;

&lt;p&gt;Hm. Well…I don’t think anyone is admitting or covering anything up. But I’ll give it a shot; hopefully this will help a little. ^_^&lt;/p&gt;

&lt;p&gt;Parentheses change grouping. But they never have changed evaluation order, which is  &lt;em&gt;always&lt;/em&gt;  left to right, even  &lt;em&gt;outside&lt;/em&gt;  of parentheses. This is how JavaScript (and many other programming languages) have always been:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function f () {
  console.log('F');
  return 3;
}

function g (x) {
  console.log('G');
  return x + 4;
}

function h (x) {
  console.log('H');
  return x * 7;
}

// This will print F then G then H, and it will result in 3 * 12, i.e., 36.
`f() * (g(1) + h(1))`
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Note how the  &lt;code&gt;f()&lt;/code&gt;  evaluates first even before  &lt;code&gt;(g(1) + h(1))&lt;/code&gt;, despite  &lt;code&gt;(g(1) + h(1))&lt;/code&gt;  being in parentheses. That’s why F still prints first before G and H.&lt;/p&gt;

&lt;p&gt;Parenthesized expressions are not always evaluated first; expressions outside of the parentheses to the left are evaluated beforehand. This has how JavaScript (and many other languages like C and Lisp) have always been.&lt;/p&gt;

&lt;p&gt;Parentheses change grouping. But they have  &lt;em&gt;never&lt;/em&gt;  changed evaluation order, which is  &lt;em&gt;always&lt;/em&gt;  left to right, even  &lt;em&gt;outside&lt;/em&gt;  of parentheses. This is how JavaScript (and many other programming languages) have  &lt;em&gt;always&lt;/em&gt;  been:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// f, g, and h have the same definitions above.

// This will print F then G then H, and it will result in 3 * 12, i.e., 36.
f() * (g(1) + h(1))

// This will also print F then G then H, and it will result in 7 * 7, i.e., 49.
f() |&amp;gt; (g(^) |&amp;gt; h(^))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Note how the  &lt;code&gt;f()&lt;/code&gt;  evaluates first even before  &lt;code&gt;(g(1) + h(1))&lt;/code&gt;, despite  &lt;code&gt;(g(1) + h(1))&lt;/code&gt;  being in parentheses. That’s why F still prints first before G and H.&lt;/p&gt;

&lt;p&gt;This is the same reason why  &lt;code&gt;f() |&amp;gt; (g(^) |&amp;gt; h(^))&lt;/code&gt;  causes  &lt;code&gt;f()&lt;/code&gt;  to be evaluated before  &lt;code&gt;(g(^) |&amp;gt; h(^))&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Just like how  &lt;code&gt;f() * (g(1) + h(1))&lt;/code&gt;  causes  &lt;code&gt;f()&lt;/code&gt;  to be evaluated before  &lt;code&gt;(g(1) + h(1))&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It’s just the  &lt;em&gt;old&lt;/em&gt;  left-to-right evaluation rules. There aren’t any special grouping rules here. Parentheses change the grouping, but they  &lt;em&gt;never&lt;/em&gt;  have changed execution order from anything other than left to right.&lt;/p&gt;

&lt;p&gt;Hopefully that clears it up a little! I can understand why it might be a little confusing, but it’s just the old rules. Nothing is happening here except for the old JavaScript evaluation/parentheses rules. ^_^&lt;/p&gt;

&lt;p&gt;(Actually, perhaps I should also edit MDN’s documentation to make this clearer. Maybe this old parenthesized-expressions-are-not-always-evaluated-first rule is tripping up many people learning JavaScript.)&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#my-explanation"&gt;
  &lt;/a&gt;
  My explanation
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/tc39/proposal-pipeline-operator/issues/227#issuecomment-926270855"&gt;#227 (comment)&lt;/a&gt;  &lt;a href="https://github.com/jridgewell"&gt;@jridgewell&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Notice the order "two", "three", "four" isn't affected by the parenthesis. Let's try (two() * three()) + four(). Surprise, it's still "two", "three", "four"! But now the final log is 10. That's because the operands are evaluated left to right, and this doesn't change. What changed was the evaluation of the operators.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://github.com/tc39/proposal-pipeline-operator/issues/227#issuecomment-926317660"&gt;#227 (comment)&lt;/a&gt;  &lt;a href="https://github.com/js-choi"&gt;@js-choi&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note how the f() evaluates first even before (g(1) + h(1)), despite (g(1) + h(1)) being in parentheses. That’s why F still prints first before G and H.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I observe, again, two of you share the same concept, and there are confusion of concepts . So I will explain to you. Hope it helps, really.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#confusion-of-concepts"&gt;
  &lt;/a&gt;
  Confusion of concepts
&lt;/h3&gt;

&lt;p&gt;The problem you illustrated is not for binary operator but &lt;a href="https://en.wikipedia.org/wiki/Evaluation_strategy"&gt;evaluation strategy&lt;/a&gt; of JS that is &lt;a href="https://en.wikipedia.org/wiki/Evaluation_strategy#Eager_evaluation"&gt;eager-evaluation&lt;/a&gt;, in this evaluation strategy, &lt;code&gt;f(x)&lt;/code&gt; is evaluated as soon as it is found from left to right, yes, you are only correct here.&lt;/p&gt;

&lt;p&gt;The only "safe" place is right side of lambda expressions: such as &lt;code&gt;a =&amp;gt; f(a)&lt;/code&gt;. In this case, even it's found by compiler &lt;code&gt;f(a)&lt;/code&gt; is safe! will not be evaluated. (the same goes to function statement). Therefore the technique is used to emulate lazy-evaluation. Another exception is &lt;code&gt;true || f(x)&lt;/code&gt; but &lt;code&gt;false || f(x)&lt;/code&gt; will be evaluated once found. Try it.&lt;/p&gt;

&lt;p&gt;Then point is, what you told us is &lt;strong&gt;nothing to do with the evaluation order of binary operator or Grouping operator &lt;code&gt;( )&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The eager evaluation strategy strictly follows the Algebraic rule.&lt;/strong&gt; Well, if you can find anomaly, show me :) &lt;strong&gt;It follows the rule of operators including Grouping operator () with no exceptions.&lt;/strong&gt; The eager evaluation of &lt;code&gt;f(x)&lt;/code&gt; never hams Algebraic expression in JS. If both of you have explained as if eager evaluation of &lt;code&gt;f(x)&lt;/code&gt; is the limit of the math in JS. That is the harmful explanation for us.&lt;/p&gt;

&lt;p&gt;Sure in your code, we will have F G H or two three four order and so what? Does it break the rule of the math or algebraic structure? Nah..&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Parentheses change grouping. But they never have changed evaluation order, which is always left to right, even outside of parentheses. This is how JavaScript (and many other programming languages) have always been:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, this is a false statement.&lt;/p&gt;

&lt;p&gt;The tricky word is: evaluation &lt;strong&gt;"order"&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note how the &lt;code&gt;f()&lt;/code&gt; evaluates first even before &lt;code&gt;(g(1) + h(1))&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So another tricky term should be : &lt;strong&gt;"before"&lt;/strong&gt; or &lt;strong&gt;"after"&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In mathematics, when we use the term "order" "before" "after", does it mean time series? No way.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Does it mean the order of the line of terminal console?&lt;/p&gt;

&lt;p&gt;This logs:&lt;/p&gt;

&lt;p&gt;"two"&lt;/p&gt;

&lt;p&gt;"three"&lt;/p&gt;

&lt;p&gt;"four"&lt;/p&gt;

&lt;p&gt;14&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Doesn't matter in terms of math structure.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;What does matter is &lt;a href="https://en.wikipedia.org/wiki/Dependency_network"&gt;dependency network&lt;/a&gt; structure.&lt;/p&gt;

&lt;p&gt;Binary operation is merely a syntax-sugar of binary function, and when you chain them, you fundamentally compose the functions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_deE7vmT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/Ezak8AuE-a_wm92oraHwb5YNxTOXM0mMCaINgELAS6KNRAd9vSOFub1-hTrnWLC-tBKKutHTQOfzDX1KHQgrUURzjuUDVjvYqnN9SCW4uaJecGTDMydystqnrJGIeFml_z3sJNEE%3Ds0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_deE7vmT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/Ezak8AuE-a_wm92oraHwb5YNxTOXM0mMCaINgELAS6KNRAd9vSOFub1-hTrnWLC-tBKKutHTQOfzDX1KHQgrUURzjuUDVjvYqnN9SCW4uaJecGTDMydystqnrJGIeFml_z3sJNEE%3Ds0" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For instance, when you enjoy + binary operation, you guys repeatedly told me "left to right", but fundamentally you do&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yUAD-0E_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/ePh4ZCounDhhlLkx5sKhrOyeiAeeJHUTqDmKm7kAM_1Xvh03hm9hwYgKFAU37gjreDGqpogGayfmFWGVOUVM_kmGA5TOiLiDW-j5tg9ZIM9EZPniKSIcnDqwOae2jsiMwY-tPPWz%3Ds0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yUAD-0E_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/ePh4ZCounDhhlLkx5sKhrOyeiAeeJHUTqDmKm7kAM_1Xvh03hm9hwYgKFAU37gjreDGqpogGayfmFWGVOUVM_kmGA5TOiLiDW-j5tg9ZIM9EZPniKSIcnDqwOae2jsiMwY-tPPWz%3Ds0" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is Fold&lt;/p&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Fold_(higher-order_function)"&gt;https://en.wikipedia.org/wiki/Fold_(higher-order_function)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are both left and right side fold, and usually we use foldLeft and if it's monoid the result is the same of both side.&lt;/p&gt;

&lt;p&gt;As you seen, this is a Graph. &lt;a href="https://en.wikipedia.org/wiki/Dependency_graph"&gt;Dependency graph&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In mathematics, computer science and digital electronics, a dependency graph is a directed graph representing dependencies of several objects towards each other. It is possible to derive an &lt;strong&gt;evaluation order&lt;/strong&gt; or the absence of an &lt;strong&gt;evaluation order&lt;/strong&gt; that respects the given dependencies from the dependency graph.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Remember dependency graph or structure is completely different concept of time order.&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#hack-pipe"&gt;
  &lt;/a&gt;
  Hack pipe
&lt;/h3&gt;

&lt;p&gt;Hack pipe, on the other hand, unlike eager evaluation strategy, this does break the math structure, and again this one overrides Grouping Operator ( ). I meant in dependency base. This problem is elaborated in my previous post &lt;a href="https://github.com/tc39/proposal-pipeline-operator/issues/227#issuecomment-926371664"&gt;#227 (comment)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I don't think it's on purpose, but the confusion of concept of Evaluation strategy and Algebraic structure is harmfully explained to justify the false design of Hack pipe that overrides the operator with the highest precedence in JS.&lt;/p&gt;

&lt;p&gt;I will maintain my claim:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/tc39/proposal-pipeline-operator/issues/229"&gt;Does the current proposal override the Grouping operator ( ) with Hack |&amp;gt; ?&lt;/a&gt;  &lt;a href="https://github.com/tc39/proposal-pipeline-operator/issues/229"&gt;#229&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#deletion-of-my-explanation"&gt;
  &lt;/a&gt;
  Deletion of my explanation
&lt;/h2&gt;

&lt;p&gt;@js-choi&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It’s just the  &lt;em&gt;old&lt;/em&gt;  left-to-right evaluation rules. There aren’t any special grouping rules here. Parentheses change the grouping, but they  &lt;em&gt;never&lt;/em&gt;  have changed execution order from anything other than left to right.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So this is a false statement.&lt;/p&gt;

&lt;p&gt;So why there's no link to my explanation? Deleted by them.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/tc39/proposal-pipeline-operator/issues/227#issuecomment-926737650"&gt;https://github.com/tc39/proposal-pipeline-operator/issues/227#issuecomment-926737650&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I have just deleted several comments from &lt;a href="https://github.com/stken2050"&gt;@stken2050&lt;/a&gt; (and a few responses to them from others) that were explicitly continuing the confused argument about parentheses that I said just a few hours ago to &lt;em&gt;not&lt;/em&gt; continue. I'm closing and locking this thread, and pursuing separate moderation actions, as I said I would if this behavior continued.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bx8fx4GF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://upload.wikimedia.org/wikipedia/commons/9/99/Delete_comments.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bx8fx4GF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://upload.wikimedia.org/wikipedia/commons/9/99/Delete_comments.jpg" alt="File:Delete comments.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#long-version"&gt;
  &lt;/a&gt;
  Long version
&lt;/h1&gt;
&lt;h2&gt;
  &lt;a href="#what-is-groupingoperator"&gt;
  &lt;/a&gt;
  What is grouping-operator?
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#grouping-operator-raw-endraw-"&gt;
  &lt;/a&gt;
  &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Grouping"&gt;Grouping operator&lt;/a&gt; &lt;code&gt;( )&lt;/code&gt;
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;The grouping operator &lt;code&gt;( )&lt;/code&gt; controls the precedence of evaluation in expressions.&lt;/p&gt;

&lt;p&gt;The grouping operator consists of a pair of parentheses around an expression or sub-expression to override the normal operator precedence so that &lt;strong&gt;expressions with lower precedence can be evaluated before an expression with higher priority.&lt;/strong&gt; &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Grouping operator &lt;code&gt;( )&lt;/code&gt; itself has the highest precedence in JavaScript.&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#operator-precedence"&gt;
  &lt;/a&gt;
  &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence"&gt;Operator precedence&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---pPJyqI3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gpp67pkm1nrx41ej85ba.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---pPJyqI3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gpp67pkm1nrx41ej85ba.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-is-pipelineoperator"&gt;
  &lt;/a&gt;
  What is pipeline-operator?
&lt;/h2&gt;

&lt;p&gt;In a general sense, pipeline-operator &lt;code&gt;|&amp;gt;&lt;/code&gt; is a &lt;a href="https://en.wikipedia.org/wiki/Binary_operation"&gt;binary operator&lt;/a&gt;  for  &lt;a href="https://en.wikipedia.org/wiki/Function_application"&gt;function application&lt;/a&gt; that is  equivalent to  &lt;code&gt;f(x)&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;&lt;code&gt;f(x)&lt;/code&gt; == &lt;code&gt;x |&amp;gt; f&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#benefit-of-binary-operator"&gt;
  &lt;/a&gt;
  Benefit of binary operator
&lt;/h2&gt;

&lt;p&gt;Introducing a new binary-operator in JavaScript is nothing new.&lt;/p&gt;

&lt;p&gt;In ES2016 ,  &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Exponentiation"&gt;exponentiation operator&lt;/a&gt; &lt;code&gt;**&lt;/code&gt; has been introduced. &lt;br&gt;
&lt;code&gt;Math.pow(2, 3)&lt;/code&gt; == &lt;code&gt;2 ** 3&lt;/code&gt;&lt;br&gt;&lt;br&gt;
&lt;code&gt;Math.pow(Math.pow(2, 3), 5)&lt;/code&gt; == &lt;code&gt;2 ** 3 ** 5&lt;/code&gt;  &lt;/p&gt;

&lt;p&gt;As you can see, a binary operator significantly improve the readability of a code, especially for the nesting structure of &lt;code&gt;f()&lt;/code&gt; &lt;a href="https://en.wikipedia.org/wiki/Mathematical_notation"&gt;notation&lt;/a&gt;,&lt;/p&gt;

&lt;p&gt;Essentially, pipeline-operator is the same league of the exponentiation operator, and the benefit is also common.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;g(f(x)&lt;/code&gt; == &lt;code&gt;x |&amp;gt; f |&amp;gt; g&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#expectation-of-the-community"&gt;
  &lt;/a&gt;
  Expectation of the community
&lt;/h2&gt;

&lt;p&gt;In fact, pipeline-operator in JS has been expected from the community.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://2020.stateofjs.com/en-US/opinions/missing_from_js"&gt;#StateOfJS 2020: What do you feel is currently missing from JavaScript?&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4SsDwlgp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/1316994/133777701-55ffaa00-bede-4699-a907-fe85242ab82b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4SsDwlgp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/1316994/133777701-55ffaa00-bede-4699-a907-fe85242ab82b.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Static Typing&lt;/li&gt;
&lt;li&gt;  Pattern Matching&lt;/li&gt;
&lt;li&gt;  Pipe Operator&lt;/li&gt;
&lt;li&gt;  functions&lt;/li&gt;
&lt;li&gt;  Immutable Data Structure&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It's reasonable to observe that the majority of the JS community has longed for more strictness of the language.&lt;/p&gt;

&lt;p&gt;Especially for  &lt;strong&gt;Static Typing&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fNlZHrMq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/1316994/134413770-55b00540-bde7-4b5c-ac84-9bbfa5a1371c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fNlZHrMq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/1316994/134413770-55b00540-bde7-4b5c-ac84-9bbfa5a1371c.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#why-static-typing-is-so-popular"&gt;
  &lt;/a&gt;
  Why Static Typing is so popular?
&lt;/h2&gt;

&lt;p&gt;There is no native static &lt;a href="https://en.wikipedia.org/wiki/Type_system"&gt;type system&lt;/a&gt; in JavaScript, so currently, many use TypeScript instead.&lt;br&gt;
So why do we like Type so much?&lt;/p&gt;

&lt;p&gt;The general answer would be that we can avoid BUGs, in other words Type makes a code robust.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#why-type-makes-a-code-robust"&gt;
  &lt;/a&gt;
  Why Type makes a code robust?
&lt;/h2&gt;

&lt;p&gt;Because Type is mathematics.&lt;br&gt;
I will explain briefly about Type since I think the understanding helps readers follow this discussion.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#types-as-sets"&gt;
  &lt;/a&gt;
  Types as Sets
&lt;/h2&gt;

&lt;p&gt;Type == Sets&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#type-theory-versus-set-theory"&gt;
  &lt;/a&gt;
  &lt;a href="https://ncatlab.org/nlab/show/type+theory#type_theory_versus_set_theory"&gt;Type theory versus set theory&lt;/a&gt;
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Alternately, we could change our terminology so that what we have been calling “types” are instead called “sets”.&lt;/p&gt;

&lt;p&gt;Thus, words like “type” and “set” and “class” are really quite fungible. This sort of level-switch is especially important when we want to study the mathematics &lt;em&gt;of&lt;/em&gt; type theory,&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://guide.elm-lang.org/appendix/types_as_sets.html"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#types-as-sets-an-introduction-to-elm"&gt;
  &lt;/a&gt;
  &lt;a href="https://guide.elm-lang.org/appendix/types_as_sets.html"&gt;Types as Sets · An Introduction to Elm&lt;/a&gt;
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;In pursuit of this goal, I have found it helpful to understand the relationship between types and sets. It sounds like a stretch, but it really helps develop your mindset!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#what-is-sets"&gt;
  &lt;/a&gt;
  What is Sets?
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#definition-of-function"&gt;
  &lt;/a&gt;
  Definition of Function
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Function_(mathematics)#Definition"&gt;https://en.wikipedia.org/wiki/Function_(mathematics)#Definition&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Intuitively, a function is a process that associates each element of a set &lt;em&gt;X&lt;/em&gt;, to a single element of a set &lt;em&gt;Y&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://ncatlab.org/nlab/show/function"&gt;https://ncatlab.org/nlab/show/function&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In a strict sense of the term, a &lt;strong&gt;function&lt;/strong&gt; is a &lt;a href="https://ncatlab.org/nlab/show/homomorphism"&gt;homomorphism&lt;/a&gt;  f:S→Tf : S \to T of &lt;a href="https://ncatlab.org/nlab/show/sets"&gt;sets&lt;/a&gt;. We may also speak of a &lt;strong&gt;&lt;a href="https://ncatlab.org/nlab/show/map"&gt;map&lt;/a&gt;&lt;/strong&gt; or &lt;strong&gt;mapping&lt;/strong&gt;, but those terms are used in other ways in other contexts.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, in the definition of function, we need to define the sets of &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;&lt;br&gt;
where &lt;code&gt;y = f(x)&lt;/code&gt;, or  &lt;code&gt;x |&amp;gt; y&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#a-binary-operator-is-a-syntaxsugar-of-binary-functions"&gt;
  &lt;/a&gt;
  A binary operator is a syntax-sugar of binary functions
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Binary_operation"&gt;Binary operation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5HCbJ_zc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://upload.wikimedia.org/wikipedia/commons/thumb/7/79/Binary_operations_as_black_box.svg/220px-Binary_operations_as_black_box.svg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5HCbJ_zc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://upload.wikimedia.org/wikipedia/commons/thumb/7/79/Binary_operations_as_black_box.svg/220px-Binary_operations_as_black_box.svg.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see in the picture,&lt;br&gt;
&lt;code&gt;x * y == f(x, y)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;or should I edit this picture to&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_xwFncYL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://upload.wikimedia.org/wikipedia/commons/2/23/Pipeline_operator.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_xwFncYL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://upload.wikimedia.org/wikipedia/commons/2/23/Pipeline_operator.png" alt="File:Pipeline operator.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A binary operator is a syntax-sugar of binary functions.&lt;br&gt;
We also need to type (== sets) &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; or  &lt;code&gt;f&lt;/code&gt; correctly as the request from the mathematical definition of function, and according to the overwhelming popularity of &lt;strong&gt;Static Typing&lt;/strong&gt; in the survey, that is what people want. They needs more strictness of JavaScript for their robust codes.&lt;/p&gt;

&lt;p&gt;For &lt;code&gt;x |&amp;gt; f === f(x)&lt;/code&gt;, essentially it's clearly typed:&lt;/p&gt;

&lt;p&gt;x : JavaScript Objects&lt;br&gt;
f : Function&lt;/p&gt;

&lt;p&gt;Then, since this is &lt;code&gt;f(x)&lt;/code&gt;,  the type(==sets) of &lt;code&gt;x&lt;/code&gt; should be defined along with the definition of &lt;code&gt;f&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is what people want.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#hackstyle-reached-stage2"&gt;
  &lt;/a&gt;
  Hack-style reached Stage-2
&lt;/h2&gt;

&lt;p&gt;Recently, I have noticed JS pipeline-operator has reached TC-39 Stage-2, so I have examined:&lt;br&gt;
 &lt;a href="https://github.com/tc39"&gt;tc39&lt;/a&gt;/&lt;strong&gt;&lt;a href="https://github.com/tc39/proposal-pipeline-operator"&gt;proposal-pipeline-operator&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#pipe-operator-raw-gt-endraw-for-javascript"&gt;
  &lt;/a&gt;
  Pipe Operator (&lt;code&gt;|&amp;gt;&lt;/code&gt;) for JavaScript
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#why-the-hack-pipe-operator"&gt;
  &lt;/a&gt;
  Why the Hack pipe operator
&lt;/h4&gt;

&lt;p&gt;There were  &lt;strong&gt;two competing proposals&lt;/strong&gt;  for the pipe operator: Hack pipes and F# pipes. (Before that, there  &lt;strong&gt;was&lt;/strong&gt;  a  &lt;a href="https://github.com/js-choi/proposal-smart-pipelines/"&gt;third proposal for a “smart mix” of the first two proposals&lt;/a&gt;, but it has been withdrawn, since its syntax is strictly a superset of one of the proposals’.)&lt;/p&gt;

&lt;p&gt;The two pipe proposals just differ  &lt;strong&gt;slightly&lt;/strong&gt;  on what the “magic” is, when we spell our code when using  &lt;code&gt;|&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#this-proposal-hack-pipes"&gt;
  &lt;/a&gt;
  This proposal: Hack pipes
&lt;/h4&gt;

&lt;p&gt;In the  &lt;strong&gt;Hack language&lt;/strong&gt;’s pipe syntax, the righthand side of the pipe is an  &lt;strong&gt;expression&lt;/strong&gt;  containing a special  &lt;strong&gt;placeholder&lt;/strong&gt;, which is evaluated with the placeholder bound to the result of evaluating the lefthand side's expression. That is, we write  &lt;code&gt;value |&amp;gt; one(^) |&amp;gt; two(^) |&amp;gt; three(^)&lt;/code&gt;  to pipe  &lt;code&gt;value&lt;/code&gt;  through the three functions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pro:&lt;/strong&gt;  The righthand side can be  &lt;strong&gt;any expression&lt;/strong&gt;, and the placeholder can go anywhere any normal variable identifier could go, so we can pipe to any code we want  &lt;strong&gt;without any special rules&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;code&gt;value |&amp;gt; foo(^)&lt;/code&gt;  for unary function calls,&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;value |&amp;gt; foo(1, ^)&lt;/code&gt;  for n-ary function calls,&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;value |&amp;gt; ^.foo()&lt;/code&gt;  for method calls,&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;value |&amp;gt; ^ + 1&lt;/code&gt;  for arithmetic,&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;value |&amp;gt; [^, 0]&lt;/code&gt;  for array literals,&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;value |&amp;gt; {foo: ^}&lt;/code&gt;  for object literals,&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;value |&amp;gt; `${^}`&lt;/code&gt;  for template literals,&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;value |&amp;gt; new Foo(^)&lt;/code&gt;  for constructing objects,&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;value |&amp;gt; await ^&lt;/code&gt;  for awaiting promises,&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;value |&amp;gt; (yield ^)&lt;/code&gt;  for yielding generator values,&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;value |&amp;gt; import(^)&lt;/code&gt;  for calling function-like keywords,&lt;/li&gt;
&lt;li&gt;  etc.&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;&lt;strong&gt;What??&lt;/strong&gt; &lt;br&gt;
I had a hope for &lt;code&gt;value |&amp;gt; f&lt;/code&gt; is still valid, but syntax-error.&lt;/p&gt;

&lt;p&gt;The type of right hand side of  &lt;code&gt;|&amp;gt;&lt;/code&gt; is no longer function but &lt;strong&gt;something unknown&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#reactions"&gt;
  &lt;/a&gt;
  Reactions
&lt;/h2&gt;

&lt;p&gt;I investigated the issue of this proposal.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  #200: Added value of hack-style proposal against temporary variables
&lt;a href="https://github.com/tc39/proposal-pipeline-operator/issues/200"&gt;https://github.com/tc39/proposal-pipeline-operator/issues/200&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  #202: Separate (complementary) F# pipeline proposal?
&lt;a href="https://github.com/tc39/proposal-pipeline-operator/issues/202"&gt;https://github.com/tc39/proposal-pipeline-operator/issues/202&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  #205: Hack is dead. Long live F#.
&lt;a href="https://github.com/tc39/proposal-pipeline-operator/issues/205"&gt;https://github.com/tc39/proposal-pipeline-operator/issues/205&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  #206: Should enabling point-free programming/APIs be a goal of the Pipeline Operator?
&lt;a href="https://github.com/tc39/proposal-pipeline-operator/issues/206"&gt;https://github.com/tc39/proposal-pipeline-operator/issues/206&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In fact, &lt;a href="https://github.com/tc39/proposal-pipeline-operator/issues/205"&gt;#205: Hack is dead. Long live F#.&lt;/a&gt;  has 199 comments and now closed by moderator.&lt;br&gt;
&lt;a href="https://github.com/tc39/proposal-pipeline-operator/issues/205#issuecomment-918717394"&gt;https://github.com/tc39/proposal-pipeline-operator/issues/205#issuecomment-918717394&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a huge thread and reading there, I've watched the issue was closed in real-time.&lt;/p&gt;

&lt;p&gt;Here are few comments I've found around threads:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/tc39/proposal-pipeline-operator/issues/205#issuecomment-918366356"&gt;#205 (comment)&lt;/a&gt;  &lt;a href="https://github.com/jderochervlk"&gt;@jderochervlk&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;The future of functional programming is Hack pipe&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Nope. It isn't. If this is truly what became added to the language I would continue to use Ramda's  &lt;code&gt;pipe&lt;/code&gt;, which is a shame because I would really love to remove some overhead of installing a package in order to do something so simple.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://github.com/tc39/proposal-pipeline-operator/issues/205#issuecomment-918578339"&gt;#205 (comment)&lt;/a&gt;  &lt;a href="https://github.com/samhh"&gt;@samhh&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I'm thinking ahead. JavaScript won't cease to exist once Hack reaches stage 4.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://github.com/tc39/proposal-pipeline-operator/issues/215#issuecomment-923161293"&gt;#215 (comment)&lt;/a&gt;  &lt;a href="https://github.com/arendjr"&gt;@arendjr&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I would rather have the language remain without any pipe operator than to have to deal with Hack in the future.&lt;br&gt;&lt;br&gt;
I too would like to thank  &lt;a href="https://github.com/js-choi"&gt;@js-choi&lt;/a&gt;  and the other contributors for all their effort, but I believe the current direction to be misguided to the detriment of not just the FP community, but the JS community at large.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://github.com/tc39/proposal-pipeline-operator/issues/225#issuecomment-924508816"&gt;#225 (comment)&lt;/a&gt;  &lt;a href="https://github.com/voronoipotato"&gt;@voronoipotato&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The argument against hack pipes is that we believe they are a hazard (sometimes for different reasons, but the conclusion is the same). Most of us in this thread and I suspect in the wild, would rather have no pipes, than hack pipes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://github.com/tc39/proposal-pipeline-operator/issues/225#issuecomment-922983854"&gt;#225 (comment)&lt;/a&gt;  &lt;a href="https://github.com/SRachamim"&gt;@SRachamim&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;PFA proposal is a universal solution to those who worries about the arrow function noise on all three cases: map, then and pipe. If PFA is not ready, and we don't want minimal/F# without PFA, then let's wait, instead of introducing an irreversible Hack pipes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://github.com/tc39/proposal-pipeline-operator/issues/225#issuecomment-923003812"&gt;#225 (comment)&lt;/a&gt;  &lt;a href="https://github.com/SRachamim"&gt;@SRachamim&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;And as I said, if PFA is stuck, then it's not a good reason to introduce Hack. We should either wait, or avoid pipe at all (or introduce minimal/f# style anyway).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://github.com/tc39/proposal-pipeline-operator/issues/225#issuecomment-924261193"&gt;#225 (comment)&lt;/a&gt;  &lt;a href="https://github.com/Lokua"&gt;@Lokua&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Also, as a writer whose job is to communicate meaning, hack style removes my ability to provide descriptive names, which is basically the universal first step of writing readable code. I'm honestly shocked at this proposal. Imagine if you started at a new company and they enforced that all unary functions you write regardless of context had to name their single argument  &lt;code&gt;x&lt;/code&gt;  (or god forbid,  &lt;code&gt;^&lt;/code&gt;  &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UEa9WIe5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.githubassets.com/images/icons/emoji/trollface.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UEa9WIe5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.githubassets.com/images/icons/emoji/trollface.png" alt=":trollface:" title=":trollface:"&gt;&lt;/a&gt;). That's how I feel and I'm not exaggerating - this proposal scares me because it's going to lead to code that is uglier, harder to read, and harder to refactor/abstract later on!&lt;br&gt;&lt;br&gt;
Edit: I too would rather see no pipe than this and am admittedly biased as I've always thought a pipe operator (or pretty much any more new syntax) is a bad idea. But if we are going to have it, I'd rather see it implemented in a way that improves readability, not (IMHO) hinders it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I've found they claim it's far better not to have any pipe than to have hack-style because they evaluated the one harmful to JavaScript.&lt;/p&gt;

&lt;p&gt;This is a comment by RxJS auhthor&lt;br&gt;
&lt;a href="https://github.com/tc39/proposal-pipeline-operator/issues/228#issuecomment-925465598"&gt;https://github.com/tc39/proposal-pipeline-operator/issues/228#issuecomment-925465598&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I've been told several influential members want to discourage point-free programming. Therefore, anything that might help functional programming libraries is unlikely to pass the TC39. It is what it is. It's the hack proposal or nothing. IMO, the hack proposal isn't useful enough to justify the additional syntax. But I'm not on the committee&lt;/p&gt;

&lt;p&gt;Please don't @ me into these threads. I've said my piece. Pretty thoroughly. I wasn't really heard. And I lost a friend over it. I simply just don't care what happens with this anymore. If it passes, great. Unfortunately, I don't really have any use for the proposed pipeline operator. But I'm hopeful for other features someday that I will have a use for.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#history-of-the-proposal"&gt;
  &lt;/a&gt;
  History of the proposal
&lt;/h2&gt;

&lt;p&gt;I think it's fair to share the history posted by a project member @js-choi&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/tc39/proposal-pipeline-operator/blob/main/HISTORY.md"&gt;Brief history of the JavaScript pipe operator&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#my-study-on-hack"&gt;
  &lt;/a&gt;
  My study on Hack
&lt;/h2&gt;

&lt;p&gt;In fact, I had to study the Hack-style-pipeline-operator.&lt;br&gt;
I had no idea what this is.&lt;br&gt;
&lt;strong&gt;For the minimal/F# proposal, it's merely &lt;code&gt;x |&amp;gt; f === f(x)&lt;/code&gt; , so simple, no requirement to study.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I had joined issues, and also I've opened a couple of issues by myself, and actually lots of text here is copy&amp;amp;paste of my own comment there.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#pipelineoperator-in-a-mathematical-sense"&gt;
  &lt;/a&gt;
  Pipeline-operator in a mathematical sense
&lt;/h2&gt;

&lt;p&gt;Before I discuss Hack pipe, I share my knowledge on the pipeline-operator in a mathematical sense that is &lt;br&gt;
&lt;code&gt;x |&amp;gt; f === f(x)&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#associative-property-and-monoid"&gt;
  &lt;/a&gt;
  Associative property and Monoid
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Addition&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://en.wikipedia.org/wiki/Addition#General_theory"&gt;https://en.wikipedia.org/wiki/Addition#General_theory&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;General theory&lt;br&gt;&lt;br&gt;
The general theory of abstract algebra allows an "addition" operation to be any  &lt;strong&gt;associative&lt;/strong&gt;  and commutative operation on a set. Basic algebraic structures with such an addition operation include commutative  &lt;strong&gt;monoids&lt;/strong&gt;  and abelian groups.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here the important property is associative&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(1 + 2) + 3 = 
1 + 2 + 3 = 
1 + (2 + 3)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;JS String is also has associative property, and they are called &lt;a href="https://en.wikipedia.org/wiki/Monoid"&gt;Monoid&lt;/a&gt; in algebra.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In abstract algebra, a branch of mathematics, a &lt;strong&gt;monoid&lt;/strong&gt; is a set equipped with &lt;strong&gt;an associative binary operation&lt;/strong&gt; and an identity element.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Associativity&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
For all a, b and c in S, the equation  &lt;code&gt;(a • b) • c = a • (b • c)&lt;/code&gt;  holds.&lt;/p&gt;

&lt;p&gt;In computer science and computer programming, the set of strings built from a given set of characters is a free monoid.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What does this mean?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"Hello" + " " + "operator" ==
"Hello " + "operator" ==
"Hello" + " operator" ==
"Hello operator"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Strings and  &lt;code&gt;+&lt;/code&gt;  the binary operator in JS is a Monoid, and as you know this String operator is very easy to use and robust.&lt;/p&gt;

&lt;p&gt;Monoid or associative property has rock solid structure because it's hardly broken.&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Imagine LEGO block, that is also Monoid, the order to construct block does not effect the result:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(A + B) + C = 
A + B + C = 
A + (B + C)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Any order to construction of the combination of LEGO bock reaches the identical result. So in software development if the entity has Monoid property, we can treat it as if LEGO block. That's the virtue of Monoid. Just its like LEGO, wonderful stuff.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Without the associative property, we will experience &lt;a href="https://en.wikipedia.org/wiki/Combinatorial_explosion"&gt;Combinatorial explosion&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In &lt;a href="https://en.wikipedia.org/wiki/Mathematics"&gt;mathematics&lt;/a&gt;, a &lt;strong&gt;combinatorial explosion&lt;/strong&gt; is the rapid growth of the complexity of a problem due to how the &lt;a href="https://en.wikipedia.org/wiki/Combinatorics"&gt;combinatorics&lt;/a&gt; of the problem is affected by the input, constraints, and bounds of the problem.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;The history of software development is the war against complexity.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In fact, Associativity is one of the most important concept in programming and Associativity is the key to avoid the software complexity that is the fundamental reason of BUGs . In other words, as long as we are very carful to keep things with associative property, we safely can avoid complexity and obtain a bug-free code.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So Associativity is important,  &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Exponentiation"&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Exponentiation&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5IRO1hfJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/1316994/134622162-0126479a-8741-4440-a431-f3b050c5a650.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5IRO1hfJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/1316994/134622162-0126479a-8741-4440-a431-f3b050c5a650.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;They care a lot.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#function-composition-as-a-monoid"&gt;
  &lt;/a&gt;
  Function composition as a Monoid
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Monoid"&gt;https://en.wikipedia.org/wiki/Monoid&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For example, &lt;strong&gt;the functions from a set into itself form a monoid with respect to function composition&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I will explain this.&lt;/p&gt;

&lt;p&gt;One of "the functions from a set into itself" is addition.&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// function from a set into itself
const f = a =&amp;gt; a + 1; // f: number -&amp;gt; number 
const g = a =&amp;gt; a + 2; // g; number -&amp;gt; number 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8An-cP9v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/1316994/133987130-1d809aac-b322-4964-975e-865cf8c946e9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8An-cP9v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/1316994/133987130-1d809aac-b322-4964-975e-865cf8c946e9.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XoXIZ5VF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/1316994/133987268-d4ca147e-71ac-4e18-9567-e213dae96fcf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XoXIZ5VF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/1316994/133987268-d4ca147e-71ac-4e18-9567-e213dae96fcf.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MyWAmeeU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/1316994/134622508-49c2a242-f4ae-42d8-84a1-3332cb6c999a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MyWAmeeU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/1316994/134622508-49c2a242-f4ae-42d8-84a1-3332cb6c999a.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iN18va9e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/1316994/134622390-c397558b-36a6-45a4-a026-e9202e88f13c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iN18va9e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/1316994/134622390-c397558b-36a6-45a4-a026-e9202e88f13c.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  please note I use the composition operator for g(f(x)) not  &lt;code&gt;g.f&lt;/code&gt;  but  &lt;code&gt;f.g&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;a |&amp;gt; f |&amp;gt; g   ===
a |&amp;gt; (f . g) 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This is the simple structure of&lt;br&gt;
Function application (pipeline-operator)&lt;br&gt;
Function composition (composition-operator).&lt;/p&gt;

&lt;p&gt;They are the both side of the same coin.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mSgQvYII--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/1316994/134622406-9d78fb22-9bea-4e28-bc8a-b87f6e6637a4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mSgQvYII--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/1316994/134622406-9d78fb22-9bea-4e28-bc8a-b87f6e6637a4.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;(f.g).h === f.g.h === f.(g.h)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Therefore, &lt;strong&gt;function composition is Monoid&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;a |&amp;gt; f |&amp;gt; g |&amp;gt; h ===
a |&amp;gt; f |&amp;gt; (g . h) ===
a |&amp;gt; f . (g . h) ===
a |&amp;gt; (f . g) |&amp;gt; h ===
a |&amp;gt; (f . g) . h ===
a |&amp;gt; (f . g . h) 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;where  &lt;code&gt;f.g&lt;/code&gt;  is the composition of  &lt;code&gt;f&lt;/code&gt;  and  &lt;code&gt;g&lt;/code&gt;&lt;br&gt;&lt;br&gt;
(in traditional math style is  &lt;code&gt;g.f&lt;/code&gt;  regarding  &lt;code&gt;g(f)&lt;/code&gt;  but I don't use this style )&lt;/p&gt;

&lt;p&gt;This is the whole picture you should know, and as you can see:&lt;br&gt;&lt;br&gt;
&lt;strong&gt;function application  &lt;code&gt;|&amp;gt;&lt;/code&gt;  is not associative and not Monoid.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;a |&amp;gt; f |&amp;gt; g   !=
a |&amp;gt; (f |&amp;gt; g) 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;The &lt;code&gt;(f |&amp;gt; g)&lt;/code&gt;  does not make sense and the Type==Sets is violated in terms of &lt;code&gt;x |&amp;gt; f&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;However, this is what the Hack style is doing.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const f = a =&amp;gt; a * 2;
const g = a =&amp;gt; a + 1;

1 |&amp;gt; f(^) |&amp;gt; g(^);    //3
1 |&amp;gt; (f(^) |&amp;gt; g(^));  //3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and &lt;code&gt;(f(^) |&amp;gt; g(^))&lt;/code&gt; is also evaluated as &lt;code&gt;3&lt;/code&gt;,&lt;br&gt;
 with the higher priority of general rule of Mathematics or grouping-operator &lt;code&gt;()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;as a result&lt;/p&gt;

&lt;p&gt;&lt;code&gt;1 |&amp;gt; 3 == 3&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This does not make sense at all, and the fundamental reason is they simply violates the rule of mathematics.&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#monad"&gt;
  &lt;/a&gt;
  Monad
&lt;/h2&gt;

&lt;p&gt;Pipeline-operator  &lt;code&gt;|&amp;gt;&lt;/code&gt;  and function application does not have associative property in Monoid layer, but the  form&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;a |&amp;gt; f |&amp;gt; g   ===
a |&amp;gt; (f . g) 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;is also called Associativity in Monad layer.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://wiki.haskell.org/Monad_laws"&gt;https://wiki.haskell.org/Monad_laws&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Monad laws&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GZ3fhRJB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/1316994/134077688-3eef39bf-52ea-48ca-b569-dac3910af75b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GZ3fhRJB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/1316994/134077688-3eef39bf-52ea-48ca-b569-dac3910af75b.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For your convenience, I would rewrite to&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Associativity:&lt;/strong&gt;  &lt;code&gt;(m |&amp;gt; g ) |&amp;gt; h === m |&amp;gt; (x =&amp;gt; g(x) |&amp;gt; h)&lt;/code&gt;&lt;br&gt;&lt;br&gt;
or&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Associativity:&lt;/strong&gt;  &lt;code&gt;(m |&amp;gt; g ) |&amp;gt; h === m |&amp;gt; (x =&amp;gt; x |&amp;gt; g |&amp;gt; h)&lt;/code&gt;&lt;br&gt;&lt;br&gt;
as  &lt;code&gt;(x =&amp;gt; x |&amp;gt; g |&amp;gt; h)&lt;/code&gt;  is the function composition of  &lt;code&gt;g&lt;/code&gt;  and  &lt;code&gt;h&lt;/code&gt;&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Associativity:&lt;/strong&gt;  &lt;code&gt;(m |&amp;gt; g ) |&amp;gt; h === m |&amp;gt; (g . h)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For &lt;strong&gt;left-right identity&lt;/strong&gt;,&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3cst9kPA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/1316994/134623182-32783f14-876b-4ecb-a6ee-abc3d9f32ad9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3cst9kPA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/1316994/134623182-32783f14-876b-4ecb-a6ee-abc3d9f32ad9.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;with identify function:  &lt;code&gt;id= x =&amp;gt; x&lt;/code&gt;&lt;br&gt;&lt;br&gt;
For every Function:  &lt;code&gt;f: A -&amp;gt;B&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If this forms, the algebraic structure is called &lt;strong&gt;Monad&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Note: &lt;strong&gt;this corresponds to Monoid has associativity and identify&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Function Application  &lt;code&gt;|&amp;gt;&lt;/code&gt;  Monad&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Function Composition  &lt;code&gt;.&lt;/code&gt;  Monoid also Monad (obvious, but prove by yourself)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So mathematically,  &lt;strong&gt;&lt;code&gt;|&amp;gt;&lt;/code&gt;  is Monad, not Monoid&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#math-structure-of-hack-pipe"&gt;
  &lt;/a&gt;
  Math structure of Hack pipe
&lt;/h2&gt;

&lt;p&gt;F# pipe is simply mathematical function application, it behaves like Monad, so it's natural it does not behave Associative in Monoid.&lt;/p&gt;

&lt;p&gt;Hack pipe, on the other hand, it behave like Associative and Monoid,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;a |&amp;gt; f(^) |&amp;gt; g(^)   == 
a |&amp;gt; (f(^) |&amp;gt; g(^)) 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;but this is not a monoid.&lt;br&gt;
Something unknown to leads:&lt;br&gt;
&lt;code&gt;1 |&amp;gt; 3 == 3&lt;/code&gt;&lt;br&gt;
This is something completely different from Function application in mathematical sense.&lt;br&gt;&lt;br&gt;
This one breaks the Algebraic structure that I've explained so far.&lt;br&gt;
&lt;strong&gt;Function application is NOT Monoid and should not behave like Monoid.&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Function composition is Monoid but with Hack pipe, there is no such a concept anymore because it has broken the mathematics.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;With pipeline-operator in the algebraic sense,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;a |&amp;gt; f |&amp;gt; g   ===
a |&amp;gt; (f . g) 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is Associative in Monad layer with Function composition that itself is Associative and Monoid/Monad in both layers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#type-of-hack-pipe"&gt;
  &lt;/a&gt;
  Type of Hack pipe
&lt;/h2&gt;

&lt;p&gt;I'll give it another shot.&lt;/p&gt;

&lt;p&gt;Since &lt;strong&gt;function application operator &lt;code&gt;|&amp;gt;&lt;/code&gt;&lt;/strong&gt; in algebraic sense is Monoid, perhaps we can replace this binary operator to another famous one &lt;code&gt;*&lt;/code&gt;.&lt;br&gt;
Then, perhaps we can replace &lt;strong&gt;function composition operator &lt;code&gt;.&lt;/code&gt;&lt;/strong&gt; to another Monoid &lt;code&gt;+&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So, as a type,&lt;/p&gt;

&lt;p&gt;&lt;code&gt;A |&amp;gt; F |&amp;gt; F |&amp;gt; F&lt;/code&gt;  is replaced to&lt;br&gt;
&lt;code&gt;A * F * F * F&lt;/code&gt;&lt;br&gt;
&lt;code&gt;===&lt;/code&gt;&lt;br&gt;
&lt;code&gt;A * (F + F + F)&lt;/code&gt;&lt;br&gt;
where&lt;br&gt;
&lt;code&gt;(F + F + F)&lt;/code&gt; is the function composition.&lt;br&gt;
This behaves as identical as the familiar behavior of the arithmetic.&lt;br&gt;
Simple.&lt;/p&gt;

&lt;p&gt;Hack on the other hand,&lt;br&gt;
They claim the simplicity:&lt;br&gt;
&lt;code&gt;A * F * F * F&lt;/code&gt;&lt;br&gt;
&lt;code&gt;===&lt;/code&gt;&lt;br&gt;
&lt;code&gt;A * (F * F * F)&lt;/code&gt;&lt;br&gt;
We no longer understand what the &lt;code&gt;(F * F * F)&lt;/code&gt;  is.&lt;br&gt;
In fact, they say:&lt;br&gt;
&lt;code&gt;(F * F * F)&lt;/code&gt; itself is a syntax-error. &lt;br&gt;
Sure it should be because it doesn't make sense, and &lt;br&gt;
&lt;code&gt;(F * F * F)&lt;/code&gt; is refused to be evaluated because they ignore the rule of grouping-operator.&lt;br&gt;
&lt;strong&gt;In other words, they overrides a rule of the operator that has the highest precedence priority in JavaScript, that I would call hijack.&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;(F * F * F)&lt;/code&gt;  is not a function composition like in F# or math pipe, nor anything understandable, so Type is &lt;code&gt;?&lt;/code&gt;&lt;br&gt;
&lt;code&gt;A * (?)&lt;/code&gt;&lt;br&gt;
and &lt;strong&gt;&lt;code&gt;(?)&lt;/code&gt; appears to be the evaluated value of the whole expression&lt;/strong&gt; (such as &lt;code&gt;3&lt;/code&gt;):&lt;br&gt;
&lt;code&gt;? == A * (?)&lt;/code&gt;&lt;br&gt;
therefore&lt;br&gt;
&lt;code&gt;A * (A * (A * (A * (A * (A * (A * (..?..)))))))&lt;/code&gt; &lt;br&gt;
Some structure of infinite recursion.&lt;br&gt;
That is the Type of the Hack pipe. Scary.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hijacking-groupingoperator-raw-endraw-"&gt;
  &lt;/a&gt;
  Hijacking grouping-operator &lt;code&gt;()&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;As you can see,&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JZVowjGT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/1316994/134595674-9a280ced-0fb3-4c04-ac91-9fd84e483404.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JZVowjGT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/1316994/134595674-9a280ced-0fb3-4c04-ac91-9fd84e483404.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Internally, technically, the Hack &lt;code&gt;|&amp;gt;&lt;/code&gt; &lt;strong&gt;refuses&lt;/strong&gt; to evaluate &lt;code&gt;(f(%) |&amp;gt; g(%))&lt;/code&gt; first ignoring the rule of &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#grouping-operator-raw-endraw-"&gt;
  &lt;/a&gt;
  &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Grouping"&gt;Grouping operator&lt;/a&gt;  &lt;code&gt;( )&lt;/code&gt;
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;The grouping operator consists of a pair of parentheses around an expression or sub-expression to override the normal operator precedence so that &lt;strong&gt;expressions with lower precedence can be evaluated before an expression with higher priority.&lt;/strong&gt; &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Grouping operator &lt;code&gt;( )&lt;/code&gt; itself has the highest &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence"&gt;Operator precedence&lt;/a&gt; in JavaScript.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Then I hear the counter explanation to justify:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It’s just the  &lt;em&gt;old&lt;/em&gt;  left-to-right evaluation rules. There aren’t any special grouping rules here. Parentheses change the grouping, but they  &lt;em&gt;never&lt;/em&gt;  have changed execution order from anything other than left to right.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;"&lt;em&gt;old&lt;/em&gt; left-to-right evaluation rules" that means &lt;a href="https://en.wikipedia.org/wiki/Evaluation_strategy#Eager_evaluation"&gt;eager evaluation strategy&lt;/a&gt; of JavaScript follows the rule in the sense of both Mathematics and grouping-operator &lt;code&gt;()&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Eager evaluation does not conflict to &lt;strong&gt;evaluation order&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The evaluation order arises from  &lt;a href="https://en.wikipedia.org/wiki/Dependency_graph"&gt;Dependency graph&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In mathematics, computer science and digital electronics, a dependency graph is a directed graph representing dependencies of several objects towards each other. It is possible to derive an &lt;strong&gt;evaluation order&lt;/strong&gt; or the absence of an &lt;strong&gt;evaluation order&lt;/strong&gt; that respects the given dependencies from the dependency graph.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;and &lt;code&gt;()&lt;/code&gt; defines the dependency graph and the structure of the code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Remember dependency graph or structure is completely different concept of time order.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here, in the terms of "&lt;strong&gt;evaluation order&lt;/strong&gt;", "&lt;strong&gt;before&lt;/strong&gt;", &lt;strong&gt;"after&lt;/strong&gt;" we discuss Not  &lt;strong&gt;time order of the evaluation/excision&lt;/strong&gt;, but &lt;strong&gt;dependency structure&lt;/strong&gt; of the code, which unfortunately it seems everyone in the Hack pipe proposal team share the confusion of the concept.&lt;br&gt;
 As we've seen, the Hack pipe refuses to follow the evaluation order of dependency structure and I would call this &lt;strong&gt;Hijacking grouping-operator &lt;code&gt;()&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I did explain to them, but they did not hear, then deleted my explanation. That is why I made a post here.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/tc39/proposal-pipeline-operator"&gt;Current TC39 proposal  Hack Pipeline Operator&lt;/a&gt; &lt;code&gt;|&amp;gt;&lt;/code&gt; has severe problems including the process of the staging, and the entire community of JavaScript will suffer.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Models' Relationship In Django</title>
      <author>Manar Abdelkarim</author>
      <pubDate>Sat, 25 Sep 2021 23:26:16 +0000</pubDate>
      <link>https://dev.to/manarabdelkarim/models-relationship-in-django-1c93</link>
      <guid>https://dev.to/manarabdelkarim/models-relationship-in-django-1c93</guid>
      <description>&lt;p&gt;Hello BackEnders &lt;/p&gt;

&lt;p&gt;Back on days, on the final Project day before graduation, I was asked about the difference between Foreignkey and OneToOne fields in Django's models. That was because I mistakenly used OneToOne instead of Foreignkey 😁!&lt;br&gt;
It was a bad and humiliating situation that I can't forget. Anyway, I decided today to explain OneToOne , ManyToMany , and Foreignkey in Django &lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/eXTue7sCt6ZvG/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/eXTue7sCt6ZvG/giphy.gif" alt="Django model"&gt;&lt;/a&gt;&lt;br&gt;
So let's get started:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-do-we-use-relationships"&gt;
  &lt;/a&gt;
  Why do we use relationships?
&lt;/h2&gt;

&lt;p&gt;The first step to understand the relationships is to understand why we need them. Let's not talk too much about the concept of "Normalization", imagine if we have a table with students names, gender, and school events :&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;StudentID&lt;/th&gt;
&lt;th&gt;StudentName&lt;/th&gt;
&lt;th&gt;StudentGender&lt;/th&gt;
&lt;th&gt;StudentsClass&lt;/th&gt;
&lt;th&gt;StudentDesk&lt;/th&gt;
&lt;th&gt;SchoolEvents&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Natchos&lt;/td&gt;
&lt;td&gt;Male&lt;/td&gt;
&lt;td&gt;4A&lt;/td&gt;
&lt;td&gt;321&lt;/td&gt;
&lt;td&gt;Zoo Visit, Charity Day&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Manar&lt;/td&gt;
&lt;td&gt;Female&lt;/td&gt;
&lt;td&gt;5A&lt;/td&gt;
&lt;td&gt;40&lt;/td&gt;
&lt;td&gt;Charity Day&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;Kareem&lt;/td&gt;
&lt;td&gt;Male&lt;/td&gt;
&lt;td&gt;4A&lt;/td&gt;
&lt;td&gt;66&lt;/td&gt;
&lt;td&gt;Zoo Visits , Math Competition&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;you can notice here that every student has a desk "represented with a number" but why do we have this data in this table? Also, "Male" in StudentGender and "4A" in StudentsClass has been repeated twice in the table. And the worst is in the SchoolEvents column. Just think if we want to delete the Zoo Visit from Natchos's ongoing events, the Charity Day will be deleted too! &lt;br&gt;
Imagine if we have 100 or 1000 students!&lt;/p&gt;

&lt;p&gt;Instead, we have to divide the table into smaller tables "four tables in our case" &lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;StudentID&lt;/th&gt;
&lt;th&gt;StudentName&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Natchos&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Manar&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;Kareem&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ID&lt;/th&gt;
&lt;th&gt;StudentGender&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Male&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Female&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ID&lt;/th&gt;
&lt;th&gt;StudentsClass&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;4A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;5A&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ID&lt;/th&gt;
&lt;th&gt;Events&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Zoo Visit&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Charity Day&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;Math Competition&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Perfect. But what is next? We need a way "a link" to tell the database that this particular student is in this class, has this gender and will go to these events.&lt;br&gt;
That is what we do with relationships. A relationship is an association between two entities.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#foreignkey"&gt;
  &lt;/a&gt;
  Foreignkey:
&lt;/h2&gt;

&lt;p&gt;I started with Foreignkey because it is the easiest to understand. &lt;/p&gt;

&lt;p&gt;Foreignkey in Django represents &lt;strong&gt;"one to many"&lt;/strong&gt; also called &lt;strong&gt;"many to one"&lt;/strong&gt; relationship in the database. &lt;br&gt;
it is just the same as its name one to many! I have one mother and my mother has many children. The country has many cities and every city is located in one country.&lt;br&gt;
In our example above, every student "normally" should have one gender. and every gender is for many students. &lt;br&gt;
Natchos and Kareem are two students "many", Male is one.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AVTGdk0R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wohg10xd98uksfvc1lq2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AVTGdk0R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wohg10xd98uksfvc1lq2.jpg" alt="One To many"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#represent-foreignkey-in-django"&gt;
  &lt;/a&gt;
  Represent Foreignkey in Django:
&lt;/h3&gt;

&lt;p&gt;Because we can not represent all the "many" in the "one" table. It makes a lot of sense to represent the repationship from the many sides.. which means in our example we can't go to the Gender table add a row and say in it: we have a relationship with Natchos , and Kareem and John and Tom ..etc in the male row "record" .. instead we can add a row in the student row and called gender that says these students a relationship with the Gender table in "Male" or in "Female".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q2wMZnf5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/on0jm6pfa6fbilmczp8v.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q2wMZnf5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/on0jm6pfa6fbilmczp8v.jpg" alt="many to one"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now to represent the ForeignKey will add it in the Student Field with one main parameter: referring to the model that has ForeignKey relationship "many to one" with it.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from django.db import models

class StudentGender(models.Model):
    gender = models.CharField(max_length=10)
class Student(models.Model):
    name = models.CharField(max_length=30)
    gender = models.ForeignKey(StudentGender, 
   null=True)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Notice in class Student :&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;gender = models.ForeignKey(Gender, 
   on_delete=models.CASCADE)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;That in Django we don't refer to the id of the other model but for the model "class" itself ( in other frameworks such as Flask, we refer to the other model's id). Also, we used null=True to allow the nulls so we can have some students with no gender specified.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#onetoone"&gt;
  &lt;/a&gt;
  OneToOne
&lt;/h2&gt;

&lt;p&gt;one to one is as easy as you can think. this pen is mine and this pen has one owner. I have one husband and my husband has one wife. In our example, every student setting on one desk and every desk is for one student "at least in my country" &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#represent-onetoone-in-django"&gt;
  &lt;/a&gt;
  Represent OneToOne in Django:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5uvYFkhi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vpiz7dffrltbgtu81yu2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5uvYFkhi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vpiz7dffrltbgtu81yu2.jpg" alt="one to one"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At this point and because we are going to add one value in either table, it doesn't matter where we add it. But because I think that it is a good idea to add in the Chair table since that the student is the main character, I will add the OneToOne field to the Chair :&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class StudentGender(models.Model):
    gender = models.CharField(max_length=10)
    Student = models.OneToOneField(Student, 
   null=True)
class Student(models.Model):
    name = models.CharField(max_length=30)
    gender = models.ForeignKey(StudentGender, 
   null=True)

Notice in class Student :

gender = models.ForeignKey(StudentGender, 
   null=True)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Notice that here I also used "null=True" because as you know, if a chair has no student to set on, we don't have to throw it from the window. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iv_K-inA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://thumbs.gfycat.com/ScalySelfassuredDuck-max-1mb.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iv_K-inA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://thumbs.gfycat.com/ScalySelfassuredDuck-max-1mb.gif" alt="one to one"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#manytomany"&gt;
  &lt;/a&gt;
  ManyToMany
&lt;/h1&gt;

&lt;p&gt;Students enroll in many courses and every course is enrolled by many students. in our example, each student can attend many events and every event will be attended by many students. This is simply what a many to many relationships is. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#represent-manytomany-in-django"&gt;
  &lt;/a&gt;
  Represent ManyToMany in Django:
&lt;/h3&gt;

&lt;p&gt;In ForeignKey we chose the "one" table and in OneToOne we chose either one. so what table can we choose in many to many? In the normal cases, we create a third table "more like a third wheel in the relationship" that has the id of the first table and the id of the second table as below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HY0jBLNa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iye7rnmay7m5jebnlnz7.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HY0jBLNa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iye7rnmay7m5jebnlnz7.jpg" alt="many to many"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#but"&gt;
  &lt;/a&gt;
  But!
&lt;/h4&gt;

&lt;h3&gt;
  &lt;a href="#but"&gt;
  &lt;/a&gt;
  But!
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#but"&gt;
  &lt;/a&gt;
  But!
&lt;/h2&gt;

&lt;p&gt;Django made it easier for us. it is just as easy as adding ManyToOne or foreignKey!Again I will not choose the student.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Student(models.Model):
    name = models.CharField(max_length=30)
    gender = models.ForeignKey(StudentGender, 
   null=True)

class Chair(models.Model):

chair_number = models.IntegerField()
student = models.ManyToManyField('student')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Here, It seems we have reached the end. &lt;br&gt;
Happy day to you and happy birthday to ME 🎂&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://sjlouji10.medium.com/django-models-with-relationships-one-to-one-relationship-f3ef8d77aec1"&gt;Django Models with Relationships — One to One Relationship&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/3.2/ref/models/fields/"&gt;Model field reference¶
&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>django</category>
      <category>python</category>
      <category>database</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Do you need a State Management Library?</title>
      <author>Andrew Bone</author>
      <pubDate>Sat, 25 Sep 2021 23:23:55 +0000</pubDate>
      <link>https://dev.to/link2twenty/do-you-need-a-state-management-library-29o6</link>
      <guid>https://dev.to/link2twenty/do-you-need-a-state-management-library-29o6</guid>
      <description>&lt;p&gt;The other day I was browsing LinkedIn when a poll caught my eye&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What's your favourite React State Management Library and why?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lwEeDuee--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ovbnnqrcaf8kl6gmbmqw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lwEeDuee--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ovbnnqrcaf8kl6gmbmqw.png" alt="LinkedIn poll"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Naturally, I felt there was an option missing from the poll and left a comment. I replied saying I felt a custom hook with the context API should be enough, let's talk about that.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-state-management-library"&gt;
  &lt;/a&gt;
  What is a State Management Library?
&lt;/h2&gt;

&lt;p&gt;Before we look at what state management is we have to agree on what state is. State is a place in memory where we can store some data, anything really. For instance with a checkbox it is either checked or not, true or false, and they are its states, storing a user's name as a string is a state or an array of preferences, the list is endless.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So what is state management?&lt;/strong&gt; These states/variables need to be interacted with some how. Be it reading the value or setting it. In it's most simple form state management is how you interact with a variable. &lt;/p&gt;

&lt;p&gt;In React, states are easy provided you only want to touch them inside the components they were made in. State Management Library's, for React, make it possible to interact with states from anywhere without having to prop drill. This is great and it why these libraries are so popular but is there a better way?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-the-context-api"&gt;
  &lt;/a&gt;
  What is the context API?
&lt;/h2&gt;

&lt;p&gt;The &lt;a href="https://reactjs.org/docs/hooks-reference.html#usecontext"&gt;context API&lt;/a&gt; is a default React hook used to allow data (objects, functions, strings, etc) to be accessed by any child component.&lt;/p&gt;

&lt;p&gt;When we use this API in tandem with a custom hook it gets a lot more powerful. We can pass objects with &lt;code&gt;getter&lt;/code&gt; and &lt;code&gt;setter&lt;/code&gt; functions that can be used read or modify states, as you'd expect, or have functions that allow us to set several states at once or even give us data back in certain formats, perhaps for API calls.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-can-we-use-the-context-api"&gt;
  &lt;/a&gt;
  How can we use the context API?
&lt;/h3&gt;

&lt;p&gt;Here I've written a very simple hook to manage storing a person's name. It stores a first and last name, which you can both get and set, it also concatenates the two names into one long name that can be read from context, this is not something you'd ever really need to do but it shows how data can be returned formatted, there is also a function that lets you set both states at once.&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/hardcore-brattain-s67tf"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Have a look through the code, as I said it's nothing complex but it was only meant to serve as an example of what can be done rather than a template to be followed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final thoughts
&lt;/h2&gt;

&lt;p&gt;With all of this power built into React do we need State Management Libraries? Maybe we do or maybe we don't but either way please let me know if you use one and if you do why? I look forward to reading your comments.&lt;/p&gt;

&lt;p&gt;Thank you so much for reading.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>tutorial</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Flutter &amp; Dart Tips - Week In Review #16</title>
      <author>Offline Programmer</author>
      <pubDate>Sat, 25 Sep 2021 23:15:35 +0000</pubDate>
      <link>https://dev.to/offlineprogrammer/flutter-dart-tips-week-in-review-16-hen</link>
      <guid>https://dev.to/offlineprogrammer/flutter-dart-tips-week-in-review-16-hen</guid>
      <description>&lt;p&gt;Hello Reader,&lt;/p&gt;

&lt;p&gt;I am getting very close to the goal of this series of sharing 100+ Flutter\Dart tips. Let's get into the 16th post of this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ae8wc--O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media0.giphy.com/media/i37WrmQJTF1M2lVI00/giphy.gif%3Fcid%3Decf05e471myjnkpzubvbt55w6mgngzurhiev51gmiiyb26ee%26rid%3Dgiphy.gif%26ct%3Ds" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ae8wc--O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media0.giphy.com/media/i37WrmQJTF1M2lVI00/giphy.gif%3Fcid%3Decf05e471myjnkpzubvbt55w6mgngzurhiev51gmiiyb26ee%26rid%3Dgiphy.gif%26ct%3Ds" alt="15"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;1- Transform is a widget that applies a transformation before painting its child.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;
&lt;span class="o"&gt;...&lt;/span&gt;

  &lt;span class="n"&gt;Container&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
  &lt;span class="nl"&gt;color:&lt;/span&gt; &lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;black&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;Transform&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="nl"&gt;alignment:&lt;/span&gt; &lt;span class="n"&gt;Alignment&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;topRight&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="nl"&gt;transform:&lt;/span&gt; &lt;span class="n"&gt;Matrix4&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;skewY&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.3&lt;/span&gt;&lt;span class="o"&gt;)..&lt;/span&gt;&lt;span class="na"&gt;rotateZ&lt;/span&gt;&lt;span class="o"&gt;(-&lt;/span&gt;&lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;pi&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mf"&gt;12.0&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;Container&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="nl"&gt;padding:&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;EdgeInsets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;all&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;8.0&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="nl"&gt;color:&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0xFFE8581C&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Apartment for rent!'&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="o"&gt;),&lt;/span&gt;
  &lt;span class="o"&gt;),&lt;/span&gt;
&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;...&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Try it on DartPad &lt;a href="https://dartpad.dev/?id=41defd810d85225bb313634bc4665d1b&amp;amp;null_safety=true"&gt;here&lt;/a&gt; &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HBecz_1I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/Wmpuoau.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HBecz_1I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/Wmpuoau.gif" alt="RadioListTile"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2- VerticalDivider widget is a one device pixel thick vertical line, with padding on either side.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;
&lt;span class="o"&gt;...&lt;/span&gt;


&lt;span class="n"&gt;Row&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
  &lt;span class="nl"&gt;mainAxisSize:&lt;/span&gt; &lt;span class="n"&gt;MainAxisSize&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;min&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="nl"&gt;children:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Widget&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;[&lt;/span&gt;
    &lt;span class="n"&gt;Container&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Item1'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;VerticalDivider&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;
    &lt;span class="n"&gt;Container&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Item2'&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;VerticalDivider&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;
    &lt;span class="n"&gt;Container&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Item3'&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="o"&gt;),&lt;/span&gt;
  &lt;span class="o"&gt;],&lt;/span&gt;
&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;...&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Try it on DartPad &lt;a href="https://dartpad.dev/?id=597d1aabc7d972e0d082468ea1b6d510&amp;amp;null_safety=true"&gt;here&lt;/a&gt; &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Phne3wM5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/8C73sRM.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Phne3wM5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/8C73sRM.gif" alt="RangeSlider"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3- TimePicker widget shows a dialog containing a material design time picker.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;
&lt;span class="o"&gt;...&lt;/span&gt;


&lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TimeOfDay&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;selectedTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;showTimePicker&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
  &lt;span class="nl"&gt;initialTime:&lt;/span&gt; &lt;span class="n"&gt;TimeOfDay&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;now&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;
  &lt;span class="nl"&gt;context:&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;);&lt;/span&gt;

&lt;span class="o"&gt;...&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Try it on DartPad &lt;a href="https://dartpad.dev/?id=c04e270f668ecc63b613911df41ac47b&amp;amp;null_safety=true"&gt;here&lt;/a&gt; &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4sW3DcyY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/ffhuD6r.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4sW3DcyY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/ffhuD6r.gif" alt="RefreshIndicator"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4- Stepper widget displays progress through a sequence of steps.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;
&lt;span class="o"&gt;...&lt;/span&gt;


    &lt;span class="n"&gt;Stepper&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
          &lt;span class="nl"&gt;steps:&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;
            &lt;span class="n"&gt;Step&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
              &lt;span class="nl"&gt;title:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Login Info'&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
              &lt;span class="nl"&gt;content:&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                &lt;span class="nl"&gt;children:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Widget&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;[&lt;/span&gt;
                  &lt;span class="n"&gt;TextFormField&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                    &lt;span class="nl"&gt;decoration:&lt;/span&gt; &lt;span class="n"&gt;InputDecoration&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;labelText:&lt;/span&gt; &lt;span class="s"&gt;'Email Address'&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
                  &lt;span class="o"&gt;),&lt;/span&gt;
                  &lt;span class="n"&gt;TextFormField&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                    &lt;span class="nl"&gt;decoration:&lt;/span&gt; &lt;span class="n"&gt;InputDecoration&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;labelText:&lt;/span&gt; &lt;span class="s"&gt;'Password'&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
                  &lt;span class="o"&gt;),&lt;/span&gt;
                &lt;span class="o"&gt;],&lt;/span&gt;
              &lt;span class="o"&gt;),&lt;/span&gt;
              &lt;span class="nl"&gt;isActive:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
              &lt;span class="nl"&gt;state:&lt;/span&gt; &lt;span class="n"&gt;StepState&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;editing&lt;/span&gt;
            &lt;span class="o"&gt;),&lt;/span&gt;
          &lt;span class="o"&gt;],&lt;/span&gt;
        &lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;...&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Try it on DartPad &lt;a href="https://dartpad.dev/?null_safety=true&amp;amp;id=15b62b7ffd262ef6a20ad3a088f63c9a"&gt;here&lt;/a&gt; &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mDcy1DCO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/4tueYOn.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mDcy1DCO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/4tueYOn.gif" alt="Switch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;5- ActionChip widget used to create compact elements called chips, which trigger an action when the user presses on it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;
&lt;span class="o"&gt;...&lt;/span&gt;


  &lt;span class="n"&gt;ActionChip&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="nl"&gt;label:&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Delete'&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="nl"&gt;onPressed:&lt;/span&gt; &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Processing to delete item'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;...&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Try it on DartPad &lt;a href="https://dartpad.dev/?null_safety=true&amp;amp;id=25817a978bb813734dae6e1138f5c7a3"&gt;here&lt;/a&gt; &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bhDZcOlB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/LdrFds5.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bhDZcOlB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/LdrFds5.gif" alt="Tooltip"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;6- ExpansionPanel widget is a panel with a header and a body and can be either expanded or collapsed. The body of the panel is only visible when it is expanded.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;
&lt;span class="o"&gt;...&lt;/span&gt;


        &lt;span class="n"&gt;ExpansionPanel&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
          &lt;span class="nl"&gt;headerBuilder:&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;isExpanded&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ListTile&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
              &lt;span class="nl"&gt;title:&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                &lt;span class="s"&gt;'Click To Expand'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                &lt;span class="nl"&gt;style:&lt;/span&gt; &lt;span class="n"&gt;TextStyle&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;color:&lt;/span&gt; &lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;black&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
              &lt;span class="o"&gt;),&lt;/span&gt;
            &lt;span class="o"&gt;);&lt;/span&gt;
          &lt;span class="o"&gt;},&lt;/span&gt;
          &lt;span class="nl"&gt;body:&lt;/span&gt; &lt;span class="n"&gt;ListTile&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
            &lt;span class="nl"&gt;title:&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Description text'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                &lt;span class="nl"&gt;style:&lt;/span&gt; &lt;span class="n"&gt;TextStyle&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;color:&lt;/span&gt; &lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;black&lt;/span&gt;&lt;span class="o"&gt;)),&lt;/span&gt;
          &lt;span class="o"&gt;),&lt;/span&gt;
          &lt;span class="nl"&gt;isExpanded:&lt;/span&gt; &lt;span class="n"&gt;_expanded&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
          &lt;span class="nl"&gt;canTapOnHeader:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="o"&gt;),&lt;/span&gt;

&lt;span class="o"&gt;...&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Try it on DartPad &lt;a href="https://dartpad.dev/?null_safety=true&amp;amp;id=91e4cbb77f160a598ef1716f815f47af"&gt;here&lt;/a&gt; &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EdethbBT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/5U9DIYL.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EdethbBT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/5U9DIYL.gif" alt="SelectableText"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;See you next week. 👋🏻&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Follow me on &lt;a href="https://twitter.com/_Mo_Malaka_"&gt;Twitter&lt;/a&gt; for more tips about #coding, #learning, #technology...etc.&lt;/p&gt;

&lt;p&gt;Check my Apps on &lt;a href="https://bit.ly/3h05gQ7"&gt;Google Play&lt;/a&gt; &amp;amp; &lt;a href="https://apple.co/3hZXoBx"&gt;Apple Store&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;span&gt;Cover image &lt;a href="https://unsplash.com/@xps?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;XPS&lt;/a&gt; on &lt;a href="https://unsplash.com/?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

</description>
      <category>dart</category>
      <category>flutter</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Typography in Web Design</title>
      <author>Gabriel Valdivia</author>
      <pubDate>Sat, 25 Sep 2021 22:59:56 +0000</pubDate>
      <link>https://dev.to/gabriel_s_valdivia/typography-in-web-design-24c0</link>
      <guid>https://dev.to/gabriel_s_valdivia/typography-in-web-design-24c0</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cgAykPm0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.gabeswebcoding.com/wp-content/uploads/2021/09/pexels-brett-jordan-5045981.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cgAykPm0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.gabeswebcoding.com/wp-content/uploads/2021/09/pexels-brett-jordan-5045981.jpg" alt="Image of Times New Roman font"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h3&gt;

&lt;p&gt;Let's begin by defining what fonts are. Simply put, fonts are a grouping of typographic characters with similar characteristics. Fonts are defined by their weight or thickness, style or slope, serif edges, and variants. For example, &lt;em&gt;Times New Roman&lt;/em&gt;, pictured above, has a very distinctive style that is commonly used in newspaper articles, research papers, and academic settings. The end of each letter has a squared-off point on each end. Times New Roman can come in different variations. It can be regular, italic, or bold. Other fonts lack the serif ends, while others look much more like handwriting.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-psychology-of-fonts"&gt;
  &lt;/a&gt;
  The Psychology of Fonts
&lt;/h3&gt;

&lt;p&gt;As a web developer or small business owner, you don't need to know the specifications or details of the font family, but you do need to understand that selecting the right fonts for your web project has a powerful psychological effect on your visitor. &lt;a href="https://pubmed.ncbi.nlm.nih.gov/18459353/"&gt;Research&lt;/a&gt; has shown that font type has implications for marketing, advertising, and persuasion. Beyond the power to convince, using the right font pairs will guide, delight, and inform your visitors. Let's dig into actionable things you can do to leverage your use of fonts.&lt;/p&gt;

&lt;p&gt;The first decision you'll want to make is how your fonts affect your visitors. You'll want to consider which font families are right for your needs. For example, Serif fonts, pictured below, tend to lend seriousness and weight, while sans-serif fonts tend to be more open and friendly. Consider the following when choosing your fonts:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9Wdbl65f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.gabeswebcoding.com/wp-content/uploads/2021/09/Serif-Banner.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9Wdbl65f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.gabeswebcoding.com/wp-content/uploads/2021/09/Serif-Banner.png" alt="Banner of company logos using serif fonts"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Serif Fonts:&lt;/strong&gt; Convey a sense of stability and formality. They send a message to the reader that the company is stable. They are typically used by financial institutions, law firms, insurance companies, and consultants. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vUXiUiSO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.gabeswebcoding.com/wp-content/uploads/2021/09/Sans-Serif-Banner.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vUXiUiSO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.gabeswebcoding.com/wp-content/uploads/2021/09/Sans-Serif-Banner.png" alt="Image of company logos using sans-serif fonts such as Spotify, Target, Netflix, Facebook, and Google"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sans-Serif Fonts:&lt;/strong&gt; Are a cleaner more modern typographic font family. They lack the serif ends characteristic of serif fonts. Sans-serif fonts are known for their openness and inclusive nature. When paired with serif headlines they tend to lend websites with a balance of authority and openness.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BdZqk_ht--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.gabeswebcoding.com/wp-content/uploads/2021/09/Sript-Fonts.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BdZqk_ht--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.gabeswebcoding.com/wp-content/uploads/2021/09/Sript-Fonts.png" alt="Image of company logos using script fonts such as Chupa Chups, Carl's Jr, Kellog's, Ford, and Instagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Script Fonts:&lt;/strong&gt; Can range from fun &amp;amp; amusing to formal &amp;amp; creative and in some cases script fonts when limited to a logo or signature denote credibility.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fonts-readability-amp-contrast"&gt;
  &lt;/a&gt;
  Fonts Readability &amp;amp; Contrast
&lt;/h3&gt;

&lt;p&gt;Fonts should be easy to read. Making fonts easy to read means considering some factors. Keep in mind that your selected font family will look differently at similar font sizes. For example, 38 pixels on the Open Sans font family will look smaller than on another thicker font families. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Lylk3yc5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.gabeswebcoding.com/wp-content/uploads/2021/09/Font-Compare.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Lylk3yc5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.gabeswebcoding.com/wp-content/uploads/2021/09/Font-Compare.png" alt="Comparison of Open Sans &amp;amp; Barlow fonts at 38, 28, and 16 pixels in size"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#size"&gt;
  &lt;/a&gt;
  Size
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Paragraph font Size:&lt;/strong&gt; The first consideration might be &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/font-size"&gt;font size&lt;/a&gt;, how big will your font be? On the web, we are limited by screen sizes and the various settings your site visitors will have on their monitors or other device screens. The most common font size for paragraphs might be 16 - 18 pixels. However, on small phone screens, that font size might cause the font to look unnaturally large and cause your sentences to break into new lines in a place where you might not expect. For smaller screens, developers often reduce the font size by a couple of pixels. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Heading font sizes:&lt;/strong&gt; Headings almost always need to be adjusted several pixels in size across tablets and mobile sizes. For example, a heading with a font size of 38 pixels on desktop monitors will almost certainly be too large for an iPhone or Android screen. The font size would need to be reduced by several pixels on tablet size and several more on mobile devices.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Consistency in font sizes:&lt;/strong&gt; It's important to stick to set font sizes in headings and paragraphs. For headings, you might determine a logical font and size. Make sure all the headings across your site are consistent in terms of font-family and size. The same goes for paragraphs, subheadings.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#contrast"&gt;
  &lt;/a&gt;
  Contrast
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7w_0xteN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.gabeswebcoding.com/wp-content/uploads/2021/09/Font-Contrast.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7w_0xteN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.gabeswebcoding.com/wp-content/uploads/2021/09/Font-Contrast.png" alt="Image showing color swatches with letters on them. The colors a blend of letter color parings that hurt the eyes and others that don't"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You'll want to be kind to your readers' eyes. Make sure that you are either sticking to a font color that is dark on a light background or light on a dark background. Avoid colors that tend to hurt the eyes, such as text on a red background. Don't forsake those visitors with "&lt;a href="http://web-accessibility.carnegiemuseums.org/design/color/"&gt;low vision or color deficiencies&lt;/a&gt;." &lt;/p&gt;

&lt;p&gt;Use an &lt;a href="https://contrastchecker.com/"&gt;online tool&lt;/a&gt; to check for color contrast. Not only will your site be inclusive of everyone, but you'll also end up avoiding poor aesthetic choices in the process.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#font-family-pairings"&gt;
  &lt;/a&gt;
  Font Family Pairings
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#"&gt;
  &lt;/a&gt;
  &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VJOLX2oT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.gabeswebcoding.com/wp-content/uploads/2021/09/Font-Parings.png" alt="Examples of font pairings that look great together"&gt;
&lt;/h3&gt;

&lt;p&gt;Choosing the right font pairing brings together everything we've discussed, and it can have a powerful psychological effect, too. More importantly, pairing fonts is an important element of design on any website. You don't have to be a design guru to pair great fonts. Consider your website's industry or purpose, don't lose sight of readability, font size, and contrast. With that small amount of knowledge, navigate to one of the many websites that have done the hard work for you. Pick a font &lt;a href="https://www.fontpair.co/all"&gt;pairing website&lt;/a&gt;, visit &lt;a href="https://fonts.google.com/"&gt;Google Fonts&lt;/a&gt; choose a font pair combination that suits your needs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;My goal was to help guide developers and small business owners by providing the most relevant font considerations. In short, consider the psychological effect your font will have on its intended audience. Make your site readable by considering how font size and contrast affect the reader. Spruce up the design by pairing your fonts effectively. And keep your font sizes, colors, and pairings consistent.  &lt;/p&gt;

&lt;p&gt;Citations:&lt;/p&gt;

&lt;p&gt;[2]: &lt;strong&gt;Emotional and persuasive perception of fonts&lt;/strong&gt;  Juni S, Gross JS. Emotional and persuasive  perception of fonts. Percept Mot Skills. 2008 Feb;106(1):35-42. doi:  10.2466/pms.106.1.35-42. PMID: 18459353.&lt;/p&gt;

&lt;p&gt;[3]: *&lt;em&gt;The picture superiority effect: support for the distinctiveness model  *&lt;/em&gt;   Mintzer MZ, Snodgrass JG. The picture  superiority effect: support for the distinctiveness model. Am J Psychol. 1999 Spring;112(1):113-46. PMID: 10696280.&lt;/p&gt;

&lt;p&gt;[4]: Illustrations used throughout this post by &lt;strong&gt;Pablo Stanley&lt;/strong&gt; via Figma&lt;/p&gt;

</description>
      <category>design</category>
      <category>fonts</category>
      <category>typography</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Just ship that MVP...not</title>
      <author>𝙹𝚊𝚜𝚘𝚗 𝙻𝚎𝚘𝚠 👨🏻‍💻</author>
      <pubDate>Sat, 25 Sep 2021 22:58:25 +0000</pubDate>
      <link>https://dev.to/jasonleowsg/just-ship-that-mvp-not-56ge</link>
      <guid>https://dev.to/jasonleowsg/just-ship-that-mvp-not-56ge</guid>
      <description>&lt;p&gt;In the book &lt;em&gt;The Artist’s Way Every Day&lt;/em&gt;, author Julia Cameron talked about those moments of self-doubt when we are almost finished with our project, and just before launch, that self-critical voice ambushes you and does that thing it always does: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A critical failure of nerve at the last moment causes us to doubt the worthiness of projects we have birthed. Novels go into desk drawers. Plays languish on shelves. The pumpkin rots on the vine. How can we go forward from here? We must believe, first of all, in the worth of our brainchildren. We must not abandon them. We must keep them a priority. Faced with rejection, we must keep trying. At root, it comes back to being a matter of faith. We must see our work as divine in origin. We must believe there is a divine path of goodness ahead in its unfolding. When we are rejected, we must ask, “What next?” and not, “Why me?”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Indeed. &lt;/p&gt;

&lt;p&gt;This voice of self-doubt rears its ugly head all the time, just when I finish my rough MVP of a project. This is bad. It doesn't yet do all the stuff I want it to do. And before putting it on public domain, that voice said:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“This is shit. Don’t embarrass yourself by putting it out in public.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;And true enough, that self doubt would creep into how I shared and talked about it. I would be shy about sharing it, and ashamed of what it couldn’t yet do. And in typical self-fulfilling vicious cycle, the reception to the project will be cold. That would go on to make me question myself even further: did I waste a month of my time making something no one needs? Maybe I should do something else…&lt;/p&gt;

&lt;p&gt;But reading that passage in &lt;em&gt;The Artist’s Way Every Day&lt;/em&gt; was encouraging. That perhaps we all have that tendency to lose our nerve when we’re putting all of ourselves into something - our strengths and also all of our weakness, our vulnerabilities. &lt;/p&gt;

&lt;p&gt;And these moments of self-doubt are part of the ride. They are an important filtering process for testing if you have real faith in what you are doing. If you didn’t, then great, don’t waste your time and go on to another. If you did, then even better, you know your heart is right and you know what you have to do next. &lt;/p&gt;

&lt;p&gt;OK, what's next?&lt;/p&gt;




&lt;p&gt;Follow my daily writings on &lt;a href="https://golifelog.com/goals/30"&gt;Lifelog&lt;/a&gt;, where I write about learning to code, goals, productivity, indie hacking and tech for good.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>decodingcoding</category>
    </item>
    <item>
      <title>All About Hackathons!!!</title>
      <author>eshan1925</author>
      <pubDate>Sat, 25 Sep 2021 22:49:05 +0000</pubDate>
      <link>https://dev.to/eshan1925/all-about-hackathons-17pj</link>
      <guid>https://dev.to/eshan1925/all-about-hackathons-17pj</guid>
      <description>&lt;p&gt;Date of Event -: 25 September 2021&lt;br&gt;
Time: 10:00 P.M.&lt;br&gt;
Meeting Host -: &lt;a href="https://linktr.ee/eshan1925"&gt;Eshan Gupta&lt;/a&gt;&lt;br&gt;
Topic-: All about Hackathons &amp;amp; doubts,counselling session.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HDQFoSuy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.icegif.com/wp-content/uploads/hi-icegif.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HDQFoSuy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.icegif.com/wp-content/uploads/hi-icegif.gif" alt="hi"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hey,&lt;br&gt;
So this was the first event that was conducted by me at VIT, Vellore and the session/event gained approximate 60+ participants and was of approximately of 2.5 hrs.&lt;/p&gt;

&lt;p&gt;The event was really successful according to me as I was able to clear all the doubts that students had by the end of the session. Not only this the students were also very thankful to the host for organising such a session.&lt;/p&gt;

&lt;p&gt;Later on students demanded for two more sessions in the coming days and I being the host also definetly plan to keep these events shortly. The topics for the demanded events were-:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Topic 1-: Introduction to Open Source and Github&lt;/li&gt;
&lt;li&gt;Topic 2-: Introduction to LinkedIn&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WsLYMVMG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/F76vq7DKzgIAAAAC/jimmy-fallon-super-fun.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WsLYMVMG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/F76vq7DKzgIAAAAC/jimmy-fallon-super-fun.gif" alt="fun"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We had a loot of fun while the event lasted and many of the attendess approached and got connected with me after the event. Really it was a very nice experience guiding so many students at one time.&lt;/p&gt;

&lt;p&gt;The event was successfull and I also told all the students about the Importance of Hackathons and that there is not a loot of knowledge required for attending any Hackathon.Some of the other topics that were discussed during the session are-:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Importance of Hackathons&lt;/li&gt;
&lt;li&gt;What is HackThisFall?&lt;/li&gt;
&lt;li&gt;Advantage of taking part in HackThisFall&lt;/li&gt;
&lt;li&gt;Doubts related to VIT, Vellore&lt;/li&gt;
&lt;li&gt;Tech Stacks to choose for coming years&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thats all that happened in the event and to sum up I really enjoyed conducting and handling so many people at a time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o9EOmMrv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/qO2i2yn9saUAAAAM/peace-out-peace-sign.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o9EOmMrv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/qO2i2yn9saUAAAAM/peace-out-peace-sign.gif" alt="bye"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;THANKYOU😎&lt;br&gt;
Eshan Gupta&lt;/p&gt;

</description>
      <category>htf</category>
      <category>hackthisfall</category>
      <category>vit</category>
      <category>doubts</category>
    </item>
    <item>
      <title>Javascript - Into The Loop of Arrays</title>
      <author>Atif Aiman</author>
      <pubDate>Sat, 25 Sep 2021 22:20:32 +0000</pubDate>
      <link>https://dev.to/alserembani/javascript-into-the-loop-of-arrays-51ep</link>
      <guid>https://dev.to/alserembani/javascript-into-the-loop-of-arrays-51ep</guid>
      <description>&lt;p&gt;Salam and yosh!&lt;br&gt;
And this week, I want to talk something core about Javascript. Something that you cannot escape, always bothering at the end of your thought when coding, avoiding them is not an option. And that is data structures. Yes, the basics of data structures, but we focus on one thing - [array].&lt;/p&gt;

&lt;p&gt;You will always deal with arrays. Sooner or later, it will haunt your mind. What method should I use? How to manage arrays? How does array works?&lt;/p&gt;

&lt;p&gt;In the Javascript world, an array is actually an object, with the ability to loop within the array items, since the index is arranged accordingly, so the loop will go through the index sequence. Starting from 0. Wait, starts from 0?&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#array"&gt;
  &lt;/a&gt;
  Array
&lt;/h2&gt;

&lt;p&gt;An object, with &lt;code&gt;number&lt;/code&gt; as an index. Note that it is how the array works in Javascript, and not entirely applicable to other languages such as Python and others.&lt;/p&gt;

&lt;p&gt;With a number as an index, it is possible to follow the sequence, starting from 0. As bit starts with 0, that is why the array starts with 0 and not 1. Because the index is arranged in sequence, it is possible to loop every element inside an array.&lt;/p&gt;

&lt;p&gt;There are a lot of methods that can be used to loop through an array, with each of them serving a specific purpose, whether it modifies the array directly, or returning a new array or a value.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#the-normal-loop"&gt;
  &lt;/a&gt;
  The Normal Loop
&lt;/h2&gt;

&lt;p&gt;Of course, Javascript has loops as other languages have, and they are &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt; and &lt;code&gt;do...while&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// This loop will execute 10 times&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Same here&lt;/span&gt;
  &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;k&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Just the same, except the checking happens&lt;/span&gt;
  &lt;span class="c1"&gt;// after execution, opposite to `for` and `while` loop&lt;/span&gt;
  &lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Of course, there's nothing wrong with the usual loop method. Well, wait until you deal with the array. But here's a good thing about array. Every array has its own length by accessing &lt;code&gt;array.length&lt;/code&gt;. Why not use this information for the loop?&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#-raw-for-endraw-for-array"&gt;
  &lt;/a&gt;
  &lt;code&gt;for&lt;/code&gt; For Array
&lt;/h2&gt;

&lt;p&gt;For the first step, there is a &lt;code&gt;for&lt;/code&gt; loop that is specifically for array, and that is &lt;code&gt;for...of&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Durian&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Rambutan&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Nangka&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;fruit&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/* The output should be:

Durian
Rambutan
Nangka

*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Not to be confused, that there is actually a similar loop to this, which is &lt;code&gt;for...in&lt;/code&gt; which actually meant for an object instead and not array (yes, I know array also objects in Javascript, but that how it works!).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;fname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Atif&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;lname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Aiman&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;nname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;al-Serembani&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/* The output should be:

Atif
Aiman
al-Serembani

*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#for-a-better-loop-array-methods"&gt;
  &lt;/a&gt;
  For a Better Loop - Array Methods!
&lt;/h2&gt;

&lt;p&gt;Well, it is cool that we have &lt;code&gt;for...of&lt;/code&gt; to loop through an array, but there is a cooler way to loop through, and that is using array methods! There are tons, but with their own purposes. They are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;forEach&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;map&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;reduce&lt;/code&gt; and &lt;code&gt;reduceRight&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;filter&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;find&lt;/code&gt; and &lt;code&gt;findIndex&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;some&lt;/code&gt; and &lt;code&gt;every&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sort&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flatMap&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since they are methods, the usage is not like the pattern we used before, but chained with the array itself.&lt;/p&gt;

&lt;p&gt;Let's learn about them one by one, shall we?&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#-raw-arrayforeach-endraw-"&gt;
  &lt;/a&gt;
  &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach"&gt;&lt;code&gt;array.forEach&lt;/code&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;forEach&lt;/code&gt; is just like our typical &lt;code&gt;for...of&lt;/code&gt; loop. It &lt;strong&gt;does not return anything&lt;/strong&gt;, and &lt;strong&gt;didn't change the existing array&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Durian&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Rambutan&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Nangka&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nx"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/* The output should be:

Durian
Rambutan
Nangka

*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To explain a bit (will behave similarly across array methods later on), we loop through &lt;code&gt;fruits&lt;/code&gt; array using &lt;code&gt;forEach&lt;/code&gt;, and we pass &lt;code&gt;fruit&lt;/code&gt; for the pointer that holds the element for each array element. From there, you can do anything to each element.&lt;/p&gt;

&lt;p&gt;Since &lt;code&gt;forEach&lt;/code&gt; didn't return any value, that means the example below doesn't work.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fruit&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; juice&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// undefined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And &lt;code&gt;forEach&lt;/code&gt; didn't modify the existing array. This means the value will still same.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#-raw-arraymap-endraw-"&gt;
  &lt;/a&gt;
  &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map"&gt;&lt;code&gt;array.map&lt;/code&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6T_F0AyQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iujtds7eged1zz8kyry6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6T_F0AyQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iujtds7eged1zz8kyry6.png" alt="Array Map in Works"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;array.map&lt;/code&gt; will go through the array, and then &lt;strong&gt;return the same length of array with modified content&lt;/strong&gt;. It &lt;strong&gt;doesn't modify the original array&lt;/strong&gt; though.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Durian&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Rambutan&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Nangka&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;juices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;press&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;juices&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// ['Durian juice', 'Rambutan juice', 'Nangka juice'];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you noticed, I want to turn these fruits into juices, so I press every fruit and later I get the array of juices in return. Well, durian juice is indeed weird, but would you dare to try?&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#-raw-arrayreduce-endraw-and-raw-arrayreduceright-endraw-"&gt;
  &lt;/a&gt;
  &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce"&gt;&lt;code&gt;array.reduce&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight"&gt;&lt;code&gt;array.reduceRight&lt;/code&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3H5Y2yvP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8zf5hux1p9r16tmjzc6z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3H5Y2yvP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8zf5hux1p9r16tmjzc6z.png" alt="Array Reduce in Works"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;array.reduce&lt;/code&gt; will go through the array, and process everything, in &lt;strong&gt;return of a single value&lt;/strong&gt;. Different with &lt;code&gt;array.map&lt;/code&gt; that return the same length of the array of the target array. And still, not changing the original array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Durian&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Rambutan&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Nangka&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;salad&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;product&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;salad&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// DuRamNa Salad;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What I did here, I slice every fruit there is, and mixed with the product as it accumulates, and finally, the sliced fruits will be mixed together as a salad. Durian inside salad? Think again!&lt;/p&gt;

&lt;p&gt;So, where do you usually see &lt;code&gt;reduce&lt;/code&gt; in action? A really basic real-world example will be sum!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 55&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, what if you want to do the reverse way? Instead of starting from 0, do you want to start from the last element? For that case, we use &lt;code&gt;array.reduceRight&lt;/code&gt;! The same way of writing, except it, will start from the last index of the array.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#-raw-arrayfilter-endraw-"&gt;
  &lt;/a&gt;
  &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter"&gt;&lt;code&gt;array.filter&lt;/code&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B_LQN3ld--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ovn2v62ny6k1e9oo3lir.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B_LQN3ld--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ovn2v62ny6k1e9oo3lir.png" alt="Array Filter in Works"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;array.filter&lt;/code&gt; will loop through the array, and filter &lt;strong&gt;only when it matches the condition, or if it returns true&lt;/strong&gt;. The returned array will be &lt;strong&gt;based on the filtered result&lt;/strong&gt;, and it didn't change the original value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Durian&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Rambutan&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Nangka&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bigFruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isBig&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bigFruits&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// ['Durian', 'Nangka']&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I want to know which one is the big fruit. So I check the size of each fruit, and I get an array of big fruit in return. And now I know which one is big, and of course, Durian, king of fruits is one of them!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#-raw-arrayfind-endraw-and-raw-arrayfindindex-endraw-"&gt;
  &lt;/a&gt;
  &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find"&gt;&lt;code&gt;array.find&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex"&gt;&lt;code&gt;array.findIndex&lt;/code&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_9Bn_udJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6bgy2u6sb12vzqfqleja.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_9Bn_udJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6bgy2u6sb12vzqfqleja.png" alt="Array Find in Works"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;array.find&lt;/code&gt; will loop through the array, and &lt;strong&gt;only return one value which is the first occurrence that matches the condition&lt;/strong&gt;. Unlike &lt;code&gt;array.filter&lt;/code&gt; which return all that matches the condition.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Durian&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Rambutan&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Nangka&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bigFruit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isBig&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bigFruit&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Durian&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Durian is the first fruit in the array that is big. If durian doesn’t exist, nangka will be the next in line for the big fruit.&lt;/p&gt;

&lt;p&gt;So, what if I don't want to know what fruit is big, instead I want to know the position inside the array? Then, &lt;code&gt;array.findIndex&lt;/code&gt; will be a suitable method for you!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Durian&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Rambutan&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Nangka&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bigFruit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findIndex&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isBig&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bigFruit&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, what if we cannot find anything in an array that matches the condition? Then, it will return &lt;code&gt;undefined&lt;/code&gt; for &lt;code&gt;array.find&lt;/code&gt;, and &lt;code&gt;-1&lt;/code&gt; for &lt;code&gt;array.findIndex&lt;/code&gt;!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#-raw-arraysome-endraw-and-raw-arrayevery-endraw-"&gt;
  &lt;/a&gt;
  &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some"&gt;&lt;code&gt;array.some&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every"&gt;&lt;code&gt;array.every&lt;/code&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EGU61OYw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/stxlgyiynlajw0dhxnrt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EGU61OYw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/stxlgyiynlajw0dhxnrt.png" alt="Array Some and Every in Works"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;array.some&lt;/code&gt; and &lt;code&gt;array.every&lt;/code&gt; will loop through the array, and check whether it matches the condition. While this is also achievable using &lt;code&gt;array.reduce&lt;/code&gt; that returns a single value, &lt;code&gt;array.some&lt;/code&gt; will return true if any of the element matches the condition, while &lt;code&gt;array.every&lt;/code&gt; will return true if all elements match the condition. Both will return a boolean at the end of the day.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Durian&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Rambutan&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Nangka&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hasSmallFruit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;some&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isSmall&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hasSmallFruit&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;everthingBig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;every&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isBig&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;everythingBig&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I want to check if any of the fruit is small. Since rambutan is small, it will return true. And later on, I want to check if everything is big. Well, I might need a truck if everything is big!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#-raw-arraysort-endraw-"&gt;
  &lt;/a&gt;
  &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort"&gt;&lt;code&gt;array.sort&lt;/code&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KwbI_nfP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2yg57lgth0azwyae6tej.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KwbI_nfP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2yg57lgth0azwyae6tej.png" alt="Array Sort in Works"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;array.sort&lt;/code&gt; will loop through the array, and sort based on the condition. And of course, the return array will be at the same length, with the modified arrangement.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Durian&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Rambutan&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Nangka&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sortedFruit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;fruitA&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fruitB&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fruitA&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;fruitB&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fruitA&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;fruitB&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sortedFruit&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// ['Nangka', 'Durian', 'Rambutan']&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, I want to sort fruits based on their size. During the loop, it will take 2 parameters, the first fruit &lt;code&gt;fruitA&lt;/code&gt; and the second fruit &lt;code&gt;fruitB&lt;/code&gt;. It can be any first and any second, it will be managed by the sort function. Later, I compare them head-on to see which is the biggest of all fruits in this land.&lt;/p&gt;

&lt;p&gt;If it returns a positive number, it will put the first fruit in front.&lt;br&gt;
If it returns a negative number, it will put the first fruit at the back.&lt;br&gt;
If it returns 0, it will just put as it is, since rearrange them doesn't matter, anyway.&lt;/p&gt;

&lt;p&gt;As a result, now I know, even durian is the king of fruits, there is still bigger fruit which is nangka, so durian shouldn't feel too superior though.&lt;/p&gt;

&lt;p&gt;So, how about making reverse sort? Just change from positive return to negative return, and that's it! You will get reverse sort!&lt;/p&gt;

&lt;p&gt;Another thing. Is there a default sort method, so I don't have to pass a function to sort it? Of course, you can! If they are numbers, they will be sorted based on the number, and if it is a string, then it will be sorted based on the letter position in ASCII.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Durian&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Rambutan&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Nangka&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sortedFruit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sortedFruit&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// ['Durian', 'Nangka', 'Rambutan']&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#-raw-arrayflatmap-endraw-"&gt;
  &lt;/a&gt;
  &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap"&gt;&lt;code&gt;array.flatMap&lt;/code&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BfysMhmq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mojn2ql6b0826a2onq7x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BfysMhmq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mojn2ql6b0826a2onq7x.png" alt="Array Flat Map in Works"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Well, it actually work the same way with &lt;code&gt;array.map&lt;/code&gt; before, except that we are dealing with nested arrays.&lt;/p&gt;

&lt;p&gt;Actually, there is one array method called &lt;code&gt;array.flat&lt;/code&gt;, where it changes from the nested array (or non-single dimension array) and flat everything to only single dimension array. It is not a loop method, so that's why I didn't list it down.&lt;/p&gt;

&lt;p&gt;Combining the power of &lt;code&gt;array.flat&lt;/code&gt; and &lt;code&gt;array.map&lt;/code&gt;, the result is &lt;code&gt;array.flatMap&lt;/code&gt;, where it returns a new length of the flattened array.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#thats-about-it"&gt;
  &lt;/a&gt;
  That's About It!
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--djI9xD0I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ripy5gailkyqkkcsbqfa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--djI9xD0I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ripy5gailkyqkkcsbqfa.png" alt="All Array Loop Methods"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These are array methods you can use inside Javascript. It matches the ES2020 syntax, so you are welcome to use it.&lt;/p&gt;

&lt;p&gt;Note that &lt;strong&gt;all of the loop array methods didn't modify the original array&lt;/strong&gt;, so you don't have to worry. It will return a new value to their respective return method.&lt;/p&gt;

&lt;p&gt;Awesome, now you know basic things about array loop methods! Well, only if the data structure is simple that is! What if you are dealing with a nested array or objects inside arrays? Only practice will reveal everything for you. Still, you still need to use these methods. How complex can you make your loop?&lt;/p&gt;

&lt;p&gt;Okay guys! That's it for this week, and stay tuned! Until next time, peace be upon ya!&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Beautiful Hackernews UI: Working with Hackernews API in Python (Django) </title>
      <author>John Idogun</author>
      <pubDate>Sat, 25 Sep 2021 21:51:30 +0000</pubDate>
      <link>https://dev.to/sirneij/beautiful-hackernews-ui-working-with-hackernews-api-in-python-django-55ck</link>
      <guid>https://dev.to/sirneij/beautiful-hackernews-ui-working-with-hackernews-api-in-python-django-55ck</guid>
      <description>&lt;h2&gt;
  &lt;a href="#background"&gt;
  &lt;/a&gt;
  Background
&lt;/h2&gt;

&lt;p&gt;I was recently made to work with &lt;a href="https://hackernews.api-docs.io"&gt;Hackernews API&lt;/a&gt; using python (Django). &lt;a href="https://www.linkedin.com/feed/update/urn:li:activity:6847198480906125312/"&gt;There were several challenges&lt;/a&gt; faced by me during the project but I didn't give in. This post tends to document the application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#source-code"&gt;
  &lt;/a&gt;
  Source code
&lt;/h2&gt;

&lt;p&gt;The code for the project is on GitHub.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Sirneij"&gt;
        Sirneij
      &lt;/a&gt; / &lt;a href="https://github.com/Sirneij/Hackernews"&gt;
        Hackernews
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Hackernews clone with more beautiful UI, interactivity, and others built using Django and JavaScript
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Hackernews&lt;/h1&gt;
&lt;h2&gt;
Latest update&lt;/h2&gt;
&lt;p&gt;Changed the algorithm used in fetching the stories from the &lt;a href="https://hackernews.api-docs.io" title="Hackernews API" rel="nofollow"&gt;API&lt;/a&gt;. Instead of getting only the new (latest) stories, I now get the maximum or largest (latest) item ID, then walk backwards to fetch subsequent ones:&lt;/p&gt;
&lt;div class="highlight highlight-source-python position-relative js-code-highlight"&gt;
&lt;pre&gt;...

&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;get_max_item_id&lt;/span&gt;():
    &lt;span class="pl-s1"&gt;max_item_id&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-s1"&gt;requests&lt;/span&gt;.&lt;span class="pl-en"&gt;get&lt;/span&gt;(&lt;span class="pl-s"&gt;f"&lt;span class="pl-s1"&gt;&lt;span class="pl-kos"&gt;{&lt;/span&gt;&lt;span class="pl-v"&gt;BASE_API_URL&lt;/span&gt;&lt;span class="pl-kos"&gt;}&lt;/span&gt;&lt;/span&gt;/maxitem.json"&lt;/span&gt;)
    &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-s1"&gt;max_item_id&lt;/span&gt;.&lt;span class="pl-en"&gt;json&lt;/span&gt;()

&lt;span class="pl-en"&gt;@&lt;span class="pl-s1"&gt;shared_task&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;store_latest_stories&lt;/span&gt;():
    &lt;span class="pl-s1"&gt;max_item_id&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;get_max_item_id&lt;/span&gt;()
    &lt;span class="pl-k"&gt;for&lt;/span&gt; &lt;span class="pl-s1"&gt;sid&lt;/span&gt; &lt;span class="pl-c1"&gt;in&lt;/span&gt; &lt;span class="pl-en"&gt;reversed&lt;/span&gt;(&lt;span class="pl-en"&gt;range&lt;/span&gt;(&lt;span class="pl-s1"&gt;max_item_id&lt;/span&gt;)):
        &lt;span class="pl-s1"&gt;story_response&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;get_item&lt;/span&gt;(&lt;span class="pl-s1"&gt;sid&lt;/span&gt;)
        ...&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Also, the UI now allows only the item types available in the database for filtering. As soon as a new item type is fetched from the &lt;a href="https://hackernews.api-docs.io" title="Hackernews API" rel="nofollow"&gt;API&lt;/a&gt;, it will automatically be added to the filters.&lt;/p&gt;
&lt;h2&gt;
Update&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;It is live on heroku at &lt;a href="https://newhackernews.herokuapp.com/" title="newhackernews.herokuapp.com" rel="nofollow"&gt;newhackernews.herokuapp.com&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This application tends to make it easier to navigate Hackernews by utilizing its public &lt;a href="https://hackernews.api-docs.io" title="Hackernews API" rel="nofollow"&gt;API&lt;/a&gt;. It provides a…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/Sirneij/Hackernews"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#latest-update"&gt;
  &lt;/a&gt;
  Latest update
&lt;/h2&gt;

&lt;p&gt;Changed the algorithm used in fetching the stories from the &lt;a href="https://hackernews.api-docs.io"&gt;API&lt;/a&gt;. Instead of getting only the new (latest) stories, I now get the maximum or largest (latest) item ID, then walk backwards to fetch subsequent ones:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_max_item_id&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;max_item_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;BASE_API_URL&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;/maxitem.json"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;max_item_id&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;shared_task&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;store_latest_stories&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;max_item_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_max_item_id&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;sid&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;reversed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_item_id&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
        &lt;span class="n"&gt;story_response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also, the UI now allows only the item types available in the database for filtering. As soon as a new item type is fetched from the &lt;a href="https://hackernews.api-docs.io"&gt;API&lt;/a&gt;, it will automatically be added to the filters.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#update"&gt;
  &lt;/a&gt;
  Update
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;It is live on Heroku at &lt;a href="https://newhackernews.herokuapp.com/"&gt;newhackernews.herokuapp.com&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This application tends to make it easier to navigate Hackernews by utilizing its public &lt;a href="https://hackernews.api-docs.io"&gt;API&lt;/a&gt;. It provides a better UX and interactivity courtesy its real-time searching and filtering capabilities, beautiful UI, and lazy-loading. Custom API was also incorporated for ease of accessibility, though &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST"&gt;POST requests&lt;/a&gt; require &lt;a href="https://www.okta.com/identity-101/what-is-token-based-authentication/"&gt;token-based authentication&lt;/a&gt;. Though it depends on hackernews API, all the available data are stored in a separate database and hosted on this platform thereby providing parallel storage and preventing a single source of failure. Hence more reliable. It looks like:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Qn_MHeaq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/07xz87yit2hajmljxvtu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qn_MHeaq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/07xz87yit2hajmljxvtu.png" alt="Home page of the application" title="Home page of the application"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9ve_VLY1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mp2j729pap3j5ba2hw3b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9ve_VLY1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mp2j729pap3j5ba2hw3b.png" alt="Detail page of each story in the application" title="Detail page of each story in the application"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Data are being consumed every 5 minutes via a background task powered by &lt;a href="https://docs.celeryproject.org/en/stable/django/first-steps-with-django.html"&gt;Celery&lt;/a&gt; with &lt;a href="https://redis.io/"&gt;redis&lt;/a&gt; as the broker. This presents performance gains as users do not need to wait for such actions' completions.&lt;/p&gt;

&lt;p&gt;The application also provides an in-depth text searching with search term highlighting. Though it is not an enterprise grade full-text search functionality but it is close to that. PostgreSQL could have been used as database to facilitate full-text search but it was later dropped during development. It ended up being used in production.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#local-setup"&gt;
  &lt;/a&gt;
  Local setup
&lt;/h2&gt;

&lt;p&gt;The application was built on a Linux machine (Pop!_OS 20.04 LTS) with &lt;a href="https://www.python.org/"&gt;Python&lt;/a&gt; 3.8.10, &lt;a href="https://git-scm.com/downloads"&gt;git&lt;/a&gt;, and &lt;a href="https://redis.io/"&gt;Redis&lt;/a&gt; installed. Virtual environment was managed by &lt;a href="http://manpages.ubuntu.com/manpages/impish/man1/pipenv.1.html"&gt;pipenv&lt;/a&gt; though you can opt for other virtual environment tools (&lt;code&gt;requirements.txt&lt;/code&gt; is included). Ensure your machine has all these tools to locally run this web application.&lt;/p&gt;

&lt;p&gt;A typical setup to the app up and running locally is stated below:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Get the program source files: You can clone it from GitHub via:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git clone https://github.com/Sirneij/Hackernews.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Change directory into the source code folder:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;Hackernews
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Activate virtual environment (&lt;a href="http://manpages.ubuntu.com/manpages/impish/man1/pipenv.1.html"&gt;pipenv&lt;/a&gt; is used here but you can use virtualenv, venv, poetry, or conda):&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pipenv shell
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install the web application's dependencies (again, &lt;a href="http://manpages.ubuntu.com/manpages/impish/man1/pipenv.1.html"&gt;pipenv&lt;/a&gt; is used here but you are at liberty to use any other tool. &lt;code&gt;requirements.txt&lt;/code&gt; is included):&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pipenv &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create migrations (migrations folder already populated. If you prefer to start afresh, delete all the files in the &lt;code&gt;migrations&lt;/code&gt; folder of each major app — &lt;code&gt;accounts&lt;/code&gt;, and &lt;code&gt;news&lt;/code&gt; — except the &lt;code&gt;__init__.py&lt;/code&gt; files. Then, in your terminal, execute &lt;code&gt;python manage.py makemigrations&lt;/code&gt;):&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;python manage.py migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can opt to create super user by executing:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;python manage.py createsuperuser
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Provide the details requested by the prompts that follow.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run the application. You will need a second terminal to start the &lt;a href="https://docs.celeryproject.org/en/stable/django/first-steps-with-django.html"&gt;Celery&lt;/a&gt; tasks. In one terminal, start the application:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;python manage.py runserver
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;You can &lt;strong&gt;optionally&lt;/strong&gt; provide a port as the default port is &lt;code&gt;8000&lt;/code&gt;. To provide a port, the command above becomes:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;python manage.py runserver port_number
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;You can now visit your browser and navigate to &lt;code&gt;http://localhost:8000/&lt;/code&gt; or &lt;code&gt;http://localhost:port_number/&lt;/code&gt; as the case may be.&lt;/p&gt;

&lt;p&gt;In the second terminal, start the celery tasks by (ensure your virtual environment is activated):&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;celery &lt;span class="nt"&gt;-A&lt;/span&gt; hackernews worker &lt;span class="nt"&gt;-l&lt;/span&gt; info &lt;span class="nt"&gt;-B&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#about-the-web-application"&gt;
  &lt;/a&gt;
  About the Web application
&lt;/h2&gt;

&lt;p&gt;The application was built using &lt;a href="https://www.djangoproject.com/"&gt;Django web framework&lt;/a&gt;, &lt;a href="https://tailwindcss.com/"&gt;Tailwind CSS&lt;/a&gt;, &lt;a href="https://www.sqlite.org/index.html"&gt;SQLite&lt;/a&gt; database (&lt;a href="https://www.postgresql.org/"&gt;PostgreSQL&lt;/a&gt; in production or on &lt;a href="https://heroku.com"&gt;heroku&lt;/a&gt;) and &lt;a href="https://redis.io/"&gt;Redis&lt;/a&gt; as a broker for &lt;a href="https://docs.celeryproject.org/en/stable/django/first-steps-with-django.html"&gt;celery&lt;/a&gt;. Lazy loading, real-time search and filtering were fascinated by &lt;a href="https://api.jquery.com/jquery.ajax/"&gt;jQuery ajax&lt;/a&gt; including infinite scroll capabilities. It has the following structure:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;.&lt;/span&gt;
├── accounts
│   ├── admin.py
│   ├── apps.py
│   ├── __init__.py
│   ├── migrations
│   │   ├── 0001_initial.py
│   │   └── __init__.py
│   ├── models.py
│   ├── tests.py
│   └── views.py
├── api
│   ├── admin.py
│   ├── apps.py
│   ├── __init__.py
│   ├── migrations
│   │   └── __init__.py
│   ├── permissions.py
│   ├── serializers.py
│   ├── tests.py
│   ├── urls.py
│   └── views.py
├── celerybeat-schedule
├── db.sqlite3
├── detail.png
├── hackernews
│   ├── asgi.py
│   ├── celery.py
│   ├── __init__.py
│   ├── settings
│   │   ├── base.py
│   │   ├── development.py
│   │   ├── __init__.py
│   │   └── production.py
│   ├── urls.py
│   └── wsgi.py
├── home.png
├── manage.py
├── news
│   ├── admin.py
│   ├── apps.py
│   ├── __init__.py
│   ├── migrations
│   │   ├── 0001_initial.py
│   │   ├── 0002_alter_comment_story.py
│   │   └── __init__.py
│   ├── models.py
│   ├── tasks.py
│   ├── templatetags
│   │   ├── custom_tags.py
│   │   └── __init__.py
│   ├── tests.py
│   ├── urls.py
│   ├── utils.py
│   └── views.py
├── Pipfile
├── Pipfile.lock
├── Procfile
├── pyproject.toml
├── README.md
├── requirements.txt
├── runtime.txt
├── setup.cfg
├── static
│   ├── admin
│   │   ├── css
│   │   │   ├── autocomplete.css
│   │   │   ├── ...
│   │   ├── fonts
│   │   │   ├── LICENSE.txt
│   │   │   ├── ...
│   │   ├── img
│   │   │   ├── calendar-icons.svg
│   │   │   ├── ...
│   │   └── js
│   │       ├── actions.js
│   │       ├── ...
│   ├── css
│   │   ├── all.min.css
│   │   ├── style.css
│   │   └── tailwind.min.css
│   ├── images
│   │   └── useravatar.png
│   ├── js
│   │   ├── jquery.min.js
│   │   ├── mark.min.js
│   │   └── scripts.js
│   └── webfonts
│       ├── fa-brands-400.eot
│       ├── ...
└── templates
    ├── base.html
    ├── includes
    │   └── _header.html
    └── news
        ├── comments.html
        ├── commons
        │   └── _filters.html
        ├── detail.html
        ├── index.html
        └── stories.html

32 directories, 210 files
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The major apps are &lt;code&gt;news&lt;/code&gt; and &lt;code&gt;accounts&lt;/code&gt;. While the former handles almost all the physical functionalities of the system, the latter only does user stuff. The &lt;code&gt;api&lt;/code&gt; app exposes the data for consumption. It is documented using &lt;a href="https://github.com/axnsan12/drf-yasg/"&gt;drf-yasg&lt;/a&gt;, a &lt;a href="https://swagger.io/"&gt;Swagger&lt;/a&gt; generation tool implemented without using the schema generation provided by Django Rest Framework. The &lt;code&gt;api&lt;/code&gt; has a &lt;a href="https://www.okta.com/identity-101/what-is-token-based-authentication/"&gt;token-based authentication&lt;/a&gt; which requires that all &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST"&gt;POST requests&lt;/a&gt; must provide a &lt;code&gt;token&lt;/code&gt; to be accepted, otherwise a not too interesting response:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"detail"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Authentication credentials were not provided."&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;will be given. To get a token, you can use the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;http POST http://127.0.0.1:8000/api/api-token-auth/ &lt;span class="nv"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;your_username &lt;span class="nv"&gt;password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;your_password
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or in your terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;python manage.py drf_create_token user_name
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the user account is available, you should have a response like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;HTTP/&lt;/span&gt;&lt;span class="mf"&gt;1.1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;OK&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;Allow:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;POST,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;OPTIONS&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;Content-Length:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;52&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;Content-Type:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;application/json&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;Date:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Fri,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Sep&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2021&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;08&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;GMT&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;Referrer-Policy:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;same-origin&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;Server:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;WSGIServer/&lt;/span&gt;&lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;CPython/&lt;/span&gt;&lt;span class="mf"&gt;3.8&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;X-Content-Type-Options:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;nosniff&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;X-Frame-Options:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;DENY&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"token"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"55868c9d71901f4bb09059eb0a669485511586f7"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or (for terminal):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Generated token 55868c9d71901f4bb09059eb0a669485511586f7 &lt;span class="k"&gt;for &lt;/span&gt;user sirneij
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can then use the token for requests such as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;http POST http://localhost:8000/api/latest-stories/ &lt;span class="s1"&gt;'Authorization: Token 55868c9d71901f4bb09059eb0a669485511586f7'&lt;/span&gt; &lt;span class="nv"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Just testing"&lt;/span&gt; &lt;span class="nv"&gt;story_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"story"&lt;/span&gt; &lt;span class="nv"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Just some text"&lt;/span&gt; &lt;span class="nv"&gt;dead&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false &lt;/span&gt;&lt;span class="nv"&gt;story_url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"http://localhost:8000/api/latest-stories/"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;which should give you something like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;HTTP/&lt;/span&gt;&lt;span class="mf"&gt;1.1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;201&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Created&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;Allow:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;GET,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;POST,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;HEAD,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;OPTIONS&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;Content-Length:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;399&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;Content-Type:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;application/json&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;Date:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Fri,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Sep&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2021&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;08&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;44&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;03&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;GMT&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;Location:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;http://localhost:&lt;/span&gt;&lt;span class="mi"&gt;8000&lt;/span&gt;&lt;span class="err"&gt;/api/latest-stories/dd&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="err"&gt;fdcdd-da&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="err"&gt;f&lt;/span&gt;&lt;span class="mi"&gt;-45&lt;/span&gt;&lt;span class="err"&gt;c&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="err"&gt;-a&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="err"&gt;bb-e&lt;/span&gt;&lt;span class="mi"&gt;883&lt;/span&gt;&lt;span class="err"&gt;b&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="err"&gt;a&lt;/span&gt;&lt;span class="mi"&gt;16419&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;Referrer-Policy:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;same-origin&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;Server:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;WSGIServer/&lt;/span&gt;&lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;CPython/&lt;/span&gt;&lt;span class="mf"&gt;3.8&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;Vary:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Accept&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;X-Content-Type-Options:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;nosniff&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;X-Frame-Options:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;DENY&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"author"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"sirneij"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"created_by"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"sirneij"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"dead"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"descendants"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"dd6fdcdd-da6f-45c8-a3bb-e883b5a16419"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"score"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"slug"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"just-testing"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"story_type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"story"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"story_url"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"http://localhost:8000/api/latest-stories/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"text"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Just some text"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"time"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2021-09-24T08:44:03.688895Z"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Just testing"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"url"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"http://localhost:8000/api/latest-stories/dd6fdcdd-da6f-45c8-a3bb-e883b5a16419/"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you need to make this request in a python application using the &lt;a href="https://docs.python-requests.org/en/latest/"&gt;requests&lt;/a&gt; library, you can do something like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;

&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'http://localhost:8000/api/latest-stories/'&lt;/span&gt;
&lt;span class="n"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="s"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Title of the story"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"story_type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"story"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"text"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"some text"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"dead"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"story_url"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"http://example.com"&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'Authorization'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Token 55868c9d71901f4bb09059eb0a669485511586f7'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can achieve same with JavaScript's &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch"&gt;fetch&lt;/a&gt;, or &lt;a href="https://www.npmjs.com/package/axios"&gt;axios&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;That is pretty much it!!!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Suggestions to make it better are welcome.&lt;/strong&gt;*&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You can connect with or follow me on &lt;a href="https://www.linkedin.com/in/idogun-john-nelson/"&gt;LinkedIn&lt;/a&gt;, and &lt;a href="//mailto:sirneij@gmail.com"&gt;contact me for a job, something worthwhile or buying a coffee ☕&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>python</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
