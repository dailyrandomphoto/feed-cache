<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Disabling Angular animations at runtime</title>
      <author>Dzhavat Ushev</author>
      <pubDate>Tue, 09 Mar 2021 16:24:50 +0000</pubDate>
      <link>https://dev.to/this-is-angular/disabling-angular-animations-at-runtime-9a6</link>
      <guid>https://dev.to/this-is-angular/disabling-angular-animations-at-runtime-9a6</guid>
      <description>&lt;p&gt;A nice new feature is coming to Angular v12 - support for disabling Angular animations at runtime 🎉&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: This feature was added in &lt;a href="https://github.com/angular/angular/blob/master/CHANGELOG.md#1200-next3-2021-03-03"&gt;v12.0.0-next.3&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Up until now, the only way to disable Angular animations was to provide &lt;a href="https://angular.io/api/platform-browser/animations/NoopAnimationsModule"&gt;&lt;code&gt;NoopAnimationsModule&lt;/code&gt;&lt;/a&gt;. But this approach has one big limitation - it completely disables all animations during build time. So you either build your app with or without animations. It was not possible to postpone this decision to a later point, say when the app bootstraps.  &lt;/p&gt;

&lt;p&gt;Fortunately this is changing. In v12 you can pass a &lt;a href="https://next.angular.io/api/platform-browser/animations/BrowserAnimationsModuleConfig"&gt;config&lt;/a&gt; to &lt;a href="https://next.angular.io/api/platform-browser/animations/BrowserAnimationsModule"&gt;&lt;code&gt;BrowserAnimationsModule&lt;/code&gt;&lt;/a&gt;. The config object currently supports only one property - &lt;code&gt;disableAnimations&lt;/code&gt;. Setting it to &lt;code&gt;true&lt;/code&gt; will disable animations. The awesome thing is that you can do that at runtime, while your app bootstraps!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-would-you-use-it" class="anchor"&gt;
  &lt;/a&gt;
  Why would you use it?
&lt;/h3&gt;

&lt;p&gt;You might already have some uses cases for disabling animations in your app. That's great!&lt;/p&gt;

&lt;p&gt;One other use case that comes to my mind is making your app more accessible by respecting your users' preferences for minimizing the amount of non-essential motion.&lt;/p&gt;

&lt;p&gt;There's an OS/browser setting that the user can toggle, which notifies your app that the user prefers reduced motion. You can capture that signal using the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-motion"&gt;&lt;code&gt;prefers-reduced-motion&lt;/code&gt;&lt;/a&gt; CSS media query.&lt;/p&gt;

&lt;p&gt;"But I have a TypeScript file and this is a CSS media query. How do I combine them?", I hear you say. Fear not! You can use &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia"&gt;&lt;code&gt;matchMedia&lt;/code&gt;&lt;/a&gt; method to check whether a string matches a specific media query. &lt;code&gt;matchMedia&lt;/code&gt; returns a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList"&gt;&lt;code&gt;MediaQueryList&lt;/code&gt;&lt;/a&gt; that has a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList/matches"&gt;&lt;code&gt;matches&lt;/code&gt;&lt;/a&gt; property set to &lt;code&gt;true&lt;/code&gt; if the document currently matches the media query list, or &lt;code&gt;false&lt;/code&gt; if not.&lt;/p&gt;

&lt;p&gt;Let’s see it in action (also check out this &lt;a href="https://stackblitz.com/edit/angular-ivy-r8rni5?file=src/app/app.module.ts"&gt;StackBlitz&lt;/a&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;NgModule&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BrowserAnimationsModule&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@angular/platform-browser/animations&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;AppComponent&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./app.component&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;prefersReducedMotion&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mediaQueryList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;matchMedia&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;(prefers-reduced-motion)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;mediaQueryList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;NgModule&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;imports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="nx"&gt;BrowserAnimationsModule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;withConfig&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;disableAnimations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;prefersReducedMotion&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;declarations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;AppComponent&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;bootstrap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;AppComponent&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppModule&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's a demo of how this works on Windows:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tIqizYMw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/66gtkvnyizgddf1fj1eo.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tIqizYMw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/66gtkvnyizgddf1fj1eo.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To see how to disable animations on other OS, checkout the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-motion"&gt;&lt;code&gt;prefers-reduced-motion&lt;/code&gt;&lt;/a&gt; article on MDN.&lt;/p&gt;

&lt;p&gt;One thing to keep in mind is that once the app is done bootstrapping, it's no longer possible to disable/enable animations again.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href="https://twitter.com/_crisbeto"&gt;Kristiyan Kostadinov&lt;/a&gt; for this &lt;a href="https://github.com/angular/angular/pull/40731"&gt;contribution&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>angular</category>
      <category>animations</category>
    </item>
    <item>
      <title>Setting The Default Terminal In VS Code</title>
      <author>Amanda Giannelli</author>
      <pubDate>Tue, 09 Mar 2021 14:09:53 +0000</pubDate>
      <link>https://dev.to/giannellitech/setting-the-default-terminal-in-vs-code-95c</link>
      <guid>https://dev.to/giannellitech/setting-the-default-terminal-in-vs-code-95c</guid>
      <description>&lt;p&gt;Sometimes you want a tutorial that is straight and to the point. You want the &lt;em&gt;how&lt;/em&gt;, not the who, what, where, when, why. &lt;/p&gt;

&lt;p&gt;Today's quick lesson: setting the default terminal in VS Code. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#steps" class="anchor"&gt;
  &lt;/a&gt;
  Steps
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;Open VS Code&lt;/li&gt;
&lt;li&gt;Press &lt;code&gt;CTRL+Shift+P&lt;/code&gt; / &lt;code&gt;⇧⌘P&lt;/code&gt;  and search for &lt;code&gt;terminal select default shell&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Make your selection and press enter (In my case I chose &lt;code&gt;Git Bash&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All of your new terminals will now default to your choice 🎉 &lt;/p&gt;

&lt;p&gt;I hoped this helped you. If there are other quick tips you'd like, or more in depth topics you'd like me to cover, leave a comment or reach out to me, &lt;a href="https://twitter.com/GiannelliTech"&gt;@giannelli.tech&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for reading! 👩‍💻&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Photo by &lt;a href="https://www.pexels.com/@pixabay?utm_content=attributionCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=pexels"&gt;Pixabay&lt;/a&gt; from &lt;a href="https://www.pexels.com/photo/blur-bright-business-codes-207580/?utm_content=attributionCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=pexels"&gt;Pexels&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>tutorial</category>
      <category>beginners</category>
      <category>devjournal</category>
      <category>todayilearned</category>
    </item>
    <item>
      <title>How State Management  works? Dead simple SM in Vanilla JavaScript</title>
      <author>Vijay Pushkin</author>
      <pubDate>Tue, 09 Mar 2021 14:04:40 +0000</pubDate>
      <link>https://dev.to/vijaypushkin/dead-simple-state-management-in-vanilla-javascript-24p0</link>
      <guid>https://dev.to/vijaypushkin/dead-simple-state-management-in-vanilla-javascript-24p0</guid>
      <description>&lt;p&gt;Dead simple State Management in Vanilla JavaScript&lt;br&gt;
It's been years now since you started using Redux, MobX or even plain React Hooks and have no idea how state management works and why it works the way it works? I'll show you the dead simple bottom level of work in state management sans any optimization or other bells and whistles.&lt;/p&gt;

&lt;p&gt;We will be building a stupidly simple plain ol' HTML page with script tags in it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;State Management in Vanilla JS&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"app"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
      &lt;span class="c1"&gt;// &lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's write some JavaScript.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; TL;DR; is down below ⏬&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;_App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`
    &amp;lt;h1&amp;gt;Hello Vanilla JS&amp;lt;/h1&amp;gt;
    &amp;lt;div&amp;gt;Example of state management in Vanilla JS&amp;lt;/div&amp;gt;
  `&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;app&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I could have simply declared as&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="c1"&gt;// or&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But there's reason I didn't, which I'll explain later. Now, let's create some state&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A simple state created as a property on App function. 😉&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Wait! You can do that?&lt;/em&gt; 😲&lt;/p&gt;

&lt;p&gt;Yes, everything in JavaScript is an object, and technically you can even do that on strings and numbers. That is why methods like &lt;code&gt;"hello world".toUppercase()&lt;/code&gt; and &lt;code&gt;(12).toFixed(2)&lt;/code&gt; would work. But the compiler doesn't allow you to define your own properties on a string or number.&lt;/p&gt;

&lt;p&gt;Now that App has been made stateful, we shall integrate the state and add a click event listener at the end of file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="s2"&gt;`
  &amp;lt;h1&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;_App&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/h1&amp;gt;
  &amp;lt;button id="button"&amp;gt;Increase&amp;lt;/button&amp;gt;
`&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;app&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// On Click Function&lt;/span&gt;
&lt;span class="nb"&gt;document&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that I'm accessing App inside itself by neither &lt;code&gt;this&lt;/code&gt; nor by &lt;code&gt;App&lt;/code&gt; but by &lt;code&gt;_App&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There are two special things about the name &lt;code&gt;_App&lt;/code&gt;:&lt;br&gt;
It allows the function to reference itself internally.&lt;br&gt;
It is not visible outside of the function.&lt;/p&gt;

&lt;p&gt;Even if I do something like this below, the code won't break.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;app&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Even when App has been reassigned to Component and then made to be null, the function itself remains intact and it refers itself as _App locally, hence it is not affected. Same as '&lt;code&gt;this&lt;/code&gt;' in every other OOP programming language (We all know how &lt;code&gt;this&lt;/code&gt;  works in JavaScript)😅.&lt;/p&gt;

&lt;p&gt;Now try running it (simply double the index.html file). Notice that the on click function isn't working! 🙄 It's because the UI is not reflecting the latest state, let's fix that by re-rendering the elements. This can be done by running this code again when the state is updated.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;app&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// On Click Function&lt;/span&gt;
&lt;span class="nb"&gt;document&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since this code is and will be repeated, we will extract it to a function&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;updateTree&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;app&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// On Click Function&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and update the increment function as&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;updateTree&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// extracted function&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now our App works as expected. And that's it! that's the end of Dead simple State Management in Vanilla JavaScript. However just using as it is would be consider as an awful and poor framework, not because of its lack of any bell and whistles worthy feature, but because it is poorly optimised, in fact it has no optimisation, but you already know this when I said &lt;em&gt;"…sans any optimization or other bells and whistles"&lt;/em&gt; in the beginning of this article.&lt;/p&gt;

&lt;p&gt;Things to do,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Should not render the whole application to reflect a simple change.&lt;/li&gt;
&lt;li&gt;As soon as we update to reflect the state, all the event listeners attached to DOM should not be lost and we shouldn't add new event listeners in its place.&lt;/li&gt;
&lt;li&gt;The DOM elements that were unaffected and unchanged by state should not be forced to change. Changes should be as small as possible&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So we shall few optimisations to our App like how React and similar library / framework does in the next upcoming article.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tldr" class="anchor"&gt;
  &lt;/a&gt;
  TL;DR;
&lt;/h2&gt;

&lt;p&gt;Here is the full HTML file we have coded so far.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;State Management in Vanilla JS&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"app"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;_App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`
          &amp;lt;h1&amp;gt;Hello Vanilla JS!&amp;lt;/h1&amp;gt;
          &amp;lt;div&amp;gt;
            Example of state management in Vanilla JS
          &amp;lt;/div&amp;gt;
          &amp;lt;br /&amp;gt;
          &amp;lt;h1&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;_App&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/h1&amp;gt;
          &amp;lt;button id="button"&amp;gt;Increase&amp;lt;/button&amp;gt;
        `&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;

      &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="nx"&gt;updateTree&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;

      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;updateTree&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;app&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nb"&gt;document&lt;/span&gt;
          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;

      &lt;span class="nx"&gt;updateTree&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>react</category>
    </item>
    <item>
      <title>21 Vue.js Example Projects to Learn From (Open-source, Beginner to Intermediate Level)</title>
      <author>Syakir Rahman</author>
      <pubDate>Tue, 09 Mar 2021 13:31:20 +0000</pubDate>
      <link>https://dev.to/syakirurahman/21-vue-js-example-projects-to-learn-from-open-source-beginner-to-intermediate-level-5bnk</link>
      <guid>https://dev.to/syakirurahman/21-vue-js-example-projects-to-learn-from-open-source-beginner-to-intermediate-level-5bnk</guid>
      <description>&lt;p&gt;This post was originally published at &lt;a href="https://www.devaradise.com/vue-example-projects"&gt;&lt;/a&gt;&lt;a href="https://www.devaradise.com/vue-example-projects"&gt;https://www.devaradise.com/vue-example-projects&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://vuejs.org/" rel="noreferrer noopener"&gt;Vue.js&lt;/a&gt; is one of the most popular javascript frameworks along with &lt;a href="https://www.devaradise.com/category/react-tutorials"&gt;React.js&lt;/a&gt; and Angular. It designed to be incrementally adoptable and focused on the view layer only.&lt;/p&gt;

&lt;p&gt;It has very well documentation and video courses by &lt;a href="https://www.vuemastery.com/" rel="noreferrer noopener nofollow"&gt;Vuemastery&lt;/a&gt; and &lt;a href="https://vueschool.io/" rel="noreferrer noopener"&gt;Vueschool&lt;/a&gt; to help you learn the fundamental of Vue.js.&lt;/p&gt;

&lt;p&gt;However, learning from documentation and tutorial is not enough. You should also learn from Vue.js example projects to know how people use it and best practices for some cases.&lt;/p&gt;

&lt;p&gt;Taking a look at the example projects will also encourage you to practice what you have learned from the tutorial.&lt;/p&gt;

&lt;p&gt;In this post, I will share the list of Vue.js example projects that I compiled from Github. I sorted them from beginner to intermediate level.&lt;/p&gt;

&lt;h4&gt;Related Posts&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.devaradise.com/react-example-projects"&gt;21 React Example Projects (Open-source, Beginner-Intermediate Level)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.devaradise.com/flutter-example-apps"&gt;21 Flutter Example Apps (Opensource, Beginner-Intermediate Level)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;How To Learn Vue.js Example Projects / Case Studies?&lt;/h2&gt;

&lt;p&gt;Before you choose an example project, Here are some tips when learn from example projects.&lt;/p&gt;

&lt;h3&gt;1. Choose Only One Project at A Time&lt;/h3&gt;

&lt;p&gt;With so many open-source projects available on Github, we often feel overwhelmed with them. That’s okay.&lt;/p&gt;

&lt;p&gt;But, when you really want to learn from those projects, never do that by learning them at once. &lt;a href="https://brainfodder.org/multi-tasking-doesnt-work/" rel="noreferrer noopener nofollow"&gt;Human brains aren’t designed to multi-task&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You should filter them, and choose only one project that you really want to learn. After you finished it, then you can choose the next project.&lt;/p&gt;

&lt;h3&gt;2. Replicates, But Don’t Copy-Paste the Codes&lt;/h3&gt;

&lt;p&gt;With an example project, you might think that you will learn it only by reading the codes. No, you don’t.&lt;/p&gt;

&lt;p&gt;You should rewrite it on your own, and don’t just copy-pasting it. It may sound trivial, but trust me you will find out more as you rewrite the codes.&lt;/p&gt;

&lt;h3&gt;3. Be Curious, Find out Why the Codes Work&lt;/h3&gt;

&lt;p&gt;In the rewriting process, you will find some codes that aren’t familiar with you.&lt;/p&gt;

&lt;p&gt;When this happened, be curious to find why those codes work. Because it will likely to increase your knowledge.&lt;/p&gt;

&lt;h3&gt;4. Experiment, and Add Your Own Flavour&lt;/h3&gt;

&lt;p&gt;After you find some unfamiliar codes, do some experiment with them. Modify them, see if it still works or not, and again, find out why.&lt;/p&gt;

&lt;p&gt;You should also add your own codes as you learn more. Combine it with the base codes. It can be styling or adding more features.&lt;/p&gt;

&lt;p&gt;With enough modification, you can make it as your portfolio, of course by mentioning the example project you use.&lt;/p&gt;

&lt;h3&gt;5. Have Patience and Stay Focused&lt;/h3&gt;

&lt;p&gt;Last but not least, have patience while you learn. Don’t rush, and stay focused. It will takes time, but it worth it.&lt;/p&gt;

&lt;p&gt;Good luck!&lt;/p&gt;

&lt;h2&gt;What are the Vue.js Example Projects to Learn From?&lt;/h2&gt;

&lt;p&gt;Now, you can choose one of the following projects to learn. I sort them from the easiest to moderate level.&lt;/p&gt;

&lt;p&gt;Remember, only pick one project to learn at a time!&lt;/p&gt;

&lt;h3&gt;1. Todo App with Composition API&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UOtHi6mq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.devaradise.com/wp-content/uploads/2021/03/vue-todo-app-composition-api.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UOtHi6mq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.devaradise.com/wp-content/uploads/2021/03/vue-todo-app-composition-api.jpg" alt="vue todo app composition API" class="wp-image-2898"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/BurakGur"&gt;
        BurakGur
      &lt;/a&gt; / &lt;a href="https://github.com/BurakGur/vue3-composition-api-todo-app"&gt;
        vue3-composition-api-todo-app
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Basic ToDo App with Vue 3 Composition API
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h3&gt;2. Vue Todo App&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5EBc3pMa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.devaradise.com/wp-content/uploads/2021/03/vue-todo-app.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5EBc3pMa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.devaradise.com/wp-content/uploads/2021/03/vue-todo-app.jpg" alt="Vue todo app" class="wp-image-2897"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/drehimself"&gt;
        drehimself
      &lt;/a&gt; / &lt;a href="https://github.com/drehimself/todo-vue"&gt;
        todo-vue
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
       Code for YouTube series on building a Todo App in Vue.js
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h3&gt;3. Vue Calculator&lt;/h3&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/codyseibert"&gt;
        codyseibert
      &lt;/a&gt; / &lt;a href="https://github.com/codyseibert/vue-calculator"&gt;
        vue-calculator
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h3&gt;4. Vue User Registration and Login&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GA1lFIiL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.devaradise.com/wp-content/uploads/2021/03/vue-vuex-registration-login.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GA1lFIiL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.devaradise.com/wp-content/uploads/2021/03/vue-vuex-registration-login.jpg" alt="Vue vuex registration login" class="wp-image-2900"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/cornflourblue"&gt;
        cornflourblue
      &lt;/a&gt; / &lt;a href="https://github.com/cornflourblue/vue-vuex-registration-login-example"&gt;
        vue-vuex-registration-login-example
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Vue + Vuex - User Registration and Login Tutorial &amp;amp; Example
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h3&gt;5. Vue By Sample&lt;/h3&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Lemoncode"&gt;
        Lemoncode
      &lt;/a&gt; / &lt;a href="https://github.com/Lemoncode/vuejs-by-sample"&gt;
        vuejs-by-sample
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      The goal of this project is to provide a set of step by step samples, covering core concepts of Vue.js
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h3&gt;6. Vue Hackernews&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dknQmWml--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.devaradise.com/wp-content/uploads/2021/03/vue-hackernews-clone-1024x512.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dknQmWml--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.devaradise.com/wp-content/uploads/2021/03/vue-hackernews-clone-1024x512.jpg" alt="Vue Hackernews clone" class="wp-image-2908"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/vuejs"&gt;
        vuejs
      &lt;/a&gt; / &lt;a href="https://github.com/vuejs/vue-hackernews"&gt;
        vue-hackernews
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      HackerNews clone with Vue.js
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h3&gt;7. Vue Stock Trader&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MzSF2Q5Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.devaradise.com/wp-content/uploads/2021/03/vue-stock-trader-1024x493.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MzSF2Q5Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.devaradise.com/wp-content/uploads/2021/03/vue-stock-trader-1024x493.jpg" alt="Vue stock trader" class="wp-image-2896"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/sarneeh"&gt;
        sarneeh
      &lt;/a&gt; / &lt;a href="https://github.com/sarneeh/vuejs-example-stock-trader"&gt;
        vuejs-example-stock-trader
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Vue.js + Vue Router + Vuex in a simple Stock Trading game
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h3&gt;8. Vue Trello&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QzaHA7Al--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.devaradise.com/wp-content/uploads/2021/03/vue-trello-clone-1024x488.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QzaHA7Al--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.devaradise.com/wp-content/uploads/2021/03/vue-trello-clone-1024x488.jpg" alt="Vue trello clone" class="wp-image-2899"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/zackthoutt"&gt;
        zackthoutt
      &lt;/a&gt; / &lt;a href="https://github.com/zackthoutt/vue-trello"&gt;
        vue-trello
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A Trello clone built with VueJS
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h3&gt;9. Vue Chat&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0QD0C57n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.devaradise.com/wp-content/uploads/2021/03/vue-chat.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0QD0C57n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.devaradise.com/wp-content/uploads/2021/03/vue-chat.jpg" alt="Vue chat" class="wp-image-2905"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Coffcer"&gt;
        Coffcer
      &lt;/a&gt; / &lt;a href="https://github.com/Coffcer/vue-chat"&gt;
        vue-chat
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      chat example by vue.js + vuex + webpack
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h3&gt;10. Vue Gmail Clone&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6LZI0nL9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.devaradise.com/wp-content/uploads/2021/03/vue-gmail-clone-1024x450.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6LZI0nL9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.devaradise.com/wp-content/uploads/2021/03/vue-gmail-clone-1024x450.jpg" alt="Vue Gmail Clone" class="wp-image-2906"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/josuemartinezz"&gt;
        josuemartinezz
      &lt;/a&gt; / &lt;a href="https://github.com/josuemartinezz/gmail-clone"&gt;
        gmail-clone
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Beautiful gmail redesign created with vue and tailwindcss 🎈
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h3&gt;11. Vue Google Keep Clone&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vJi9Yvp_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.devaradise.com/wp-content/uploads/2021/03/vue-google-keep.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vJi9Yvp_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.devaradise.com/wp-content/uploads/2021/03/vue-google-keep.jpg" alt="Vue Google Keep Clone" class="wp-image-2907"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Swimburger"&gt;
        Swimburger
      &lt;/a&gt; / &lt;a href="https://github.com/Swimburger/gkeep-vueifire"&gt;
        gkeep-vueifire
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Google Keep clone with Vue and Firebase
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h3&gt;12. Vue Slack Clone&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--98FKtvyT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.devaradise.com/wp-content/uploads/2021/03/vue-slack-clone.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--98FKtvyT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.devaradise.com/wp-content/uploads/2021/03/vue-slack-clone.jpg" alt="Vue slack clone" class="wp-image-2895"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ittus"&gt;
        ittus
      &lt;/a&gt; / &lt;a href="https://github.com/ittus/vuejs-slack-clone-realtime"&gt;
        vuejs-slack-clone-realtime
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Slack clone using VueJS and firebase
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h3&gt;13. Vue Quasar Admin&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GamwhUJ8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.devaradise.com/wp-content/uploads/2021/03/vue-quasar-admin-1024x493.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GamwhUJ8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.devaradise.com/wp-content/uploads/2021/03/vue-quasar-admin-1024x493.jpg" alt="Vue quasar admin" class="wp-image-2893"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/odranoelBR"&gt;
        odranoelBR
      &lt;/a&gt; / &lt;a href="https://github.com/odranoelBR/vue-quasar-admin-example"&gt;
        vue-quasar-admin-example
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Example of quasar admin 
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h3&gt;14. Vue Admin Template&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e49PNYTy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.devaradise.com/wp-content/uploads/2021/03/vue-admin-template-1024x493.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e49PNYTy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.devaradise.com/wp-content/uploads/2021/03/vue-admin-template-1024x493.jpg" alt="Vue admin template" class="wp-image-2904"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/fatihunlu"&gt;
        fatihunlu
      &lt;/a&gt; / &lt;a href="https://github.com/fatihunlu/vue-admin-template"&gt;
        vue-admin-template
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Sample Admin Template based on Vuejs &amp;amp; Vuetify.
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h3&gt;15. Vue Netflix Clone&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rrR-BttP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.devaradise.com/wp-content/uploads/2021/03/vue-netflix-clone.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rrR-BttP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.devaradise.com/wp-content/uploads/2021/03/vue-netflix-clone.png" alt="Vue netflix clone" class="wp-image-2892"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ricardovasconcelos"&gt;
        ricardovasconcelos
      &lt;/a&gt; / &lt;a href="https://github.com/ricardovasconcelos/Vueflix"&gt;
        Vueflix
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A simple Netflix clone built with Vuejs
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h3&gt;16. Vue Reddit Clone&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DMvHKYDm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.devaradise.com/wp-content/uploads/2021/03/Vue-Reddit-Clone-1024x471.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DMvHKYDm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.devaradise.com/wp-content/uploads/2021/03/Vue-Reddit-Clone-1024x471.jpg" alt="Vue Reddit Clone" class="wp-image-2903"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Lanseuo"&gt;
        Lanseuo
      &lt;/a&gt; / &lt;a href="https://github.com/Lanseuo/revue"&gt;
        revue
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A reddit clone built with Vue.js and Flask
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h3&gt;17. Vue RealWorld Example&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2PFg9l8k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.devaradise.com/wp-content/uploads/2021/03/vue-realwordl-example-1024x512.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2PFg9l8k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.devaradise.com/wp-content/uploads/2021/03/vue-realwordl-example-1024x512.jpg" alt="Vue realworld example" class="wp-image-2894"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/gothinkster"&gt;
        gothinkster
      &lt;/a&gt; / &lt;a href="https://github.com/gothinkster/vue-realworld-example-app"&gt;
        vue-realworld-example-app
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      An exemplary real-world application built with Vue.js, Vuex, axios and different other technologies. This is a good example to discover Vue for beginners.
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h3&gt;18. Vue Online Music Player&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--92V4-n1S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.devaradise.com/wp-content/uploads/2021/03/vue-mmplayer-online-music-player-1024x471.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--92V4-n1S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.devaradise.com/wp-content/uploads/2021/03/vue-mmplayer-online-music-player-1024x471.jpg" alt="Vue music player" class="wp-image-2891"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/maomao1996"&gt;
        maomao1996
      &lt;/a&gt; / &lt;a href="https://github.com/maomao1996/Vue-mmPlayer"&gt;
        Vue-mmPlayer
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      🎵 基于 Vue 的在线音乐播放器（PC） Online music player
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h3&gt;19. Vue Hackernews 2.0&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e_RvR0Rx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.devaradise.com/wp-content/uploads/2021/03/hackernews-2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e_RvR0Rx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.devaradise.com/wp-content/uploads/2021/03/hackernews-2.jpg" alt="Vue Hackernews 2" class="wp-image-2902"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/vuejs"&gt;
        vuejs
      &lt;/a&gt; / &lt;a href="https://github.com/vuejs/vue-hackernews-2.0"&gt;
        vue-hackernews-2.0
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      HackerNews clone built with Vue 2.0, vue-router &amp;amp; vuex, with server-side rendering
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h3&gt;20. Vue Node.js Youtube Clone&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FUeIYpqj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.devaradise.com/wp-content/uploads/2021/03/vue-youtube-clone-1024x512.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FUeIYpqj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.devaradise.com/wp-content/uploads/2021/03/vue-youtube-clone-1024x512.jpg" alt="Vue youtube clone" class="wp-image-2901"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/techreagan"&gt;
        techreagan
      &lt;/a&gt; / &lt;a href="https://github.com/techreagan/vue-nodejs-youtube-clone"&gt;
        vue-nodejs-youtube-clone
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      This is the frontend (VueJS) of the Youtube clone called VueTube.
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h3&gt;21. Jira Clone&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m8OO0Mhg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.devaradise.com/wp-content/uploads/2021/03/vue-jira-clone-1024x493.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m8OO0Mhg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.devaradise.com/wp-content/uploads/2021/03/vue-jira-clone-1024x493.jpg" alt="Vue jira clone" class="wp-image-2890"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Datlyfe"&gt;
        Datlyfe
      &lt;/a&gt; / &lt;a href="https://github.com/Datlyfe/jira_clone"&gt;
        jira_clone
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A Jira clone built with Vuejs &amp;amp; Nodejs/Graphql
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p class="has-text-align-center"&gt;~~&lt;/p&gt;

&lt;h2&gt;Do you know other repos?&lt;/h2&gt;

&lt;p&gt;If you know other Github repositories that worth mentioning here, don’t hesitate to share them in the comment section.&lt;/p&gt;

&lt;p&gt;The repository should be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A Vue example project&lt;/li&gt;
&lt;li&gt;Has a demo page, or at least some screenshot&lt;/li&gt;
&lt;li&gt;Work with no significant console error&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thank you.&lt;/p&gt;

&lt;p&gt;Happy coding!&lt;/p&gt;

</description>
      <category>vue</category>
      <category>javascript</category>
      <category>opensource</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Can't Touch "this"</title>
      <author>atulit023</author>
      <pubDate>Tue, 09 Mar 2021 12:10:09 +0000</pubDate>
      <link>https://dev.to/icecoffee/can-t-touch-this-12h4</link>
      <guid>https://dev.to/icecoffee/can-t-touch-this-12h4</guid>
      <description>&lt;p&gt;'this' is a special variable that is created for every execution context (i.e. it is a part of the execution context).&lt;br&gt;
It takes the value of the owner of the function in which the 'this' keyword is used.&lt;/p&gt;

&lt;p&gt;The 'this' keyword is not a static variable actually it depends totally on which type of execution context and with which type of environment variable it is defined.&lt;/p&gt;

&lt;p&gt;Now, 'this' can broadly be divided into four types:&lt;br&gt;
1) For Methods&lt;br&gt;
2) Function declarations and Function expressions.&lt;br&gt;
3) Arrow functions&lt;br&gt;
4) Event listeners&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#methods" class="anchor"&gt;
  &lt;/a&gt;
  Methods
&lt;/h3&gt;

&lt;p&gt;this= object that is calling the method&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;duck&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;donald&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;duck&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#output" class="anchor"&gt;
  &lt;/a&gt;
  Output:
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mTerLA3H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mzygqxhru1ocjjlvhpcm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mTerLA3H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mzygqxhru1ocjjlvhpcm.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Now ain't that great this= Direct parent, which in this case is duck Object.&lt;br&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#function-declarations-and-function-expressions" class="anchor"&gt;
  &lt;/a&gt;
  Function declarations and Function expressions
&lt;/h3&gt;

&lt;p&gt;For sloppy mode this= window object &lt;br&gt;
and for strict mode this= undefined. &lt;br&gt;
But you gotta understand, this 'this' that we are logging to the console is actually part of this function.&lt;br&gt;
I mean there is some memory in its execution context exclusively dedicated to this 'this'.&lt;br&gt;
i.e every function expression and function decleration have its own 'this'&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;strict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sloppy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;


&lt;span class="nx"&gt;strict&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;sloppy&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#output" class="anchor"&gt;
  &lt;/a&gt;
  Output:
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wWSneQU---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kyyh46yg250ftizoqdou.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wWSneQU---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kyyh46yg250ftizoqdou.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#arrow-functions" class="anchor"&gt;
  &lt;/a&gt;
  Arrow functions
&lt;/h3&gt;

&lt;p&gt;Arrow functions don't have their own 'this' keyword so they inherit the value of 'this' keyword from their direct parent when it is called.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arrow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;arrow&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;duck&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;donald&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arrow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="nx"&gt;arrow&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;gogetter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;duck&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;duck&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;gogetter&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// pay attention to this part&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#output" class="anchor"&gt;
  &lt;/a&gt;
  Output:
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NvyfQw7f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cysmvkd6trijtki7yob8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NvyfQw7f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cysmvkd6trijtki7yob8.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Look at the third output, why is that?&lt;br&gt;
Same as I explained before 'this' is dynamic and for arrow functions points to value of its direct parent hence called lexical 'this'.&lt;br&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#event-listeners" class="anchor"&gt;
  &lt;/a&gt;
  Event Listeners:
&lt;/h3&gt;

&lt;p&gt;this= DOM element that the handler is attached to.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;body&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello World!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Paste this code in your console and click see what happens&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#output" class="anchor"&gt;
  &lt;/a&gt;
  Output:
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--siaURPz6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jht9wao02v7kj81qwyl1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--siaURPz6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jht9wao02v7kj81qwyl1.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Why window object?&lt;br&gt;
Because in DOM window is the direct parent of the body element.&lt;br&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#take-aways" class="anchor"&gt;
  &lt;/a&gt;
  Take aways
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;'this' has a dynamic value.&lt;/li&gt;
&lt;li&gt;Never use arrow functions as methods of an object.
Why because arrow functions have no memory allocated for 'this'.&lt;/li&gt;
&lt;li&gt;Always prefer strict mode. "personal opinion"&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Fun Fact:&lt;br&gt;
JavaScript was developed by Brendan Eich in just 10 days.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4n_chg8a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/QfaPw2Fr4eEAAAAM/will-smith-clap.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4n_chg8a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/QfaPw2Fr4eEAAAAM/will-smith-clap.gif" alt="excited"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope this might have helped you a little.&lt;br&gt;
Please do let me know in the comments if you got any doubt or how can I improve?&lt;br&gt;
Have a beautiful day.&lt;/p&gt;

</description>
      <category>weeklyretro</category>
      <category>webdev</category>
      <category>computerscience</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Quickly and easily mock a REST API with Restapify</title>
      <author>johannchopin</author>
      <pubDate>Tue, 09 Mar 2021 11:01:59 +0000</pubDate>
      <link>https://dev.to/johannchopin/quickly-and-easily-mock-a-rest-api-with-restapify-16om</link>
      <guid>https://dev.to/johannchopin/quickly-and-easily-mock-a-rest-api-with-restapify-16om</guid>
      <description>&lt;p&gt;Hey devs 👋&lt;/p&gt;

&lt;p&gt;Often when you start developing a new frontend project that consume a REST API, the backend is not yet ready. However, very often this one is at first basic and you only want to receive faked data to see how the application behaves. That's when you decide to use a tool to mock your API like &lt;a href="https://www.postman.com/"&gt;postman&lt;/a&gt; or library like &lt;a href="https://github.com/typicode/json-server"&gt;json-server&lt;/a&gt;, &lt;a href="https://github.com/jaywcjlove/mocker-api"&gt;mocker-api&lt;/a&gt; or &lt;a href="https://github.com/micromata/http-fake-backend"&gt;http-fake-backend&lt;/a&gt;. These tools are really good but there still have some negative points. Postman for example is not entirely free to use and needs to login, mocker-api define all routes in a single javascript file and json-server is at some point very restrictive for edge-cases. &lt;/p&gt;

&lt;p&gt;So I decided to work on a new API mocker tool that should be able to handle all cases and that within a nice developer experience flow: &lt;a href="https://restapify.vercel.app/"&gt;Restapify&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Restapify is a nodejs based CLI that allows you to quickly and easily deploy a local REST API by using an intuitive and developer friendly JSON file structure like you will see in NextJS or Sapper. Lets describe how it works by creating a simple mocked API that should serve the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;GET  /me
GET  /posts
GET  /users
GET  /users/:userid
POST /users/:userid
DEL  /users/:userid
GET  /users/:userid/comments
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#create-the-endpoints" class="anchor"&gt;
  &lt;/a&gt;
  Create the endpoints
&lt;/h2&gt;

&lt;p&gt;The starting point is the creation of the folder that will contain your route json file, I will call it &lt;code&gt;/api&lt;/code&gt;. Then we can add some routes to be serve. Creating a route means to add a &lt;code&gt;.json&lt;/code&gt; file where its filename describe the endpoint, the method and the status code and its content the response body. So to create the &lt;code&gt;GET /me&lt;/code&gt; endpoint with the status code &lt;code&gt;200&lt;/code&gt; just create the following file:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;📂 api
┣ 📜 me.GET.200.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Since &lt;code&gt;GET&lt;/code&gt; and &lt;code&gt;200&lt;/code&gt; are the default value for the method and the status code, you can simplify the filename to:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;📂 api
┣ 📜 me.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The response should contain a &lt;code&gt;firstname&lt;/code&gt;, a &lt;code&gt;lastname&lt;/code&gt; and an &lt;code&gt;email&lt;/code&gt;, so the file content of &lt;code&gt;/api/me.json&lt;/code&gt; would be something like:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"firstname"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Janie"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"lastname"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Hermann"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"email"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Jo.Kessler@yahoo.com"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Then lets add the endpoints for &lt;code&gt;/users&lt;/code&gt;. Since there are a few of them we can group them in the same folder &lt;code&gt;users&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;📂 api
┣ 📂 users
┃ ┗ 📜 *.json
┃ ┣ 📂 [userid]
┃ ┃ ┗ 📜 *.json
┃ ┃ ┗ 📜 *.POST.201.json
┃ ┃ ┗ 📜 *.DELETE.201.json
┣ 📜 me.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The folder &lt;code&gt;[userid]&lt;/code&gt; indicate that this route is dynamic. You can then in the JSON file content consume this variable by using the syntax &lt;code&gt;[userid]&lt;/code&gt;. Example in the file &lt;code&gt;/api/users/[userid]/*.json&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"[userid]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"email"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Jo.Kessler@yahoo.com"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;If you call then &lt;code&gt;GET /users/42&lt;/code&gt; you will get the response:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"42"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"email"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Jo.Kessler@yahoo.com"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Here to get the &lt;code&gt;id&lt;/code&gt; as a number, just cast the variable by using the syntax &lt;code&gt;n:[var]&lt;/code&gt; like &lt;code&gt;"id": "n:[userid]"&lt;/code&gt;. &lt;a href="https://restapify.vercel.app/docs#routes-variable-casting"&gt;Variable casting docs&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Restapify provide a syntax to use the famous &lt;a href="https://github.com/marak/Faker.js/"&gt;fakerjs&lt;/a&gt; library to easily populate your response's body (checkout the &lt;a href="https://restapify.vercel.app/docs#fakerjs-integration"&gt;docs&lt;/a&gt;):&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"firstname"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"[#faker:name:firstName]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"lastname"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"[#faker:name:lastName]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"email"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"[#faker:internet:email]"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;You can also easily create a waste amount of data by using the &lt;a href="https://restapify.vercel.app/docs#for-loops"&gt;for-loop syntax&lt;/a&gt;. So if you want to get 10 comments with the request &lt;code&gt;GET /users/:userid/comments&lt;/code&gt; just write this in the JSON file &lt;code&gt;/api/users/[userid]/comments.json&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="s2"&gt;"#for i in range(10)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"n:[i]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"creatorId"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"n:[userid]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"content"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"[#faker:lorem:sentences]"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="s2"&gt;"#endfor"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;So now we have created all the endpoints of the API that send a succeeded response. But what if we want to test the behaviour of the application when the user doesn't exist in &lt;code&gt;GET /users/:userid&lt;/code&gt; for example. A real API would probably return a &lt;code&gt;404&lt;/code&gt; without any content. To mock this behaviour, Restapify implement the concept of &lt;a href="https://restapify.vercel.app/docs#routes-state"&gt;endpoint states&lt;/a&gt;. To do this you just have to create a new file for each different state by adding at the end of the file the syntax &lt;code&gt;{STATE_NAME}&lt;/code&gt; separated by a dot. So lets create a new state for &lt;code&gt;GET /users/:userid&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;📂 api
┣ 📂 users
┃ ┣ 📂 [userid]
┃ ┃ ┗ 📜 *.json
┃ ┃ ┗ 📜 *.404.{NOT_FOUND}.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;To return no-content in Restapify you have to use this syntax as file content:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;An empty file would be more convenient but it's not valid for a JSON file according to the &lt;a href="https://www.ecma-international.org/publications-and-standards/standards/ecma-404/"&gt;ECMA-404&lt;/a&gt; standard.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now that you have created your endpoints, it's time to serve the mocked API. For that install the Restapi CLI...&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn global add restapify 
&lt;span class="c"&gt;# or npm install -g restapify&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;...and then serve the &lt;code&gt;api/&lt;/code&gt; folder:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;restapify serve api/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;It will then open a dashboard in your browser that give you an overview of the mocked API.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ezsBi-87--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0i3enl3r1k7s2638ajoh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ezsBi-87--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0i3enl3r1k7s2638ajoh.png" alt="dashboard screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can in this dashboard consult the endpoints and their content, fetch them and more important select which state of the endpoints you want to serve.&lt;/p&gt;

&lt;p&gt;So if you click on the state button &lt;code&gt;NOT_FOUND&lt;/code&gt;, it will update the API to serve this state of the endpoint, so if you directly after request &lt;code&gt;GET /users/42&lt;/code&gt; you will receive a &lt;code&gt;404&lt;/code&gt;. This is really helpful to test your frontend (for example a login forms) and you can create so much several state as you want to fit all you need and edge cases.&lt;/p&gt;

&lt;p&gt;So I presented the most important features of Restapify but I really encourage you to check the &lt;a href="https://restapify.vercel.app/docs"&gt;official documentation&lt;/a&gt; of it to see other use cases like &lt;a href="https://restapify.vercel.app/docs#consume-routes-query-string-variables"&gt;query string&lt;/a&gt;, &lt;a href="https://restapify.vercel.app/docs#use-routes-variables-in-sequence"&gt;route variable in for-loops&lt;/a&gt; or the &lt;a href="https://restapify.vercel.app/docs#fakerjs-integration"&gt;fakerjs integration&lt;/a&gt; in more details.&lt;/p&gt;

&lt;p&gt;You can find some prepared examples of mocked API in &lt;a href="https://restapify.vercel.app/examples"&gt;https://restapify.vercel.app/examples&lt;/a&gt; so that you can directly play and see how it feel. If you have any question or feedback feel free to post it in the discussion and if you want to checkout the source code, here is the GitHub repository: &lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/johannchopin"&gt;
        johannchopin
      &lt;/a&gt; / &lt;a href="https://github.com/johannchopin/restapify"&gt;
        restapify
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Quickly and easily deploy a mocked REST API
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Have a good day ⭐&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>api</category>
      <category>rest</category>
    </item>
    <item>
      <title>Detect Page Refresh, Tab Close and Route Change with React Router v5</title>
      <author>eons</author>
      <pubDate>Tue, 09 Mar 2021 10:52:12 +0000</pubDate>
      <link>https://dev.to/eons/detect-page-refresh-tab-close-and-route-change-with-react-router-v5-3pd</link>
      <guid>https://dev.to/eons/detect-page-refresh-tab-close-and-route-change-with-react-router-v5-3pd</guid>
      <description>&lt;p&gt;Imagine accidentally closing the browser tab after filling a mandatory and boring survey form. All your responses are lost now.&lt;/p&gt;

&lt;p&gt;Frustrating, isn't it?&lt;/p&gt;

&lt;p&gt;You would not want to give such an experience to your users, here's how you can fix it.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#problem" class="anchor"&gt;
  &lt;/a&gt;
  Problem:
&lt;/h1&gt;

&lt;p&gt;How to prompt the user when they accidentally...&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Reload the page.&lt;/li&gt;
&lt;li&gt;Close the browser tab or window.&lt;/li&gt;
&lt;li&gt;Press the browser back button.&lt;/li&gt;
&lt;li&gt;Click a link/change the route.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#solution" class="anchor"&gt;
  &lt;/a&gt;
  Solution:
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#part-1-detecting-page-reload-and-browser-tab-close" class="anchor"&gt;
  &lt;/a&gt;
  Part 1. Detecting Page Reload and Browser Tab Close
&lt;/h2&gt;

&lt;p&gt;A tab/window close or a page reload event mean that the current document and its resources would be removed (unloaded). In this case, &lt;code&gt;beforeunload&lt;/code&gt; event is fired.&lt;/p&gt;

&lt;p&gt;At the point at which the &lt;code&gt;beforeunload&lt;/code&gt; event is triggered, the document is still visible and the event is cancellable, meaning the &lt;code&gt;unload&lt;/code&gt; event can be prevented as if it never happened.&lt;/p&gt;

&lt;p&gt;This event enables a web page to trigger a confirmation dialog asking the user if they really want to leave the page. If the user confirms, the browser navigates to the new page, otherwise, it cancels the navigation.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#preventing-raw-beforeunload-endraw-event" class="anchor"&gt;
  &lt;/a&gt;
  Preventing &lt;code&gt;beforeunload&lt;/code&gt; event
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onbeforeunload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;// Cancel the event&lt;/span&gt;
  &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;returnValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Legacy method for cross browser support&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Legacy method for cross browser support&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All the 3 methods above &lt;code&gt;e.preventDefault()&lt;/code&gt;, &lt;code&gt;e.returnValue = ''&lt;/code&gt; and &lt;code&gt;return ''&lt;/code&gt; prevent the event from executing. &lt;/p&gt;

&lt;p&gt;Example of the confirm box displayed:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y7psoiUy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/24rtbfe4b21j1g25706e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y7psoiUy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/24rtbfe4b21j1g25706e.png" alt="Reload Site prompt"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d6dDv5Up--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/suutdqw6onpykjif0lnc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d6dDv5Up--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/suutdqw6onpykjif0lnc.png" alt="Leave Site prompt"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; Unfortunately, a customized message is not supported in all the browsers&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#show-the-prompt-based-on-state" class="anchor"&gt;
  &lt;/a&gt;
  Show the prompt based on state
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;#1&lt;/strong&gt;  Create a function with a React state &lt;code&gt;showExitPrompt&lt;/code&gt; as a parameter and initialize the &lt;code&gt;onbeforeunload&lt;/code&gt; listener inside the function. Use the state inside the event listener.&lt;/p&gt;

&lt;p&gt;Why pass the React state as a parameter? &lt;br&gt;
Because the &lt;code&gt;onbeforeunload&lt;/code&gt; is a vanilla javascript event listener and any React state change will not update the state inside its callback.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;initBeforeUnLoad&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;showExitPrompt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onbeforeunload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Show prompt based on state&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;showExitPrompt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;returnValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;#2&lt;/strong&gt; Create the state &lt;code&gt;showExitPrompt&lt;/code&gt; to manage the prompt and register the event listener on page load.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;showExitPrompt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setShowExitPrompt&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// Initialize the beforeunload event listener after the resources are loaded&lt;/span&gt;
  &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;initBeforeUnLoad&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;showExitPrompt&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;#3&lt;/strong&gt; Reinitialize the event listener on state change.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;initBeforeUnLoad&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;showExitPrompt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// … code&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;showExitPrompt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setShowExitPrompt&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;initBeforeUnLoad&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;showExitPrompt&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="c1"&gt;// Re-Initialize the onbeforeunload event listener&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;initBeforeUnLoad&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;showExitPrompt&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;showExitPrompt&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you are ready to use it inside your component. BUT it is efficient to create a custom hook for setting and accessing the state anywhere in the application.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-a-custom-hook" class="anchor"&gt;
  &lt;/a&gt;
  Use a Custom Hook
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;#1&lt;/strong&gt; Hook file &lt;code&gt;useExitPrompt.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;initBeforeUnLoad&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;showExitPrompt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onbeforeunload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;showExitPrompt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;returnValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// Hook&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useExitPrompt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;showExitPrompt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setShowExitPrompt&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;initBeforeUnLoad&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;showExitPrompt&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;initBeforeUnLoad&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;showExitPrompt&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;showExitPrompt&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;showExitPrompt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setShowExitPrompt&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;#2&lt;/strong&gt; Component file &lt;code&gt;MyComponent.js&lt;/code&gt;&lt;br&gt;
&lt;em&gt;Note:&lt;/em&gt; You will have to reset the value of &lt;code&gt;showExitPrompt&lt;/code&gt; state to default when the component is unmounted.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;useExitPrompt&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./useExitPrompt.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;showExitPrompt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setShowExitPrompt&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useExitPrompt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;setShowExitPrompt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;showExitPrompt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;//NOTE: this similar to componentWillUnmount()&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setShowExitPrompt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/*Your code*/&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Show/Hide the prompt&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Child&lt;/span&gt; &lt;span class="na"&gt;setShowExitPrompt&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;setShowExitPrompt&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;OR&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;#2&lt;/strong&gt;  Component file &lt;code&gt;App.js&lt;/code&gt;&lt;br&gt;
Pass it down to your child components via &lt;code&gt;Context.Provider&lt;/code&gt; and access the value using the &lt;code&gt;useContext()&lt;/code&gt; hook anywhere in your application.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;useExitPrompt&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./useExitPrompt.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;MyContext&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./MyContext.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;showExitPrompt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setShowExitPrompt&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useExitPrompt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;MyContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;showExitPrompt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setShowExitPrompt&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;MyMainApp&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;MyContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;showExitPrompt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setShowExitPrompt&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;MyContext&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;//NOTE: this works similar to componentWillUnmount()&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setShowExitPrompt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* your code */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#part-2-detecting-routepage-change-and-browser-back" class="anchor"&gt;
  &lt;/a&gt;
  Part 2. Detecting Route/Page change and Browser Back
&lt;/h2&gt;

&lt;p&gt;Similar to the above-mentioned actions, when the user clicks on a link, they are redirected to a new page, and the document and its resources will be unloaded. &lt;/p&gt;

&lt;p&gt;But, React Router works differently, it implements the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/History_API"&gt;History API&lt;/a&gt; which provides access to the browser's session history. By clicking a regular link - you'll end up on the new URL and a new document(page), meanwhile &lt;code&gt;history&lt;/code&gt; lets you "fake" the URL without leaving the page.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-locationpathname-endraw-vs-raw-historypushstate-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;location.pathname&lt;/code&gt; vs &lt;code&gt;history.pushState()&lt;/code&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pathname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/dummy-page&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jLrHmVZt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1d2h4sasxgxb9b8cosv8.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jLrHmVZt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1d2h4sasxgxb9b8cosv8.gif" alt="window.location.pathname demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;V/S&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;history&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pushState&lt;/span&gt;&lt;span class="p"&gt;({},&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/dummy-page&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zd_mA8tm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/23kmorqk5mqd6kgvww20.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zd_mA8tm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/23kmorqk5mqd6kgvww20.gif" alt="window.history.pushState demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Do you see the difference? &lt;code&gt;history.pushState()&lt;/code&gt; only changes the URL nothing else, the whole page stays intact while &lt;code&gt;location.pathname&lt;/code&gt; redirects you to that new page, probably giving a 404 error because such a route does not exist.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#displaying-prompt-with-raw-getuserconfirmation-endraw-and-raw-ltpromptgt-endraw-component" class="anchor"&gt;
  &lt;/a&gt;
  Displaying prompt with &lt;code&gt;getUserConfirmation()&lt;/code&gt; and &lt;code&gt;&amp;lt;Prompt/&amp;gt;&lt;/code&gt; component
&lt;/h3&gt;

&lt;p&gt;React Router provides a prop &lt;code&gt;getUserConfirmation()&lt;/code&gt; in &lt;code&gt;&amp;lt;BrowserRouter&amp;gt;&lt;/code&gt; to confirm navigation and a component &lt;code&gt;&amp;lt;Prompt/&amp;gt;&lt;/code&gt;  to display a custom message from your child components.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;#1&lt;/strong&gt; Root file &lt;code&gt;App.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BrowserRouter&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;BrowserRouter&lt;/span&gt; &lt;span class="na"&gt;getUserConfirmation&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// this is the default behavior&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;allowTransition&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;confirm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;allowTransition&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Routes&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;BrowserRouter&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;window.confirm()&lt;/code&gt; will display the message you pass in React Router’s &lt;code&gt;&amp;lt;Prompt /&amp;gt;&lt;/code&gt; component from your respective children components. The &lt;code&gt;callback()&lt;/code&gt; function requires a boolean parameter to prevent the transition to a new page.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;#2&lt;/strong&gt; Component File &lt;code&gt;MyForm.js&lt;/code&gt;&lt;br&gt;
&lt;code&gt;&amp;lt;Prompt /&amp;gt;&lt;/code&gt; has 2 props, &lt;code&gt;when&lt;/code&gt; and &lt;code&gt;message&lt;/code&gt;. If &lt;code&gt;when&lt;/code&gt; prop’s value is set to true and the user clicks on a different link, they will be prompted with the message passed in the &lt;code&gt;message&lt;/code&gt; props.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Prompt&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MyForm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isFormIncomplete&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setIsFormIncomplete&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/*Your code*/&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

     &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Prompt&lt;/span&gt;
       &lt;span class="na"&gt;when&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isFormIncomplete&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
       &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Are you sure you want to leave?"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Example of the confirm box displayed:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8U--FYI---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6nh9kgx9ofutgehbeccz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8U--FYI---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6nh9kgx9ofutgehbeccz.png" alt="Route Change Prompt"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary" class="anchor"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;If the user’s action...&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Removes page’s resources, use &lt;code&gt;beforeunload&lt;/code&gt; vanilla JavaScript event to prompt the user.&lt;/li&gt;
&lt;li&gt;Change only the view, use &lt;code&gt;getUserConfirmation()&lt;/code&gt; in &lt;code&gt;&amp;lt;BrowserRouter/&amp;gt;&lt;/code&gt; along with &lt;code&gt;&amp;lt;Prompt /&amp;gt;&lt;/code&gt; component to prompt the user.&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
      <category>reactrouter</category>
    </item>
    <item>
      <title>New Features in ECMAScript 2021 (with code examples)</title>
      <author>Faithful Ojebiyi</author>
      <pubDate>Tue, 09 Mar 2021 10:08:53 +0000</pubDate>
      <link>https://dev.to/faithfulojebiyi/new-features-in-ecmascript-2021-with-code-examples-302h</link>
      <guid>https://dev.to/faithfulojebiyi/new-features-in-ecmascript-2021-with-code-examples-302h</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sF4FouMg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qakqanq79z8exo4pu63y.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sF4FouMg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qakqanq79z8exo4pu63y.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this tutorial we are going to learn about the new features we can use in the latest version of ECMAScript 2021 with some coding examples&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;This Ecma Standard defines the ECMAScript 2022 Language. It is the twelfth edition of the ECMAScript Language Specification. Since publication of the first edition in 1997, ECMAScript has grown to be one of the world's most widely used general-purpose programming languages. It is best known as the language embedded in web browsers but has also been widely adopted for server and embedded applications.Introduction&lt;br&gt;
This Ecma Standard defines the ECMAScript 2022 Language. It is the twelfth edition of the ECMAScript Language Specification. Since publication of the first edition in 1997, ECMAScript has grown to be one of the world's most widely used general-purpose programming languages. It is best known as the language embedded in web browsers but has also been widely adopted for server and embedded applications.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#ecma-2021" class="anchor"&gt;
  &lt;/a&gt;
  ECMA 2021
&lt;/h1&gt;

&lt;p&gt;ECMAScript 2021, the 12th edition, introduces the &lt;code&gt;replaceAll&lt;/code&gt; method for Strings; &lt;code&gt;Promise.any&lt;/code&gt;, a Promise combinator that short-circuits when an input value is fulfilled; &lt;code&gt;AggregateError&lt;/code&gt;, a new Error type to represent multiple errors at once; logical assignment operators (&lt;code&gt;??=&lt;/code&gt;, &lt;code&gt;&amp;amp;&amp;amp;=&lt;/code&gt;, &lt;code&gt;||=&lt;/code&gt;); &lt;code&gt;WeakRef&lt;/code&gt;, for referring to a target object without preserving it from garbage collection, and &lt;code&gt;FinalizationRegistry&lt;/code&gt;, to manage registration and unregistration of cleanup operations performed when target objects are garbage collected; separators for numeric literals (&lt;code&gt;1_000&lt;/code&gt;); and &lt;code&gt;Array.prototype.sort&lt;/code&gt; was made stable.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#replaceall" class="anchor"&gt;
  &lt;/a&gt;
  replaceAll
&lt;/h2&gt;

&lt;p&gt;Assuming we have a constant named string&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const string = "Javascript is the best web scripting language. Javascript can be used for both front end and backend";
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and we want to replace the word  &lt;code&gt;Javascript&lt;/code&gt;   with  &lt;code&gt;Typescript&lt;/code&gt; &lt;br&gt;
we normally would use the &lt;code&gt;replace&lt;/code&gt; method&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const string = "Javascript is the best web scripting language. Javascript can be used for both front end and backend";

console.log(string.replace("Javascript", "Typescript"));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What if we want to replace all instances of &lt;code&gt;Javascript&lt;/code&gt; with &lt;code&gt;Typescript&lt;/code&gt;&lt;br&gt;
That is where the replaceAll method comes to shine&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const string = "Javascript is the best web scripting language. Javascript can be used for both front end and backend";

console.log(string.replaceAll("Javascript", "Typescript"));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uhy87R4u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hsxj4bwxjfrhn2qc6c6n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uhy87R4u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hsxj4bwxjfrhn2qc6c6n.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#private-methods" class="anchor"&gt;
  &lt;/a&gt;
  Private Methods
&lt;/h2&gt;

&lt;p&gt;lets create a class named &lt;code&gt;People&lt;/code&gt; and we have will have some methods&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class People {
  showName() {
    console.log("My name is Faithful")
  }
  showAge() {
    console.log("Faithful is 20")
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To access the methods inside the classes we first need to instantiate the class&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class People {
  showName() {
    console.log("My name is Faithful")
  }
  showAge() {
    console.log("Faithful is 20")
  }
}

const people = new People()

people.showName()
people.showAge()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can see that &lt;code&gt;My name is Faithful&lt;/code&gt; and &lt;code&gt;Faithful is 20&lt;/code&gt; gets logged on console.&lt;/p&gt;

&lt;p&gt;if we want to make showAge() a private method inside the class People so outside the scope of the class it is not accessible&lt;br&gt;
we just add the &lt;code&gt;#&lt;/code&gt; sign in front of the &lt;code&gt;showAge&lt;/code&gt; method like this &lt;code&gt;#showAge&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class People {
  showName() {
    console.log("My name is Faithful")
  }
  #showAge() {
    console.log("Faithful is 20")
  }
}

const people = new People()

people.showName()
people.showAge() 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3SOSIWSc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ozcoj8ljvqavm8t9fmn5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3SOSIWSc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ozcoj8ljvqavm8t9fmn5.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
we can see the result on our console. An error is saying  &lt;code&gt;people.showAge&lt;/code&gt; is not a function. This is because &lt;code&gt;#showAge()&lt;/code&gt; is now a private method inside the class People and can only be access via a public method in side the class People.&lt;/p&gt;

&lt;p&gt;Now lets try and access the private method &lt;code&gt;#showAge()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;first we create new public method called &lt;code&gt;showAll()&lt;/code&gt; inside the class People from this public method we can access the private method &lt;code&gt;#showAge()&lt;/code&gt; and since our new method is a public one we would be able to print the age on the console. Take a look at the code below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class People {
  showName() {
    console.log("My name is Faithful");
  }
  #showAge() {
    console.log("Faithful is 20");
  }
  showAll() {
    this.showName()
    this.#showAge();
  }
}

const people = new People();
people.showAll();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;we can see that the error has disappeared and we can now access our private method via a public one &lt;code&gt;showAll()&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Jk5IzoJW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i5ofvl2h509kuqjrddne.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Jk5IzoJW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i5ofvl2h509kuqjrddne.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#private-accessors" class="anchor"&gt;
  &lt;/a&gt;
  Private Accessors
&lt;/h2&gt;

&lt;p&gt;Private accessors work very similar to private methods lets create a class named &lt;code&gt;People&lt;/code&gt; and we have will have some methods&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class People {
  get Name() {
    return "Faithful"
  }
  get Age() {
    return 20
  }
}

let people = new People();
console.log(people.Age);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rw8Dk4ww--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s4vq8o2h4evk7fw7ygst.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rw8Dk4ww--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s4vq8o2h4evk7fw7ygst.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
We can see &lt;code&gt;20&lt;/code&gt; gets logged on console.&lt;/p&gt;

&lt;p&gt;if we want to make Age a private accessor inside the class People so outside the scope of the class it is not accessible&lt;br&gt;
we just add the &lt;code&gt;#&lt;/code&gt; sign in front of the &lt;code&gt;Age&lt;/code&gt; method like this &lt;code&gt;#Age&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class People {
  get Name() {
    return "Faithful"
  }
  get #Age() {
    return 20
  }

}

let people = new People();
console.log(people.Age) 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uzUkiTKu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oda8qjvim0y5guwvhrg2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uzUkiTKu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oda8qjvim0y5guwvhrg2.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
we can see the result on our console is undefined.&lt;br&gt;
Now lets try and access the private method &lt;code&gt;#Age()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;first we create new public method called &lt;code&gt;publicAge()&lt;/code&gt; inside the class People from this public method we can access the private method &lt;code&gt;#Age()&lt;/code&gt; and since our new method is a public one we would be able to print the age on the console. Take a look at the code below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class People {
  get Name() {
    return "Faithful"
  }
  get #Age() {
    return 20
  }
  get publicAge() {
    return this.#Age
  }
}

let people = new People();
console.log(people.publicAge)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pt-l0fic--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5zonr05rjy5po7p8jdtw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pt-l0fic--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5zonr05rjy5po7p8jdtw.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
we can see that the error has disappeared and we can now access our private accessor via a public one &lt;code&gt;publicAge()&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#promiseany" class="anchor"&gt;
  &lt;/a&gt;
  Promise.any()
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Promise.any()&lt;/strong&gt; is like the opposite of &lt;code&gt;Promise.all()&lt;/code&gt;. Promise.any() resolves if any of the supplied promised is resolved unlike &lt;code&gt;promise.all()&lt;/code&gt; which waits for all promises to resolve before it resolves.&lt;br&gt;
lets take a look at the example below&lt;br&gt;
Basically we have 3 promises that resolves at random times. We have used &lt;code&gt;setTimeout()&lt;/code&gt; function to set a time taken for each promise to resolve and we used Math.floor(Math.random) to give a random time to the setTimeout function so we really dont know which promise resolves first. This exaclty what happens in real world secenario.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const prom1 = new Promise((resolve, reject) =&amp;gt; {
  setTimeout(
    () =&amp;gt; resolve("this is the first promise"),
    Math.floor(Math.random() * 100)
  );
});
const prom2 = new Promise((resolve, reject) =&amp;gt; {
  setTimeout(
    () =&amp;gt; resolve("this is the second promise"),
    Math.floor(Math.random() * 100)
  );
});
const prom3 = new Promise((resolve, reject) =&amp;gt; {
  setTimeout(
    () =&amp;gt; resolve("this is the third promise"),
    Math.floor(Math.random() * 100)
  );
});

(async function() {
  const result = await Promise.any([prom1, prom2, prom3]);
  console.log(result); // Prints "A", "B" or "C"
})();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xs7HGaLG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vb51zvelwyq3mzjtr7ml.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xs7HGaLG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vb51zvelwyq3mzjtr7ml.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
from the result in console, we can see that our second promise resolves first.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Wait!&lt;/strong&gt; what if none of the promises resolve? Well, Promise.any() throws an AggregateError exception. We will handle it in a try catch block.&lt;br&gt;
Take a look at the example below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const rejected = new Promise((resolve, reject) =&amp;gt; {
  setTimeout(
    () =&amp;gt; reject("this is the first promise"),
    Math.floor(Math.random() * 100)
  );
});

try {
  (async function() {
    const result = await Promise.any([rejected]);
    console.log(result);
  })();
} catch(error) {
  console.log(error.errors);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#numeric-separators" class="anchor"&gt;
  &lt;/a&gt;
  Numeric Separators
&lt;/h2&gt;

&lt;p&gt;This feature enables developers to make their numeric literals more readable by creating a visual separation between groups of digits. Large numeric literals are difficult for the human eye to parse quickly, especially when there are long digit repetitions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1000000000   // Is this a billion? a hundred millions? Ten millions?
101475938.38 // what scale is this? what power of 10?
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#examples" class="anchor"&gt;
  &lt;/a&gt;
  Examples
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Regular Number Literals&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let budget = 1_000_000_000_000;
// What is the value of `budget`? It's 1 trillion!
// 
// Let's confirm:
console.log(budget === 10 ** 12); // true
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Binary Literals&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let nibbles = 0b1010_0001_1000_0101;
// Is bit 7 on? It sure is!
// 0b1010_0001_1000_0101
//          
// We can double check: 
console.log(!!(nibbles &amp;amp; (1 &amp;lt;&amp;lt; 7))); // true
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Hex Literals&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Messages are sent as 24 bit values, but should be 
// treated as 3 distinct bytes:
let message = 0xA0_B0_C0;

// What's the value of the upper most byte? It's A0, or 160.
// We can confirm that:
let a = (message &amp;gt;&amp;gt; 16) &amp;amp; 0xFF; 
console.log(a.toString(16), a); // a0, 160

// What's the value of the middle byte? It's B0, or 176.
// Let's just make sure...
let b = (message &amp;gt;&amp;gt; 8) &amp;amp; 0xFF;
console.log(b.toString(16), b); // b0, 176

// What's the value of the lower most byte? It's C0, or 192.
// Again, let's prove that:
let c = message &amp;amp; 0xFF;
console.log(c.toString(16), b); // c0, 192
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;lets view our result in console&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ig8zLumg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lsb5ml79xx56ybzom9z7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ig8zLumg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lsb5ml79xx56ybzom9z7.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#logical-assignment-operator" class="anchor"&gt;
  &lt;/a&gt;
  Logical Assignment Operator
&lt;/h2&gt;
&lt;h4&gt;
  &lt;a href="#logical-assignment-operator-with-raw-ampamp-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  Logical Assignment Operator with  &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;Logical assignment operator combines the logical operations(&amp;amp;&amp;amp;, || or ??) with assignment.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var x = 1;
var y = 2;
x &amp;amp;&amp;amp;= y;
console.log(x); // 2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Techincally here's what is actually going on&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if(x) {
  x = y
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since &lt;code&gt;x&lt;/code&gt; is a truthy value, it is assigned with the value of &lt;code&gt;y&lt;/code&gt;, ie &lt;code&gt;2&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Just like the way we did with &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;, we can do with &lt;code&gt;||&lt;/code&gt; and &lt;code&gt;??&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;x &amp;amp;&amp;amp;= y;
x ||= y;
x ??= y;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#logical-assignment-operator-with-raw-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  Logical assignment operator with &lt;code&gt;||&lt;/code&gt;
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var x = 1;
var y = 2;
x ||= y;
console.log(x);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That means, the assignment operation happens only if &lt;code&gt;x&lt;/code&gt; is a falsy value. In our code, &lt;code&gt;x&lt;/code&gt; contains &lt;code&gt;1&lt;/code&gt; which is a truthy value and hence, assignment does not happen. That is why our code prints &lt;code&gt;1&lt;/code&gt; in the console.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#logical-assignment-operator-with-raw-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  Logical assignment operator with &lt;code&gt;??&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;??&lt;/code&gt; is Nullish Coalescing operator in JavaScript. It specifically checks if a value is &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var a;
var b = a ?? 5;
console.log(b);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In line 2, if the value of &lt;code&gt;a&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;, the right hand side of &lt;code&gt;??&lt;/code&gt; is evaluated and assigned to &lt;code&gt;b&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let us now consider &lt;code&gt;??&lt;/code&gt; along with &lt;code&gt;=&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var x;
var y = 2;
x ??= y;
console.log(x); // 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here the value of &lt;code&gt;x&lt;/code&gt; is &lt;code&gt;undefined&lt;/code&gt;. So the right hand side expression is evaluated and sets &lt;code&gt;x&lt;/code&gt; to &lt;code&gt;2&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#you-can-edit-and-test-the-code-here" class="anchor"&gt;
  &lt;/a&gt;
  You can edit and test the code here
&lt;/h2&gt;

&lt;p&gt;&lt;iframe src="https://stackblitz.com/edit/ecma2021-newfeatures?embed=1&amp;amp;&amp;amp;" width="100%" height="500"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#happy-coding" class="anchor"&gt;
  &lt;/a&gt;
  Happy Coding!
&lt;/h1&gt;

</description>
      <category>javascript</category>
      <category>tutorial</category>
      <category>webdev</category>
      <category>frontend</category>
    </item>
    <item>
      <title>10 minutes to deploy a Docker compose stack on AWS ECS illustrated with Hasura and Postgres  ⏰</title>
      <author>Raphael MANSUY</author>
      <pubDate>Tue, 09 Mar 2021 09:33:10 +0000</pubDate>
      <link>https://dev.to/raphaelmansuy/10-minutes-to-deploy-a-docker-compose-stack-on-aws-illustrated-with-hasura-and-postgres-3f6e</link>
      <guid>https://dev.to/raphaelmansuy/10-minutes-to-deploy-a-docker-compose-stack-on-aws-illustrated-with-hasura-and-postgres-3f6e</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;The &lt;code&gt;ecs-cli&lt;/code&gt; command is a little gem 💎&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;👉 &lt;code&gt;ecs-cli&lt;/code&gt; allows you to deploy a Docker stack very easily on AWS ECS using the same syntax as the &lt;a href="https://docs.docker.com/compose/compose-file/"&gt;docker-compose&lt;/a&gt; file format version 1, 2 and 3&lt;/p&gt;

&lt;p&gt;👉 The selling point of &lt;code&gt;ecs-cli&lt;/code&gt; is to reuse your &lt;code&gt;docker-compose.yml&lt;/code&gt; files to deploy your containers to AWS&lt;/p&gt;

&lt;p&gt;👉 &lt;code&gt;ecs-cli&lt;/code&gt; translates a &lt;code&gt;docker-compose-yml&lt;/code&gt; to ECS Task Desfinitions and Services&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In this article we will explore how to:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use the tool&lt;code&gt;ecs-cli&lt;/code&gt; to create an AWS ECS cluster to orchestrate a set of Docker Containers&lt;/li&gt;
&lt;li&gt;Add observability to the cluster thanks to &lt;a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/Working-with-log-groups-and-streams.html"&gt;AWS Cloud LogGroups&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Use ecs-cli to deploy a set of Docker containers on the Cluster&lt;/li&gt;
&lt;li&gt;Leverage &lt;a href="https://aws.amazon.com/efs/?sc_channel=PS&amp;amp;sc_campaign=acquisition_HK&amp;amp;sc_publisher=google&amp;amp;sc_medium=efs_b&amp;amp;sc_content=aws_efs_e&amp;amp;sc_detail=aws%20efs&amp;amp;sc_category=efs&amp;amp;sc_segment=161362669335&amp;amp;sc_matchtype=e&amp;amp;sc_country=HK&amp;amp;s_kwcid=AL!4422!3!161362669335!e!!g!!aws%20efs&amp;amp;ef_id=Cj0KCQiAs5eCBhCBARIsAEhk4r6RN6GGjzhCAGkdsaw_vwkR7dBQSXwikVvXc9QpJdTokCACooGDymgaAn2PEALw_wcB:G:s&amp;amp;s_kwcid=AL!4422!3!161362669335!e!!g!!aws%20efs"&gt;AWS EFS&lt;/a&gt; to add persistence to the Cluster and add support of stateful workloads&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Amazon Elastic File System is a cloud storage service provided by Amazon Web Services designed to provide scalable, elastic, concurrent with some restrictions, and encrypted file storage for use with both AWS cloud services and on-premises resources&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;As an example we will deploy a Docker stack composed of:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://hasura.io/"&gt;HASURA&lt;/a&gt; : an open source-engine that gives you an instant GraphQL &amp;amp; Rest API&lt;/li&gt;
&lt;li&gt;PostgresSQL 13.2 for the persistence layer&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#target-architecture" class="anchor"&gt;
  &lt;/a&gt;
  Target architecture
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LGhBbsv7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://elitizon-public.s3-us-west-2.amazonaws.com/blog/2021/09-03-deploy-a-dockerapp-on-aws-using-ecs-cli/illustrations/global-architecture.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LGhBbsv7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://elitizon-public.s3-us-west-2.amazonaws.com/blog/2021/09-03-deploy-a-dockerapp-on-aws-using-ecs-cli/illustrations/global-architecture.png" alt="illustrations/global-architecture.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#docker-stack" class="anchor"&gt;
  &lt;/a&gt;
  Docker stack
&lt;/h2&gt;

&lt;p&gt;This Docker Stack will be deployed on the &lt;code&gt;AWS ECS Cluster&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MGHL6vTt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://elitizon-public.s3-us-west-2.amazonaws.com/blog/2021/09-03-deploy-a-dockerapp-on-aws-using-ecs-cli/illustrations/docker-compose-stack.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MGHL6vTt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://elitizon-public.s3-us-west-2.amazonaws.com/blog/2021/09-03-deploy-a-dockerapp-on-aws-using-ecs-cli/illustrations/docker-compose-stack.png" alt="illustrations/docker-compose-stack.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-steps" class="anchor"&gt;
  &lt;/a&gt;
  7 Steps
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Install &lt;code&gt;ecs-cli&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Configure &lt;code&gt;ecs-cli&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Create the cluster Stack&lt;/li&gt;
&lt;li&gt;Create a &lt;code&gt;Docker Compose Stack&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Deploy the docker compose stack on &lt;code&gt;AWS ECS&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Create an elastic filesystem &lt;code&gt;AWS EFS&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Add persistence to Postgres SQL thanks to &lt;code&gt;AWS EFS&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Prerequisites (for macOS)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://stedolan.github.io/jq/"&gt;jq&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/cli/"&gt;aws-cli&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://brew.sh/"&gt;brew&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#step1-install-raw-ecscli-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  Step1 : Install &lt;code&gt;ecs-cli&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;The first step is to install the &lt;code&gt;ecs-cli&lt;/code&gt; command on your system:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The complete installation procedure for macOS, Linux and Windows is available with this &lt;a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_CLI_installation.html"&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For macOS the installation procedure is as follows:&lt;/p&gt;

&lt;p&gt;👉 Download &lt;code&gt;ecs-cli&lt;/code&gt; binary&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;curl &lt;span class="nt"&gt;-Lo&lt;/span&gt; /usr/local/bin/ecs-cli https://amazon-ecs-cli.s3.amazonaws.com/ecs-cli-darwin-amd64-latest
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;👉 install &lt;a href="https://gnupg.org/"&gt;gnupg&lt;/a&gt; (a free implementation of OpenPGP standard)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;brew &lt;span class="nb"&gt;install &lt;/span&gt;gnupg
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;👉 get the public key of &lt;code&gt;ecs-cli&lt;/code&gt; (I have copied the key in a GIST for simplicity)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;https://gist.githubusercontent.com/raphaelmansuy/5aab3c9e6c03e532e9dcf6c97c78b4ff/raw/f39b4df58833f09eb381700a6a854b1adfea482e/ecs-cli-signature-key.key

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;👉 import the signature&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;gpg &lt;span class="nt"&gt;--import&lt;/span&gt; ./signature.key
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;👉 make &lt;code&gt;ecs-cli&lt;/code&gt; executable&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo chmod&lt;/span&gt; +x /usr/local/bin/ecs-cli
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;👉 verify the setup&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ecs-cli &lt;span class="nt"&gt;--version&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#configure-raw-ecscli-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  Configure &lt;code&gt;ecs-cli&lt;/code&gt; 👩‍🌾
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Prerequisite&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;AWS CLI v2 must be installed. If it's not the case you can follow these instructions on this &lt;a href="https://docs.aws.amazon.com/cli/latest/userguide/install-cliv2.html"&gt;link&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;You need to have an AWS_ACCESS_KEY_ID / AWS_SECRET_ACCESS_KEY with administrative privileges&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To create your AWS_ACCESS_KEY_ID you can read this &lt;a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html"&gt;documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Your environment variables must be configured with a correct pair of AWS_ACCESS_KEY_ID / AWS_SECRET_ACCESS_KEY&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;AWS_ACCESS_KEY_ID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Your Access Key"&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;AWS_SECRET_ACCESS_KEY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Your Secret Access Key"&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;AWS_DEFAULT_REGION&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;us-west-2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The following script configure an ECS-profile called &lt;code&gt;tutorial&lt;/code&gt; for a cluster named &lt;code&gt;tutorial-cluster&lt;/code&gt; on the &lt;code&gt;us-west-2&lt;/code&gt; region with a default launch type based on EC2 instances:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;configure.sh&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="nt"&gt;-e&lt;/span&gt;
&lt;span class="nv"&gt;PROFILE_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;tutorial
&lt;span class="nv"&gt;CLUSTER_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;tutorial-cluster
&lt;span class="nv"&gt;REGION&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;us-west-2
&lt;span class="nv"&gt;LAUNCH_TYPE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;EC2
ecs-cli configure profile &lt;span class="nt"&gt;--profile-name&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$PROFILE_NAME&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="nt"&gt;--access-key&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$AWS_ACCESS_KEY_ID&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="nt"&gt;--secret-key&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$AWS_SECRET_ACCESS_KEY&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
ecs-cli configure &lt;span class="nt"&gt;--cluster&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$CLUSTER_NAME&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="nt"&gt;--default-launch-type&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$LAUNCH_TYPE&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="nt"&gt;--region&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$REGION&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="nt"&gt;--config-name&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$PROFILE_NAME&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step2-creation-of-an-ecscluster" class="anchor"&gt;
  &lt;/a&gt;
  Step2 : Creation of an ECS-Cluster 🚀
&lt;/h2&gt;

&lt;p&gt;We will create an ECS-Cluster based on ec2 instance.&lt;/p&gt;

&lt;p&gt;ECS allows 2 launch types &lt;code&gt;EC2&lt;/code&gt; and &lt;code&gt;FARGATE&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;EC2 (Deploy and manage your own cluster of EC2 instances for running the containers)&lt;/li&gt;
&lt;li&gt;AWS Fargate (Run containers directly, without any EC2 instances)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;If we want to connect to the ec2 instances with ssh we need to have a key pair&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;👉 Creation of a key pair called &lt;code&gt;tutorial-cluster&lt;/code&gt; :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;aws ec2 create-key-pair &lt;span class="nt"&gt;--key-name&lt;/span&gt; tutorial-cluster &lt;span class="se"&gt;\&lt;/span&gt;
 &lt;span class="nt"&gt;--query&lt;/span&gt; &lt;span class="s1"&gt;'KeyMaterial'&lt;/span&gt; &lt;span class="nt"&gt;--output&lt;/span&gt; text &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; ~/.ssh/tutorial-cluster.pem
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;👉 Creation of the Cluster &lt;code&gt;tutorial-cluster&lt;/code&gt; with 2 ec2-instances t3.medium&lt;/p&gt;

&lt;p&gt;&lt;code&gt;create-cluster.sh&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="nv"&gt;KEY_PAIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;tutorial-cluster
    ecs-cli up &lt;span class="se"&gt;\&lt;/span&gt;
      &lt;span class="nt"&gt;--keypair&lt;/span&gt; &lt;span class="nv"&gt;$KEY_PAIR&lt;/span&gt;  &lt;span class="se"&gt;\&lt;/span&gt;
      &lt;span class="nt"&gt;--capability-iam&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
      &lt;span class="nt"&gt;--size&lt;/span&gt; 2 &lt;span class="se"&gt;\&lt;/span&gt;
      &lt;span class="nt"&gt;--instance-type&lt;/span&gt; t3.medium &lt;span class="se"&gt;\&lt;/span&gt;
      &lt;span class="nt"&gt;--tags&lt;/span&gt; &lt;span class="nv"&gt;project&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;tutorial-cluster,owner&lt;span class="o"&gt;=&lt;/span&gt;raphael &lt;span class="se"&gt;\&lt;/span&gt;
      &lt;span class="nt"&gt;--cluster-config&lt;/span&gt; tutorial &lt;span class="se"&gt;\&lt;/span&gt;
      &lt;span class="nt"&gt;--ecs-profile&lt;/span&gt; tutorial
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have added 2 tags &lt;code&gt;project=tutorial&lt;/code&gt; and &lt;code&gt;owner=raphael&lt;/code&gt; to easily identify the resources created by the command&lt;/p&gt;

&lt;p&gt;👉 Result&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;INFO[0006] Using recommended Amazon Linux 2 AMI with ECS Agent 1.50.2 and Docker version 19.03.13-ce
INFO[0007] Created cluster                               &lt;span class="nv"&gt;cluster&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;tutorial-cluster &lt;span class="nv"&gt;region&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;us-west-2
INFO[0010] Waiting &lt;span class="k"&gt;for &lt;/span&gt;your cluster resources to be created...
INFO[0010] Cloudformation stack status                   &lt;span class="nv"&gt;stackStatus&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;CREATE_IN_PROGRESS
INFO[0073] Cloudformation stack status                   &lt;span class="nv"&gt;stackStatus&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;CREATE_IN_PROGRESS
INFO[0136] Cloudformation stack status                   &lt;span class="nv"&gt;stackStatus&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;CREATE_IN_PROGRESS
VPC created: vpc-XXXXX
Security Group created: sg-XXXXX
Subnet created: subnet-AAAA
Subnet created: subnet-BBBB
Cluster creation succeeded.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;This command create:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A new public VPC

&lt;ul&gt;
&lt;li&gt;An internet gateway&lt;/li&gt;
&lt;li&gt;The routing tables&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;2 public subnets in 2 availability zones&lt;/li&gt;
&lt;li&gt;1 security group&lt;/li&gt;
&lt;li&gt;1 autoscaling group

&lt;ul&gt;
&lt;li&gt;2 ec2 instances&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;1 ecs cluster&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5HEYeCkW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://elitizon-public.s3-us-west-2.amazonaws.com/blog/2021/09-03-deploy-a-dockerapp-on-aws-using-ecs-cli/illustrations/Screen_Shot_2021-03-08_at_11.36.36.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5HEYeCkW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://elitizon-public.s3-us-west-2.amazonaws.com/blog/2021/09-03-deploy-a-dockerapp-on-aws-using-ecs-cli/illustrations/Screen_Shot_2021-03-08_at_11.36.36.png" alt="illustrations/Screen_Shot_2021-03-08_at_11.36.36.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can now deploy a sample Docker application on the newly created ECS Cluster:&lt;/p&gt;

&lt;p&gt;👉 Create a file called &lt;code&gt;docker-compose.yml&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;version: &lt;span class="s2"&gt;"3"&lt;/span&gt;
services:
  webdemo:
    image: &lt;span class="s2"&gt;"amazon/amazon-ecs-sample"&lt;/span&gt;
    ports:
      - &lt;span class="s2"&gt;"80:80"&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This stack can best tested locally&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker-compose up
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Results:&lt;/p&gt;

&lt;p&gt;latest: Pulling from amazon/amazon-ecs-sample&lt;br&gt;
Digest: sha256:36c7b282abd0186e01419f2e58743e1bf635808231049bbc9d77e59e3a8e4914&lt;br&gt;
Status: Downloaded newer image for amazon/amazon-ecs-sample:latest&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0PQjaa1l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://elitizon-public.s3-us-west-2.amazonaws.com/blog/2021/09-03-deploy-a-dockerapp-on-aws-using-ecs-cli/illustrations/Screen_Shot_2021-03-08_at_13.01.06.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0PQjaa1l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://elitizon-public.s3-us-west-2.amazonaws.com/blog/2021/09-03-deploy-a-dockerapp-on-aws-using-ecs-cli/illustrations/Screen_Shot_2021-03-08_at_13.01.06.png" alt="illustrations/Screen_Shot_2021-03-08_at_13.01.06.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;👉 We can now deploy this stack on AWS ECS:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ecs-cli compose &lt;span class="nt"&gt;--project-name&lt;/span&gt; tutorial  &lt;span class="nt"&gt;--file&lt;/span&gt; docker-compose.yml &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--debug&lt;/span&gt; service up  &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--deployment-max-percent&lt;/span&gt; 100 &lt;span class="nt"&gt;--deployment-min-healthy-percent&lt;/span&gt; 0 &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--region&lt;/span&gt; us-west-2 &lt;span class="nt"&gt;--ecs-profile&lt;/span&gt; tutorial &lt;span class="nt"&gt;--cluster-config&lt;/span&gt; tutorial
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;👉 To verify that the service is running we can use this command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ecs-cli ps
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Results:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Name                                                       State    Ports                     TaskDefinition  Health
tutorial-cluster/2e5af2d48dbc41c1a98/webdemo  RUNNING  34.217.107.14:80-&amp;gt;80/tcp  tutorial:2      UNKNOWNK
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The stack is deployed and accessible with the IP address &lt;code&gt;34.217.107.14&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;👉 We can now browse the deployed Website:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;open http://34.217.107.14
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;👉 Open the port 22 to connect to the EC2 instances of the cluster&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;
&lt;span class="c"&gt;# Get my IP&lt;/span&gt;
&lt;span class="nv"&gt;myip&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;dig +short myip.opendns.com @resolver1.opendns.com&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

&lt;span class="c"&gt;# Get the security group&lt;/span&gt;
&lt;span class="nv"&gt;sg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;aws ec2 describe-security-groups   &lt;span class="nt"&gt;--filters&lt;/span&gt; &lt;span class="nv"&gt;Name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;tag:project,Values&lt;span class="o"&gt;=&lt;/span&gt;tutorial-cluster | jq &lt;span class="s1"&gt;'.SecurityGroups[].GroupId'&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

&lt;span class="c"&gt;# Add port 22 to the Security Group of the VPC&lt;/span&gt;
aws ec2 authorize-security-group-ingress &lt;span class="se"&gt;\&lt;/span&gt;
        &lt;span class="nt"&gt;--group-id&lt;/span&gt; &lt;span class="nv"&gt;$sg&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
        &lt;span class="nt"&gt;--protocol&lt;/span&gt; tcp &lt;span class="se"&gt;\&lt;/span&gt;
        &lt;span class="nt"&gt;--port&lt;/span&gt; 22 &lt;span class="se"&gt;\&lt;/span&gt;
        &lt;span class="nt"&gt;--cidr&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$myip&lt;/span&gt;&lt;span class="s2"&gt;/32"&lt;/span&gt; | jq &lt;span class="s1"&gt;'.'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;👉 Connection to the instance&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;chmod &lt;/span&gt;400 ~/.ssh/tutorial-cluster.pem
ssh &lt;span class="nt"&gt;-i&lt;/span&gt; ~/.ssh/tutorial-cluster.pem ec2-user@34.217.107.14
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;👉 Once we are connected to the remoter server: we can observe the running containers:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker ps
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;CONTAINER ID        IMAGE                            COMMAND                  CREATED             STATUS                    PORTS                NAMES
7deaa49ed72c        amazon/amazon-ecs-sample         &lt;span class="s2"&gt;"/usr/sbin/apache2 -…"&lt;/span&gt;   2 minutes ago       Up 2 minutes              0.0.0.0:80-&amp;gt;80/tcp   ecs-tutorial-3-webdemo-9cb1a49483a9cfb7b101
cd1d2a9807d4        amazon/amazon-ecs-agent:latest   &lt;span class="s2"&gt;"/agent"&lt;/span&gt;                 55 minutes ago      Up 55 minutes &lt;span class="o"&gt;(&lt;/span&gt;healthy&lt;span class="o"&gt;)&lt;/span&gt;                        ecs-agent
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step3-adding-observability" class="anchor"&gt;
  &lt;/a&gt;
  Step3 : Adding observability 🤩
&lt;/h2&gt;

&lt;p&gt;If we want to collect the logs for my running instances, we can create AWS CloudWatch Log Groups.&lt;/p&gt;

&lt;p&gt;For that we can modify the &lt;code&gt;docker-compose.yml&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;version: &lt;span class="s2"&gt;"2"&lt;/span&gt;
services:
  webdemo:
    image: &lt;span class="s2"&gt;"amazon/amazon-ecs-sample"&lt;/span&gt;
    ports:
      - &lt;span class="s2"&gt;"80:80"&lt;/span&gt;
    logging:
      driver: awslogs
      options:
         awslogs-group: tutorial
         awslogs-region: us-west-2
         awslogs-stream-prefix: demo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;👉 And then redeploy the service with a create-log-groups option&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ecs-cli compose &lt;span class="nt"&gt;--project-name&lt;/span&gt; tutorial  &lt;span class="nt"&gt;--file&lt;/span&gt; docker-compose.yml &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--debug&lt;/span&gt; service up  &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--deployment-max-percent&lt;/span&gt; 100 &lt;span class="nt"&gt;--deployment-min-healthy-percent&lt;/span&gt; 0 &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--region&lt;/span&gt; us-west-2 &lt;span class="nt"&gt;--ecs-profile&lt;/span&gt; tutorial &lt;span class="nt"&gt;--cluster-config&lt;/span&gt; tutorial &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--create-log-groups&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TpUDLwx5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://elitizon-public.s3-us-west-2.amazonaws.com/blog/2021/09-03-deploy-a-dockerapp-on-aws-using-ecs-cli/illustrations/Screen_Shot_2021-03-08_at_15.07.28.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TpUDLwx5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://elitizon-public.s3-us-west-2.amazonaws.com/blog/2021/09-03-deploy-a-dockerapp-on-aws-using-ecs-cli/illustrations/Screen_Shot_2021-03-08_at_15.07.28.png" alt="illustrations/Screen_Shot_2021-03-08_at_15.07.28.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;👉 We can now delete the service 🗑&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;
ecs-cli compose &lt;span class="nt"&gt;--project-name&lt;/span&gt; tutorial  &lt;span class="nt"&gt;--file&lt;/span&gt; docker-compose.yml &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--debug&lt;/span&gt; service down  &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--region&lt;/span&gt; us-west-2 &lt;span class="nt"&gt;--ecs-profile&lt;/span&gt; tutorial &lt;span class="nt"&gt;--cluster-config&lt;/span&gt; tutorial

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#deploying-a-more-complex-stack" class="anchor"&gt;
  &lt;/a&gt;
  👉 Deploying a more complex stack
&lt;/h2&gt;

&lt;p&gt;We are now ready to deploy &lt;a href="https://hasura.io/"&gt;HASURA&lt;/a&gt; and &lt;a href="https://www.postgresql.org/"&gt;Postgres&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UoXYAC31--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://elitizon-public.s3-us-west-2.amazonaws.com/blog/2021/09-03-deploy-a-dockerapp-on-aws-using-ecs-cli/illustrations/docker-compose-hasura.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UoXYAC31--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://elitizon-public.s3-us-west-2.amazonaws.com/blog/2021/09-03-deploy-a-dockerapp-on-aws-using-ecs-cli/illustrations/docker-compose-hasura.png" alt="illustrations/docker-compose-hasura.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker-compose.yml&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;version: &lt;span class="s1"&gt;'3'&lt;/span&gt;
services:
  postgres:
    image: postgres:12
    restart: always
    volumes:
    - db_data:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: postgrespassword
  graphql-engine:
    image: hasura/graphql-engine:v1.3.3
    ports:
    - &lt;span class="s2"&gt;"80:8080"&lt;/span&gt;
    depends_on:
    - &lt;span class="s2"&gt;"postgres"&lt;/span&gt;
    restart: always
    environment:
      HASURA_GRAPHQL_DATABASE_URL: postgres://postgres:postgrespassword@postgres:5432/postgres
      &lt;span class="c"&gt;## enable the console served by server&lt;/span&gt;
      HASURA_GRAPHQL_ENABLE_CONSOLE: &lt;span class="s2"&gt;"true"&lt;/span&gt; &lt;span class="c"&gt;# set to "false" to disable console&lt;/span&gt;
      &lt;span class="c"&gt;## enable debugging mode. It is recommended to disable this in production&lt;/span&gt;
      HASURA_GRAPHQL_DEV_MODE: &lt;span class="s2"&gt;"true"&lt;/span&gt;
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      &lt;span class="c"&gt;## uncomment next line to set an admin secret&lt;/span&gt;
      &lt;span class="c"&gt;# HASURA_GRAPHQL_ADMIN_SECRET: myadminsecretkey&lt;/span&gt;
volumes:
  db_data:
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;👉 We can test the stack locally:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker-compose up &amp;amp;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;open localhost
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g2OaYQN---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://elitizon-public.s3-us-west-2.amazonaws.com/blog/2021/09-03-deploy-a-dockerapp-on-aws-using-ecs-cli/illustrations/Screen_Shot_2021-03-08_at_15.25.17.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g2OaYQN---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://elitizon-public.s3-us-west-2.amazonaws.com/blog/2021/09-03-deploy-a-dockerapp-on-aws-using-ecs-cli/illustrations/Screen_Shot_2021-03-08_at_15.25.17.png" alt="illustrations/Screen_Shot_2021-03-08_at_15.25.17.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;👉 We can now deploy this stack on AWS ECS&lt;/p&gt;

&lt;p&gt;But before that we need to update the file &lt;code&gt;docker-compose.yml&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We must add:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A &lt;code&gt;logging&lt;/code&gt; directive&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;links&lt;/code&gt; directive&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--23Yk8bRw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://elitizon-public.s3-us-west-2.amazonaws.com/blog/2021/09-03-deploy-a-dockerapp-on-aws-using-ecs-cli/illustrations/docker-compose-hasura-step2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--23Yk8bRw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://elitizon-public.s3-us-west-2.amazonaws.com/blog/2021/09-03-deploy-a-dockerapp-on-aws-using-ecs-cli/illustrations/docker-compose-hasura-step2.png" alt="illustrations/docker-compose-hasura-step2.png"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;version: &lt;span class="s1"&gt;'3'&lt;/span&gt;
services:
  postgres:
    image: postgres:12
    restart: always
    volumes:
    - db_data:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: postgrespassword
    logging:
      driver: awslogs
      options:
         awslogs-group: tutorial
         awslogs-region: us-west-2
         awslogs-stream-prefix: hasura-postgres
  graphql-engine:
    image: hasura/graphql-engine:v1.3.3
    ports:
    - &lt;span class="s2"&gt;"80:8080"&lt;/span&gt;
    depends_on:
    - &lt;span class="s2"&gt;"postgres"&lt;/span&gt;
    links:
      - postgres
    restart: always
    environment:
      HASURA_GRAPHQL_DATABASE_URL: postgres://postgres:postgrespassword@postgres:5432/postgres
      &lt;span class="c"&gt;## enable the console served by server&lt;/span&gt;
      HASURA_GRAPHQL_ENABLE_CONSOLE: &lt;span class="s2"&gt;"true"&lt;/span&gt; &lt;span class="c"&gt;# set to "false" to disable console&lt;/span&gt;
      &lt;span class="c"&gt;## enable debugging mode. It is recommended to disable this in production&lt;/span&gt;
      HASURA_GRAPHQL_DEV_MODE: &lt;span class="s2"&gt;"true"&lt;/span&gt;
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      &lt;span class="c"&gt;## uncomment next line to set an admin secret&lt;/span&gt;
      &lt;span class="c"&gt;# HASURA_GRAPHQL_ADMIN_SECRET: myadminsecretkey&lt;/span&gt;
    logging:
      driver: awslogs
      options:
         awslogs-group: tutorial
         awslogs-region: us-west-2
         awslogs-stream-prefix: hasura
volumes:
  db_data:
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We need to create a file called &lt;code&gt;ecs-params.yml&lt;/code&gt; to specify extra parameters:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;
version: 1
task_definition:
  ecs_network_mode: bridge
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This file will be used by the &lt;code&gt;ecs-cli&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;👉 we can then launch the stack:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ecs-cli compose &lt;span class="nt"&gt;--project-name&lt;/span&gt; tutorial  &lt;span class="nt"&gt;--file&lt;/span&gt; docker-compose.yml &lt;span class="se"&gt;\&lt;/span&gt;
 &lt;span class="nt"&gt;--debug&lt;/span&gt; service up  &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--deployment-max-percent&lt;/span&gt; 100 &lt;span class="nt"&gt;--deployment-min-healthy-percent&lt;/span&gt; 0 &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;--region&lt;/span&gt; us-west-2 &lt;span class="nt"&gt;--ecs-profile&lt;/span&gt; tutorial &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--cluster-config&lt;/span&gt; tutorial &lt;span class="nt"&gt;--create-log-groups&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Results:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;DEBU[0000] Parsing the compose yaml...
DEBU[0000] Docker Compose version found: 3
DEBU[0000] Parsing v3 project...
WARN[0000] Skipping unsupported YAML option &lt;span class="k"&gt;for &lt;/span&gt;service...  option &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;restart service &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;postgres
WARN[0000] Skipping unsupported YAML option &lt;span class="k"&gt;for &lt;/span&gt;service...  option &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;depends_on service &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;graphql-engine
WARN[0000] Skipping unsupported YAML option &lt;span class="k"&gt;for &lt;/span&gt;service...  option &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;restart service &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;graphql-engine
DEBU[0000] Parsing the ecs-params yaml...
DEBU[0000] Parsing the ecs-registry-creds yaml...
DEBU[0000] Transforming yaml to task definition...
DEBU[0004] Finding task definition &lt;span class="k"&gt;in &lt;/span&gt;cache or creating &lt;span class="k"&gt;if &lt;/span&gt;needed  &lt;span class="nv"&gt;TaskDefinition&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"{&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;  ContainerDefinitions: [{&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;      Command: [],&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;      Cpu: 0,&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;      DnsSearchDomains: [],&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;      DnsServers: [],&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;      DockerSecurityOptions: [],&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;      EntryPoint: [],&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;      Environment: [{&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;          Name: &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;POSTGRES_PASSWORD&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;,&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;          Value: &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;postgrespassword&lt;/span&gt;&lt;span class="se"&gt;\"\n&lt;/span&gt;&lt;span class="s2"&gt;        }],&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;      Essential: true,&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;      ExtraHosts: [],&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;      Image: &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;postgres:12&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;,&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;      Links: [],&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;      LinuxParameters: {&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;        Capabilities: {&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s2"&gt;        },&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;        Devices: []&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;      },&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;      Memory: 512,&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;      MountPoints: [{&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;          ContainerPath: &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;/var/lib/postgresql/data&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;,&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;          ReadOnly: false,&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;          SourceVolume: &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;db_data&lt;/span&gt;&lt;span class="se"&gt;\"\n&lt;/span&gt;&lt;span class="s2"&gt;        }],&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;      Name: &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;postgres&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;,&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;      Privileged: false,&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;      PseudoTerminal: false,&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;      ReadonlyRootFilesystem: false&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;    },{&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;      Command: [],&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;      Cpu: 0,&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;      DnsSearchDomains: [],&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;      DnsServers: [],&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;      DockerSecurityOptions: [],&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;      EntryPoint: [],&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;      Environment: [&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;        {&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;          Name: &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;HASURA_GRAPHQL_ENABLED_LOG_TYPES&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;,&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;          Value: &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;startup, http-log, webhook-log, websocket-log, query-log&lt;/span&gt;&lt;span class="se"&gt;\"\n&lt;/span&gt;&lt;span class="s2"&gt;        },&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;        {&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;          Name: &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;HASURA_GRAPHQL_DATABASE_URL&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;,&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;          Value: &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;postgres://postgres:postgrespassword@postgres:5432/postgres&lt;/span&gt;&lt;span class="se"&gt;\"\n&lt;/span&gt;&lt;span class="s2"&gt;        },&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;        {&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;          Name: &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;HASURA_GRAPHQL_ENABLE_CONSOLE&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;,&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;          Value: &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;true&lt;/span&gt;&lt;span class="se"&gt;\"\n&lt;/span&gt;&lt;span class="s2"&gt;        },&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;        {&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;          Name: &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;HASURA_GRAPHQL_DEV_MODE&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;,&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;          Value: &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;true&lt;/span&gt;&lt;span class="se"&gt;\"\n&lt;/span&gt;&lt;span class="s2"&gt;        }&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;      ],&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;      Essential: true,&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;      ExtraHosts: [],&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;      Image: &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;hasura/graphql-engine:v1.3.3&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;,&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;      Links: [],&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;      LinuxParameters: {&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;        Capabilities: {&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s2"&gt;        },&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;        Devices: []&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;      },&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;      Memory: 512,&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;      Name: &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;graphql-engine&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;,&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;      PortMappings: [{&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;          ContainerPort: 8080,&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;          HostPort: 80,&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;          Protocol: &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;tcp&lt;/span&gt;&lt;span class="se"&gt;\"\n&lt;/span&gt;&lt;span class="s2"&gt;        }],&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;      Privileged: false,&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;      PseudoTerminal: false,&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;      ReadonlyRootFilesystem: false&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;    }],&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;  Cpu: &lt;/span&gt;&lt;span class="se"&gt;\"\"&lt;/span&gt;&lt;span class="s2"&gt;,&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;  ExecutionRoleArn: &lt;/span&gt;&lt;span class="se"&gt;\"\"&lt;/span&gt;&lt;span class="s2"&gt;,&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;  Family: &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;tutorial&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;,&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;  Memory: &lt;/span&gt;&lt;span class="se"&gt;\"\"&lt;/span&gt;&lt;span class="s2"&gt;,&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;  NetworkMode: &lt;/span&gt;&lt;span class="se"&gt;\"\"&lt;/span&gt;&lt;span class="s2"&gt;,&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;  RequiresCompatibilities: [&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;EC2&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;],&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;  TaskRoleArn: &lt;/span&gt;&lt;span class="se"&gt;\"\"&lt;/span&gt;&lt;span class="s2"&gt;,&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;  Volumes: [{&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;      Name: &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;db_data&lt;/span&gt;&lt;span class="se"&gt;\"\n&lt;/span&gt;&lt;span class="s2"&gt;    }]&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;}"&lt;/span&gt;
DEBU[0005] cache miss                                    &lt;span class="nv"&gt;taskDef&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"{&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s2"&gt;}"&lt;/span&gt; &lt;span class="nv"&gt;taskDefHash&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;4e57f367846e8f3546dd07eadc605490
INFO[0005] Using ECS task definition                     &lt;span class="nv"&gt;TaskDefinition&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"tutorial:4"&lt;/span&gt;
WARN[0005] No log &lt;span class="nb"&gt;groups &lt;/span&gt;to create&lt;span class="p"&gt;;&lt;/span&gt; no containers use &lt;span class="s1"&gt;'awslogs'&lt;/span&gt;
INFO[0005] Updated the ECS service with a new task definition. Old containers will be stopped automatically, and replaced with new ones  deployment-max-percent&lt;span class="o"&gt;=&lt;/span&gt;100 deployment-min-healthy-percent&lt;span class="o"&gt;=&lt;/span&gt;0 &lt;span class="nv"&gt;desiredCount&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1 force-deployment&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false &lt;/span&gt;&lt;span class="nv"&gt;service&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;tutorial
INFO[0006] Service status                                &lt;span class="nv"&gt;desiredCount&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1 &lt;span class="nv"&gt;runningCount&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1 &lt;span class="nv"&gt;serviceName&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;tutorial
INFO[0027] Service status                                &lt;span class="nv"&gt;desiredCount&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1 &lt;span class="nv"&gt;runningCount&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0 &lt;span class="nv"&gt;serviceName&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;tutorial
INFO[0027] &lt;span class="o"&gt;(&lt;/span&gt;service tutorial&lt;span class="o"&gt;)&lt;/span&gt; has stopped 1 running tasks: &lt;span class="o"&gt;(&lt;/span&gt;task ee882a6a66724415a3bdc8fffaa2824c&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt;  &lt;span class="nv"&gt;timestamp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"2021-03-08 07:30:33 +0000 UTC"&lt;/span&gt;
INFO[0037] &lt;span class="o"&gt;(&lt;/span&gt;service tutorial&lt;span class="o"&gt;)&lt;/span&gt; has started 1 tasks: &lt;span class="o"&gt;(&lt;/span&gt;task a1068efe89614812a3243521c0d30847&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt;  &lt;span class="nv"&gt;timestamp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"2021-03-08 07:30:43 +0000 UTC"&lt;/span&gt;
INFO[0074] &lt;span class="o"&gt;(&lt;/span&gt;service tutorial&lt;span class="o"&gt;)&lt;/span&gt; has started 1 tasks: &lt;span class="o"&gt;(&lt;/span&gt;task 1949af75ac5a4e749dfedcb89321fd67&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt;  &lt;span class="nv"&gt;timestamp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"2021-03-08 07:31:23 +0000 UTC"&lt;/span&gt;
INFO[0080] Service status                                &lt;span class="nv"&gt;desiredCount&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1 &lt;span class="nv"&gt;runningCount&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1 &lt;span class="nv"&gt;serviceName&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;tutorial
INFO[0080] ECS Service has reached a stable state        &lt;span class="nv"&gt;desiredCount&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1 &lt;span class="nv"&gt;runningCount&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1 &lt;span class="nv"&gt;serviceName&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;tutorial
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;👉 And then we can verify that our container are running on AWS ECS Cluster&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ecs-cli ps
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Results&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Name                                                              State                  Ports                       TaskDefinition  Health
tutorial-cluster/00d7ff5191dd4d11a9b52ea64fb9ee26/graphql-engine  RUNNING                34.217.107.14:80-&amp;gt;8080/tcp  tutorial:10     UNKNOWN
tutorial-cluster/00d7ff5191dd4d11a9b52ea64fb9ee26/postgres        RUNNING                                            tutorial:10     UNKNOWN

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;👉 And then: 💪&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;open http://34.217.107.14
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HGHZzMRG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://elitizon-public.s3-us-west-2.amazonaws.com/blog/2021/09-03-deploy-a-dockerapp-on-aws-using-ecs-cli/illustrations/Screen_Shot_2021-03-08_at_16.09.29.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HGHZzMRG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://elitizon-public.s3-us-west-2.amazonaws.com/blog/2021/09-03-deploy-a-dockerapp-on-aws-using-ecs-cli/illustrations/Screen_Shot_2021-03-08_at_16.09.29.png" alt="illustrations/Screen_Shot_2021-03-08_at_16.09.29.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;👉 We can now stop the stack&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ecs-cli compose down
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To add persistent support to my solution we can leverage AWS EFS : Elastic File System&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-4-add-a-persistent-layer-to-my-cluster" class="anchor"&gt;
  &lt;/a&gt;
  Step 4: Add a persistent layer to my cluster
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fhp2fZbT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://elitizon-public.s3-us-west-2.amazonaws.com/blog/2021/09-03-deploy-a-dockerapp-on-aws-using-ecs-cli/illustrations/efs-file-system.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fhp2fZbT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://elitizon-public.s3-us-west-2.amazonaws.com/blog/2021/09-03-deploy-a-dockerapp-on-aws-using-ecs-cli/illustrations/efs-file-system.png" alt="illustrations/efs-file-system.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;👉 Create an EFS file system named &lt;code&gt;hasura-db-file-system&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;aws efs create-file-system &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--performance-mode&lt;/span&gt; generalPurpose &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--throughput-mode&lt;/span&gt; bursting &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--encrypted&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--tags&lt;/span&gt; &lt;span class="nv"&gt;Key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;Name,Value&lt;span class="o"&gt;=&lt;/span&gt;hasura-db-filesystem
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Results:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"OwnerId"&lt;/span&gt;: &lt;span class="s2"&gt;"XXXXX"&lt;/span&gt;,
    &lt;span class="s2"&gt;"CreationToken"&lt;/span&gt;: &lt;span class="s2"&gt;"10f91a50-0649-442d-b4ad-2ce67f1546bf"&lt;/span&gt;,
    &lt;span class="s2"&gt;"FileSystemId"&lt;/span&gt;: &lt;span class="s2"&gt;"fs-5574bd52"&lt;/span&gt;,
    &lt;span class="s2"&gt;"FileSystemArn"&lt;/span&gt;: &lt;span class="s2"&gt;"arn:aws:elasticfilesystem:us-west-2:XXXXX:file-system/fs-5574bd52"&lt;/span&gt;,
    &lt;span class="s2"&gt;"CreationTime"&lt;/span&gt;: &lt;span class="s2"&gt;"2021-03-08T16:40:19+08:00"&lt;/span&gt;,
    &lt;span class="s2"&gt;"LifeCycleState"&lt;/span&gt;: &lt;span class="s2"&gt;"creating"&lt;/span&gt;,
    &lt;span class="s2"&gt;"Name"&lt;/span&gt;: &lt;span class="s2"&gt;"hasura-db-filesystem"&lt;/span&gt;,
    &lt;span class="s2"&gt;"NumberOfMountTargets"&lt;/span&gt;: 0,
    &lt;span class="s2"&gt;"SizeInBytes"&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;"Value"&lt;/span&gt;: 0,
        &lt;span class="s2"&gt;"ValueInIA"&lt;/span&gt;: 0,
        &lt;span class="s2"&gt;"ValueInStandard"&lt;/span&gt;: 0
    &lt;span class="o"&gt;}&lt;/span&gt;,
    &lt;span class="s2"&gt;"PerformanceMode"&lt;/span&gt;: &lt;span class="s2"&gt;"generalPurpose"&lt;/span&gt;,
    &lt;span class="s2"&gt;"Encrypted"&lt;/span&gt;: &lt;span class="nb"&gt;true&lt;/span&gt;,
    &lt;span class="s2"&gt;"KmsKeyId"&lt;/span&gt;: &lt;span class="s2"&gt;"arn:aws:kms:us-west-2:XXXXX:key/97542264-cc64-42f9-954e-4af2b17f72aa"&lt;/span&gt;,
    &lt;span class="s2"&gt;"ThroughputMode"&lt;/span&gt;: &lt;span class="s2"&gt;"bursting"&lt;/span&gt;,
    &lt;span class="s2"&gt;"Tags"&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;
        &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="s2"&gt;"Key"&lt;/span&gt;: &lt;span class="s2"&gt;"Name"&lt;/span&gt;,
            &lt;span class="s2"&gt;"Value"&lt;/span&gt;: &lt;span class="s2"&gt;"hasura-db-filesystem"&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;👉 Add mount points to each subnet of the VPC:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;aws ec2 describe-subnets &lt;span class="nt"&gt;--filters&lt;/span&gt; &lt;span class="nv"&gt;Name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;tag:project,Values&lt;span class="o"&gt;=&lt;/span&gt;tutorial-cluster &lt;span class="se"&gt;\&lt;/span&gt;
 | jq &lt;span class="s2"&gt;".Subnets[].SubnetId"&lt;/span&gt; | &lt;span class="se"&gt;\&lt;/span&gt;
xargs &lt;span class="nt"&gt;-ISUBNET&lt;/span&gt;  aws efs create-mount-target &lt;span class="se"&gt;\&lt;/span&gt;
 &lt;span class="nt"&gt;--file-system-id&lt;/span&gt; fs-5574bd52 &lt;span class="nt"&gt;--subnet-id&lt;/span&gt; SUBNET
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The next step is to allow NFS connection from the VPC&lt;/p&gt;

&lt;p&gt;We need first to get the security group associated with each mount target&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;    &lt;span class="nv"&gt;efs_sg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;aws efs describe-mount-targets &lt;span class="nt"&gt;--file-system-id&lt;/span&gt; fs-5574bd52 &lt;span class="se"&gt;\&lt;/span&gt;
    | jq &lt;span class="s2"&gt;".MountTargets[0].MountTargetId"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
     | xargs &lt;span class="nt"&gt;-IMOUNTG&lt;/span&gt; aws efs describe-mount-target-security-groups &lt;span class="se"&gt;\&lt;/span&gt;
     &lt;span class="nt"&gt;--mount-target-id&lt;/span&gt; MOUNTG | jq &lt;span class="s2"&gt;".SecurityGroups[0]"&lt;/span&gt; | xargs &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="si"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;👉 Then we need to open the TCP port 2049 for the security group of the VPC&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;vpc_sg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;aws ec2 describe-security-groups  &lt;span class="se"&gt;\&lt;/span&gt;
 &lt;span class="nt"&gt;--filters&lt;/span&gt; &lt;span class="nv"&gt;Name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;tag:project,Values&lt;span class="o"&gt;=&lt;/span&gt;tutorial-cluster &lt;span class="se"&gt;\&lt;/span&gt;
 | jq &lt;span class="s1"&gt;'.SecurityGroups[].GroupId'&lt;/span&gt; | xargs &lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;👉 Then we need to authorize the TCP/2049 port from the default security group of the VPC&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;aws ec2 authorize-security-group-ingress &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--group-id&lt;/span&gt; &lt;span class="nv"&gt;$efs_sg&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--protocol&lt;/span&gt; tcp &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--port&lt;/span&gt; 2049 &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--source-group&lt;/span&gt; &lt;span class="nv"&gt;$vpc_sg&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--region&lt;/span&gt; us-west-2

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;👉 We can now modify the &lt;code&gt;ecs-params.yml&lt;/code&gt; to add persistence support:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We use the ID of the EFS volume that has been created on the latest step : &lt;code&gt;fs-5574bd52&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;version: 1
task_definition:
  ecs_network_mode: bridge
  efs_volumes:
    - name: db_data
      filesystem_id: fs-5574bd52
      transit_encryption: ENABLED
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;👉 Then we can redeploy our stack:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ecs-cli compose &lt;span class="nt"&gt;--project-name&lt;/span&gt; tutorial  &lt;span class="nt"&gt;--file&lt;/span&gt; docker-compose.yml &lt;span class="se"&gt;\&lt;/span&gt;
 &lt;span class="nt"&gt;--debug&lt;/span&gt; service up  &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--deployment-max-percent&lt;/span&gt; 100 &lt;span class="nt"&gt;--deployment-min-healthy-percent&lt;/span&gt; 0 &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;--region&lt;/span&gt; us-west-2 &lt;span class="nt"&gt;--ecs-profile&lt;/span&gt; tutorial &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--cluster-config&lt;/span&gt; tutorial &lt;span class="nt"&gt;--create-log-groups&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;👉 Et voilà : the stack is operational 🎉 🦄 💪&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary" class="anchor"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;💪 We have deployed an ECS-CLI Cluster and launched a docker compose stack&lt;/p&gt;

&lt;p&gt;🚀 The next step will be to expose and secure the stack using an AWS Application Load Balancer&lt;/p&gt;

&lt;p&gt;The scripts associated with this article is available at&lt;/p&gt;

&lt;p&gt;👉 &lt;a href="https://github.com/raphaelmansuy/using-ecs-cli-tutorial-01.git"&gt;https://github.com/raphaelmansuy/using-ecs-cli-tutorial-01.git&lt;/a&gt;&lt;/p&gt;

</description>
      <category>devops</category>
      <category>docker</category>
      <category>aws</category>
      <category>cloudskills</category>
    </item>
    <item>
      <title>Women Empowerment, Mentorship &amp; Growth</title>
      <author>Masa Abushamleh</author>
      <pubDate>Tue, 09 Mar 2021 08:38:17 +0000</pubDate>
      <link>https://dev.to/nerdingitout/women-empowerment-mentorship-growth-1jh0</link>
      <guid>https://dev.to/nerdingitout/women-empowerment-mentorship-growth-1jh0</guid>
      <description>&lt;p&gt;Women empowerment has always been something that I’m passionate about. Being surrounded by a community that helped me grow to become the reliable and strong developer I am today is something that I am truly grateful for and I wish the same for every woman out there! To find the support system to help her grow and become someone extraordinary and remarkable in what she does.&lt;br&gt;
In the light of International Women’s Day, I decided to highlight some of the key factors in empowering women (and everyone) everywhere from my own perspective and experience.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mentorship" class="anchor"&gt;
  &lt;/a&gt;
  Mentorship
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A8xH3wou--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zfr6gi5wsqqbdltouwwg.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A8xH3wou--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zfr6gi5wsqqbdltouwwg.jpg" alt="bonneval-sebastien-lG-6_ox_UXE-unsplash"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One of the most important parts of my life is getting my first mentor when I was a sophomore, it helped shape the path I took in my career afterward and I’m really grateful for my first mentorship experience and for our conversations on leadership and how to improve my social skills. It really opened my eyes to focus on my goals in life and how to achieve them.&lt;br&gt;
As a result, I did not only focus on my technical skills but I also worked on my soft skills, so I took speech classes to boost my confidence and writing classes to improve my communication skills in addition to participating in extracurricular activities. All of these, and more, helped me shape who I am as a person today. After all, leadership and soft skills are essential in a developer’s career, and as a woman, they helped me pave the path of my career journey.&lt;br&gt;
So I would like to highlight the importance of mentorship, whether you were a student, newly grad, or a professional, mentorship is essential to your career! Grow your connections, find the right mentor for you, and get started with your mentorship journey! You will be surprised with how much you can gain through mentorship.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tackling-imposter-syndrome" class="anchor"&gt;
  &lt;/a&gt;
  Tackling Imposter Syndrome
&lt;/h2&gt;

&lt;p&gt;Imposter Syndrome has always been a challenge that both women and men deal with. Feeling like a fraud and dealing with those negative thoughts on a daily basis while doing any task can be really challenging. Imposter syndrome will always be an issue that we will deal with as it’s something that’s coming from within and we have to fight these doubts! And that’s why it is important to spread awareness of Imposter Syndrome and always remind ourselves that “I’m strong, I’m enough”.&lt;br&gt;
Imposter syndrome can be born from several factors related to personality traits like anxiety or perfectionism or could be related to behavioral courses affected by the surrounding environment.&lt;br&gt;
There are several ways you could tackle imposter syndrome, and I’m not an expert, but there were some practices that helped me stand strong against it, like talking to a mentor or someone I know about it, organizing my thoughts, and reminding myself that I’m doing fine and that no one’s perfect, having a reasonable list of tasks to achieve on daily/weekly basis, and finally taking a moment to reflect on myself, my achievements and giving myself pep talks so often to encourage myself.&lt;br&gt;
Now.. take a moment to reflect on your own achievements and how far you have gone from a personal or professional point of view.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#growth" class="anchor"&gt;
  &lt;/a&gt;
  Growth
&lt;/h2&gt;

&lt;p&gt;Now that I have mentioned imposter syndrome, it is essential to bring up growth. Each person grows at their own pace and this year I learned how to grow.. patiently. Patience is essential to growth and it is okay if we take our time growing. One time I was listening to an episode of the TED Radio Hour podcast titled “It Takes Time” and I loved it! and I have been thinking of it almost every day! It reminded me that some things do not need to be rushed to reach their full potential.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8cHvKIH0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6i484cisu3z6d0jgnw6z.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8cHvKIH0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6i484cisu3z6d0jgnw6z.jpg" alt="hello-i-m-nik-AsRAyHIkOHk-unsplashff"&gt;&lt;/a&gt; &lt;br&gt;
One of my favorite parts was when they talked about sloths! (my favorite animal) and it changed my perspective a whole lot! We always perceived sloths as lazy, but in fact, they are not.. They are just taking their time doing things their own way and I think that’s amazing!&lt;br&gt;
Sloths might be slow, but they are built differently (in fact, they are strong), which allows them to stay hanging on trees the entire day or pull heavy items (an adult sloth can be 3x stronger than a human).&lt;br&gt;
Sloths are built differently, so we cannot really say that they are slow because they don’t meet our usual pace (or expectations) as humans. I could write many facts about sloths but then it would be a long list of facts. So I hope that my thoughts on growth gave you a new perspective on the topic (and sloths).&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3YzvGwvm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/we3a6ifbe6zxzse573la.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3YzvGwvm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/we3a6ifbe6zxzse573la.jpg" alt="william-phipps-l4QSO66AwmE-unsplash (1)"&gt;&lt;/a&gt;&lt;br&gt;
Essentially, community, mentorship, and allyship are all part of growing as a person. And so I would like to encourage you to take on the opportunity to be part of a community whether as a mentee or a mentor.&lt;br&gt;
Allow yourself to challenge and be challenged, but always remember to pace yourself and grow patiently. And with that being said, I would like to give some room for the question “How can I grow? How will I grow patiently”&lt;br&gt;
Happy International Women’s Day!&lt;/p&gt;

</description>
      <category>shecoded</category>
      <category>womenintech</category>
    </item>
    <item>
      <title>CORS (Cross-Origin Resource Sharing): A Complete Guide</title>
      <author>Teo Selenius</author>
      <pubDate>Tue, 09 Mar 2021 08:28:24 +0000</pubDate>
      <link>https://dev.to/appsecmonkey/cors-cross-origin-resource-sharing-a-complete-guide-4b20</link>
      <guid>https://dev.to/appsecmonkey/cors-cross-origin-resource-sharing-a-complete-guide-4b20</guid>
      <description>&lt;p&gt;Never be frustrated with CORS again. Learn what cross-origin resource sharing is, why it exists, and how to embrace it.&lt;/p&gt;

&lt;p&gt;You can read the original post here: &lt;a href="https://www.appsecmonkey.com/blog/cors/"&gt;CORS on AppSec Monkey&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-cors" class="anchor"&gt;
  &lt;/a&gt;
  What is CORS?
&lt;/h2&gt;

&lt;p&gt;CORS, or &lt;em&gt;Cross-Origin Resource Sharing&lt;/em&gt; is an opt-in browser feature that websites can use to relax the same-origin policy in a controlled way.&lt;/p&gt;

&lt;p&gt;Browsers facilitate CORS via the &lt;code&gt;Access-Control-Allow-*&lt;/code&gt; headers, which we'll get to soon.&lt;/p&gt;

&lt;p&gt;I don't want you to be frustrated with CORS, so let's cover just a little bit of theory first. Specifically, let's take a look at the same-origin policy.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-the-same-origin-policy" class="anchor"&gt;
  &lt;/a&gt;
  What is the Same Origin Policy?
&lt;/h2&gt;

&lt;p&gt;I've written about this at length in &lt;a href="https://www.appsecmonkey.com/blog/same-origin-policy/"&gt;here&lt;/a&gt;, but to give you the TL;DR, the same-origin policy is a set of design principles that govern how web browser features are implemented.&lt;/p&gt;

&lt;p&gt;Its purpose is to isolate browser windows (and tabs) from each other.&lt;/p&gt;

&lt;p&gt;For example, when you go to example.com, the website will not be able to read your emails from gmail.com (which you may have open in another tab). This is due to the workings of the same-origin policy.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-an-origin" class="anchor"&gt;
  &lt;/a&gt;
  What is an Origin?
&lt;/h2&gt;

&lt;p&gt;The definition of an origin is simple. Two websites are of the same origin if their scheme (http://, https://, etc.), host (e.g., &lt;a href="http://www.appsecmonkey.com"&gt;www.appsecmonkey.com&lt;/a&gt;), and port (e.g., 443) are the same. You can find the definition in &lt;a href="https://tools.ietf.org/html/rfc6454"&gt;RFC6545 - The Web Origin Concept&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DDTsB7MM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/23r5bd88gdra0bk6kmv4.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DDTsB7MM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/23r5bd88gdra0bk6kmv4.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#implicit-ports" class="anchor"&gt;
  &lt;/a&gt;
  Implicit ports
&lt;/h3&gt;

&lt;p&gt;If the port is not explicitly specified, it's implicitly 80 for &lt;code&gt;http&lt;/code&gt; and 443 for &lt;code&gt;https&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#examples" class="anchor"&gt;
  &lt;/a&gt;
  Examples
&lt;/h3&gt;

&lt;p&gt;Browsers consider these URLs to be of the &lt;em&gt;same&lt;/em&gt; origin: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;https://www.appsecmonkey.com/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;https://www.appsecmonkey.com/blog/same-origin-policy/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;https://www.appsecmonkey.com:443/blog/same-origin-policy/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And these are all of &lt;em&gt;different&lt;/em&gt; origins: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;http://www.appsecmonkey.com/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;https://appsecmonkey.org/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;https://www.appsecmonkey.com:8080/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-is-allowed-by-the-sameorigin-policy-and-what-is-not" class="anchor"&gt;
  &lt;/a&gt;
  What is allowed by the same-origin policy, and what is not?
&lt;/h2&gt;

&lt;p&gt;In general, writing and embedding are allowed, and reading is denied. How exactly this applies depends on the browser feature, but here are a few examples that concern CORS in particular. We can divide the examples into two categories: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Sending the HTTP request is allowed, but accessing the response is not. This is the case for &lt;em&gt;simple&lt;/em&gt; requests with whitelisted HTTP verb, headers, and content-type.&lt;/li&gt;
&lt;li&gt;Even &lt;em&gt;sending&lt;/em&gt; the request is not allowed. This is the case with &lt;em&gt;preflighted&lt;/em&gt; requests with non-whitelisted HTTP verb, headers, or content-type.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#allowed-sending-credentialed-crossorigin-get-head-and-post-requests-with-xhr" class="anchor"&gt;
  &lt;/a&gt;
  ✅ Allowed: Sending credentialed cross-origin GET, HEAD, and POST requests with XHR
&lt;/h3&gt;

&lt;p&gt;The following will work. You will get an error, but the request will be &lt;em&gt;sent&lt;/em&gt;. You can verify with your browser's developer tools, or better yet, set up a proxy tool such as &lt;a href="https://www.zaproxy.org/"&gt;OWASP ZAP&lt;/a&gt; between your browser and the webserver to see what's going on.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;xhr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;XMLHttpRequest&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;xhr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;withCredentials&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;xhr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;GET&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http://b.local/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;xhr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Developer tools reveal that the browser indeed sent the following HTTP request to the server.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="s"&gt;GET / HTTP/1.1&lt;/span&gt;
&lt;span class="na"&gt;Host&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;b.local&lt;/span&gt;
&lt;span class="na"&gt;User-Agent&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Mozilla/5.0 (Macintosh; Intel Mac OS X 10.16; rv:86.0) Gecko/20100101 Firefox/86.0&lt;/span&gt;
&lt;span class="na"&gt;Accept&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="s"&gt;/*&lt;/span&gt;
&lt;span class="na"&gt;Accept-Language&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;en-US,en;q=0.5&lt;/span&gt;
&lt;span class="na"&gt;Accept-Encoding&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;gzip, deflate&lt;/span&gt;
&lt;span class="na"&gt;Origin&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;http://a.local&lt;/span&gt;
&lt;span class="na"&gt;Connection&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;keep-alive&lt;/span&gt;
&lt;span class="na"&gt;Referer&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;http://a.local/&lt;/span&gt;
&lt;span class="na"&gt;Cookie&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;SESSIONID=s3cr3t&lt;/span&gt;
&lt;span class="na"&gt;Pragma&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;no-cache&lt;/span&gt;
&lt;span class="na"&gt;Cache-Control&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;no-cache&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#not-allowed-inspect-the-xhr-response" class="anchor"&gt;
  &lt;/a&gt;
  ❌ Not allowed: Inspect the XHR response
&lt;/h3&gt;

&lt;p&gt;However, you will not be able to read the response that you get. This is the same-origin policy in action. Writing (sending the XHR request) is allowed, but reading the response is not.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="err"&gt;❌&lt;/span&gt; &lt;span class="nx"&gt;Cross&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Origin&lt;/span&gt; &lt;span class="nx"&gt;Request&lt;/span&gt; &lt;span class="nx"&gt;Blocked&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;The&lt;/span&gt; &lt;span class="nx"&gt;Same&lt;/span&gt; &lt;span class="nx"&gt;Origin&lt;/span&gt; &lt;span class="nx"&gt;Policy&lt;/span&gt; &lt;span class="nx"&gt;disallows&lt;/span&gt; &lt;span class="nx"&gt;reading&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;remote&lt;/span&gt; &lt;span class="nx"&gt;resource&lt;/span&gt; &lt;span class="nx"&gt;at&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//b.local/. (Reason: CORS header ‘Access-Control-Allow-Origin’ missing).&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#allowed-sending-credentialed-crossorigin-get-head-and-post-requests-with-fetch" class="anchor"&gt;
  &lt;/a&gt;
  ✅ Allowed: Sending credentialed cross-origin GET, HEAD, and POST requests with fetch
&lt;/h3&gt;

&lt;p&gt;Using fetch will work just the same. We can use JavaScript to submit an URL-encoded form to the webserver.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http://b.local/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;credentials&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;include&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;foo=bar&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;application/x-www-form-urlencoded;charset=UTF-8&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;},});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the following HTTP request is sent:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="s"&gt;POST / HTTP/1.0&lt;/span&gt;
&lt;span class="na"&gt;Host&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;b.local&lt;/span&gt;
&lt;span class="na"&gt;User-Agent&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Mozilla/5.0 (Macintosh; Intel Mac OS X 10.16; rv:86.0) Gecko/20100101 Firefox/86.0&lt;/span&gt;
&lt;span class="na"&gt;Accept&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="s"&gt;/*&lt;/span&gt;
&lt;span class="na"&gt;Accept-Language&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;en-US,en;q=0.5&lt;/span&gt;
&lt;span class="na"&gt;Accept-Encoding&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;gzip, deflate&lt;/span&gt;
&lt;span class="na"&gt;Referer&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;http://a.local/&lt;/span&gt;
&lt;span class="na"&gt;Content-Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;application/x-www-form-urlencoded;charset=UTF-8&lt;/span&gt;
&lt;span class="na"&gt;Origin&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;http://a.local&lt;/span&gt;
&lt;span class="na"&gt;Content-Length&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;7&lt;/span&gt;
&lt;span class="na"&gt;Connection&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;keep-alive&lt;/span&gt;
&lt;span class="na"&gt;Cookie&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;SESSIONID=s3cr3t&lt;/span&gt;
&lt;span class="na"&gt;Pragma&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;no-cache&lt;/span&gt;
&lt;span class="na"&gt;Cache-Control&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;no-cache&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#not-allowed-inspect-the-fetch-response" class="anchor"&gt;
  &lt;/a&gt;
  ❌ Not allowed: Inspect the fetch response
&lt;/h3&gt;

&lt;p&gt;It's the same with fetch. Sending the credentialed, cross-origin POST request was permitted, but accessing the response was denied.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="err"&gt;❌&lt;/span&gt; &lt;span class="nx"&gt;Cross&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Origin&lt;/span&gt; &lt;span class="nx"&gt;Request&lt;/span&gt; &lt;span class="nx"&gt;Blocked&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;The&lt;/span&gt; &lt;span class="nx"&gt;Same&lt;/span&gt; &lt;span class="nx"&gt;Origin&lt;/span&gt; &lt;span class="nx"&gt;Policy&lt;/span&gt; &lt;span class="nx"&gt;disallows&lt;/span&gt; &lt;span class="nx"&gt;reading&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;remote&lt;/span&gt; &lt;span class="nx"&gt;resource&lt;/span&gt; &lt;span class="nx"&gt;at&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//b.local/. (Reason: CORS header ‘Access-Control-Allow-Origin’ missing).&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We'll get to what the &lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt; thing is in a minute, but let's look at a couple more scenarios first.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#not-allowed-sending-put-patch-delete-etc-requests" class="anchor"&gt;
  &lt;/a&gt;
  ❌ Not allowed: Sending PUT, PATCH, DELETE, etc. requests
&lt;/h3&gt;

&lt;p&gt;Only specific HTTP verbs are allowed by default (GET, POST, HEAD, and OPTIONS).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http://b.local/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;PUT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;credentials&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;include&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="err"&gt;❌&lt;/span&gt; &lt;span class="nx"&gt;Access&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt; &lt;span class="nx"&gt;at&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http://b.local/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="nx"&gt;origin&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http://a.local&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="nx"&gt;has&lt;/span&gt; &lt;span class="nx"&gt;been&lt;/span&gt; &lt;span class="nx"&gt;blocked&lt;/span&gt; &lt;span class="nx"&gt;by&lt;/span&gt; &lt;span class="nx"&gt;CORS&lt;/span&gt; &lt;span class="nx"&gt;policy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Response&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;preflight&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt; &lt;span class="nx"&gt;doesn&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;t pass access control check: No &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="nx"&gt;Access&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Control&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Allow&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Origin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; header is present on the requested resource. If an opaque response serves your needs, set the request&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="nx"&gt;mode&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;no-cors&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;resource&lt;/span&gt; &lt;span class="kd"&gt;with&lt;/span&gt; &lt;span class="nx"&gt;CORS&lt;/span&gt; &lt;span class="nx"&gt;disabled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that this time the browser didn't send the request at all. Also, note that the error is now different. It's talking about a &lt;em&gt;preflight&lt;/em&gt; request. We'll get to that soon.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#not-allowed-sending-arbitrary-headers" class="anchor"&gt;
  &lt;/a&gt;
  ❌ Not allowed: Sending arbitrary headers
&lt;/h3&gt;

&lt;p&gt;Trying to send a request with arbitrary headers is not allowed by the same-origin policy.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http://b.local/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;credentials&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;include&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Foo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Bar&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="err"&gt;❌&lt;/span&gt; &lt;span class="nx"&gt;Access&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt; &lt;span class="nx"&gt;at&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http://b.local/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="nx"&gt;origin&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http://a.local&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="nx"&gt;has&lt;/span&gt; &lt;span class="nx"&gt;been&lt;/span&gt; &lt;span class="nx"&gt;blocked&lt;/span&gt; &lt;span class="nx"&gt;by&lt;/span&gt; &lt;span class="nx"&gt;CORS&lt;/span&gt; &lt;span class="nx"&gt;policy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Response&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;preflight&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt; &lt;span class="nx"&gt;doesn&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;t pass access control check: No &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="nx"&gt;Access&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Control&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Allow&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Origin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; header is present on the requested resource. If an opaque response serves your needs, set the request&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="nx"&gt;mode&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;no-cors&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;resource&lt;/span&gt; &lt;span class="kd"&gt;with&lt;/span&gt; &lt;span class="nx"&gt;CORS&lt;/span&gt; &lt;span class="nx"&gt;disabled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Only the &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/CORS-safelisted_request_header"&gt;CORS-safelisted headers&lt;/a&gt; are allowed by default. And they are: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Accept&lt;/li&gt;
&lt;li&gt;Accept-Language&lt;/li&gt;
&lt;li&gt;Content-Language&lt;/li&gt;
&lt;li&gt;Content-Type&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#not-allowed-sending-json-requests" class="anchor"&gt;
  &lt;/a&gt;
  ❌ Not allowed: Sending JSON requests
&lt;/h3&gt;

&lt;p&gt;While the &lt;code&gt;Content-Type&lt;/code&gt; header is safelisted, it is so with restrictions. Specifically, only the following values are acceptable: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;application/x-www-form-urlencoded&lt;/li&gt;
&lt;li&gt;multipart/form-data&lt;/li&gt;
&lt;li&gt;text/plain
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http://b.local/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;credentials&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;include&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="err"&gt;❌&lt;/span&gt; &lt;span class="nx"&gt;Access&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt; &lt;span class="nx"&gt;at&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http://b.local/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="nx"&gt;origin&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http://a.local&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="nx"&gt;has&lt;/span&gt; &lt;span class="nx"&gt;been&lt;/span&gt; &lt;span class="nx"&gt;blocked&lt;/span&gt; &lt;span class="nx"&gt;by&lt;/span&gt; &lt;span class="nx"&gt;CORS&lt;/span&gt; &lt;span class="nx"&gt;policy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Response&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;preflight&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt; &lt;span class="nx"&gt;doesn&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;t pass access control check: No &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="nx"&gt;Access&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Control&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Allow&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Origin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; header is present on the requested resource. If an opaque response serves your needs, set the request&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="nx"&gt;mode&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;no-cors&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;resource&lt;/span&gt; &lt;span class="kd"&gt;with&lt;/span&gt; &lt;span class="nx"&gt;CORS&lt;/span&gt; &lt;span class="nx"&gt;disabled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Again with the preflight.&lt;/p&gt;

&lt;p&gt;Alright, now that you understand the restrictions that same-origin policy places upon you, I'll tell you what CORS is and how it helps you get around those limitations in a controlled way.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#crossorigin-resource-sharing-cors" class="anchor"&gt;
  &lt;/a&gt;
  Cross-Origin Resource Sharing (CORS)
&lt;/h2&gt;

&lt;p&gt;CORS can lift the above restrictions. It's not a browser security mechanism like the same-origin policy. CORS is a browser &lt;em&gt;insecurity&lt;/em&gt;-mechanism, so read carefully and use it with consideration.&lt;/p&gt;

&lt;p&gt;Browsers implement CORS as a set of four HTTP response headers, which we'll get to right now.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#accesscontrolalloworigin" class="anchor"&gt;
  &lt;/a&gt;
  Access-Control-Allow-Origin
&lt;/h3&gt;

&lt;p&gt;The first header is &lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt;. Developers can use it to grant cross-origin requests the read-permission to a website's resources (which is denied by the same-origin policy by default).&lt;/p&gt;

&lt;p&gt;Possible values are: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a specific origin such as &lt;code&gt;https://www.appsecmonkey.com&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;a wildcard, allowing any domain&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;Access-Control-Allow-Origin&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;https://wwww.appsecmonkey.com&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;Access-Control-Allow-Origin&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="err"&gt;*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's either-or. Something like this would &lt;strong&gt;not&lt;/strong&gt; work:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;Access-Control-Allow-Origin&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="s"&gt;.appsecmonkey.com&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also, specifying multiple origins is &lt;strong&gt;not&lt;/strong&gt; allowed, so the following would &lt;strong&gt;not&lt;/strong&gt; work either.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;Access-Control-Allow-Origin&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;https://foo.appsecmonkey.com, https://bar.appsecmonkey.com/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#cors-wildcard-restrictions" class="anchor"&gt;
  &lt;/a&gt;
  CORS wildcard restrictions
&lt;/h4&gt;

&lt;p&gt;The wildcard will not work in combination with &lt;code&gt;Access-Control-Allow-Credentials: true&lt;/code&gt;, which you'll learn about shortly. Just remember this limitation.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#how-to-specify-multiple-cors-origins" class="anchor"&gt;
  &lt;/a&gt;
  How to specify multiple CORS origins?
&lt;/h4&gt;

&lt;p&gt;The spec doesn't support multiple origins. However, in practice, it has been solved by generating the &lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt; header dynamically in your code. This workaround is facilitated by the &lt;code&gt;Origin&lt;/code&gt; request header, which browsers send in all POST and CORS requests.&lt;/p&gt;

&lt;p&gt;Note that there is a security hazard here. It's best to use a well-established CORS library for your development framework of choice instead of implementing a homemade solution.&lt;/p&gt;

&lt;p&gt;At any rate, you should have a &lt;em&gt;strict whitelist&lt;/em&gt; of possible origins. &lt;strong&gt;Do not&lt;/strong&gt; implement logic that, e.g., checks if the request origin &lt;em&gt;contains&lt;/em&gt; a specific string or &lt;em&gt;starts with&lt;/em&gt; one.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#accesscontrolallowcredentials" class="anchor"&gt;
  &lt;/a&gt;
  Access-Control-Allow-Credentials
&lt;/h3&gt;

&lt;p&gt;By default, CORS doesn't allow credentialed requests (that include the browser user's cookies). After all, credentialed CORS requests effectively give the websites to whom the privilege is granted full read and write control of the browser user's data in the application.&lt;/p&gt;

&lt;p&gt;If you still want to enable it, you can use the &lt;code&gt;Access-Control-Allow-Credentials&lt;/code&gt; header like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;Access-Control-Allow-Credentials&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Just note the limitation mentioned above: this does not work in conjunction with &lt;code&gt;Access-Control-Allow-Origin: *&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#important-caveat-about-samesite-cookies" class="anchor"&gt;
  &lt;/a&gt;
  Important caveat about SameSite cookies
&lt;/h4&gt;

&lt;p&gt;Browsers are starting to adopt SameSite cookies in Lax mode as the default. I've written about SameSite cookies at length &lt;a href="https://www.appsecmonkey.com/blog/samesite-cookies/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What this means is that cookies are by default protected from cross-site interactions. If you are banging your head against the wall trying to figure out why the browser doesn't send your cookie even when you have all the proper headers in place, it might be SameSite cookies in action.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#accesscontrolallowheaders" class="anchor"&gt;
  &lt;/a&gt;
  Access-Control-Allow-Headers
&lt;/h3&gt;

&lt;p&gt;If you want to send custom headers or lift the restriction on the &lt;code&gt;Content-Type&lt;/code&gt; header to, e.g., send JSON requests, you can use the &lt;code&gt;Access-Control-Allow-Headers&lt;/code&gt; to do so.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;Access-Control-Allow-Headers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;content-type&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#accesscontrolallowmethods" class="anchor"&gt;
  &lt;/a&gt;
  Access-Control-Allow-Methods
&lt;/h3&gt;

&lt;p&gt;Finally, suppose you want to enable other HTTP verbs than GET, POST, HEAD, and OPTIONS. In that case, you have to use the &lt;code&gt;Access-Control-Allow-Methods&lt;/code&gt; header.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;Access-Control-Allow-Methods&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;GET, POST, HEAD, PUT, PATCH, DELETE&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In fact, even if you only want to allow, e.g., POST requests, you are still required to return &lt;code&gt;Access-Control-Allow-Methods&lt;/code&gt; if there are any other factors that cause your request to be &lt;em&gt;preflighted&lt;/em&gt;, which we'll talk about next.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#preflight" class="anchor"&gt;
  &lt;/a&gt;
  Preflight
&lt;/h3&gt;

&lt;p&gt;Simple requests with the whitelisted HTTP verbs, headers, and content-type are always &lt;em&gt;sent&lt;/em&gt;. Still, the website is forbidden access to the response data if the response doesn't contain the appropriate &lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt; header.&lt;/p&gt;

&lt;p&gt;But how does the browser know whether it is allowed to &lt;em&gt;send&lt;/em&gt; a PUT request or not? If the answer to the question "can I send a PUT request" is in response to the PUT request, doesn't this create a chicken and egg problem? That's a great question, and the answer is simple: we send two requests.&lt;/p&gt;

&lt;p&gt;The browser first sends an &lt;code&gt;OPTIONS&lt;/code&gt; request with the &lt;code&gt;Origin&lt;/code&gt; header, and then looks at the response headers for that request. If &lt;code&gt;PUT&lt;/code&gt; is allowed (in &lt;code&gt;Access-Control-Allow-Methods&lt;/code&gt;), only then the preflight succeeds, and the browser sends the desired PUT request.&lt;/p&gt;

&lt;p&gt;Of course there are other reasons why the preflight might fail. For example, you might be trying to send a request with credentials included, but the webserver doesn't return &lt;code&gt;Access-Control-Allow-Credentials: true&lt;/code&gt; in the preflight HTTP response.&lt;/p&gt;

&lt;p&gt;This first OPTIONS request is aptly named the &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/Preflight_request"&gt;preflight request&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cors-in-action" class="anchor"&gt;
  &lt;/a&gt;
  CORS in action
&lt;/h3&gt;

&lt;p&gt;Let's revisit one of the tests we made earlier, but this time, &lt;a href="http://b.local/"&gt;http://b.local/&lt;/a&gt; returns the following HTTP response headers:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;Access-Control-Allow-Credentials&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
&lt;span class="na"&gt;Access-Control-Allow-Headers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;content-type&lt;/span&gt;
&lt;span class="na"&gt;Access-Control-Allow-Methods&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;GET, HEAD, POST, PUT&lt;/span&gt;
&lt;span class="na"&gt;Access-Control-Allow-Origin&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;http://a.local&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#allowed-sending-credentialed-crossorigin-get-head-post-and-put-requests-with-fetch-and-reading-the-response" class="anchor"&gt;
  &lt;/a&gt;
  ✅ Allowed: Sending credentialed cross-origin GET, HEAD, POST, and PUT requests with fetch and reading the response
&lt;/h3&gt;

&lt;p&gt;Now we have complete control of the cross-origin page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http://b.local&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;PUT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;credentials&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;include&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;}}).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// This is the HTML from our response as a text string&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;!&lt;/span&gt;&lt;span class="nx"&gt;doctype&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt; &lt;span class="nx"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;en&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt; &lt;span class="nx"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;utf&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;local&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/title&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;☠ Security Impact&lt;/strong&gt;: If you specify CORS headers like this, you are giving the allowed origins complete control over your website, including any authenticated user data and functionality. The same-origin policy is there to protect you, so think carefully before opting out of it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-cors" class="anchor"&gt;
  &lt;/a&gt;
  Using CORS
&lt;/h2&gt;

&lt;p&gt;If your requirements are simple, you can just add the static headers to your application/web server configuration.&lt;/p&gt;

&lt;p&gt;However, if you have to deal with multiple origins, it's best to use a CORS library for your development framework. For example, this is how you configure CORS in flask:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;CORS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;origins&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'http://a.local'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'http://c.local'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="n"&gt;allow_headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'content-type'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="n"&gt;supports_credentials&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'PUT'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'PATCH'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'DELETE'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#exposing-headers" class="anchor"&gt;
  &lt;/a&gt;
  Exposing headers
&lt;/h2&gt;

&lt;p&gt;By default, only the &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/CORS-safelisted_response_header"&gt;CORS-safelisted response headers&lt;/a&gt; are exposed to to JavaScript code in CORS requests. So if your webserver returns the header &lt;code&gt;Foo: Bar&lt;/code&gt;, even CORS requests won't be able to access it.&lt;/p&gt;

&lt;p&gt;If you &lt;em&gt;want&lt;/em&gt; browsers to access this header, you can do so via the &lt;code&gt;Access-Control-Expose-Headers&lt;/code&gt; like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;Access-Control-Expose-Headers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Foo&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Browsers consider two websites to be of the same origin if they have the same scheme, host, and port.&lt;/p&gt;

&lt;p&gt;The same-origin policy places several restrictions over cross-origin interactions. Most notably for CORS: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Sending "simple" requests with a whitelisted HTTP verb, headers, and content-type is allowed, but accessing the response is not.&lt;/li&gt;
&lt;li&gt;Sending "preflighted" requests with non-whitelisted HTTP verb, headers and content-type are not allowed at all.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;CORS, or Cross-Origin Resource Sharing, is a browser &lt;em&gt;insecurity&lt;/em&gt;-mechanism for your web application to opt-out of some of these restrictions in a controlled way.&lt;/p&gt;

&lt;p&gt;However, CORS should be used with consideration and implemented using a well-established CORS library for your development framework of choice.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#get-the-web-security-checklist-spreadsheet" class="anchor"&gt;
  &lt;/a&gt;
  Get the web security checklist spreadsheet!
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://eepurl.com/hqAGt5"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--elZVxGdx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3iqd1ef4a5a0icyvvk65.jpg" alt="Subscribe"&gt;&lt;/a&gt;&lt;br&gt;
 ☝️ &lt;a href="https://eepurl.com/hqAGt5"&gt;Subscribe&lt;/a&gt; to AppSec Monkey's email list, get our best content delivered straight to your inbox, and &lt;b&gt;get our 2021 Web Application Security Checklist Spreadsheet for FREE&lt;/b&gt; as a welcome gift!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dont-stop-here" class="anchor"&gt;
  &lt;/a&gt;
  Don't stop here
&lt;/h2&gt;

&lt;p&gt;If you like this article, check out the other application security guides we have on &lt;a href="https://www.appsecmonkey.com/"&gt;AppSec Monkey&lt;/a&gt; as well.&lt;/p&gt;

&lt;p&gt;Thanks for reading.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>security</category>
      <category>programming</category>
      <category>cybersecurity</category>
    </item>
    <item>
      <title>Binary Search Tree Series Part 2</title>
      <author>Edwin</author>
      <pubDate>Tue, 09 Mar 2021 06:39:59 +0000</pubDate>
      <link>https://dev.to/edwardcashmere/binary-search-tree-series-part-2-503k</link>
      <guid>https://dev.to/edwardcashmere/binary-search-tree-series-part-2-503k</guid>
      <description>&lt;h2&gt;
  &lt;a href="#find-or-search-implementation" class="anchor"&gt;
  &lt;/a&gt;
  Find or Search Implementation.
&lt;/h2&gt;

&lt;p&gt;When looking for a node with a particular value on the tree, the arrangement of the nodes where the lesser value than the parent node. This means there is a particular optimization done when storing data in a binary tree. After every iteration when looking for the node the number of possible nodes is halved. This lets us get to the solution much more quickly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example" class="anchor"&gt;
  &lt;/a&gt;
  Example.
&lt;/h2&gt;

&lt;p&gt;Given we have 1000,000 elements in our data stored in an array and the array is sorted. Assume the node we are searching for is near the end of the let's say 1000,000nth node, Instead of making 1 million comparisons looking the for the node since we know our array is sorted we would compare our value with the middle value in the array, if the value is greater than the middle value then we would know the value most probably exists in the top half of the array(from element 500,000- 1000,000) I say probably because the value might not exist at all in our data and we have to account for the possibility. By gaining this key insight we can ignore the bottom half of our array and make the next comparisons between our target value and the middle value in the top half of the array which would be the 750,000th element. We do this iteratively until we find or value or reach the end in which we return &lt;code&gt;-1&lt;/code&gt; or &lt;code&gt;not found&lt;/code&gt;. This search methodology is faster because it always is eliminating half the search data where there is 100% certainty the value does not exist.from 1000,000, to 500,000 ... 250,000... 125,000, &lt;br&gt;
The time complexity becomes O(log n) instead of O(n^2). See the below&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QoJd268m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1200/1%2AFjwQ-4iKTlyyaMlU4HCBPA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QoJd268m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1200/1%2AFjwQ-4iKTlyyaMlU4HCBPA.png" alt="chart"&gt;&lt;/a&gt; as a reference.&lt;/p&gt;

&lt;p&gt;This is exactly how the search works in a tree.&lt;br&gt;
Pseudo Code/ Steps to follow:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;First create variables current, it to the root node and found set it to false.&lt;/li&gt;
&lt;li&gt;Start looping while the current node exists and the found variable is still false.&lt;/li&gt;
&lt;li&gt;If the value is less than the value stored in the current node then set current to the left property of the current variable &lt;/li&gt;
&lt;li&gt;If the value is greater than the current's value property then set the current to the current variable right property.&lt;/li&gt;
&lt;li&gt;Otherwise set found variable to true.&lt;/li&gt;
&lt;li&gt;outside the while check if the found is still false then return undefined if it is, otherwise returns the current variable
Code implementation in JavaScript:
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;BST&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// implementation and explanation in the first part of the //series.&lt;/span&gt;
    &lt;span class="nx"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;newNode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;newNode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                        &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;newNode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                        &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;newNode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;found&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;found&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                 &lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                &lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="nx"&gt;found&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;found&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;


    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;In Python:-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BST&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
         &lt;span class="n"&gt;newNode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
             &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;newNode&lt;/span&gt;
         &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
             &lt;span class="n"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;
             &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                 &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                     &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                         &lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;newNode&lt;/span&gt;
                         &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;
                     &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                         &lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; 
                 &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                     &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                         &lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;newNode&lt;/span&gt;
                         &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;
                     &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                         &lt;span class="n"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt;  &lt;span class="nf"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;          
                &lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;
                &lt;span class="n"&gt;found&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
                &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;current&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;found&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                        &lt;span class="n"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;
                    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                        &lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;
                    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                        &lt;span class="n"&gt;found&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;found&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"not found"&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;current&lt;/span&gt;



&lt;span class="n"&gt;bst&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BST&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;bst&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;bst&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;bst&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;150&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;bst&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;175&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;bst&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;160&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;bst&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;180&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;bst&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;75&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;bst&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;bst&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;65&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;bst&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;bst&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;55&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;bst&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bst&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next in this series, we will take a look at the search Methodologies. Starting with Breadth-First Search.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>python</category>
      <category>trees</category>
      <category>search</category>
    </item>
  </channel>
</rss>
