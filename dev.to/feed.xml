<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Picking the Right Tech Stack for Your Startup</title>
      <author>Saji Wang</author>
      <pubDate>Mon, 15 Nov 2021 16:10:40 +0000</pubDate>
      <link>https://dev.to/codesphere/picking-the-right-tech-stack-for-your-startup-hmn</link>
      <guid>https://dev.to/codesphere/picking-the-right-tech-stack-for-your-startup-hmn</guid>
      <description>&lt;p&gt;Written by Dan Parry&lt;/p&gt;




&lt;p&gt;Finding the right tools to build your new start-up is essential. The foundations on which your company will be built need to be reliable, flexible and scalable.&lt;/p&gt;

&lt;p&gt;It can be overwhelming to make the right choice, there seems to be new libraries and frameworks popping up every week, so the right stack now might not be the best stack tomorrow. But there are some key things to consider when getting started choosing your new startup’s tech stack.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1viO5bj_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zqumj9k75vk4u6yba95s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1viO5bj_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zqumj9k75vk4u6yba95s.png" alt="Image description" width="880" height="410"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Your team will likely be small and made up of a few fullstack developers wearing many hats; Agile teams get products built quickly and time is money in the startup game. So plan smart. Fast, cost effective solutions that can grow with your product are the key.&lt;/p&gt;

&lt;p&gt;Go with what you know. While new technologies can be powerful, having a team of experienced developers using tech they are familiar with can save you a lot of time and cost associated with introducing a new language on day one.&lt;/p&gt;

&lt;p&gt;On the other hand, spending some time researching new solutions can bring new powerful tools, always be on the lookout for new tech but don't use it for the sake of it.&lt;br&gt;
If you can, use the same language on the front and as the backend, this will make your developers lives much easier. At the beginning, try to avoid languages like Go, Rust and C++. While they are efficient, they can be slow to develop and expensive to develop with.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#scalability"&gt;
  &lt;/a&gt;
  Scalability
&lt;/h3&gt;

&lt;p&gt;Your user base will inevitably grow as your platform becomes more popular and your startup begins to take off, so you need to make sure the infrastructure and architecture you choose is able to scale with you.&lt;/p&gt;

&lt;p&gt;Absorbing planned growth is one thing, but the flexibility to keep up with sudden and unexpected scaling is the real test. If your startup becomes an overnight success and your user base triples, you need to be able to take the new traffic on board. Make sure you prioritise scalability in platform architecture and you'll thank yourself later.&lt;/p&gt;

&lt;p&gt;Consider languages like Python and Ruby when planning your architecture, as they are great scaling languages and they have great community support.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;cloud service provider&lt;/strong&gt; you choose to host your platform will also play a huge role in your ability to scale. Make sure that the service you choose is capable of handling reverse proxies, load balancing, multi-tenancy support, and other crucial scaling processes. It should also provide stable uptime - every time your service is down, you stand to lose users.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Cdh01p-z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/44vv4zo2xkwy6ppp2g7p.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Cdh01p-z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/44vv4zo2xkwy6ppp2g7p.jpeg" alt="Image description" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#cost"&gt;
  &lt;/a&gt;
  Cost
&lt;/h3&gt;

&lt;p&gt;Cost efficiency is on the mind of all new startup founders, but technology costs money and development costs are unavoidable. Your best friends here are open-source technologies. Being available to the public means you can use them for free.&lt;/p&gt;

&lt;p&gt;There is much higher availability of developers for hire that can write in a popular, open-source language, so this will reduce the need for specialist skills in your hiring process. More competition in the market can also mean lower wage prices - but hiring cheap isn't always the smart move so this is an area that requires some careful consideration.&lt;/p&gt;

&lt;p&gt;Plan for tomorrow's costs today - Any technology you choose to include in your stack needs to be easily maintainable in the future. A simple and fast solution today can cost you down the line if not properly vetted.&lt;/p&gt;

&lt;p&gt;Free tokens from cloud service providers for example are a great way to get you started, but consider how the invoice might look when the tokens run out. Are your tools sustainable in the long term or are you creating a headache for tomorrow?&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#time"&gt;
  &lt;/a&gt;
  Time
&lt;/h3&gt;

&lt;p&gt;Time is money and money is time. You want to get up and running as quickly as possible and to do that you need to pick tools for your stack that are easy to use, implement and maintain.&lt;/p&gt;

&lt;p&gt;Finding holistic services that can streamline large parts of your development process is a great way to go and can even save you the cost of an extra team member.&lt;/p&gt;

&lt;p&gt;Speed to market is vital to startup endeavours for a number of reasons. Budget limitations are the most obvious of these, when the runway runs out and the money dries up, it's game over, so getting a product generating revenue is make or break.&lt;/p&gt;

&lt;p&gt;Someone may also get there faster. While it's possible you're the only one in your space providing a solution, it's only a matter of time before someone else comes along and does it better, so getting their first is essential.&lt;/p&gt;

&lt;p&gt;Find tools that don't require weeks of configuration and months of continued maintenance.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#common-stacks"&gt;
  &lt;/a&gt;
  Common stacks
&lt;/h3&gt;

&lt;p&gt;With your time and budget needs in mind, you don't need to reinvent the wheel when choosing your tech stack. Here are some common stacks you can look into before starting your project:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MEAN - Mongo, Express, Angular &amp;amp; Node&lt;/strong&gt;&lt;br&gt;
Used to build dynamic websites and web based applications. MEAN is also open source, which means if you come across any issues while using it, there is a huge community to lean on.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MERN - Mongo, Express, React &amp;amp; Node&lt;/strong&gt;&lt;br&gt;
Another great open source stack, MERN uses React as the front-end framework, which is a lot more flexible and easy to use than Angular in our opinion. Great for full-stack web applications&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;RAD - React Native &amp;amp; Django&lt;/strong&gt;&lt;br&gt;
Commonly regarded as the best stack for Web, Mobile and Desktop development, RAD stack is used by many big name companies. It's scalable, easy to modify and open source.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Choosing the right tools for your tech stack will make or break the development process of your product and ultimately the success of your startup. Find a balance of new technologies and what you know to work. Speed and cost are key elements but don't always take the fastest and cheapest option.&lt;/p&gt;

&lt;p&gt;There is a wealth of options on the market nowadays so put some time into research. Find the tools that will help you build quickly and scale easily.&lt;/p&gt;

&lt;p&gt;PS: If you're looking for a Cloud provider that can save your team the hassle of setting up AWS, Azure, or Heroku, check out &lt;a href="https://link.codesphere.com/FY"&gt;Codesphere&lt;/a&gt;, the most intuitive cloud provider on the market.&lt;/p&gt;

&lt;p&gt;What tech stack do you use? Let us know down below!&lt;/p&gt;

</description>
      <category>startup</category>
      <category>programming</category>
      <category>webdev</category>
      <category>cloud</category>
    </item>
    <item>
      <title>Spring Boot application with Apache Kafka</title>
      <author>LehaUchicha</author>
      <pubDate>Mon, 15 Nov 2021 16:07:58 +0000</pubDate>
      <link>https://dev.to/lehauchicha/spring-boot-application-with-apache-kafka-299n</link>
      <guid>https://dev.to/lehauchicha/spring-boot-application-with-apache-kafka-299n</guid>
      <description>

&lt;p&gt;In this article we will:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;   Run Zookeeper and kafka locally&lt;/li&gt;
&lt;li&gt;   Write Spring boot application &lt;strong&gt;Kafka-Server&lt;/strong&gt;. It's order service, which will produce and consume messages using &lt;strong&gt;orders&lt;/strong&gt; topic. Also has entrypoint for order creation which will send message to the kafka topic&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All examples available on github: &lt;a href="https://github.com/LehaUchicha/Kafka-Example.git"&gt;https://github.com/LehaUchicha/Kafka-Example.git&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configure-zookeeper-and-kafka"&gt;
  &lt;/a&gt;
  Configure Zookeeper and kafka
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#download-zookeeper-and-kafka"&gt;
  &lt;/a&gt;
  Download Zookeeper and Kafka
&lt;/h3&gt;

&lt;p&gt;Before writing our application we need to run zookeeper and kafka locally.&lt;br&gt;
For that go to official site and download the latest version&lt;/p&gt;

&lt;p&gt;Zookeeper&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://zookeeper.apache.org/releases.html
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Kafka&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://kafka.apache.org/downloads
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;ps:&lt;/em&gt; &lt;em&gt;On the moment of article writing the latest version was 3.0.0, but &lt;br&gt;
this version not worked to me, so I download previous version - 2.8.1, which worked fine&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#run-zookeeper"&gt;
  &lt;/a&gt;
  Run Zookeeper
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Go to the downloaded and extracted zookeeper folder. You will see such folder structure:
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e1F-RizG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g8wmeuqighbm3b0nrezt.png" alt="Zookeeper folder structure" width="793" height="270"&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;bin - folder, which contains utilities for zookeeper management&lt;/li&gt;
&lt;li&gt;conf - folder, which contains configuration files for zookeeper. In this folder you can find zoo_sample.cfg - example of zookeeper configuration.&lt;/li&gt;
&lt;li&gt;logs - folder, where zookeeper can write logs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;First lets go to the conf folder, make a copy of &lt;strong&gt;zoo_sample.cfg&lt;/strong&gt; and rename it to &lt;strong&gt;zoo.cfg&lt;/strong&gt;.&lt;br&gt;
In the &lt;strong&gt;zoo.cfg&lt;/strong&gt; you need to override such value to &lt;strong&gt;dataDir=../logs&lt;/strong&gt; or to any other directory which you like.&lt;br&gt;
From the config file you can find othe important settings, like &lt;strong&gt;clientPort=2181&lt;/strong&gt;, which said for us that zookeper by default run on port 2181.&lt;br&gt;
You can override properties as you wish, but lets left them as is.&lt;/p&gt;

&lt;p&gt;That's it! Now we need to run zookeeper server. For that go to the bin folder and find &lt;strong&gt;zkServer.cmd&lt;/strong&gt; or&lt;br&gt;
&lt;strong&gt;zkServer.sh&lt;/strong&gt;. If you are the Windows user - use &lt;strong&gt;zkServer.cmd&lt;/strong&gt;, otherwise &lt;strong&gt;zkServer.sh&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;zkServer.sh start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;zkServer.cmd
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Result will be:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2WRC1pGM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wky4booz1uruheebhbrn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2WRC1pGM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wky4booz1uruheebhbrn.png" alt="Image description" width="880" height="182"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;or logs without errors, like here in case if you use &lt;strong&gt;zkServer.sh start&lt;/strong&gt;:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Vi_vgLtf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/17wx4z879nf1m4urgfrf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Vi_vgLtf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/17wx4z879nf1m4urgfrf.png" alt="Image description" width="570" height="76"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Great! Now we need to run kafka.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#run-kafka"&gt;
  &lt;/a&gt;
  Run Kafka
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Go to the downloaded and extracted apache kafka folder. You will see such folder structure:
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ujBrLpXj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tlppc3siibxdyl3c55ef.png" alt="kafka folder Structure" width="822" height="302"&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;bin - folder, which contains utilities for kafka management&lt;/li&gt;
&lt;li&gt;config - folder, which contains configuration files for kafka. In this folder you can find &lt;strong&gt;server.properties&lt;/strong&gt; which should be modified&lt;/li&gt;
&lt;li&gt;logs - folder, where kafka can write logs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Go to the config folder and override &lt;strong&gt;log.dirs=&lt;/strong&gt; property in the file &lt;strong&gt;server.properties&lt;/strong&gt; to the any folder where you want to store logs.&lt;br&gt;
I will use logs folder in the kafka root, so in my case it looks like this: &lt;strong&gt;log.dirs=../logs&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now time to run apache kafka. For that go to the bin folder.&lt;br&gt;
For NOT Windows user you need to find &lt;strong&gt;kafka-server-start&lt;/strong&gt; and execute script with the path to the &lt;strong&gt;server.properties&lt;/strong&gt; file as an argument&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;./kafka-server-start.sh ../config/server.properties
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For Windows users inside &lt;strong&gt;bin&lt;/strong&gt; folder you can find &lt;strong&gt;windows&lt;/strong&gt; folder which contains the same commands but for windows)&lt;br&gt;
Go to the &lt;strong&gt;windows&lt;/strong&gt; folder and run the same script. Don't forget to specify path to &lt;strong&gt;server.properties&lt;/strong&gt; file as argument&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kafka-server-start.bat ../../config/server.properties
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you don't see any exceptions in console, it means, that kafka is working!&lt;br&gt;
Now befor start to writing Spring Boot application we need to create &lt;strong&gt;orders&lt;/strong&gt; topic which our applications will use.&lt;br&gt;
For that we need to execute command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kafka-topics.bat &lt;span class="nt"&gt;--create&lt;/span&gt; &lt;span class="nt"&gt;--zookeeper&lt;/span&gt; localhost:2181 &lt;span class="nt"&gt;--replication-factor&lt;/span&gt; 1 &lt;span class="nt"&gt;--partitions&lt;/span&gt; 1 &lt;span class="nt"&gt;--topic&lt;/span&gt; orders
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kafka-topics.sh &lt;span class="nt"&gt;--create&lt;/span&gt; &lt;span class="nt"&gt;--zookeeper&lt;/span&gt; localhost:2181 &lt;span class="nt"&gt;--replication-factor&lt;/span&gt; 1 &lt;span class="nt"&gt;--partitions&lt;/span&gt; 1 &lt;span class="nt"&gt;--topic&lt;/span&gt; orders
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command will create topic &lt;strong&gt;orders&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#write-kafka-server-spring-boot-application"&gt;
  &lt;/a&gt;
  Write Kafka Server Spring Boot application
&lt;/h3&gt;

&lt;p&gt;You can download configured project from start.spring.io by &lt;a href="https://start.spring.io/#!type=maven-project&amp;amp;language=java&amp;amp;platformVersion=2.5.6&amp;amp;packaging=jar&amp;amp;jvmVersion=11&amp;amp;groupId=com.kafka&amp;amp;artifactId=kafka-server&amp;amp;name=kafka-server&amp;amp;description=Demo%20project%20for%20Spring%20Boot&amp;amp;packageName=com.kafka.kafka-server&amp;amp;dependencies=web,kafka,lombok"&gt;link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;or download ready project from github: &lt;a href="https://github.com/LehaUchicha/Kafka-Example.git"&gt;https://github.com/LehaUchicha/Kafka-Example.git&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here in dependency you need to specify Spring for Apache Kafka for using kafka in our application.&lt;/p&gt;

&lt;p&gt;pom.xml should contain:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-web&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.kafka&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-kafka&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.projectlombok&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;lombok&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;optional&amp;gt;&lt;/span&gt;true&lt;span class="nt"&gt;&amp;lt;/optional&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;go to the &lt;strong&gt;KafkaServerApplication.java&lt;/strong&gt; file and add &lt;strong&gt;@EnableKafka&lt;/strong&gt; annotation&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@EnableKafka
@SpringBootApplication
public class KafkaServerApplication {

    public static void main(String[] args) {
        SpringApplication.run(KafkaServerApplication.class, args);
    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;go to the &lt;strong&gt;application.properties&lt;/strong&gt; file and specify such properties&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight properties"&gt;&lt;code&gt;&lt;span class="py"&gt;server.port&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;9955&lt;/span&gt;

&lt;span class="py"&gt;kafka.server&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;localhost:9092&lt;/span&gt;
&lt;span class="py"&gt;kafka.group.id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;group1&lt;/span&gt;
&lt;span class="py"&gt;kafka.producer.id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;producer1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we need to create configuration for consumer and producer.&lt;/p&gt;

&lt;p&gt;Consumer configuration&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nd"&gt;@Configuration&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;KafkaConsumerConfiguration&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

      &lt;span class="nd"&gt;@Value&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"${kafka.server}"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
      &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;kafkaServer&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

      &lt;span class="nd"&gt;@Value&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"${kafka.group.id}"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
      &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;kafkaGroupId&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

      &lt;span class="nd"&gt;@Bean&lt;/span&gt;
      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;KafkaListenerContainerFactory&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;batchFactory&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="nc"&gt;ConcurrentKafkaListenerContainerFactory&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;OrderDto&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;factory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
                    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;ConcurrentKafkaListenerContainerFactory&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
            &lt;span class="n"&gt;factory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setConsumerFactory&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;consumerFactory&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
            &lt;span class="n"&gt;factory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setBatchListener&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;factory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setMessageConverter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;BatchMessagingMessageConverter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;converter&lt;/span&gt;&lt;span class="o"&gt;()));&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;factory&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;

      &lt;span class="nd"&gt;@Bean&lt;/span&gt;
      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;KafkaListenerContainerFactory&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;singleFactory&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="nc"&gt;ConcurrentKafkaListenerContainerFactory&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;OrderDto&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;factory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
                    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;ConcurrentKafkaListenerContainerFactory&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
            &lt;span class="n"&gt;factory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setConsumerFactory&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;consumerFactory&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
            &lt;span class="n"&gt;factory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setBatchListener&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;factory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setMessageConverter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;StringJsonMessageConverter&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;factory&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;

      &lt;span class="nd"&gt;@Bean&lt;/span&gt;
      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;ConsumerFactory&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;OrderDto&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;consumerFactory&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;DefaultKafkaConsumerFactory&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;consumerConfigs&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;

      &lt;span class="nd"&gt;@Bean&lt;/span&gt;
      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;KafkaListenerContainerFactory&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;kafkaListenerContainerFactory&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;ConcurrentKafkaListenerContainerFactory&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;

      &lt;span class="nd"&gt;@Bean&lt;/span&gt;
      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Object&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;consumerConfigs&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="nc"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Object&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;props&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;HashMap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
            &lt;span class="n"&gt;props&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;ConsumerConfig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;BOOTSTRAP_SERVERS_CONFIG&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kafkaServer&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;props&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;ConsumerConfig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;KEY_DESERIALIZER_CLASS_CONFIG&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;LongDeserializer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;props&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;ConsumerConfig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;VALUE_DESERIALIZER_CLASS_CONFIG&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;StringDeserializer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;props&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;ConsumerConfig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;GROUP_ID_CONFIG&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kafkaGroupId&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;props&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;ConsumerConfig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ENABLE_AUTO_COMMIT_CONFIG&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;props&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;

      &lt;span class="nd"&gt;@Bean&lt;/span&gt;
      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;StringJsonMessageConverter&lt;/span&gt; &lt;span class="nf"&gt;converter&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;StringJsonMessageConverter&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Producer configuration:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nd"&gt;@Configuration&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;KafkaProducerConfiguration&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

      &lt;span class="nd"&gt;@Value&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"${kafka.server}"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
      &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;kafkaServer&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

      &lt;span class="nd"&gt;@Value&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"${kafka.producer.id}"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
      &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;kafkaProducerId&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

      &lt;span class="nd"&gt;@Bean&lt;/span&gt;
      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Object&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;producerConfigs&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="nc"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Object&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;props&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;HashMap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
            &lt;span class="n"&gt;props&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;ProducerConfig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;BOOTSTRAP_SERVERS_CONFIG&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kafkaServer&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;props&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;ProducerConfig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;KEY_SERIALIZER_CLASS_CONFIG&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;LongSerializer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;props&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;ProducerConfig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;VALUE_SERIALIZER_CLASS_CONFIG&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;JsonSerializer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;props&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;ProducerConfig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;CLIENT_ID_CONFIG&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kafkaProducerId&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;props&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;

      &lt;span class="nd"&gt;@Bean&lt;/span&gt;
      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;ProducerFactory&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;OrderDto&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;producerOrderFactory&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;DefaultKafkaProducerFactory&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;producerConfigs&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;

      &lt;span class="nd"&gt;@Bean&lt;/span&gt;
      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;KafkaTemplate&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;OrderDto&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;kafkaTemplate&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="nc"&gt;KafkaTemplate&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;OrderDto&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;KafkaTemplate&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;producerOrderFactory&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
            &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setMessageConverter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;StringJsonMessageConverter&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note: needs to use &lt;strong&gt;org.springframework.kafka.support.serializer.JsonSerializer;&lt;/strong&gt;, not from Jackson library&lt;/p&gt;

&lt;p&gt;OrderService:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nd"&gt;@Slf4j&lt;/span&gt;
&lt;span class="nd"&gt;@Service&lt;/span&gt;
&lt;span class="nd"&gt;@AllArgsConstructor&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;OrderServiceImpl&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;OrderService&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;KafkaTemplate&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;OrderDto&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;kafkaOrderTemplate&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;ObjectMapper&lt;/span&gt; &lt;span class="n"&gt;objectMapper&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;send&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;OrderDto&lt;/span&gt; &lt;span class="n"&gt;dto&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;kafkaOrderTemplate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;send&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"orders"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dto&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="nd"&gt;@KafkaListener&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"OrderId"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;topics&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"orders"&lt;/span&gt;&lt;span class="o"&gt;},&lt;/span&gt; &lt;span class="n"&gt;containerFactory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"singleFactory"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;consume&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;OrderDto&lt;/span&gt; &lt;span class="n"&gt;dto&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;info&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"-&amp;gt; consumed {}"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;writeValueAsString&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dto&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;writeValueAsString&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;OrderDto&lt;/span&gt; &lt;span class="n"&gt;dto&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;objectMapper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;writeValueAsString&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dto&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;JsonProcessingException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Error happens during json processing"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;RuntimeException&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Error happens during json processing: "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;dto&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and OrderController:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nd"&gt;@RestController&lt;/span&gt;
&lt;span class="nd"&gt;@AllArgsConstructor&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;OrderController&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;OrderServiceImpl&lt;/span&gt; &lt;span class="n"&gt;orderService&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="nd"&gt;@PostMapping&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/order"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;OrderDto&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;OrderDto&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;builder&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"New Order #: "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;nanoTime&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Standard description"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;orderService&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;send&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now when you will run application - entrypoint will be available on the port 9955.&lt;br&gt;
Make POST request using endpoint&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nl"&gt;localhost:&lt;/span&gt;&lt;span class="mi"&gt;9955&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;order&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Message will be created and sended to the topic &lt;strong&gt;orders&lt;/strong&gt;. After that our application will immediately read this&lt;br&gt;
message through the method with annotation &lt;strong&gt;@KafkaListener&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;    &lt;span class="nd"&gt;@KafkaListener&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"OrderId"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;topics&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"orders"&lt;/span&gt;&lt;span class="o"&gt;},&lt;/span&gt; &lt;span class="n"&gt;containerFactory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"singleFactory"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;consume&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;OrderDto&lt;/span&gt; &lt;span class="n"&gt;dto&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;info&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"-&amp;gt; consumed {}"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;writeValueAsString&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dto&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and in console you will see such result:&lt;br&gt;
&lt;a href="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7usx8qslomhtat4bwy6g.png"&gt;console output&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's it! The code available on github: &lt;a href="https://github.com/LehaUchicha/Kafka-Example.git"&gt;https://github.com/LehaUchicha/Kafka-Example.git&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As a bonus, which not explained in the article - you can find the second Spring boot application &lt;strong&gt;Kafka-Producer&lt;/strong&gt;, which will push a message every 5 seconds after running to the &lt;strong&gt;orders&lt;/strong&gt; topic.&lt;br&gt;
And &lt;strong&gt;Kafka-Server&lt;/strong&gt; application will read this message, which you can find in console. you need just run application.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;In this article we successfully configured apache kafka and understand how to work with kafka wia Spring Boot.&lt;br&gt;
Also figure out how services can communicate with each other wia apache kafka.&lt;/p&gt;

&lt;p&gt;Thank you for reading. If you like an article, you can support me&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/LehaUchicha"&gt;by buying me a coffee&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Have a good day!&lt;/p&gt;

</description>
      <category>springboot</category>
      <category>tutorial</category>
      <category>kafka</category>
    </item>
    <item>
      <title>AWS BottleRocket On EKS NodeGroup</title>
      <author>🚀  Vu Dao 🚀 </author>
      <pubDate>Mon, 15 Nov 2021 16:07:47 +0000</pubDate>
      <link>https://dev.to/aws-builders/aws-bottlerocket-on-eks-nodegroup-45ec</link>
      <guid>https://dev.to/aws-builders/aws-bottlerocket-on-eks-nodegroup-45ec</guid>
      <description>&lt;h2&gt;
  &lt;a href="#abstract"&gt;
  &lt;/a&gt;
  Abstract
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;The footprints of Linux are increasing day by day and the latest addition to this is the Bottlerocket. It is a Linux-based operating system built by Amazon Web Services. This open-source OS targets to host and run the containers on virtual machines or bare metal hosts.&lt;/li&gt;
&lt;li&gt;Today, Amazon Elastic Kubernetes Services (Amazon EKS) announces native support for Bottlerocket in managed node groups. Bottlerocket is a Linux-based open-source operating system that is purpose-built by Amazon. It focuses on security and maintainability, and provides a reliable, consistent, and safe platform for container-based workloads&lt;/li&gt;
&lt;li&gt;Every Linux-based OS involves the Linux kernel—which manages hardware resources—and a set of software packages that make up the rest of the operating system. That's why the bottlerocket-OS promises a light-weight to boost up and high security.&lt;/li&gt;
&lt;li&gt;In this post, we will launch a Bottlerocket managed node group with lauch template on EKS cluster. It's not only about setting the nodegroup to use bottlerocket AMI but about the arguments at EKS node startup. Let's find out more&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table Of Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#Why-Should-You-Use-Bottlerocket-OS?"&gt;Why Should You Use Bottlerocket OS?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.toCreate-a-lauch-template-for-EKS-nodegroup"&gt;Create a lauch-template for EKS nodegroup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Create-ASG-with-the-launch-template"&gt;Create ASG with the launch template&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#why-should-you-use-bottlerocket-os"&gt;
  &lt;/a&gt;
  🚀 &lt;strong&gt;Why Should You Use Bottlerocket OS?&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Bottlerocket comes to the rescue when facing the above issues. The Bottlerocket OS tends to mitigate the challenges faced by container-based environments such as security, updates, compute cycles, start-up time, and the integrity of a cluster over time. Most of the components in Bottlerocket are written in Rust, so some of the memory safety issues are eliminated. The following are additional benefits of Bottlerocket:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Improved uptime: You can apply updates to the Bottlerocket OS all at once, and they can also be rolled back as needed, improving uptime.&lt;/li&gt;
&lt;li&gt;Lower management overhead: You can utilize container orchestration services to automate updates to the Bottlerocket OS, reducing management overhead and operational costs.&lt;/li&gt;
&lt;li&gt;Better security and resource utilization: Contrary to other operating systems, you only have the essential components in Bottlerocket OS to run, creating a smaller attack surface and improving security.&lt;/li&gt;
&lt;li&gt;Optimized performance: Bottlerocket is optimized to run on Amazon EC2 and incorporates built-in support for integrations with AWS services.&lt;/li&gt;
&lt;li&gt;Read-only file system: Bottlerocket uses a read-only file system whose integrity is validated at the time of booting.&lt;/li&gt;
&lt;li&gt;Automated updates: You can automate updates via orchestration services like Amazon EKS. Unlike traditional Linux-based systems that use package-by-package updates, Bottlerocket utilizes image-based updates.&lt;/li&gt;
&lt;li&gt;Open development model: You can create code and design changes to the Bottlerocket OS via code available in Github. It should be noted that the Bottlerocket OS supports images formatted for Docker and OCI (Open Container Initiative).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#create-a-lauchtemplate-for-eks-nodegroup"&gt;
  &lt;/a&gt;
  🚀 &lt;strong&gt;Create a lauch-template for EKS nodegroup&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Pre-requisite: EKS cluster&lt;/li&gt;
&lt;li&gt;Here we will create an Auto scaling group with launch template contains following things

&lt;ul&gt;
&lt;li&gt;Bottlerocket AMI, to get the latest AMI ID align with EKS cluster version and AWS region, use SSM parameters store
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   ~ $ aws ssm get-parameter --region ap-northeast-1 --name "/aws/service/bottlerocket/aws-k8s-1.18/x86_64/latest/image_id" --query Parameter.Value --output text
   ami-0a04f060889bcef33
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--45zJXscw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/aws-bottlerocket-eks/blob/master/images/ami.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--45zJXscw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/aws-bottlerocket-eks/blob/master/images/ami.png%3Fraw%3Dtrue" width="877" height="285"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Key-pair in order to SSH to the node for demonstration purpose&lt;/li&gt;
&lt;li&gt;EKS VPC&lt;/li&gt;
&lt;li&gt;Security group for Pod communications (Check out &lt;a href="https://dev.to/aws-builders/understand-pods-communication-338c"&gt;Understand Pods communication&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8R5MkMV_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/aws-bottlerocket-eks/blob/master/images/network.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8R5MkMV_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/aws-bottlerocket-eks/blob/master/images/network.png%3Fraw%3Dtrue" width="817" height="368"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;IAM instance profile which has enough permission for node to join EKS cluster, read more &lt;a href="https://dev.to/aws-builders/aws-eks-launch-template-of-node-group-6a4"&gt;AWS EKS - Launch Template Of Node Group&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;User data&lt;/strong&gt; (describe laters)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#one-of-important-thing-is-raw-user-data-endraw-which-contains-additional-arguments-to-raw-kubelet-endraw-service-such-as-node-lables-node-taints"&gt;
  &lt;/a&gt;
  One of important thing is &lt;code&gt;user data&lt;/code&gt; which contains additional arguments to &lt;code&gt;kubelet&lt;/code&gt; service such as node lables, node taints.
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The user data must be in &lt;a href="https://github.com/toml-lang/toml"&gt;TOML format&lt;/a&gt; and must contains &lt;code&gt;settings.kubernetes.cluster-certificate&lt;/code&gt;, &lt;code&gt;settings.kubernetes.api-server&lt;/code&gt;, and &lt;code&gt;settings.kubernetes.cluster-name&lt;/code&gt; (Read more &lt;a href="https://github.com/bottlerocket-os/bottlerocket#kubernetes-settings"&gt;Kubernetes settings&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Following is &lt;code&gt;user data&lt;/code&gt; example with &lt;code&gt;node-labels&lt;/code&gt; and &lt;code&gt;node-taints&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[settings.kubernetes]
api-server = "https://abc.def.ap-northeast-1.eks.amazonaws.com"
cluster-certificate = "TkQgQ0VSVElGSUNBVEUtLS0tLQo="
cluster-name = "eks-dev"
cluster-dns-ip = "10.100.0.10"

[settings.kubernetes.node-labels]
"lifecycle" = "on-demand"
"role" = "airflow"
"type" = "af-stateful"

[settings.kubernetes.node-taints]
"dedicated" = "airflow:NoSchedule"
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We can use &lt;code&gt;eksctl&lt;/code&gt; to generate basic &lt;code&gt;userdata.toml&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;~ $ eksctl get cluster --region ap-northeast-1 --name eks-dev -o json | jq --raw-output '.[] | "[settings.kubernetes]\napi-server = \"" + .Endpoint + "\"\ncluster-certificate =\"" + .CertificateAuthority.Data + "\"\ncluster-name = \"eks-dev\""' &amp;gt; userdata.toml
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#create-asg-with-the-launch-template"&gt;
  &lt;/a&gt;
  🚀 Create ASG with the launch template &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;After the ASG scales the desired capacity, we can check the bottlerocket nodes&lt;/li&gt;
&lt;li&gt;List the nodes in the EKS cluster which have &lt;code&gt;Bottlerocket OS&lt;/code&gt; and check the Pods are assigned to them
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# kubectl get nodes -o=custom-columns=NODE:.metadata.name,ARCH:.status.nodeInfo.architecture,OS-Image:.status.nodeInfo.osImage,OS:.status.nodeInfo.operatingSystem | grep Bottlerocket
ip-172-10-11-131.ap-northeast-1.compute.internal   amd64   Bottlerocket OS 1.4.0 (aws-k8s-1.18)   linux
ip-172-10-21-64.ap-northeast-1.compute.internal    amd64   Bottlerocket OS 1.4.0 (aws-k8s-1.18)   linux
ip-172-10-31-142.ap-northeast-1.compute.internal   amd64   Bottlerocket OS 1.4.0 (aws-k8s-1.18)   linux

# kubectl get pod -n kube-system -owide | grep ip-172-10-11-131.ap-northeast-1.compute.internal
aws-node-t622b                        1/1     Running   1          3h38m   172.10.11.131   ip-172-10-11-131.ap-northeast-1.compute.internal   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
aws-node-termination-handler-ql7t2    1/1     Running   0          3h38m   172.10.11.131   ip-172-10-11-131.ap-northeast-1.compute.internal   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
efs-csi-node-lbhcq                    3/3     Running   0          3h37m   172.10.11.131   ip-172-10-11-131.ap-northeast-1.compute.internal   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
kube-proxy-j6l48                      1/1     Running   0          3h38m   172.10.11.131   ip-172-10-11-131.ap-northeast-1.compute.internal   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;

# kubectl get pod -owide -n airflow | grep ip-172-10-11-131.ap-northeast-1.compute.internal
airflow-flower-59774778b4-fpfdm             2/2     Running   0          3h32m   172.10.11.76    ip-172-10-11-131.ap-northeast-1.compute.internal   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
airflow-scheduler-cdccf9d86-xc4hr           2/2     Running   0          3h32m   172.10.11.113   ip-172-10-11-131.ap-northeast-1.compute.internal   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
airflow-sync-users-7fd7c7db8-6whhr          2/2     Running   0          3h32m   172.10.11.36    ip-172-10-11-131.ap-northeast-1.compute.internal   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
airflow-web-77d59cfcbb-bxsj5                2/2     Running   0          3h32m   172.10.11.61    ip-172-10-11-131.ap-northeast-1.compute.internal   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Start an SSM session. In order to SSH to the node, it needs to run &lt;code&gt;enable-admin-container&lt;/code&gt; (which is disabled by default) from SSM console&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3fDeqsSH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/aws-bottlerocket-eks/blob/master/images/ssm.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3fDeqsSH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/aws-bottlerocket-eks/blob/master/images/ssm.png%3Fraw%3Dtrue" width="776" height="388"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[ssm-user@ip-172-10-12-246 /]$ enable-admin-container
Setting admin container to enabled
204 No Content
Committing and applying changes
200 OK
["settings.host-containers.admin.enabled"]
The admin container is now enabled - it should pull and start soon, and then you can SSH in
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;SSH to the node and see the difference from other Linux OS
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  bash-4.2# systemctl status kubelet
  Running in chroot, ignoring request.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  🚀 Conclusion &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Bottlerocket is built from the ground up with only the minimum components necessary to run containers installed on the host. Any additional software such EFS CSI driver, monitoring agents, metric collections, etc. must be run as Daemonsets&lt;/li&gt;
&lt;li&gt;In this post, it shows how to use Bottlerocket natively with Amazon EKS managed node groups and how to interact directly with the Bottlerocket cluster nodes. It's interesting that AWS CDK will support bottlerocket managed nodegroup soon (&lt;a href="https://github.com/aws/aws-cdk/pull/17323"&gt;feat(aws-eks): support bottlerocket managed nodegroup&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;References:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://epsagon.com/tools/how-to-get-started-with-bottlerocket-os/"&gt;How to Get Started with Bottlerocket OS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/blogs/containers/amazon-eks-adds-native-support-for-bottlerocket-in-managed-node-groups/"&gt;Amazon EKS adds native support for Bottlerocket in Managed Node Groups&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;div class="ltag__user ltag__user__id__512906"&gt;
  
    .ltag__user__id__512906 .follow-action-button {
      background-color: #000000 !important;
      color: #62df88 !important;
      border-color: #000000 !important;
    }
  
    &lt;a href="/vumdao" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bGwkUMWT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--ugeYdWM---/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/512906/2472752c-cfd5-4e02-b3d8-55b790178884.png" alt="vumdao image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/vumdao"&gt;🚀  Vu Dao 🚀 &lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/vumdao"&gt;🚀 AWSome Devops | AWS Community Builder | AWS SA || ☁️ CloudOpz ☁️&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;




&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/vumdao"&gt;
        vumdao
      &lt;/a&gt; / &lt;a href="https://github.com/vumdao/vumdao"&gt;
        vumdao
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


</description>
      <category>aws</category>
      <category>eks</category>
      <category>cloudopz</category>
      <category>bottlerocket</category>
    </item>
    <item>
      <title>The 5 Short Frontend tips for November </title>
      <author>Stas Melnikov</author>
      <pubDate>Mon, 15 Nov 2021 15:52:29 +0000</pubDate>
      <link>https://dev.to/melnik909/the-5-short-frontend-tips-for-november-cdh</link>
      <guid>https://dev.to/melnik909/the-5-short-frontend-tips-for-november-cdh</guid>
      <description>&lt;h2&gt;
  &lt;a href="#the-button-role-isnt-enough-for-an-accessible-interface"&gt;
  &lt;/a&gt;
  The button role isn't enough for an accessible interface
&lt;/h2&gt;

&lt;p&gt;There is a practice of overriding the button's default role. It's a bad practice already because authors of the ARIA in HTML standard prohibit overriding of default roles in section 2.1.&lt;/p&gt;

&lt;p&gt;But in addition, people think if they define role="button" this element becomes accessible. Yes, it's true for screen readers. But that's only one case!&lt;/p&gt;

&lt;p&gt;This "button" isn't accessible for a keyboard. Users can't focus on this element using the tab key. Also, this "button" isn't accessible for interaction using the enter or space keys.&lt;/p&gt;

&lt;p&gt;So if you want to define role="button" don't do that. Just use the button element.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;don't do this&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;role=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Go&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- or --&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;role=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Go&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;you can use it instead&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;button&amp;gt;&lt;/span&gt;Go&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-bigger-clickable-area-the-better-userfriendly-interactive-elements"&gt;
  &lt;/a&gt;
  The bigger clickable area the better user-friendly interactive elements
&lt;/h2&gt;

&lt;p&gt;When we design interactive elements we have to think about how users will interact with them, in particular, a clickable area. &lt;/p&gt;

&lt;p&gt;That is important because users use different kinds of interactions. I often see designers and developers make a clickable area that is equal sizes of the element. &lt;/p&gt;

&lt;p&gt;It's nice for users who use a mouse. But that's a big problem for other users. If users have  a motor disability click on such an element is a nearly impossible task,&lt;/p&gt;

&lt;p&gt;Sometimes I can't hit on such elements when I tap on them using a finger. Also outline around elements has not enough contrast, if I focused on them using a keyboard,&lt;/p&gt;

&lt;p&gt;But we can solve these problems easily. Just we should design more largest clickable area that will not conflict with other elements around.   &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y7rDml1X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://c10.patreonusercontent.com/3/eyJ3Ijo2MjB9/patreon-media/p/post/56937666/67caae32ca1a41859f94e25be24d8579/1.jpg%3Ftoken-time%3D1635292800%26token-hash%3DpVEa_BCCuXgCfixBPmjEiBrn72YcJP6BxUvZQ2j2Hg0%253D" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y7rDml1X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://c10.patreonusercontent.com/3/eyJ3Ijo2MjB9/patreon-media/p/post/56937666/67caae32ca1a41859f94e25be24d8579/1.jpg%3Ftoken-time%3D1635292800%26token-hash%3DpVEa_BCCuXgCfixBPmjEiBrn72YcJP6BxUvZQ2j2Hg0%253D" alt="" width="620" height="620"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-arialabelledby-simplify-navigation-for-users-of-screen-readers"&gt;
  &lt;/a&gt;
  The aria-labelledby simplify navigation for users of screen readers
&lt;/h2&gt;

&lt;p&gt;Any web interface has a lot of sections that help users without vision disabilities orient at the page. We just see headings and understand that is a section and also its sense.&lt;/p&gt;

&lt;p&gt;But some users can't see. They use the special quick navigation mode known as "Regions list" in screen readers. In this mode screen readers display all regions on the page. So users can go to any by some taps.&lt;/p&gt;

&lt;p&gt;Unfortunately, there is a problem that is section elements aren't displayed in this mode until we associate section heading with a section using the aria-labelledby attribute.&lt;/p&gt;

&lt;p&gt;So we have to add the id to the heading and add this as a value to the aria-labelledby attribute that is defined for the section element.  As a result, this section will be added to the regions list and users will know about it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;don't do this&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;section&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;About me&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Lorem ipsum, dolor sit amet consectetur...&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;you can use it instead&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt; &lt;span class="na"&gt;aria-labelledby=&lt;/span&gt;&lt;span class="s"&gt;"about-me"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"about-me"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;About me&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Lorem ipsum, dolor sit amet consectetur...&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#focus-moving-is-underestimated"&gt;
  &lt;/a&gt;
  Focus moving is underestimated
&lt;/h2&gt;

&lt;p&gt;We don't think about what to do with focus when we design elements that appear after user actions. Or, more specifically, we just do nothing. Therefore there are 2 problems.&lt;/p&gt;

&lt;p&gt;Firstly, we cut off the possibility of more quick interaction. For example, when we log in on Groupon we have to focus on the input field to start filling in the form.&lt;/p&gt;

&lt;p&gt;Instead, when we go through the same case on Pinterest focus moves to the first input field automatically. So we can start filling in the form without additional actions. &lt;/p&gt;

&lt;p&gt;Secondly, if users have vestibular disabilities login becomes an impossible task because in this case, they lost the possibility of using a keyboard. For example, when we push on the sign in button on Groupon focus doesn't move inside of the form. It's lost just.&lt;/p&gt;

&lt;p&gt;For these reasons, we have to design our interfaces with the thought of how focus should move. In this case, our interfaces will be accessible for more users.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Gxh5LzBO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://c10.patreonusercontent.com/3/eyJxIjoxMDAsIndlYnAiOjB9/patreon-media/p/post/58254310/b9df71dad9504ae9aa978215dd7d44c3/1.jpg%3Ftoken-time%3D1637712000%26token-hash%3DMuX-fP5TefycieyyKFrbv7RThcQijj-Qdt1vtcpS1gU%253D" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Gxh5LzBO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://c10.patreonusercontent.com/3/eyJxIjoxMDAsIndlYnAiOjB9/patreon-media/p/post/58254310/b9df71dad9504ae9aa978215dd7d44c3/1.jpg%3Ftoken-time%3D1637712000%26token-hash%3DMuX-fP5TefycieyyKFrbv7RThcQijj-Qdt1vtcpS1gU%253D" alt="Focus doesn't move inside modal on Groupon website when we push the sign in button" width="880" height="880"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6PgK-5Yf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://c10.patreonusercontent.com/3/eyJxIjoxMDAsIndlYnAiOjB9/patreon-media/p/post/58254310/1874e90a676c41f482de193ef7e1cae4/1.jpg%3Ftoken-time%3D1637712000%26token-hash%3D2yC7bx6K0r5rE-pP6aTvxCIcDUEsP4oMJEx7Krf0QoA%253D" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6PgK-5Yf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://c10.patreonusercontent.com/3/eyJxIjoxMDAsIndlYnAiOjB9/patreon-media/p/post/58254310/1874e90a676c41f482de193ef7e1cae4/1.jpg%3Ftoken-time%3D1637712000%26token-hash%3D2yC7bx6K0r5rE-pP6aTvxCIcDUEsP4oMJEx7Krf0QoA%253D" alt="Focus moves on the first input box on Pinterest website when we push the log in button" width="880" height="880"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#improving-accepting-the-cookies-policy-using-focus"&gt;
  &lt;/a&gt;
  Improving accepting the Cookies Policy using focus
&lt;/h2&gt;

&lt;p&gt;A last years there is a popular pattern when users have to accept Cookie Policy on websites. So I've wanted to research which solutions are and how they affect user experience. Let's talk about it. &lt;/p&gt;

&lt;p&gt;The typical solution is on the Fred Perry website. Users can see text with a link on the cookies policy and an accept button. When we use this kind of solution we have to use mouse, touchpad or others devices for pushing on a link or button. So we do additional actions.&lt;/p&gt;

&lt;p&gt;Also there is another solution on the H&amp;amp;M website. They set focus on the cookie policy link. The prop of this solution is users can consult with the policy if we just push the Enter key. When they want to accept the policy we push the Tab and Enter keys. We haven't to take in hand mouse or use the touchpad. &lt;/p&gt;

&lt;p&gt;The problem of this solution is a lot of users read the policy already and don't want to read it again. They just want to accept that. &lt;/p&gt;

&lt;p&gt;So I suggest to set focus on the accept button. In this case we quickly accept that using the Enter button. And if we need to read the policy we just will switch on the link using the shift+tab combination and then we'll go to read of policy by pushing the Enter key.    &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8PMlhx7O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://c10.patreonusercontent.com/3/eyJ3Ijo2MjB9/patreon-media/p/post/58686231/27b1571be7cb4bfa9ae5aac790b81f64/1.jpg%3Ftoken-time%3D1638230400%26token-hash%3Dc2iX01AesVYaRTvFVQfr4ObxxBywtlCxDbJJLGYOAPo%253D" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8PMlhx7O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://c10.patreonusercontent.com/3/eyJ3Ijo2MjB9/patreon-media/p/post/58686231/27b1571be7cb4bfa9ae5aac790b81f64/1.jpg%3Ftoken-time%3D1638230400%26token-hash%3Dc2iX01AesVYaRTvFVQfr4ObxxBywtlCxDbJJLGYOAPo%253D" alt="Focus isn't set when the home page of the Fred Perry website loads" width="620" height="620"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YI6z6JEs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://c10.patreonusercontent.com/3/eyJxIjoxMDAsIndlYnAiOjB9/patreon-media/p/post/58686231/77cd86ef04a640668b590d7e4fd1e183/1.jpg%3Ftoken-time%3D1638230400%26token-hash%3DqbdhbFEbnIqpzZ578Hqi5SbBkTwky19Nx6CxrNRyJFs%253D" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YI6z6JEs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://c10.patreonusercontent.com/3/eyJxIjoxMDAsIndlYnAiOjB9/patreon-media/p/post/58686231/77cd86ef04a640668b590d7e4fd1e183/1.jpg%3Ftoken-time%3D1638230400%26token-hash%3DqbdhbFEbnIqpzZ578Hqi5SbBkTwky19Nx6CxrNRyJFs%253D" alt="Focus is set on the Cookie policy when the home page of the H&amp;amp;M website loads" width="880" height="880"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bei1Ms_u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://c10.patreonusercontent.com/3/eyJxIjoxMDAsIndlYnAiOjB9/patreon-media/p/post/58686231/68b25b3991f04101a4bcec8b4bbad1ce/1.jpg%3Ftoken-time%3D1638230400%26token-hash%3DCCoEDvHjh17zka7tCE77BRPxPun5H_sO0HrwVK8KSzs%253D" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bei1Ms_u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://c10.patreonusercontent.com/3/eyJxIjoxMDAsIndlYnAiOjB9/patreon-media/p/post/58686231/68b25b3991f04101a4bcec8b4bbad1ce/1.jpg%3Ftoken-time%3D1638230400%26token-hash%3DCCoEDvHjh17zka7tCE77BRPxPun5H_sO0HrwVK8KSzs%253D" alt="Focus is set on the accept all cookies when the home page of the H&amp;amp;M website loads" width="880" height="880"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P.S.&lt;/strong&gt;&lt;br&gt;
❤ Thank you so much, my sponsors: Ben Rinehart, Sergio Kagiema, Jesse Willard, Tanya Ten, Spiridon Konofaos.&lt;/p&gt;

&lt;p&gt;👀 Also I tell stories from my career on Substack. Join &lt;a href="https://stasmelnikov.substack.com"&gt;my free newsletter&lt;/a&gt;, if you're interested in my background&lt;/p&gt;

</description>
      <category>html</category>
      <category>ux</category>
      <category>a11y</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Building a Next.js app with Netlify, NextAuth.js, Prisma, and a PlanetScale serverless database</title>
      <author>etnoctua</author>
      <pubDate>Mon, 15 Nov 2021 15:40:01 +0000</pubDate>
      <link>https://dev.to/planetscale/building-a-nextjs-app-with-netlify-nextauthjs-prisma-and-a-planetscale-serverless-database-2edp</link>
      <guid>https://dev.to/planetscale/building-a-nextjs-app-with-netlify-nextauthjs-prisma-and-a-planetscale-serverless-database-2edp</guid>
      <description>&lt;p&gt;Git-centric workflows have fundamentally changed how we build for the web. As developers, we want isolated environments to develop and test our applications. As Netlify’s CEO Matt Biilmann mentioned in his recent Jamstack Conf keynote, our back-end data layer is still a single branch. It’s often talking to a long-running server or a production environment. &lt;/p&gt;

&lt;p&gt;It doesn’t have to be this way. PlanetScale supports database schema branching, deploy requests, and non-blocking schema changes. Your staging environment’s database can be isolated from the production environment’s database.&lt;/p&gt;

&lt;p&gt;We are excited to announce a new Next.js starter app that can be deployed to Netlify with the “Deploy to Netlify” button, uses NextAuth.js for built-in authentication, and Prisma to interact with your PlanetScale database.&lt;/p&gt;

&lt;p&gt;The starter app is located today on the Netlify Jamstack Templates page. Want to get started right away? Click the button below!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://app.netlify.com/start/deploy?repository=https://github.com/planetscale/nextjs-planetscale-starter"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Gq_bfuxi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.netlify.com/img/deploy/button.svg" alt="Deploy to Netlify" width="146" height="32"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: After you deploy to Netlify, you will need to follow the instructions in the &lt;a href="https://github.com/planetscale/nextjs-planetscale-starter"&gt;documentation&lt;/a&gt; to get your PlanetScale database up and running.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Since this is just the first version of this starter app, we would love to hear your feedback! &lt;/p&gt;

</description>
      <category>beginners</category>
      <category>nextjs</category>
      <category>netlify</category>
      <category>serverless</category>
    </item>
    <item>
      <title>Simplest way to compile all TypeScript into one single Js file by SilvenLEAF</title>
      <author>SilvenLEAF</author>
      <pubDate>Mon, 15 Nov 2021 15:15:26 +0000</pubDate>
      <link>https://dev.to/silvenleaf/simplest-way-to-compile-all-typescript-into-one-single-js-file-19bj</link>
      <guid>https://dev.to/silvenleaf/simplest-way-to-compile-all-typescript-into-one-single-js-file-19bj</guid>
      <description>&lt;p&gt;Ahoy there! It's I, SilvenLEAF!! Have you ever faced an issue where you have many TypeScript files but want them all to convert into one Single JavaScript file so that you can reference it from your HTML? Then fear you not! Let's get it done in the simplest way!! &lt;/p&gt;

&lt;p&gt;We'll be using Webpack with TypeScript. Let's start!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-0-begin-the-project"&gt;
  &lt;/a&gt;
  Step 0: Begin the project
&lt;/h3&gt;

&lt;p&gt;Create a folder and open it in your favorite editor (mine VS Code). Then type this command on your project terminal&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm init &lt;span class="nt"&gt;-y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(It'll create a package.json file to track all the packages that you'd download and so on)&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#bonus-step-adding-typescript"&gt;
  &lt;/a&gt;
  Bonus Step: Adding TypeScript
&lt;/h2&gt;

&lt;p&gt;For those who are a bit lost on how to set up the environment and run the TypeScript files, check this one out &lt;strong&gt;&lt;a href="https://dev.to/silvenleaf/typescript-setup-by-silvenleaf-1aen"&gt;TypeScript SETUP by SilvenLEAF&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Well anyway, in short (for details, checkout the above link)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;install typescript
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i typescript 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;init our tsconfig
(make sure you already have typescript globally installed, if not type &lt;strong&gt;npm i -g typescript&lt;/strong&gt;. And don't get it confused with the previous normal &lt;strong&gt;npm i typescript&lt;/strong&gt; command)
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;tsc &lt;span class="nt"&gt;--init&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(It'll create a &lt;strong&gt;.tsconfig&lt;/strong&gt; file)&lt;/p&gt;

&lt;p&gt;Let's update some of the properties from that &lt;strong&gt;.tsconfig&lt;/strong&gt; file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"outDir"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"./dist"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"rootDir"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"./src"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; 
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It'll convert all TypeScript files that are inside &lt;strong&gt;"src"&lt;/strong&gt; folder and output them in the &lt;strong&gt;"dist"&lt;/strong&gt; folder.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#step-1-create-a-simplest-project"&gt;
  &lt;/a&gt;
  Step 1: Create a Simplest project
&lt;/h3&gt;

&lt;p&gt;Let's create an &lt;strong&gt;"index.html"&lt;/strong&gt; file on the root level of your project folder with this following content&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- By @SilvenLEAF --&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./dist/app-bundle.js"&lt;/span&gt; &lt;span class="na"&gt;defer&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Webpack with TypeScript&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Let's learn Webpack with TypeScript&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"header"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"alertBtn"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Click me!&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;See on line no 7, we are referencing &lt;strong&gt;"./dist/app-bundle.js"&lt;/strong&gt; JavaScript file. This will be the single JavaScript file which will be compiled from all those TypeScript files.&lt;/p&gt;

&lt;p&gt;Now let's create a folder &lt;strong&gt;"src"&lt;/strong&gt; on the root level and inside it, let's create all our TypeScript files. Let's create &lt;strong&gt;"app.ts"&lt;/strong&gt; and &lt;strong&gt;"variable.ts"&lt;/strong&gt; files (inside the &lt;strong&gt;"src"&lt;/strong&gt; folder. &lt;/p&gt;

&lt;p&gt;Inside &lt;strong&gt;"variable.ts"&lt;/strong&gt; file, write the following content&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SilvenLEAF&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And inside &lt;strong&gt;"app.ts"&lt;/strong&gt; file write the following content&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// By @SilvenLEAF&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./variable&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;alertBtn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#alertBtn&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;HTMLButtonElement&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;header&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#header&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;HTMLHeadingElement&lt;/span&gt;

&lt;span class="nx"&gt;alertBtn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;header&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`Hello there, I'm &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Great! We have a simple project created. Now let's compile all those TypeScript files into one single file and test it out.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#step-2-configure-webpack"&gt;
  &lt;/a&gt;
  Step 2: Configure Webpack
&lt;/h3&gt;

&lt;p&gt;Type the following command to install the required packages&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i &lt;span class="nt"&gt;-D&lt;/span&gt; webpack webpack-cli typescript ts-loader
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(&lt;strong&gt;"npm i -D X"&lt;/strong&gt; is the shorthand for &lt;strong&gt;"npm install --save-dev X"&lt;/strong&gt;)&lt;/p&gt;

&lt;p&gt;Now create a &lt;strong&gt;"webpack.config.js"&lt;/strong&gt; file on the root level of your project folder with the following content&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//webpack.config.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;development&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;devtool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;inline-source-map&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;main&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./src/app.ts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./dist&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="na"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;app-bundle.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;--- Will be compiled to this single file&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;extensions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.ts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.tsx&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;module&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt; 
        &lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\.&lt;/span&gt;&lt;span class="sr"&gt;tsx&lt;/span&gt;&lt;span class="se"&gt;?&lt;/span&gt;&lt;span class="sr"&gt;$/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;loader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ts-loader&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's compile them and test it out. Type this following command to compile all TypeScript files into one single file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx webpack
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;See we are not using the &lt;strong&gt;"tsc"&lt;/strong&gt; command to compile here because we are using webpack. It'll create a single file named &lt;strong&gt;"app-bundle.js"&lt;/strong&gt; inside &lt;strong&gt;"dist"&lt;/strong&gt; folder. We'll be linking this file on the &lt;strong&gt;"index.html"&lt;/strong&gt;. See line no 7 of &lt;strong&gt;"index.html"&lt;/strong&gt; file&lt;/p&gt;

&lt;p&gt;Now let's test it out. Launch the &lt;strong&gt;"index.html"&lt;/strong&gt; file with LIVE Server. (If you don't have this extension installed, install it in VS Code or Atom or whatever Text Editor you are using, and run it). It'll run that html page live on your browser. Click that &lt;strong&gt;"Click me!"&lt;/strong&gt; Button and see that it's working fine!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Before clicking the button&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eY2YeGTd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rtlxonr977ek0izw9b4v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eY2YeGTd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rtlxonr977ek0izw9b4v.png" alt="Before clicking the button" width="781" height="346"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;After clicking the button&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rceWclJr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pgw0gza0t9014ept7mzc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rceWclJr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pgw0gza0t9014ept7mzc.png" alt="After clicking the button" width="793" height="370"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hope it was helpful!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NEXT blog is coming by November 17th&lt;/strong&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What's NEXT?
&lt;/h1&gt;

&lt;h4&gt;
  &lt;a href="#1-learning-devops-with-github-actions"&gt;
  &lt;/a&gt;
  1. Learning DevOps with Github Actions
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#2-more-on-devops"&gt;
  &lt;/a&gt;
  2. More on DevOps
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#3-improved-ai-bot-that-can-do-anything"&gt;
  &lt;/a&gt;
  3. Improved AI BOT that can do anything
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#4-insane-stuff-with-javascripttypescript"&gt;
  &lt;/a&gt;
  4. Insane stuff with JavaScript/TypeScript
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#5-debugging-typescript-with-vs-code-debugger"&gt;
  &lt;/a&gt;
  5. Debugging TypeScript with VS Code Debugger
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#6-sequelize-hooks"&gt;
  &lt;/a&gt;
  6. Sequelize Hooks
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#7-how-to-create-an-android-app-with-no-xp"&gt;
  &lt;/a&gt;
  7. How to create an Android APP with NO XP
&lt;/h4&gt;

&lt;p&gt;(including apk generating)&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#got-any-doubt"&gt;
  &lt;/a&gt;
  Got any doubt?
&lt;/h1&gt;

&lt;p&gt;Drop a comment or Feel free to reach out to me @SilveLEAF on Twitter or &lt;a href="https://www.linkedin.com/in/silvenleaf/"&gt;Linkedin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Wanna know more about me? Come here! &lt;br&gt;
&lt;a href="https://SilvenLEAF.github.io"&gt;SilvenLEAF.github.io&lt;/a&gt;&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Open-source Node.js commerce engine for Strapi</title>
      <author>Oliver Juhl</author>
      <pubDate>Mon, 15 Nov 2021 15:04:12 +0000</pubDate>
      <link>https://dev.to/medusajs/open-source-nodejs-commerce-engine-for-strapi-259p</link>
      <guid>https://dev.to/medusajs/open-source-nodejs-commerce-engine-for-strapi-259p</guid>
      <description>&lt;p&gt;Use &lt;a href="https://github.com/medusajs/medusa"&gt;Medusa&lt;/a&gt; and &lt;a href="https://github.com/strapi/strapi"&gt;Strapi&lt;/a&gt; to power your commerce setup for a full open-source headless solution. In recent years, it has become increasingly popular to go with a headless approach when building ecommerce, blogs, portfolios, and the likes. Among many benefits, you get improved performance, more customizability, and support to scale as your business grows. &lt;/p&gt;

&lt;p&gt;A headless system is essentially a decoupling of presentational layers and backend. It cuts off the traditional proprietary frontend displaying your content (hence the name), and instead gives you Rest APIs, you can consume from whatever system, client, or service you would like.&lt;/p&gt;

&lt;p&gt;Going with the headless approach when building your setup will provide you with a modular system with best-in-breed services within each specific area of your stack; CMS, ecommerce, etc. This is in contrast to how you would traditionally choose a monolithic platform that partly (or hardly) caters to all of your needs.&lt;/p&gt;

&lt;p&gt;This article will guide you through setting up a headless ecommerce setup in which content is managed by &lt;a href="http://strapi.io"&gt;Strapi&lt;/a&gt; and the ecommerce is powered by &lt;a href="https://github.com/medusajs/medusa"&gt;Medusa&lt;/a&gt; - on a 100% open-source stack.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-medusa-and-why-strapi"&gt;
  &lt;/a&gt;
  Why Medusa, and why Strapi?
&lt;/h2&gt;

&lt;p&gt;The bottleneck of headless ecommerce systems is most often the amount of resources it requires to both get started and to maintain. You need backend developers to handle your infrastructure and integrations and frontend developers to build the customer experience. This is one of the reasons many existing headless solutions target enterprise businesses. To allow for small to mid-sized businesses to enter the space, one must cater to the developer experience. If the onboarding, setup, and implementation process are all easy to approach, you no longer need a team of ten to build a scalable ecommerce setup. &lt;/p&gt;

&lt;p&gt;Strapi and Medusa are two systems built primarily for developers and the combination of the two enables you to build an ecommerce store with a blazingly fast, content-rich frontend and a highly extendable backend.&lt;/p&gt;

&lt;p&gt;Both projects are open-source, headless, and built with Node.js. They use a very similar architecture for plugins and customizations, that gives you the ability to extend your commerce and CMS to fit exactly your needs. Let's now dive into the installation and setup of the two.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;

&lt;p&gt;The following guide for setting up the plugin assumes, that you are familiar with both Strapi and Medusa. If this is not the case, visit the official &lt;a href="https://docs.medusa-commerce.com/tutorial/set-up-your-development-environment"&gt;Medusa&lt;/a&gt; and &lt;a href="https://strapi.io/documentation/developer-docs/latest/getting-started/introduction.html"&gt;Strapi&lt;/a&gt; documentation.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setting-up-medusa"&gt;
  &lt;/a&gt;
  Setting up Medusa
&lt;/h3&gt;

&lt;p&gt;First, create a Medusa project using your favorite package manager. You can go about this in two ways:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Use &lt;code&gt;npx&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;npx create-medusa-app&lt;/code&gt;  will allow you to create a Medusa store engine, a storefront, and Medusa admin in a single command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# using npx&lt;/span&gt;
npx create-medusa-app

&lt;span class="c"&gt;# using yarn&lt;/span&gt;
yarn create medusa-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;When choosing &lt;code&gt;npx&lt;/code&gt; you are shown different store engine options as part of the setup. For this Strapi tutorial, you should choose &lt;code&gt;medusa-starter-default&lt;/code&gt;. Optionally, pick a storefront.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Use &lt;code&gt;medusa-cli&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;@medusajs/medusa-cli&lt;/code&gt; is our Command Line Tool for creating the Medusa store engine (alongside many other powerful commands). Use it as such:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# using yarn&lt;/span&gt;
yarn global add @medusajs/medusa-cli

&lt;span class="c"&gt;# using npm&lt;/span&gt;
npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-g&lt;/span&gt; @medusajs/medusa-cli

&lt;span class="c"&gt;# initialise a Medusa project&lt;/span&gt;
medusa new my-medusa-store
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Medusa uses Redis for emitting events in the system, so ensure, that this is installed and running&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ redis-cli
127.0.0.1:6379&amp;gt; ping
PONG
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And in &lt;code&gt;medusa-config.js&lt;/code&gt; you should enable it. Your project config in the bottom of the file should look similar to this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;projectConfig: &lt;span class="o"&gt;{&lt;/span&gt;
  redis_url: REDIS_URL,
  database_database: &lt;span class="s2"&gt;"./medusa-db.sql"&lt;/span&gt;,
  database_type: &lt;span class="s2"&gt;"sqlite"&lt;/span&gt;,
  store_cors: STORE_CORS,
  admin_cors: ADMIN_CORS,
&lt;span class="o"&gt;}&lt;/span&gt;,
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Additionally, add Strapi to your list of plugins:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;resolve:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;`medusa-plugin-strapi`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;options:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;strapi_medusa_user:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;'medusa_user'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;strapi_medusa_password:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;'medusaPassword&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;strapi_url:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="mf"&gt;127.0&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;strapi_port:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="mi"&gt;1337&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And finally, install the plugin using your package manager:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#using yarn&lt;/span&gt;
yarn add medusa-plugin-strapi

&lt;span class="c"&gt;# using npm&lt;/span&gt;
npm &lt;span class="nb"&gt;install &lt;/span&gt;medusa-plugin-strapi
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You've now successfully installed and configured your Medusa store engine. Seed it with data and start it up by running:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# using npm&lt;/span&gt;
npm run seed &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; npm start

&lt;span class="c"&gt;# using yarn&lt;/span&gt;
yarn seed &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; yarn start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We'll now turn to the Strapi side of things.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setting-up-strapi"&gt;
  &lt;/a&gt;
  Setting up Strapi
&lt;/h3&gt;

&lt;p&gt;Similar to how you installed Medusa, you can install Strapi using your favorite package manager. Use the &lt;code&gt;strapi-medusa-template&lt;/code&gt; to create your project. The template is a custom Strapi implementation required for the two systems to work together.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# using npx&lt;/span&gt;
npx create-strapi-app strapi-medusa &lt;span class="nt"&gt;--template&lt;/span&gt; https://github.com/Deathwish98/strapi-medusa-template.git

&lt;span class="c"&gt;# using yarn&lt;/span&gt;
yarn create strapi-app strapi-medusa &lt;span class="nt"&gt;--template&lt;/span&gt; https://github.com/Deathwish98/strapi-medusa-template.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After running the command, you have a full Strapi project configured to synchronize with Medusa. Upon the initial start of the Strapi server, all the required models will be created. They will correlate with models from Medusa to allow for two-way synchronization. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: The Strapi template starter uses SQLite as the default database. There is a known bug related to &lt;code&gt;knex.js&lt;/code&gt; that comes from multiple write connections. Restarting the Strapi server should make the error disappear.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Synchronization&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The power of using Strapi with Medusa comes from two-way synchronization. Strapi allows you to enrich your products with extra fields and data, such that you can perfect the customer experience. But for the products to appear in Strapi, you are required to create them in Medusa. For the commerce logic in your presentational layer to function properly, you need the Medusa IDs of products and variants. This is used for operations like adding to cart and going through the checkout flow.&lt;/p&gt;

&lt;p&gt;When products are created in Medusa, the two-way communication ensures that data is kept consistent between the two systems. Though only some fields are synchronized and those are:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Product&lt;/strong&gt;: title, subtitle, description, handle&lt;br&gt;
&lt;strong&gt;Variants&lt;/strong&gt;: title&lt;br&gt;
&lt;strong&gt;Region&lt;/strong&gt;: name&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Further down the road, the support for synchronizing more entities is expected to be introduced&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Using Postgres in Medusa (optional)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For Postgres to function, you need to create a local database. One way of doing this would be to use your terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;createdb&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;medusa-store&lt;/span&gt;&lt;span class="w"&gt; 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Depending on what system you are on and how your local Postgres is configured, the above command might fail. In that case, please investigate the correct way to create a local database on your pc.&lt;/p&gt;

&lt;p&gt;Navigate to your newly created Medusa project (&lt;code&gt;&amp;lt;project name&amp;gt;/backend&lt;/code&gt; if you used &lt;code&gt;npx&lt;/code&gt;). In &lt;code&gt;medusa-config.js&lt;/code&gt;, ensure that you have Redis and Postgres enabled. The project configurations at the bottom of the file should look similar to this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;projectConfig: &lt;span class="o"&gt;{&lt;/span&gt;
  redis_url: REDIS_URL,
  database_url: DATABASE_URL,
  database_type: &lt;span class="s2"&gt;"postgres"&lt;/span&gt;,
  store_cors: STORE_CORS,
  admin_cors: ADMIN_CORS,
&lt;span class="o"&gt;}&lt;/span&gt;,
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note: the &lt;code&gt;DATABASE_URL&lt;/code&gt; variable should use the Postgres database created in the previous step&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#summary-and-next-steps"&gt;
  &lt;/a&gt;
  Summary and next steps
&lt;/h2&gt;

&lt;p&gt;You are now provided with the toolbox for creating amazing digital commerce experiences on top of a highly extendable CMS system and ecommerce platform. &lt;/p&gt;

&lt;p&gt;To quickly get started, see our starters for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/medusajs/gatsby-starter-medusa"&gt;GatsbyJS&lt;/a&gt; (much more feature-rich V2 coming soon)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/medusajs/nextjs-starter-medusa"&gt;NextJS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A big thanks to community member Pawan Sharma (&lt;a href="https://github.com/Deathwish98"&gt;Deathwish98&lt;/a&gt;) for leading the implementation of this integration with Strapi. If you want to be part of the Medusa community, feel free to join us on our &lt;a href="https://discord.gg/F87eGuwkTp"&gt;Discord channel&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>headless</category>
    </item>
    <item>
      <title>How Does Functional Programming Contribute to Modern Languages?</title>
      <author>Catherine Galkina</author>
      <pubDate>Mon, 15 Nov 2021 14:30:19 +0000</pubDate>
      <link>https://dev.to/typeable/how-does-functional-programming-contribute-to-modern-languages-4gap</link>
      <guid>https://dev.to/typeable/how-does-functional-programming-contribute-to-modern-languages-4gap</guid>
      <description>&lt;p&gt;Author: Vladislav Lagunov&lt;/p&gt;

&lt;p&gt;Modern programming languages have a large set of various tools and useful features, which makes it possible to write quite a different code in the same language for the same task.&lt;br&gt;
Programming paradigm is a way of thinking in the first place – the way the programmer &lt;em&gt;thinks&lt;/em&gt; about the data representation and processing. In other words, programming paradigm exists in the programmer’s mind and is not a part of the language. Different languages can support a specific paradigm to a varying degree. If we open Wikipedia and start reading about the most popular programming languages, we’ll see that many of them are described as “multi-paradigm”: they allow programming in different styles though some of them will be more convenient to use.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L-soOaYt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://typeable.io/images/fp_features1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L-soOaYt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://typeable.io/images/fp_features1.jpg" alt="I ♥ FP by https://impurepics.com/" width="550" height="344"&gt;&lt;/a&gt;&lt;br&gt;
I ♥ FP by &lt;a href="https://impurepics.com/"&gt;https://impurepics.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In our recent post, we spoke about the &lt;a href="https://dev.to/typeable/do-you-know-where-lisp-is-used-nowadays-4pbn"&gt;practical applications of Lisp&lt;/a&gt; and mentioned, without going into details, that it strongly influenced the development of other programming languages. Now it’s high time to explore this topic in more detail and figure out what contribution functional programming in general (not just Lisp!) has made to the development of other languages. Since we use Haskell as the main programming language, we couldn’t help touching upon this topic.&lt;/p&gt;

&lt;p&gt;In this post, we’re going to consider several mechanisms which either emerged in the functional programming languages or were most widely used and popularized by these languages, eventually turning up in originally non-functional languages.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#firstclass-functions"&gt;
  &lt;/a&gt;
  First-class functions
&lt;/h2&gt;

&lt;p&gt;The distinctive feature of FP style, in general, is the wide use of functions which become one of the main development tools. Let’s quickly look through the main definitions describing the differences between the functions and procedures and other similar constructs of non-functional languages.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--btxYpXSH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://typeable.io/images/fp_features2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--btxYpXSH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://typeable.io/images/fp_features2.jpg" alt="First-class functions are fancy" width="550" height="349"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Higher-order function&lt;/strong&gt; is the function that either takes another function as an argument or returns some function as the result. They are also called functionals. This behaviour can be implemented even in pure C using function pointers:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;update_user_balance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                         &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;update_fn&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
  &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;update_fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;First-class functions&lt;/strong&gt; are the ones which you can manipulate in the same way as any other values: pass as arguments, return as results, assign to variables and structure fields. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lambda function&lt;/strong&gt; is the anonymous function. Besides the absence of a name, support of lambda functions removes other language restrictions on function declarations (in some languages, i.e. in C99 standard, function declarations can occur only at the higher level). Support of lambda functions implies that the function can be declared in any location where other expressions are valid. Lambda functions are mostly used in higher-order functions; when used in combination, they provide convenience and significant shortening of the code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Example of a lambda function used to print out&lt;/span&gt;
&lt;span class="c1"&gt;// the contents of std::vector&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push_back&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push_back&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;for_each&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="sc"&gt;'\n'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Closure&lt;/strong&gt; is the function that can capture some variables from the context it was declared in, without letting the garbage collector erase the data which can be used in this function for as long as the application has the reference to the function itself. An example in TypeScript:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createClosures&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// The variable can be seen in the functions below&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;// The values of fields inc and print are closures&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;inc&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;print&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;counter value: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createClosures&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inc&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inc&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// &amp;gt;&amp;gt;&amp;gt; "counter value: 2"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#list-comprehension"&gt;
  &lt;/a&gt;
  List comprehension
&lt;/h2&gt;

&lt;p&gt;List comprehension allows writing down concisely the processing or generation of lists using existing ones. Miranda was one of the first languages to use such syntax which was adopted by Haskell; later on, similar constructs appeared in “less functional” languages such as Python, C#, Ruby.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a2RGCA8d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://typeable.io/images/fp_features3.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a2RGCA8d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://typeable.io/images/fp_features3.jpg" alt="Haskell is a leader in adopting new features" width="550" height="353"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As an example, let's consider the code in Python and Haskell that creates word combinations using adjectives and nouns. These two fragments look very much alike and only have minor syntactical differences, don’t they?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Example in Python
&lt;/span&gt;&lt;span class="n"&gt;nouns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"waterfall"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"moon"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"silence"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;adjectives&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"late"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"divine"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"blue"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;phrases&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;" "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;nouns&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;adjectives&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;# &amp;gt;&amp;gt;&amp;gt; ['late waterfall', 'divine waterfall',
#   'blue waterfall', 'late moon', 'divine moon',
#   'blue moon', 'late silence', 'divine silence',
#   'blue silence']
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="c1"&gt;-- The same in Haskell&lt;/span&gt;
&lt;span class="n"&gt;nouns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"waterfall"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"moon"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"silence"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;adjectives&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"late"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"divine"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"blue"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;phrases&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="s"&gt;" "&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;nouns&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;adjectives&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;-- &amp;gt;&amp;gt;&amp;gt; ['late waterfall', 'divine waterfall',&lt;/span&gt;
&lt;span class="c1"&gt;--  'blue waterfall', 'late moon', 'divine moon',&lt;/span&gt;
&lt;span class="c1"&gt;--  'blue moon', 'late silence', 'divine silence',&lt;/span&gt;
&lt;span class="c1"&gt;--  'blue silence']&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#algebraic-data-types"&gt;
  &lt;/a&gt;
  Algebraic data types
&lt;/h2&gt;

&lt;p&gt;These types can also be called ADTs, sum types, discriminatory unions, disjunctive unions, coproducts, and, probably, some other clever words. Maybe you have the idea of such types under different names but, in a few words, this is a compound type containing the discriminant field (which can be called a tag) together with the associated data. The following is the Haskell example of such compound type describing the user’s possible actions in a hypothetical application implementation &lt;a href="https://todomvc.com/"&gt;TodoMVC&lt;/a&gt;. Some actions involve the “payload” (a string or an element ID).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="kr"&gt;data&lt;/span&gt; &lt;span class="kt"&gt;UserAction&lt;/span&gt;
  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;TextInput&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;EnterPressed&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;EscPressed&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;CheckTodoItem&lt;/span&gt; &lt;span class="kt"&gt;ItemId&lt;/span&gt; &lt;span class="kt"&gt;Bool&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;EditTodoItem&lt;/span&gt; &lt;span class="kt"&gt;ItemId&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;DeleteTodoItem&lt;/span&gt; &lt;span class="kt"&gt;ItemId&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;ApplyFilter&lt;/span&gt; &lt;span class="kt"&gt;TodoFilter&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Despite its simplicity and usefulness for modelling domain objects, ADTs are rarely supported on a full scale in popular languages and databases. Here are some examples implementing similar types: &lt;a href="https://doc.rust-lang.org/rust-by-example/custom_types/enum.html"&gt;Enum in Rust&lt;/a&gt;, &lt;a href="https://kotlinlang.org/docs/sealed-classes.html"&gt;Sealed Classes in Kotlin&lt;/a&gt;, &lt;a href="https://en.cppreference.com/w/cpp/utility/variant"&gt;std::variant in C++&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pattern-matching"&gt;
  &lt;/a&gt;
  Pattern Matching
&lt;/h2&gt;

&lt;p&gt;Pattern Matching is a syntactic construct giving access to the data of the structure consisting of one or several alternatives with different sets of fields (the very ADT, algebraic type sum, enum, std::variant, etc. we discussed earlier). Pattern Matching resembles the switch-case operator you all know from imperative languages. However, its main advantage is that the compiler checks the access to alternative fields statically by using the information about the expression type, while the switch-case doesn’t prevent errors related to incorrect access to the fields, missing cases or redundant checks.&lt;/p&gt;

&lt;p&gt;Pattern Matching is another technique popularized in functional languages where it turned out to be useful. Now it is adopted and integrated – in various forms – in &lt;a href="https://www.python.org/dev/peps/pep-0634/"&gt;Python&lt;/a&gt;, Java, &lt;a href="https://docs.microsoft.com/en-us/dotnet/csharp/fundamentals/functional/pattern-matching"&gt;C#&lt;/a&gt;, Rust, and other popular languages.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="c1"&gt;-- Example of state update function in a hypothetical&lt;/span&gt;
&lt;span class="c1"&gt;-- TodoMVC written in the Elm architecture style.&lt;/span&gt;
&lt;span class="c1"&gt;-- Pattern Matching is used to analyze the&lt;/span&gt;
&lt;span class="c1"&gt;-- user-generated event.&lt;/span&gt;
&lt;span class="n"&gt;updateTodoList&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;UserAction&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;TodoState&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;TodoState&lt;/span&gt;
&lt;span class="n"&gt;updateTodoList&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="n"&gt;oldState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;case&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="kr"&gt;of&lt;/span&gt;
  &lt;span class="kt"&gt;TextInput&lt;/span&gt; &lt;span class="n"&gt;newTitle&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;oldState&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;newTitle&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kt"&gt;EnterPressed&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;appendNewItem&lt;/span&gt; &lt;span class="n"&gt;oldState&lt;/span&gt;
  &lt;span class="kt"&gt;EscPressed&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;stopEditing&lt;/span&gt; &lt;span class="n"&gt;oldState&lt;/span&gt;
  &lt;span class="kt"&gt;CheckTodoItem&lt;/span&gt; &lt;span class="n"&gt;itemId&lt;/span&gt; &lt;span class="n"&gt;itemChecked&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="n"&gt;updateItemById&lt;/span&gt; &lt;span class="n"&gt;itemId&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="n"&gt;checked&lt;/span&gt; &lt;span class="o"&gt;.~&lt;/span&gt; &lt;span class="n"&gt;itemChecked&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kt"&gt;EditTodoItem&lt;/span&gt; &lt;span class="n"&gt;itemId&lt;/span&gt; &lt;span class="n"&gt;itemTitle&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="n"&gt;updateItemById&lt;/span&gt; &lt;span class="n"&gt;itemId&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;.~&lt;/span&gt; &lt;span class="n"&gt;itemTitle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kt"&gt;DeleteTodoItem&lt;/span&gt; &lt;span class="n"&gt;itemId&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;deleteItembyId&lt;/span&gt; &lt;span class="n"&gt;itemId&lt;/span&gt; &lt;span class="n"&gt;oldState&lt;/span&gt;
  &lt;span class="kt"&gt;ApplyFilter&lt;/span&gt; &lt;span class="n"&gt;newFilter&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;oldState&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;newFilter&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#lazy-evaluations"&gt;
  &lt;/a&gt;
  Lazy evaluations
&lt;/h2&gt;

&lt;p&gt;In most programming languages evaluation is performed when the value is assigned to the variable; all arguments are evaluated before the function call (strict evaluations). The alternative approach is “lazy” implying that the evaluation is postponed until the value is actually used. Lazy evaluation allows working with infinite data structures, writing declarative code with definitions arranged in the order convenient for reading instead of the order of their evaluation. If you use the DSL approach, lazy evaluations will help you to easily implement such constructs as if-then-else (the values will be evaluated only in the branch you need).&lt;/p&gt;

&lt;p&gt;The history of the term can be traced back to lambda calculus, forming part of the theoretical basics of functional programming, so no wonder that it’s used in FP languages. For instance, in Haskell everything is evaluated lazily by default.&lt;/p&gt;

&lt;p&gt;Some elements of “laziness” can be found in other languages, even in pure C the operators &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; and &lt;code&gt;||&lt;/code&gt; are lazy as they don’t evaluate their second argument if the first one has been evaluated as 0 or 1, correspondingly. In higher-level languages the more common term is “deferred evaluations” which are implemented using generator functions and the “yield” keyword. Such generators can be found, for example, &lt;a href="https://wiki.python.org/moin/Generators"&gt;in Python&lt;/a&gt; or &lt;a href="https://www.codeproject.com/Articles/793374/Generators-with-Java"&gt;Java&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#continuations"&gt;
  &lt;/a&gt;
  Continuations
&lt;/h2&gt;

&lt;p&gt;Continuation is the “remaining evaluation”, i.e. the description of what is to be done with the result of expression for each subexpression in the program. An expression gets the continuation in the form of an additional argument and when the result is obtained, the current function calls the passed continuation with the evaluated value instead of returning the result directly. Such style of passing the result is called Continuation-Passing Style (CPS).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Direct style of passing the result &lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getFoo&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;Foo&lt;/span&gt; &lt;span class="p"&gt;{..}&lt;/span&gt;

&lt;span class="c1"&gt;// CPS style&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getFooCPS&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cont&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;А&lt;/span&gt; &lt;span class="p"&gt;{..}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;CPS is rarely found immediately in the software source code. Compilers are one of the main areas of its application – as the intermediate format before generating the machine code. Code conversion to CPS allows transforming recursive function calls to tail recursion that can be easily optimized to avoid stack growth during evaluations.&lt;/p&gt;

&lt;p&gt;Continuations are a very powerful tool that can be used to implement control structures such as early function exit, explicit call for tail recursion, imperative cycles, etc. For more details on the use of continuations see the example for the Scheme language &lt;a href="https://hillside.net/plop/plop2001/accepted_submissions/PLoP2001/dferguson0/PLoP2001_dferguson0_1.pdf"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#futures-and-promises"&gt;
  &lt;/a&gt;
  Futures and promises
&lt;/h2&gt;

&lt;p&gt;Futures, Promises, or Deferred,  are a construct containing the evaluation of asynchronous value. They emerged in functional programming as a tool used to simplify parallel evaluations and execute queries in distributed systems.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getJson&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resp&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

&lt;span class="c1"&gt;// Sending 2 serial queries&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getUserInfo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getJson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/current-user-id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;userId&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;getJson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`/user-info/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;userInfo&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="s2"&gt;`Hi &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;userInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, your id is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Promises were popularized mainly because of their adaptation and extensive use in the browser. JavaScript execution in the browser is limited by only one execution thread, so blocking while waiting for an HTTP response, as is the case with most platforms, would have led to the page hangup and annoy users. This is why callback functions are used to process responses to HTTP queries in the browser. At the same time, it’s not very convenient to combine such requests and the term “Callback Hell” came up to describe the code that has become illegible due to a large number of callbacks. Promises have allowed partially solving the issue of sending parallel queries and serial query chains:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Sending 3 parallel queries&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetchInParralel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
  &lt;span class="nx"&gt;getJson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/current-user-info&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="nx"&gt;getJson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/shopping-cart&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="nx"&gt;getJson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/recently-viewed-items&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(([&lt;/span&gt;&lt;span class="nx"&gt;userInfo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;viewedItems&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Display the page using the data sent from the server&lt;/span&gt;
    &lt;span class="c1"&gt;// ...&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In many popular languages (such as C#, Java, JavaScript), promises have become the main tool for asynchronous programming.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#monadic-interface"&gt;
  &lt;/a&gt;
  Monadic interface
&lt;/h2&gt;

&lt;p&gt;The names of many constructs and programming techniques in Haskell were borrowed from category theory and other branches of mathematics. One of such terms – the Monad – has become the object of many memes and jokes about functional programming. There are lots of posts on the Web explaining what “Monads” are in functional languages and how to use them.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GtE11ddc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://typeable.io/images/fp_features4.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GtE11ddc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://typeable.io/images/fp_features4.jpg" alt="Monads have become a local meme in FP world" width="750" height="500"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To put it simply, “monad” is just an interface with two methods that allow combining evaluations into a chain in the same way it’s done in the promise chain example. The promises themselves also illustrate the monadic interface implementation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Example of a monad used to generate pseudo-random values;&lt;/span&gt;
&lt;span class="c1"&gt;// parameter А is the type of generated value&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Random&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Creation of Random using a random valueе&lt;/span&gt;
  &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;Random&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{...}&lt;/span&gt;
  &lt;span class="c1"&gt;// Method used to implement the call chain&lt;/span&gt;
  &lt;span class="nx"&gt;chain&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;B&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;this&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Random&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;then&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Random&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;B&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nx"&gt;Random&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;B&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{...}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kr"&gt;declare&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;randomNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nx"&gt;Random&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kr"&gt;declare&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;randomString&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Random&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Example of using the monad chain&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;randomUser&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Random&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;randomString&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;chain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;userName&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;randomNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;chain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;userAge&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;userName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;userAge&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Among other applications of monads in purely functional languages, such as Haskell, is the side effect encapsulation. As it’s not possible to make a database query, read a file or even print a line in the standard output in these languages by calling ordinary functions, monads are used to perform these actions. At the same time, their application goes beyond side effects – the monadic interface is universal and allows writing generic, laconic, high-level code, which is why the monads are used everywhere in Haskell. Beyond Haskell, monads themselves are not so widely used, but their influence can be seen primarily in programming using promises and in the async-await construct, which we’ll talk about below. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#async"&gt;
  &lt;/a&gt;
  Async
&lt;/h2&gt;

&lt;p&gt;Getting back to the examples of code with promises, you can notice that despite all advantages of the promises, the call chain looks no better than callbacks. The async-await syntactic structure allows taking it a step further and improving the code with the promise chain, turning it into something much like the code with blocking calls.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getJson&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resp&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

&lt;span class="c1"&gt;// Sending 2 serial queries&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getUserInfo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getJson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/current-user-id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userInfo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getJson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`/user-info/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Hi &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;userInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, your id is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The emergence of async-await can be traced back to the researches devoted to functional programming in &lt;a href="https://softwareengineering.stackexchange.com/questions/377464/who-did-async-await-first/377514#377514"&gt;Haskell and ML&lt;/a&gt; which gave rise to the async workflows in F# (2007) and then C# (2011). &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h2&gt;

&lt;p&gt;Programming languages move on and develop actively, accumulating new, ever more advanced and convenient tools. As you can see, such popular languages as Python or С++ are acquiring a growing number of features, originating from functional programming. More recent languages, such as Scala or Kotlin, support functional tools from the very beginning.&lt;/p&gt;

&lt;p&gt;It turns out that functional programming is much closer than might appear at first sight even if you develop in C++ or Java!&lt;/p&gt;

&lt;p&gt;We’d be happy to learn about your experience with these or any other functional tricks in your day-to-day development. &lt;/p&gt;

</description>
      <category>functional</category>
      <category>programming</category>
    </item>
    <item>
      <title>The Principle of Least Effort</title>
      <author>Matthew Lucas</author>
      <pubDate>Mon, 15 Nov 2021 14:15:32 +0000</pubDate>
      <link>https://dev.to/notmattlucas/the-principle-of-least-effort-ki0</link>
      <guid>https://dev.to/notmattlucas/the-principle-of-least-effort-ki0</guid>
      <description>&lt;p&gt;Start with two restaurants. They’re identical in almost every way — the same kind of location, same style and quality of food, same ambiance, same everything —but there is one key difference. The website of restaurant A has a very simple booking page right there at the front — when you want to book it’s instant. The website of restaurant B is full of mouth-watering snapshots of the menu, but any contact details are buried deep within the site and even then it’s just a phone number.&lt;/p&gt;

&lt;p&gt;Customers are lazy (and hungry), they take the path of least resistance. For restaurant A, since it’s trivial to book, customers are knocking the door down. Sadly, restaurant B, isn’t quite as popular. Because there is a barrier to entry a lot of customers give up and go elsewhere.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-principle-of-least-effort"&gt;
  &lt;/a&gt;
  The principle of least effort
&lt;/h2&gt;

&lt;p&gt;The principle of least effort can be found in a lot of disciplines — evolutionary biology, economics, psychology, software design.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“… animals, people, and even well-designed machines will naturally choose the path of least resistance or “effort”.” — Wikipedia&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The idea was best documented by researchers in the information science field. Their assertion was that someone looking for information will use the most convenient source, not necessarily the best or most comprehensive one. A user will use the tools that they are most familiar with or are nearest to hand as long as the information they receive meets some minimal standard.&lt;/p&gt;

&lt;p&gt;If you have a question, you’re likely to consult a friend with limited knowledge of a subject rather than tracking down an expert (e.g. a mechanic, financial advisor, medical professional, etc). It’s quicker and much less effort, not to mention less expensive.&lt;/p&gt;

&lt;p&gt;This goes some way to explain the scourge of misinformation spread by social media. Facebook, Twitter, Instagram, (Medium?) are very palatable, easy to consume, nagging you to take a look, and are curated by algorithms to suit your very specific tastes. A newspaper takes more effort to consume (and certainly has it’s fair share of issues) but reading an informative book, or even conducting research, takes a lot more effort so we commonly fall into the trap of consuming from the most poisonous source. Information is readily available on Facebook but it’s often the wrong information, hence the epidemic of populism, anti-vaxxers and the like.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#simple-communication"&gt;
  &lt;/a&gt;
  Simple communication
&lt;/h2&gt;

&lt;p&gt;One form of The Principle of Least Effort was popularized by the linguist George Zipf. Without diving deep into the probability, Zipf’s law has implications on the way we communicate.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“… neither speakers nor hearers using a given language want to work any harder than necessary to reach understanding …” — Zipf&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Communication is effort, and we don’t want to use any more energy than necessary doing it. Unfortunately business writing in particular, tends to be over-complex and full of jargon. Rather than trying to impress with your power over the language, keep emails and documentation simple. Keep them short and to the point.&lt;/p&gt;

&lt;p&gt;Rather than presenting a problem — which can be taxing for the reader to understand — present a few solutions. It’s far easier to pick from a couple of simple options than to completely digest and unpick a problem from first principles.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#make-it-easy-to-do-the-right-thing"&gt;
  &lt;/a&gt;
  Make it easy to do the right thing
&lt;/h2&gt;

&lt;p&gt;Years ago I worked for an IT consultancy. Every week we had to fill in not one but three separate time-sheets, each for different departments! Guess how often everybody logged them all on time, if at all — never. It was a complete waste signing into three different applications to log the same information in triplicate.&lt;/p&gt;

&lt;p&gt;If something is difficult or time consuming, it won’t get done. If a shortcut is available, it’ll often get used as an alternative to an “official” process. This has implications for interface design, library design, security and more.&lt;/p&gt;

&lt;p&gt;A UI should lead its users to naturally perform the correct action. An API or library should be intuitive to use and should align closely with &lt;a href="https://notmattlucas.com/the-principle-of-least-astonishment-97fb95c0b57"&gt;The Principle of Least Astonishment&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Billion dollar businesses have even been built from this principle. In 2010, connecting to payment systems, such as PayPal, was frustrating and often involved tricky integrations. John and Patrick Collison founded Stripe with the aim of allowing software developers to plug-in with just a few lines of code. Developers flocked to Stripe because of the simplicity it provided, it became the path of least resistance. Stripe is now valued at 95 billion dollars!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#further-reading"&gt;
  &lt;/a&gt;
  Further reading
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Principle_of_least_effort"&gt;The Principle of Least Effort — Wikipedia&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.thoughtco.com/principle-of-least-effort-zipfs-law-1691104"&gt;Zipfs Law — Thoughtco&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://unearnedwisdom.com/the-principle-of-least-effort-week-46-of-wisdom/"&gt;The Principle of Least Effort Week 46 of Wisdom — Unearned Wisdom&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.crowdspring.com/marketing-psychology/law-of-least-effort/"&gt;The Law of Least Effort — Crowdspring&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://martinfowler.com/articles/microservices.html#MakeItEasyToDoTheRightThing"&gt;Microservices, make it easy to do the right thing — Martin Fowler&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.britannica.com/topic/Zipfs-law"&gt;Zipfs Law — Britannica&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.forbes.com/sites/tomtaulli/2019/09/20/startup-lessons-how-stripe-created-a-35-billion-giant/?sh=63536d335060"&gt;Startup Lessons: How Stripe Created A $35 Billion Giant&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#a-final-word"&gt;
  &lt;/a&gt;
  A final word
&lt;/h2&gt;

&lt;p&gt;This post was written as part of a series on laws of software development for #PragProWriMo 2021 run by the &lt;a href="https://medium.com/@pragprog"&gt;The Pragmatic Programmers&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>architecture</category>
      <category>psychology</category>
      <category>design</category>
    </item>
    <item>
      <title>Liman Sunucu Sertifikası Ekleme</title>
      <author>Duygu Ölmez</author>
      <pubDate>Mon, 15 Nov 2021 14:02:01 +0000</pubDate>
      <link>https://dev.to/liman/liman-sunucu-sertifikasi-ekleme-597n</link>
      <guid>https://dev.to/liman/liman-sunucu-sertifikasi-ekleme-597n</guid>
      <description>&lt;p&gt;Liman MYS üzerine Sunucu Sertifikaları eklemek için aşağıdaki adımları takip etmek gerekmektedir&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Yetkili bir hesap ile Liman MYS arayüzüne giriş yapılır &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WBtTJ3Ir--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o5jkgis8awhq4arig4d8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WBtTJ3Ir--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o5jkgis8awhq4arig4d8.png" alt="Image description" width="880" height="447"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Sistem Ayarları sayfasındaki &lt;code&gt;Sertifika Ekle&lt;/code&gt; sekmesi açılır. Eklenmek istenen SSL sertifikasının bulunduğu sunucu Ip ve port bilgisi doldurularak &lt;code&gt;Al&lt;/code&gt; butonuna basılır.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HPmvcYhY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bek875gbz5enhl0be6w4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HPmvcYhY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bek875gbz5enhl0be6w4.png" alt="Image description" width="880" height="459"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Seritifka bilgileri çekildikten sonra Sertifikayı Onayla butonuna basılır.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cpQZl2hD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/722nv0t0ejn7pa36v8c6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cpQZl2hD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/722nv0t0ejn7pa36v8c6.png" alt="Image description" width="880" height="278"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Crack CSS Interview</title>
      <author>cloudytech147</author>
      <pubDate>Mon, 15 Nov 2021 14:01:38 +0000</pubDate>
      <link>https://dev.to/cloudytech147/crack-css-interview-1jp6</link>
      <guid>https://dev.to/cloudytech147/crack-css-interview-1jp6</guid>
      <description>&lt;p&gt;CSS is one of the three mainstays of Front-End devices, and each web application and page utilizes it to shade and give a design to its skeleton HTML report. Each brilliant and very much planned page you see on the web is only a consequence of CSS code, eliminate CSS and you will get dark and unaligned text with white foundation.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1JsWkbpg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/00cone7brfblfvsxwoi7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1JsWkbpg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/00cone7brfblfvsxwoi7.png" alt="css iq" width="653" height="246"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;The interviewer may also ask about your experience with any of the CSS frameworks, so there you need to share your experience of working with CSS and one of its frameworks such as Bootstrap. While sharing your experience do not mention those tools on which you have never worked before.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.techgeekbuzz.com/css-interview-questions/"&gt;CSS interview questions&lt;/a&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;What is CSS?&lt;/li&gt;
&lt;li&gt;Give some advantages of CSS.&lt;/li&gt;
&lt;li&gt;What is the latest version of CSS?&lt;/li&gt;
&lt;li&gt;What is the file extension of CSS files?&lt;/li&gt;
&lt;li&gt;What are the different methods to integrate CSS on an HTML page?&lt;/li&gt;
&lt;li&gt;Why do we use the external method more than any other method?&lt;/li&gt;
&lt;li&gt;What is the Embedded style Sheet in CSS&lt;/li&gt;
&lt;li&gt;Give some Advantages of Embedded style sheets in CSS.&lt;/li&gt;
&lt;li&gt;What is the difference between an inline and an embedded style sheet?&lt;/li&gt;
&lt;li&gt;Give some limitations of CSS.&lt;/li&gt;
&lt;li&gt;Name Some frameworks of CSS&lt;/li&gt;
&lt;li&gt;What is the framework?&lt;/li&gt;
&lt;li&gt;What are the components we keep in mind when we use CSS to style HTML?&lt;/li&gt;
&lt;li&gt;What is a selector in CSS?&lt;/li&gt;
&lt;li&gt;What are the type and universal selectors?&lt;/li&gt;
&lt;li&gt;What is the Descendant selector in CSS?&lt;/li&gt;
&lt;li&gt;What are class selectors in CSS?&lt;/li&gt;
&lt;li&gt;What is a property in CSS?&lt;/li&gt;
&lt;li&gt;What is value in CSS?&lt;/li&gt;
&lt;li&gt;What is opacity in CSS?&lt;/li&gt;
&lt;li&gt;What % unit signifies in CSS value?&lt;/li&gt;
&lt;li&gt;What does cm mean in CSS value?&lt;/li&gt;
&lt;li&gt;Is CSS case sensitive?&lt;/li&gt;
&lt;li&gt;Name the format in which we can specify the colour in CSS&lt;/li&gt;
&lt;li&gt;What is a Declaration box in CSS?&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Generally, companies do not organize specific Jobs related to CSS or HTML, however, you can find jobs for JavaScript and its frameworks. CSS is a part of front-end development, and only in the front-end job interviews, you will find these questions.&lt;/p&gt;

</description>
      <category>css</category>
      <category>guide</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Liman Sunucusu DNS Değiştirme</title>
      <author>Duygu Ölmez</author>
      <pubDate>Mon, 15 Nov 2021 13:55:40 +0000</pubDate>
      <link>https://dev.to/liman/liman-sunucusu-dns-degistirme-4nbf</link>
      <guid>https://dev.to/liman/liman-sunucusu-dns-degistirme-4nbf</guid>
      <description>&lt;p&gt;Liman MYS Sunucusunun DNS'ini değiştirmek için aşağıdaki adımları takip etmek gerekmektedir.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Yetkili bir hesap ile Liman MYS arayüzüne giriş yapılır 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GS6G1num--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h9gryu36glvpme551jrn.png" alt="Image description" width="880" height="447"&gt;
&lt;/li&gt;
&lt;li&gt;Sistem Ayarları sayfasındaki &lt;code&gt;DNS Ayarları&lt;/code&gt; sekmesi açılır. 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6Cvf9wmD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ufu8xk9juhwzul01nghf.png" alt="Image description" width="880" height="458"&gt;
&lt;/li&gt;
&lt;li&gt;Dns ayarları girilerek Kaydet butonuna basılır.&lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
  </channel>
</rss>
