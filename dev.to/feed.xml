<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to stay productive as a developer</title>
      <author>Simon Holdorf</author>
      <pubDate>Mon, 11 Jan 2021 19:53:21 +0000</pubDate>
      <link>https://dev.to/simonholdorf/how-to-stay-productive-as-a-developer-2nc9</link>
      <guid>https://dev.to/simonholdorf/how-to-stay-productive-as-a-developer-2nc9</guid>
      <description>&lt;p&gt;I am a software developer that loves to code. I am also a person that likes to spend time with family and friends, go out for a run, take in a good movie and enjoy the great outdoors. Unfortunately, my work responsibilities make it difficult to do all of these things because:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I have deadlines&lt;/li&gt;
&lt;li&gt;I need to ensure the quality of my work&lt;/li&gt;
&lt;li&gt;I have multiple projects that require constant attention&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since I am not getting paid by the hour (except in some cases), staying productive and healthy as a developer is critical. Here are some things I've learned over the years that help me stay on top of things:&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#1-its-ok-to-say%C2%A0no" class="anchor"&gt;
  &lt;/a&gt;
  1. It's OK to say "no"
&lt;/h2&gt;

&lt;p&gt;I have a problem with saying "yes" too often, especially when the person asking is a co-worker or someone I know socially. If I'm not careful, it will affect my productivity. &lt;/p&gt;

&lt;p&gt;Sometimes it's more efficient to take on less work than it is to rush through everything and start falling behind on deadlines due to fatigue. I'm still learning how to say no but in the meantime, I have found that being upfront about my schedule and priorities helps everyone be better organized and effective, myself included.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#2-dont-forget-about%C2%A0yourself" class="anchor"&gt;
  &lt;/a&gt;
  2. Don't forget about yourself
&lt;/h2&gt;

&lt;p&gt;There are plenty of people out there who aren't afraid to make sacrifices for their families or careers but that doesn't mean you have to be one of them. Having good relationships with your family and friends is important. They help you make better decisions at work and can even protect you from burnout during stressful times. &lt;/p&gt;

&lt;p&gt;When you feel like you are in need of a break, take one. Whether it's lunchtime or the end of the day, just taking 15 minutes for yourself can do wonders for your productivity (and sanity) levels in the long run.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#3-consolidate-tasks" class="anchor"&gt;
  &lt;/a&gt;
  3. Consolidate tasks
&lt;/h2&gt;

&lt;p&gt;If you have multiple projects going at one time, try cutting down the number of tasks required on each project so they fit into an achievable timeframe with room for breaks and downtime between projects if necessary.&lt;br&gt;
 &lt;br&gt;
For example, if you are working on four different projects each requiring five hours per week and a full-time job, you may need to reduce them to three or two in order to make it all work.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#4-prioritize-tasks" class="anchor"&gt;
  &lt;/a&gt;
  4. Prioritize tasks
&lt;/h2&gt;

&lt;p&gt;When you have many different tasks on your schedule, prioritize them by importance and urgency, and put the most important ones first. Be realistic about how much time you can spend on each task without neglecting other responsibilities. &lt;/p&gt;

&lt;p&gt;If something is not a high priority but is taking away from something that is more important, see if there's a way to end or modify it for the good of your overall goals. This will keep things from getting out of control later on.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#5-make-use-of%C2%A0tools" class="anchor"&gt;
  &lt;/a&gt;
  5. Make use of tools
&lt;/h2&gt;

&lt;p&gt;There are many tools available online that provide great support for developers such as Google Docs/Drive (for collaboration), Slack (for communication), Buffer (for scheduling social media posts), Trello (for task management), and Github (to manage code revisions). &lt;/p&gt;

&lt;p&gt;These tools allow teams to stay connected without having constant meetings or phone calls all day long: Using these types of tools has actually made me more productive by reducing some of the distractions in my life instead of adding more distractions via email messages/texts/phone calls/meetings etc… &lt;/p&gt;

&lt;p&gt;The key is training others on how these systems work so they also understand why certain functions don't exist within those tools - for example, slack has no direct way to post status updates via Twitter so another tool is needed, for example, Zapier or IFTTT.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#6-learn-from%C2%A0mistakes" class="anchor"&gt;
  &lt;/a&gt;
  6. Learn from mistakes
&lt;/h2&gt;

&lt;p&gt;The best way to improve is to learn from your mistakes. If you find yourself working on something that's taking longer than expected, don't just say "well I'll get it done tomorrow," instead take the time to stop, reflect and think about where you went wrong. &lt;/p&gt;

&lt;p&gt;Maybe you didn't plan enough time for testing or maybe you didn't know what was required in the first place so took a "shot in the dark" approach. Either way, try not to repeat that mistake again and if possible, come up with some sort of documentation explaining exactly what needs to be done and how long it should take so others can pick up where you left off without needing a ton of hand-holding or supervision.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#7-find-a-good-worklife-balance" class="anchor"&gt;
  &lt;/a&gt;
  7. Find a good work/life balance
&lt;/h2&gt;

&lt;p&gt;If you are constantly working late nights and weekends, it's going to affect your personal relationships and your health. If you don't have any free time to do things you enjoy, then you will burn out sooner or later. &lt;/p&gt;

&lt;p&gt;I've been burned out before and in some cases, it was due to personal reasons I could not control (such as the death of a family member) but for the most part, it was from not listening to my body's warning signs when I was overworked. &lt;/p&gt;

&lt;p&gt;To avoid this, make sure you get enough sleep (7 hours is recommended), eat healthy food, exercise regularly, and take breaks during the workday even if others don't seem to notice or care that you're gone - they just may appreciate it more than they realize!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#8-make-time-for-fun-activities" class="anchor"&gt;
  &lt;/a&gt;
  8. Make time for fun activities
&lt;/h2&gt;

&lt;p&gt;During hackathons or marathons where we work around the clock on a project for 24+ hours straight, drinking energy drinks and having snacks delivered can help keep us going but sometimes the best thing for productivity is taking a break! &lt;/p&gt;

&lt;p&gt;Taking 15–30 minutes here or there throughout the day for yourself can boost your overall morale which helps in other areas of life such as work, school, and home, etc… It also helps to deal with bad news better if something goes wrong during the day because at least I know there is some downtime coming up in my schedule that will allow me to recover mentally so I'm not carrying those feelings into future tasks.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#9-learn-how-to-say%C2%A0no" class="anchor"&gt;
  &lt;/a&gt;
  9. Learn how to say "no"
&lt;/h2&gt;

&lt;p&gt;This one goes hand-in-hand with #1 above. Saying "yes" too much can lead to burnout just as easily as saying "no" too often. &lt;/p&gt;

&lt;p&gt;Try cutting down what is asked of you by doing more research on what needs to be done before accepting any new responsibilities. This way if it turns out you cannot complete all requests in a timely manner then others won't be waiting around while you try and figure everything out at once. Be upfront about your workload so co-workers/clients understand what's going on instead of simply giving an excuse such as "I'll get it done tomorrow."&lt;/p&gt;

&lt;p&gt;In many cases, people will be respectful if you explain clearly why something isn't possible without going into details unless they ask for more detail first.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#final-thoughts" class="anchor"&gt;
  &lt;/a&gt;
  Final Thoughts
&lt;/h2&gt;

&lt;p&gt;While it may not be possible to avoid burnout 100% of the time, it's important to recognize when you're starting to feel overwhelmed and take steps to mitigate the situation as soon as possible.&lt;/p&gt;

&lt;p&gt;If you don't, you could end up taking your work home with you, or worse yet, quitting your job altogether.  By knowing the warning signs and how to prevent burnout before it happens, you'll be able to utilize your energy more effectively and enjoy your work more than ever before. &lt;/p&gt;

&lt;p&gt;If there are particular danger signs for burnout that I missed please share them in the comments so we can all learn from each other!&lt;/p&gt;

&lt;p&gt;I've recently created a new platform "The Smart Coder" where we want to create a cool place for developers to hang out, explore new content, find books, courses jobs, and more. We also have talented writers discussing things such as &lt;a href="https://thesmartcoder.dev/java-vs-javascript/"&gt;Java vs. JavaScript&lt;/a&gt; or helping you find &lt;a href="https://thesmartcoder.dev/9-awesome-projects-you-can-build-with-vanilla-javascript/"&gt;javascript projects&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you like what I write and want to support me and my work, please follow me on &lt;a href="https://twitter.com/simonholdorf"&gt;Twitter&lt;/a&gt; to learn more about programming, making, writing &amp;amp; careers🥰&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>productivity</category>
      <category>beginners</category>
    </item>
    <item>
      <title>7 Technologies I'm Excited about in 2021</title>
      <author>Ali Spittel</author>
      <pubDate>Mon, 11 Jan 2021 16:18:17 +0000</pubDate>
      <link>https://dev.to/ladybug/7-technologies-i-m-excited-about-in-2021-1ljb</link>
      <guid>https://dev.to/ladybug/7-technologies-i-m-excited-about-in-2021-1ljb</guid>
      <description>&lt;p&gt;It's a new year, and that presents an opportunity to refocus on learning. In this post, I want to discuss some of the technologies I'm excited about and will be investing my learning time in this year.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#metaframeworks" class="anchor"&gt;
  &lt;/a&gt;
  Meta-frameworks
&lt;/h2&gt;

&lt;p&gt;It seems like one layer of framework is no longer enough! Next.js and the N**t family of frameworks (including Nuxt and Nest) provides such an amazing developer experience. Remix also has some hype behind it. Gatsby has also been a force in the industry over the past few years. I love working with these meta-frameworks and really think they will become even bigger over the next few years.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#low-code" class="anchor"&gt;
  &lt;/a&gt;
  Low Code
&lt;/h2&gt;

&lt;p&gt;Code is great, but the less code we can write to create useful products the better. Code is expensive, both to create and maintain. I'm so excited about the growing low-code trend that will allow quicker and easier application development. I spent the last few months of 2020 working on the &lt;a href="https://docs.amplify.aws/console/adminui/intro"&gt;Amplify Admin UI&lt;/a&gt;, which allows users to write a basic backend in clicks and then extend it with code. Tools like this, and frontend toolkits, will significantly lower the difficulty of building scalable and maintainable applications.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#serverside-rendering" class="anchor"&gt;
  &lt;/a&gt;
  Server-side Rendering
&lt;/h2&gt;

&lt;p&gt;Right before the holidays, the React core team released initial research on &lt;a href="https://reactjs.org/blog/2020/12/21/data-fetching-with-react-server-components.html"&gt;React Server Components&lt;/a&gt;, which follows a larger trend that many of the aforementioned meta-frameworks follow -- server-side rendering. This isn't a new trend at all -- I started programming during the use Rails for everything era where nearly every framework used a templating language to plug variables into HTML. But, extending SSR to allow developers to use modern tooling is big and has huge performance implications for the web.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-cloud" class="anchor"&gt;
  &lt;/a&gt;
  The Cloud
&lt;/h2&gt;

&lt;p&gt;This one has been around for a while, but it's something I'm just learning more about now. I remember manually deploying my apps on servers early in my career -- it was a lot of work and didn't scale at all. I'm just dipping my toes in the water with Cloud computing and learning about AWS outside of Amplify, but it's really interesting and a valuable skill to have. I want to dive a lot deeper here this year.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#machine-learningartificial-intelligence" class="anchor"&gt;
  &lt;/a&gt;
  Machine Learning/Artificial Intelligence
&lt;/h2&gt;

&lt;p&gt;A few years ago, I was seriously considering getting my master's degree in AI/ML -- I love both statistics and programming. My career went in a different direction, but I still really want to learn more in these areas. They seem to be the basis of so many new forefronts in the industry, and it seems like that will be true for a long time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#new-frameworks" class="anchor"&gt;
  &lt;/a&gt;
  New Frameworks
&lt;/h2&gt;

&lt;p&gt;There are always new frameworks on the horizon, both on the front and backend. I am at a point in my career where I'm less interested in learning everything that comes out, and I'm pretty comfortable with my ability to learn new frameworks when they come out. That being said, I'm excited about the newer performance-focused family of frontend frameworks. Svelte seems to be here to stay -- I'd prefer a framework that's heavier on functional programming tenets, but I think it's time to spend sometime really diving into it. It's also cool to see &lt;a href="https://dev.to/aspittel/functional-programming-in-javascript-done-right-with-hyperapp-570f"&gt;Hyperapp&lt;/a&gt; still growing -- I love using it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#decentralization-of-tech-workers" class="anchor"&gt;
  &lt;/a&gt;
  Decentralization of Tech Workers
&lt;/h2&gt;

&lt;p&gt;This is a very different trend than the others on the list, but 2020 necessitated a big shift to remote work. I personally would love to return to working in an office someday, but I think that the movement to allow more remote work is an overall positive. Tooling and solutions will get better, and tech workers will be able to move outside of the typical "tech cities."&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;For this week's Ladybug podcast, we talked about the 21 trends in web development we are most excited about this year. Give it a listen, we'd love to hear what you're most excited about via &lt;a href="https://twitter.com/ladybugpodcast"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/6Ib198t7imMwu59FxNfpgX"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
    </item>
    <item>
      <title>How I Built and Launched A Small Web App in 17 Hours</title>
      <author>Stephanie Eckles</author>
      <pubDate>Mon, 11 Jan 2021 14:31:34 +0000</pubDate>
      <link>https://dev.to/5t3ph/how-i-built-and-launched-a-small-web-app-in-17-hours-1cc0</link>
      <guid>https://dev.to/5t3ph/how-i-built-and-launched-a-small-web-app-in-17-hours-1cc0</guid>
      <description>&lt;p&gt;In this reflection post, I'd like to go over the tech stack used, reveal a few tricks, and provide some techniques for how to rapidly go from idea to launch for small projects.&lt;/p&gt;

&lt;p&gt;On January 1, 2021, &lt;a href="https://dev.to/5t3ph/generate-accessible-button-colors-with-buttonbuddy-41mg"&gt;I launched ButtonBuddy&lt;/a&gt; which is a small utility web app that allows you to:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Learn what it takes to ensure your buttons or button-styled links have accessible contrast across all states and surfaces, then use the generator to check and adjust your button palette.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Note: the 17 hours was not consecutive - I work full-time and am a Mom 😅 and I'm definitely not advocating for hustle culture. I use WakaTime which tracked the time spent&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tech-stack" class="anchor"&gt;
  &lt;/a&gt;
  Tech Stack
&lt;/h2&gt;

&lt;p&gt;Take a minute to visit &lt;a href="https://buttonbuddy.dev"&gt;ButtonBuddy.dev&lt;/a&gt; and do a classic "View source".&lt;/p&gt;

&lt;p&gt;...Surprised you can see all of it?&lt;/p&gt;

&lt;p&gt;That's right - this app isn't React, or even Angular or Vue. It's sweet, delicious HTML, CSS, and a bit of vanilla JS just for the generator bits. And check out that load time!&lt;/p&gt;

&lt;p&gt;ButtonBuddy was built using &lt;a href="https://11ty.dev"&gt;the static site generator Eleventy (11ty)&lt;/a&gt;, with &lt;a href="https://parceljs.org/"&gt;Parcel&lt;/a&gt; added in to assist with bundling the JS and allowing the use of ES6 features.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you're not yet familiar with Eleventy, I have many resources available on &lt;a href="https://11ty.rocks"&gt;11ty.Rocks&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The ease of use and customization abilities of Eleventy are what enabled going from idea to launch so quickly on this project (in addition to a narrow scope).&lt;/p&gt;

&lt;p&gt;Let's go over a few key features of Eleventy:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Zero-config by default and ButtonBuddy required only a minimum of &lt;a href="https://github.com/5t3ph/buttonbuddy/blob/main/.eleventy.js"&gt;config changes&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;100% static output by default, meaning the initial structural build was done using the fundamental web languages of HTML and CSS.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.11ty.dev/docs/languages/"&gt;10 templating languages&lt;/a&gt; to choose from - ButtonBuddy leveraged Markdown, Nunjucks, and HTML&lt;/li&gt;
&lt;li&gt;Ability to mix templating languages, used by ButtonBuddy to be able to write the content in Markdown and output it in a Nunjucks template.&lt;/li&gt;
&lt;li&gt;Built on Node, making it easy to include Node packages and additional JavaScript as part of the built process, which was critical to producing the generator functionality.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As mentioned, I did need to extend the base Eleventy functionality by adding in Parcel. Credit for the setup steps here goes to Michelle Barker for her &lt;a href="https://github.com/mbarker84/eleventy-parcel"&gt;eleventy-parcel&lt;/a&gt; starter.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tips-for-efficiently-building-a-small-web-app" class="anchor"&gt;
  &lt;/a&gt;
  Tips For Efficiently Building A Small Web App
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;: Choose a stack you know, and create the semantic HTML first based on your top features. Then create and test for minimum functionality, and finally refine content and styles. Be OK with leaving room to grow and improve!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You will without a doubt always build something faster when you're more familiar with the tech stack you choose.&lt;/p&gt;

&lt;p&gt;That said - the closer to "zero-config" your environment, the faster you can go from idea to progress toward your goal. A static-first environment like Eleventy can also speed up your structural development by skipping the decisions around state, components, props, etc if that type of architecture isn't &lt;em&gt;really&lt;/em&gt; needed to accomplish your goals.&lt;/p&gt;

&lt;p&gt;For ButtonBuddy, I created a hit list of features. Then from that, I built a starting point for my information hierarchy using semantic, accessible HTML and Nunjucks partials. I didn't get too caught up in styling just yet, and left a few things placeholder.&lt;/p&gt;

&lt;p&gt;Next, I did some research and selected a package to help with a key feature of this particular app, which was determining the contrast ratio between two colors. Open-source packages and starters can of course aid in efficiency as well, but the research is an important part of this step. A little extra time for research may save starting down one path and having to re-do it with a different solution.&lt;/p&gt;

&lt;p&gt;The tip here is to do &lt;em&gt;just enough&lt;/em&gt; to find out if it's a go or no-go for any add-in packages you select. That is, build the minimum viable part of the functionality and any corresponding UI you need, and resist the urge to refine at this stage.&lt;/p&gt;

&lt;p&gt;When building ButtonBuddy, this meant stubbing out a single color control to ensure that the package correctly checked the value against a hardcoded color value in my JS to provide back a contrast ratio. I then checked the ratio against a secondary tool for accuracy, and when it had an equal result, I continued on.&lt;/p&gt;

&lt;p&gt;If you really are under a deadline - self-imposed or otherwise - consider what features will be the greatest impact for your time and the project goals.&lt;/p&gt;

&lt;p&gt;For ButtonBuddy, it was important to provide enough features to be useful as both an educational tool and giving the user actionable feedback and results. And the functionality had to work together with the interface to be clear and usable, and in and of itself be accessible, including for mobile users.&lt;/p&gt;

&lt;p&gt;I've mentioned it several times already, but semantic HTML was key to the efficiency of this build (and should always be a priority). &lt;/p&gt;

&lt;p&gt;Having Nunjucks templating available was also useful. I divided up the parts of the app into partials so that I could include them individually to focus on the generator vs the content, for example.&lt;/p&gt;

&lt;p&gt;For the styling, you'll also see no traces of a CSS framework for ButtonBuddy. While a framework isn't a &lt;em&gt;wrong&lt;/em&gt; choice, it's also possible to quickly build up styles when you leverage repeatable patterns. This again is where having templating available and using semantic HTML was key.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Need a little help upgrading your CSS skills? Check out my &lt;a href="https://moderncss.dev"&gt;Modern CSS&lt;/a&gt; series to discover modern solutions to old CSS problems. You may also enjoy my 20 minute video course on &lt;a href="https://5t3ph.dev/grid-flexbox-lp"&gt;building a landing page with flexbox and grid&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Once the functionality was stubbed out, I completed writing the content and added a small navigation. Then I refined the branding styles, and honed the generator layout. The goal here was "good enough" for launch so that I could start gathering feedback, while leaving myself grace to continue tweaking or address any issues or bugs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#minimum-launch-checklist" class="anchor"&gt;
  &lt;/a&gt;
  Minimum Launch Checklist
&lt;/h2&gt;

&lt;p&gt;Once the app works and you're happy with the look and feel, there's still a few steps to ensure it's launch-ready, even for an MVP:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Complete &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; tags&lt;/strong&gt; including a meaningful &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; description.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Add social tags&lt;/strong&gt; as well, particularly Twitter and Open Graph tags inclusive &lt;em&gt;absolute URLS&lt;/em&gt; to preview images. You can review &lt;a href="https://github.com/5t3ph/buttonbuddy/blob/main/src/_includes/base.njk#L19,L26"&gt;the social tags in use for ButtonBuddy&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Test&lt;/strong&gt; across the top browsers and on a real mobile device - you may find an issue not present when using dev tools simulators.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Check in Lighthouse&lt;/strong&gt; to catch any low-hanging items related to performance or accessibility. You can do this &lt;a href="https://web.dev/measure/?gclid=Cj0KCQiA6Or_BRC_ARIsAPzuer8Mil21teCu7Mo5aj772jBseI4zC0T7uMJKkcRbODZ-OPHWb-sWajIaAnq1EALw_wcB"&gt;online&lt;/a&gt; or with browser extensions.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Double-check accessibility&lt;/strong&gt; using browser tools like aXe and WAVE (note that automated testing will not catch all issues).&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.producthunt.com/posts/buttonbuddy"&gt;ButtonBuddy is on ProductHunt&lt;/a&gt;&lt;/strong&gt; and your upvotes are appreciated! I'd love your feedback on ButtonBuddy, and this process 😊&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>webdev</category>
      <category>showdev</category>
      <category>css</category>
      <category>eleventy</category>
    </item>
    <item>
      <title>JavaScript Is Everywhere</title>
      <author>Kai</author>
      <pubDate>Mon, 11 Jan 2021 14:16:01 +0000</pubDate>
      <link>https://dev.to/kais_blog/javascript-is-everywhere-5fo0</link>
      <guid>https://dev.to/kais_blog/javascript-is-everywhere-5fo0</guid>
      <description>&lt;p&gt;&lt;em&gt;This post was originally published at &lt;a href="https://kais.blog/p/javascript-is-everywhere"&gt;kais.blog&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let's move your learning forward together!&lt;/strong&gt; &lt;a href="https://twitter.com/intent/follow?screen_name=kais_blog"&gt;Follow me on Twitter&lt;/a&gt; for your daily dose of developer tips. Thanks for reading my content!&lt;/p&gt;




&lt;p&gt;One of the major reasons &lt;a href="https://dev.to/kais_blog/7-reasons-why-you-should-learn-javascript-in-2021-7lg"&gt;why you should learn JavaScript in 2021&lt;/a&gt; is its omnipresence. You can find JavaScript everywhere. Conversly, this means that learning JavaScript is a valuable skill regardless of what you want to develop.&lt;/p&gt;

&lt;p&gt;With JavaScript, you can…&lt;/p&gt;

&lt;p&gt;🌐 …create websites / web apps and browser extensions. &lt;strong&gt;Check!&lt;/strong&gt;&lt;br&gt;
🖥️ …create desktop apps. &lt;strong&gt;Check!&lt;/strong&gt;&lt;br&gt;
📱 …create mobile apps. &lt;strong&gt;Check!&lt;/strong&gt;&lt;br&gt;
🎮 …create games. &lt;strong&gt;Check!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This leaves nothing to be desired. In this post I'll show you awesome JavaScript frameworks, libraries and tools for the different use-cases. The only limit is your imagination. Also, you'll find examples of possible applications. So, if you wonder whether JavaScript is &lt;em&gt;good enough&lt;/em&gt; - take a look at the examples.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#frontend-development" class="anchor"&gt;
  &lt;/a&gt;
  🌐 Frontend Development
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#frameworks-libraries" class="anchor"&gt;
  &lt;/a&gt;
  Frameworks / Libraries
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://angular.io/"&gt;Angular&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://aurelia.io/"&gt;Aurelia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.gatsbyjs.com/"&gt;Gatsby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nextjs.org/"&gt;Next.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="https://svelte.dev/"&gt;Svelte&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://vuejs.org/"&gt;Vue.js&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gridsome.org/"&gt;Gridsome&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nuxtjs.org/"&gt;Nuxt.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#examples" class="anchor"&gt;
  &lt;/a&gt;
  Examples
&lt;/h3&gt;

&lt;p&gt;Virtually every website uses JavaScript. I think that should give enough examples of the possible applications. Also, these frontend frameworks and libraries are used for the interfaces in desktop / mobile apps and games as well.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#backend-development" class="anchor"&gt;
  &lt;/a&gt;
  🌐 Backend Development
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#runtimes" class="anchor"&gt;
  &lt;/a&gt;
  Runtimes
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://nodejs.org/en/"&gt;Node.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://deno.land/"&gt;Deno&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#frameworks-libraries" class="anchor"&gt;
  &lt;/a&gt;
  Frameworks / Libraries
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://expressjs.com/"&gt;Express&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.fastify.io/"&gt;Fastify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hapi.dev/"&gt;hapi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://koajs.com/"&gt;Koa&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nestjs.com/"&gt;NestJS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#examples" class="anchor"&gt;
  &lt;/a&gt;
  Examples
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.netflix.com/"&gt;Netflix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.paypal.com/"&gt;PayPal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://trello.com/"&gt;Trello&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#desktop-development" class="anchor"&gt;
  &lt;/a&gt;
  🖥️ Desktop Development
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#frameworks-libraries" class="anchor"&gt;
  &lt;/a&gt;
  Frameworks / Libraries
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://appjs.com/"&gt;AppJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.electronjs.org/"&gt;Electron&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.nodegui.org/"&gt;NodeGui&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nwjs.io/"&gt;NW.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://proton-native.js.org/#/"&gt;Proton Native&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#examples" class="anchor"&gt;
  &lt;/a&gt;
  Examples
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://discord.com/"&gt;Discord&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.postman.com/"&gt;Postman&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://slack.com/"&gt;Slack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#mobile-development" class="anchor"&gt;
  &lt;/a&gt;
  📱 Mobile Development
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#frameworks-libraries" class="anchor"&gt;
  &lt;/a&gt;
  Frameworks / Libraries
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cordova.apache.org/"&gt;Cordova&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ionicframework.com/"&gt;Ionic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.nativescript.org/"&gt;NativeScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://facebook.github.io/react-native/"&gt;React Native&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://weex.apache.org/"&gt;Weex&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#examples" class="anchor"&gt;
  &lt;/a&gt;
  Examples
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://play.google.com/store/apps/details?id=com.instagram.android"&gt;Instagram&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://play.google.com/store/apps/details?id=com.pinterest"&gt;Pinterest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://play.google.com/store/apps/details?id=com.wix.android"&gt;Wix&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#game-development" class="anchor"&gt;
  &lt;/a&gt;
  🎮 Game Development
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#frameworks-libraries" class="anchor"&gt;
  &lt;/a&gt;
  Frameworks / Libraries
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.babylonjs.com/"&gt;Bablyon.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://colyseus.io/"&gt;Colyseus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gdevelop-app.com/"&gt;GDevelop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://phaser.io/"&gt;Phaser&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.pixijs.com/"&gt;PixiJS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#examples" class="anchor"&gt;
  &lt;/a&gt;
  Examples
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://store.steampowered.com/app/384630/Aviary_Attorney/"&gt;Aviary Attorney&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://store.steampowered.com/app/1040230/Curious_Expedition_2/"&gt;Curious Expedition 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://slither.io/"&gt;slither.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;There you have it. If anyone ever tells you again, that JavaScript can't be used here or there - think twice. They might be right, but that's almost never true. Some applications require something else than JavaScript. Though, for your typical use-case (like Netflix or PayPal, lol), JavaScript is &lt;em&gt;good enough&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;However, let me add that even these big companies probably have a more diverse tech stack. JavaScript is a puzzle piece that let's you move fast and focus on the bigger picture. If you need something else, you probably know it and choose accordingly.&lt;/p&gt;

&lt;p&gt;Have you tried creating something with JavaScript yet? Share your experience with us in the comments below.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Let's move your learning forward together!&lt;/strong&gt; &lt;a href="https://twitter.com/intent/follow?screen_name=kais_blog"&gt;Follow me on Twitter&lt;/a&gt; for your daily dose of developer tips. Thanks for reading my content!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This post was originally published at &lt;a href="https://kais.blog/p/javascript-is-everywhere"&gt;kais.blog&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>The next generation of programming is closer than you think</title>
      <author>Steve Sewell</author>
      <pubDate>Mon, 11 Jan 2021 14:12:27 +0000</pubDate>
      <link>https://dev.to/steve8708/the-next-generation-of-programming-is-closer-than-you-think-22</link>
      <guid>https://dev.to/steve8708/the-next-generation-of-programming-is-closer-than-you-think-22</guid>
      <description>&lt;p&gt;When we think about the next generation of programming, it can be helpful to look back at how the personal computer has evolved.&lt;/p&gt;

&lt;p&gt;To see what I mean, let's take a quick trip back to the 70s.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-origin-of-personal-computers" class="anchor"&gt;
  &lt;/a&gt;
  The origin of personal computers
&lt;/h2&gt;

&lt;p&gt;1975 was a revolutionary year for personal computing. The &lt;a href="https://en.wikipedia.org/wiki/Altair_8800"&gt;Altair 8800&lt;/a&gt; was released, the first commercially successful personal computer. This was shortly followed by &lt;a href="https://en.wikipedia.org/wiki/Altair_BASIC"&gt;Altair Basic&lt;/a&gt; - the first programming language for the machine, developed by Bill Gates and Paul Allen.&lt;/p&gt;

&lt;p&gt;These, combined with a &lt;a href="https://en.wikipedia.org/wiki/Teleprinter"&gt;teletype&lt;/a&gt;, produced an early &lt;a href="https://en.wikipedia.org/wiki/Computer_terminal"&gt;computer terminal&lt;/a&gt;. It functioned much like a modern terminal developers use today, but it was a &lt;em&gt;hardcopy&lt;/em&gt; terminal. The video below demonstrates using Altair Basic on an Altair 8800 with a teletype. You type into a typewriter, hit enter, and the computer processes the input and types a response&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sPzEYsBQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://imgur.com/DdlmXAM.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sPzEYsBQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://imgur.com/DdlmXAM.gif" alt="Altair 8800 with a teletype"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Typing Altair Basic on an Altair 8800 with a teletype - what I like to call the "ghost typewriter" computer.&lt;/em&gt; &lt;a href="https://www.youtube.com/watch?v=qv5b1Xowxdk"&gt;&lt;em&gt;Credit&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#adding-a-screen" class="anchor"&gt;
  &lt;/a&gt;
  Adding a screen
&lt;/h2&gt;

&lt;p&gt;The &lt;a href="https://en.wikipedia.org/wiki/Apple_II"&gt;Apple II&lt;/a&gt; was released in 1977, another landmark in personal computing. It was a key part of a new wave of introducing whole new visual concepts to computing using a graphical display.&lt;/p&gt;

&lt;p&gt;The same year, the original digital spreadsheet, &lt;a href="https://en.wikipedia.org/wiki/VisiCalc"&gt;VisiCalc&lt;/a&gt;, was released for the Apple II. This program alone was considered by Steve Jobs to have "propelled the Apple II to the success that it achieved" (&lt;a href="https://www.youtube.com/watch?v=IU96Pd_npn4"&gt;source&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NegHd6_v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://imgur.com/vvihyhv.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NegHd6_v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://imgur.com/vvihyhv.gif" alt="VisiCalc on an Apple II"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;VisiCalc on the Apple II.&lt;/em&gt; &lt;a href="https://www.youtube.com/watch?v=LAizT9W1CiM"&gt;&lt;em&gt;Credit&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#enter-the-gui" class="anchor"&gt;
  &lt;/a&gt;
  Enter the GUI
&lt;/h2&gt;

&lt;p&gt;The original GUI (Graphical User Interface) was first developed by Xerox in 1973. The &lt;a href="https://en.wikipedia.org/wiki/Xerox_Alto"&gt;Xerox Alto&lt;/a&gt; was the first computer to use a GUI, the desktop metaphor, and the mouse. The Alto was a major influence for both Windows OS and the the original Apple Macintosh, released in 1983 and 1984, respectively.&lt;/p&gt;

&lt;p&gt;Not only did this pave the way for making computers drastically more intuitive and approachable to everyone, it brought us this incredible ad:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/4CluZnmb_3I"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#programming-with-text" class="anchor"&gt;
  &lt;/a&gt;
  Programming with text
&lt;/h2&gt;

&lt;p&gt;Fast forward to today: we interact with computers constantly, essentially forgetting there was ever a day when the GUI did not exist. Can you imagine using an iPhone without being able to navigate and interact with apps by tapping and using gestures, and instead you had to type in commands?&lt;/p&gt;

&lt;p&gt;Oddly enough, when it comes to programming for computers, that is where we still are. We aren't that much farther from the original Altair 8800 and teletype. We type commands into a console, and type structured text-based instructions to a compiler/interpreter.&lt;/p&gt;

&lt;p&gt;Some might argue this is surprisingly elegant - and it is in certain ways. But at the same time - it's &lt;strong&gt;2021&lt;/strong&gt; and we are still using text editors and terminals to code. Shouldn't we have figured out a better way by now?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eebHfq8L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://imgur.com/3clxyxs.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eebHfq8L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://imgur.com/3clxyxs.gif" alt="Typing text based code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-benefits-of-visualization" class="anchor"&gt;
  &lt;/a&gt;
  The benefits of visualization
&lt;/h2&gt;

&lt;p&gt;The benefits of visual computing are obvious. It is approachable, efficient, and elegant - yet still very powerful.&lt;/p&gt;

&lt;p&gt;The beauty of using a GUI is that every use case can have its own purpose-built experience. Unlike a programming language that has one simple construct (it's syntax and grammar) to accomplish all tasks, a UI can provide a unique experience optimized for each type of task.&lt;/p&gt;

&lt;p&gt;Everything from querying data to analyzing it, there are better tools than text:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RToBfj6k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.builder.io/api/v1/image/assets%252FYJIGb4i01jvw0SRdL5Bt%252Fcf41796116bb4bfb89b39716c8df81cb" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RToBfj6k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.builder.io/api/v1/image/assets%252FYJIGb4i01jvw0SRdL5Bt%252Fcf41796116bb4bfb89b39716c8df81cb" alt="Visual querying with Amplitude"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Same goes for creating UIs:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jZSB75Is--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.builder.io/api/v1/image/assets%252FYJIGb4i01jvw0SRdL5Bt%252F84f43fb8ab61406f95c259fa6d9bc075" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jZSB75Is--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.builder.io/api/v1/image/assets%252FYJIGb4i01jvw0SRdL5Bt%252F84f43fb8ab61406f95c259fa6d9bc075" alt="Visual UI building with Builder.io"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-challenges-of-visualization" class="anchor"&gt;
  &lt;/a&gt;
  The challenges of visualization
&lt;/h2&gt;

&lt;p&gt;So, why are we still writing programs as text like we did 50 years ago? Some have even called this the "&lt;a href="https://alarmingdevelopment.org/?p=1475"&gt;great stagnation&lt;/a&gt;"&lt;/p&gt;

&lt;p&gt;The challenge of visual programming lies in its benefits - there is no &lt;em&gt;one&lt;/em&gt; way to do everything. So as a result, we still lean on text-based coding, as its simple yet flexible constructs leave no gaps unfulfilled. In a way this leads text-based coding to being a jack of all trades, and master of none.&lt;/p&gt;

&lt;p&gt;To take things back to our examples from the 70s and 80s, a metaphor for the majority of current no-code tooling is an arcade game. Arcade games were single purpose. They had all the things that &lt;em&gt;seemed&lt;/em&gt; magical about the revolutionary Macintosh - they had a visual display, they were intuitive for even children to use, etc. Much like the current generation of no-code tools.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--whaV5_cm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://imgur.com/b01pRGI.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--whaV5_cm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://imgur.com/b01pRGI.gif" alt="Pong arcade game"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But they lacked one key ingredient - they were not general purpose. Don't get me wrong, single purpose computing has its benefit, but a revolution in software development doesn't come from such technology, it comes from generalizability. Aka building something that is intuitive and powerful and is unbounded in what you can create with it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-we-solve-this" class="anchor"&gt;
  &lt;/a&gt;
  How do we solve this?
&lt;/h2&gt;

&lt;p&gt;New &lt;a href="https://en.wikipedia.org/wiki/Programming_language_generations"&gt;programming generations&lt;/a&gt; are created as layers on top of the prior generations, not as wholly separate and new concepts. New technology is created by standing on the backs of giants, not reimagining the world.&lt;/p&gt;

&lt;p&gt;In order to create a visual programming experience unbounded by the constraints of a single problem, we must connect visualization to existing software systems. In other words, we don't need to reinvent the wheel for a single purpose, but connect to it as it is.&lt;/p&gt;

&lt;p&gt;Brett Victor, in his incredible talk "&lt;a href="https://www.youtube.com/watch?v=PUv66718DII"&gt;Inventing on principle&lt;/a&gt;", shows us some examples.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IrPgsfAr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://imgur.com/LhkdxAL.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IrPgsfAr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://imgur.com/LhkdxAL.gif" alt="Brett Victor visual code editing examples"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#who-is-doing-this-now" class="anchor"&gt;
  &lt;/a&gt;
  Who is doing this now?
&lt;/h2&gt;

&lt;p&gt;There are 2 main categories - visually enhanced developer tools (developer tools like IDEs with visual features), and no-code tools (visual tools that connect to existing APIs and codebases).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#visually-enhanced-developer-tools" class="anchor"&gt;
  &lt;/a&gt;
  Visually enhanced developer tools
&lt;/h3&gt;

&lt;p&gt;One industry that is really pushing visual coding is game development. Games are created by huge teams, and have huge production value that cannot depend on legacy methods like app/web devs use - things like passing off a design to a developer and asking them to code it up in CSS by hand. A world as intricate as those found in modern games would be a nightmare to build line by line manually.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FRCn22-k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://imgur.com/M4QwLOT.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FRCn22-k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://imgur.com/M4QwLOT.gif" alt="Video game scene"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Credit: &lt;a href="https://www.youtube.com/watch?v=MHrsygIxC5k&amp;amp;t=490s"&gt;Ghost of Tsushima&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Would you want to code this landscape by hand like web devs code CSS? Yeah, didn't think so.&lt;/p&gt;

&lt;p&gt;The need to take games beyond what could be coded by hand led the industry to invest heavily in visual tools that connect directly to code. &lt;a href="https://www.unrealengine.com/en-US/"&gt;Unreal Engine&lt;/a&gt; is a great example that you can try yourself today:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AQcF27A5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.builder.io/api/v1/image/assets%252FYJIGb4i01jvw0SRdL5Bt%252F352b73e1ea644065a9ee66e8426afe67" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AQcF27A5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.builder.io/api/v1/image/assets%252FYJIGb4i01jvw0SRdL5Bt%252F352b73e1ea644065a9ee66e8426afe67" alt="Unreal Engine screenshots"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nocode-tools" class="anchor"&gt;
  &lt;/a&gt;
  No-code tools
&lt;/h3&gt;

&lt;p&gt;In web and application software, no-code tools are starting to emerge and grow rapidly. Tools like &lt;a href="https://airtable.com/"&gt;Airtable&lt;/a&gt;, &lt;a href="https://zapier.com/"&gt;Zapier&lt;/a&gt;, &lt;a href="https://www.builder.io/"&gt;Builder&lt;/a&gt;, and &lt;a href="https://retool.com/"&gt;Retool&lt;/a&gt; are showing how we can elegantly allow visual editing connected to existing code, data, and APIs&lt;/p&gt;

&lt;p&gt;These work great because they build on top of existing infrastructure - your existing React components, databases, and APIs - and you can can granularly set permissions as to who can edit what and where.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lIIQJelp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3jx0zzdiz3varefrs66o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lIIQJelp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3jx0zzdiz3varefrs66o.png" alt="Example no-code tools"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#so-whats-next-where-is-this-going" class="anchor"&gt;
  &lt;/a&gt;
  So - what's next? Where is this going?
&lt;/h3&gt;

&lt;p&gt;As we see it, the connection between code and no code will only grow tighter and stronger. We are only at the beginning, you could call it the Apple II days of visual software development. We still have our version of the Macintosh (truly easy and powerful visual development) to get to, and ultimately the iPhone (easy for everyone).&lt;/p&gt;

&lt;p&gt;Here are a few projects out of many we are particularly excited about right now - &lt;a href="https://storybook.js.org/"&gt;Storybook&lt;/a&gt;, &lt;a href="https://github.com/builderio/jsx-lite"&gt;JSX Lite&lt;/a&gt;, &lt;a href="https://github.com/google/blockly"&gt;Blockly&lt;/a&gt;, and &lt;a href="https://github.com/BuilderIO/build."&gt;Build&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--objmF09m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.builder.io/api/v1/image/assets%252FYJIGb4i01jvw0SRdL5Bt%252F3d8e09370ee848949f29bb124c66f674" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--objmF09m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.builder.io/api/v1/image/assets%252FYJIGb4i01jvw0SRdL5Bt%252F3d8e09370ee848949f29bb124c66f674" alt="Visual coding open source projects"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zZaZIhKl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.builder.io/api/v1/image/assets%252FYJIGb4i01jvw0SRdL5Bt%252Ffa31316058a94f7dac272481d627114e" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zZaZIhKl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.builder.io/api/v1/image/assets%252FYJIGb4i01jvw0SRdL5Bt%252Ffa31316058a94f7dac272481d627114e" alt="More visual coding open source projects"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Are there any other exciting visual programming developments that you are excited about or want to see? Drop me a comment below!&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>design</category>
    </item>
    <item>
      <title>Nginx concepts I wish I knew years ago</title>
      <author>Aemie Jariwala</author>
      <pubDate>Mon, 11 Jan 2021 13:58:03 +0000</pubDate>
      <link>https://dev.to/aemiej/nginx-concepts-i-wish-i-knew-years-ago-23o0</link>
      <guid>https://dev.to/aemiej/nginx-concepts-i-wish-i-knew-years-ago-23o0</guid>
      <description>&lt;p&gt;&lt;em&gt;Nginx is a web server that is used as a reverse proxy, load balancer, mail proxy, and HTTP cache and follows the Master-Slave Architecture.&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;Woah! A complicated term and a confusing definition filled with big confusing words, right? Don't worry, I can help out with first understanding the basic barebones of the architectures &amp;amp; terms in Nginx. Then we'll move on to installing and creating &lt;strong&gt;Nginx&lt;/strong&gt; configurations.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mxz4Qgrr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fbj8exwkli91ord2xscz.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mxz4Qgrr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fbj8exwkli91ord2xscz.gif" alt="Confused"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To keep things easy, just remember: &lt;em&gt;Nginx is an amazing web server&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Web server, in simple terms, is like a middleman. Let's say for instance you want to go to dev.to so you type the address &lt;code&gt;https://dev.to&lt;/code&gt;, your browser finds out the address of a webserver for &lt;code&gt;https://dev.to&lt;/code&gt; and then direct it to a backend server which will give back the response to the client.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#proxy-vs-reverse-proxy" class="anchor"&gt;
  &lt;/a&gt;
  Proxy v/s Reverse Proxy
&lt;/h3&gt;

&lt;p&gt;The underlying feature of Nginx is proxies. So it's required to understand what is proxy and reverse proxy now.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#proxy" class="anchor"&gt;
  &lt;/a&gt;
  Proxy
&lt;/h4&gt;

&lt;p&gt;Alright, so we have clients (&amp;gt;= 1), an intermediate web server(in this case, we call it proxy), and a server. The main thing that happens in this is that the server doesn't know which client is requesting. Bit confusing? Let me explain with a diagrammatic sketch. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tPAqn11I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/1moanfdnfnh5d0dqs4wd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tPAqn11I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/1moanfdnfnh5d0dqs4wd.png" alt="Proxy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this, let client1  &amp;amp; client2 send requests request1 &amp;amp; request2 to the server through the Proxy server. Now the backend server will not know whether request1 is sent by client1 or client2 but performs the operation. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#reverse-proxy" class="anchor"&gt;
  &lt;/a&gt;
  Reverse Proxy
&lt;/h4&gt;

&lt;p&gt;In simplest terms, a reverse proxy is a reverse of what a proxy does. Here, we will have let's say a single client, an intermediate web server, and several backend servers (&amp;gt;=1). Let's do this with a diagrammatic sketch as well!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iUfM34yx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/64jk21oeqlki2t3bx1kz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iUfM34yx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/64jk21oeqlki2t3bx1kz.png" alt="Reverse proxy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this, a client will send a request through the webserver. Now the webserver will send the particular request to any of the many servers through an algorithm, one being round-robin (the cutest one!), and send back the response through the webserver to the client. So here, the client isn't aware which backend server it is interacting with.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#load-balancing" class="anchor"&gt;
  &lt;/a&gt;
  Load Balancing
&lt;/h3&gt;

&lt;p&gt;Damn another new term but this term is simpler to understand as it is one instance application of &lt;strong&gt;reverse proxy&lt;/strong&gt; itself.&lt;/p&gt;

&lt;p&gt;Let's go with the basic difference. In load balancing, you must have 2 or more backend servers but in reverse proxy setup, that's not a necessity. It can work with even 1 backend server.&lt;/p&gt;

&lt;p&gt;Let's look at it from behind the scene, if we have a lot of requests from the clients this load balancer checks the status of each backend server and distributes the load of the requests, and sends a response faster to the client.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#stateful-vs-stateless-applications" class="anchor"&gt;
  &lt;/a&gt;
  Stateful v/s Stateless Applications
&lt;/h3&gt;

&lt;p&gt;Okay, guys, I promise I am real close to starting with the Nginx code. Let's get all the barebones clear! &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#stateful-applications" class="anchor"&gt;
  &lt;/a&gt;
  Stateful Applications
&lt;/h4&gt;

&lt;p&gt;This application store an additional variable for saving the information that can work for a single instance of a server only. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ng8XRfi_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bb9kkupl1z9dpacex8vt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ng8XRfi_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bb9kkupl1z9dpacex8vt.png" alt="Stateful"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What I mean is if for a backend server &lt;em&gt;server1&lt;/em&gt; some information is stored it won't be stored for the server &lt;em&gt;server2&lt;/em&gt; thus the client (here Bob) interacting may/may not get the desired result as it could be interacting with server1 or server2. In this case, server1 will allow Bob to view the profile but server2 won't. Thus, even if it prevents many API calls with the database and is faster, it can lead to this problem across different servers.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#stateless-applications" class="anchor"&gt;
  &lt;/a&gt;
  Stateless Applications
&lt;/h4&gt;

&lt;p&gt;Now stateless is more API calls with the database but fewer problems exist when it comes to the interaction of the client with different backend servers. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--42mTsbTP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/c44w9vi7jmgfeo9rea1l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--42mTsbTP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/c44w9vi7jmgfeo9rea1l.png" alt="Stateless"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I know you didn't get what I mean. It's simple if I send a request from a client to let's say backend server &lt;em&gt;server1&lt;/em&gt; through web server it will provide a token back to the client to use to access any further requests. The client can use the token and send a request to the webserver. This web server will send the request along with the token to any of the backend servers and each will provide the same desired output.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-nginx" class="anchor"&gt;
  &lt;/a&gt;
  What is Nginx?
&lt;/h3&gt;

&lt;p&gt;Nginx is the web server and I have been using the term web server in the entire blog till now. It's like a &lt;strong&gt;middleman&lt;/strong&gt; honestly. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z6CIUUND--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2u3l8t4klwflv8k36rtg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z6CIUUND--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2u3l8t4klwflv8k36rtg.png" alt="Nginx"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The diagram isn't confusing, it's just a combination of all the concepts I have explained till now. In this, we have 3 backend servers running at port 3001, 3002, 3003 and all these backend servers use the same database running at port 5432. &lt;/p&gt;

&lt;p&gt;Now when a client sends a requests &lt;code&gt;GET /employees&lt;/code&gt; on &lt;code&gt;https://localhost&lt;/code&gt; (by default on port 443), it will pass this requests to any of the backend server based on the algorithm and take the information from the database and send the JSON back to the Nginx web server and sent back to the client. &lt;/p&gt;

&lt;p&gt;If we're to use an algorithm such as &lt;strong&gt;round-robin&lt;/strong&gt;, what it'll do is let's say client 2 has sent a request to &lt;code&gt;https://localhost&lt;/code&gt; then the Nginx server will pass the request first to port 3000 and send the response back to the client. For another request, Nginx will pass the request to 3002 and so on. &lt;/p&gt;

&lt;p&gt;Too much information right! But by this point, you have a clear understanding of what Nginx is and the terms used with Nginx. Now we'll move on the understanding the installation and configuration techniques.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installation-process" class="anchor"&gt;
  &lt;/a&gt;
  Installation Process
&lt;/h3&gt;

&lt;p&gt;We're here at last! I am so proud if you've understood the concept to reach the coding part of Nginx at last. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7rgP-NQB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4mju73ad1f22gy1ni3gu.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7rgP-NQB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4mju73ad1f22gy1ni3gu.gif" alt="proud"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Okay, let me just tell you the installation process is super duper easy on any system just one-liner honestly. I am a Mac OSX user, so will be writing the commands based on it. But it will be done similarly for &lt;a href="https://ubuntu.com/tutorials/install-and-configure-nginx#2-installing-nginx"&gt;ubuntu&lt;/a&gt; and &lt;a href="https://www.maketecheasier.com/install-nginx-server-windows/"&gt;windows&lt;/a&gt; and other Linux distros.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;brew &lt;span class="nb"&gt;install &lt;/span&gt;Nginx
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This is only required and you have Nginx on your system now! Amazing I am sure! &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#so-easy-to-run" class="anchor"&gt;
  &lt;/a&gt;
  So easy to run! 😛
&lt;/h4&gt;

&lt;p&gt;To run this and check if Nginx is working on your system, it's again way too simple.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;nginx 
&lt;span class="c"&gt;# OR &lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;nginx
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;After this, go on your favorite browser and check out &lt;code&gt;http://localhost:8080/&lt;/code&gt; and you'll get the below-observed screen!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q4OAcvwJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9mlhwlzgqhs6l8aw8sxi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q4OAcvwJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9mlhwlzgqhs6l8aw8sxi.png" alt="start nginx"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#basic-configuration-setup-amp-example" class="anchor"&gt;
  &lt;/a&gt;
  Basic Configuration Setup &amp;amp; Example
&lt;/h3&gt;

&lt;p&gt;Okay, we will be doing an example and seeing the magic of Nginx. &lt;br&gt;
First, create the directory structure in the local machine as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;.&lt;/span&gt;
├── nginx-demo
│  ├── content
│  │  ├── first.txt
│  │  ├── index.html
│  │  └── index.md
│  └── main
│    └── index.html
└── temp-nginx
  └── outsider
    └── index.html
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Also, include basic context within the &lt;strong&gt;html&lt;/strong&gt; and &lt;strong&gt;md&lt;/strong&gt; files.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-were-trying-to-achieve" class="anchor"&gt;
  &lt;/a&gt;
  What we're trying to achieve?
&lt;/h4&gt;

&lt;p&gt;Here, we have two separate folders &lt;code&gt;nginx-demo&lt;/code&gt; and &lt;code&gt;temp-nginx&lt;/code&gt;, each containing static HTML files. We're going to focus on running both these folders on a common port and set rules that we like. &lt;/p&gt;

&lt;p&gt;Coming back on track now. For making any changes to the Nginx default configuration, we will make a change in the &lt;code&gt;nginx.conf&lt;/code&gt; that is located in the &lt;code&gt;usr/local/etc/nginx&lt;/code&gt; path. Also, I have vim in my system so I make changes using vim but you're free to use your editor of choice.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /usr/local/etc/nginx
&lt;span class="nv"&gt;$ &lt;/span&gt;vim nginx.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This will open a file with the default nginx configuration which I really don't want to use. Thus, the way I normally do is make a copy of this configuration file and then make changes to the main file. We'll be doing the same as well.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cp &lt;/span&gt;nginx.conf copy-nginx.conf
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;rm &lt;/span&gt;nginx.conf &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; vim nginx.conf 
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This will now open an empty file and we'll be adding our configuration for it.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Add a basic setup of configuration. It is a must requirement to add the &lt;code&gt;events {}&lt;/code&gt; as it is generally used to mention the number of workers for Nginx architecture. We are using &lt;code&gt;http&lt;/code&gt; here to tell Nginx that we'll be working at layer 7 of the &lt;a href="https://bit.ly/2LGdbYB"&gt;OSI model&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this, we've told nginx to listen on port 5000 and to point to the static file mentioned within the main folder.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight nginx"&gt;&lt;code&gt;  &lt;span class="k"&gt;http&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

     &lt;span class="kn"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
       &lt;span class="kn"&gt;root&lt;/span&gt; &lt;span class="n"&gt;/path/to/nginx-demo/main/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
      &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;events&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We'll add additional rules next for the &lt;code&gt;/content&lt;/code&gt; and &lt;code&gt;/outsider&lt;/code&gt; URL where &lt;strong&gt;outsider&lt;/strong&gt; will be pointing to a directory outside the root directory mentioned in the 1st step. &lt;/p&gt;

&lt;p&gt;Here &lt;code&gt;location /content&lt;/code&gt; signifies that whichever root I define in the leaf directory for this, the &lt;strong&gt;content&lt;/strong&gt; sub URL will be added to the end of the root URL defined.  Thus, here when I specify root as &lt;code&gt;root /path/to/nginx-demo/&lt;/code&gt; it simply means that I am telling Nginx at &lt;code&gt;http://localhost:5000/path/to/nginx-demo/content/&lt;/code&gt; show me the content of the static files within the folder.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight nginx"&gt;&lt;code&gt;  &lt;span class="k"&gt;http&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kn"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;root&lt;/span&gt; &lt;span class="n"&gt;/path/to/nginx-demo/main/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 

        &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="n"&gt;/content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kn"&gt;root&lt;/span&gt; &lt;span class="n"&gt;/path/to/nginx-demo/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;   

        &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="n"&gt;/outsider&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
           &lt;span class="kn"&gt;root&lt;/span&gt; &lt;span class="n"&gt;/path/temp-nginx/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;events&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;blockquote&gt;
&lt;p&gt;Pretty cool! Now Nginx is not only limited to defining URL roots but also to set rules such that I can block the client from accessing certain files. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We're going to write an additional rule within our main server defined to block any &lt;strong&gt;.md&lt;/strong&gt; files from being accessed. We can use regex in Nginx so we'll define the rule as follows:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight nginx"&gt;&lt;code&gt;   &lt;span class="k"&gt;location&lt;/span&gt; &lt;span class="p"&gt;~&lt;/span&gt; &lt;span class="sr"&gt;.md&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kn"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;403&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Let's end this by learning the popular command &lt;code&gt;proxy_pass&lt;/code&gt;. Now we've learned what a proxy and reverse proxy is so here we'll begin by defining another backend server running at port 8888. So now we've got 2 backend servers running at port 5000 and 8888. &lt;/p&gt;

&lt;p&gt;What we'll do is that when the client accesses port 8888 through Nginx we'll pass this request to port 5000 &amp;amp; send the response back to the client!&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight nginx"&gt;&lt;code&gt;   &lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;8888&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

       &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="n"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
           &lt;span class="kn"&gt;proxy_pass&lt;/span&gt; &lt;span class="s"&gt;http://localhost:5000/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
       &lt;span class="p"&gt;}&lt;/span&gt;

       &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="n"&gt;/new&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
           &lt;span class="kn"&gt;proxy_pass&lt;/span&gt; &lt;span class="s"&gt;http://localhost:5000/outsider/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
       &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#lets-see-the-final-complete-code-altogether" class="anchor"&gt;
  &lt;/a&gt;
  Let's see the final complete code altogether! 😁
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight nginx"&gt;&lt;code&gt;   &lt;span class="k"&gt;http&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="kn"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="kn"&gt;root&lt;/span&gt; &lt;span class="n"&gt;/path/to/nginx-demo/main/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 

            &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="n"&gt;/content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="kn"&gt;root&lt;/span&gt; &lt;span class="n"&gt;/path/to/nginx-demo/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;   

            &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="n"&gt;/outsider&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
               &lt;span class="kn"&gt;root&lt;/span&gt; &lt;span class="n"&gt;/path/temp-nginx/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

                    &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="p"&gt;~&lt;/span&gt; &lt;span class="sr"&gt;.md&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="kn"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;403&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
       &lt;span class="p"&gt;}&lt;/span&gt;

         &lt;span class="kn"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
           &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;8888&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

           &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="n"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
               &lt;span class="kn"&gt;proxy_pass&lt;/span&gt; &lt;span class="s"&gt;http://localhost:5000/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
           &lt;span class="p"&gt;}&lt;/span&gt;

           &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="n"&gt;/new&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
               &lt;span class="kn"&gt;proxy_pass&lt;/span&gt; &lt;span class="s"&gt;http://localhost:5000/outsider/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
           &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="k"&gt;events&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Run this code using &lt;code&gt;sudo nginx&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#extra-nginx-commands" class="anchor"&gt;
  &lt;/a&gt;
  Extra Nginx Commands!
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;To start an Nginx web server for the first time.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;  &lt;span class="nv"&gt;$ &lt;/span&gt;nginx 
  &lt;span class="c"&gt;#OR &lt;/span&gt;
  &lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To reload a running Nginx web server.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;  &lt;span class="nv"&gt;$ &lt;/span&gt;nginx &lt;span class="nt"&gt;-s&lt;/span&gt; reload
  &lt;span class="c"&gt;#OR &lt;/span&gt;
  &lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;nginx &lt;span class="nt"&gt;-s&lt;/span&gt; reload
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To stop a running Nginx web server.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;  &lt;span class="nv"&gt;$ &lt;/span&gt;nginx &lt;span class="nt"&gt;-s&lt;/span&gt; stop
  &lt;span class="c"&gt;#OR &lt;/span&gt;
  &lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;nginx &lt;span class="nt"&gt;-s&lt;/span&gt; stop
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To know which processes of Nginx are running on your system.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;  &lt;span class="nv"&gt;$ &lt;/span&gt;ps &lt;span class="nt"&gt;-ef&lt;/span&gt; | &lt;span class="nb"&gt;grep &lt;/span&gt;Nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The 4th command is important when by any chance the first 3 commands lead to some error, what you can normally do is find all running Nginx processes using the 4th command and kill the processes, and start it again.&lt;/p&gt;

&lt;p&gt;To kill a process, you need the PID and then kill it using:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;kill&lt;/span&gt; &lt;span class="nt"&gt;-9&lt;/span&gt; &amp;lt;PID&amp;gt;
&lt;span class="c"&gt;#OR &lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo kill&lt;/span&gt; &lt;span class="nt"&gt;-9&lt;/span&gt; &amp;lt;PID&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We've come to an end with the basic understanding of Nginx and its configuration. If you're interested in the advanced configuration of Nginx, do let me know through comments. Till then enjoy coding and explore the magic of Nginx! 👋&lt;/p&gt;

</description>
      <category>nginx</category>
      <category>tutorial</category>
      <category>systems</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Recoil: a modern state management library.</title>
      <author>ABailey92</author>
      <pubDate>Mon, 11 Jan 2021 13:47:33 +0000</pubDate>
      <link>https://dev.to/abailey92/recoil-a-modern-state-management-library-jkd</link>
      <guid>https://dev.to/abailey92/recoil-a-modern-state-management-library-jkd</guid>
      <description>&lt;p&gt;When it comes to state management libraries, React has its fair share of them. With new ones popping up from time to time, how is a programmer to know what's best? Last year Facebook introduced a state management library called, you guessed it, Recoil. In this article you are going to discover what Recoil is and why you should use it in your next project.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#disclaimer-as-of-now-recoil-is-still-considered-experimental-so-use-at-your-own-risk" class="anchor"&gt;
  &lt;/a&gt;
  &lt;em&gt;Disclaimer: As of now Recoil is still considered experimental so use at your own risk&lt;/em&gt;
&lt;/h6&gt;

&lt;p&gt;I think it's important to start with how Recoil stacks up against the current most popular state management libraries Redux and Context API. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-i-prefer-recoil-over-redux" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Why I prefer Recoil over Redux&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;For one, Recoil is made specifically for React, Redux is not a React library and the store is something that is handled externally. This means that it doesn't have access to React's inner scheduler. Recoil uses react state under the hood, so when React releases concurrent mode Recoil will not be far behind. Also complexity comes into play. To set up even a basic store comes with alot of boilerplate and code. If you want to include async data or caching computed values those are not apart of the base library and will require even more libraries. The creator of Redux recently apologized on Twitter for making Redux so complicated. If that isn't a caution notice. I don't know what it is.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#okay-so-whats-wrong-with-context-api" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Okay so what's wrong with Context API?&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Though not complex, and it is native to React it still has its limitations. When used for recurring or complex updates it isn't very efficient. Sebastian Markbage, a engineer for Facebook, says &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Context is ready to be used for low frequency unlikely updates. It's also good to use for static values and then propagate updates through subscriptions. &lt;strong&gt;It's not ready to be used as a replacement for all flux-like-state propagation&lt;/strong&gt;.&lt;br&gt;
In layman's terms: Context API doesn't let you subscribe to a subset of the data it contains.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#alright-enough-about-the-competition-what-makes-recoil-so-great" class="anchor"&gt;
  &lt;/a&gt;
  Alright enough about the competition, what makes Recoil so great?
&lt;/h4&gt;

&lt;p&gt;To start, Recoil is very easy to learn. Its very simple and feels natural to people who are already accustomed to using React hooks. Getting started is a matter of wrapping your app with &lt;code&gt;RecoilRoot&lt;/code&gt;, declaring your data with a unit called atom and replacing &lt;code&gt;useState&lt;/code&gt; with Recoils &lt;code&gt;useRecoilState&lt;/code&gt;. Recoil also allows you to subscribe to the exact piece of data your component consumes, and has built in methods to handle async data flow.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#recoil-the-basics" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Recoil- The Basics&lt;/em&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Atom&lt;/strong&gt; - atom is a piece of state in Recoil that any component can subscribe to. Changing the value of an atom will result in a re-render from all components subscribed to it. To create an atom we need to provide a key, which should be unique across the application and default value. The default value can be static or a function. This is how it will look.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nameState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;atom&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
&lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;nameState&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="na"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Aiesha Brown&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;)}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;useRecoilState&lt;/strong&gt; - a hook that lets you subscribe to an atoms value and update it&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;useRecoilValue&lt;/strong&gt; - returns just the value of the atom&lt;br&gt;
&lt;strong&gt;useSetRecoilState&lt;/strong&gt; - returns just the setter function&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;nameState&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./myFile&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;NameInput&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRecoilState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nameState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRecoilValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nameState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;setName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useSetRecoilState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nameState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;selector&lt;/strong&gt; - a selector represents a piece of derived state. It lets you build dynamic data that depends on other atoms.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#in-conclusion" class="anchor"&gt;
  &lt;/a&gt;
  In conclusion
&lt;/h4&gt;

&lt;p&gt;Having a state management library that is easy to learn and is intuitive is important. If you have liked what you've read so far I encourage you to use it in your next project. Stay tuned to jus to see how well Recoil scales in the future.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Tutorial - Generative blob characters using SVG!</title>
      <author>George Francis</author>
      <pubDate>Mon, 11 Jan 2021 13:23:15 +0000</pubDate>
      <link>https://dev.to/georgedoescode/tutorial-generative-blob-characters-using-svg-1igg</link>
      <guid>https://dev.to/georgedoescode/tutorial-generative-blob-characters-using-svg-1igg</guid>
      <description>&lt;p&gt;There are two things I love in this world: blobby shapes and putting googly eyes on things. This tutorial combines both of my great loves and hopefully provides a gentle introduction to generative art whilst doing so. &lt;/p&gt;

&lt;p&gt;Here's what we'll be making:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/georgedoescode/embed/dypjOgv?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;It is a somewhat simple example of what you can achieve with a generative approach to design/art, but hopefully something you can expand on.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#prerequisites" class="anchor"&gt;
  &lt;/a&gt;
  Prerequisites ℹ️
&lt;/h2&gt;

&lt;p&gt;No prior generative art knowledge is required! This tutorial is ideal for folks who are already familiar with JavaScript / HTML / CSS and are looking to get started with generative art.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#what-is-generative-art" class="anchor"&gt;
  &lt;/a&gt;
  What... is generative art? 🤔
&lt;/h2&gt;

&lt;p&gt;The simplest definition I can find of Generative art is on the &lt;a href="https://www.tate.org.uk/art/art-terms/g/generative-art"&gt;Tate gallery website&lt;/a&gt; —&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“Generative art is art made using a predetermined system that often includes an element of chance – is usually applied to computer based art”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I think this is perfect and worth keeping in mind as we progress through this tutorial, especially if you are new to this stuff. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#lets-build" class="anchor"&gt;
  &lt;/a&gt;
  Let's build! 🔨
&lt;/h2&gt;

&lt;p&gt;For this tutorial we are going to use SVG to &lt;em&gt;render&lt;/em&gt; our character, JavaScript to decide &lt;em&gt;what&lt;/em&gt; to render, and a little sprinkling of CSS to make sure they sit nicely on the page. &lt;/p&gt;

&lt;p&gt;I have also included a couple of external JS libraries to keep our code simple and clean.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://svgjs.com/docs/3.0/"&gt;https://svgjs.com/docs/3.0/&lt;/a&gt; (used add / remove / modify SVG elements such as &lt;code&gt;&amp;lt;circle&amp;gt;&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.npmjs.com/package/@georgedoescode/spline"&gt;https://www.npmjs.com/package/@georgedoescode/spline&lt;/a&gt; (used to draw smooth curves through multiple points)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I have set up a CodePen that you can fork &lt;a href="https://codepen.io/georgedoescode/pen/29d323ad399e2f3b383dbc3c117b5a92"&gt;here&lt;/a&gt; which has all this stuff pre-added. Once you have forked the pen or set up your environment, we are ready to start creating our characters! &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#package-installation" class="anchor"&gt;
  &lt;/a&gt;
  Package installation
&lt;/h3&gt;

&lt;p&gt;If you are creating your own environment from scratch rather than forking the CodePen, you can install the required packages with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;georgedoescode&lt;/span&gt;&lt;span class="sr"&gt;/spline @svgdotjs/&lt;/span&gt;&lt;span class="nx"&gt;svg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;They can then be imported into your JavaScript like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;spline&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@georgedoescode/spline&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;SVG&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@svgdotjs/svg.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Note: if you plan on setting up your own environment, remember you will likely need a bundler such as Parcel or Webpack to handle these kinds of module imports.&lt;/strong&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#a-blank-canvas" class="anchor"&gt;
  &lt;/a&gt;
  A blank canvas 🖼️
&lt;/h2&gt;

&lt;p&gt;If you started your project by forking the above CodePen, then you already have this CSS set up. &lt;/p&gt;

&lt;p&gt;If not, feel free to add the following to your project to place the &lt;code&gt;&amp;lt;svg /&amp;gt;&lt;/code&gt; nicely in the centre of the viewport. Or don’t! In the words of the Isley Brothers — it's your thing, do what you wanna do.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;place-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;svg&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;75vmin&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;75vmin&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#the-birth-of-a-blob" class="anchor"&gt;
  &lt;/a&gt;
  The birth of a Blob 👶
&lt;/h2&gt;

&lt;p&gt;There will be no birds, bees, storks etc here. Just a code editor of your choice and some ES6 class syntax 🤖&lt;/p&gt;

&lt;p&gt;Straight off the bat, we need to define a few properties: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;width:&lt;/strong&gt; the viewBox width of the SVG&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;height:&lt;/strong&gt; the viewBox height of the SVG&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;target:&lt;/strong&gt; where the &lt;code&gt;&amp;lt;svg /&amp;gt;&lt;/code&gt; element should be added in the DOM &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;svg:&lt;/strong&gt; the &lt;code&gt;svg.js&lt;/code&gt; instance we will use for rendering&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;x:&lt;/strong&gt; the horizontal position of our character within the SVG viewBox&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;y:&lt;/strong&gt; the vertical position of our character within the SVG viewBox&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With all this in mind, we should have a class constructor that looks something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;BlobCharacter&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// viewBox width &amp;amp; height dimensions&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// position of our character within the viewBox (the center)&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// &amp;lt;svg /&amp;gt; element (svg.js instance) we are using to render&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;svg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;SVG&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// mount instance to our target&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;viewbox&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// set the &amp;lt;svg /&amp;gt; viewBox attribute&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Once we have defined the class constructor, we can create a brand new Blob character by calling:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// viewBox w x h, target to append the &amp;lt;svg /&amp;gt; element to&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;character&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;BlobCharacter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You won’t see anything just yet, and that’s cool.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#note-the-viewbox-attribute" class="anchor"&gt;
  &lt;/a&gt;
  Note: the viewBox attribute
&lt;/h3&gt;

&lt;p&gt;If you are new to SVG and wondering what viewBox is, it essentially defines a coordinate space that you can draw anything relative to. In our case 200 x 200px. &lt;/p&gt;

&lt;p&gt;Once you have defined a viewBox, the SVG will draw everything relative to the space you have defined whilst scaling to any resolution. This makes creating responsive generative works nice and easy! &lt;/p&gt;

&lt;p&gt;If you would like to read more about viewBox - &lt;a href="https://css-tricks.com/scale-svg/"&gt;here is a great article on CSS tricks&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#all-creatures-great-and-small" class="anchor"&gt;
  &lt;/a&gt;
  All creatures great and small 🐭 🐘
&lt;/h2&gt;

&lt;p&gt;Now that we have all the “boilerplate” setup for our character, it’s time for some fun! &lt;/p&gt;

&lt;p&gt;The first thing we need to think about is the overall size of our character. Should they be large or small? How do we define that? &lt;/p&gt;

&lt;p&gt;As we will be basing our character's shape on a circle &lt;em&gt;(more on this later)&lt;/em&gt; we can use the circle’s radius to define our character's size. Don’t worry, I’m no mathematician and this isn’t going to get too deep.&lt;/p&gt;

&lt;p&gt;A number between 50 and 80 should do perfectly given our viewBox dimensions of 200x200. Here's an infinitely useful utility function that we can use to generate a random number within a range:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// choose a number within a range, integer (whole number) by default&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;float&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;float&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Using this very handy utility function we can define a random size for our character like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;BlobCharacter&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="c1"&gt;// choose a random size / radius for our character&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Perfect! We still won't see anything, but the code is looking good.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#drawing-the-body" class="anchor"&gt;
  &lt;/a&gt;
  Drawing the body ✏️
&lt;/h2&gt;

&lt;p&gt;I think a good next step is to draw our character’s body. This is probably the trickiest part of the tutorial, but don’t worry if it’s a little confusing! &lt;/p&gt;

&lt;p&gt;Take your time, play around with the code, break it, put it back together. &lt;/p&gt;

&lt;p&gt;I find that often in generative art I use a code snippet for a while before I truly understand it. I think this is fine, no one is going to look at your beautiful creations and &lt;strong&gt;see&lt;/strong&gt; that you didn’t fully understand some maths. &lt;strong&gt;If it looks cool, it looks cool.&lt;/strong&gt; We are making art here not publishing a research paper!&lt;/p&gt;

&lt;p&gt;Anyway, onto the code... &lt;/p&gt;

&lt;p&gt;To draw our character’s body, we are going to: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Plot equidistant points around the circumference of a circle&lt;/li&gt;
&lt;li&gt;Add a little randomness to the &lt;code&gt;{x, y}&lt;/code&gt; values of each point&lt;/li&gt;
&lt;li&gt;Draw a smooth curve through all of the points&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The code for this can be added to a &lt;code&gt;drawBody()&lt;/code&gt; function on our BlobCharacter class &lt;em&gt;(all code is commented to outline its functionality in-context)&lt;/em&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="nx"&gt;drawBody&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// choose a random number of points&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;numPoints&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// step used to place each point at equal distances&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;angleStep&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PI&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;numPoints&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// keep track of our points&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;points&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;numPoints&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// how much randomness should be added to each point&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pull&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.75&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// x &amp;amp; y coordinates of the current point&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;angleStep&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;pull&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;angleStep&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;pull&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// push the point to the points array&lt;/span&gt;
    &lt;span class="nx"&gt;points&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// generate a smooth continuous curve based on the points, using bezier curves. spline() will return an svg path-data string. The arguments are (points, tension, close). Play with tension and check out the effect!&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pathData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;spline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;points&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// render the body in the form of an svg &amp;lt;path /&amp;gt; element!&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;svg&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pathData&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stroke&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#000&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;transparent&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Once added to the class, it can be called like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;character&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;drawBody&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Ok! Drumroll, please... &lt;/p&gt;

&lt;p&gt;If you check out your browser / CodePen window you should now be seeing an awesome random blob shape. If you refresh your browser or re-run the code, you should hopefully see a new shape each time!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wGY370Wk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ls5usjlbmrr96bmnnrvw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wGY370Wk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ls5usjlbmrr96bmnnrvw.png" alt="An organic blob shape"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We are making generative art!&lt;/strong&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#note-the-raw-spline-endraw-function" class="anchor"&gt;
  &lt;/a&gt;
  Note: the &lt;code&gt;spline()&lt;/code&gt; function
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;spline()&lt;/code&gt; function you see here is another incredibly useful utility. It simply draws a smooth curve through a set of &lt;code&gt;{ x, y }&lt;/code&gt; points. The shapes it creates should always “close” perfectly leaving you with a very satisfying, natural end result. The technical name for it is a &lt;a href="https://en.wikipedia.org/wiki/Centripetal_Catmull%E2%80%93Rom_spline"&gt;Catmull-Rom spline&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;You can find the source code for the version I created &lt;a href="https://github.com/georgedoescode/splinejs"&gt;here&lt;/a&gt;. Thanks to  &lt;a href="https://twitter.com/cassiecodes"&gt;https://twitter.com/cassiecodes&lt;/a&gt; for introducing me to the magic of splines 🙌&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#drawing-the-eyes" class="anchor"&gt;
  &lt;/a&gt;
  Drawing the eyes 👀
&lt;/h2&gt;

&lt;p&gt;OK, so we have an awesome organic blob shape. We could almost stop here. You see these blobs all over the web and they can be an incredibly versatile design asset. &lt;a href="https://dribbble.com/search/blobs"&gt;A quick dribbble search&lt;/a&gt; should show you a few examples!&lt;/p&gt;

&lt;p&gt;We should add some googly eyes though. &lt;strong&gt;Everything looks better with googly eyes.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let’s add a &lt;code&gt;drawEye()&lt;/code&gt; function to our BlobCharacter class:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// x position, y position, radius / size&lt;/span&gt;
&lt;span class="nx"&gt;drawEye&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// create a new svg &amp;lt;group /&amp;gt; to add all the eye content to&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;eye&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;svg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;group&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="c1"&gt;// &amp;lt;group /&amp;gt; elements do not have an x and y attribute, so we need to "transform" it to the right position&lt;/span&gt;
  &lt;span class="nx"&gt;eye&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;translateX&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;translateY&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="c1"&gt;// add the outer ring of the eye (an svg &amp;lt;circle /&amp;gt; element) to our eye &amp;lt;group /&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;eye&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;circle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;// cx / cy are the { x, y } values for the svg &amp;lt;circle /&amp;gt; element&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cx&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stroke&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#000&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#fff&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// add the inner part of the eye (another svg &amp;lt;circle /&amp;gt; element) to our eye &amp;lt;group /&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;eye&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;circle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cx&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#000&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This isn’t going to do too much right now. Let’s add another &lt;code&gt;drawEyes()&lt;/code&gt; function that will call &lt;code&gt;drawEye()&lt;/code&gt; with some values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;drawEyes&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ensure the width of two eyes never exceeds 50% of the characters body size&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;maxWidth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;// if a random number between 0 and 1 is greater than 0.75, the character is a cyclops!&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isCyclops&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;0.75&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;// the size of each (or only) eye.&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;eyeSize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;maxWidth&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;maxWidth&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isCyclops&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// draw just 1 eye, in the centre of the character&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;drawEye&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;eyeSize&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// draw 2 eyes, equidistant from the centre of the character&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;drawEye&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;maxWidth&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;eyeSize&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;drawEye&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;maxWidth&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;eyeSize&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We can then call &lt;code&gt;drawEyes()&lt;/code&gt; in the same way as &lt;code&gt;drawBody()&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;character&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;drawEyes&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you check out your browser now you should have the awesome blob body from before, but with some fresh new googly eyes &lt;em&gt;(or just one eye)&lt;/em&gt; attached. Nice! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cwwNxhFa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/z205exdukm8n1oxpt32y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cwwNxhFa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/z205exdukm8n1oxpt32y.png" alt="An organic blob shape with googly eyes added"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now is a great time to inspect the DOM and have a poke around the &lt;code&gt;&amp;lt;svg /&amp;gt;&lt;/code&gt; element that contains all of the parts of our blob character. You should see something like this: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6-ujcy0g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/s279mk5860mi4igha60e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6-ujcy0g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/s279mk5860mi4igha60e.png" alt="A screenshot of an SVG DOM node"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is one of the great things about using SVG for generative art. It is super easy to debug/visualise as you have a visual DOM tree to explore. &lt;/p&gt;

&lt;p&gt;Inspecting the &lt;code&gt;&amp;lt;svg /&amp;gt;&lt;/code&gt; element should highlight what &lt;code&gt;svg.js&lt;/code&gt; has been doing for us all this time. It is simply simplifying the dynamic creation / updating of SVG DOM elements. This can get quite wordy without a library.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#time-to-bust-out-the-crayons" class="anchor"&gt;
  &lt;/a&gt;
  Time to bust out the crayons 🖍️
&lt;/h2&gt;

&lt;p&gt;Our character is looking awesome. It’s got tons of character, but I think it would be cool to add some color. You could leave it black and white if you like, though. It’s got a kind of cool kawaii sketch vibe this way.&lt;/p&gt;

&lt;p&gt;A simple approach to introducing some color here is to define a &lt;code&gt;primaryColor&lt;/code&gt;, a &lt;code&gt;lightColor&lt;/code&gt; to replace &lt;code&gt;#fff&lt;/code&gt; and a &lt;code&gt;darkColor&lt;/code&gt; to replace &lt;code&gt;#000&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;The &lt;code&gt;darkColor&lt;/code&gt; and &lt;code&gt;lightColor&lt;/code&gt; values are both tinted with the &lt;code&gt;baseColor&lt;/code&gt;. This is something I do a lot and think it’s a nice trick to make your color palettes feel coherent. It can work great in a UI context too.&lt;/p&gt;

&lt;p&gt;Let’s set the color values in a new &lt;code&gt;setColors()&lt;/code&gt; function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;setColors&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// random hue &lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;360&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// random saturation, keeping it quite high here as a stylistic preference&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;saturation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;75&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// random lightness, keeping it quite high here as a stylistic preference&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;lightness&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;75&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;95&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// base color&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;primaryColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`hsl(&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;hue&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;saturation&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;%, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;lightness&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;%)`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;// almost black, slightly tinted with the base color&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;darkColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`hsl(&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;hue&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;saturation&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;%, 2%)`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;// almost white, slightly tinted with the base color&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lightColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`hsl(&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;hue&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;saturation&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;%, 98%)`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I always use HSL for colors as it I find it intuitive and easy to modify in a generative context. As displayed in the above code snippet, I am choosing random H/S/L values and combining them using JavaScript template literal strings. &lt;/p&gt;

&lt;p&gt;We can then call &lt;code&gt;setColors()&lt;/code&gt; in the BlobCharacter constructor:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;BlobCharacter&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setColors&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Once the colors are defined, we can apply them throughout the code: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;this.primaryColor&lt;/code&gt; in place of &lt;code&gt;transparent&lt;/code&gt; for the body fill&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;this.darkColor&lt;/code&gt; for all occurrences of &lt;code&gt;#000&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;this.lightColor&lt;/code&gt; for all occurrences of &lt;code&gt;#fff&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally, we can set the base &lt;code&gt;&amp;lt;svg /&amp;gt;&lt;/code&gt; background color to &lt;code&gt;this.lightColor&lt;/code&gt; to create a colorful backdrop for our character:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;BlobCharacter&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setColors&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;svg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;background&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lightColor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Your character should now look something like the following image. Remember, the colors and shape will be different each time!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rz9eIHVW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6z9ppgq4pl7oimxnf622.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rz9eIHVW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6z9ppgq4pl7oimxnf622.png" alt="A colorful blob character"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#variety-is-the-spice-of-life" class="anchor"&gt;
  &lt;/a&gt;
  Variety is the spice of life 🌶️
&lt;/h2&gt;

&lt;p&gt;Our character design is finished! There is one last thing we could add though... &lt;/p&gt;

&lt;p&gt;Right now we only see one example of a character. It would be good to demonstrate the generative aspect of the piece a little more. We can do this by periodically regenerating and rendering our character. &lt;/p&gt;

&lt;p&gt;In order to do this, let's wrap all the drawing functionality into a single &lt;code&gt;draw()&lt;/code&gt; method on the &lt;code&gt;BlobCharacter&lt;/code&gt; class:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;draw&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// clear the &amp;lt;svg /&amp;gt; element&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;svg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="c1"&gt;// generate new colors&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setColors&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="c1"&gt;// set the svg background color&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;svg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;background&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lightColor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;// generate a new body shape and render it&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;drawBody&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="c1"&gt;// genearte new eye(s) and render them&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;drawEyes&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We can then call this method rather than running &lt;code&gt;drawBody()&lt;/code&gt; and &lt;code&gt;drawEyes()&lt;/code&gt; directly after creating our &lt;code&gt;character&lt;/code&gt; instance. We can then continue to call this method every 1.5s to create a new character:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// viewBox w x h, target to append the &amp;lt;svg /&amp;gt; element to&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;character&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;BlobCharacter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// draw the initial character&lt;/span&gt;
&lt;span class="nx"&gt;character&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;draw&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// every 1.5s after the initial render, draw a new character&lt;/span&gt;
  &lt;span class="nx"&gt;character&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;draw&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1500&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Hopefully you will now see something like this...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W8WMynds--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/0k8pbrs3to4i0nf79hro.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W8WMynds--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/0k8pbrs3to4i0nf79hro.gif" alt="A gif showing different blob character generations"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#thats-all-folks" class="anchor"&gt;
  &lt;/a&gt;
  That’s all folks! 👋
&lt;/h2&gt;

&lt;p&gt;Hooray, we made it! Hopefully, you have got to the end of this tutorial and created a cool character, whilst learning some stuff about generative art in the process. &lt;/p&gt;

&lt;p&gt;If you got stuck at any point, check out the final example code as a reference or leave a comment here. I'm always happy to help!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you did enjoy this post, please follow me on Twitter &lt;a href="https://twitter.com/georgedoescode"&gt;@georgedoescode&lt;/a&gt; and / or on CodePen &lt;a href="https://codepen.io/georgedoescode"&gt;@georgedoescode&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I’m always posting little generative experiments, and I plan on publishing an article every 2 weeks from here onwards.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#next-steps" class="anchor"&gt;
  &lt;/a&gt;
  Next steps ➡️
&lt;/h2&gt;

&lt;p&gt;There are a bunch of places you could take this from this point: animation, different eye types, different body shapes, a custom blob generator etc, and I would love to see anything you end up creating! &lt;/p&gt;

&lt;p&gt;If you do end up creating anything that you would like to share, add the hashtag &lt;code&gt;#generativeBlobStuff&lt;/code&gt; to your CodePens / tweets / whatever!&lt;/p&gt;

&lt;p&gt;Thank you very much for reading!  &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>tutorial</category>
      <category>javascript</category>
      <category>codepen</category>
    </item>
    <item>
      <title>What's your New Year Resolution? 🚀🎉</title>
      <author>Sarthak Sharma</author>
      <pubDate>Mon, 11 Jan 2021 12:15:57 +0000</pubDate>
      <link>https://dev.to/sarthology/what-s-your-new-year-resolution-345i</link>
      <guid>https://dev.to/sarthology/what-s-your-new-year-resolution-345i</guid>
      <description>&lt;p&gt;Holidays allow us to calm down and reflect on ourselves. Self-reflection not only benefits you to achieve your goals but also encourages you to become a heedful person. After reflection comes the resolution to improve on the shortcomings of last year.&lt;/p&gt;

&lt;p&gt;So like every year, here is the updated New Year Resolution board.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vJ70wriM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/sarthology"&gt;
        sarthology
      &lt;/a&gt; / &lt;a href="https://github.com/sarthology/ResolutionBoard"&gt;
        ResolutionBoard
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      📅 A template that helps you achieve your resolutions every year
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;div&gt;
  &lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/3650216/104172427-405b0a80-542a-11eb-9394-bdb2579f7353.jpg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pew7a6Nh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/3650216/104172427-405b0a80-542a-11eb-9394-bdb2579f7353.jpg"&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;This is The Resolution Board, a template created to help you achieve your New Year Resolutions and these are my new year resolutions.&lt;/p&gt;
&lt;h2&gt;
Resolution 1 📚 &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/4dd36ca390127762efa6d28d129d39a9fdd9c1dff066ae0f70b264ac13286d6f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f70726f67726573732d302532352d7265642e737667"&gt;&lt;img src="https://camo.githubusercontent.com/4dd36ca390127762efa6d28d129d39a9fdd9c1dff066ae0f70b264ac13286d6f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f70726f67726573732d302532352d7265642e737667" alt=""&gt;&lt;/a&gt;
&lt;/h2&gt;
&lt;h2&gt;
Resolution 2 👨🏻‍💻 &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/4dd36ca390127762efa6d28d129d39a9fdd9c1dff066ae0f70b264ac13286d6f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f70726f67726573732d302532352d7265642e737667"&gt;&lt;img src="https://camo.githubusercontent.com/4dd36ca390127762efa6d28d129d39a9fdd9c1dff066ae0f70b264ac13286d6f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f70726f67726573732d302532352d7265642e737667" alt=""&gt;&lt;/a&gt;
&lt;/h2&gt;
&lt;h2&gt;
Resolution 3 ✈️ &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/4dd36ca390127762efa6d28d129d39a9fdd9c1dff066ae0f70b264ac13286d6f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f70726f67726573732d302532352d7265642e737667"&gt;&lt;img src="https://camo.githubusercontent.com/4dd36ca390127762efa6d28d129d39a9fdd9c1dff066ae0f70b264ac13286d6f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f70726f67726573732d302532352d7265642e737667" alt=""&gt;&lt;/a&gt;
&lt;/h2&gt;
&lt;h2&gt;
Resolution 4 💪🏼 &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/4dd36ca390127762efa6d28d129d39a9fdd9c1dff066ae0f70b264ac13286d6f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f70726f67726573732d302532352d7265642e737667"&gt;&lt;img src="https://camo.githubusercontent.com/4dd36ca390127762efa6d28d129d39a9fdd9c1dff066ae0f70b264ac13286d6f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f70726f67726573732d302532352d7265642e737667" alt=""&gt;&lt;/a&gt;
&lt;/h2&gt;
&lt;h2&gt;
Resolution 5 🤝 &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/4dd36ca390127762efa6d28d129d39a9fdd9c1dff066ae0f70b264ac13286d6f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f70726f67726573732d302532352d7265642e737667"&gt;&lt;img src="https://camo.githubusercontent.com/4dd36ca390127762efa6d28d129d39a9fdd9c1dff066ae0f70b264ac13286d6f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f70726f67726573732d302532352d7265642e737667" alt=""&gt;&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;If your resolution is to work on Open Source this year. Join Team XenoX Multiverse 🔥&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/sarthology/XenoXMultiverse"&gt;&lt;img src="https://camo.githubusercontent.com/ceab7c44d29b0684291e67b7128ca26e45b55908/68747470733a2f2f692e696d6775722e636f6d2f6f576b534b576f2e706e67" alt=""&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Wanna say thanks Tweet me &lt;a href="https://twitter.com/sarthology" rel="nofollow"&gt;@sarthology&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/sarthology/ResolutionBoard"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


&lt;p&gt;If want to know how and why this works check &lt;a href="%7B%%20link%20https://dev.to/teamxenox/how-i-crushed-all-of-my-2019-resolutions-and-you-can-too-11if%20%%7D"&gt;this&lt;/a&gt; article. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;This Year&lt;/em&gt;&lt;/strong&gt; I'm also creating a Notion Template which will be slightly more advance. So If you like the idea and wanted to have early access tweet me &lt;a href="https://twitter.com/Sarthology"&gt;@sarthology&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;For the rest of you folks, what's your new year's resolution and why?&lt;/em&gt;&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/S2wAes3xRCu4PBFyHB/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/S2wAes3xRCu4PBFyHB/giphy.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>productivity</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>Going Places: How I used Golang for literally every part of an IoT system</title>
      <author>Stanley Nguyen</author>
      <pubDate>Mon, 11 Jan 2021 11:49:41 +0000</pubDate>
      <link>https://dev.to/stanleynguyen/going-places-how-i-used-golang-for-literally-every-part-of-an-iot-system-19fm</link>
      <guid>https://dev.to/stanleynguyen/going-places-how-i-used-golang-for-literally-every-part-of-an-iot-system-19fm</guid>
      <description>&lt;p&gt;Over the course of technology's esoteric rise, there're many languages that come and go.&lt;br&gt;
And just like for any products, only a few stood the test of time like C, Java - amassing large groups of followers with application in various domains.&lt;br&gt;
Naturally, fans of such languages would try to adapt their favourite tools to their various niched domains, which might not be the originally intended purpose of such languages.&lt;br&gt;
One notable effort was &lt;a href="https://en.wikipedia.org/wiki/Write_once,_run_anywhere"&gt;Sun Microsystems'&lt;/a&gt; which ended up being at best the butt of Java Developers' joke &lt;code&gt;Write Once, Debug Everywhere&lt;/code&gt;, at worst the main source of pain for "cross-platform"-dubbed developers.&lt;/p&gt;

&lt;p&gt;Ridiculous as it was, the attempt inspired me to attempt to do the same thing with one of developers' community golden child that has been steadily rising in popularity over the last 10 years since its inception - Golang.&lt;br&gt;
If this post eventually contributes to another &lt;code&gt;WORA&lt;/code&gt; wildfire (unintentionally of course 🤫 ), please do use this motto &lt;code&gt;GORA&lt;/code&gt; - Go Once, Run Anywhere!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-big-picture" class="anchor"&gt;
  &lt;/a&gt;
  The Big Picture
&lt;/h2&gt;

&lt;p&gt;What I'm trying to construct using Go is a simple IoT (Internet-of-Things) system which controls a LED light.&lt;br&gt;
The whole system can be summed up in a single diagram&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PHWtOSPE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9ybdgb6k8jzz05d5f6yq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PHWtOSPE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9ybdgb6k8jzz05d5f6yq.png" alt="System Diagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At the core of the system, we have a server (duh!) that persist the current desired state of the LED light (the "backend").&lt;br&gt;
This state can be altered by the "front-end" clients - the browser app, the mobile app and the Mac 🍎 app, which are all written entirely in Go.&lt;br&gt;
On the other end of the system, I will be using a Raspberry Pi (RPi) to retrieve the LED light state from our server and pass it on to an Arduino controlling the LED light directly (This seems like a longer route but I didn't have a wifi shield for my Arduino 🤷 ).&lt;/p&gt;

&lt;p&gt;All communications between components of this system are done through HTTP protocol, which allows me to have a "WORA" HTTP client component injected in different parts of the system to facilitate these calls.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#signal-server" class="anchor"&gt;
  &lt;/a&gt;
  Signal Server
&lt;/h2&gt;

&lt;p&gt;This is the brain of the system which persists and facilitates the trasmission of the LED light's states in the system.&lt;br&gt;
Interestingly, this is the only portion where Go is used for the purpose it's originally created for.&lt;/p&gt;

&lt;p&gt;With Go, I can easily model lights as domain objects&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;lightState&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;lightState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"ON"&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;off&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;fallthrough&lt;/span&gt;
    &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"OFF"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lightState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;iota&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;off&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;light&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="n"&gt;lightState&lt;/span&gt;
    &lt;span class="n"&gt;mux&lt;/span&gt;   &lt;span class="n"&gt;sync&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Mutex&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;newLight&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;light&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;light&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;off&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;light&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;lightState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mux&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Lock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;
    &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mux&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Unlock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;light&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;getState&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;lightState&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The light state control is then exposed through a set of endpoints to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Get the state &lt;code&gt;GET /led&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Update it to ON &lt;code&gt;POST /on&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Update it to OFF &lt;code&gt;POST /off&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HandleFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/led"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Method&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MethodGet&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusForbidden&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fprint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Method not allowed"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusOK&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fprint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;light&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getState&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HandleFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/on"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Method&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MethodPost&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusForbidden&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fprint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Method not allowed"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusOK&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;light&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fprint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HandleFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/off"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Method&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MethodPost&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusForbidden&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fprint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Method not allowed"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusOK&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;light&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;off&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fprint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;With the signal in place for remotely controlling the light through HTTP requests, now we can come to the piece of the puzzle that will be extrapolated to be used in different platforms.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-lighthttpcli" class="anchor"&gt;
  &lt;/a&gt;
  The lighthttpcli
&lt;/h2&gt;

&lt;p&gt;The light controlling client is basically a http wrapper with self-explanatory methods.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;StateOn&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"ON"&lt;/span&gt;
    &lt;span class="n"&gt;StateOff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"OFF"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;LightHttpCli&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;        &lt;span class="kt"&gt;string&lt;/span&gt;
    &lt;span class="n"&gt;httpClient&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Client&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="n"&gt;LightHttpCli&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;GetState&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;endpoint&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%s/led"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;httpClient&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;endpoint&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"OFF"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;respByte&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;ioutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReadAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"OFF"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Body&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusCode&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusOK&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"OFF"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;errors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;respByte&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;respByte&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="n"&gt;LightHttpCli&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;SetState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;endpoint&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%s/%s"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;strings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ToLower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MethodPost&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;endpoint&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;httpClient&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Do&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;respByte&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;ioutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReadAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Body&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusCode&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusOK&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;errors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;respByte&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So how do we &lt;code&gt;extrapolate&lt;/code&gt; this light controlling clients for all of the promised platforms: Web, Mobile, and Native Desktop?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#frontend-clients" class="anchor"&gt;
  &lt;/a&gt;
  Frontend Clients
&lt;/h2&gt;

&lt;p&gt;This is the interesting part where I'm going to use Go on platforms that it's not supposed to be used on just because I can 🤷‍♂.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#go-in-browsers" class="anchor"&gt;
  &lt;/a&gt;
  Go in Browsers
&lt;/h3&gt;

&lt;p&gt;Let's start with something light-hearted which most of us might have at least heard about - WebAssembly.&lt;br&gt;
I won't go into nitty gritty details of WebAssembly in this post as we all have short attention spans, but basically we just have to write a simple Go script with a main function that will be compiled down to &lt;a href="https://webassembly.org/"&gt;wasm&lt;/a&gt; and executed with the help of GoWASM exec script. Read more about Go WebAssembly &lt;a href="https://github.com/golang/go/wiki/WebAssembly"&gt;here&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;getStateBtnHandlerFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cli&lt;/span&gt; &lt;span class="n"&gt;lighthttpcli&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LightHttpCli&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;js&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Func&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;js&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FuncOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="n"&gt;js&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="n"&gt;js&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;interface&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;cli&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nb"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}()&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;getRefreshStateFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bulbElem&lt;/span&gt; &lt;span class="n"&gt;js&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cli&lt;/span&gt; &lt;span class="n"&gt;lighthttpcli&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LightHttpCli&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;js&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Func&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;prevState&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;js&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FuncOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="n"&gt;js&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="n"&gt;js&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;interface&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;cli&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetState&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nb"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;

                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;prevState&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;lighthttpcli&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StateOn&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="n"&gt;bulbElem&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"classList"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"add"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"on"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="n"&gt;bulbElem&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"classList"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"remove"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"on"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                    &lt;span class="n"&gt;prevState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}()&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;cli&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;lighthttpcli&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewCli&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;js&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Global&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"location"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"origin"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;bulbElem&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;js&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Global&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"document"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"getElementById"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"bulb"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;js&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Global&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"turnOn"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;getStateBtnHandlerFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lighthttpcli&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StateOn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cli&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;js&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Global&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"turnOff"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;getStateBtnHandlerFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lighthttpcli&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StateOff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cli&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;js&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Global&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"setInterval"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;getRefreshStateFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bulbElem&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cli&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="m"&gt;500&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;chan&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt;&lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nb"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"WASM Go initialized"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The above Go script can then be compiled, conveniently with an in-built Go compiler's feature, into a WebAssembly "binary".&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;GOARCH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;wasm &lt;span class="nv"&gt;GOOS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;js go build &lt;span class="nt"&gt;-o&lt;/span&gt; static/main.wasm wasm/main.go
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The result "binary" will bind instructions into the corresponding function names in the browser's JavaScript space after its initilisation in JS.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"wasm_exec.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;go&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Go&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;mod&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;inst&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;WebAssembly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;instantiateStreaming&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;main.wasm&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;go&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;importObject&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;mod&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;inst&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;go&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;inst&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#go-on-native-desktop" class="anchor"&gt;
  &lt;/a&gt;
  Go on Native Desktop
&lt;/h3&gt;

&lt;p&gt;To keep the project simple, I decided to just make an Mac status bar application rather than full-fledged UI application.&lt;br&gt;
For this task, conveniently, there's already a popular package &lt;a href="https://github.com/caseymrm/menuet"&gt;caseymrm/menuet&lt;/a&gt;.&lt;br&gt;
I only have to define my status bar app as below and bind the different functions of &lt;code&gt;lighthttpcli&lt;/code&gt; to UI interactions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;cli&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lighthttpcli&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewCli&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;serverURL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;intervalStateRefresh&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;ticker&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewTicker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;500&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Millisecond&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;prevState&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="n"&gt;ticker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;
        &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;cli&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetState&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;prevState&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;menuet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetMenuState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;menuet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MenuState&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;Title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Light is: %s"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="p"&gt;})&lt;/span&gt;
            &lt;span class="n"&gt;prevState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;menuItems&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="n"&gt;menuet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MenuItem&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;onBtn&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;menuet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MenuItem&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Turn On"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;Clicked&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;cli&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lighthttpcli&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StateOn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;offBtn&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;menuet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MenuItem&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Turn Off"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;Clicked&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;cli&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lighthttpcli&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StateOff&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="n"&gt;menuet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MenuItem&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;onBtn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;offBtn&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="n"&gt;intervalStateRefresh&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;menuet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"com.github.stanleynguyen.goeverywhere"&lt;/span&gt;
    &lt;span class="n"&gt;menuet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Children&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;menuItems&lt;/span&gt;
    &lt;span class="n"&gt;menuet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RunApplication&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#go-on-mobile" class="anchor"&gt;
  &lt;/a&gt;
  Go on Mobile
&lt;/h3&gt;

&lt;p&gt;This part is one that I struggled the most with as the &lt;a href="https://github.com/golang/mobile"&gt;gomobile package&lt;/a&gt; is unstable and also lacks documentation and guides (as we all could have guessed that it's rarely used in a practical sense).&lt;/p&gt;

&lt;p&gt;Creating the app is relatively straight-forward as I went with a full-screen setup that indicates the light's state by its background color and toggles the state upon any touch events.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;stateChan&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;chan&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="n"&gt;checkState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stateChan&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;App&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;glctx&lt;/span&gt; &lt;span class="n"&gt;gl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;
        &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;"OFF"&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="n"&gt;stateChan&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;paint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;{})&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Events&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;lifecycle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Event&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;glctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DrawContext&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;paint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Event&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;glctx&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="k"&gt;continue&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"ON"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="n"&gt;glctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ClearColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="n"&gt;glctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ClearColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                    &lt;span class="n"&gt;glctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Clear&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;COLOR_BUFFER_BIT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Publish&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;touch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Event&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"ON"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="n"&gt;lightHTTPCli&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"OFF"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="n"&gt;lightHTTPCli&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ON"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;To install on Android devices, this Go program can then be compiled into an apk with the help of &lt;a href="https://github.com/golang/mobile"&gt;gomobile&lt;/a&gt; with the &lt;a href="https://developer.android.com/ndk/downloads"&gt;ndk-bundle&lt;/a&gt; in the same folder.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;ANDROID_HOME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt; gomobile build &lt;span class="nt"&gt;-ldflags&lt;/span&gt; &lt;span class="s2"&gt;"-X main.serverURL=&amp;lt;your server url&amp;gt;"&lt;/span&gt; &lt;span class="nt"&gt;-o&lt;/span&gt; light.apk github.com/stanleynguyen/go-everywhere/mobo
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#edge-node" class="anchor"&gt;
  &lt;/a&gt;
  Edge Node
&lt;/h2&gt;

&lt;p&gt;Now that we have settled all of our "frontend" clients, it's time to translate the software signal into some actual hardware and light up some LEDs!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#raspberry-pi" class="anchor"&gt;
  &lt;/a&gt;
  Raspberry Pi 🥧
&lt;/h3&gt;

&lt;p&gt;As you're reading this, you might be wondering why didn't we just let the Arduino controller get the light state directly and control the LED.&lt;br&gt;
The main reason behind the decision was because I didn't have an internet shield for my Arduino but hey, what's the harm in tallying up my platform count by a point 🤷‍♂️?&lt;/p&gt;

&lt;p&gt;For the RPi to be the desired "middle-person" controller, we simply need it to poll for the light state and pass the signal onto an output pin.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;serverURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"http://localhost:8080"&lt;/span&gt; &lt;span class="c"&gt;// Inject at build time with -ldflags "-X main.serverURL=http://something"&lt;/span&gt;
&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;pinNumberStr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"16"&lt;/span&gt;                 &lt;span class="c"&gt;// Inject at build time with -ldflags "-X main.pinNumber=21"&lt;/span&gt;

&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;cli&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lighthttpcli&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewCli&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;serverURL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;rpio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Open&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="n"&gt;rpio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;pinNumber&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;strconv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Atoi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pinNumberStr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;pin&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;rpio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Pin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pinNumber&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;pin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Output&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;stateChan&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;chan&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="n"&gt;pollLightState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stateChan&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;prevState&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;"OFF"&lt;/span&gt;
    &lt;span class="n"&gt;pin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Low&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="n"&gt;stateChan&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;prevState&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"ON"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;pin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;High&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;pin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Low&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="n"&gt;prevState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;pollLightState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stateChan&lt;/span&gt; &lt;span class="k"&gt;chan&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;cli&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetState&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;stateChan&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;500&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Millisecond&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And thanks to Go's build system's versatility, I can easily compile a binary that can be run on RPi &lt;strong&gt;on my Macbook&lt;/strong&gt; by setting some simple flags.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;GOOS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;linux &lt;span class="nv"&gt;GOARCH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;arm &lt;span class="nv"&gt;GOARM&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;5 go build &lt;span class="nt"&gt;-o&lt;/span&gt; pi.out &lt;span class="nt"&gt;-ldflags&lt;/span&gt; &lt;span class="s2"&gt;"-X main.serverURL=&amp;lt;your server url&amp;gt; -X main.pinNumber=&amp;lt;output pin number&amp;gt;"&lt;/span&gt; pi/main.go
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#arduino" class="anchor"&gt;
  &lt;/a&gt;
  Arduino
&lt;/h3&gt;

&lt;p&gt;So finally, we have come to the last piece of the puzzle.&lt;br&gt;
The Arduino only has a simple job of reading from an input pin that receive signals from the RPi and output to a pin that will complete the circuit and light up the LED 💡.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"machine"&lt;/span&gt;
    &lt;span class="s"&gt;"strconv"&lt;/span&gt;
    &lt;span class="s"&gt;"time"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;outPinStr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"9"&lt;/span&gt; &lt;span class="c"&gt;// Inject at build time with -ldflags "-X main.outPinStr=9"&lt;/span&gt;
&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;inPinStr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"7"&lt;/span&gt;  &lt;span class="c"&gt;// Inject at build time with -ldflags "-X main.outPinStr=7"&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;outPinNumber&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;strconv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Atoi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outPinStr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;inPinNumber&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;strconv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Atoi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inPinStr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;outPin&lt;/span&gt; &lt;span class="n"&gt;machine&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Pin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;machine&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Pin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outPinNumber&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;inPin&lt;/span&gt; &lt;span class="n"&gt;machine&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Pin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;machine&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Pin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inPinNumber&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;outPin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Configure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;machine&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PinConfig&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Mode&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;machine&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PinOutput&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="n"&gt;inPin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Configure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;machine&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PinConfig&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Mode&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;machine&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PinInput&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;outPin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inPin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Millisecond&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="m"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The special part about this code is the &lt;code&gt;machine&lt;/code&gt; package that's not a built-in but provided within the build environment of &lt;a href="https://github.com/tinygo-org/tinygo"&gt;tinygo&lt;/a&gt;.&lt;br&gt;
All the heavy-lifting of flasing into our micro-controllers is done by &lt;a href="https://github.com/tinygo-org/tinygo"&gt;tinygo&lt;/a&gt; as well, making it a piece of cake 🍰 to work with micro-controllers.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;tinygo flash &lt;span class="nt"&gt;-target&lt;/span&gt; arduino uno/main.go
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#system-in-action" class="anchor"&gt;
  &lt;/a&gt;
  System in Action
&lt;/h2&gt;

&lt;p&gt;Now it's time for some unveiling and see the system in action 🤩.&lt;br&gt;
The complete source code can be found in &lt;a href="https://github.com/stanleynguyen/go-everywhere"&gt;this repo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/TtHGwHxKqzk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#famous-last-words" class="anchor"&gt;
  &lt;/a&gt;
  Famous Last Words
&lt;/h2&gt;

&lt;p&gt;Just because we can doesn't mean we should.&lt;br&gt;
Go becoming widely adopted and Gophers are going places but that doesn't mean Go should be used in every single possible place.&lt;br&gt;
If there's any lessons that we could learn from Sun's WORE being the programmer's butt of joke, it's to use the right tool for the right job.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#bonus-turning-web-assets-into-go" class="anchor"&gt;
  &lt;/a&gt;
  Bonus: Turning Web Assets into Go
&lt;/h2&gt;

&lt;p&gt;Aren't our web assets part of the system as well?&lt;br&gt;
So to make it completely &lt;code&gt;Go&lt;/code&gt;, we've gotta some how make them part of the Go code.&lt;br&gt;
The most obvious choice for that is to turn them into binaries and embed right inside our backend code.&lt;br&gt;
This task is relatively simple with a wide range of tools to choose from.&lt;br&gt;
For this project, I went with &lt;a href="https://github.com/rakyll/statik"&gt;statik&lt;/a&gt;, and simply generate the embeddings with this command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;statik &lt;span class="nt"&gt;-src&lt;/span&gt; static/ &lt;span class="nt"&gt;-include&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;*&lt;/span&gt;.html,&lt;span class="k"&gt;*&lt;/span&gt;.css,&lt;span class="k"&gt;*&lt;/span&gt;.js,&lt;span class="k"&gt;*&lt;/span&gt;.wasm
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;These embeddings can be used just like a normal file system in my backend code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="s"&gt;"github.com/rakyll/statik/fs"&lt;/span&gt;
    &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="s"&gt;"github.com/stanleynguyen/go-everywhere/statik"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="c"&gt;// serve static site&lt;/span&gt;
    &lt;span class="n"&gt;statikFS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;fs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;fileSys&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FileServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;statikFS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fileSys&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



</description>
      <category>showdev</category>
      <category>go</category>
      <category>javascript</category>
      <category>android</category>
    </item>
    <item>
      <title>Brief touch on map() , filter() and reduce() methods</title>
      <author>Arif Imran</author>
      <pubDate>Mon, 11 Jan 2021 11:48:17 +0000</pubDate>
      <link>https://dev.to/arifimran5/brief-touch-on-map-filter-and-reduce-methods-5g41</link>
      <guid>https://dev.to/arifimran5/brief-touch-on-map-filter-and-reduce-methods-5g41</guid>
      <description>&lt;p&gt;These are a few methods that are highly used in development and knowing these is a must. So let's begin!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#map" class="anchor"&gt;
  &lt;/a&gt;
  Map:
&lt;/h1&gt;

&lt;p&gt;The &lt;code&gt;map()&lt;/code&gt; method creates a new array from an existing one and applies the function to each one of the elements of the first array.&lt;/p&gt;

&lt;p&gt;eg.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;doubled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;doubled&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// [2, 4, 6, 8]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#filter" class="anchor"&gt;
  &lt;/a&gt;
  Filter:
&lt;/h1&gt;

&lt;p&gt;The &lt;code&gt;filter()&lt;/code&gt; method returns the values based on the conditional statement. It checks the condition for each element of the array and if the condition is true is returns it otherwise not. &lt;/p&gt;

&lt;p&gt;eg.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;evens&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;evens&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// [4, 12]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;students&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;abc&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;attendance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;96&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mno&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;attendance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;def&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;attendance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;89&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;jkl&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;attendance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;65&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;xyz&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;attendance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;eligibleStudent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;students&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;student&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;student&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attendance&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;75&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;eligibleStudent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// [ { name: 'abc', grade: 96 }, { name: 'def', grade: 89}]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#reduce" class="anchor"&gt;
  &lt;/a&gt;
  Reduce:
&lt;/h1&gt;

&lt;p&gt;The &lt;code&gt;reduce()&lt;/code&gt; method reduces the array to a single value, executing the provided function on each element of the array.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;currentValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;currentIndex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;initialValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Total (The initialValue, or the previously returned value of the function) and currentValue (value of the current element) are required parameters.  InitialValue is optional, it sets the initial value of the array. If no initialValue is supplied, the first element in the array will be used as the initial. Calling reduce() on an empty array without an initialValue will throw a TypeError.&lt;/p&gt;

&lt;p&gt;e.g.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;euros&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;29.76&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;41.85&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;46.5&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;euros&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;// 118.11&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;pilots&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Poe Dameron&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;years&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Temmin 'Snap' Wexley&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;years&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;41&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Tallissan Lintra&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;years&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;99&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Ello Asty&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;years&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;totalYears&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pilots&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pilot&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;acc&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;pilot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;years&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;totalYears&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//82&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;That's it for this topic. If you learned something, share it with your dev friends. Follow me on &lt;a href="https://twitter.com/aidevv_in"&gt;Twitter&lt;/a&gt; for daily tweets about development and tech stuff. Happy coding 👨‍💻❤.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
      <category>programming</category>
    </item>
    <item>
      <title>Rocking 25+Web Design Trends In 2021😎</title>
      <author>themeselection</author>
      <pubDate>Mon, 11 Jan 2021 11:04:22 +0000</pubDate>
      <link>https://dev.to/theme_selection/web-design-trends-in-2021-1l4n</link>
      <guid>https://dev.to/theme_selection/web-design-trends-in-2021-1l4n</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;“Designs speak louder than words.”&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Well, the web design industry is in constant change and heading towards attaining an exceptional edge over traditional methods. Also, web design has reached a level where it has become crucial to render highly-engaging and communication-oriented websites to the users to accomplish their needs_._ So, one can not deny the fact that these modern website design trends play a  pivotal role in business conversions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So, it is necessary to find out what website design trends are a perfect fit for your type of business.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As we said, the web design industry is constantly changing..!! Every year, the industry showcases various types of trends and it confuses web designers to find the best ones from the long lists.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;So, the question is What are the best website design trends in 2021?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Well, you can rest your search here and take a ride from this detailed article on Web design trends in 2021. We have covered most of the significant trends, Although there's a chance we might have missed some. So, do tell us and suggest your favorite in the comment section.&lt;/p&gt;

&lt;p&gt;Now, Let’s start the ride...!!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rWSLiMkh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4eco0x12jlmk5rk4t5f2.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rWSLiMkh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4eco0x12jlmk5rk4t5f2.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Credit: Tumblr&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#1-neumorphism-in-user-interfaces" class="anchor"&gt;
  &lt;/a&gt;
  1. Neumorphism in user interfaces
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Uy9ZrTdk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/k9lgjd2l6e8yla6ldy0c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Uy9ZrTdk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/k9lgjd2l6e8yla6ldy0c.png" alt="Neumorphism web design trends in 2021"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Credit: By  &lt;a href="https://dribbble.com/mary_tokar"&gt;Mary Tokar&lt;/a&gt;  on  &lt;a href="https://dribbble.com/shots/11202391-Fitness-neumorphism"&gt;Dribbble&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Neumorphism is gaining popularity nowadays, and it is going to be one of the best web design trends in 2021. Neumorphism combines the two concepts,  skeuomorphism, and material design. It applies a  minimalist approach while giving a sense of 3-dimensions in the form of buttons and other elements.&lt;/p&gt;

&lt;p&gt;It is all about the color of the entire screen and delivering an entirely out of the box experience for users. While choosing the color to use, you’ll need to choose a color that compliments the shadows on the neomorphic design. It will give a decent and unique look.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wyZzS4WC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/agi7gjwqdks4zyny3ewt.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wyZzS4WC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/agi7gjwqdks4zyny3ewt.jpeg" alt="Neumorphism"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By  &lt;a href="https://www.freepik.com/pikisuperstar"&gt;PikiSuperstar&lt;/a&gt;  on Freepik&lt;/p&gt;

&lt;p&gt;This trend was largely supplanted by flat design, which simplified icons and colors in a way that was less realistic but more uniform and easily identifiable.&lt;/p&gt;

&lt;p&gt;Design Resources for Neumorphism&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://neumorphism.io/"&gt;Neumorphism&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.adobe.com/in/products/xd.html"&gt;AdobeXD&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.invisionapp.com/studio"&gt;Invision&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.sketch.com/"&gt;Sketch&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can check some examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://dribbble.com/shots/10196092-Tesla-Smart-App"&gt;Tesla Smart App by Gavrisov Dmitri&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://dribbble.com/shots/9800109-Fitness-Device-App"&gt;Fitness Device App by Sergi Mi&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://dribbble.com/shots/14286744-spootifyLogin"&gt;Spotify By Unfriend rabi&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://demo.themesberg.com/neumorphism-ui/"&gt;Neumorphism UI&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://vuse-dark-preview.hexesis.com/dashboard/operational"&gt;Vuse&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.bootstrapdash.com/demo/steelui/template/demo/vertical-default-light/index.html"&gt;Steel UI&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#2-frosted-glass-effects" class="anchor"&gt;
  &lt;/a&gt;
  2. Frosted Glass Effects
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y8K0PTgy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ri6bxoc1ohl322a2d3kv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y8K0PTgy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ri6bxoc1ohl322a2d3kv.png" alt="web design trends in 2021"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Credit:  &lt;a href="https://dribbble.com/shots/14260341-Study-Call-3D-Landing-Page"&gt;Study Call 3D&lt;/a&gt;  By  &lt;a href="https://dribbble.com/ceptarityas"&gt;Ceptari Tyas&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It’s a well-received trend in current times. Besides, it is one of the easiest and cool effects to create and implement. The glassy look adds an awesome touch to the scene. It gives a semi-transparent and blurry appearance of elements behind another.&lt;/p&gt;

&lt;p&gt;Credit: By  &lt;a href="https://dribbble.com/shots/14650014-Frosted-Glass-Credit-Card"&gt;Herdetya Priambodo&lt;/a&gt;  on  &lt;a href="https://dribbble.com/shots/14650014-Frosted-Glass-Credit-Card"&gt;Dribbble&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Recent advances in web technology have allowed the easy implementation of the frosted glass effect on websites. The blurry appearance of elements behind the frosted glass overlay helps add color to an area while also allowing text or objects to appear over the image and remain readable.&lt;/p&gt;

&lt;p&gt;It’s a popular option for designers and it’s been used as a background in place of gradients.&lt;/p&gt;

&lt;p&gt;Check out some examples here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://dribbble.com/shots/14538026-Mooney-Finance-App-Dashboard"&gt;Mooney Finance App Dashboard&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://dribbble.com/shots/6083702-Personal-center-interface"&gt;Personal center interface&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://dribbble.com/shots/14693117-Wallet-Hero-Header"&gt;Wallet&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://dribbble.com/shots/14735446-QERJA-Task-Manager"&gt;Task Manager&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://dribbble.com/shots/12998351-Food-Mobile-APP-Landing-UX-UI-Design"&gt;Food mobile app&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#3-comfortable-colors" class="anchor"&gt;
  &lt;/a&gt;
  3. Comfortable colors
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5CnmAdy3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ss67a43hbp7isrigi27a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5CnmAdy3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ss67a43hbp7isrigi27a.png" alt="web design trends in 2021"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Credit: By  &lt;a href="https://dribbble.com/davinaspriggs"&gt;Davina Spriggs&lt;/a&gt;  on  &lt;a href="https://dribbble.com/shots/14403398-Tea-detox-wellness-web-design"&gt;Dribbble&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;“Excess of anything is harmful”.&lt;/p&gt;

&lt;p&gt;Well, can’t disagree. Dramatic innovations i.e unnecessary usage of fonts, colors, too bright outlay, etc. can be a minus point to your site.&lt;/p&gt;

&lt;p&gt;So, web designers have been taking this into account with color schemes that are easier for the eyes.&lt;/p&gt;

&lt;p&gt;As per the trend, In 2021, web designers will think outside the two extremes of dark and light. They are going with the middle ground like soft color palettes, for example, wholesome greens, pastel blues, warm browns, or light pinks. These not only make website colors less jarring than pure black or pure white, they naturally induce calm and relaxation.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mxU8j4EH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/otqxc2gfnc48e12dfk50.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mxU8j4EH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/otqxc2gfnc48e12dfk50.png" alt="comfortable colors"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Credit: By  &lt;a href="https://dribbble.com/davinaspriggs"&gt;Davina Spriggs&lt;/a&gt;  on  &lt;a href="https://dribbble.com/shots/14525362-Organic-skincare-website-design"&gt;Dribbble&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;“Balanced- as it should be.” -Thanos.😁&lt;/p&gt;

&lt;p&gt;So, this trend overall is something that web designers of the future may be more concerned with accessibility and comfort than the overuse of colors.&lt;/p&gt;

&lt;p&gt;Check out some of the following examples for a better idea:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://dribbble.com/shots/6983598-Website-Visual"&gt;Website visual&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://dribbble.com/shots/14471510-Food-Website-Design"&gt;Food website&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://dribbble.com/shots/12020793-Smoothiely-Food-and-Beverage-Webiste"&gt;Smoothiely — Food and Beverage Website&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://dribbble.com/shots/14240831-Booksy-Online-Book-Shop"&gt;Online Book Shop&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://demo2.pavothemes.com/freshio/home-2/"&gt;Freshio&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some Websites that use comfortable colors:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="http://deeponde.com/"&gt;Deeponde&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://mysa-skincare.com/"&gt;Mysa Skincare&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.swiggy.com/"&gt;Swiggy&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://46parallel.wine/"&gt;46parallel Wine&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="http://www.savagesparkles.co.za/"&gt;Savage Sparkles&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#4-threedimensional-colors" class="anchor"&gt;
  &lt;/a&gt;
  4. Three-dimensional colors
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Bn1m-KpY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6k0kphy7tl07fn3nepm0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bn1m-KpY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6k0kphy7tl07fn3nepm0.png" alt="Three dimensional colors"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Credit:  &lt;a href="https://www.apple.com/in/macos/big-sur/"&gt;Apple&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Everything is turning to 3D. From movies, images, even the colors…!!&lt;/p&gt;

&lt;p&gt;Well, Gradient color schemes in web design have been trending for a while now, and in the 2021 year’s trend feels like the next evolution, with color transitions becoming more lifelike than ever.&lt;/p&gt;

&lt;p&gt;Taking their idea from  &lt;a href="https://www.apple.com/newsroom/2020/06/apple-introduces-macos-big-sur-with-a-beautiful-new-design/"&gt;Apple’s Big Sur OS&lt;/a&gt;, we can expect colors that are saturated and three-dimensional, like a fresh fruit pluck right out of the screen. Splash…!!✨&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OwlMeMgX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rkp4v3pf2cphwjn2ezci.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OwlMeMgX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rkp4v3pf2cphwjn2ezci.png" alt="Three dimensional colors"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Credit: By  &lt;a href="https://dribbble.com/creativemints"&gt;Mike&lt;/a&gt;  On  &lt;a href="https://dribbble.com/shots/8555640-GRAND-Graphic-Design"&gt;Dribbble&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Two colors side by side might abruptly smear together or they may retain the depth and shadows of painted objects. In the end, this trend suggests that the web design trends in 2021 are aspiring to higher realms of realism.🤠&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#5-gradient-color-scheme" class="anchor"&gt;
  &lt;/a&gt;
  5. Gradient color scheme
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A52TtbrP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/km0dxzvtex80maxsbnna.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A52TtbrP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/km0dxzvtex80maxsbnna.png" alt="Chameleon Admin Template"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Credit:  &lt;a href="https://dribbble.com/shots/11399195-Chameleon-Admin-Modern-Bootstrap-4-WebApp-Dashboard-Template"&gt;Chameleon Admin Template&lt;/a&gt;  By  &lt;a href="https://dribbble.com/themeselection"&gt;Themeselection&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Providing diversity in design is a great thing to do. People love unique and creatively engaging designs.&lt;/p&gt;

&lt;p&gt;When it comes to colors, there are hundreds of shades for each color. Gradients simply provide these shad in a very unique way. Now why this trend is getting popular?🙄&lt;/p&gt;

&lt;p&gt;Well firstly, they offer more space for creativity. Secondly, the user is uncertain. On one hand, they love minimalism and on the second side, they tend to think that designer did not try to put work on design when he sees just two colors…!! So, using gradients is a very good option even if you are designing a minimalistic design. And third, the gradient creates an illusion of movement. In short, you can call it an analog of motion design, without animation.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1gSMC1mH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/wpcvwu31hj6l5srdcl3b.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1gSMC1mH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/wpcvwu31hj6l5srdcl3b.jpg" alt="Gradient color scheme"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Credit:  &lt;a href="https://www.instagram.com/"&gt;Instagram&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This trend in graphic design made a come back in 2018, with Instagram’s gradient logo. Since then, It is setting new standards in terms of creativity and interactivity. The results of polls and expert comments show, so far this trend is not going away. So it is one of the best web design trends in 2021.&lt;/p&gt;

&lt;p&gt;A few tips for creating gradients:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Do not choose colors randomly. It must serve the mood of a particular element of the page or product. If you are unsure of what to pick, use the  &lt;a href="https://color.adobe.com/en/create"&gt;Adobe Color Wheel&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt; Use the colors of nature. Green, Yellow, Blue, etc. It attracts the eye of any person. Seeing such colors on the product, the user will be surely impressed.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Following are some Amazing Gradient Color Generators:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://mycolor.space/"&gt;Color Space&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://gradienthunt.com/"&gt;Gradient Hunt&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://webgradients.com/"&gt;Web Gradients&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://gradienta.io/"&gt;Gradienta&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://uigradients.com/#SweetMorning"&gt;UI Gradients&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://cssgradient.io/"&gt;CSS Gradient&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some websites that use gradient scheme:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://www.sleepiest.com/"&gt;Sleepiest&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://rested.co/"&gt;Rested&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://delibroom.com/"&gt;Delibroom&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#6-interactive-3d-content" class="anchor"&gt;
  &lt;/a&gt;
  6. Interactive 3d Content
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q6IBBdJQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2ob57ieiwx2w2nxzw8pa.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q6IBBdJQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2ob57ieiwx2w2nxzw8pa.gif" alt="Interactive 3d content"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Credit:  &lt;a href="https://www.uplabs.com/xeniac"&gt;Xeniac&lt;/a&gt;  on  &lt;a href="https://www.uplabs.com/"&gt;Uplabs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3D is definitely the hot trend in web designing. It is captivating, engaging, exciting, and gives an awesome feel to visitors.&lt;/p&gt;

&lt;p&gt;Well, thanks to modern web technologies, web designers can fulfill their wish to make an awesome website that stands out from the average webpage.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--92M8DXeg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/g51tamf35ux7pt6tgna9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--92M8DXeg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/g51tamf35ux7pt6tgna9.png" alt="Interactive 3d content"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Credit: By  &lt;a href="https://dribbble.com/shots/14600147-Remote-Working-Landing-Page"&gt;Ilham Maulana&lt;/a&gt;  On  &lt;a href="https://dribbble.com/shots/14600147-Remote-Working-Landing-Page"&gt;Dribbble&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3D elements have been in trends for a long time and it is one of the evergreen trends that is not going away soon. So, unleash your creativeness with the astonishing 3D elements.😍&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s6Nr_6EQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/25xf88baewcv35iw5856.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s6Nr_6EQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/25xf88baewcv35iw5856.jpg" alt="Avatarz"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Credit:  &lt;a href="https://www.avatarz.design/"&gt;Avatarz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here are some good examples&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://dribbble.com/shots/14707666-Delivery-Landing-page-UI-UX-Design"&gt;Food Delivery&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://dribbble.com/shots/14510815-Web-site-3D-illustration"&gt;Website 3d illustrations&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://dribbble.com/shots/12031525-Landing-Page-UX-UI-Design"&gt;Landing Page Design&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Check some websites which use 3d contents:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://zen.ly/"&gt;Zenly&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://sapiens.ui8.net/6f3c3c2"&gt;Sapiens&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://getuniq.me/en/"&gt;GetUniq&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#7-material-design" class="anchor"&gt;
  &lt;/a&gt;
  7. Material Design
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u7enolrB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hg2o6sw474vq40vgsnn8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u7enolrB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hg2o6sw474vq40vgsnn8.png" alt="Materialize Admin Template"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Credit:  &lt;a href="https://pixinvent.com/materialize-material-design-admin-template/landing/"&gt;Materialize Admin Template&lt;/a&gt;  by  &lt;a href="https://pixinvent.com/"&gt;Pixinvent&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://material.io/design/"&gt;Material design&lt;/a&gt;  is a design language that was introduced by Google back in 2014. Most of the time traditional web design looks flat. Now, as you can see in the image above, the Material design allows using color and shadows to imitate the physical world and its textures.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EB0Rgynl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/d3k5qtiiq0pn2jemr4s5.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EB0Rgynl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/d3k5qtiiq0pn2jemr4s5.gif" alt="Material design"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Credit: By  &lt;a href="https://dribbble.com/jbbardoles"&gt;Jovie Brett Bardoles&lt;/a&gt;  on  &lt;a href="https://dribbble.com/"&gt;Dribbble&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It’s actually a natural continuation of the biggest trend in the design world during the past few years: flat design. Also, Material can do something that flat couldn’t, it adds just enough embellishment to enhance usability. Instead of taking everything away to favor visual appeal, the aim of Material Design is usability.&lt;/p&gt;

&lt;p&gt;It is surely going to dominate web design trends in 2021 as it has done in past.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#8-dark-mode-and-low-light-ux-web-design-trends" class="anchor"&gt;
  &lt;/a&gt;
  8. Dark Mode and Low Light UX Web Design Trends
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ehasjr8G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ao1qt4nvmpg2u82d2szp.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ehasjr8G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ao1qt4nvmpg2u82d2szp.jpg" alt="Web Design Trends In 2021"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Credit: &lt;a href="https://pixinvent.com/demo/vuexy-vuejs-admin-dashboard-template/demo-4/dashboard/ecommerce"&gt;Vuexy Vuejs Admin Template&lt;/a&gt;  by  &lt;a href="https://pixinvent.com/"&gt;Pixinvent&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One of the hottest web design trends for 2021 is dark mode.&lt;/p&gt;

&lt;p&gt;You probably love dark modes right? Be it a theatre or any app, darkness is something you prefer!! You sure you are not a vampire.?😁&lt;/p&gt;

&lt;p&gt;Anyway, dark mode, night shift, and other low light user interface options are in trend mostly because they provide users with a low-contrast site or app that is easier to look at in low light environments.&lt;/p&gt;

&lt;p&gt;Also, black is a particularly strong color that hits strong emotions in people and could easily overpower an individual when it’s overdone. The dark mode is particularly useful when you want to highlight a specific type of content.  &lt;a href="https://www.spotify.com/"&gt;Spotify&lt;/a&gt;,  &lt;a href="https://www.netflix.com/"&gt;Netflix&lt;/a&gt;,  &lt;a href="https://store.steampowered.com/"&gt;Steam&lt;/a&gt;  are designed in dark mode. While,  &lt;a href="https://www.instagram.com/"&gt;Instagram&lt;/a&gt;,  &lt;a href="https://twitter.com/"&gt;Twitter&lt;/a&gt;,  &lt;a href="https://www.apple.com/in/"&gt;Apple&lt;/a&gt;, and  &lt;a href="https://www.android.com/intl/en_in/"&gt;Android&lt;/a&gt;  are some of the most popular apps and services that offer dark mode.&lt;/p&gt;

&lt;p&gt;Here are the main reasons for the trend:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  It gives an ultra-modern and cool look&lt;/li&gt;
&lt;li&gt;  It saves device battery power (in case of OLED/AMOLED screens)&lt;/li&gt;
&lt;li&gt;  It allows pooping and highlighting other design elements&lt;/li&gt;
&lt;li&gt;  It reduces eye strain in low-light conditions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Although, one should not ignore the fact that, Anything in excess is harmful. So, use it carefully…!!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Here is a detailed article on  &lt;a href="https://wpamelia.com/dark-background/"&gt;Why to use dark background&lt;/a&gt;?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#9-minimalism-flat-design" class="anchor"&gt;
  &lt;/a&gt;
  9. Minimalism (Flat Design):
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MIje-OXc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/odfrxprre43nrt2cxwg9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MIje-OXc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/odfrxprre43nrt2cxwg9.png" alt="Sneat Dashboard UI Kit"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Credit:  &lt;a href="https://dribbble.com/shots/14014263-Sneat-E-Commerce-Dashboard-UI-Kit"&gt;Sneat E-Commerce Dashboard &amp;amp; UI Kit&lt;/a&gt;  By  &lt;a href="https://dribbble.com/themeselection"&gt;Themeselection&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;“It’s not about quantity, It’s about quality.”&lt;/p&gt;

&lt;p&gt;The current age is developing an interest in a minimalistic approach. Be it’s about cloth or furniture or even  &lt;strong&gt;web design&lt;/strong&gt;..!! Simple and sophisticated attire attracts more as it simplifies the user experience. Too much use of objects, fonts, the animation may ruin it. So, to hold the visitors to your website keep one thing in mind: The cleaner the site, the better the experience, the lower the bounce rate.&lt;/p&gt;

&lt;p&gt;While designing, one should know that every item you are using in a design, whether Fonts, an image, or copy, must have a purpose; it shouldn’t be used unless it’s necessary to deliver the message clearly. Although, be sure that you aren’t making your users’ primary tasks more complex by eliminating or hiding content that they need. The aim is to make the message more clear, not more hidden.&lt;/p&gt;

&lt;p&gt;The main aspects of minimalism in web design:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Hidden navigation&lt;/li&gt;
&lt;li&gt;  User-friendly interface&lt;/li&gt;
&lt;li&gt;  Navigation space&lt;/li&gt;
&lt;li&gt;  Using fonts creatively&lt;/li&gt;
&lt;li&gt;  Three colors max at once&lt;/li&gt;
&lt;li&gt;  Avoid excess of details: color transitions, shadows, textures&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Websites with minimal design:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://coaxsoft.com/"&gt;coaxsoft&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.sperry.com/en/home"&gt;Sperry&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.nike.com/"&gt;Nike&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.kamu-breda.nl/"&gt;Kamu&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;You can check this detailed article for reference:  &lt;a href="https://medium.muz.li/best-practices-for-minimalist-website-design-9e8ea07e17c2"&gt;Best practices for minimalist website design&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#10-handdrawn-elements" class="anchor"&gt;
  &lt;/a&gt;
  10. Hand-drawn elements
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hJsl6wkB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8x2fmd51w3yndtegrmd9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hJsl6wkB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8x2fmd51w3yndtegrmd9.png" alt="Hand drawn elements"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Credit: By  &lt;a href="https://dribbble.com/olilish"&gt;Oli Lisher&lt;/a&gt;  On  &lt;a href="https://dribbble.com/shots/14240446-Demuxed-conference-2020"&gt;Dribbble&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The old saying “A picture is worth a thousand words” is still relevant to today’s experiences. Visuals attract faster than text, and this natural property of photos and illustrations or sketch make them very useful for visual design. As the main motive of any web designer is to present the site in a fashionable and interesting way to attract traffic. To grab the attention of the users, designers try new ideas in their projects which eventually lead to the introduction of hand-drawn elements.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--boqhnA-5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/itsobp1thktt6jltvw6n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--boqhnA-5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/itsobp1thktt6jltvw6n.png" alt="Hand drawn elements"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Credit: By  &lt;a href="https://dribbble.com/BySitges"&gt;Angela Santos&lt;/a&gt;  On  &lt;a href="https://dribbble.com/shots/14337052-Digital-Marketing-Landing-Page"&gt;Dribbble&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Since hand-drawing is a typical feature of graphic artists, designers, and illustrators and is often associated with creativity and inspiration, it is often used in portfolios and showcases.&lt;/p&gt;

&lt;p&gt;If we see the new trend (of course not too new), designers are bringing back sketches as a form of design. For sure, hand-drawn art is one of the popular styles that is adopted into web designs. Using these sketchy designs to convey and reflect individual styles is surely a good idea.&lt;/p&gt;

&lt;p&gt;Have a look at some websites that are following this trend:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://www.handwrytten.com/"&gt;Handwrytten&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://metamusic.ca/"&gt;Metamusic&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.equalparts.studio/"&gt;Equalparts&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#11-chatbots" class="anchor"&gt;
  &lt;/a&gt;
  11. ChatBots
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--adWvhCtW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/txbkfeppalg7a40d5i78.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--adWvhCtW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/txbkfeppalg7a40d5i78.gif" alt="Chatbots"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Credits: By  &lt;a href="https://dribbble.com/vicbell"&gt;Vic Bell&lt;/a&gt;  on  &lt;a href="https://dribbble.com/"&gt;Dribbble&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bots have been an amusement for all. It fascinates people that a machine or program can do the tasks and even communicate..!! It gives an advanced feel to the person.&lt;/p&gt;

&lt;p&gt;Clearly, chatbots are an awesome and interactive feature that has been popular for a few years and it will continue to be relevant in 2021, as well. As the demand for artificial intelligence and machine learning increases, chatbots are going to be the norm for simple customer service requests and personal shopping.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uPxpnF3O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7d8nwwwrlwd9alze61qi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uPxpnF3O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7d8nwwwrlwd9alze61qi.png" alt="Chatbots"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For example, if a customer visits your website, looking for specific products and the chatbot knows they have it available. The chatbot can let them know about it. This experience can lead to a positive impression for the customer and can tackle the business with customer support in absence of a live person. This way you can also make your website preferable for all customers and visitors across the globe.&lt;/p&gt;

&lt;p&gt;Here are some of the best Chatbot providers:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://www.drift.com/"&gt;Drift&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://manychat.com/"&gt;ManyChat&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  Chatfuel&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://hellotars.com/"&gt;Tars&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.tidio.com/"&gt;Tidio&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Advantages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Improves Customer Service&lt;/li&gt;
&lt;li&gt;  Easier Approach to Global Markets&lt;/li&gt;
&lt;li&gt;  Increases Customer Engagement&lt;/li&gt;
&lt;li&gt;  Keeping Up with the Trends: Being Present on Messaging Platforms&lt;/li&gt;
&lt;li&gt;  Monitors Consumer Data &amp;amp; Gaining Insights&lt;/li&gt;
&lt;li&gt;  Better Lead Generation, Qualification, and Nurturing&lt;/li&gt;
&lt;li&gt;  Cost Savings&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#12-voice-user-interfaces-vuis" class="anchor"&gt;
  &lt;/a&gt;
  12. Voice user interfaces (VUIs)
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BRO03BMj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rwxyejiq7cgiw1b512sp.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BRO03BMj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rwxyejiq7cgiw1b512sp.gif" alt="Voice user interfaces"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Credit:  &lt;a href="https://dribbble.com/shots/5339502-Echo-Show-Play-Video"&gt;Echo show Play&lt;/a&gt;  by  &lt;a href="https://dribbble.com/theronb"&gt;Theron Benson&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Voice user interfaces (VUIs) allow the user to interact with a system through voice or speech commands. Virtual assistants, such as Siri, Google Assistant, and Alexa, are examples of VUIs.&lt;/p&gt;

&lt;p&gt;Remember the days when we have to wait to get information for a long time after searching it on google? And now we just have to command…!! Are we getting lazy or what..!?😂&lt;/p&gt;

&lt;p&gt;Well, it is actually fascinating to get information on your one command..!!? All you have to do is just ask what’s in your mind and boom the result is there in a moment. It’s a new norm now. The way of interactions with service is changing and even web design is adjusting to keep up with the prevalence of voice chatbots and virtual assistants.&lt;/p&gt;

&lt;p&gt;Advantages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Handsfree&lt;/li&gt;
&lt;li&gt;  Intuitive&lt;/li&gt;
&lt;li&gt;  Speedy&lt;/li&gt;
&lt;li&gt;  Interactive&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;They kind of made it easy the way we search for information, take notes, and so on. Brands like Apple, Android, and Google implement the trend in their UI/UX design process&lt;/p&gt;

&lt;p&gt;Although, a voice-activated interface isn’t commonplace for most websites, yet this emerging trend isn’t something you can ignore…&lt;/p&gt;

&lt;p&gt;We can expect to see more and more websites integrating voice search as an option to traditional text search. So, keep this in mind.✌&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can check this article for more details:  &lt;a href="https://www.toptal.com/designers/ui/designing-a-vui"&gt;Designing a VUI — Voice User Interface&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#13-web-accessibility" class="anchor"&gt;
  &lt;/a&gt;
  13. Web Accessibility
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H7GWpgqf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/uhar143c9wv915i0opsa.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H7GWpgqf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/uhar143c9wv915i0opsa.jpeg" alt="Web Accessibility"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Credit:  &lt;a href="https://www.google.com/imghp"&gt;Google Images&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are currently more than &lt;a href="https://www.inclusivecitymaker.com/disabled-people-in-the-world-in-2019-facts-and-figures/"&gt;&lt;strong&gt;2 billion disabled&lt;/strong&gt;&lt;/a&gt; people in the world, which is 37.5% of the world’s population. So it is necessary that you design in a way that these audiences can have access to your websites as well.&lt;/p&gt;

&lt;p&gt;So, basically, web accessibility means that websites, tools, and technologies are designed and developed in a way so that all kinds of the audience can use it including people with disabilities. More specifically, people can:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Understand, perceive, navigate, and interact with the Web&lt;/li&gt;
&lt;li&gt;  contribute to the Web&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Elements that improve accessibility include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Creating suitable color contrast between text and backgrounds;&lt;/li&gt;
&lt;li&gt;  Focus indicators, for example, the rectangular outline that shows up around links when using keyboard navigation;&lt;/li&gt;
&lt;li&gt;  Using labels and instructions with form fields rather than low-context placeholder text;&lt;/li&gt;
&lt;li&gt;  Using functional alt tags for images (which also boosts SEO!)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Web accessibility is not just a trend, it is an important factor as the web and internet have become important parts of our lives. web accessibility allows people with disabilities to be able to have equal access to the important services/features the web provides, such as online shopping, education, health service, recreation, and more. It also increases conversion, boosts your SEO, and help you reach a bigger audience.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2PRarS0S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/15crrapm5uzllub4enm1.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2PRarS0S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/15crrapm5uzllub4enm1.jpeg" alt="Web accessibility"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can check the article  &lt;a href="https://www.w3.org/WAI/fundamentals/accessibility-intro/"&gt;Introduction to Web Accessibility&lt;/a&gt;. Here is a free tutorial that you can check :  &lt;a href="https://www.udacity.com/course/web-accessibility--ud891"&gt;https://www.udacity.com/course/web-accessibility--ud891&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#14-interactivity" class="anchor"&gt;
  &lt;/a&gt;
  14. Interactivity
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZhEsaS0k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/c4nvfjqacm2x755vdsx6.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZhEsaS0k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/c4nvfjqacm2x755vdsx6.gif" alt="Interactivity"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Credit: By  &lt;a href="https://dribbble.com/cuberto"&gt;Cuberto&lt;/a&gt;  on  &lt;a href="https://dribbble.com/shots/14679084-Software-Developer-Website-Interaction"&gt;Dribbble&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;How will you feel, if you open a site and you find it not interactive at all..!! You probably are not going to visit it again. Right?&lt;/p&gt;

&lt;p&gt;That’s why interactive design is an essential part of designers. Interactive elements like questions, quizzes, polls, and other engaging graphics will help keep interested in your site. It’ll also help to reduce the bounce rate as visitors are more likely to stay on your site.&lt;/p&gt;

&lt;p&gt;It is a great way to provide value for visitors, get them to engage with your website, and learn more about them. If your design is interactive it will automatically create curiosity as well as interest for your company as well. Make sure you keep this in check while designing your new website.!!&lt;/p&gt;

&lt;p&gt;Examples of interactive marketing include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Assessments like quizzes&lt;/li&gt;
&lt;li&gt;  Polls and surveys&lt;/li&gt;
&lt;li&gt;  Feedback section&lt;/li&gt;
&lt;li&gt;  Reviews&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Following are some examples of interactive websites:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://webflow.com/ix2"&gt;Webflow&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="http://www.polishchristmasguide.com/"&gt;Polish&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="http://www.polishchristmasguide.com/"&gt;Christmas&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="http://www.polishchristmasguide.com/"&gt;Guide&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="http://www.cyclemon.com/mobile/"&gt;Cyclemon&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="http://www.climber.io/"&gt;Climber&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#15-virtual-reality" class="anchor"&gt;
  &lt;/a&gt;
  15. Virtual Reality
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1dpNfT0---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/g3qqp4uphmmbxz6zvw70.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1dpNfT0---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/g3qqp4uphmmbxz6zvw70.gif" alt="Virtual Reality"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Credit:  &lt;a href="https://dribbble.com/V_Kurbatov"&gt;Volodymyr Kurbatov&lt;/a&gt;  on  &lt;a href="https://dribbble.com/shots/11547006-Home-Office-in-Mixed-Reality"&gt;Dribbble&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;How cool it looked in the movie Iron-man..!!? Very fancy.😎&lt;/p&gt;

&lt;p&gt;Well, not that advanced but still, VR is becoming a trend in all sectors. Be it gaming, e-commerce even the web designing world is not left out from this list.&lt;/p&gt;

&lt;p&gt;Most of the time visitor gets confused about how a specific thing, cloth, or product will go..!! Even though they like the product, they want to make sure or want to get an idea of how it will set. That’s where VR or AR comes to help..!!&lt;/p&gt;

&lt;p&gt;VR experiences on websites will keep increasing over the coming years. Think of furniture sites like IKEA that showcases what furniture would look like in your room..!!&lt;/p&gt;

&lt;p&gt;VR can surely be a powerful tool for a website to convey meaningful, interacting, and useful, content to a site visitor in a way that helps them make buying decisions more easily.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#16-micro-interactions" class="anchor"&gt;
  &lt;/a&gt;
  16. Micro Interactions
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UuMXtPgE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/44w62pll1h0okf7v5n6k.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UuMXtPgE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/44w62pll1h0okf7v5n6k.gif" alt="Micro Interactions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Credit: By  &lt;a href="https://dribbble.com/pedroaquinofx"&gt;Pedro Aquino&lt;/a&gt;  on  &lt;a href="https://dribbble.com/"&gt;Dribbble&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Micro animations are small animations. But don’t take small for insignificant here..!! Micro animations are very helpful when it comes to guiding users through their interactions with your website.&lt;/p&gt;

&lt;p&gt;That’s the reason micro animations are one of the web design trends in 2021 for web designers. eCommerce sites are using micro animations to enhance user experience and give shoppers a taste of their products.&lt;/p&gt;

&lt;p&gt;There are 4 basic parts of micro-interaction:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Trigger&lt;/li&gt;
&lt;li&gt;  Rules&lt;/li&gt;
&lt;li&gt;  Feedback&lt;/li&gt;
&lt;li&gt;  Loops and Modes&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;For more detail Check  &lt;a href="https://medium.com/@KrishaWeb/overview-and-proper-utilization-of-micro-interactions-to-enhance-a-websites-ux-design-7155c9179c52"&gt;Overview and proper utilization of micro-interactions to enhance a website's UX design&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#17-micro-animations" class="anchor"&gt;
  &lt;/a&gt;
  17. Micro Animations
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SDlbUp27--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/m2pt9xmo9kdtpw41bra0.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SDlbUp27--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/m2pt9xmo9kdtpw41bra0.gif" alt="Micro Animations"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Credit:  &lt;a href="https://dribbble.com/shots/12332587-Dashboard-Micro-animations"&gt;Micro Animations&lt;/a&gt;  By  &lt;a href="https://dribbble.com/AleksFaure"&gt;Aleks Faure&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As the name suggests, micro animations are small animations. But in this case, small doesn’t mean insignificant. They are extremely helpful when it comes to guiding users through their interactions with your website. Micro animations have been popular for a few years, but in 2021, it’ll be about using them organically.&lt;/p&gt;

&lt;p&gt;One of the current web design trends for e-commerce sites is using micro animations to level up the user experience and give shoppers a taste of their products. For example, this yoga clothing store is already using micro animations to show shoppers how their clothes fit and move on real people:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vW1UuyMi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/1b2z36plhzlfdxdrmnvk.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vW1UuyMi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/1b2z36plhzlfdxdrmnvk.gif" alt="Micro Animations"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#18-textonly-hero-images" class="anchor"&gt;
  &lt;/a&gt;
  18. Text-Only Hero Images
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qwbf1dZW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/z74ddfeu1biipd9bqiql.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qwbf1dZW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/z74ddfeu1biipd9bqiql.jpeg" alt="Apple"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Credit:  &lt;a href="https://www.apple.com/"&gt;Apple&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;“Change is the only constant.” ✌&lt;/p&gt;

&lt;p&gt;Gone are the days when text blended photos were ruling the design world. Now, big, fat, bold typography, with no videos and photography, used in a monochromatic color scheme is one of the new hot trends for 2021. It was on pick throughout the year 2020 as well.&lt;/p&gt;

&lt;p&gt;The top of a page is known as the “hero section.” The current scenario that has attracted internet users’ attention is replacing typical background images with eye-catching typography. A bold, unique font is enough to get a user’s attention quickly.🤩&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KkywwSSa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vi9xqjnyi0bui54kuduc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KkywwSSa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vi9xqjnyi0bui54kuduc.png" alt="Text-Only Hero Images web design trends in 2021"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Credit:  &lt;a href="https://dribbble.com/Tubik"&gt;Tubik&lt;/a&gt;  On  &lt;a href="https://dribbble.com/shots/12664952-Mobile-Banking-Service-Website"&gt;Dribbble&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You see how properly they have used fonts behind the object i.e cycle. It delivers the motto of the site without unnecessary objects and design.&lt;/p&gt;

&lt;p&gt;Here are some websites with hero images:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://abhishekjha.me/muteza/"&gt;Muteza&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://store.google.com/us/product/pixel_5"&gt;Google Pixel&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.viesus.com/"&gt;Viesus&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#19-data-visualization" class="anchor"&gt;
  &lt;/a&gt;
  19. Data Visualization
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rbpwiwwl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/umar5yv9tgmwieg9rop3.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rbpwiwwl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/umar5yv9tgmwieg9rop3.gif" alt="Data Visualization"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Credit:  &lt;a href="https://dribbble.com/ningxiaodong"&gt;Ning xiao dong&lt;/a&gt;  on  &lt;a href="https://dribbble.com/"&gt;Dribbble&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We all have liked Iron-man’s data visualization tech. Seems cool eh..!!😎All the data on one screen. But let’s come to reality.&lt;/p&gt;

&lt;p&gt;Data visualization and animated elements play a significant role in modern graphic design and communicating data in an interactive and engaging way is hard. But the struggle worths it, because data visualization is advantageous as humans are visual creatures, and visuals convey the message you need to get across. Data visualization generates images out of your data to engage with the visitor and makes them curious about your brand. Infographics and graphs are some of the most popular ways to bring data to life.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TqYjEfTH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lzg27ekcxju542tnc9nf.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TqYjEfTH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lzg27ekcxju542tnc9nf.gif" alt="Web design Trends 2021"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Credit:  &lt;a href="https://dribbble.com/shots/13973458-Sneat-Dashboard-UI-Kit"&gt;Sneat UI Kit&lt;/a&gt;  on  &lt;a href="https://dribbble.com/"&gt;Dribbble&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using data visualization is a good choice. Firstly, you will save the potential client from long page scrolling. Secondly, you can convey information more clearly. Third, this effect will play the role of the business cards of the company. Your customer is more likely to remember this.😉&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#20-thumbfriendly-mobile-navigation" class="anchor"&gt;
  &lt;/a&gt;
  20. Thumb-Friendly Mobile Navigation
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_73NzvCw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4bfqwib9v8edtsh4mrbt.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_73NzvCw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4bfqwib9v8edtsh4mrbt.gif" alt="Thumb-Friendly Mobile Navigation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Credit: By  &lt;a href="https://dribbble.com/ranjithmanoharan"&gt;Ranjith Manoharan&lt;/a&gt;  On  &lt;a href="https://dribbble.com/shots/6869746-Twitter-Search"&gt;Dribbble&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We all love it when all we have to use is our thumb.👍🏻 So, that’s what’s the aim: Making navigation easier and smooth. In the current scenario where there are  &lt;a href="https://www.bankmycell.com/blog/how-many-phones-are-in-the-world"&gt;3.40 billion smartphone users&lt;/a&gt;  globally (That’s a huge number indeed.😯), it is essential to make your website mobile-friendly and thumb-friendly as well. It directly boosts your site’s impression and your company’s impression as well.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QXuLP0El--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/tfs9l8h9awwsm3vkkdij.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QXuLP0El--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/tfs9l8h9awwsm3vkkdij.png" alt="Thumb-Friendly Mobile Navigation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Credit: By  &lt;a href="https://dribbble.com/nimit"&gt;Nimit Dholakia&lt;/a&gt;  On  &lt;a href="https://dribbble.com/shots/9756551-Thumb-Friendly-Heat-Map-Analysis"&gt;Dribbble&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, putting the menu, navigation bar, and even contact buttons in the space your thumb hover (most of the time the center of the screen) makes your site more comfortable to use and improves the UX.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#21-white-space" class="anchor"&gt;
  &lt;/a&gt;
  21. White Space
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--raZOqiYa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/636/1%2AXgKjiWzh5_R1CczSAN-Npg.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--raZOqiYa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/636/1%2AXgKjiWzh5_R1CczSAN-Npg.jpeg" alt="Image for post"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Credit:  &lt;a href="https://www.apple.com/in/"&gt;Apple&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A well-crafted design with a minimalistic approach is something every web designer loves, as it is easy to deliver the message as well as the required information.&lt;/p&gt;

&lt;p&gt;White space also known as negative space is about giving the content room to breathe, not trying to mess up the most information possible on the screen.&lt;/p&gt;

&lt;p&gt;Advantages of using white space.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  A relaxing experience for your website visitors&lt;/li&gt;
&lt;li&gt;  The content stands out better&lt;/li&gt;
&lt;li&gt;  Improvised readability&lt;/li&gt;
&lt;li&gt;  Coveys the clear message&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Following are some website examples that you can check:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://www.getquip.com/"&gt;Quip&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.apple.com/macbook-air/?ref=land-book.com"&gt;Apple&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.dropbox.com/"&gt;Dropbox&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.owllabs.com/"&gt;OwlLabs&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.squarespace.com/"&gt;Squarespace&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Although, do keep one thing in mind that white space is just the term for spacing we give between elements. It does not need to be white, as long as the area is empty.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can check this article:  &lt;a href="https://webdesign.tutsplus.com/articles/using-white-space-or-negative-space-in-your-designs--webdesign-3401"&gt;Using white space or negative space in your designs Webdesign&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#22-illustrations" class="anchor"&gt;
  &lt;/a&gt;
  22. Illustrations
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZtUpoH5B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/3000/1%2AXZ5AKbWxpypzwzeWTtWQdg.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZtUpoH5B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/3000/1%2AXZ5AKbWxpypzwzeWTtWQdg.jpeg" alt="Image for post"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By  &lt;a href="https://www.freepik.com/pikisuperstar"&gt;Pikisuperstar&lt;/a&gt;  on  &lt;a href="https://www.freepik.com/home"&gt;Freepik&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Illustrations are fun, engaging, and kind of relate to the visitor’s moods, too.&lt;/p&gt;

&lt;p&gt;It sparks the emotion of joy and refreshment. Because sometimes browsing the web feels like seeing the same stock photos used across many websites. It can make a website feel boring, generic, and bland.&lt;/p&gt;

&lt;p&gt;The illustration is a vibrant and awesome form of visual communication. It combines the message clarity of graphic design and the expressive capacity of fine arts. At its peak, the illustration does something that photography can’t. It portrays what is familiar from a perspective that is unattainable with human eyes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eEt54fM4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1440/1%2AtziYhLDDMjyNnBq9yL8aGQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eEt54fM4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1440/1%2AtziYhLDDMjyNnBq9yL8aGQ.png" alt="Web design trends in 2021"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Credit:  &lt;a href="http://1.envato.market/vuexy-figma-template"&gt;Vuexy Figma Template&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Following are some amazing resources for illustrations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://www.humaaans.com/"&gt;Humaaans&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="http://drawkit.io/"&gt;Drawkit&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://avataaars.com/"&gt;Avataaars&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://freellustrations.com/"&gt;Freeillustration&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://blush.design/"&gt;Blush&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.opendoodles.com/"&gt;Open Doodles&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://stubborn.fun/"&gt;Stubborngenerator&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In recent times, brands are experimenting, and using illustration online is one of the best things to happen to the web design world and it will be on the list of web design trends in 2021 as well.!!&lt;/p&gt;

&lt;p&gt;Have a look at some good examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://christmashq.com/"&gt;ChristmasHQ&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://designmodo.com/"&gt;Designmodo&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://digitalbro.net/"&gt;Digitalbro&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.usmobile.com/"&gt;USMobile&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#23-full-height-homepage-hero" class="anchor"&gt;
  &lt;/a&gt;
  23. Full Height Homepage Hero
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I4v-P8Ob--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1355/1%2AMgOK7XqtXOBYYa21a8cCjw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I4v-P8Ob--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1355/1%2AMgOK7XqtXOBYYa21a8cCjw.png" alt="Image for post"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Credit: By  &lt;a href="https://dribbble.com/zahidvector"&gt;Zahidul&lt;/a&gt;  on  &lt;a href="https://dribbble.com/"&gt;Dribbble&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The full-screen hero section is basically the top part of the image. This section mainly uses Images that convey the message in a more clear way to the visitor. A website hero image fills the screen or a large portion of the screen with an image. It’s typically a background image with type and/or other design elements in the foreground.&lt;/p&gt;

&lt;p&gt;This trend is getting popular nowadays. A hero image serves as a powerful dominant element that communicates the primary message quickly.&lt;/p&gt;

&lt;p&gt;Like a giant billboard, making your homepage hero section full-height can focus your users’ attention and serve as distraction-free messaging.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6JKZiCZs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1348/1%2AnShR2zeLR84grGzn3RPsWw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6JKZiCZs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1348/1%2AnShR2zeLR84grGzn3RPsWw.png" alt="Image for post"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Credit: By  &lt;a href="https://dribbble.com/mazepixel"&gt;Emy Lascan&lt;/a&gt;  on  &lt;a href="https://dribbble.com/shots/10835954-Online-Beauty-Salon-Website-Hero-Design"&gt;Dribbble&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Advantages of a Hero image design:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Visual appeal&lt;/li&gt;
&lt;li&gt;  Text readability&lt;/li&gt;
&lt;li&gt;  Interactivity&lt;/li&gt;
&lt;li&gt;  Storytelling&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Following are some useful websites:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://dribbble.com/shots/5934272-Architecture-Magazine-Website"&gt;Architecture Magazine Website&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://dribbble.com/shots/5426766-Hero-image-Illustration-for-wild-press"&gt;Hero Image Illustration for Wild Press&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://dribbble.com/shots/5443807-Books-for-Children-Website"&gt;Books for Children Website&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://dribbble.com/shots/5752843-Activitrack-hero-illustration-exploration"&gt;Activitrack — Hero Illustration Exploration&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Take the full-screen hero sections as an opportunity for perfect storytelling. Although, keep in mind that images will crop differently based on browser dimensions. You should use an image that serves the purpose accordingly.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#24-using-videos" class="anchor"&gt;
  &lt;/a&gt;
  24. Using videos
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4ABeItUC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/600/1%2AVMSNz9zGD1iKJZ5ypSv2Yg.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4ABeItUC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/600/1%2AVMSNz9zGD1iKJZ5ypSv2Yg.gif" alt="Image for post"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Credit:  &lt;a href="http://www.artcopycode.com/campaign/art-copy-code"&gt;Art Copy &amp;amp; Code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Visuals are always catchy and interactive..!! Isn’t it..?&lt;/p&gt;

&lt;p&gt;Well, using a video on your website’s homepage is surely the best idea as it is one of the noteworthy design trends for 2021. Because when you use a series of short video clips in the background of your website homepage, the design serves as a great way to showcase your services and your positive company image.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lODyOKzT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/600/1%2AJdEUBYAvUACx38M0juBXag.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lODyOKzT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/600/1%2AJdEUBYAvUACx38M0juBXag.gif" alt="Image for post"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Credit:  &lt;a href="https://obpagency.com/"&gt;OBPAgency&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When users visit your website, they immediately get an impression of the company, what it offers, and how your team interacts. Basically, it affects the customer's interaction with your website.&lt;/p&gt;

&lt;p&gt;While the video is great, it needs to be thought out. Video with a purpose and meaning. Embedding YouTube videos on your site are not more in trend as one well-thought-out, high-quality video is better than a dozen haphazardly assembled ones.&lt;/p&gt;

&lt;p&gt;So it is highly recommended to use videos on your homepage if you’re creating a new website in 2021.👍🏻&lt;/p&gt;

&lt;p&gt;Sites that are using this trend well:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://spark44.com/"&gt;Sparks44&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://answerthepublic.com/"&gt;Answerthepublic&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.pp-performance.de/"&gt;pp-performance&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.hondersalting.nl/"&gt;Hondersalting&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.yin-mindfulness.com/"&gt;Yinmindfulness&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#25-floating-elements" class="anchor"&gt;
  &lt;/a&gt;
  25. Floating Elements
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8zXFmS7p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/600/1%2AbklEZgxscpM-n7PtEOw4Xw.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8zXFmS7p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/600/1%2AbklEZgxscpM-n7PtEOw4Xw.gif" alt="Image for post"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Credit:  &lt;a href="https://dribbble.com/shots/14080237-Folio-Agency-Portfolio-Kit"&gt;Folio&lt;/a&gt; By  &lt;a href="https://dribbble.com/tranmautritam"&gt;Tran Mau Tri Tam&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another interactive and visually appealing thing to have on your website..!!&lt;/p&gt;

&lt;p&gt;Well, Soft shadows and floating elements add interest and depth which gives your web page a “3D Lite” look. That makes it highly engaging and intuitive. Besides, it’s not just about graphics. Be creative, and integrate it with texts and photos, as well. The creative touch is something that catches the visitor’s attention the most.&lt;/p&gt;

&lt;p&gt;Shadows and layering elements effects give the design a lightweight feel as if the elements are floating over each other makes it interesting and catchy.&lt;/p&gt;

&lt;p&gt;So, it’s actually a chance for you to unleash your imagination and creativity to give your website a catchy unique appearance.🤩&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#26-blending-photos-with-graphical-elements" class="anchor"&gt;
  &lt;/a&gt;
  26. Blending Photos with Graphical Elements
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vHgUzoyS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/794/1%2A49gb18ZoGyihvBD1uTaCdQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vHgUzoyS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/794/1%2A49gb18ZoGyihvBD1uTaCdQ.png" alt="Image for post"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Credit: By  &lt;a href="https://dribbble.com/uiwithvin"&gt;Kevin&lt;/a&gt;  on  &lt;a href="https://dribbble.com/"&gt;Dribbble&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Who doesn’t like such creativity..!!?&lt;/p&gt;

&lt;p&gt;Overlapping graphics on images help to execute your ideas and imagination on a different level. This mixing technique brings a touch of creativity and interactive uniqueness to a typical image.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xeVN5WF6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1100/1%2AmJV9KMj_UNMV-cZt7X7QiA.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xeVN5WF6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1100/1%2AmJV9KMj_UNMV-cZt7X7QiA.jpeg" alt="Image for post"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Credit:  &lt;a href="https://useplink.com/en/"&gt;Useplink&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The trend is continuously increasing and not going to stop in 2021 as well. Besides, mixing photography with graphics can boost your company branding and keep website visitors engaged with your content.&lt;/p&gt;

&lt;p&gt;Here are some websites you can check how they are following this trend:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://olympp.fr/"&gt;Olympp&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://precisionrun.com/"&gt;Precisionrun&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#27-bold-fonts-and-color" class="anchor"&gt;
  &lt;/a&gt;
  27. Bold Fonts and Color
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fL4Hz8D5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/600/1%2AY2genqgK82okkJPMQg5-jA.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fL4Hz8D5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/600/1%2AY2genqgK82okkJPMQg5-jA.gif" alt="Image for post"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You probably have experienced this, bold letters and colors attract your attention.&lt;/p&gt;

&lt;p&gt;According to the study by researcher Satyendra Singh about the impact of color psychology in marketing:  &lt;a href="https://www.codeinwp.com/blog/color-psychology-in-marketing/"&gt;&lt;strong&gt;About 62‐90 percent of the assessment is based on colors alone&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Big and bold headlines are one of the biggest trends of 2020 and it will continue dominating in 2021 as well.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NgNnkKPD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/850/1%2A69zjs4YxdDEG7cAvBM2RWg.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NgNnkKPD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/850/1%2A69zjs4YxdDEG7cAvBM2RWg.jpeg" alt="Image for post"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Credit:  &lt;a href="https://www.crazyegg.com/blog/psychology-of-fonts-infographic/"&gt;https://www.crazyegg.com/blog/psychology-of-fonts-infographic/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bold fonts are very effective and can be stunning. Big headlines with nice fonts catch the attention instantly and can make a whole simple page feel fresh. Paired with a nice fitting background, big lettering can look amazing.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#29-organic-shapes" class="anchor"&gt;
  &lt;/a&gt;
  29. Organic Shapes
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tmTsqUZ9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/3000/1%2A6y9T-sjueDtBQiqjtO9tGw.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tmTsqUZ9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/3000/1%2A6y9T-sjueDtBQiqjtO9tGw.jpeg" alt="Image for post"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Credit:  &lt;a href="https://www.freepik.com/home"&gt;Freepik&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you can be different from the rest, why remain normal..!!?😉&lt;/p&gt;

&lt;p&gt;Organic or fluid shapes are anything that doesn’t involve straight lines. Take a look around and see the shapes that happen in nature, like hills, the edges of a river or lake, and how they are asymmetrical and winding.&lt;/p&gt;

&lt;p&gt;Fluid shapes are a great way to break up sections of a website without harsh lines or angles. They’re also great to use in the background.&lt;/p&gt;

&lt;p&gt;It gives a cool and visually enriched look that can attract the visitor to surf more.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#30-asymmetric-layouts" class="anchor"&gt;
  &lt;/a&gt;
  30. Asymmetric layouts
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sgBU09JM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1597/1%2A97l8VIMBtzqW77aO5HczVw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sgBU09JM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1597/1%2A97l8VIMBtzqW77aO5HczVw.png" alt="Image for post"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Credit: By  &lt;a href="https://dribbble.com/Divagar19"&gt;Divagar&lt;/a&gt;  on  &lt;a href="https://dribbble.com/"&gt;Dribbble&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There was a time when a well-arranged grid oriented simple and disciplined websites were ruling. But later in 2020, there was a huge change in this sector:  &lt;strong&gt;Asymmetrical layouts.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It was a bold move that broke traditionalism and moves towards successful brutalism, individuality, and energy, and fun. Mainly most websites are based on grids, and they often look bland and too disciplined &amp;amp; this breakthrough change kind of made it more interactive and impulsive.&lt;/p&gt;

&lt;p&gt;Websites now are specifically taking this idea to a huge scenario. Broken-grid layouts are kind of more attractive due to their distinguished distinctiveness and stubborn assertiveness. A little bit messy is fun…!!😜&lt;/p&gt;

&lt;p&gt;Although, a brand website has to tread lightly with this trend. Visitors may find the content unreadable and overwhelming. So, in that case, brands have to maintain a balance between asymmetric layouts and powerful backgrounds.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;So, we have mentioned some of the coolest Web design Trends in 2021 that'll rock the world. We might have missed some as it’s a vast world..!! So if you feel that we should add any, then do let us know in the comment section below.👍&lt;/p&gt;

&lt;p&gt;In 2021, we expect to see more bright, clean, Visually enriched, and interactive websites that use animation and video to enhance engagement with visitors and improvise their user experience. If you want to try out these trends then do use the  &lt;a href="http://themeselection.com/"&gt;free bootstrap admin templates&lt;/a&gt;. It will help you get a better idea.&lt;/p&gt;

&lt;p&gt;Web design trends this year has embraced modern futurism and innovative approach. Gradients, Striking visual effects and colors, 3D effects, and redesigned retro trends are clearly indicating this new style in 2021.&lt;/p&gt;

&lt;p&gt;Thanks to many innovative and unique styles, design trends, and movements, we can surely say that the web design trends in 2021 will be full of surprises.🎉&lt;/p&gt;

&lt;p&gt;Happy Trails…!!✨&lt;/p&gt;




&lt;p&gt;Originally Published at &lt;a href="https://medium.com/quick-code/coolest-25-web-design-trends-in-2021-thatll-rock-the-world-388eb1144b7e"&gt;Medium&lt;/a&gt; on January 5, 2021.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>html</category>
      <category>css</category>
    </item>
  </channel>
</rss>
