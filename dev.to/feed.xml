<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Benefits of modern application development</title>
      <author>Daniel Dominguez</author>
      <pubDate>Mon, 17 May 2021 15:41:13 +0000</pubDate>
      <link>https://dev.to/dominguezdaniel/benefits-of-modern-application-development-2d25</link>
      <guid>https://dev.to/dominguezdaniel/benefits-of-modern-application-development-2d25</guid>
      <description>&lt;p&gt;Modern applications are built with a combination of modular architecture patterns, serverless operational models and agile developer processes, and they allow organizations to innovate faster while reducing risk, time to market, and total cost of ownership.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Faster to market&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;By speeding up the build and release cycle and offloading operational overhead, developers can quickly build new features. Automated test and release processes reduce error rates, so products are market-ready faster.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Increased innovation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;With a modular architecture, changes to any individual application component can be made quickly, and with a lower risk to the whole application, so teams can experiment with new ideas more often.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Improved reliability&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;By automating test procedures, and monitoring at every stage of the development lifecycle, modern applications are reliable at deployment. Any issues can be evaluated and addressed in real time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reduced costs&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;With a pay-for-value pricing model, modern applications reduce the cost of over-provisioning or paying for idle resources. By offloading infrastructure management, maintenance costs are also lower.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>serverless</category>
      <category>agile</category>
    </item>
    <item>
      <title>React: useState para dummies con una analogía simple </title>
      <author>dux</author>
      <pubDate>Mon, 17 May 2021 15:13:26 +0000</pubDate>
      <link>https://dev.to/duxtech/react-usestate-para-dummies-analogia-ccm</link>
      <guid>https://dev.to/duxtech/react-usestate-para-dummies-analogia-ccm</guid>
      <description>&lt;p&gt;Lastimosamente cuando estaba en la universidad estudiando la carrera no me enseñaron ningún framework frondend, los conocimientos que tengo React los fui adquiriendo de manera autodidacta (irónicamente la pandemia ayudó este aprendizaje por el tiempo libre excedente.)&lt;/p&gt;

&lt;p&gt;Uno de los conceptos fundamentales para entender React es el &lt;strong&gt;estado&lt;/strong&gt;. Personalmente me costó mucho entenderlo bien pese a que lei varias definiciones y vi varios tutoriales sentia que no entendía los conceptos del todo, lo que es muy normal al principio cuando nos enfrentamos a aprender algo desde cero y mas aun por cuenta propia.&lt;/p&gt;

&lt;p&gt;En la página &lt;a href="https://thinkster.io/tutorials/understanding-react-state"&gt;thinkster&lt;/a&gt; tienen un artículo pequeño donde realizan una analogía para recordar y entender el estado de un componente, en parafrasis, mas o menos dice lo siguiente:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;LOS ESTADOS DE LA MATERIA&lt;/strong&gt;&lt;br&gt;
El agua, desde la primaria nos enseñan que este elemento tiene 3 estados básicos: líquido, sólido y gaseoso. ¿Qué factor es el que hace que el agua esté en un estado o en otro? La respuesta es sencilla: la temperatura; si elevamos la temperatura el agua empieza a evaporarse y si por el contrario la reducimos el agua se solidifica convirtiéndose en hielo.&lt;/p&gt;

&lt;p&gt;De igual manera podemos ir alterando el estado de nuestros componentes en React, para que en un momento dado actúen y hagan ciertas acciones que deseamos pero en otro momento se desempeñen de una manera distinta.&lt;/p&gt;

&lt;p&gt;Recuerda que los estados y su manipulación constituyen el corazón de todo componente React, un componente sin estado no hace la gran cosa, son muy estáticos y poco prácticos.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#referencias"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Referencias&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Si deseas leer el artículo original te el link directo&lt;br&gt;
&lt;a href="https://thinkster.io/tutorials/understanding-react-state"&gt;https://thinkster.io/tutorials/understanding-react-state&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Este post lo encontre en el &lt;strong&gt;Curso Profesional de React&lt;/strong&gt; de Código Facilito, los respectivos creditos a ellos.&lt;/p&gt;


&lt;div class="instagram-position"&gt;
  &lt;iframe id="instagram-liquid-tag" src="https://www.instagram.com/p/CO4ZZDsIvR6/embed/captioned"&gt;
  &lt;/iframe&gt;
  
&lt;/div&gt;





&lt;p&gt;Si gustas, puedes leer otras entradas mías que podrían ser de tu interés:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/duxtech" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hjv7Wnd8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--40XPhqX3--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/391281/fe9f8985-2f7e-4614-af22-73b275663b9a.jpg" alt="duxtech image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/duxtech/desplegar-app-de-react-js-en-netlify-en-menos-de-5-min-3li9" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Desplegar app de React.js en Netlify (en menos de 5 min)&lt;/h2&gt;
      &lt;h3&gt;dux ・ Nov 10 '20 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#netlify&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#deploy&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/duxtech" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hjv7Wnd8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--40XPhqX3--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/391281/fe9f8985-2f7e-4614-af22-73b275663b9a.jpg" alt="duxtech image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/duxtech/app-de-clima-con-react-16-api-openweathermap-4gg0" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;App de clima con React 16 (API: OpenWeatherMap)&lt;/h2&gt;
      &lt;h3&gt;dux ・ Nov 18 '20 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#frontend&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/duxtech" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hjv7Wnd8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--40XPhqX3--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/391281/fe9f8985-2f7e-4614-af22-73b275663b9a.jpg" alt="duxtech image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/duxtech/como-crear-un-proyecto-de-react-js-desde-0-create-react-app-49f6" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Como crear un proyecto de React.js desde 0 | create-react-app&lt;/h2&gt;
      &lt;h3&gt;dux ・ Jul 23 '20 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#spanish&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;p&gt;&lt;a href="https://i.giphy.com/media/3orif8SZCC9OCqaHnO/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/3orif8SZCC9OCqaHnO/giphy.gif" alt="img"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>spanish</category>
    </item>
    <item>
      <title>How to Solve Any Algorithm</title>
      <author>Jared Nielsen</author>
      <pubDate>Mon, 17 May 2021 15:04:58 +0000</pubDate>
      <link>https://dev.to/nielsenjared/how-to-solve-algorithms-2jo9</link>
      <guid>https://dev.to/nielsenjared/how-to-solve-algorithms-2jo9</guid>
      <description>&lt;p&gt;&lt;em&gt;This article originally published at &lt;a href="https://jarednielsen.com/algorithms/"&gt;jarednielsen.com&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In 1992, Mary Oliver published &lt;a href="https://www.loc.gov/programs/poetry-and-literature/poet-laureate/poet-laureate-projects/poetry-180/all-poems/item/poetry-180-133/the-summer-day/"&gt;Poem 133: The Summer Day&lt;/a&gt;, which ends with a question for the reader:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Tell me, what is it you plan to do with your one wild and precious life?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What do you plan to do? Are you going to spend your one wild and precious life solving the same problem over and over? Or, worse yet, working on the wrong problem? &lt;/p&gt;

&lt;p&gt;We want to work smarter, not harder. &lt;/p&gt;

&lt;p&gt;How do we do that? &lt;/p&gt;

&lt;p&gt;Lucky for us, there's an old school approach to problem solving that is still relevant today. It's called, you'll never guess...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-solve-it"&gt;
  &lt;/a&gt;
  How To Solve It
&lt;/h2&gt;

&lt;p&gt;In &lt;a href="https://amzn.to/33Mp30d"&gt;How to Solve It&lt;/a&gt;, George Polya outlines four steps of problem solving: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Understand the problem.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Make a plan.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Execute the plan. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Evaluate the result.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#understand-the-problem"&gt;
  &lt;/a&gt;
  Understand the Problem
&lt;/h3&gt;

&lt;p&gt;If you're a good developer, you'll realize that the best solutions emerge from listening to your customer tell their story. Many alogirthms are disguised as story problems, such as the farmer who needs to get duck, corn, and fox across the river.  But! He can only carry one of these at a time. If left alone, the duck will eat the corn and the fox will eat the duck. How does he get everything across?&lt;/p&gt;

&lt;p&gt;Story time.&lt;/p&gt;

&lt;p&gt;User story time, that is.&lt;/p&gt;

&lt;p&gt;Yeah, I know. &lt;/p&gt;

&lt;p&gt;They're awkward. &lt;/p&gt;

&lt;p&gt;They &lt;em&gt;feel&lt;/em&gt; like work, don't they?&lt;/p&gt;

&lt;p&gt;But the thing is, they &lt;em&gt;work&lt;/em&gt;! &lt;/p&gt;

&lt;p&gt;The format for a user story is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;AS A &lt;span class="nt"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nt"&gt;USER&lt;/span&gt; &lt;span class="na"&gt;OF&lt;/span&gt; &lt;span class="na"&gt;SOME&lt;/span&gt; &lt;span class="na"&gt;SORT&lt;/span&gt; &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
I WANT &lt;span class="nt"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nt"&gt;TO&lt;/span&gt; &lt;span class="na"&gt;DO&lt;/span&gt; &lt;span class="na"&gt;THIS&lt;/span&gt; &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
SO THAT &lt;span class="nt"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nt"&gt;MY&lt;/span&gt; &lt;span class="na"&gt;EXISTENCE&lt;/span&gt; &lt;span class="na"&gt;IS&lt;/span&gt; &lt;span class="na"&gt;VALIDATED&lt;/span&gt; &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In our farmer example above:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;AS A farmer
I WANT to ferry my duck, fox, and corn across the river
SO THAT we all live happily ever after
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Reframing a problem as a user story then makes it very easy to write acceptance criteria. &lt;/p&gt;

&lt;p&gt;The format for acceptance criteria is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;GIVEN &lt;span class="nt"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nt"&gt;APPLICATION&lt;/span&gt; &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
WHEN &lt;span class="nt"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nt"&gt;I&lt;/span&gt; &lt;span class="na"&gt;DO&lt;/span&gt; &lt;span class="na"&gt;THIS&lt;/span&gt; &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
THEN &lt;span class="nt"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nt"&gt;I&lt;/span&gt; &lt;span class="na"&gt;EXPECT&lt;/span&gt; &lt;span class="na"&gt;THE&lt;/span&gt; &lt;span class="na"&gt;APP&lt;/span&gt; &lt;span class="na"&gt;TO&lt;/span&gt; &lt;span class="na"&gt;DO&lt;/span&gt; &lt;span class="na"&gt;THAT&lt;/span&gt; &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In our farmer example above:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;GIVE three items that will eat each other
WHEN I ferry one item across the river
THEN the other two are safe
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#make-a-plan"&gt;
  &lt;/a&gt;
  Make a Plan
&lt;/h3&gt;

&lt;p&gt;The next step in Polya's heuristic is to make a plan.&lt;/p&gt;

&lt;p&gt;AKA pseudocode. &lt;/p&gt;

&lt;p&gt;You write pseudocode, don't you? &lt;/p&gt;

&lt;p&gt;Writing pseudocode is like making a sketch for a design. &lt;/p&gt;

&lt;p&gt;It's your back-of-the-envelope proof-of-concept. &lt;/p&gt;

&lt;p&gt;It's your discovery phase, your user research, your market validation. &lt;/p&gt;

&lt;p&gt;It's your roadmap. &lt;/p&gt;

&lt;p&gt;It's also the comments for your function. Just // each line and there you go. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#execute-the-plan"&gt;
  &lt;/a&gt;
  Execute the Plan
&lt;/h3&gt;

&lt;p&gt;It's show time! &lt;/p&gt;

&lt;p&gt;After all this problem understanding and plan making, it's time to crack your fingers, dust off the keyboard, and write some code! This part will be easy because why? Because you wrote pseudocode! All you need to do now is translate that plain language into JavaScript, Python, or (shudder) Java. Then hit Enter...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#evaluate-the-plan"&gt;
  &lt;/a&gt;
  Evaluate the Plan
&lt;/h3&gt;

&lt;p&gt;Did your plan work? &lt;/p&gt;

&lt;p&gt;If no, back to step 1. &lt;/p&gt;

&lt;p&gt;If yes, can you do better? &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-solve-it-with-computational-thinking"&gt;
  &lt;/a&gt;
  How to Solve It with Computational Thinking
&lt;/h2&gt;

&lt;p&gt;The steps above are table stakes for problem solving and can be applied to any domain. If you want to turn pro, you need to assimilate with the Borg and learn how to think like a computer. There are four primary stages of computational thinking: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Decomposition&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Generalisation&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Abstraction &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Algorithms &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#decomposition"&gt;
  &lt;/a&gt;
  Decomposition
&lt;/h3&gt;

&lt;p&gt;If composing a function is the process of assembling the various components, such as variable, control flow, and conditions, then decomposition is the opposite: it's breaking a problem down into smaller parts. This is both the easiest &lt;em&gt;and&lt;/em&gt; the hardest step in the process because sometimes the component parts of a problem are obvious, but other times the component parts are emergent, or intertwined, and it's difficult to cleanly separate them. &lt;/p&gt;

&lt;p&gt;How does our farmer decompose? &lt;/p&gt;

&lt;p&gt;Well, yes, he makes compost.&lt;/p&gt;

&lt;p&gt;He also thinks through the problem.&lt;/p&gt;

&lt;p&gt;If there was only one item, he would simply need to carry it across the river.&lt;/p&gt;

&lt;p&gt;If there were two items, he would need to carry one across the river, then return for the second item and carry it across the river. &lt;/p&gt;

&lt;p&gt;If there are three? He would still need to carry one across the river, but he would need to ensure that the two left behind did not destroy, or should we say, decompose, one another. In thinking through his items he sees that there is only one combination that can be safely left alone: the fox 🦊 and the corn 🌽. The duck is the crux of the problem! 🦆 He sees that he must carry it across first. &lt;/p&gt;

&lt;p&gt;What does he choose when he returns for the second item? It doesn't matter. Either can be left alone and neither can be left with the duck. &lt;/p&gt;

&lt;p&gt;Do you see a pattern? &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#generalisation"&gt;
  &lt;/a&gt;
  Generalisation
&lt;/h3&gt;

&lt;p&gt;In decomposing the farmer's problem, we revealed a handful of crucial components to a solution: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;conditional statements&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;repetition&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;logic&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Another way of saying this is that we &lt;em&gt;recognized patterns&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;A useful question to be in the habit of asking yourself is: where have I seen this or something like it before? &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#abstraction"&gt;
  &lt;/a&gt;
  Abstraction
&lt;/h3&gt;

&lt;p&gt;Once we recognize patterns, we can remove the details, or form abstractions.&lt;/p&gt;

&lt;p&gt;What if it wasn't a farmer? What if it was a lawyer? With three clients who would eat each other and they needed to get across town to the courthouse. &lt;/p&gt;

&lt;p&gt;Or what if it was a space shuttle transporting lifeforms to another planet and we needed to find the right combination of carbon and oxygen producers? &lt;/p&gt;

&lt;p&gt;It no longer matter who or what it is. What matters is that we can remove the details in order to form a conceptual model and focus on the relationships between concepts. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#algorithm"&gt;
  &lt;/a&gt;
  Algorithm
&lt;/h3&gt;

&lt;p&gt;Now we simply need to write a series of repeatable steps to solve our problem, and, like above, evaluate its success. &lt;/p&gt;

&lt;p&gt;Where have we seen this or something like it before? &lt;/p&gt;

&lt;p&gt;🤔&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-solve-any-algorithm"&gt;
  &lt;/a&gt;
  How to Solve Any Algorithm
&lt;/h2&gt;

&lt;p&gt;You can solve any algorithm using Polya's heuristic and computational thinking. Like your health or your retirement, there's no shortcut to learning how to solve algorithms. Do the work. Practice makes practice. &lt;/p&gt;

&lt;p&gt;Give yourself an A. Grab your copy of &lt;a href="https://gum.co/algorithms"&gt;A is for Algorithms&lt;/a&gt;&lt;/p&gt;

</description>
      <category>algorithms</category>
      <category>career</category>
      <category>beginners</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>How I built Notion Playgrounds using Notion API and some Nextjs magic ✨ </title>
      <author>jj_ranalli</author>
      <pubDate>Mon, 17 May 2021 14:41:48 +0000</pubDate>
      <link>https://dev.to/jjranalli/how-i-built-notion-playgrounds-using-notion-api-and-some-nextjs-magic-1cb5</link>
      <guid>https://dev.to/jjranalli/how-i-built-notion-playgrounds-using-notion-api-and-some-nextjs-magic-1cb5</guid>
      <description>&lt;p&gt;Now that the &lt;a href="https://developers.notion.com"&gt;Notion API&lt;/a&gt; is in beta, nothing could stop me anymore from trying it out. This quickly ended up in a weird experiment called &lt;a href="https://series.slice.so/playground"&gt;Notion Playgrounds&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here's how I built it, using &lt;a href="https://nextjs.org"&gt;Nextjs&lt;/a&gt;, &lt;a href="https://tailwindcss.com"&gt;TailwindCSS&lt;/a&gt; and &lt;a href="https://github.com/jjranalli/nightwind"&gt;Nightwind&lt;/a&gt; to automatically generate the dark mode.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#interacting-with-notion-api"&gt;
  &lt;/a&gt;
  Interacting with Notion API
&lt;/h2&gt;

&lt;p&gt;First of all, I created an api route to handle my Notion GET requests. In this case I was interested in retrieving the contents of a Notion page, so I needed the &lt;a href="https://developers.notion.com/reference/get-block-children"&gt;Retrieve block children endpoint&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I knew I wanted to build more than one page, so I built a &lt;a href="https://nextjs.org/docs/api-routes/dynamic-api-routes"&gt;dynamic API route&lt;/a&gt; that accepts a &lt;strong&gt;pageId&lt;/strong&gt; as the query parameter, and returns me the corresponding object from the Notion API.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// api/notion/[pageId].ts&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;pageId&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;endpointBlocks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`https://api.notion.com/v1/blocks/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;pageId&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/children`&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetcher&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;?)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;Authorization&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`Bearer &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NOTION_KEY&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Notion-Version&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2021-05-13&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;blocks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetcher&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;endpointBlocks&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;blocks&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#rendering-the-page-amp-the-swr-magic"&gt;
  &lt;/a&gt;
  Rendering the page &amp;amp; the swr magic ✨
&lt;/h2&gt;

&lt;p&gt;There were 3 things I wanted:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Generate the pages statically&lt;/strong&gt;, to make everything lightning-fast and SEO friendly&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Have dynamic routes&lt;/strong&gt;, so I could have all pages under the paths &lt;em&gt;/playground/1&lt;/em&gt;, &lt;em&gt;/playground/2&lt;/em&gt;, etc.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Fetching data from Notion in real-time&lt;/strong&gt;, with a &lt;a href="https://swr.vercel.app/"&gt;stale-while-revalidate pattern&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#dynamic-routes-amp-static-generation"&gt;
  &lt;/a&gt;
  Dynamic routes &amp;amp; Static Generation
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://nextjs.org/docs/basic-features/data-fetching"&gt;Static generation in Nextjs&lt;/a&gt; happens through the &lt;em&gt;getStaticPaths&lt;/em&gt; and &lt;em&gt;getStaticProps&lt;/em&gt; functions.&lt;/p&gt;

&lt;p&gt;GetStaticPaths is used to get the actual paths of the page, while getStaticProps returns the props to each page – in this case the &lt;strong&gt;slug&lt;/strong&gt; and the &lt;strong&gt;pageId&lt;/strong&gt; props.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// pages/playground/[slug].tsx&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticPaths&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;paths&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;fallback&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticProps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pageIdArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;38fc182c459340b294fca3c99b88faae&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;9e569a521efc4f0fa2087de12fca5e81&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;59a5889031314f73a2c1bd268a486dff&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pageId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pageIdArray&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;pageId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#rendering-the-data-on-page"&gt;
  &lt;/a&gt;
  Rendering the data on page
&lt;/h3&gt;

&lt;p&gt;Getting the data to display on website is trivial when using Nextjs and the (amazing) &lt;a href="https://swr.vercel.app"&gt;SWR hook&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I simply have to make an API call to the API route I built in the first step, using SWR and a fetcher function. This will return me the data to display on page, while caching and revalidating automatically.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Play&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pageId&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetcher&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;?)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useSWR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`/api/notion/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;pageId&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fetcher&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="c1"&gt;// Return page using data returned from the api&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this point I just had to render what Notion was returning from my request.&lt;/p&gt;

&lt;p&gt;In this case, that would be an array of &lt;a href="https://developers.notion.com/reference/block"&gt;block objects&lt;/a&gt;, each containing an array of &lt;a href="https://developers.notion.com/reference/rich-text"&gt;Rich text objects&lt;/a&gt; containing the styling properties.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: Some blocks appear to be unsupported at this time, and others have children blocks that would've needed to be retrieved recursively. I didn't build this feature yet, so I made sure such block returned either a line element or &lt;em&gt;null&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;prose&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;blocks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;paragraph&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;paragraph&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;NotionSpan&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="p"&gt;})}&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;heading_1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;heading_1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;NotionSpan&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="p"&gt;})}&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="c1"&gt;// ... All elements that can be contained in the block objects&lt;/span&gt;
      &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;unsupported&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
        &lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;block&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
        &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;has_children&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;hr&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text-gray-500 text-center&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Ready&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To handle text styling I wanted to leverage the amazing TailwindCSS palette while automatically build a dark mode with Nightwind.&lt;/p&gt;

&lt;p&gt;So I made a &lt;strong&gt;&amp;lt;NotionSpan&amp;gt;&lt;/strong&gt; component which returns the text content of the Rich text object, wrapped in a &lt;strong&gt;&amp;lt;span&amp;gt;&lt;/strong&gt; element with styling applied depending on the properties of the Rich text object.&lt;/p&gt;

&lt;p&gt;I don't have to think about styling the dark mode because &lt;a href="https://github.com/jjranalli/nightwind"&gt;Nightwind does it automatically for me&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;FC&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;NotionSpanProps&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;t&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;any&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;colors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;gray&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text-gray-600&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;brown&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text-amber-700&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;orange&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text-orange-600&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;yellow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text-yellow-600&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;green&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text-green-600&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text-blue-600&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;purple&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text-purple-500&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;pink&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text-pink-600&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;red&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text-red-500&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;bg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;gray&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bg-gray-200&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;brown&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bg-amber-200&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;orange&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bg-orange-200&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;yellow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bg-yellow-200&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;green&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bg-green-200&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bg-blue-200&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;purple&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bg-purple-200&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;pink&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bg-pink-200&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;red&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bg-red-200&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;NotionSpan&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;FC&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;NotionSpanProps&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt;
      &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`
      &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;annotations&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bold&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;font-bold &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;
        &lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;annotations&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt;
          &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;font-medium overflow-hidden shadow-md rounded-sm py-2.5 px-5 bg-gray-100 text-indigo-600&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;
        &lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;annotations&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;default&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;annotations&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;background&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;annotations&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;_&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]]}&lt;/span&gt;&lt;span class="s2"&gt; text-gray-900 `&lt;/span&gt;
            &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;annotations&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
          &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;annotations&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;italic&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;italic &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;annotations&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;strikethrough&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;line-through &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;annotations&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;underline&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;underline &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;link&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;link&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;_blank&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;noopener&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/a&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
      &lt;span class="p"&gt;)}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;NotionSpan&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h2&gt;

&lt;p&gt;And that's it! Notion API makes it really easy to get the data of a Notion page (and databases seem to be even more powerful, can't wait to try that too!), while Nextjs + swr spectacularly handle all the complex parts giving you the best possible experience.&lt;/p&gt;




&lt;p&gt;If you liked this post or have any question, feel free to let me know on &lt;a href="https://twitter.com/jj_ranalli"&gt;Twitter!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And if you like this whole experiment, consider leaving a note on the &lt;a href="https://series.slice.so/playground"&gt;Notion Playgrounds&lt;/a&gt; and upvoting it on &lt;a href="https://www.producthunt.com/posts/notion-playground-slice-series"&gt;Product Hunt&lt;/a&gt;. Thanks! 🍩&lt;/p&gt;

</description>
      <category>programming</category>
      <category>nextjs</category>
      <category>tailwindcss</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Automagically optimize your images with Squoosh</title>
      <author>Tim Deschryver</author>
      <pubDate>Mon, 17 May 2021 14:39:08 +0000</pubDate>
      <link>https://dev.to/timdeschryver/automagically-optimize-your-images-with-squoosh-5fn3</link>
      <guid>https://dev.to/timdeschryver/automagically-optimize-your-images-with-squoosh-5fn3</guid>
      <description>&lt;p&gt;Follow me on Twitter at &lt;a href="https://timdeschryver.dev/twitter"&gt;@tim_deschryver&lt;/a&gt; | Subscribe to the &lt;a href="https://timdeschryver.dev/newsletter"&gt;Newsletter&lt;/a&gt; | Originally published on &lt;a href="https://timdeschryver.dev/blog/automagically-optimize-your-images-with-squoosh"&gt;timdeschryver.dev&lt;/a&gt;.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://timdeschryver.dev/blog/automagically-optimize-your-images-with-squoosh?tldr=true"&gt;Read the TLDR on timdeschryver.dev&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For my blog, I used to use the &lt;a href="https://github.com/marketplace/actions/image-optimizer"&gt;Image Optimizer&lt;/a&gt; Github Action to optimize my images.&lt;/p&gt;

&lt;p&gt;The downside to this approach was that the optimization was only performed on Pull Requests. When I'm publishing a new blog post, I usually just pushed to the &lt;code&gt;main&lt;/code&gt; branch, thus new images wouldn't be optimized. As a counter measurement, I also used &lt;a href="https://squoosh.app/"&gt;Squoosh&lt;/a&gt; to optimize the banner images as this was mostly the only image I used.&lt;/p&gt;

&lt;p&gt;This task was done manually, every. single. time.&lt;br&gt;
Until I stumbled onto the &lt;a href="https://www.npmjs.com/package/@squoosh/cli"&gt;Squoosh CLI&lt;/a&gt;.&lt;br&gt;
Let's take a look at how we can automate this threaded task and optimize our images with ease!&lt;/p&gt;

&lt;p&gt;I'm assuming you're already using &lt;a href="https://github.com/okonet/lint-staged"&gt;lint-staged&lt;/a&gt; to some extent, for example, to run a linter or prettier on touched files. We extend the &lt;code&gt;lint-staged&lt;/code&gt; configuration to run an optimization to images (&lt;code&gt;*.{jpg,jpeg,png,gif}&lt;/code&gt;), and re-add them to our commit with &lt;code&gt;git add&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"lint-staged"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"*.{js,ts,json,svelte}"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"eslint --fix"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"git add"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"*.{prettier}"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"prettier --write"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"git add"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"*.{jpg,jpeg,png,gif}"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"node ./scripts/optimize-image.js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"git add"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To run &lt;code&gt;lint-staged&lt;/code&gt; as a pre-commit step, I'm using &lt;a href="https://typicode.github.io/husky/#/"&gt;husky&lt;/a&gt; with a &lt;code&gt;pre-commit&lt;/code&gt; git hook.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;optimize-image.js&lt;/code&gt; script, executes the Squoosh CLI to optimize the image.&lt;br&gt;
Note that we don't need to pass an argument to this script, because lint-staged already passes the file's location as an argument.&lt;/p&gt;

&lt;p&gt;The reason why we need a custom script is because we need to pass the image path to the Squoosh CLI twice. Once to specify the output directory, and the second time as the argument to be optimized. In this case, we just want to overwrite the original image, so we use the &lt;code&gt;dirname&lt;/code&gt; method to get the directory of te image.&lt;/p&gt;

&lt;p&gt;If the Squoosh CLI would overwrite the initial image (or have a config flag for it), we could have simply executed the Squoosh CLI without the need to create a custom script for it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;execSync&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;child_process&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;dirname&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;writeFileSync&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;execSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`npx @squoosh/cli --mozjpeg auto --output-dir "&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;" "&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;writeFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;optimize-image.log&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;encoding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;utf8&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;w&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;I'm using the auto optimizer, if you want to tweak the arguments take a look at the &lt;a href="https://www.npmjs.com/package/@squoosh/cli"&gt;options&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And that's it, with some configuration and just a couple lines of code, all of the images on my blog will be optimized.&lt;/p&gt;

&lt;p&gt;The profit is that I save a couple of minutes every time I add images, and visitors don't need to download the whole image.&lt;/p&gt;




&lt;p&gt;Follow me on Twitter at &lt;a href="https://timdeschryver.dev/twitter"&gt;@tim_deschryver&lt;/a&gt; | Subscribe to the &lt;a href="https://timdeschryver.dev/newsletter"&gt;Newsletter&lt;/a&gt; | Originally published on &lt;a href="https://timdeschryver.dev/blog/automagically-optimize-your-images-with-squoosh"&gt;timdeschryver.dev&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>tools</category>
      <category>optimization</category>
      <category>node</category>
    </item>
    <item>
      <title>Deploying Web-Based Data Visualizations with Bokeh in Python</title>
      <author>Saji Wang</author>
      <pubDate>Mon, 17 May 2021 14:32:00 +0000</pubDate>
      <link>https://dev.to/codesphere/deploying-web-based-data-visualizations-with-bokeh-in-python-4ai8</link>
      <guid>https://dev.to/codesphere/deploying-web-based-data-visualizations-with-bokeh-in-python-4ai8</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;The ability to manipulate data in an easy and readable way has made Python a staple of the data science community. Nevertheless, Python has become an increasingly popular language among web developers who want to build data-centered applications on the web.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;One popular Python tool for this purpose is &lt;strong&gt;Bokeh&lt;/strong&gt;, a Python library for building interactive data visualizations for the web. &lt;/p&gt;

&lt;p&gt;In this tutorial, we’re going to show you how to create a Bokeh server with various charts. While we’ll be doing this in Codesphere, a browser-based IDE with easy deployment features, this tutorial is applicable to any IDE. &lt;/p&gt;

&lt;p&gt;You can learn more about Codesphere here:&lt;br&gt;
&lt;a href="https://codesphere.com/?utm_source=dev.to&amp;amp;utm_medium=link-website&amp;amp;utm_campaign=blog-bokeh"&gt;https://codesphere.com/&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h3&gt;

&lt;p&gt;To start off, in an empty directory create a virtual environment with:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;pipenv shell&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Once that process is complete, in your virtual environment install Bokeh with:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;pipenv install bokeh&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Finally, we’re going to create a &lt;code&gt;main.py&lt;/code&gt; file to house the following Bokeh code, which creates a simple line graph:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Alternatively, here is the starter project above ready to deploy from Codesphere (Don’t forget to enter your virtual environment and install Bokeh!):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codesphere.com/#https://github.com/LiorB-D/BokehServer"&gt;https://codesphere.com/#https://github.com/LiorB-D/BokehServer&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now if you are using a local ide, you can serve this Bokeh application with:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;bokeh serve main.py&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you are running your app Codesphere, you first need to find the Codesphere URL for your app, which is very easy. Simply press the "deploy app" button and copy the URL you are taken to. It should be in the following format:&lt;/p&gt;

&lt;p&gt;APPID-3000.codesphere.com&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--py0pM3jB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u9nftwlk7z37vd6hrmbr.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--py0pM3jB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u9nftwlk7z37vd6hrmbr.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you have that URL, you can deploy your Bokeh app with:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;bokeh serve main.py --port 3000 --allow-websocket-origin=&amp;lt;Your URL&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And you then should see your app deployed!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0jy8_lzb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ysdekbjslxomd2ts41cr.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0jy8_lzb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ysdekbjslxomd2ts41cr.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-make-different-charts-in-bokeh"&gt;
  &lt;/a&gt;
  How to Make Different Charts in Bokeh
&lt;/h3&gt;

&lt;p&gt;Even though Bokeh is an incredibly extensive library, it is still very easy to create different types of Charts. Here are the functions to generate different types of basic chart:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#line-chart"&gt;
  &lt;/a&gt;
  Line Chart:
&lt;/h4&gt;

&lt;p&gt;p.line(x,y, line_width=2)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PzrV6VBQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1rkaq00i6b7zd9c7p2ph.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PzrV6VBQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1rkaq00i6b7zd9c7p2ph.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#bar-chart"&gt;
  &lt;/a&gt;
  Bar Chart:
&lt;/h4&gt;

&lt;p&gt;p.vbar(x=x, top=y, width=0.5)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lET7g3rc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3qdmc30webavrsllovo9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lET7g3rc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3qdmc30webavrsllovo9.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#scatterplot"&gt;
  &lt;/a&gt;
  Scatterplot:
&lt;/h4&gt;

&lt;p&gt;p.scatter(x, y, size = 20)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ngETIdLE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l1mxg6s2y5dh35bkrz1h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ngETIdLE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l1mxg6s2y5dh35bkrz1h.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for reading! For more information and updates on how Codesphere is revolutionizing the software industry, follow us on our socials.&lt;/p&gt;

&lt;p&gt;Stay tuned and Happy Coding!&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>python</category>
      <category>webdev</category>
      <category>bokeh</category>
    </item>
    <item>
      <title>Crie seu próprio tema para Visual Studio Code</title>
      <author>Welker Arantes Ferreira</author>
      <pubDate>Mon, 17 May 2021 14:31:47 +0000</pubDate>
      <link>https://dev.to/taikio/crie-seu-proprio-tema-para-visual-studio-code-1cc5</link>
      <guid>https://dev.to/taikio/crie-seu-proprio-tema-para-visual-studio-code-1cc5</guid>
      <description>&lt;p&gt;O Visual Studio Code acabou se tornando a principal ferramenta de trabalho de grande parte dos desenvolvedores, já que ele oferece um bom suporte para diversas linguagens de programação e pode ser customizado conforme o gosto de cada usuário graças às suas extensões. Sendo assim passamos horas olhando para nossos códigos e sem dúvida um bom tema de cores faz toda a diferença, então por que não criar seu próprio tema?&lt;/p&gt;

&lt;p&gt;Neste artigo eu mostrarei passo a passo como criar e publicar um tema para o &lt;code&gt;vscode&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#passo-0"&gt;
  &lt;/a&gt;
  Passo 0
&lt;/h2&gt;

&lt;p&gt;Antes de colocarmos a mão na massa é necessário se cadastrar nos serviços que serão utilizados. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#theme-studio"&gt;
  &lt;/a&gt;
  Theme Studio
&lt;/h3&gt;

&lt;p&gt;O primeiro serviço que utilizaremos é o &lt;strong&gt;Theme Studio for VS Code&lt;/strong&gt;. Esta ferramenta nos permitirá customizar as cores do vscode de forma visual. Para se cadastrar acesse &lt;a href="https://themes.vscode.one/"&gt;este link&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#azure-devops"&gt;
  &lt;/a&gt;
  Azure DevOps
&lt;/h3&gt;

&lt;p&gt;O Azure DevOps é um serviço fornecido pela Microsoft que contém todas as ferramentas para gestão de projetos de software, é possível gerenciar o código fonte, as sprints e até mesmo automatizar o deploy. Precisamos ter uma conta do Azure DevOps para que seja possível publicar nosso tema no marketplace do vscode. Dito isso, acesse &lt;a href="https://dev.azure.com/"&gt;este link&lt;/a&gt; e clique em &lt;strong&gt;start free&lt;/strong&gt; para se cadastrar com uma conta microsoft ou &lt;strong&gt;start free with Github&lt;/strong&gt; para usar sua conta do Github.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#visual-studio-marketplace"&gt;
  &lt;/a&gt;
  Visual Studio Marketplace
&lt;/h3&gt;

&lt;p&gt;O último serviço que precisamos nos cadastrar é o Marketplace . Acesse &lt;a href="https://marketplace.visualstudio.com/manage"&gt;este link&lt;/a&gt; para se cadastrar. Quando estiver preenchendo seus dados repare que será criado um &lt;code&gt;publisher id&lt;/code&gt;, você precisará informá-lo na hora de publicar seu tema no marketplace.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#passo-1-prepara%C3%A7%C3%A3o-do-ambiente"&gt;
  &lt;/a&gt;
  Passo 1 - Preparação do ambiente
&lt;/h2&gt;

&lt;p&gt;Agora que já criamos todas as contas necessárias, vamos instalar as ferramentas necessárias para a criação do tema. Primeiro vamos instalar as ferramentas para gerar o projeto base, então abra seu terminal e execute o comando abaixo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-g&lt;/span&gt; yo generator-code
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Agora vamos instalar a ferramenta que nos permitirá publicar o tema no marketplace, para isso execute o comando abaixo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-g&lt;/span&gt; vsce
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#passo-2-criando-o-tema-base"&gt;
  &lt;/a&gt;
  Passo 2 - Criando o tema base
&lt;/h2&gt;

&lt;p&gt;Nesta etapa utilizaremos a ferramenta &lt;code&gt;generator-code&lt;/code&gt; para criar toda a estrutura base do tema, para isso basta executar  o seguinte comando no terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yo code
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Após executar o comando você deve ver no seu terminal algo parecido com a imagem abaixo:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jbwvQV5j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q13btys52y4m2xblkhdb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jbwvQV5j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q13btys52y4m2xblkhdb.png" alt="Yeoman Generator"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Selecione &lt;code&gt;New Color Theme&lt;/code&gt; e em seguida &lt;code&gt;No, start fresh&lt;/code&gt;. Em seguida o assistente te perguntará algumas informações sobre o tema, preencha da seguinte forma:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What's the name of your extension? &lt;strong&gt;nome-do-tema&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;What's the identifier of your extension? &lt;strong&gt;nome-do-tema&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;What's the description of your extension? &lt;strong&gt;Breve descrição sobre o tema&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;What's the name of your theme shown to the user? &lt;strong&gt;Nome que será exibido para o usuário&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Por último você precisa escolher se o seu tema será do tipo &lt;code&gt;Dark&lt;/code&gt; ou do tipo &lt;code&gt;Light&lt;/code&gt;. Agora é só esperar todos os arquivos serem gerados.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#passo-3-customizando-as-cores"&gt;
  &lt;/a&gt;
  Passo 3 - customizando as cores
&lt;/h2&gt;

&lt;p&gt;Finalmente chegamos na parte divertida, acesse o serviço &lt;strong&gt;Theme Studio&lt;/strong&gt;, faça login e clique em &lt;code&gt;Create new Theme&lt;/code&gt;. Você terá que escolher entre as opções &lt;code&gt;Dark&lt;/code&gt; ou &lt;code&gt;Light&lt;/code&gt;, aqui é importante selecionar a mesma opção que foi escolhida no passo anterior, em seguida clique em &lt;code&gt;Create Theme&lt;/code&gt;. Agora você deve estar vendo uma tela como esta:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wNYyN5uN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9feycxctsz8psgizjuth.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wNYyN5uN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9feycxctsz8psgizjuth.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Na barra superior onde está escrito &lt;strong&gt;Untitled&lt;/strong&gt; é exibido o nome do tema, clique sobre o nome para alterá-lo e coloque o nome que será exibido para o usuário. Do lado esquerdo existe um menu com 3 abas, sendo elas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Colors:&lt;/strong&gt; Nesta seção é onde customizamos os elementos principais como StatusBar, SideBar, Terminal, inputs e botões.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Editor:&lt;/strong&gt; Nesta seção é onde customizamos as cores do editor de código em si, os balões de sugestões.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Syntax:&lt;/strong&gt; Nesta seção é onde customizamos as cores do código como variáveis, classes, palavras chaves e strings.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Quando terminar as estilizações basta clicar no botão &lt;strong&gt;Save Theme&lt;/strong&gt; localizado no canto superior direito.&lt;/p&gt;

&lt;p&gt;Após fazer as customizações de cores e salvar o tema você será redirecionado para a página &lt;em&gt;Your Themes&lt;/em&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#passo-4-preparando-o-tema-para-ser-publicado"&gt;
  &lt;/a&gt;
  Passo 4 - Preparando o tema para ser publicado
&lt;/h2&gt;

&lt;p&gt;Agora que já finalizamos a personalização das cores, precisamos repassar estas configurações para o nosso tema base. Para isso acesse o &lt;strong&gt;Theme Studio&lt;/strong&gt;, clique em &lt;strong&gt;Your Themes&lt;/strong&gt;, passe o mouse sobre o tema que foi criado e clique no botão de download como exibido na imagem abaixo:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OM7buIOc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lc31n88ycnsm3uhuiyx3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OM7buIOc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lc31n88ycnsm3uhuiyx3.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Abra a pasta do tema base no vscode e substitua o conteúdo do arquivo &lt;code&gt;themes/color-theme.json&lt;/code&gt; pelo conteúdo do arquivo json que foi baixado. Para testar o tema antes de publicar pressione &lt;code&gt;F5&lt;/code&gt;, isso iniciará o debug e abrirá uma nova janela do vscode com o tema aplicado.&lt;br&gt;
Além do arquivo de cores podemos configurar também o ícone e cor de background que será exibido no marketplace. Estas configurações são feitas no arquivo &lt;code&gt;package.json&lt;/code&gt;, a imagem abaixo mostra as opções disponíveis:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W7lBKPUw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9c0t2d9q8dl77fhab2c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W7lBKPUw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9c0t2d9q8dl77fhab2c.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Outro arquivo importante é o &lt;code&gt;README.md&lt;/code&gt;. Este arquivo funciona como a página inicial do seu tema, o conteúdo dele será exibido tanto no marketplace do vscode, quanto dentro do próprio vscode na aba de extensões.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Obs.: Vale lembrar que para exibir imagens neste arquivo é preciso hospedá-las em algum servidor com https&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#passo-5-publicando-o-tema"&gt;
  &lt;/a&gt;
  Passo 5 - Publicando o tema
&lt;/h2&gt;

&lt;p&gt;Finalmente podemos publicar nosso tema. Para fazer isso acesse o Azure DevOps, clique no ícone de usuário e acesse a opção &lt;code&gt;personal access token&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3c1PrrCc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ins3gabycl1xjhob6fh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3c1PrrCc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ins3gabycl1xjhob6fh.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Clique em New Token e preencha o formulário conforme a imagem abaixo:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fPox93Q3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/49tt13s33azxgpg17o99.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fPox93Q3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/49tt13s33azxgpg17o99.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ao clicar em create será gerado um novo token. &lt;strong&gt;Copie este token e salve em um lugar seguro, pois não será exibido novamente&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Agora vá para o terminal, acesse o diretório do tema e execute o comando abaixo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;vsce login &amp;lt;publisher name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lembrando que &lt;strong&gt;Publisher Name&lt;/strong&gt; é o seu &lt;strong&gt;Publisher ID&lt;/strong&gt; que foi gerado no passo 0. Ao executar este comando o vsce pedirá o seu token, copie e cole o token que foi gerado no Azure DevOps. Em seguida execute o comando abaixo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;vsce publish
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Pronto!!!&lt;br&gt;
Se tudo correu bem você já poderá ver seu tema no marketplace e instalá-lo no vscode.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dica-extra"&gt;
  &lt;/a&gt;
  Dica Extra
&lt;/h2&gt;

&lt;p&gt;O &lt;strong&gt;Theme Studio&lt;/strong&gt; facilita bastante a customização das cores, mas pode ser que você queira definir configurações mais específicas. Neste caso o ideal é fazer o seguinte:&lt;/p&gt;

&lt;p&gt;Pressione as teclas &lt;code&gt;Ctrl + Shift + P&lt;/code&gt; (&lt;code&gt;cmd + Shift + P&lt;/code&gt; se estiver usando Mac OS), e selecione a opção &lt;strong&gt;Developer: Inspect editor tokens and scopes&lt;/strong&gt; como mostra a imagem abaixo.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eMg2j200--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bmq4m9aiapw7vpzaysjw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eMg2j200--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bmq4m9aiapw7vpzaysjw.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Assim será possível saber o "escopo" a ser customizado, como  os nomes de variáveis por exemplo. Copie o &lt;em&gt;scope&lt;/em&gt; exibido&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GMT3eKj_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eftqlleblb5iq35ujm88.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GMT3eKj_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eftqlleblb5iq35ujm88.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Em seguida abra o arquivo &lt;code&gt;themes/color-theme.json&lt;/code&gt; e dentro da seção &lt;code&gt;tokenColors&lt;/code&gt; procure pelo scope que você copiou para alterá-lo e, caso não exista é só criar um bloco de código como na imagem abaixo:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R2bZaHig--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j15kq5e7eal9vegqadzo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R2bZaHig--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j15kq5e7eal9vegqadzo.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#explicando-o-bloco-de-c%C3%B3digo"&gt;
  &lt;/a&gt;
  Explicando o bloco de código
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;name:&lt;/strong&gt; É uma descrição que ajuda a identificar o bloco, pode nomear como preferir&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;scope:&lt;/strong&gt; Aqui é onde deve ser informado o scope que você inspecionou&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;settings:&lt;/strong&gt; Aqui é onde de fato fazemos a customização, podemos alterar a cor da fonte, a família da fonte e colocar o texto como negrito ou itálico &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;settings &amp;gt; foreground:&lt;/strong&gt; Entenda foreground como cor da fonte&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#refer%C3%AAncias"&gt;
  &lt;/a&gt;
  Referências
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://themes.vscode.one/faq/publishing-theme"&gt;Theme Studio FAQ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://code.visualstudio.com/api/extension-guides/color-theme#create-a-new-color-theme"&gt;Visual Studio Code - Create a new Color Theme&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://code.visualstudio.com/api/working-with-extensions/publishing-extension"&gt;Visual Studio Code - Publishing Extensions&lt;/a&gt;&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Subscribe to Newsletter Using HTML &amp; CSS</title>
      <author>Nikhil Bobade </author>
      <pubDate>Mon, 17 May 2021 14:30:14 +0000</pubDate>
      <link>https://dev.to/nikhil27b/subscribe-to-newsletter-using-html-css-13p2</link>
      <guid>https://dev.to/nikhil27b/subscribe-to-newsletter-using-html-css-13p2</guid>
      <description>&lt;p&gt;Hello, today I created a Subscribe to the newsletter using CSS. Not great work but I hope you like this also comments about your thoughts. For more content follow me on Instagram  &lt;a href="https://www.instagram.com/developer_nikhil27/"&gt;@developer_nikhil27&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/NikhilBobade/embed/RwpGrQe?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Add a unique id and use it as a key</title>
      <author>Ahmed Yagoub</author>
      <pubDate>Mon, 17 May 2021 14:23:08 +0000</pubDate>
      <link>https://dev.to/ahyagoub40/add-a-unique-id-and-use-it-as-a-key-312o</link>
      <guid>https://dev.to/ahyagoub40/add-a-unique-id-and-use-it-as-a-key-312o</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;If you use Vue or React, you must know about keys. They are mostly used with lists such as&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;todoItems&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and in Vue:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;todo in todos&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;todo.id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ul&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#avoid-using-index-as-key"&gt;
  &lt;/a&gt;
  Avoid using index as key
&lt;/h2&gt;

&lt;p&gt;Both React and Vue advice against using the index as a key especially if the order of items may change. As if you want to allow users to reorder items.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// not recommended to use index as key&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;(todo, index) in todos&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;index&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ul&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Sometimes we are lucky enough that our data comes with a unique id that identifies each of the items.&lt;/p&gt;

&lt;p&gt;Other times, we are not so lucky. The &lt;code&gt;items&lt;/code&gt; don't have unique ids. Or they do, but we want to render the item more than once. In that case, if we use the id as a key, we will run into duplicate keys issue.&lt;/p&gt;

&lt;p&gt;We will have to create unique ids for the &lt;code&gt;items&lt;/code&gt; and use them as keys.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#generate-keys"&gt;
  &lt;/a&gt;
  Generate keys
&lt;/h2&gt;

&lt;p&gt;There are many ways to do that. I will choose Lodash's uniqueId method since Lodash is used in the project I am working on and there is no need to load another library&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;uniqueId&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lodash/uniqueId&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Before rendering &lt;code&gt;todos&lt;/code&gt;, loop through it and add a &lt;code&gt;uniquekey&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;uniqueKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;uniqueId&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, you can use &lt;code&gt;todo.uniqueKey&lt;/code&gt; as a key. &lt;code&gt;uniqueId()&lt;/code&gt; will generate a unique id for each todo. However, sometimes those ids might clash with other ids for a different list in the page. We can take it further and add an argument to &lt;code&gt;uniqueId('todo_')&lt;/code&gt; to avoid duplicate keys.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final thoughts
&lt;/h2&gt;

&lt;p&gt;This &lt;code&gt;uniqueKey&lt;/code&gt; was only added to do a particular job in the frontend. We probably wouldn't need to send it to the backend. So, before sending &lt;code&gt;todos&lt;/code&gt; to the backend, make sure to delete the &lt;code&gt;uniqueKey&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;uniqueKey&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;delete&lt;/span&gt; &lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;uniqueKey&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Thanks for reading&lt;/em&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>vue</category>
      <category>react</category>
    </item>
    <item>
      <title>What is if __name__ == "__main___", and how do I use it.</title>
      <author>Waylon Walker</author>
      <pubDate>Mon, 17 May 2021 14:22:08 +0000</pubDate>
      <link>https://dev.to/waylonwalker/what-is-if-name-main-and-how-do-i-use-it-1a44</link>
      <guid>https://dev.to/waylonwalker/what-is-if-name-main-and-how-do-i-use-it-1a44</guid>
      <description>&lt;p&gt;When a python module is called it is assigned the &lt;code&gt;__name__&lt;/code&gt; of &lt;code&gt;__main__&lt;/code&gt; otherwise if it's imported it will be assigned the &lt;code&gt;__name__&lt;/code&gt; of the module.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#concrete-example"&gt;
  &lt;/a&gt;
  Concrete example
&lt;/h2&gt;

&lt;p&gt;Let's create a module to play with &lt;code&gt;__name__&lt;/code&gt; a bit.  We will call this module &lt;code&gt;nodes.py&lt;/code&gt;.  It is a module that we may want to run by itself or import and use in other modules.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!python
# nodes.py
&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"nodes"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;__main__&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"you have imported me &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; from sys.modules['__main__'].__file__}"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"you are running me as main"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I have set this module up to execute one of two if statements based on whether the module itself is being run or if the module is being imported.  &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note it is not common to have a &lt;code&gt;if __name__ == "nodes":&lt;/code&gt; block, this is just for demnonstration purposes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#running-python-nodespy"&gt;
  &lt;/a&gt;
  running python nodes.py
&lt;/h2&gt;

&lt;p&gt;Running a python script with the command &lt;code&gt;python &amp;lt;filename.py&amp;gt;&lt;/code&gt; will execute your script top to bottom.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;python nodes.py 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;This will print out &lt;code&gt;you are running me as main&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

   Sorry, your browser doesn't support embedded videos.  

&lt;p&gt;&lt;a href="https://waylonwalker.com/install-miniconda/"&gt;https://waylonwalker.com/install-miniconda/&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you don't already have python installed try using miniconda or replit.com&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#running-nodespy"&gt;
  &lt;/a&gt;
  running ./nodes.py
&lt;/h2&gt;

&lt;p&gt;You can also simply execute the script from bash if you first set the module to be executable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;chmod&lt;/span&gt; +x nodes.py ./nodes.py 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



   Sorry, your browser doesn't support embedded videos.  

&lt;blockquote&gt;
&lt;p&gt;Note once you have set the file to be executable, it will remain executable &lt;code&gt;chmod +x nodes.py&lt;/code&gt; is only needed one time, even if you edit the file.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#pipelinepy"&gt;
  &lt;/a&gt;
  pipeline.py
&lt;/h2&gt;

&lt;p&gt;Let's create a second module &lt;code&gt;pipeline.py&lt;/code&gt; and import the first module &lt;code&gt;nodes&lt;/code&gt; and see what happens.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!python
# pipeline.py
&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;nodes&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Just like nodes, we can run pipeline either way if it's executable&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;python pipeline.py
&lt;span class="c"&gt;# must run chmod +x pipeline.py first.&lt;/span&gt;
./pipeline.py 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Either way it will print out &lt;code&gt;you have imported me nodes from ./pipeline.py&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

   Sorry, your browser doesn't support embedded videos.  

&lt;h2&gt;
  &lt;a href="#repl"&gt;
  &lt;/a&gt;
  REPL
&lt;/h2&gt;

&lt;p&gt;If we were to &lt;code&gt;import nodes&lt;/code&gt; from the repl we would see an error in this case, due to the fact that there is no &lt;code&gt;__main__&lt;/code&gt; file since it's a repl session.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-cases"&gt;
  &lt;/a&gt;
  Use Cases
&lt;/h2&gt;

&lt;p&gt;The main use case for &lt;code&gt;if __name__ == "__main__":&lt;/code&gt; is flexibility.  Simply importing a module should not execute any code, print anything to the screen, change your filesystem, or generally have any side effects in most cases. It is something that most python users would not expect.  We can use this block to make it such that the module can be both imported and executed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#rich"&gt;
  &lt;/a&gt;
  rich
&lt;/h3&gt;

&lt;p&gt;The &lt;a href="https://github.com/willmcgugan/rich"&gt;rich&lt;/a&gt; library uses it to make examples of each module print to the screen if its executed.  I personally think this is a fantastic idea.&lt;/p&gt;

   Sorry, your browser doesn't support embedded videos.  

&lt;h3&gt;
  &lt;a href="#etl"&gt;
  &lt;/a&gt;
  etl
&lt;/h3&gt;

&lt;p&gt;In my world of data analysis, we often set up a script of functions that will behave as an ETL pipeline of sorts.  Since we may want to reuse some of these functions in other scripts its common to hide the actual execution of these functions in an &lt;code&gt;if __name__ == "__main__":&lt;/code&gt; block so that we don't start making changes to the data simply by importing the module.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cli"&gt;
  &lt;/a&gt;
  cli
&lt;/h3&gt;

&lt;p&gt;Most cli applications will leverage &lt;code&gt;if __name__ == "__main__":&lt;/code&gt; to run something when called as a script instead of being imported. This allows us to do things such as testing much easier.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Check out the example on the first page of the &lt;a href="https://click.palletsprojects.com/en/7.x/"&gt;click&lt;/a&gt; framework's docs&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#recap"&gt;
  &lt;/a&gt;
  Recap
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;if __name__ == "__main__":&lt;/code&gt; is not so cryptic or scary, it's just looking to see if this module was called as a script or imported from somewhere else, and executing some different behavior based on how it was called.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
   &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"you are running me as main"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#related-links"&gt;
  &lt;/a&gt;
  Related Links
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;example from &lt;a href="https://github.com/willmcgugan/rich/blob/master/rich/live.py#L271"&gt;rich.live&lt;/a&gt; &lt;a href="https://click.palletsprojects.com/en/7.x/"&gt;click&lt;/a&gt; framework's docs try it yourself in your browser with &lt;a href="https://replit.com"&gt;replit.com&lt;/a&gt; StackOverflow: &lt;a href="https://stackoverflow.com/questions/419163/what-does-if-name-main-do"&gt;What does if &lt;strong&gt;name&lt;/strong&gt; == “&lt;strong&gt;main&lt;/strong&gt;”: do?&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#check-out-these-related-posts"&gt;
  &lt;/a&gt;
  Check Out These Related Posts
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://waylonwalker.com/install-micromamba/"&gt;https://waylonwalker.com/install-micromamba/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://waylonwalker.com/kedro172_replit/"&gt;https://waylonwalker.com/kedro172_replit/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://waylonwalker.com/pytest-capsys/"&gt;https://waylonwalker.com/pytest-capsys/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
    </item>
    <item>
      <title>Reducing Docker image size of a Nuxt SSR application</title>
      <author>Denis</author>
      <pubDate>Mon, 17 May 2021 14:02:17 +0000</pubDate>
      <link>https://dev.to/fbjorn/reducing-docker-image-size-of-a-nuxt-ssr-application-40oe</link>
      <guid>https://dev.to/fbjorn/reducing-docker-image-size-of-a-nuxt-ssr-application-40oe</guid>
      <description>&lt;p&gt;Recently I had to create a deployment of a NuxtJS application which is running in SSR mode. I have a separate backend that is already packed in Docker image, so it sounds pretty tempting to dockerize the frontend application as well and to run both using docker-compose. Basically, server side rendering implies that the frontend application becomes a server too, to some extent. &lt;/p&gt;

&lt;p&gt;To demonstrate the concept, I will show you two Dockerfiles, one is straightforward, without any optimizations, and another is what goes into production. &lt;/p&gt;

&lt;p&gt;First obvious idea is to get the smallest node-based image available. Of course, it's an Alpine one. &lt;/p&gt;

&lt;p&gt;So let's consider this &lt;code&gt;Dockerfile&lt;/code&gt;, assuming we don't care about a final size too much:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; node:15.11.0-alpine3.12 as frontend&lt;/span&gt;

&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /src&lt;/span&gt;

&lt;span class="k"&gt;ADD&lt;/span&gt;&lt;span class="s"&gt; frontend ./&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;yarn &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; yarn build

&lt;span class="k"&gt;ENTRYPOINT&lt;/span&gt;&lt;span class="s"&gt; ["npx", "nuxt", "start"]&lt;/span&gt;
&lt;span class="k"&gt;EXPOSE&lt;/span&gt;&lt;span class="s"&gt; 3000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now check the size:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;➜ docker images | &lt;span class="nb"&gt;grep &lt;/span&gt;demo-frontend
demo-frontend     latest     151ebafca257   1 minute ago   782MB
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I couldn't bear the thought that a simple frontend application will take almost 800MB of disk space. It's not a surprise though, cause &lt;code&gt;node_modules&lt;/code&gt; is enormous. We could of course use multi-stage builds and install only production dependencies for runtime, but it would not cost the effort:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;➜ yarn &lt;span class="nb"&gt;install&lt;/span&gt;
➜ &lt;span class="nb"&gt;du&lt;/span&gt; &lt;span class="nt"&gt;-sh&lt;/span&gt; node_modules
386M    node_modules

➜ yarn &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--production&lt;/span&gt;
➜ &lt;span class="nb"&gt;du&lt;/span&gt; &lt;span class="nt"&gt;-sh&lt;/span&gt; node_modules
276M node_modules
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now the trick. Let's check what's inside of a &lt;code&gt;.nuxt&lt;/code&gt; folder, that is generated by &lt;code&gt;nuxt build&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;➜ yarn build
➜ &lt;span class="nb"&gt;du&lt;/span&gt; &lt;span class="nt"&gt;-sh&lt;/span&gt; .nuxt/dist/&lt;span class="k"&gt;*&lt;/span&gt;
5.5M    .nuxt/dist/client
1.2M    .nuxt/dist/server
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It looks pretty strange that client-side code takes more space than the server-side, isn't it? 🤔&lt;br&gt;
Apparently, server-side code is relying on third-party libraries stored in the node modules. They are not bundled.&lt;/p&gt;

&lt;p&gt;The good thing is that Nuxt offers a solution, a &lt;code&gt;--standalone&lt;/code&gt; option that solves this issue. Let's try to rebuild and compare.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;➜ yarn build --standalone
➜ du -sh .nuxt/dist/*
5.5M .nuxt/dist/client
 39M .nuxt/dist/server
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yep, something has changed for sure. Dependencies for a server runtime are now stored in &lt;code&gt;.nuxt&lt;/code&gt; folder, so we don't need all the &lt;code&gt;node_modules&lt;/code&gt; anymore.&lt;/p&gt;

&lt;p&gt;And now the final insight: you don't need the entire &lt;code&gt;nuxt&lt;/code&gt; package to run your code using &lt;code&gt;nuxt start&lt;/code&gt;. There's a separate package that is optimized only for running bundles in SSR mode: &lt;a href="https://www.npmjs.com/package/nuxt-start"&gt;nuxt-start&lt;/a&gt;. So the final step is to install this package in a runtime Docker image and skip the rest.&lt;/p&gt;

&lt;p&gt;Let's have a look on the final &lt;code&gt;Dockerfile&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; node:15.11.0-alpine3.12 as frontend-build&lt;/span&gt;

&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /src&lt;/span&gt;

&lt;span class="k"&gt;ADD&lt;/span&gt;&lt;span class="s"&gt; frontend/yarn.lock frontend/package.json ./&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;yarn &lt;span class="nb"&gt;install&lt;/span&gt;

&lt;span class="k"&gt;ADD&lt;/span&gt;&lt;span class="s"&gt; frontend ./&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;yarn build &lt;span class="nt"&gt;--standalone&lt;/span&gt;

&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; node:15.11.0-alpine3.12&lt;/span&gt;

&lt;span class="k"&gt;ENV&lt;/span&gt;&lt;span class="s"&gt; NUXT_VERSION=2.15.6&lt;/span&gt;

&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /app&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;yarn add &lt;span class="s2"&gt;"nuxt-start@&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;NUXT_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; --from=frontend-build /src/.nuxt /app/.nuxt&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; --from=frontend-build /src/nuxt.config.ts /app/&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; --from=frontend-build /src/static /app/&lt;/span&gt;

&lt;span class="k"&gt;ENTRYPOINT&lt;/span&gt;&lt;span class="s"&gt; ["npx", "nuxt-start"]&lt;/span&gt;
&lt;span class="k"&gt;EXPOSE&lt;/span&gt;&lt;span class="s"&gt; 3000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In case you wonder what we've just done:&lt;/p&gt;

&lt;p&gt;In build image (that is not used in production):&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Install the dependencies from &lt;code&gt;package.json&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Build an application in a standalone mode, so &lt;code&gt;.nuxt&lt;/code&gt; folder contains everything we need&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In runtime image (that is running in production)&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Install &lt;code&gt;nuxt-start&lt;/code&gt;, a package that will run our app&lt;/li&gt;
&lt;li&gt;Copy the &lt;code&gt;.nuxt&lt;/code&gt; folder from the build image, as well as static folder and NuxtJS config&lt;/li&gt;
&lt;li&gt;Run the app&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now, how much the final image weighs?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;demo-frontend     latest     f41a130ae000   21 seconds ago   208MB
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yep, that's true 🙂 We've just saved 574 MB of a disk space, final image became &lt;strong&gt;3.75 times thinner&lt;/strong&gt; than initial!&lt;/p&gt;

&lt;p&gt;Of course, it highly depends on the size of your dependencies, but I'm sure you got the idea. Please also keep in mind that it's a good idea to install &lt;code&gt;nuxt-start&lt;/code&gt; with the same version as &lt;code&gt;nuxt&lt;/code&gt; from your &lt;code&gt;package.json&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;TL;DR:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Get Alpine as a base image&lt;/li&gt;
&lt;li&gt;Leverage multi stage builds&lt;/li&gt;
&lt;li&gt;Bundle dependencies into server code&lt;/li&gt;
&lt;li&gt;Run server using &lt;code&gt;nuxt-start&lt;/code&gt; package&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Happy deploying! 🚀&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>devops</category>
      <category>nuxt</category>
      <category>vue</category>
    </item>
    <item>
      <title>Deploy a React Application to Firebase Hosting using GitHub Actions</title>
      <author>Pratik Kumar Panda</author>
      <pubDate>Mon, 17 May 2021 13:50:41 +0000</pubDate>
      <link>https://dev.to/devppratik/deploy-a-react-application-to-firebase-hosting-using-github-actions-1ocp</link>
      <guid>https://dev.to/devppratik/deploy-a-react-application-to-firebase-hosting-using-github-actions-1ocp</guid>
      <description>&lt;p&gt;Deploying applications can be a tedious task. This includes integrating, optimizing, merging, testing and deploying the codes to make sure it runs in production.&lt;/p&gt;

&lt;p&gt;Using CI/CD tools can help us streamline the process. Though there are several CI/CD tools available in the market like Jenkins, CircleCI etc these can be a bit difficult to set up. So why not look at a tool that is easy to set up and free of cost to use(mostly) -  &lt;strong&gt;Github Actions&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In this article, we will be looking at Github Actions to build and deploy React Application to Firebase Hosting.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#continuous-integration-and-continuous-deployments"&gt;
  &lt;/a&gt;
  Continuous Integration and Continuous Deployments
&lt;/h3&gt;

&lt;p&gt;*&lt;em&gt;Continuous Integration: *&lt;/em&gt; It refers to the process of adding a new piece of code to a shared repository (like GitHub) by one or more developers, which is followed by a series of automated tests and checks to make sure that the new code doesn’t break the existing stable code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Continuous Deployment or Continuous Delivery:&lt;/strong&gt; It is a process of building and delivering the software with automated testing, building and deployment process. Each build can be triggered based on some event or can be scheduled based on time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#github-actions"&gt;
  &lt;/a&gt;
  GitHub Actions
&lt;/h3&gt;

&lt;p&gt;GitHub Actions is a CI/CD tool provided by GitHub that helps us to automate various processes like Testing, Integration or Deployment. Few advantages of using Github Actions is it is ready to use, no extra setup required and the Integration and Deployment scripts are part of the actual repository.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How GitHub Actions Works?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To automate a set of tasks, we need to create workflows in a GitHub repository. GitHub looks for YAML files inside of the .github/workflows directory. Events like commits, the opening or closing of pull requests, or updates to the project’s wiki, can trigger the start of a workflow. &lt;/li&gt;
&lt;li&gt;Workflows are composed of jobs, which run at the same time by default. Each job should represent a separate part of the workflow. Jobs can be configured to depend on the success of other jobs in the same workflow. For example, failing tests can prevent deploying to production.&lt;/li&gt;
&lt;li&gt;Jobs contain a list of steps, which GitHub executes in sequence. A step can be a set of shell commands or an action, which is a pre-built, reusable step implemented either in TypeScript or inside a container. &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#what-is-development-mode-and-production-mode"&gt;
  &lt;/a&gt;
  What is development mode and production mode?
&lt;/h3&gt;

&lt;p&gt;When building a React App, you might want to use features like hot deploy to see the changes instantly, or to debug certain features in the browser. But you want to minimise the code and optimise it for better performance during production. We will be discussing how to build the production build and deploy it to Firebase Hosting in this article&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Pro Tip&lt;/strong&gt; - Use React Dev Tools to debug your application in development mode&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h3&gt;

&lt;p&gt;To follow along with this tutorial, you should have a basic knowledge of the following :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JavaScript and React&lt;/li&gt;
&lt;li&gt;Firebase&lt;/li&gt;
&lt;li&gt;Git&lt;/li&gt;
&lt;li&gt;Terminal (Mac/Linux)/Command prompt (Windows)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#setting-up-a-react-project"&gt;
  &lt;/a&gt;
  Setting up a React project
&lt;/h3&gt;

&lt;p&gt;We’ll use Create React App to get our React app up and running. Run the following commands in your terminal to set up a sample React app.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-react-app react-cd-sample
cd react-cd-sample
npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;This will spin up the default React Application in your localhost&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setting-up-a-firebase-project"&gt;
  &lt;/a&gt;
  Setting up a Firebase project
&lt;/h3&gt;

&lt;p&gt;To set up a firebase account, go to Firebase Console, click on &lt;strong&gt;Add Project&lt;/strong&gt; and fill in the details.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SgyBtaih--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620485774463/YfCTsHm5a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SgyBtaih--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620485774463/YfCTsHm5a.png" alt="Screenshot_20210508_195110.png"&gt;&lt;/a&gt;&lt;br&gt;
After setting up the project, add a web app from the dashboard and fill in the details. &lt;strong&gt;Check on Also Setup Firebase Hosting for this app&lt;/strong&gt; to enable Hosting services&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WwBllKzb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620485785041/VwE2r6FMn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WwBllKzb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620485785041/VwE2r6FMn.png" alt="Screenshot_20210508_195259.png"&gt;&lt;/a&gt;&lt;br&gt;
Once you’re done, launch your terminal and run the command below to install the firebase-CLI globally.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install -g firebase-tools
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Firebase CLI is a tool for managing, viewing, and deploying Firebase projects.&lt;/p&gt;

&lt;p&gt;The next step is to initialize Firebase in the React project you created. Navigate to the root of your project on your terminal and run the command to log in to Firebase.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;firebase login:ci
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above command will launch your browser and open a Google authentication page. After successful authentication, a token will display on your terminal. Copy it and keep in a safe place because you’ll need it when it comes time to create a workflow.&lt;/p&gt;

&lt;p&gt;After successful authentication, run the following.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;firebase init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uqYZb_8S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620485793330/KS3YNZAtX.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uqYZb_8S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620485793330/KS3YNZAtX.png" alt="Screenshot_20210508_195850.png"&gt;&lt;/a&gt;&lt;br&gt;
This initializes firebase and allows you to choose the products you want to integrate into your React project. As noted earlier, for this tutorial we’ll focus on hosting.&lt;/p&gt;

&lt;p&gt;After choosing &lt;code&gt;hosting&lt;/code&gt;, you’ll be prompted to configure the hosting options.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Input &lt;code&gt;build&lt;/code&gt; as the public directory since that’s the default directory React serves after building a project&lt;/li&gt;
&lt;li&gt;Input &lt;code&gt;No&lt;/code&gt; on the configure as a single-page app prompt to allow React to control that behavior&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---GFoqgYl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620485820704/_V5kut7hm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---GFoqgYl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620485820704/_V5kut7hm.png" alt="Screenshot_20210508_195915.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If it prompts you to overwrite any files, input &lt;code&gt;no&lt;/code&gt; since you don’t want it to rewrite files generated by React. After the process is complete, two files are generated: &lt;code&gt;firebase.json&lt;/code&gt; and &lt;code&gt;.firebaserc&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;firebase.json&lt;/code&gt; file contains information on the location of files, assets, and settings related to the project. The &lt;code&gt;.firebaserc&lt;/code&gt; file stores project aliases, which can be used to set different hosting options for the same application — one for staging and the other for production.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#setting-up-github-repository-for-github-actions"&gt;
  &lt;/a&gt;
  Setting Up GitHub Repository for GitHub Actions
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;To get started, you’ll need a GitHub repository to house your project, so head over to GitHub and create one. Add the repository to the project, commit the changes, and push the project to GitHub.&lt;/li&gt;
&lt;li&gt;Next, go to your &lt;strong&gt;Settings&lt;/strong&gt; Tab in the repository and click on &lt;strong&gt;Secrets&lt;/strong&gt;, then &lt;strong&gt;New Repository Secret&lt;/strong&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5GORUbjl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620485863797/Nao1ygsDB.png" alt="Screenshot_20210508_171015.png"&gt;
&lt;/li&gt;
&lt;li&gt; Input &lt;code&gt;FIREBASE_TOKEN&lt;/code&gt; as the name and the token you copied earlier as the value. After doing that, click Add secret to save the environment variable&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dEDm0KrS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620485907320/eEJ1HaPlY.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dEDm0KrS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620485907320/eEJ1HaPlY.png" alt="Screenshot_20210508_171107.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#setting-up-the-workflow"&gt;
  &lt;/a&gt;
  Setting up the Workflow
&lt;/h3&gt;

&lt;p&gt;After you have added the secret variable in your repository and pushed the current code to GitHub it is time to set up the Workflow.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Head over to the Actions Tab in your GitHub repo. Click on Set up a workflow yourself&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1TZbfTE2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620485919107/pzVCiAkLU.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1TZbfTE2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620485919107/pzVCiAkLU.png" alt="Screenshot_20210508_171144.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Change the name to filename to firebase.yml&lt;/li&gt;
&lt;li&gt;Replace the pre-provided code with the below code
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;name: Firebase CI
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14.x]

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - name: npm install and build
      run: |
        npm install
        npm run build
    - name: Archive Build
      uses: actions/upload-artifact@v2
      with:
        name: build
        path: build

  deploy:
    name: Deploy
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Download Build
        uses: actions/download-artifact@v2
        with:
          name: build
          path: build
      - name: Depoy to Firebase
        uses: w9jds/firebase-action@master
        with:
          args: deploy --only hosting
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Uh2wll6S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620486178498/Yjldnq5VU.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Uh2wll6S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620486178498/Yjldnq5VU.png" alt="Screenshot_20210508_171315.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Now save the file by committing the file to the repo.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w07VD4bh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620485952436/jKXEu3Cjc.png" alt="Screenshot_20210508_171644.png"&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#deploying-to-firebase"&gt;
  &lt;/a&gt;
  Deploying to Firebase
&lt;/h3&gt;

&lt;p&gt;Click on the Actions tab on the repository and watch the actions as it runs. Once it successfully executes, the project is deployed to Firebase. Visit your .firebaseapp.com to view your project.&lt;/p&gt;

&lt;p&gt;The action runs every time there is a push to the main branch or a pull request is merged. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#lets-dig-deeper-an-explanation-of-the-workflow-firebaseyml-file"&gt;
  &lt;/a&gt;
  Let's Dig Deeper - An Explanation of the Workflow firebase.yml file
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;name: Firebase CI
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This block specifies that the workflow Firebase CI will run when there is a push or a pull request on the main branch.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14.x]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This block of code specifies the jobs that are required to be run on the workflow. The workflow will be executed on &lt;code&gt;ubuntu&lt;/code&gt; and the version of Nodejs to be used is &lt;code&gt;14&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - name: npm install, build and test
      run: |
        npm install
        npm run build
    - name: Archive Build
      uses: actions/upload-artifact@v2
      with:
        name: build
        path: build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It describes the steps that are run in order during the job &lt;code&gt;build&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; &lt;code&gt;actions/checkout@v2&lt;/code&gt; - This action checks out your repository under &lt;code&gt;$GITHUB_WORKSPACE&lt;/code&gt;, so your workflow can access it.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;actions/setup-node@v1&lt;/code&gt; -  This action sets by node environment for use&lt;/li&gt;
&lt;li&gt;This command executes the npm scripts in the shell. &lt;code&gt;npm install&lt;/code&gt; installs all the dependency that are required to build the project
&lt;code&gt;npm run build&lt;/code&gt; builds the production-ready &lt;code&gt;build&lt;/code&gt; folder from the React project&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;actions/upload-artifact@v2&lt;/code&gt; - This upload artifacts from your workflow allowing you to share data between jobs and store data once a workflow is complete.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  deploy:
    name: Deploy
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Download Build
        uses: actions/download-artifact@v2
        with:
          name: build
          path: build
      - name: Depoy to Firebase
        uses: w9jds/firebase-action@master
        with:
          args: deploy --only hosting
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;This part of the YAML configuration directs the workflow to deploy the application after the job has been completed. It uses &lt;code&gt;w9jds/firebase-action&lt;/code&gt;  action from the GitHub marketplace that is a wrapper for the Firebase CLI&lt;/li&gt;
&lt;li&gt;The token required is accessed from the repository secrets&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Setting up continuous deployment doesn’t have to be expensive or cumbersome. You can integrate the processes described in this tutorial into your projects with ease, and it’ll help ensure you deploy projects with fewer bugs to production more quickly than ever before.&lt;/p&gt;

&lt;p&gt;This was my first article and I hope it was easy to follow along. Feedback is appreciated✌️&lt;/p&gt;

&lt;p&gt;Check out the demo repo here - &lt;a href="https://github.com/devppratik/github-action-react-demo"&gt;github-action-react-demo&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>firebase</category>
      <category>github</category>
      <category>firstpost</category>
    </item>
  </channel>
</rss>
