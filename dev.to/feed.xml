<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Code Complete: Is It a Big White Elephant on Your Working Desk?</title>
      <author>Mitya Dementiy</author>
      <pubDate>Tue, 07 Dec 2021 09:59:18 +0000</pubDate>
      <link>https://dev.to/halolab/code-complete-is-it-a-big-white-elephant-on-your-working-desk-364h</link>
      <guid>https://dev.to/halolab/code-complete-is-it-a-big-white-elephant-on-your-working-desk-364h</guid>
      <description>&lt;p&gt;When I &lt;a href="https://twitter.com/De_Mityai/status/1403641281461506048"&gt;tweeted about my intention to read Code Complete&lt;/a&gt;, I got a couple of warning replies. I found out that the book is "a waste of time", "big white elephant on your desk" and "a dull book to while away the time in one's old age".&lt;/p&gt;

&lt;p&gt;But such feedback didn't disturb me because Code Complete is listed in books to read by Hexlet School of Witchcraft and Wizardry where I studied programming.&lt;/p&gt;

&lt;p&gt;The book was easy and fun to read. Yes, McConnel's humor is fire. So I laughed many times while reading a serious work about programming. But first thing's first.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-great-and-powerful-code-complete"&gt;
  &lt;/a&gt;
  The great and powerful Code Complete
&lt;/h2&gt;

&lt;p&gt;The book received Jolt Award in 1993, a prestigious award by Dr. Dobb's Journal for books on software development.&lt;/p&gt;

&lt;p&gt;It also received positive reviews from Martin Fowler, Grady Booch, and other famous software engineers and computer science experts.&lt;/p&gt;

&lt;p&gt;Hardback version of 900 pages weighs more than 1 kg. Probably, that is what frightens people away from this work. Let's open the book and find out if there is anything to be afraid of?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oiOzr2oZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bz8d3lwh4ikwyvlmuj0i.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oiOzr2oZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bz8d3lwh4ikwyvlmuj0i.jpeg" alt="Code Complete McConnell" width="880" height="779"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Russian-language version of Code Copmplete by McConnell&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-mcconnell-wrote-in-1993-and-reasons-to-read-it-in-the-21st-century"&gt;
  &lt;/a&gt;
  What McConnell wrote in 1993 and reasons to read it in the 21st century
&lt;/h2&gt;

&lt;p&gt;Code Complete is still relevant even though it was first published almost 30 years ago. This book contains very little information that could ever get out of date. McConell discusses fundamental coding principles that are unlikely to change within the next few years.&lt;/p&gt;

&lt;p&gt;The code examples are mainly in Visual Basic, Java and C++. But the book's main points make sense regardless of specific languages.&lt;/p&gt;

&lt;p&gt;There is a difference between programming into the language and in It.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Programming in your language limits your programming thinking only to the constructs that the language directly supports. If the language tools are primitive, the programmer's thought will also be primitive. Programmers who program "into" a language first decide what thoughts they want to express, and then they determine how to express those thoughts using the tools provided by their specific language. — Steve McConnel.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I had the feeling that there is not that much code in Code Complete.&lt;br&gt;
The author talks about coding in general and occasionally goes to specifics and illustrates his points with examples.&lt;/p&gt;

&lt;p&gt;He pays big attention to the process of development — from requirements gathering and choosing the technology to coding, testing,  debugging, refactoring, and optimization.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#metaphor-is-a-programmers-weapon"&gt;
  &lt;/a&gt;
  Metaphor is a programmer’s weapon
&lt;/h3&gt;

&lt;p&gt;The book starts with an explanation of why metaphors are important. One of the metaphors offered is building construction. &lt;/p&gt;

&lt;p&gt;Metaphors help both developers and any people they work with, such as managers, designers, and clients.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mistakes-that-cost-the-most"&gt;
  &lt;/a&gt;
  Mistakes that cost the most
&lt;/h3&gt;

&lt;p&gt;They occur on the stage of requirements gathering and designing. &lt;/p&gt;

&lt;p&gt;It is easy to explain with building construction metaphors. If you make mistakes when laying the foundation, it will be difficult to fix them when the building is nine floors high.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dirty-problems"&gt;
  &lt;/a&gt;
  "Dirty" problems
&lt;/h3&gt;

&lt;p&gt;These are the problems that can be defined only by partially or fully fixing them. I bet every programmer had a situation when a manager asked you to define the time needed for your task. And you explain that it is impossible because you actually have to solve the task first. This is what McConnel calls a dirty problem.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#managing-complexity"&gt;
  &lt;/a&gt;
  Managing complexity
&lt;/h3&gt;

&lt;p&gt;Managing complexity is the main technical aspect of software development. McConnel quotes Dijkstra, who pointed out that no one's skull is really big enough to contain a modern computer program. This means that software developers shouldn't try to cram whole programs into our skulls at once. We should try to organize our programs in such a way that we can safely focus on one part of it at a time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#software-correctness-and-software-robustness-have-an-inverse-relationship"&gt;
  &lt;/a&gt;
  Software correctness and software robustness have an inverse relationship
&lt;/h3&gt;

&lt;p&gt;This was a huge insight for me. &lt;/p&gt;

&lt;p&gt;For some software robustness is more important than correctness, for some conversely.&lt;/p&gt;

&lt;p&gt;For instance, safety-critical software for a spaceship would require a high level of correctness. And we would have to sacrifice correctness in favour of robustness.&lt;/p&gt;

&lt;p&gt;Please, leave comments about your interpretation of this point and if you agree with it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wisca-phenomenon"&gt;
  &lt;/a&gt;
  WISCA phenomenon
&lt;/h3&gt;

&lt;p&gt;Why Isn’t Sam Coding Anything? Non-tech people suppose that programmers must be coding nonstop. Clients and bosses get nervous while programmers are planning or working on requirements.&lt;/p&gt;

&lt;p&gt;McConnel gives us an easy way to fight WISCA phenomenon. Just keep a straight face and keep the source-code editor window open.&lt;/p&gt;

&lt;p&gt;By the way, on the sense of humor. McConnell inserts jokes on nearly every page. They are witty and specific. This is the famous programming humor in its purest form. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-i-liked-and-disliked-about-the-book"&gt;
  &lt;/a&gt;
  What I liked and disliked about the book
&lt;/h2&gt;

&lt;p&gt;I found the book helpful because it’s all about fundamentals. It helps to look for the forests before we look for the trees. And generalize problems and tasks.&lt;/p&gt;

&lt;p&gt;The book sure contains plenty of practical and specific examples or recommendations. The parts about variable naming, operators and mastery of programming are pure concentrated usefulness.&lt;/p&gt;

&lt;p&gt;I was happy that a big and serious book is written in easy language. Even examples in unfamiliar languages turned out to be comprehendible and useful.&lt;/p&gt;

&lt;p&gt;What I didn’t like is how quickly I finished the book. I also didn’t like the chapter on programming tools.The choice of compiler, IDE and other tools depends on which specific technology is used.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#to-read-or-not-to-read"&gt;
  &lt;/a&gt;
  To read or not to read?
&lt;/h2&gt;

&lt;p&gt;Well, my conclusion is predictable. The book is worth the money and the time spent. It is more about basics in general rather than a handbook with practical guidelines. Thanks to Code Complete I gained a deeper understanding of coding in general. I started to see things that were out of my attention.&lt;/p&gt;

&lt;p&gt;Don’t be put off by the thickness of the book. I guarantee you’ll let out a chuckle many times when reading it.&lt;/p&gt;

</description>
      <category>books</category>
      <category>development</category>
      <category>programming</category>
    </item>
    <item>
      <title>TikTok Colors - HTML Hex, RGB and CMYK Color Codes</title>
      <author>pakainfo</author>
      <pubDate>Tue, 07 Dec 2021 09:46:58 +0000</pubDate>
      <link>https://dev.to/pakainfo_com/tiktok-colors-html-hex-rgb-and-cmyk-color-codes-4mb</link>
      <guid>https://dev.to/pakainfo_com/tiktok-colors-html-hex-rgb-and-cmyk-color-codes-4mb</guid>
      <description>&lt;p&gt;The &lt;a href="https://www.pakainfo.com/tik-tok-colors/"&gt;TikTok colors&lt;/a&gt; found in the logo are turqoise, red, black and white. Use this TikTok brand color scheme for digital or print projects that need to use specific color values to match their company color palette. Find the rest of your favorite brand color codes on this web page.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://www.pakainfo.com/tik-tok-colors/"&gt;TikTok Colors&lt;/a&gt; with Hex &amp;amp; RGB Codes has 4 colors which are Black (#010101), Sea Serpent (#69C9D0), White (#FFFFFF) and Crayola's Red (#EE1D52).&lt;/p&gt;

&lt;p&gt;This color combination was created by user Keshav Naidu. The Hex, RGB and CMYK codes are in the table below.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TURQOISE&lt;/strong&gt;&lt;br&gt;
PANTONE: PMS 319 C (BEST MATCH)&lt;br&gt;
HEX COLOR: #25F4EE;&lt;br&gt;
RGB: (37,244,238)&lt;br&gt;
CMYK: (54,0,18,0)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;RED&lt;/strong&gt;&lt;br&gt;
PANTONE: PMS 1787 C (BEST MATCH)&lt;br&gt;
HEX COLOR: #FE2C55;&lt;br&gt;
RGB: (254,44,85)&lt;br&gt;
CMYK: (0,93,56,0)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;BLACK&lt;/strong&gt;&lt;br&gt;
PANTONE: PMS BLACK C&lt;br&gt;
HEX COLOR: #000000;&lt;br&gt;
RGB: (0,0,0)&lt;br&gt;
CMYK: (70,35,40,100)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;WHITE&lt;/strong&gt;&lt;br&gt;
PANTONE: PMS WHITE C&lt;br&gt;
HEX COLOR: #FFFFFF;&lt;br&gt;
RGB: (255,255,255)&lt;br&gt;
CMYK: (0,0,0,0)&lt;/p&gt;

&lt;p&gt;TikTok Logo has four Colors. Hex Codes, RGB Codes and CMYK Color Codes of TikTok logo are given.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tiktok-logo-meaning"&gt;
  &lt;/a&gt;
  TikTok Logo Meaning
&lt;/h2&gt;

&lt;p&gt;TikTok was launched in China and it's Chinese name translates to Tremolo in English. Tremolo is a trembling effect in music produced by rapid reiteration of a musical note.&lt;/p&gt;

&lt;p&gt;TikTok logo also has a white symbol of Musical Note in it, with the black background. While designer created a shaky or glitch effect with two other colors, light aqua and shade of red, to symbolize Tremolo.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tiktok-logo-color-code"&gt;
  &lt;/a&gt;
  TikTok Logo Color Code
&lt;/h2&gt;

&lt;p&gt;TikTok Logo has four colors, Black, shade of Red, shade of Light Aqua or Blue and White Color. TikTok was launched in 2016 and it's logo hasn't changed much since then. The Light Aqua and shade of Red, these two colors are not much visible in smaller size logo of TikTok.&lt;/p&gt;

&lt;p&gt;The Hex Codes, RGB Codes and CMYK Codes of all four colors of TikTok logo are given below.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tiktok-logo-color-hex-code"&gt;
  &lt;/a&gt;
  TikTok Logo Color Hex Code
&lt;/h2&gt;

&lt;p&gt;The Hex values or Hex Codes of all Colors of TikTok Logo are given below.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Black&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Hex Value: #010101;&lt;/p&gt;

&lt;p&gt;*&lt;em&gt;Light Aqua&lt;br&gt;
*&lt;/em&gt;&lt;br&gt;
Hex Value: #69C9D0;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Red&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Hex Value: #EE1D52;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;White&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Hex Value: #FFFFFF;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tiktok-logo-color-rgb-code"&gt;
  &lt;/a&gt;
  TikTok Logo Color RGB Code
&lt;/h2&gt;

&lt;p&gt;The RGB values or RGB Codes of all Colors of TikTok Logo are given below.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Black&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;RGB Value: (1, 1, 1)&lt;/p&gt;

&lt;p&gt;*&lt;em&gt;Light Aqua&lt;br&gt;
*&lt;/em&gt;&lt;br&gt;
RGB Value: (105, 201, 208)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Red&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;RGB Value: (238, 29, 82)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;White&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;RGB Value: (255, 255, 255)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tiktok-logo-color-cmyk-code"&gt;
  &lt;/a&gt;
  TikTok Logo Color CMYK Code
&lt;/h2&gt;

&lt;p&gt;The CMYK values or CMYK Codes of all Colors of TikTok Logo are given below.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Black&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;CMYK Value: (0%, 0%, 0%, 100%)&lt;/p&gt;

&lt;p&gt;*&lt;em&gt;Light Aqua&lt;br&gt;
*&lt;/em&gt;&lt;br&gt;
CMYK Value: (50%, 3%, 0%, 18%)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Red&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;CMYK Value: (0%, 88%, 66%, 7%)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;White&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;CMYK Value: (0%, 0%, 0%, 0%)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt; : &lt;a href="https://www.pakainfo.com/tik-tok-colors/"&gt;Tik Tok Colors&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>tutorial</category>
      <category>productivity</category>
      <category>css</category>
    </item>
    <item>
      <title>Slice and Splice JavaScript Arrays Like a Pro</title>
      <author>Sumudu Siriwardana</author>
      <pubDate>Tue, 07 Dec 2021 09:23:41 +0000</pubDate>
      <link>https://dev.to/sumusiriwardana/slice-and-splice-javascript-arrays-like-a-pro-2d9d</link>
      <guid>https://dev.to/sumusiriwardana/slice-and-splice-javascript-arrays-like-a-pro-2d9d</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This article was originally published on &lt;a href="https://dasha.ai/en-us/blog/javascript-arrays-slice-and-splice"&gt;Dasha.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In case you are wondering, Dasha is a &lt;strong&gt;conversational-AI-as-a-service&lt;/strong&gt; platform that lets you embed realistic voice and text conversational capabilities into your apps or products.  &lt;a href="https://auth.dasha.ai/account/register"&gt;Start building for free!&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;Do you find yourself looking up the difference between slice() and splice() methods all the time?&lt;/p&gt;

&lt;p&gt;The two methods are among the most used array methods when it comes to adding, updating, or removing items in an array, and cloning an array or copying a portion of an array.  ​&lt;/p&gt;

&lt;p&gt;Slice() and splice() methods look similar, and they sound similar, so it's very easy to get confused and remember which is which. I've put together this guide on these two methods so that you can slice and splice JavaScrips arrays like a pro. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Pcl9I1dd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637390493075/6vSKjLJt-.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Pcl9I1dd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637390493075/6vSKjLJt-.png" alt="slice-vs-splice.png" width="500" height="557"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#slice-method"&gt;
  &lt;/a&gt;
  Slice() Method
&lt;/h2&gt;

&lt;p&gt;The slice() method copies a chunk (or slice) from an array and returns that copied part as a new array. It does not modify or change the original array. Instead, it creates a new shallow copy of the original array.&lt;/p&gt;

&lt;p&gt;This method takes two optional arguments. The first argument is the &lt;code&gt;startIndex&lt;/code&gt;, and the second is the &lt;code&gt;endIndex&lt;/code&gt;.  If you do not pass any arguments, the entire original array will be copied by default. Also, If the arguments you pass are greater than the actual array, it will return an empty array. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Syntax&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// No arguments&lt;/span&gt;
&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="err"&gt;​&lt;/span&gt;&lt;span class="c1"&gt;// One argument&lt;/span&gt;
&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;startIndex&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="err"&gt;​&lt;/span&gt;&lt;span class="c1"&gt;// Two arguments&lt;/span&gt;
&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;startIndex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;endIndex&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Parameters&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;startIndex&lt;/code&gt;: 

&lt;ul&gt;
&lt;li&gt;The index where the slice should begin. &lt;/li&gt;
&lt;li&gt;If the value is omitted, it will start at 0. &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;endIndex&lt;/code&gt;: 

&lt;ul&gt;
&lt;li&gt;The slice will end before this index. So, for example, adding &lt;code&gt;index 4&lt;/code&gt; will slice up to &lt;code&gt;index 3&lt;/code&gt;, omitting the value of &lt;code&gt;index 4&lt;/code&gt;. &lt;/li&gt;
&lt;li&gt;If the &lt;code&gt;endIndex&lt;/code&gt; value is omitted, it will slice to the end of the array. &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's slice an array with no arguments:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;favoriteFood&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🍕&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🍔&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🌮&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🍨&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;slicedArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;favoriteFood&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;slicedArray&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// ["🍕", "🍔", "🌮", "🍨"]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;favoriteFood&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;slicedArray&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;//false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example, since there are no arguments, it has returned a copy of the entire array. &lt;/p&gt;

&lt;p&gt;One important thing to note here is that these two arrays are not equal! They are two separate arrays containing the same values inside them. So if you check their equality as in the example, it will return &lt;code&gt;false&lt;/code&gt;.   &lt;/p&gt;

&lt;p&gt;Now let's check how we can slice an array with a single argument.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;favoriteFood&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🍕&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🍔&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🌮&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🍨&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;slicedArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;favoriteFood&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;slicedArray&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// ["🍔", "🌮", "🍨"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you pass a single argument to the slice() method, it grabs all the elements from that argument until the end of the array, including the index in the argument. So in our example, we have made a copy from &lt;code&gt;index 1&lt;/code&gt; to &lt;code&gt;favoriteFood.length - 1&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Here's a visual representation of our example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GfDolLEl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637484088868/-AVxMvauj.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GfDolLEl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637484088868/-AVxMvauj.gif" alt="slice-example-1.gif" width="480" height="282"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's move on to slicing an array by passing two arguments. &lt;/p&gt;

&lt;p&gt;Imagine that we want to copy only the &lt;code&gt;🍔&lt;/code&gt; and &lt;code&gt;🌮&lt;/code&gt; from our previous example to a new array. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--htFpe4y_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637484107516/rr4aTSu9U.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--htFpe4y_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637484107516/rr4aTSu9U.gif" alt="slice-example-2.gif" width="480" height="282"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;favoriteFood&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🍕&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🍔&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🌮&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🍨&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;slicedArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;favoriteFood&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;slicedArray&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// ["🍔", "🌮"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;​&lt;br&gt;
In the above example, &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We have added &lt;code&gt;index 1&lt;/code&gt; as the first argument. Remember that the first argument includes the index itself when slicing the array.&lt;/li&gt;
&lt;li&gt;As the second argument, we have added &lt;code&gt;index 3&lt;/code&gt;. But it doesn't include the index when slicing the array. Instead, it only includes the elements up to that index. In this case, it will grab only up to &lt;code&gt;index 2&lt;/code&gt;. 
This array slice returns a new array with &lt;code&gt;🍔&lt;/code&gt; and &lt;code&gt;🌮&lt;/code&gt;. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Another thing that we can do with the slice() method is that use negative numbers for arguments. Let's see how this works with the below example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;favoriteFood&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🍕&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🍔&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🌮&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🍨&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;slicedArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;favoriteFood&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;slicedArray&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// ["🍔", "🌮", "🍨"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example, we have added a single argument as &lt;code&gt;-3&lt;/code&gt;. This will start counting from the end of the array and slice it (not the beginning from the array). If we have given &lt;code&gt;-2&lt;/code&gt;, it will return only &lt;code&gt;["🌮", "🍨"]&lt;/code&gt;. This is very useful when you want to get the last element of the array, and then you just have to use  &lt;code&gt;-1&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;The slice() method is very useful for cloning an array, copying a portion of an array, and converting an array-like object into an array. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2QMloLdt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637413072435/FqfF-SItr.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2QMloLdt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637413072435/FqfF-SItr.gif" alt="slice-it-all.gif" width="480" height="270"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#splice-method"&gt;
  &lt;/a&gt;
  Splice() Method
&lt;/h2&gt;

&lt;p&gt;The splice() method helps you add, update, and remove elements in an array. This method modifies the array and does not create a new array. It will also return a new array with all the elements you have removed, which is helpful if you want to track what has been removed.  &lt;/p&gt;

&lt;p&gt;The splice() method takes several arguments to decide which elements to delete, the delete count, and what elements to add. You can check further details on these parameters below. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Syntax&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// general&lt;/span&gt;
&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;startIndex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// With the optional parameters&lt;/span&gt;
&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;deleteCount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;newElement&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Parameters&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;start&lt;/code&gt;(required): 

&lt;ul&gt;
&lt;li&gt;The index where the slice should begin for removing elements in the array.&lt;/li&gt;
&lt;li&gt;If the &lt;code&gt;start&lt;/code&gt; is negative, it will count backward from the end of the array.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;deleteCount&lt;/code&gt; (optional): 

&lt;ul&gt;
&lt;li&gt;The number of elements to be deleted from that index.&lt;/li&gt;
&lt;li&gt;If you don't specify the &lt;code&gt;deleteCount&lt;/code&gt;, it will delete everything in the array after the &lt;code&gt;startIndex&lt;/code&gt;. &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;newElement&lt;/code&gt; (optional):  The new element(s) to be added to the array.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's see how to remove elements with a single argument, with only the &lt;code&gt;start&lt;/code&gt; parameter. &lt;/p&gt;

&lt;p&gt;We have our favorite fruits in the array below, and we want to remove the last two fruits. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--STXLi6Rz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637484129639/1UjQsUjgB.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--STXLi6Rz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637484129639/1UjQsUjgB.gif" alt="splice-example-1.gif" width="480" height="282"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;favoriteFruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🍓&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🥑&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🍊&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🍇&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;removedFruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;favoriteFruits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;favoriteFruits&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//  ["🍓", "🥑"]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;removedFruits&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//   ["🍊", "🍇"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example, we have added the &lt;code&gt;start&lt;/code&gt; parameter as &lt;code&gt;2&lt;/code&gt;, and that's where it has started removing things from this array. Since we haven't specified a second parameter, it has removed everything after &lt;code&gt;index 2&lt;/code&gt;, including the &lt;code&gt;index 2&lt;/code&gt; element. So now the &lt;code&gt;favoriteFruits&lt;/code&gt; only includes &lt;code&gt;["🍓", "🥑"]&lt;/code&gt;. And you can see the removed item in the array, &lt;code&gt;removedFruits&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you add &lt;code&gt;0&lt;/code&gt; as the &lt;code&gt;start&lt;/code&gt; parameter without any other parameters, it will remove everything from the array and change it to an empty array. Also, if you add any number higher than the largest index number of the array, it will not affect the original array. &lt;/p&gt;

&lt;p&gt;So what happens if we add a negative number as the &lt;code&gt;start&lt;/code&gt; parameter? If the &lt;code&gt;start&lt;/code&gt; is negative, it will count backward from the end of the array and remove the elements. Check the below example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;favoriteFruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🍓&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🥑&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🍊&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🍇&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;removedFruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;favoriteFruits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;favoriteFruits&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//  ["🍓"]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;removedFruits&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//   ["🥑", "🍊", "🍇"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example, we have added the &lt;code&gt;start&lt;/code&gt; parameter as &lt;code&gt;-3&lt;/code&gt;. This will start counting from the end of the array and remove items. If we have given &lt;code&gt;-2&lt;/code&gt;, the original array will return &lt;code&gt;["🍊", "🍇"]&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Now let's see how to remove elements with the &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;deleteCount&lt;/code&gt; parameters. &lt;/p&gt;

&lt;p&gt;Check the below example.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VFIfhytR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637484149581/H-S-fHiXc.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VFIfhytR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637484149581/H-S-fHiXc.gif" alt="splice-example-2.gif" width="480" height="282"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;favoriteFruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🍓&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🥑&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🍊&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🍇&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;removedFruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;favoriteFruits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;favoriteFruits&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//  ["🍓", "🍇"]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;removedFruits&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//   ["🥑", "🍊"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example, we removed elements starting from &lt;code&gt;index 1&lt;/code&gt; and removed two elements. And it has modified the original array with the remaining elements and returned an array with the removed elements. &lt;/p&gt;

&lt;p&gt;So let's move on to adding elements to the array with the &lt;code&gt;newElement&lt;/code&gt; parameter.&lt;/p&gt;

&lt;p&gt;You can add a continuous list of elements separated by commas. Let's add two additional fruits to our favorite Fruits. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f_tKFznW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637484162373/qqhwUIF0D.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f_tKFznW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637484162373/qqhwUIF0D.gif" alt="splice-exaple-3.gif" width="480" height="282"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;favoriteFruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🍓&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🥑&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🍊&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🍇&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;removedFruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;favoriteFruits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🍏&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🍒&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;favoriteFruits&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//  ["🍓", "🍏", "🍒", "🍊", "🍇"]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;removedFruits&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;//   ["🥑"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's see what we have done here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We removed &lt;code&gt;"🥑"&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;We set the &lt;code&gt;deleteCount&lt;/code&gt; as &lt;code&gt;1&lt;/code&gt; since we want to remove only one element.&lt;/li&gt;
&lt;li&gt;And we added &lt;code&gt;"🍏", "🍒"&lt;/code&gt; to the array where we remove the elements. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can add any number of elements to the array by separating them by commas. When we add elements to the array, the array will grow in length. Also, if you don't want to remove any items, you can simply add the second parameter as &lt;code&gt;0&lt;/code&gt;. &lt;br&gt;
​&lt;br&gt;
The splice() method is mainly used when you need to delete or add new elements to an array. And you can either assign the returned array to a variable or ignore it as you wish. &lt;/p&gt;

&lt;p&gt;Now we have a clear idea about how slice() and splice() methods work. You can find out what's the main differences between these two methods below.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#slice-vs-splice"&gt;
  &lt;/a&gt;
  Slice() vs. Splice()
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Slice()&lt;/th&gt;
&lt;th&gt;Splice()&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Does not modify the original array&lt;/td&gt;
&lt;td&gt;Modifies the original array&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;This method is used to get a new array by selecting a sub-array of a given array.&lt;/td&gt;
&lt;td&gt;This method is used to add/remove an item from the given array.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;The result has to be assigned to a new array variable.&lt;/td&gt;
&lt;td&gt;The result is not required to assign to a new variable.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Takes two arguments, both being optional.&lt;/td&gt;
&lt;td&gt;Takes 3 arguments, the last two arguments being optional, and the last argument can have any number of parameters (just remember that you don't have to pass it as an array type).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;The second argument represents an index.&lt;/td&gt;
&lt;td&gt;The second argument represents the count.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;I hope this post helps you clear the confusion between these two methods. I use one trick to remember things: &lt;strong&gt;the letter "p" of the splice() referred to as &lt;em&gt;permanently modifying&lt;/em&gt; the array&lt;/strong&gt;. I hope it will help you as well 😊&lt;/p&gt;

&lt;p&gt;Happy Coding! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6nNDv4bu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637433934605/oI5ngNT_V.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6nNDv4bu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637433934605/oI5ngNT_V.gif" alt="happy-coding.gif" width="480" height="320"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://dasha.ai/"&gt;&lt;img alt="Visit Dasha AI" src="https://res.cloudinary.com/practicaldev/image/fetch/s--66PDtMQU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars.githubusercontent.com/u/75135110%3Fs%3D50%26v%3D4" width="50" height="50"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Join  &lt;a href="https://community.dasha.ai/"&gt;Dasha Developer Community&lt;/a&gt; where you’ll meet welcoming like-minded developers who share ideas, questions, and get all the help they need to build cool conversational AI apps (for free, of course).&lt;/em&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>How to get out of tutorial doom</title>
      <author>Nmurgor</author>
      <pubDate>Tue, 07 Dec 2021 09:21:21 +0000</pubDate>
      <link>https://dev.to/nmurgor/how-to-get-out-of-tutorial-doom-13of</link>
      <guid>https://dev.to/nmurgor/how-to-get-out-of-tutorial-doom-13of</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;As a new developer, you are constantly bombarded with Youtube tutorials, newsletters with titles like: “Learn React in 30 minutes” and whatnot. It’s so insane.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this blog article, I’ll share my view about the so-called “tutorial doom”.&lt;br&gt;
Tutorial hell is when one confines all forms of learning to curated tutorials in the form of Youtube videos.&lt;br&gt;
Let’s see how to avoid falling into this pit.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-get-out-of-the-comfort-zone"&gt;
  &lt;/a&gt;
  1. Get out of the comfort zone
&lt;/h3&gt;

&lt;p&gt;Getting out of a comfort zone is like a rest. Taking on a project as a freelancer and sweat through it to the end can be a great way of learning. At some point, you will learn things on the way as-needed using standard docs, blog articles and tutorials as you build the project towards completion.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-goal-oriented-course-of-action"&gt;
  &lt;/a&gt;
  2. Goal oriented course of action
&lt;/h3&gt;

&lt;p&gt;Want to build a mobile app for a business? chances are you already know some React. You can begin by building a mobile application using React Native. As you progress, the overall goal would be to build the mobile app. 6 months down the line, you’ll see your React Native skills slowly improving. Why? because you have a goal set.&lt;br&gt;
I blocked Youtube using an extension because Youtube nowadays has “clickbaity” videos such as “Learn X in y minutes”&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-going-back-to-the-basics"&gt;
  &lt;/a&gt;
  3. Going back to the basics
&lt;/h3&gt;

&lt;p&gt;Our brains are tiny, we can never recall all the details. We can never memorize details instead we refer. Once I feel stuck, I go back to the standard documentation or book to refer and get the gist of what I’m supposed to do.&lt;br&gt;
Memorization is for school, once you feel you are stuck, ask for help, look up the problem or call a friend to help out.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-build-build-build"&gt;
  &lt;/a&gt;
  4. Build, build, build
&lt;/h3&gt;

&lt;p&gt;Build things off the concepts you already grasped. You don’t have to complete the projects you’ve built. I recently wanted to learn how ORM and Migrations work in Laravel, I built a small dating site to learn the concept. Build small throw-away projects to get a finer grasp of the concept.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Tutorials are good at breaking down a concept so one can dive in and start hacking but tutorials are not the alpha and omega of learning. My use of tutorial goes like this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Get project concept&lt;/li&gt;
&lt;li&gt;Break the project into small bits&lt;/li&gt;
&lt;li&gt;For new parts, I look up tutorials related to these parts to see how it is done(blog article type)&lt;/li&gt;
&lt;li&gt;Use the tutorials to tackle the project with all project requirements and goals in mind&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;Here's how to get out the most of tutorials:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Look for projects as a freelancer and tackle the projects. Small projects can be a great start&lt;/li&gt;
&lt;li&gt;Build small projects that solidify learning about a concept&lt;/li&gt;
&lt;li&gt;Write blog articles about your progress in learning and observations, tips to document the fun!&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>productivity</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How to manage environment secrets and credentials in a Nodejs application</title>
      <author>Nmurgor</author>
      <pubDate>Tue, 07 Dec 2021 09:13:19 +0000</pubDate>
      <link>https://dev.to/nmurgor/how-to-manage-environment-scerets-and-credentials-in-nodejs-application-4ano</link>
      <guid>https://dev.to/nmurgor/how-to-manage-environment-scerets-and-credentials-in-nodejs-application-4ano</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;In this blog article, we will see how we can programmatically store and read environment secrets in a Nodejs application.&lt;/p&gt;

&lt;p&gt;Ideally, we'd want to avoid:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;hard-coding API KEYs, PRIVATE KEYs, WALLET SEED phrases, we might end up pushing this sensitive data to a VCS like GitHub or Bitbucket&lt;/li&gt;
&lt;li&gt;exposing sensitive these credentials while in use.&lt;/li&gt;
&lt;li&gt;make these credentials configurable&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's jump in.&lt;br&gt;
You can find all project code here: &lt;a href="https://github.com/naftalimurgor/environment-secrets"&gt;manage environment secrets&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#1-add-a-raw-gitignore-endraw-file-to-root-of-project"&gt;
  &lt;/a&gt;
  1. add a &lt;code&gt;.gitignore&lt;/code&gt; file to root of project.
&lt;/h3&gt;

&lt;p&gt;The first step would be creating a &lt;code&gt;.gitignore&lt;/code&gt; file. This file will contain an entry of files and directories that we want git to ignore so we don't accidentally add the files to version control.&lt;/p&gt;

&lt;p&gt;Add &lt;code&gt;.env&lt;/code&gt; to the &lt;code&gt;.gitignore&lt;/code&gt; file, like:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Inside file: .gitignore&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;.env
// other entries to be ignored by git
node_modules
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-create-a-env-file"&gt;
  &lt;/a&gt;
  2. create a .env file
&lt;/h3&gt;

&lt;p&gt;Create a file named &lt;code&gt;.env&lt;/code&gt; at the root of your project.&lt;br&gt;
Inside the file, add a key value pair of your credentials like this(no double quotes)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;API_KE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;your_value
&lt;span class="nv"&gt;MNEMOMIC&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;mnemonic
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-read-environment-secrets-from-the-env-file"&gt;
  &lt;/a&gt;
  3. Read environment secrets from the .env file
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Add &lt;code&gt;dotenv&lt;/code&gt; dependency to your project
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt; yarn add dotenv
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then from where we want to read environmnent secrets:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Import the &lt;code&gt;dotenv&lt;/code&gt; dependency:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dotenv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dotenv&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// or with ESM&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;dotenv&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dotenv&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// read and make secrets from the .env entries available:&lt;/span&gt;
&lt;span class="nx"&gt;dotenv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Call &lt;code&gt;dotenv.config()&lt;/code&gt; to make the secrets available from the &lt;code&gt;process.env&lt;/code&gt; object&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MNEMONIC&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MNEMEONIC&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;MNEMONIC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// prints 'mnemomic`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;The goal of hiding environment secrets is to hide sensitive information within our applications. Care must however be taken not to add, commit and push .env files to version control as they might end up in the wrong hands.&lt;/p&gt;

&lt;p&gt;Here's what might happen, if one accidentally pushes PRIVATE key to &lt;code&gt;Github&lt;/code&gt;, a bot may grab the private key, restore your wallet and drain all your ETH or BTC in a matter of seconds. &lt;/p&gt;

&lt;p&gt;Did I miss anything? Feel free to leave a comment, a complement and honest feedback.&lt;br&gt;
Happy hacking!&lt;br&gt;
This article was originally published at &lt;a href="https://naftalimurgor.netlify.com"&gt;https://naftalimurgor.netlify.com&lt;/a&gt;&lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>security</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>🆕 Luos selftest during compilation</title>
      <author>Emanuel Allely</author>
      <pubDate>Tue, 07 Dec 2021 09:12:41 +0000</pubDate>
      <link>https://dev.to/luos/luos-selftest-during-compilation-2dg6</link>
      <guid>https://dev.to/luos/luos-selftest-during-compilation-2dg6</guid>
      <description>&lt;p&gt;🆕 Luos selftest during compilation&lt;/p&gt;

&lt;p&gt;Selftest is a specific way of compiling Luos, and specially LuosHAL, allowing you to validate your entire hardware configuration. To make it work you have to connect your different connectors of the board together. Selftest will try to use different hardware resources configured for Luos and will check if everything is OK for you.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.luos.io/docs/hardware-consideration/Test-your-configuration/"&gt;https://docs.luos.io/docs/hardware-consideration/Test-your-configuration/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AtMY8pSe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eznputucm7om29waiw18.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AtMY8pSe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eznputucm7om29waiw18.png" alt="Software conditions" width="880" height="612"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>luos</category>
      <category>embedded</category>
      <category>opensource</category>
      <category>edge</category>
    </item>
    <item>
      <title>A 2 Minute Visual Guide to useEffect</title>
      <author>Alex Sidorenko</author>
      <pubDate>Tue, 07 Dec 2021 09:11:54 +0000</pubDate>
      <link>https://dev.to/sidkh/a-2-minute-visual-guide-to-useeffect-46c0</link>
      <guid>https://dev.to/sidkh/a-2-minute-visual-guide-to-useeffect-46c0</guid>
      <description>&lt;p&gt;Here is what happens when you try to fetch data directly from the body of a functional component in React 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uwTtfSQ1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j8f8vb7ueifgwuri5cnf.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uwTtfSQ1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j8f8vb7ueifgwuri5cnf.gif" alt="Image description" width="880" height="480"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Why does this happen and what tools does React offer to solve this problem?&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#side-effects"&gt;
  &lt;/a&gt;
  Side effects
&lt;/h2&gt;

&lt;p&gt;If your React component affects anything outside of itself, it's called a side effect.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6RPhUxCG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/195vlozltczbysnz504x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6RPhUxCG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/195vlozltczbysnz504x.png" alt="Image description" width="880" height="594"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Side effects shouldn't happen during component render. Therefore they do not belong to the body of a functional component. React has a special place for them. &lt;/p&gt;

&lt;p&gt;To learn more about side effects and why they need a special treatment, check out this brilliant section in the new React documentation - &lt;a rel="noreferrer" href="https://beta.reactjs.org/learn/keeping-components-pure"&gt;Keeping Components Pure&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#dealing-with-side-effects"&gt;
  &lt;/a&gt;
  Dealing with side effects
&lt;/h2&gt;

&lt;p&gt;The special place for side effects is inside the &lt;code&gt;useEffect&lt;/code&gt; hook. Hence the name.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;By using this Hook, you tell React that your component needs to do something after render. React will remember the function you passed (we’ll refer to it as our “effect”), and call it later after performing the DOM updates.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://reactjs.org/docs/hooks-effect.html#example-using-hooks"&gt;React Docs - Using the Effect Hook&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's try it with our initial component:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9MQID7mo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wita221zf6u0191duxkc.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9MQID7mo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wita221zf6u0191duxkc.gif" alt="Image description" width="880" height="573"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;useEffect&lt;/code&gt; does not run during the render. It runs after the render, which is what we want. But we still have the same problem. That's because, by default, &lt;code&gt;useEffect&lt;/code&gt; will run after every component render.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#running-effects-conditionally"&gt;
  &lt;/a&gt;
  Running effects conditionally
&lt;/h2&gt;

&lt;p&gt;There is a way to run effects conditionally, not after every render. The &lt;code&gt;useEffect&lt;/code&gt; hook accepts the dependency list as a second argument. React will only re-run the effect if any dependency in the list changes. Let's try it out:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5dpR77yn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/di3t6tfj0xh1cgo03vfq.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5dpR77yn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/di3t6tfj0xh1cgo03vfq.gif" alt="Image description" width="880" height="573"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you pass an empty array as a dependency list, the effect will run only once, after the first render. It prevents the infinite loop from happening in our case. However, you might notice that our fetch function relies on the &lt;code&gt;props.id&lt;/code&gt; .&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#reacting-to-changes"&gt;
  &lt;/a&gt;
  Reacting to changes
&lt;/h2&gt;

&lt;p&gt;Let's pick up where we left off and see what happens when we change the component's props.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ung3zbiB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ogdfb4wu5gnhxh58wiy2.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ung3zbiB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ogdfb4wu5gnhxh58wiy2.gif" alt="Image description" width="880" height="607"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We would expect the component to react to prop change and fetch another product, but nothing happens. That's because we have an empty dependency list. &lt;/p&gt;

&lt;p&gt;If the side effect relies on any props or state variables, we should put them in the dependency list. After every render, React will check whether any dependency has changed, and if it did, will re-run the effect.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vafG9e5A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9s1ms7xnja70yim1twp6.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vafG9e5A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9s1ms7xnja70yim1twp6.gif" alt="Image description" width="880" height="607"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#to-be-continued"&gt;
  &lt;/a&gt;
  To be continued...
&lt;/h2&gt;

&lt;p&gt;There are a couple more things to learn about useEffect. Don't miss the next 2 minute guide. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://alexsidorenko.com/"&gt;https://alexsidorenko.com/&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Time Tracking Benefits and Best Practices of the Year 2021</title>
      <author>katemay</author>
      <pubDate>Tue, 07 Dec 2021 09:05:48 +0000</pubDate>
      <link>https://dev.to/katemay48947206/time-tracking-benefits-and-best-practices-of-the-year-2021-31mc</link>
      <guid>https://dev.to/katemay48947206/time-tracking-benefits-and-best-practices-of-the-year-2021-31mc</guid>
      <description>&lt;p&gt;Discover all the answers about time tracking, its importance and benefits in this complete guide. &lt;a href="https://blog.tmetric.com/time-tracking-benefits-and-best-practices-of-the-year-2021/"&gt;https://blog.tmetric.com/time-tracking-benefits-and-best-practices-of-the-year-2021/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>productivity</category>
    </item>
    <item>
      <title>10 Most Important Points to Consider While Redesigning Your Website</title>
      <author>Mosche Amara</author>
      <pubDate>Tue, 07 Dec 2021 08:50:34 +0000</pubDate>
      <link>https://dev.to/amaramosche/10-most-important-points-to-consider-while-redesigning-your-website-4h7n</link>
      <guid>https://dev.to/amaramosche/10-most-important-points-to-consider-while-redesigning-your-website-4h7n</guid>
      <description>&lt;p&gt;Believe it or not! Keeping the old site for a longer period won't procure the benefit that you want, it will downline your client commitment, and no potential leads will be generated. Likewise, it will influence Google's ranking.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vgE1h2Iw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1y971gy1vo6bdpcbisi0.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vgE1h2Iw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1y971gy1vo6bdpcbisi0.PNG" alt="Image description" width="710" height="445"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Site updating is extremely important for your business. You need to think about the new patterns, market trends for updating and say goodbye to the old and out of date web design. With the &lt;a href="https://bit.ly/3y1aiFK"&gt;website redesign&lt;/a&gt;, improved user-interface, the performance of the website, increased Google ranking bringing more traction and solid online presence. Yet, these things possibly happen when a legitimate methodology is executed keeping the focus on clients' perspectives.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Below are the factors you need to consider before redesigning your website:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mobile-Friendly&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It is the foremost factor for website redesigning. It is a myth that developing a mobile-friendly means you need to create another website that can perform specifically on a mobile device. It is indeed making your business content and &lt;a href="https://bit.ly/3rK0VsW"&gt;website design&lt;/a&gt; easily accessible via both the platform's web and mobile. In a current time where the mobile device acts as the tool to avail desired services and products at fingertips, developing a mobile responsive website is unavoidable.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Easy Navigation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;After mobile-friendliness, this factor holds a second position in the list of website redesign factors. Expecting that while making a trip to any most loved holiday destination you have a travel guide that helps you to demonstrate a place to make your trip more sensational. Likewise, I need to guarantee a simple site route helping clients with simple navigation that guides users to identify where to go next in order to find what they are looking for.&lt;/p&gt;

&lt;p&gt;To accomplish this, your site needs a route menu either at the top or as the route slide. Route slide known as the cheeseburger menu is less successful contrasted with the menu shown at the top. Clients barely save 10 secs in your site and in that term they like to look over all the significant components which the slide can't show.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Optimize load time and improve web performance&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;At the point when you consider website redesign you anticipate speed and execution. This is one point you need to have a total spotlight on. From the clients' perspective, an expansion in the site speed from 8 to 2 seconds can support your transformation rate by 74%.&lt;/p&gt;

&lt;p&gt;To upgrade the loading time, you initially consider image optimization. Images are one of the principal reasons influencing site loading time. There are different image optimization tools available that are easily accessible around the web which won't allow you to compromise on the quality.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Keep It Simple&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The time is over when a business website was flooded with huge content and complex design. But today it’s about simplicity, elegance, and communication- how well your website can communicate with the end-user. Web designers ensure that they pick eye-catchy and sober colors that attract the visitor's attention.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Use Call-To-Action (CTA)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;CTA plays a vital role in improving the performance of the website. CTAs can be in any form, any size, and any context. For example, a submit button on the contact us page notify the entrepreneur via mail or call when the user hits the CTA or action button submit button designed in the&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Social Media Plugins&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It is significant for you to add social media plugins to your website. If it's not in the website redesigning, you are missing a connection with social media traffic. While navigating the website, users also go through your social media channels directly from the website to know more about your marketing campaigns and content.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Contact Information is a Must&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It is a surprising thing to know that there is some website that does not display the contact details of the organization. If you don’t include the contact number or email id then don't expect to get a query from a single user? Adding content information plays a lead role to convince users and contact you without any glitches.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Add a Landing Page&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Adding a landing page is a top priority while redesigning your website. It influences users to get detailed information about the services and products you are selling. Your landing page should be appealing, deliver easy to understand the customer, and highlight the unique selling points of your business.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Personalization&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A personalized website increases user engagement rate 2 times faster. You should customize your website by understanding the user's tastes and behavior. You can make your website personalized on the basis of language and demographic area.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Website Copyright&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is not true that users don’t look over the website copyright date. And so, organizations don’t draw time to change it which remains static at the bottom of the website.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The above factors mentioned for redesigning a website are thoroughly analyzed from both user's and business perspectives. You can include these points as per the performance of your website.&lt;/p&gt;

</description>
      <category>webdesign</category>
    </item>
    <item>
      <title>How to RickRoll a friend with HTML and JS</title>
      <author>SnowBit</author>
      <pubDate>Tue, 07 Dec 2021 08:49:34 +0000</pubDate>
      <link>https://dev.to/snowbit/how-to-rickroll-a-friend-with-html-and-js-38j0</link>
      <guid>https://dev.to/snowbit/how-to-rickroll-a-friend-with-html-and-js-38j0</guid>
      <description>&lt;p&gt;Basically, this article will contain a video in which I will be showing how you can rick roll someone using &lt;strong&gt;HTML&lt;/strong&gt; and &lt;strong&gt;JS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/_or4TOKGYiY"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Happy Coding!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>html</category>
      <category>programming</category>
    </item>
    <item>
      <title>10 Most Important Points to Consider While Redesigning Your Website</title>
      <author>Mosche Amara</author>
      <pubDate>Tue, 07 Dec 2021 08:46:02 +0000</pubDate>
      <link>https://dev.to/amaramosche/10-most-important-points-to-consider-while-redesigning-your-website-2db</link>
      <guid>https://dev.to/amaramosche/10-most-important-points-to-consider-while-redesigning-your-website-2db</guid>
      <description>&lt;p&gt;Believe it or not! Keeping the old site for a longer period won't procure the benefit that you want, it will downline your client commitment, and no potential leads will be generated. Likewise, it will influence Google's ranking.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z8DiGZuV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7erz373c3pn3i0ydlodu.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z8DiGZuV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7erz373c3pn3i0ydlodu.PNG" alt="Image description" width="710" height="445"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Site updating is extremely important for your business. You need to think about the new patterns, market trends for updating and say goodbye to the old and out of date web design. With the website redesign, improved user-interface, the performance of the website, increased Google ranking bringing more traction and solid online presence. Yet, these things possibly happen when a legitimate methodology is executed keeping the focus on clients' perspectives.&lt;/p&gt;

&lt;p&gt;Below are the factors you need to consider before redesigning your website:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mobile-Friendly&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It is the foremost factor for website redesigning. It is a myth that developing a mobile-friendly means you need to create another website that can perform specifically on a mobile device. It is indeed making your business content and &lt;a href="https://bit.ly/3rK0VsW"&gt;website design&lt;/a&gt; easily accessible via both the platform's web and mobile. In a current time where the mobile device acts as the tool to avail desired services and products at fingertips, developing a mobile responsive website is unavoidable.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Easy Navigation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;After mobile-friendliness, this factor holds a second position in the list of &lt;a href="https://bit.ly/3y1aiFK"&gt;website redesign&lt;/a&gt; factors. Expecting that while making a trip to any most loved holiday destination you have a travel guide that helps you to demonstrate a place to make your trip more sensational. Likewise, I need to guarantee a simple site route helping clients with simple navigation that guides users to identify where to go next in order to find what they are looking for.&lt;/p&gt;

&lt;p&gt;To accomplish this, your site needs a route menu either at the top or as the route slide. Route slide known as the cheeseburger menu is less successful contrasted with the menu shown at the top. Clients barely save 10 secs in your site and in that term they like to look over all the significant components which the slide can't show.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Optimize load time and improve web performance&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;At the point when you consider website redesign you anticipate speed and execution. This is one point you need to have a total spotlight on. From the clients' perspective, an expansion in the site speed from 8 to 2 seconds can support your transformation rate by 74%.&lt;/p&gt;

&lt;p&gt;To upgrade the loading time, you initially consider image optimization. Images are one of the principal reasons influencing site loading time. There are different image optimization tools available that are easily accessible around the web which won't allow you to compromise on the quality.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Keep It Simple&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The time is over when a business website was flooded with huge content and complex design. But today it’s about simplicity, elegance, and communication- how well your website can communicate with the end-user. Web designers ensure that they pick eye-catchy and sober colors that attract the visitor's attention.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Use Call-To-Action (CTA)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;CTA plays a vital role in improving the performance of the website. CTAs can be in any form, any size, and any context. For example, a submit button on the contact us page notify the entrepreneur via mail or call when the user hits the CTA or action button submit button designed in the&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Social Media Plugins&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It is significant for you to add social media plugins to your website. If it's not in the website redesigning, you are missing a connection with social media traffic. While navigating the website, users also go through your social media channels directly from the website to know more about your marketing campaigns and content.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Contact Information is a Must&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It is a surprising thing to know that there is some website that does not display the contact details of the organization. If you don’t include the contact number or email id then don't expect to get a query from a single user? Adding content information plays a lead role to convince users and contact you without any glitches.&lt;/p&gt;

&lt;p&gt;*&lt;em&gt;Add a Landing Page&lt;br&gt;
*&lt;/em&gt;&lt;br&gt;
Adding a landing page is a top priority while redesigning your website. It influences users to get detailed information about the services and products you are selling. Your landing page should be appealing, deliver easy to understand the customer, and highlight the unique selling points of your business.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Personalization&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A personalized website increases user engagement rate 2 times faster. You should customize your website by understanding the user's tastes and behavior. You can make your website personalized on the basis of language and demographic area.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Website Copyright&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is not true that users don’t look over the website copyright date. And so, organizations don’t draw time to change it which remains static at the bottom of the website.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The above factors mentioned for redesigning a website are thoroughly analyzed from both user's and business perspectives. You can include these points as per the performance of your website.&lt;/p&gt;

</description>
      <category>webdesign</category>
    </item>
    <item>
      <title>Clip-Path Animation 💖</title>
      <author>Ustariz Enzo</author>
      <pubDate>Tue, 07 Dec 2021 08:33:06 +0000</pubDate>
      <link>https://dev.to/ziratsu/clip-path-animation-196a</link>
      <guid>https://dev.to/ziratsu/clip-path-animation-196a</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4j6sGOHX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v9nwqqhpap8t84bntcz9.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4j6sGOHX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v9nwqqhpap8t84bntcz9.gif" alt="clip patch animation" width="600" height="338"&gt;&lt;/a&gt;Hey &lt;strong&gt;fellow creators&lt;/strong&gt;,&lt;/p&gt;

&lt;p&gt;Let’s create an easy but awesome &lt;em&gt;clip-path animation&lt;/em&gt; in less than a minute!&lt;/p&gt;

&lt;p&gt;If you prefer to watch the video &lt;strong&gt;version&lt;/strong&gt;, it's right here :&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/jfIGA_YQlD8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-the-html-structure"&gt;
  &lt;/a&gt;
  1. The HTML structure.
&lt;/h2&gt;

&lt;p&gt;Create two boxes with one image inside each one.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"box b1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"img1.jpg"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"box b2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"img2.jpg"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-style-the-page"&gt;
  &lt;/a&gt;
  2. Style the page.
&lt;/h2&gt;

&lt;p&gt;First resize each box to take up the full height of the viewport:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.box&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then add a different background colour to each box to differentiate them easily:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.b1&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#e27d60&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.b2&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#85cdca&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, size the images however you want, center them and fix them to the middle of the screen, following the scroll:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;img&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;object-fit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cover&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;600px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;400px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For now, the images are one above the other. To fix that, you need to clip the boxes so that only the correct image shows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.box&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;clip-path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;polygon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The values inside of the parentheses correspond to the X and Y coordinates of the clipped area.&lt;br&gt;
It will create a new stacking context for each box and only shows what is inside that stacking context.&lt;/p&gt;

&lt;p&gt;You’ll now have a &lt;em&gt;lovely animation&lt;/em&gt; to showcase your images!&lt;/p&gt;

&lt;p&gt;Come and take a look at my &lt;strong&gt;Youtube channel&lt;/strong&gt;: &lt;a href="https://www.youtube.com/c/Learntocreate/videos"&gt;https://www.youtube.com/c/Learntocreate/videos&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;See you soon!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Enzo. &lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
