<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Share your Web Projects Easily</title>
      <author>Pratik Singh</author>
      <pubDate>Thu, 24 Dec 2020 09:08:15 +0000</pubDate>
      <link>https://dev.to/kitarp/share-your-web-projects-easily-4i60</link>
      <guid>https://dev.to/kitarp/share-your-web-projects-easily-4i60</guid>
      <description>&lt;h4&gt;
  &lt;a href="#this-article-is-about-sharing-your-localhost-as-a-link-that-anyone-can-access-we-will-achieve-this-using-ngrok" class="anchor"&gt;
  &lt;/a&gt;
  This article is about sharing your localhost as a link that anyone can access. We will achieve this using  &lt;a href="https://ngrok.com/product"&gt;ngrok&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V-zMaejr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1608791381259/pblNqNYyd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V-zMaejr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1608791381259/pblNqNYyd.png" alt="what-is-localhost.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As a &lt;strong&gt;Web Developer&lt;/strong&gt;, whatever you work on has to be shared as a link that others can access. Irrespective of whether you are a &lt;em&gt;Front-End&lt;/em&gt; or a &lt;em&gt;Back-End&lt;/em&gt; dev, a &lt;em&gt;MERN Stack&lt;/em&gt; or a &lt;em&gt;LAMP Stack&lt;/em&gt; dev, I am assuming you know the importance of &lt;strong&gt;&lt;a href="https://localhost"&gt;https://localhost&lt;/a&gt;&lt;/strong&gt;. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-if-i-told-you-that-the-work-on-your-localhost-can-be-shared-with-others-in-a-few-simple-steps" class="anchor"&gt;
  &lt;/a&gt;
  What if I told you that the work on your localhost can be shared with others in a few simple steps?🤯
&lt;/h4&gt;

&lt;p&gt;There are several methods of deploying your project on a server as a sharable link.&lt;br&gt;
But the problem with this process that you have to-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Commit your code&lt;/em&gt; and &lt;em&gt;Push it to an external server&lt;/em&gt; before anyone can see your progress.&lt;/li&gt;
&lt;li&gt;This process is a time as well as a data-consuming process.
&lt;/li&gt;
&lt;li&gt;As a &lt;strong&gt;#CodeNewbie&lt;/strong&gt; the process is even more tiresome as you have to learn all about git, GitHub, Heroku, AWS, etc. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The answer to all of these Problems is sharing your work without committing the code and pushing it to an external server. This is possible by &lt;em&gt;tunneling&lt;/em&gt; your localhost on the internet using &lt;em&gt;ngrok&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ngrok&lt;/strong&gt; exposes local servers behind NATs and firewalls to the public internet over secure tunnels.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-lets-get-started-" class="anchor"&gt;
  &lt;/a&gt;
  ~ Lets get started ~
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Download from  &lt;a href="https://dashboard.ngrok.com/get-started/setup"&gt;here&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;Unzip the downloaded folder&lt;/li&gt;
&lt;li&gt;Run the

&lt;code&gt;ngrok.exe&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Log in&lt;/em&gt; to your account and head to the

&lt;code&gt;Dashboard&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;In the .exe file Command&lt;br&gt;
&lt;br&gt;
&lt;code&gt;./ngrok authtoken Your_Authentication_Key&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now Fire it up&lt;br&gt;
&lt;br&gt;
&lt;code&gt;./ngrok http 3000&lt;/code&gt;&lt;br&gt;
&lt;br&gt;
if your project is hosted on &lt;a href="http://localhost:3000/"&gt;http://localhost:3000/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The terminal must look like this now-&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kogwgMaN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1608798231942/eQvx-2SlA.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kogwgMaN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1608798231942/eQvx-2SlA.jpeg" alt="8d090eb7-d978-4824-8d29-ffc02751a359.jpg"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This link you see can be shared with others to see your work.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So this link can be accessed by anyone and will work as long as you run the program on your computer.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-should-you-use-ngrok" class="anchor"&gt;
  &lt;/a&gt;
  Why should you use &lt;strong&gt;ngrok&lt;/strong&gt;?
&lt;/h3&gt;

&lt;p&gt;They have very good documentation, easy to use, and have a lot of uses that can help you with many projects that you might work on.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ottzqd_o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1608800319362/SUI55OPHp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ottzqd_o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1608800319362/SUI55OPHp.png" alt="Screenshot 2020-12-24 142724.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I used this while working on a project that was a video calling project so even a little adjustment had to be checked from both ends. Committing and deploying your code on a server has an alternative for now.&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>webdev</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>My VS Code Setup</title>
      <author>Ansh Dhingra</author>
      <pubDate>Thu, 24 Dec 2020 06:41:27 +0000</pubDate>
      <link>https://dev.to/anshdhinhgra47/my-vs-code-setup-4997</link>
      <guid>https://dev.to/anshdhinhgra47/my-vs-code-setup-4997</guid>
      <description>&lt;p&gt;VS Code is one of the best editors out there in the market. And not just for the sake that is launched by Microsoft, it has some really amazing features, the primary one being, allowing developers to install extensions and use as per their requirement.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-do-we-need-extensions-" class="anchor"&gt;
  &lt;/a&gt;
  Why do we need extensions ?
&lt;/h2&gt;

&lt;p&gt;As a developer, you tend to achieve your goals in the minimum time possible. Coding the same 5 lines can be really tiring. That is where extension come in handy. Just 4 words and voilà! the entire syntax is laid out. While some of them autofill the syntax, there are some that provide a variety of themes. As a dark theme lover, I have plenty of them installed in my editor and I shall be sharing them with you!!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#extension-i-use" class="anchor"&gt;
  &lt;/a&gt;
  Extension I use
&lt;/h2&gt;

&lt;p&gt;Just like you, I have scrolled through various articles and Instagram posts, talking about the top 20 VS Code extensions that every developer must have. Every developer ranks these extensions in the way they like. I did use them and some of them didn't suit me. And that's perfectly alright! Extensions are only a helping hand in making your lives easier. Coding the application and deploying it, is something that only a developer can do and not any extension.&lt;br&gt;
Here are the extensions that you'll find in my VS Code:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#themes-and-appearance" class="anchor"&gt;
  &lt;/a&gt;
  Themes and Appearance:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Atom One Dark Theme - Mahmoud Ali&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2Sf9ZXKo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/zpqclqfiaz1m31y7myfu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2Sf9ZXKo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/zpqclqfiaz1m31y7myfu.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ayu - teabyii&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DwiMJs8a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/985g073iueoayev34vji.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DwiMJs8a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/985g073iueoayev34vji.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Community Material Theme - Mattia Astorino&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ygjvYX6P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/zhexk5bnearh5fw02s5p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ygjvYX6P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/zhexk5bnearh5fw02s5p.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Dracula Official - Dracula Theme&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Eegr5DI8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/o7be4u0ekmnr1p7jyauq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Eegr5DI8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/o7be4u0ekmnr1p7jyauq.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Helium Icon Theme - Helgard Richard Ferreira&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sedWKBgd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/swxays19guwu7am5x11h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sedWKBgd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/swxays19guwu7am5x11h.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Material Icon Theme - Philipp Kief&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IimDXIPj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/08vzvvue5po43gdh2xbq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IimDXIPj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/08vzvvue5po43gdh2xbq.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Material Theme Icons - Mattia Astorino&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tWSikccm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/w07kb6ejvxuq4azjhor4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tWSikccm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/w07kb6ejvxuq4azjhor4.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;One Dark Pro - binaryify&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gEvPokVH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/r9rmjt1y9dz1qm839pj3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gEvPokVH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/r9rmjt1y9dz1qm839pj3.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;One Monokai Theme - Joshua Azemoh&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4rcSflSA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/mdjr1usbiqto3lqgwqrc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4rcSflSA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/mdjr1usbiqto3lqgwqrc.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Palenight Theme - Olaolu Olawuyi&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ta_Yttq_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vpgm8ggmpblivvdiz1u5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ta_Yttq_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vpgm8ggmpblivvdiz1u5.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Panda Theme - Panda Theme (one of my favourites!)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LmjgQOYv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7nveq4o8fd04e1qglavo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LmjgQOYv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7nveq4o8fd04e1qglavo.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p9RXtXuR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rkgf0dv9rgnl76li1g36.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p9RXtXuR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rkgf0dv9rgnl76li1g36.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A sneek peek in one of my projects with Panda Theme&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Synthwave'84 - Robb Owen&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Bq2F1rdt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5vb7lzbn89su3j5kn924.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bq2F1rdt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5vb7lzbn89su3j5kn924.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;vscode-icons - VSCode Icons Team&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--srsB9Tmf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/16rsok8xseo3jlf8d5yu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--srsB9Tmf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/16rsok8xseo3jlf8d5yu.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tools-and-productivity" class="anchor"&gt;
  &lt;/a&gt;
  Tools and Productivity:
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#auto-close-tag-jun-han" class="anchor"&gt;
  &lt;/a&gt;
  Auto Close Tag - Jun Han
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;This extension automatically adds the closing tag while writing HTML or XML syntax&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XiRP5S6r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/x79gmxh7p4e6vneum6da.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XiRP5S6r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/x79gmxh7p4e6vneum6da.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#auto-import-steoates" class="anchor"&gt;
  &lt;/a&gt;
  Auto Import - steoates
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Probably the most helpful one, this extension automatically generates the &lt;code&gt;import&lt;/code&gt; statement, in case you forget to import a snippet and have called it in your code&lt;/li&gt;
&lt;li&gt;Comes in handy while making TypeScript or React Applications&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sWAI0lJt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jed8ejul3w8rbig9880r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sWAI0lJt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jed8ejul3w8rbig9880r.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#auto-rename-tag-jun-han" class="anchor"&gt;
  &lt;/a&gt;
  Auto Rename Tag - Jun Han
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;This extension automatically renames the closing tag when you rename the opening tag.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1KLLqmxE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3o5ur78qnkx1ia8qhtph.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1KLLqmxE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3o5ur78qnkx1ia8qhtph.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#auto-open-markdown-preview-hnw" class="anchor"&gt;
  &lt;/a&gt;
  Auto Open Markdown Preview - hnw
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;While editing README files in your editor, this extension allows you to look at your changes directly in your editor. You can also open the preview in another pane and the changes you make are automatically reflected.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MUbYkwv1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3zh3zuj45vc0qwl28uen.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MUbYkwv1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3zh3zuj45vc0qwl28uen.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#better-align-wwm" class="anchor"&gt;
  &lt;/a&gt;
  Better Align - wwm
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;This extension allows you to perfectly indent your code without any hassle&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bQtCdwrk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6xyuowcx76hxlcu5r176.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bQtCdwrk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6xyuowcx76hxlcu5r176.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#better-comments-aaron-bond" class="anchor"&gt;
  &lt;/a&gt;
  Better Comments - Aaron Bond
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;This extension allows you to have beautiful comments in your code. It allows you to add highlights, notes, alerts and much more&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lmkXzCY0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6y8ffj8dzgpp21oduyez.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lmkXzCY0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6y8ffj8dzgpp21oduyez.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bracket-pair-colorizer-coenraads" class="anchor"&gt;
  &lt;/a&gt;
  Bracket Pair Colorizer - CoenraadS
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;One of the best in the market, this extension highlights matching brackets so that as a developer, you are not confused while closing the wrong type of bracket&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EaKkAJhm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/dfcrdsd8xb6v10rbl4os.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EaKkAJhm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/dfcrdsd8xb6v10rbl4os.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code-time-software" class="anchor"&gt;
  &lt;/a&gt;
  Code Time - Software
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;I tend to keep a record of the time I have coded on a particular day and this extension helps me with it. Not only that, but it also provides a detailed analytics of the time spent on a particular file, the total no. of lines coded etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NerPwiP_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/t0zjioudbagp7z0i044p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NerPwiP_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/t0zjioudbagp7z0i044p.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#es7-reactreduxgraphqlreactnative-snippets-dsznajder" class="anchor"&gt;
  &lt;/a&gt;
  ES7 React/Redux/GraphQL/React-Native snippets - dsznajder
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Being a React developer, this extension helps me whenever I need to write a React Syntax in a file. It automatically generates the &lt;code&gt;function&lt;/code&gt; and the &lt;code&gt;import&lt;/code&gt; statements, and does much more than that.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ODzLGoeb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vh8u32718hcbyp00b5j7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ODzLGoeb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vh8u32718hcbyp00b5j7.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#live-server-ritwick-dey" class="anchor"&gt;
  &lt;/a&gt;
  Live Server - Ritwick Dey
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Probably the most talked about, this is a must-have extension since it automatically creates a server for you to view your files. Any changes in your files are automatically reflected in the server. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IDQmNLTB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/se3c0d7bwypi83huf8p8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IDQmNLTB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/se3c0d7bwypi83huf8p8.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#path-intellisense-christian-kohler" class="anchor"&gt;
  &lt;/a&gt;
  Path Intellisense - Christian Kohler
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;This extension automatically completes the filenames as you import/export a file.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NFNwexhv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/aotw2df80gkz9vzycvzl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NFNwexhv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/aotw2df80gkz9vzycvzl.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prettier-code-formatter-prettier" class="anchor"&gt;
  &lt;/a&gt;
  Prettier - Code Formatter  -  Prettier
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Neatly formats your code. It includes support for JavaScript, JSX, Vue, Angular, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xbt23yC8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8b8clk5qppq3tweg9bnv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xbt23yC8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8b8clk5qppq3tweg9bnv.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#react-proptypes-intellisense-of-human-bondage" class="anchor"&gt;
  &lt;/a&gt;
  React PropTypes Intellisense - Of Human Bondage
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Finds the type of &lt;code&gt;props&lt;/code&gt; in React and automatically generates a snippet to be added in the React Component&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KVq9190v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/masktqrh10ox8eomngla.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KVq9190v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/masktqrh10ox8eomngla.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Those are all the VS Code extensions that I use. Hope you enjoy my article and have a great time using these helpful extensions :)&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>vscode</category>
      <category>webdev</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Debugging CSS: Some Tips and Tricks</title>
      <author>Sheelah Brennan</author>
      <pubDate>Thu, 24 Dec 2020 04:27:37 +0000</pubDate>
      <link>https://dev.to/sheelah_b/debugging-css-some-tips-and-tricks-bek</link>
      <guid>https://dev.to/sheelah_b/debugging-css-some-tips-and-tricks-bek</guid>
      <description>&lt;p&gt;We've all been there. You're working on a new piece of functionality and have the markup done. Now it's time to work on the styles. No problem, right? You add the base styles and when the page reloads with the changes applied, suddenly the layout is broken. You sigh, knowing that it might be a long day as you're up against a tight deadline.&lt;/p&gt;

&lt;p&gt;CSS can be tricky at times. In this article I'll provide some strategies I've used for troubleshooting CSS when things are not working as expected. Hopefully one of these can help get you out of frustration mode and back into "getting things done" mode 🙂.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#generic-layout-issues" class="anchor"&gt;
  &lt;/a&gt;
  Generic Layout Issues
&lt;/h2&gt;

&lt;p&gt;One of my most commonly used strategies when facing any kind of layout issue is to add an outline around a parent element's children. This lets me see whether the children are where I thought they would be and whether they have the expected dimensions. You can use a rule like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.element&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;outline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If the layout issue is more complex and you need to debug the layout of the entire page, you can add outlines for every element on the page using different colors. This is a lot of lines to look at, but it can be helpful. In your browser developer tools, open your console tab and type this JavaScript snippet:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;;[].&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;outline&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1px solid #&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;~~&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;))).&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;An alternative strategy for debugging the layout of the entire page is to place a background color on all elements:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nd"&gt;:nth-child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;n&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#css-grid-or-flexbox-issues" class="anchor"&gt;
  &lt;/a&gt;
  CSS Grid or Flexbox Issues
&lt;/h2&gt;

&lt;p&gt;In addition to using the generic layout issue strategies above, I like to take advantage of Firefox or Chrome's developer tools to help with these issues. For example, in Firefox's developer tools, you can use the layout tab to inspect a grid or flex parent. If you inspect a grid parent, you'll then see lines added, allowing you to visualize the grid. Doing this can help you also discover any bugs caused by adding an extra wrapper div or element between your parent and child elements which can break your grid or flex layout.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fd3L_iXQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sheelahb.com/static/b1bc4de423403728186cc6e3959c0c5d/9fc2b/css-grid-inspection.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fd3L_iXQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sheelahb.com/static/b1bc4de423403728186cc6e3959c0c5d/9fc2b/css-grid-inspection.jpg" alt="CSS grid inspection"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Clicking on the &lt;code&gt;grid&lt;/code&gt; waffle icon on the left automatically selects it on the right.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yIMlDtO9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sheelahb.com/static/fd66a03d26d9224879681bdb8a889f4a/7ab6d/css-grid-lines.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yIMlDtO9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sheelahb.com/static/fd66a03d26d9224879681bdb8a889f4a/7ab6d/css-grid-lines.jpg" alt="CSS grid lines"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#page-overflow-issues" class="anchor"&gt;
  &lt;/a&gt;
  Page Overflow Issues
&lt;/h2&gt;

&lt;p&gt;For debugging an unexpected horizontal scrollbar, my favorite strategy is outlined in this &lt;a href="https://css-tricks.com/findingfixing-unintended-body-overflow/"&gt;CSS Tricks article&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#browser-or-mobileonly-bugs" class="anchor"&gt;
  &lt;/a&gt;
  Browser or Mobile-Only Bugs
&lt;/h2&gt;

&lt;p&gt;Could what you're seeing be a browser-specific bug? It's worth testing the page out on other browsers and on a mobile device (especially on Safari mobile!) if you can. If you're only seeing the issue on one browser, then you can narrow down the source of the bug.&lt;/p&gt;

&lt;p&gt;For example, I've regularly ran into flexbox issues that are Safari-specific. I've discovered these by testing in other browsers and confirming that the issue only shows up in Safari. A good reference of Flexbox browser-specific bugs is &lt;a href="https://github.com/philipwalton/flexbugs"&gt;Philip Walton's flexbugs repo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I've also ran into issues in the past with how &lt;a href="https://medium.com/@susiekim9/how-to-compensate-for-the-ios-viewport-unit-bug-46e78d54af0d"&gt;mobile Safari handles &lt;code&gt;vh&lt;/code&gt; units&lt;/a&gt;, confirmed by testing on Android and seeing that the issue wasn't appearing there.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#typos" class="anchor"&gt;
  &lt;/a&gt;
  Typos
&lt;/h2&gt;

&lt;p&gt;Could it just be a CSS typo? It happens to the best of us. Even the smallest typo can cause your CSS rule not to get applied. A useful strategy here is to use your browser developer tools to inspect the element of the page where you're seeing the bug. See what CSS is getting applied. If you see your rule there and it's crossed out, it's not getting applied.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zOb6hfKg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sheelahb.com/static/695e05d329f0906bdbbb4cf19c2b3f70/f58be/css-typo.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zOb6hfKg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sheelahb.com/static/695e05d329f0906bdbbb4cf19c2b3f70/f58be/css-typo.jpg" alt="In Firefox Developer Tools, a caution symbol and crossed out text indicating that the color rule wasn't applied. This looks very similar in Chrome."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A preventative strategy here is to use a code editor that includes syntax highlighting for CSS, like VS Code. This won't catch every single possible typo, but it will call out things like invalid property names and it will make invalid property values easier to catch.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n07nidMw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sheelahb.com/static/a5b8b0620366710862fb92d7cb2837e4/ee53f/css-rule-typo.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n07nidMw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sheelahb.com/static/a5b8b0620366710862fb92d7cb2837e4/ee53f/css-rule-typo.jpg" alt="VS Code with an invalid property and invalid color value"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#markup-issues" class="anchor"&gt;
  &lt;/a&gt;
  Markup Issues
&lt;/h2&gt;

&lt;p&gt;Another source of bugs is typos in HTML markup. For example, you might have forgotten to apply your CSS class to the desired element. Therefore the CSS rules for that class are not going to get applied. As discussed above, you can use your browser developer tools to inspect the element's markup and then verify that the expected class is applied to the element.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#animation-and-transition-issues" class="anchor"&gt;
  &lt;/a&gt;
  Animation and Transition Issues
&lt;/h2&gt;

&lt;p&gt;For issues with animations and transitions, my first strategy is always to greatly slow down the timing of the animation or transition. That way I can watch as it runs, and it makes it easier to see both the start, end, and intermediate states.&lt;/p&gt;

&lt;p&gt;For animations, I also like to verify that I've specified the animation shorthand properties for time values in the right order (the first one found is set to the animation duration and the second one found is set to the animation delay).&lt;/p&gt;

&lt;p&gt;If the animation rule is crossed out, you'll know that there's likely a typo:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VgspoWr9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sheelahb.com/static/ced926a247ab95e3a81589cffe9d4cb4/93985/invalid-animation.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VgspoWr9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sheelahb.com/static/ced926a247ab95e3a81589cffe9d4cb4/93985/invalid-animation.jpg" alt='An invalid animation fill mode value (forward instead of "forwards") causes the animation not to get applied'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another issue I've hit in the past is typos in animation keyframes which then cause the animation not to get applied. To verify the keyframes are set as expected, you can use your browser's developer tools. If you don't see the keyframes showing when inspecting the styles of the animated element like shown below, that's probably your issue:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k7GDThR8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sheelahb.com/static/9c3e90a1b1068db6f274fe9ef61c7adb/d5d13/keyframes.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k7GDThR8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sheelahb.com/static/9c3e90a1b1068db6f274fe9ef61c7adb/d5d13/keyframes.jpg" alt="Animation keyframes"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For animation debugging, I also like &lt;a href="https://css-tricks.com/debugging-css-keyframe-animations/"&gt;this CSS Tricks article by Sarah Drasner&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Hope this helps someone stuck in that "oh no, what's wrong with my CSS??!" moment.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Featured image by &lt;a href="https://unsplash.com/@markuswinkler"&gt;Markus Winkler&lt;/a&gt; via Unsplash&lt;/em&gt;.&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
    </item>
    <item>
      <title>5 Traits of Good Developers</title>
      <author>Shaundai Person</author>
      <pubDate>Thu, 24 Dec 2020 02:47:38 +0000</pubDate>
      <link>https://dev.to/shaundai/5-traits-of-good-developers-e00</link>
      <guid>https://dev.to/shaundai/5-traits-of-good-developers-e00</guid>
      <description>&lt;p&gt;I hate to admit it but certain stereotypes about developers kept me from even considering a career in programming for decades.  I thought the same way that many people outside of tech still think - &lt;b&gt;software engineering isn’t a field I’d ever be able to get into because developers must [insert stereotype of choice: have CS degrees from top universities, be terrible in social situations, know how to program FPGA chips at birth, etc].&lt;/b&gt;  &lt;/p&gt;

&lt;p&gt;I’m here to tell you that many of those entry-blocking stereotypes are invalid.  In fact, common traits of the best developers are traits that you likely already have!  Put plainly, you &lt;del&gt;can&lt;/del&gt; will be an amazing developer, even without that advanced degree in trigonometry.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#1-you-love-to-learn" class="anchor"&gt;
  &lt;/a&gt;
  &lt;b&gt;(1) You Love to Learn&lt;/b&gt;
&lt;/h4&gt;

&lt;p&gt;Even at the most senior levels of engineering, you’ll never be expected to know everything.  With so much information out there and with technologies changing and evolving every day, it’s impossible to know it all.  No matter how long you’ve been in the software game there will always be more to learn: more programming languages to master, newer techniques to try, better ways to collaborate with others.&lt;/p&gt;

&lt;p&gt;The best developers are the ones who embrace the change and who continually seek new opportunities to learn.  These individuals adapt more quickly, develop and hone a broader range of skills, and are able to think more creatively.  For these reasons, developers who love to learn also tend to enjoy their work more.  And who doesn’t want to be happier at work?&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#2-you-like-puzzles" class="anchor"&gt;
  &lt;/a&gt;
  &lt;b&gt;(2) You Like Puzzles&lt;/b&gt;
&lt;/h4&gt;

&lt;p&gt;A common misconception is that all software engineers are good at math.  The truth is that most areas of software engineering don’t require math skills at all.  What they &lt;em&gt;do&lt;/em&gt; require is the ability to solve puzzles.&lt;/p&gt;

&lt;p&gt;If you consider yourself the type of person who likes puzzles - whether you prefer jigsaw puzzles, logic problems, or you’re great at figuring out the ending of mystery movies midway through the film - you have a key trait common with the best developers.  Coding - like puzzles - requires use of both sides of your brain (the left side for analytic thinking and the right for creativity) to answer questions like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Why did this break?&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;How can I get this to work?&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;How can I make this happen using the skills/tools available to me now?&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Why did this break?&lt;/em&gt; (yeah, I know this is on here twice but it happens a &lt;em&gt;lot&lt;/em&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Writing code &lt;em&gt;is&lt;/em&gt; a puzzle with so many unique correct (and also incorrect) solutions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--INvlwjT5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/j2rkpdsylykpb54gtcdg.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--INvlwjT5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/j2rkpdsylykpb54gtcdg.jpg" alt="Rubiks Cube"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#3-youre-good-at-recognizing-patterns" class="anchor"&gt;
  &lt;/a&gt;
  &lt;b&gt;(3) You’re Good at Recognizing Patterns&lt;/b&gt;
&lt;/h4&gt;

&lt;p&gt;If you like to solve puzzles, chances are that you’re also good at recognizing patterns.    Our human brains solve puzzles by looking for patterns among the information available to us.&lt;/p&gt;

&lt;p&gt;From the day you start learning to code, you’ll similarly use patterns to solve problems.  As you become more skilled, you’ll be able to quickly recognize problems similar to those you’ve encountered before and reuse code or similar solutions (aka software patterns) that work.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#4-youre-a-problem-solver" class="anchor"&gt;
  &lt;/a&gt;
  &lt;b&gt;(4) You’re A Problem Solver&lt;/b&gt;
&lt;/h4&gt;

&lt;p&gt;Any developer will tell you that a great deal of time at work will be spent troubleshooting and debugging your code.  If you’re working with others, you’ll also need to fix errors in code you might only be seeing for the first time.  Your success depends on your resilience as well as your ability to break up big problems into smaller parts in order to find a solution.&lt;/p&gt;

&lt;p&gt;Debugging can be really frustrating - especially when you’re new.  Invest time in learning to use the developer console and debugging methods in the language(s) you are programming in.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#5-youre-good-at-google" class="anchor"&gt;
  &lt;/a&gt;
  &lt;b&gt;(5) You're Good at Google&lt;/b&gt;
&lt;/h4&gt;

&lt;p&gt;I mentioned this before but as a developer, you’ll never know everything.  I’ll add that it’s impossible to retain all of that great knowledge you’ll be building at work.  Chances are, you’ll find yourself Googling things like &lt;em&gt;“what does git pull origin master mean”&lt;/em&gt; day after day.&lt;/p&gt;

&lt;p&gt;Believe it or not, efficient Googling is an important skill for developers.  No matter which programming language you use, Google (or whichever search engine you prefer) is going to be one of the most used tools in your tech stack throughout your entire career.  Knowing what to put in the search will save you LOTS of time that would otherwise be spent reading through pages and pages of Stack Overflow questions to find the answer you're &lt;em&gt;really&lt;/em&gt; looking for.&lt;/p&gt;

&lt;p&gt;Connect with me on &lt;a href="https://www.twitter.com/shaundai"&gt;Twitter&lt;/a&gt; and on &lt;a href="https://www.linkedin.com/in/shaundai"&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>career</category>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Micro-FEs Simplified</title>
      <author>Jack Herrington</author>
      <pubDate>Thu, 24 Dec 2020 01:42:19 +0000</pubDate>
      <link>https://dev.to/jherr/micro-fes-simplified-5ac6</link>
      <guid>https://dev.to/jherr/micro-fes-simplified-5ac6</guid>
      <description>&lt;p&gt;Micro-Frontends, where you take large UI components and live share them between applications, have huge potential, but the mechanics of implementing them can get in the way of realizing that value. In this article, and in its accompanying video, I look at how to use Webpack 5’s built in Module Federation feature to make sharing Micro-Frontend code easy.&lt;/p&gt;

&lt;p&gt;In fact, Module Federation makes sharing components so easy that we get to think about two follow-on issues that come with Micro-FEs:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;How to have multiple Micro-FEs from the same source share state without having the page they are hosted on implement that state sharing.&lt;/li&gt;
&lt;li&gt;How to all the host page subscribe or mutate the data store backing the Micro-FEs instantiated on the page.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you want a complete walkthrough of an example three application Micro-FE demo setup where React components are shared with another React app and also a vanilla JS application check out the associated video.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/tFDvEITdJZ8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;This post is going to concentrate on explaining the three core concepts presented in the video in more detail.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#a-little-setup" class="anchor"&gt;
  &lt;/a&gt;
  A Little Setup
&lt;/h1&gt;

&lt;p&gt;The completed Micro-FEs Simplified project contains three distinct applications relating to selling growlers.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Growlers are a PNW tradition. They are large refillable bottles we fill with beer, soda, coffee, kombucha, etc.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There is the &lt;code&gt;growlers&lt;/code&gt; application that has the three shared Micro-FE components. There is a &lt;code&gt;Taps&lt;/code&gt; component that shows all of the different beverages available for pouring into a growler. There is a &lt;code&gt;Search&lt;/code&gt; component that allows you to run a search on the available beverages and the results are immediately shown in the &lt;code&gt;Taps&lt;/code&gt; component. And then there is a &lt;code&gt;Cart&lt;/code&gt; component that shows this list of beverages selected as the user presses the &lt;code&gt;Add to Cart&lt;/code&gt; button. Shown below is the &lt;code&gt;growlers&lt;/code&gt; application:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wk9MkzWZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/mwzgvw66eoio3hmt9nua.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wk9MkzWZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/mwzgvw66eoio3hmt9nua.png" alt="Growlers application with three Micro-FEs"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On the left is the &lt;code&gt;Search&lt;/code&gt; component, in the middle the &lt;code&gt;Taps&lt;/code&gt; component, and on the right the &lt;code&gt;Cart&lt;/code&gt; component.&lt;/p&gt;

&lt;p&gt;These components are then consumed in two different applications; &lt;code&gt;host-react&lt;/code&gt; which uses React, and &lt;code&gt;host-vanilla&lt;/code&gt; which uses just Vanilla JS on the page. Shown below is the &lt;code&gt;host-react&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BTrZ4x85--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/f3swpmh4lwti02o3x66c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BTrZ4x85--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/f3swpmh4lwti02o3x66c.png" alt="Micro-FEs in use in the host-react application"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;host-react&lt;/code&gt; application shows the three Micro-FEs in a different layout and using a different &lt;a href="https://chakra-ui.com/"&gt;Chakra-UI&lt;/a&gt; dark theme. In addition there is extra UI on the left hand side that is written in the &lt;code&gt;host-react&lt;/code&gt; that connects to the Micro-FE store and shows a more compact representation of the beverages that match the current search parameters. This deeper integration between the host page and the Micro-FEs is made possible by Module Federation.&lt;/p&gt;

&lt;p&gt;Now that we have a better understanding of the demo application, let’s dive into the mechanics.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#using-module-federation-for-microfes" class="anchor"&gt;
  &lt;/a&gt;
  Using Module Federation for Micro-FEs
&lt;/h1&gt;

&lt;p&gt;In Module Federation terms the growlers application is exposing modules. And you can find the &lt;a href="https://github.com/jherr/micro-fes-simplified-done/blob/master/growlers/webpack.config.js#L50-L75"&gt;mechanism for that in the &lt;code&gt;webpack.config.js&lt;/code&gt; file in the project&lt;/a&gt;. With Webpack 5 it’s as simple as importing the ModuleFederationPlugin and configuring it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ModuleFederationPlugin&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;growlers&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;remoteEntry.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;remotes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
  &lt;span class="na"&gt;exposes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./DataComponent&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./src/components/DataComponent&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Cart&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./src/components/Cart&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Search&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./src/components/Search&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Taps&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./src/components/Taps&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./store&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./src/store&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./VanillaCart&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./src/vanilla/VanillaCart&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./VanillaSearch&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./src/vanilla/VanillaSearch&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./VanillaTaps&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./src/vanilla/VanillaTaps&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The most important fields here are the name of the federated modules container, which we specify as &lt;code&gt;growlers&lt;/code&gt; . Followed by the list of exposed modules. At the start we just expose the &lt;code&gt;Cart&lt;/code&gt;, &lt;code&gt;Search&lt;/code&gt; and &lt;code&gt;Taps&lt;/code&gt; components, as well as the store which we use to specify which client data we wish to show.&lt;/p&gt;

&lt;p&gt;The demo app then goes on to expose a &lt;code&gt;DataComponent&lt;/code&gt; which React based hosts can use to show the current state of the store. As well as vanilla versions of the Micro-FE components that manage mounting each component on a specified selector (which makes it easy for vanilla JS applications to consume React components that look just like a function.&lt;/p&gt;

&lt;p&gt;In a host application we then consume the growlers remote by using the ModuleFederationPlugin once again:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ModuleFederationPlugin&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hostreact&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;remoteEntry.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;remotes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;growlers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;growlers@http://localhost:8080/remoteEntry.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;exposes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In this case the &lt;code&gt;host-react&lt;/code&gt; application is specifying that there is a remote out there, at the specified URL called &lt;code&gt;growlers&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;From there, consuming and using the components is as simple as using imports:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Search&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;growlers/Search&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Cart&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;growlers/Cart&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Taps&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;growlers/Taps&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;DataComponent&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;growlers/DataComponent&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;load&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;growlers/store&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hv-taplist&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In this code inside &lt;code&gt;host-react&lt;/code&gt; we are importing the React Micro-FE components, just as we would any other React component. As well as initializing the store with our customer ID so that the Micro-FEs know what beverages data to work with.&lt;/p&gt;

&lt;p&gt;All of this works because Module Federation is giving you the real Javascript React code to run. It’s not wrapped in a Micro-FE container. Module Federation works with any type of code that can be wepbacked; React, Vue, Angular, vanilla JS, JSON, transpiled Typescript, etc. Whatever you want.&lt;/p&gt;

&lt;p&gt;The three key differentiators here are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Your Micro-FE code doesn’t need to be extracted and deployed separately from the application hosting it.&lt;/li&gt;
&lt;li&gt;Your Micro-FE code doesn’t need to be wrapped or bundled in any way.&lt;/li&gt;
&lt;li&gt;You can expose any type of code you want, not just visual components.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All of this comes with one big caveat though; Module Federation does not provide a view platform agnostic compatibility layer. It won’t help you embed a React component in a Vue application or vice versa. If you are looking for that you will want to look at something like &lt;a href="https://single-spa.js.org/"&gt;SingleSPA&lt;/a&gt; (which also &lt;a href="https://single-spa.js.org/docs/recommended-setup/#module-federation"&gt;recommends using Module Federation&lt;/a&gt; as a code transport layer.) But if all your applications are React, or you are ok with something like the thin vanilla JS shims as shown in this example, then you are good to go.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#sharing-state-between-microfes" class="anchor"&gt;
  &lt;/a&gt;
  Sharing State Between Micro-FEs
&lt;/h1&gt;

&lt;p&gt;Since sharing code between applications is trivially easy using Module Federation the next thing our example setup looks at is how to share state between the different Micro-FEs even as they are located on different parts of the host page.&lt;/p&gt;

&lt;p&gt;To make it even more interesting I’ll insist on the constraint that the host page should not have to implement any type of global state provider to make this work. A host application should be able to import the component and drop it on the page as-is and it should work (once the client store is specified).&lt;br&gt;
To make this happen I’ll use a revolutionary new micro state manager named &lt;a href="https://github.com/pmndrs/valtio"&gt;Valtio&lt;/a&gt; for two reasons. First, it’s incredibly easy to use. And second, because it doesn’t require a provider.&lt;/p&gt;

&lt;p&gt;To set up the store in the &lt;code&gt;growlers&lt;/code&gt; application we &lt;a href="https://github.com/jherr/micro-fes-simplified-done/blob/master/growlers/src/store.ts#L1-L18"&gt;simply import &lt;code&gt;proxy&lt;/code&gt; from Valtio and then create a store with the initial state&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;proxy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;valtio&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Beverage&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./types&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;TapStore&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;taps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Beverage&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="nl"&gt;searchText&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;alcoholLimit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;filteredTaps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Beverage&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="nl"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Beverage&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;proxy&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;TapStore&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;taps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
  &lt;span class="na"&gt;searchText&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;alcoholLimit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;filteredTaps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
  &lt;span class="na"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The state contains the an array of all the available beverages, the search parameters, the beverages (or taps) that match those filters, as well as the cart.&lt;/p&gt;

&lt;p&gt;To consume the store &lt;a href="https://github.com/jherr/micro-fes-simplified-done/blob/master/growlers/src/components/Cart.tsx"&gt;we use the &lt;code&gt;useProxy&lt;/code&gt; hook in any component&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useProxy&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;valtio&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../store&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Cart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;snapshot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useProxy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Box&lt;/span&gt; &lt;span class="na"&gt;border&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;MFE_BORDER&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;snapshot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;beverage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;
      &lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      ...
   &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Box&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Cart&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You don’t need to specify any kind of provider at the top of the view hierachy. You simply create a &lt;code&gt;proxy&lt;/code&gt; in a shared file, and then consume it using &lt;code&gt;useProxy&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Setting values is just as easy, we can go back to the store and &lt;a href="https://github.com/jherr/micro-fes-simplified-done/blob/master/growlers/src/store.ts#L39-L42"&gt;look at the implementation of &lt;code&gt;setSearchText&lt;/code&gt;&lt;/a&gt; which is simply:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;setSearchText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;searchText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filteredTaps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;To set a value on a store you simply, set it. It doesn’t get a whole lot cleaner than that.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#connecting-the-host-page-with-the-microfes-state" class="anchor"&gt;
  &lt;/a&gt;
  Connecting the Host Page with the Micro-FEs State
&lt;/h1&gt;

&lt;p&gt;Because Valtio is so easy so use we can do even cooler things that push the boundaries of the Micro-FEs and their connection to the host page. For example we can &lt;a href="https://github.com/jherr/micro-fes-simplified-done/blob/master/growlers/src/components/DataComponent.tsx"&gt;create a novel &lt;code&gt;DataProvider&lt;/code&gt; component&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ReactElement&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useProxy&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;valtio&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;TapStore&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../store&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;DataComponent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FC&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;TapStore&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;ReactElement&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;any&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useProxy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;DataComponent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Where a host page that uses React can provide a child function that renders the store state any way the host page wants. For example, the demo &lt;code&gt;host-react&lt;/code&gt; uses it to show much smaller beverage cards:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;DataComponent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;filteredTaps&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;filteredTaps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;beverage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;SimpleGrid&lt;/span&gt; &lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
         ...
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;SimpleGrid&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;DataComponent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;From a Micro-FE customer perspective this is great. Not only do I have ready to use Micro-FE components that I can put anywhere on the page without using a provider. And, if I don’t like the UI provided by one or more of the Micro-FEs, I have all the extension points I need to create my own components that work with the same store that’s used by the Micro-FEs.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#providing-vanilla-js-compatibility" class="anchor"&gt;
  &lt;/a&gt;
  Providing Vanilla JS Compatibility
&lt;/h1&gt;

&lt;p&gt;Another issue we tackled in the video is the ability to show these components on a VanillaJS page, which is as simple as &lt;a href="https://github.com/jherr/micro-fes-simplified-done/blob/master/growlers/src/vanilla/VanillaCart.tsx"&gt;providing function wrappers around React-DOM&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ChakraProvider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@chakra-ui/react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Cart&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../components/Cart&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ChakraProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Cart&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;ChakraProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;,&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Don’t be fooled by the &lt;code&gt;ChakraProvider&lt;/code&gt; it’s just there to provide the CSS for the components.&lt;/p&gt;

&lt;p&gt;Then on the VanillaJS side we can simply import those functions and then invoke them on a selector:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./index.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;createTaps&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;growlers/VanillaTaps&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;createCart&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;growlers/VanillaCart&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;createSearch&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;growlers/VanillaSearch&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;load&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;subscribe&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;growlers/store&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// load("growlers-tap-station");&lt;/span&gt;
&lt;span class="nx"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hv-taplist&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="nx"&gt;createTaps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.taps&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;createCart&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.cart&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;createSearch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.search&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;How are these Micro-FEs implemented? Whose to say? From the Vanilla JS applications perspective these are functions they invoke and UI appears on those selectors.&lt;/p&gt;

&lt;p&gt;In this case Module Federation is not only handling getting the Micro-FE code to the page, but also &lt;code&gt;react&lt;/code&gt; and &lt;code&gt;react-dom&lt;/code&gt; so that the code can run. Even better, if you are lazy loading your Micro-FEs that will work just fine as well. Module Federation will bring the &lt;code&gt;remoteEntry.js&lt;/code&gt; file on to the page, but that file is only references to the chunks required if and when you decide to import and invoke them. So the system is inherently lazy-loadable.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#where-to-go-from-here" class="anchor"&gt;
  &lt;/a&gt;
  Where To Go From Here
&lt;/h1&gt;

&lt;p&gt;There is so much more to this example than I covered here, and to Module Federation more broadly. You can check out &lt;a href="https://www.youtube.com/playlist?list=PLNqp92_EXZBLr7p7hn6IYa1YPNs4yJ1t1"&gt;my playlist on Module Federation&lt;/a&gt; on &lt;a href="https://www.youtube.com/user/jherr2006"&gt;my YouTube channel&lt;/a&gt;. Or you can check out &lt;a href="https://module-federation.myshopify.com/products/practical-module-federation"&gt;Practical Module Federation&lt;/a&gt;, it’s a book that Zack Jackson and I wrote that covers the both the practical use, and the internal mechanics, of this fascinating new technology for sharing code.&lt;/p&gt;

</description>
      <category>microfrontends</category>
      <category>modulefederation</category>
      <category>react</category>
      <category>vanillajs</category>
    </item>
    <item>
      <title>Making concurrent API calls in Node</title>
      <author>Yue Su</author>
      <pubDate>Thu, 24 Dec 2020 01:30:01 +0000</pubDate>
      <link>https://dev.to/yuesu/making-concurrent-api-calls-in-node-3deg</link>
      <guid>https://dev.to/yuesu/making-concurrent-api-calls-in-node-3deg</guid>
      <description>&lt;h2&gt;
  &lt;a href="#the-problem" class="anchor"&gt;
  &lt;/a&gt;
  The problem
&lt;/h2&gt;

&lt;p&gt;When building up a backend API, it is common that we need to fetch data from a third-party API, clean, format and merge them, and then forward it to the front-end. &lt;/p&gt;

&lt;p&gt;For instance, NASA's public could be used to fetch&lt;br&gt;
&lt;a href="https://api.nasa.gov/planetary/apod?api_key=DEMO_KEY"&gt;APOD&lt;/a&gt; (Astronomy Photo of the Day) with any given date. However, it doesn't support fetching multiple photos with a range of dates. Now suppose we were asked to build a backend API that can return a list of APOD with a given number of days, what should we do?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6_-jwyy6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.dropbox.com/s/q3wujx9y3zx6xlj/concurrent-call.png%3Fraw%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6_-jwyy6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.dropbox.com/s/q3wujx9y3zx6xlj/concurrent-call.png%3Fraw%3D1" alt="API map"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first thought I came up with is to generate an array that contains a range of dates. Then I can do a forEach method or a for loop to iterate through the array and make API calls one by one, get the data, push it into a result array, and finally return the result to the front-end. However, even this would work, it doesn't align with the goal, which requires to do the calls concurrently. Using forEach or a for loop still would do the job in order, not simultaneously. It's slow and not efficient. &lt;/p&gt;

&lt;p&gt;After a little bit of research, I came across a library called &lt;a href="https://caolan.github.io/async/v3/"&gt;async&lt;/a&gt; that perfectly fulfills the requirement of the task. The async library provides various types of functions for working with asynchronous JavaScript. &lt;/p&gt;

&lt;p&gt;In this example, the method will be using is &lt;a href="https://caolan.github.io/async/v3/docs.html#parallel"&gt;parallel&lt;/a&gt;, and it's mainly for flow control:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;parallel(tasks, callback)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;It allows us to run a number of tasks in parallel, without waiting until the previous function has completed.&lt;/strong&gt; The results are passed to the callback as an array. &lt;/p&gt;

&lt;p&gt;Let's get started.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-solution" class="anchor"&gt;
  &lt;/a&gt;
  The solution
&lt;/h2&gt;

&lt;p&gt;First, we need to make a helper function, it takes the number of days as a parameter, and returns an array of dates. NASA's API can only take the date format as YYYY-MM-DD, so for example, if today's date is 2020-12-23, and the number of days is equal to 6, the returned array will be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[
  '2020-12-18',
  '2020-12-19',
  '2020-12-20',
  '2020-12-21',
  '2020-12-22',
  '2020-12-23'
]
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here is  what the function looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function generatedates(numberOfDays) {
  const result = []
  const today = new Date()

  for (let i = 0; i &amp;lt; numberOfDays; i++) {
    let date = new Date(today)
    date.setDate(today.getDate() - i)
    let dd = date.getDate()
    let mm = date.getMonth() + 1
    let yyyy = date.getFullYear()

    if (dd &amp;lt; 10) {
      dd = "0" + dd
    }
    if (mm &amp;lt; 10) {
      mm = "0" + mm
    }
    date = yyyy + "-" + mm + "-" + dd
    result.unshift(date)
  }

  return result
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then we need to add an endpoint to the node server.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/api/photos
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The parallel function takes an array of function as the first argument, so we could use the map method to iterate through the dates array and returns the function array. Each function in the array fires an Axios call to the NASA API and get the picture of that date.&lt;/p&gt;

&lt;p&gt;The second argument of the parallel function is a callback function. In this case, since the API calls return promises, the callback function will return two items. The first one is the possible error, and the second one is the array of the result. &lt;/p&gt;

&lt;p&gt;If we don't need to further process the data, we can simply pass them to the front-end. We can also use the forEach method to clean the data and only extract the information we need.&lt;/p&gt;

&lt;p&gt;Here is the logic of the endpoint:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const URL = "https://api.nasa.gov/planetary/apod"

server.get("/api/photos", (req, res) =&amp;gt; {
  const days = req.query.days
  const dates = generateDates(days)

  const functionArray = dates.map((date) =&amp;gt; {
    return async function () {
      const data = await axios.get(`${URL}?api_key=${api_key}&amp;amp;date=${date}`)
      return data.data
    }
  })

  async.parallel(functionArray, (err, result) =&amp;gt; {
    res.status(200).json({ items: result.length, photos: result })
  })
})
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now the user can make an API request to fetch any number of photos, such as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//fetch photos of the past week
api/photos?days=7

//fetch photos of the past month
api/photos?days=30
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And the result will be shown as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "items": 6,
    "photos": [...]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#code" class="anchor"&gt;
  &lt;/a&gt;
  Code
&lt;/h2&gt;

&lt;p&gt;Check the GitHub repo for this example&lt;br&gt;
&lt;a href="https://github.com/yue-su/get-nasa-photo"&gt;Repo&lt;/a&gt;&lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Creating a Simple Todo App with Lucia</title>
      <author>Aiden Bai</author>
      <pubDate>Wed, 23 Dec 2020 23:55:12 +0000</pubDate>
      <link>https://dev.to/aidenybai/creating-a-simple-todo-app-with-lucia-3p1a</link>
      <guid>https://dev.to/aidenybai/creating-a-simple-todo-app-with-lucia-3p1a</guid>
      <description>&lt;p&gt;Hey there! I'm a &lt;a class="comment-mentioned-user" href="https://dev.to/aidenybai"&gt;@aidenybai&lt;/a&gt;
, co-maintainer of &lt;a href="https://lucia.js.org"&gt;Lucia&lt;/a&gt;, a tiny &lt;code&gt;3kb&lt;/code&gt; JavaScript library for prototyping web applications. This article will detail how to create a barebones Lucia todo application.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you've ever used &lt;a href="https://vuejs.org"&gt;Vue&lt;/a&gt; or &lt;a href="https://github.com/alpinejs/alpine"&gt;Alpine&lt;/a&gt;, you will be very familiar with the syntax.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#getting-started" class="anchor"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h3&gt;

&lt;p&gt;First, make sure you have a &lt;code&gt;index.html&lt;/code&gt; created that you are able to read/modify, as well as preview in the browser. You can easily accomplish this locally, or use a service like &lt;a href="https://codepen.io/"&gt;Codepen&lt;/a&gt; or &lt;a href="https://repl.it/"&gt;Repl.it&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After that, add Lucia's CDN import script into your &lt;code&gt;index.html&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://unpkg.com/lucia"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Assume for the rest of the code snippets in this tutorial that this import line is included.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#creating-the-todo-app" class="anchor"&gt;
  &lt;/a&gt;
  Creating the Todo App
&lt;/h3&gt;

&lt;p&gt;We first need to start with component scope initialization:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;l-state=&lt;/span&gt;&lt;span class="s"&gt;"{ /* Need to add props */ }"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Lucia component scope requires you to use the &lt;code&gt;l-state&lt;/code&gt; directive (essentially just a "special" attribute for the Lucia compiler to latch on). Inside the directive value, you must pass a value that is able to return an object.&lt;/p&gt;

&lt;p&gt;Now, lets just write the basic HTML skeleton code for the application. I want an &lt;code&gt;input&lt;/code&gt; and a &lt;code&gt;button&lt;/code&gt;, which will append to a &lt;code&gt;ul&lt;/code&gt; every time the button is clicked.&lt;/p&gt;

&lt;p&gt;If so, I will need a property to model the value of the input (&lt;code&gt;value&lt;/code&gt;), and a property to store the tasks (&lt;code&gt;todo&lt;/code&gt;).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;l-state=&lt;/span&gt;&lt;span class="s"&gt;"{ value: '', todo: [] }"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&amp;gt;&lt;/span&gt;Create&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now, let's sprinkle in the logic with &lt;a href="https://lucia.js.org/docs/essentials/introduction#getting-started"&gt;Lucia directives&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;l-state=&lt;/span&gt;&lt;span class="s"&gt;"{ value: '', todo: [] }"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!-- two-way-binds `value` prop to value --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;l-model=&lt;/span&gt;&lt;span class="s"&gt;"this.value"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; 
  &lt;span class="c"&gt;&amp;lt;!-- captures click event, pushing current `value` to `todo` --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;l-on:click=&lt;/span&gt;&lt;span class="s"&gt;"this.todo.push(`&amp;lt;li&amp;gt;${this.value}&amp;lt;/li&amp;gt;`)"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Create&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!-- joins array together --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;ul&lt;/span&gt; &lt;span class="na"&gt;l-join=&lt;/span&gt;&lt;span class="s"&gt;"this.todo"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And your Todo application with Lucia has been completed! No, really - its that easy.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VGt8Wvf6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/0mvvhg7p08dqfi1a1u5z.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VGt8Wvf6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/0mvvhg7p08dqfi1a1u5z.jpg" alt="Demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Want to learn more about Lucia? Check out &lt;a href="https://lucia.js.org"&gt;the documentation&lt;/a&gt; and leave a ⭐ at &lt;a href="https://github.com/aidenybai/lucia"&gt;the Github repo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Final CodePen&lt;/strong&gt;: &lt;a href="https://codepen.io/aidenybai/pen/JjRrwjN"&gt;https://codepen.io/aidenybai/pen/JjRrwjN&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>tutorial</category>
      <category>github</category>
    </item>
    <item>
      <title>Understanding React Components.</title>
      <author>ReenyDavidson</author>
      <pubDate>Wed, 23 Dec 2020 23:33:22 +0000</pubDate>
      <link>https://dev.to/reenydavidson/understanding-react-components-5543</link>
      <guid>https://dev.to/reenydavidson/understanding-react-components-5543</guid>
      <description>&lt;p&gt;React is a frontend UI library for designing user interfaces of web applications.&lt;/p&gt;

&lt;p&gt;When writing a React application, it is very necessary you understand the concept of React components and what they actually do. React has made these components very easy to create and very much reusable in any case.&lt;/p&gt;

&lt;p&gt;Now lets jump into Components, shall we?&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-are-react-components" class="anchor"&gt;
  &lt;/a&gt;
  What are React Components?
&lt;/h1&gt;

&lt;p&gt;React components are independent units that make up a React app. It can also be seen as building blocks that evaluates to a full React application. You would definitely be using components a lot, trust me. In fact, you cannot build a React application without creating components, it’s impossible. Imagine building a house without blocks or building a car without it’s various parts, that is very impossible. These components must be put together to build a React application. They make up different part of the UI and also let you control all these parts independently.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const myFirstComponent = () =&amp;gt; &amp;lt;h1&amp;gt;Yes! I wrote a component&amp;lt;/h1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The above is a very simple function component that will display the h1 child to the browser. Mind you, the element that is being returned by the component above is not HTML. It is called JSX. &lt;a href="//reactjs.org/docs/introducing-jsx.html"&gt;Visit here&lt;/a&gt; for better understanding of JSX&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#types-of-components" class="anchor"&gt;
  &lt;/a&gt;
  Types of Components
&lt;/h1&gt;

&lt;p&gt;In React, there are basically two types of components. These two types of components are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Class components&lt;/li&gt;
&lt;li&gt;Functional components&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I will start by explaining the class component.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#class-components-stateful" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Class Components (stateful)&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;The class component is said to be stateful as it tends to implement some kind of logic and also manage any local state in the component. It also accepts lifecycle methods.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from "react";

const FunctionComponent = (props) =&amp;gt; {
  return (
    &amp;lt;div&amp;gt;
      &amp;lt;form&amp;gt;
        &amp;lt;input placeholder="Enter Term..." /&amp;gt;
        &amp;lt;button&amp;gt;Submit&amp;lt;/button&amp;gt;
      &amp;lt;/form&amp;gt;
      &amp;lt;div&amp;gt;
        &amp;lt;h1&amp;gt;{props.message}&amp;lt;/h1&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  );
};

export default FunctionComponent;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;em&gt;A simple class component in react.&lt;/em&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#state" class="anchor"&gt;
  &lt;/a&gt;
  state
&lt;/h2&gt;

&lt;p&gt;React state can be seen as an instance of properties that affects the behavior of the UI when rendered to the browser. It handles data that changes overtime, which means it is mutable. The state is basically an object that holds some kind of data that affects the UI at anytime. This state can only be written in a class component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, { Component } from "react";

class App extends Component {
  state={firstname:'', lastname:''}

  render(){
    return (
      &amp;lt;div&amp;gt;
      &amp;lt;form&amp;gt;
        &amp;lt;input
          placeholder='firstname'
          value={this.state.firstname}
          onChange={(e)=&amp;gt;{this.setState({firstname:e.target.value})}}
        /&amp;gt;
         &amp;lt;input
          placeholder='lasttname'
          value={this.state.lastname}
          onChange={(e)=&amp;gt;{this.setState({lastname:e.target.value})}}
        /&amp;gt;
        &amp;lt;button onClick={(e)=&amp;gt;{e.preventDefault()}}&amp;gt;click&amp;lt;/button&amp;gt;
      &amp;lt;/form&amp;gt;

&amp;lt;/div&amp;gt;
    )
  }
}

export default App

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;em&gt;A class component with state.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The above code shows that on every keypress on the form input, the component re-renders and changes the UI state.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lifecycle-methods" class="anchor"&gt;
  &lt;/a&gt;
  Lifecycle methods
&lt;/h2&gt;

&lt;p&gt;Lifecycle methods simply explains the all round period of the component from when it was rendered to when it was destroyed, probably as a result of leaving page or deleting something. Just like a cooking process or lifecycle, components has its own lifecycle. The three major ones are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;When the component mounts&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When the component updates&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When the component unmounts.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#componentdidmount" class="anchor"&gt;
  &lt;/a&gt;
  componentDidMount
&lt;/h2&gt;

&lt;p&gt;This method is called once. It is fired immediately the component has been rendered. You can use this method to fetch data from an API and also render the data after the component has been mounted. You can use it to fetch any information or data you want to have immediately the component is rendered.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;componentDidMount() {
       console.log('I run immediately the component is rendered')
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The above code will log “I run immediately the component is rendered” to the console immediately the component is rendered.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#componentdidupdate" class="anchor"&gt;
  &lt;/a&gt;
  componentDidUpdate
&lt;/h2&gt;

&lt;p&gt;This method is called when there’s a change in the state of a rendered component. This method accepts two arguments which are the previous props and the previous state.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;componentDidUpdate(prevProps, prevState) {
  if (prevState.colors !== this.state.colors) {
    console.log('colors has changed.')
  }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Basically, componentDidUpdate is called based on a condition that is to be met, which is a comparison between the previous state and current state. If there is a change from previous state to current state, the method will run, but if no change has occurred in the state, the method won’t be called.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#componentwillunmount" class="anchor"&gt;
  &lt;/a&gt;
  componentWillUnmount
&lt;/h2&gt;

&lt;p&gt;This method is called when the component is being removed from the DOM. It is the last method you call in a component’s lifecycle. Basically, you call this guy to run immediately before the component is destroyed and in this method, you can do some cleanup that regards to the component before it unmounts.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;componentWillUnmount(){
    alert('This component is about to be unmounted.');
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In the above snip, we can see that the user is getting a warning from componentWillUnmount before the component is destroyed. Basically, componentWillUnmount holds the activity that will be carried before the component is dismantled from the DOM.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#functional-components-i-am-without-state" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Functional Components (I am without state)&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;Also known as stateless component is a component that only takes in props and renders elements (JSX) to the UI. A functional component cannot manage state, making it impossible for it to implement any form of logic that might affect the state of the UI being rendered. It is basically a Javascript function returning an element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from "react";

const FunctionComponent = (props) =&amp;gt; {
  return (
    &amp;lt;div&amp;gt;
      &amp;lt;form&amp;gt;
        &amp;lt;input placeholder="Enter Term..." /&amp;gt;
        &amp;lt;button&amp;gt;Submit&amp;lt;/button&amp;gt;
      &amp;lt;/form&amp;gt;
      &amp;lt;div&amp;gt;
        &amp;lt;h1&amp;gt;{props.message}&amp;lt;/h1&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  );
};

export default FunctionComponent;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Function Component in React.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The code above shows a function component that takes in an input element and a props which is basically passing information from another component. Apart from the fact that a function component returns JSX and accepts props, We can also say that function component is used only when we have no plan to make use of state and lifecycle methods in the component. BUT! let’s not write this guy off yet, he has his own super powers which he uses to effect changes to the UI.&lt;/p&gt;

&lt;p&gt;Function component uses what is known as Hooks to effect changes to UI. Hooks lets you hook into React state in a function component with useState and also tap into lifecycle method with useEffect. Hooks makes it possible for logic to be applied in a function component. It is a very important tool in React function components.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#usestate" class="anchor"&gt;
  &lt;/a&gt;
  UseState
&lt;/h2&gt;

&lt;p&gt;UseState hook basically does in function component what a state and setState would do in class component, which is manipulating the UI.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from "react";

const FunctionalInput = () =&amp;gt; {
  const [state, setstate] = React.useState({ firstname: "", lastname: "" });
  const handleClick = (e) =&amp;gt; {
    setstate(e.target.value);
    console.log(e.target.value);
  };

  return (
    &amp;lt;div&amp;gt;
      &amp;lt;input
        value={state.firstname}
        onChange={handleClick}
        placeholder="firstname"
      /&amp;gt;
      &amp;lt;input
        value={state.lastname}
        onChange={handleClick}
        placeholder="lastname"
      /&amp;gt;
    &amp;lt;/div&amp;gt;
  );
};

export default FunctionalInput;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;em&gt;use of useState in a function component&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The code above shows how React uses useState to manage state in a function component. In the array destructuring seen above, ‘state’ is the initial condition of the UI and we need to update that at every keypress made in the input element which re-renders the UI and also changes the state of the UI at every re-render. I came to realize that useState does a better job at managing state (just my opinion). I believe so because it just use less code to do the same thing that the class component does with setState.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#useeffect" class="anchor"&gt;
  &lt;/a&gt;
  useEffect
&lt;/h2&gt;

&lt;p&gt;Another hook we will look at is the useEffect hook. It has some kind of similarity with the the lifecycle methods of the class component. This hook is basically a function that holds another function that will run after the the UI has been rendered, just like componentDidMount would do. It also does it with less code, unlike lifecycle methods that involves componentDidMount, componentDidUpdate and componentWillUnmount just to do what only useEffect will do.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, { useEffect } from "react";

const FunctionalInput = () =&amp;gt; {
  const [state, setstate] = React.useState({ firstname: "", lastname: "" });

  //This piece of code runs after the ui has been rendered
  useEffect(() =&amp;gt; {
    console.log("A component was rendered!!!");
  }, []);

  const handleClick = (e) =&amp;gt; {
    setstate(e.target.value);
    console.log(e.target.value);
  };

  return (
    &amp;lt;div&amp;gt;
      &amp;lt;input
        value={state.firstname}
        onChange={handleClick}
        placeholder="firstname"
      /&amp;gt;
      &amp;lt;input
        value={state.lastname}
        onChange={handleClick}
        placeholder="lastname"
      /&amp;gt;
    &amp;lt;/div&amp;gt;
  );
};

export default FunctionalInput;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;em&gt;use of useEffect in a function component&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;useEffect here will run immediately the UI is rendered. The array at the end makes it run once and never run again at every re-render, but without the array, useEffect continues to run each time the UI re-renders. An API can also be fetched with useEffect hook. When the UI renders, the useEffect is triggered, which allows the API to retrieve any form of data it is meant to retrieve.&lt;/p&gt;

&lt;p&gt;In React, you can create your own custom hooks, which gives you the freedom to use hooks as you please. Note that React Hooks can only be used in React function component.&lt;/p&gt;

&lt;p&gt;These two components mentioned in this article can be used, based on what you are building. It’s very necessary you learn how to use the two of them as a React developer.&lt;/p&gt;

&lt;p&gt;With that being said, go and React!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Creating a Cleaner MacOS Workspace</title>
      <author>Max Bridgland</author>
      <pubDate>Wed, 23 Dec 2020 23:13:31 +0000</pubDate>
      <link>https://dev.to/m4cs/creating-a-cleaner-macos-workspace-2e35</link>
      <guid>https://dev.to/m4cs/creating-a-cleaner-macos-workspace-2e35</guid>
      <description>&lt;p&gt;The default macOS window management and desktop environment is great don't get me wrong. However, after using alternative window management solutions on Linux distros, I've craved a better solution. I've enjoyed ricing my Linux desktops for the past couple of years, and in doing so I've looked for similar tools I can use on macOS. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A4u3_X2p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fqr7iw1o79ig1v15wtl9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A4u3_X2p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fqr7iw1o79ig1v15wtl9.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this article I'll be walking you through how to get a setup resembling the photo above. The tools in use you see are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;yabai (Window Management)&lt;/li&gt;
&lt;li&gt;skhd (Hotkeys for yabai, running commands, etc)&lt;/li&gt;
&lt;li&gt;iTerm2 (Terminal Emulator)&lt;/li&gt;
&lt;li&gt;pywal (Colorscheme Generator)&lt;/li&gt;
&lt;li&gt;Übersicht (JSX Widgets on the desktop)&lt;/li&gt;
&lt;li&gt;ncmpcpp and mopidy (Spotify music player on the command line)&lt;/li&gt;
&lt;li&gt;dmenu-mac (Alternative Spotlight launcher)&lt;/li&gt;
&lt;li&gt;gotop (htop alternative)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#getting-started" class="anchor"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#yabai" class="anchor"&gt;
  &lt;/a&gt;
  yabai
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FNhRV6QL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pe6f82fjq7n3ulloa2wr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FNhRV6QL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pe6f82fjq7n3ulloa2wr.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yabai is a window manager that came from the creators older WM known as chunkwm. If you've ever used i3 or i3-gaps, it's extremely similar. Yabai works as a tiling window manager. There are a ton of customization options you can find on the GitHub Wiki.&lt;/p&gt;

&lt;p&gt;To install &lt;a href="https://github.com/koekeishiya/yabai/wiki/Installing-yabai-(latest-release)"&gt;follow the instructions found here.&lt;/a&gt; Make sure to disable SIP on your Mac!&lt;/p&gt;

&lt;p&gt;If you'd like a similar setup to what I have, you can use the &lt;code&gt;.yabairc&lt;/code&gt; file found &lt;a href="https://github.com/M4cs/yabai-skhd-configs"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#skhd" class="anchor"&gt;
  &lt;/a&gt;
  skhd
&lt;/h3&gt;

&lt;p&gt;skhd (simple hotkey daemon) is a hotkey manager for macOS. It was created by the same person as yabai and works hand in hand with it. Using skhd you can create keybinds to edit your workspace, launch applications, change system values, and more.&lt;/p&gt;

&lt;p&gt;To install &lt;a href="https://github.com/koekeishiya/skhd#install"&gt;follow the instructions found here.&lt;/a&gt; If you'd like a config that already includes some yabai bindings, you can use the &lt;code&gt;.skhdrc&lt;/code&gt; file found &lt;a href="https://github.com/M4cs/yabai-skhd-configs"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#iterm2" class="anchor"&gt;
  &lt;/a&gt;
  iTerm2
&lt;/h3&gt;

&lt;p&gt;iTerm2 is a great macOS terminal emulator. It offers a massive amount of customization for your setup and even works with pywal. Pywal is a tool that will generate colorschemes from images and set your wallpaper w/ said image.&lt;/p&gt;

&lt;p&gt;To install iTerm2, grab it &lt;a href=""&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;If you'd like to use my profile, simply open Profiles &amp;gt; Default &amp;gt; Colors: Under colorscheme select import &amp;gt; import &lt;a href="https://gist.github.com/M4cs/8333cba215acf7fffd04f1c3aa7900c1"&gt;this file&lt;/a&gt; and select it as your colorscheme.&lt;/p&gt;

&lt;p&gt;To install pywal, run &lt;code&gt;pip3 install pywal haishoku&lt;/code&gt;. I find that the haishoku backend generates the most favorable colorschemes. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ncmpcppmopidy" class="anchor"&gt;
  &lt;/a&gt;
  ncmpcpp/mopidy
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qm1VSW-L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/03kjzsud983wv6czjxeg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qm1VSW-L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/03kjzsud983wv6czjxeg.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ncmpcpp is a command line based music player. You can see it in use in the two terminals on the top of the image. It has the ability to control mpd which I use mopidy to host. Mopidy is an mpd alternative that offers an MPD-like protocol and plugins. I use mopidy because it allows me to add Spotify to my mpd server! This means I get all spotify functionality through mpd.&lt;/p&gt;

&lt;p&gt;First install mopidy, mopidy-mpd, and mopidy-spotify. To do so you can follow the steps &lt;a href="https://docs.mopidy.com/en/latest/installation/"&gt;here&lt;/a&gt;. Next follow the steps &lt;a href="https://computingforgeeks.com/install-configure-mpd-ncmpcpp-macos/"&gt;here to install ncmpcpp. Ignore the steps for installing mpd&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I haven't changed much to those configs from the default so feel free to experiment on your own!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#gotop" class="anchor"&gt;
  &lt;/a&gt;
  gotop
&lt;/h3&gt;

&lt;p&gt;Gotop is an awesome go based process manager. It shows you a lot of information about your system and what processes are using what. You can install it by first installing Go and then running &lt;code&gt;go get -u github.com/cjbassi/gotop&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#other-customizations" class="anchor"&gt;
  &lt;/a&gt;
  Other Customizations
&lt;/h3&gt;

&lt;p&gt;You can also use custom CSS for Firefox and theme that. &lt;a href="https://github.com/M4cs/foxify-cli"&gt;I made a tool to make the process easier. Read more about Foxify-CLI here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How I got a Nintendo Switch using NodeJS</title>
      <author>Regis Gaughan, III</author>
      <pubDate>Wed, 23 Dec 2020 19:10:35 +0000</pubDate>
      <link>https://dev.to/rgthree/how-i-got-a-nintendo-switch-using-nodejs-2eab</link>
      <guid>https://dev.to/rgthree/how-i-got-a-nintendo-switch-using-nodejs-2eab</guid>
      <description>&lt;p&gt;Have you missed out on a hot holiday gift? Me too... until I used NodeJS to send my phone an alert to buy!&lt;/p&gt;




&lt;p&gt;This holiday season I saw a deal for a Nintendo Switch bundle which was perfect for my brother and his family. It was on sale for $299 but, unfortunately, by the time I went to get it there were no more available and third-party scalpers were selling it for over $500. Bummer.&lt;/p&gt;

&lt;p&gt;However, I noticed that Amazon’s stock would occasionally come available with that $299 price tag every now and then; but I was never lucky enough to check at the right time.&lt;/p&gt;

&lt;p&gt;So what does a software engineer do? Write a script to monitor the availability and send a message to my phone when it’s available to buy. And, it actually worked!&lt;/p&gt;





&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vJ70wriM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/rgthree"&gt;
        rgthree
      &lt;/a&gt; / &lt;a href="https://github.com/rgthree/pricewatch"&gt;
        pricewatch
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      An Amazon Price Watcher with phone alerting via Telegram
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;





&lt;h2&gt;
  &lt;a href="#how-it-works" class="anchor"&gt;
  &lt;/a&gt;
  How it works.
&lt;/h2&gt;

&lt;p&gt;The script is three pieces that work together:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;An &lt;code&gt;AmazonPriceChecker&lt;/code&gt; that fetches the Amazon product web page by its id and, using JSDOM, looks for the current price&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;TelegramBot&lt;/code&gt; that simply encapsulates making a simple request to alert my phone via my &lt;a href="https://dev.to/rgthree/personal-telegram-bot-for-alerting-your-phone-w-o-code-1oih"&gt;personal Telegram bot&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;And a main server file that ties it all together to run the check loop, check the price threshold, and utilize the bot to alert my phone.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#set-up" class="anchor"&gt;
  &lt;/a&gt;
  Set up
&lt;/h2&gt;

&lt;p&gt;For this project, we'll need very few dependencies.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you haven't already, you'll need to &lt;a href="https://nodejs.dev/learn/how-to-install-nodejs"&gt;install NodeJS&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You'll also need TypeScript. I recommend installing globally:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;
 npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-g&lt;/span&gt; typescript

&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You'll then need &lt;code&gt;jsdom&lt;/code&gt; and &lt;code&gt;node-fetch&lt;/code&gt;. You can create a &lt;code&gt;package.json&lt;/code&gt; file similar to below in your project directory and run &lt;code&gt;npm install&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"rgthree-pricewatch"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Watch prices."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"0.0.1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"private"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"dependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"jsdom"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^16.4.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"node-fetch"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^2.6.1"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"devDependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"@types/jsdom"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"11.0.4"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"@types/node"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^12.12.2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"@types/node-fetch"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^2.5.7"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
package.json



&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-amazonpricechecker" class="anchor"&gt;
  &lt;/a&gt;
  The AmazonPriceChecker
&lt;/h2&gt;

&lt;p&gt;All we need this to do is fetch the Amazon product's web page by its product id and, using JSDOM, look for the current price in the DOM, and return it if found along with the url of the product itself.&lt;/p&gt;

&lt;p&gt;One thing to keep in mind is we’re fetching the web page with our server. We’ll override the User-Agent so it looks like a browser, but the response back will be raw HTML and possibly different than the markup we see when using Amazon as JavaScript is likely modifying the page substantially after that raw HTML come back.&lt;/p&gt;

&lt;p&gt;So, to find how to scrape the price we'll use the view-source feature in a browser to see exactly what our script will see instead of the DevTools.&lt;/p&gt;

&lt;p&gt;Luckily, it wasn't too hard to find Amazon is wrapping the price in an element with the id of &lt;code&gt;priceblock_ourprice&lt;/code&gt;. &lt;em&gt;(At least for the Nintendo; it's possible other products have different markup.)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;All together, our &lt;code&gt;AmazonPriceChecker&lt;/code&gt; looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;node-fetch&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;JSDOM&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;jsdom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/**
 * Given a product id, will try to find the current price of the item on the
 * Amazon page.
 */&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AmazonPriceChecker&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`https://www.amazon.com/gp/product/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="cm"&gt;/**
   * Returns a payload of the url for the product and it's current price, if
   * found. If the price cannot be determined, it will be `NaN`.
   */&lt;/span&gt;
  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;check&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fetchProductPage&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;doc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;JSDOM&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#priceblock_ourprice&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)?.&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;$&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;fetchProductPage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;get&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;accept-language&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;en-US&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Accept&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text/html,application/xhtml+xml&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="c1"&gt;// Make our request look like a browser.&lt;/span&gt;
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;User-Agent&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.11 Safari/537.36&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
amazon_watcher.ts



&lt;h2&gt;
  &lt;a href="#our-telegrambot" class="anchor"&gt;
  &lt;/a&gt;
  Our TelegramBot
&lt;/h2&gt;

&lt;p&gt;For the next part of our script we want to alert our phone. I've previously written about how to create a personal Telegram Bot here:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/rgthree" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BawtoF_5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--7W0bJyAc--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/262332/e21e5e5c-73b5-4d9b-a0e8-c230589bbeff.jpg" alt="rgthree image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/rgthree/personal-telegram-bot-for-alerting-your-phone-w-o-code-1oih" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Personal Telegram Bot for Alerting Your Phone (w/o code)&lt;/h2&gt;
      &lt;h3&gt;Regis Gaughan, III ・ Dec  9 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#telegram&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#chatbot&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#api&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#notifications&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;p&gt;All we need is our bot’s Api Key and the chat id our bot belongs to that we'll ping.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;node-fetch&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/**
 * Super simple telegram wrapper that sends messages to a bot specific chat.
 */&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;TelegramBot&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;botApiKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;chatId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;sendMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`https://api.telegram.org/bot&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;botApiKey&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/sendMessage?chat_id=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;chatId&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;amp;text=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nb"&gt;encodeURIComponent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
telegrambot.ts




&lt;blockquote&gt;
&lt;p&gt;NOTE: You don't &lt;em&gt;have&lt;/em&gt; to use Telegram to alert yourself. You can modify the code here to send an email, or trigger IFTTT in some way, etc. Options are up to you, I've chosen to use Telegram because I already had a personal bot setup to ping my phone :)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#tying-it-all-together" class="anchor"&gt;
  &lt;/a&gt;
  Tying it all together
&lt;/h2&gt;

&lt;p&gt;Now that we have our two separate pieces, we'll tie them together in our main server file where we'll loop to check every two minutes.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;AmazonPriceChecker&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./amazon_watcher&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;TelegramBot&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./telegrambot&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;TELEGRAM_API_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;YOUR_API_KEY&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;TELEGRAM_CHAT_ID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;YOUR_API_KEYCHAT_ID&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// The Amazon product id. The XXX in&lt;/span&gt;
&lt;span class="c1"&gt;// https://www.amazon.com/dp/XXX or https://www.amazon.com/gp/product/XXX&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;AMAZON_PRODUCT_ID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;B08KB652Q2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;TARGET_PRICE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MS_MINUTES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;BASE_TIMEOUT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;MS_MINUTES&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;telegram&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;TelegramBot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;TELEGRAM_API_KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;TELEGRAM_CHAT_ID&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;priceChecker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;AmazonPriceChecker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;AMAZON_PRODUCT_ID&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="cm"&gt;/**
 * Checks the price with `priceChecker`, issues a message with `telegram` if
 * it meets our threshold, and schedules another check.
 */&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;check&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;timeout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;BASE_TIMEOUT&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;priceChecker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;check&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;price&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;TARGET_PRICE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;telegram&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Price is: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;. Checking again in &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;timeout&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;MS_MINUTES&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; minutes. &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// If we can't parse the price, maybe something's wrong. We'll slow down&lt;/span&gt;
      &lt;span class="c1"&gt;// our interval a bit.&lt;/span&gt;
      &lt;span class="nx"&gt;timeout&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;MS_MINUTES&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;telegram&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Could not parse price. Trying again in &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;timeout&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;MS_MINUTES&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;. &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;timeout&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;MS_MINUTES&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;telegram&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`There was an error fetching the price. Will check again in &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;timeout&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;MS_MINUTES&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; minutes.`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// Rinse &amp;amp; repeat.&lt;/span&gt;
  &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;check&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Start it!&lt;/span&gt;
&lt;span class="nx"&gt;check&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Checker Started. Stop with Ctrl + C.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
server.ts



&lt;h2&gt;
  &lt;a href="#start-it-up" class="anchor"&gt;
  &lt;/a&gt;
  Start it up
&lt;/h2&gt;

&lt;p&gt;First, run the TypeScript compiler which will generate JavaScript files from our neatly typed TypeScript files:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;tsc
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;And then run our server file with NodeJs:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;node server.js
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;And that's it! This triggered an alert on my phone in about 4 hours or so and I was able to open Amazon directly to the product page and get the Switch, which was good because when I checked again four minutes later it shot back up to $500!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#enhance" class="anchor"&gt;
  &lt;/a&gt;
  Enhance!
&lt;/h2&gt;

&lt;p&gt;This is just a base that worked for me. We can take this add more checkers for other online stores, different products, turn it into a full "bot" that actually buys the product, etc. Consider this just a starting point of where we can go from here. Maybe for next holiday season.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vJ70wriM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/rgthree"&gt;
        rgthree
      &lt;/a&gt; / &lt;a href="https://github.com/rgthree/pricewatch"&gt;
        pricewatch
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      An Amazon Price Watcher with phone alerting via Telegram
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>node</category>
      <category>automation</category>
    </item>
    <item>
      <title>Introduction to Elixir</title>
      <author>Serokell</author>
      <pubDate>Wed, 23 Dec 2020 18:53:18 +0000</pubDate>
      <link>https://dev.to/serokell/introduction-to-elixir-1gm0</link>
      <guid>https://dev.to/serokell/introduction-to-elixir-1gm0</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction-to-elixir" class="anchor"&gt;
  &lt;/a&gt;
  Introduction to Elixir
&lt;/h1&gt;

&lt;p&gt;Elixir is a functional, dynamically typed language that is built on top of Erlang’s VM and compiles down to Erlang bytecode. &lt;/p&gt;

&lt;p&gt;Since its release in 2011, it has become one of the most loved languages, according to the &lt;a href="https://insights.stackoverflow.com/survey/2019#most-loved-dreaded-and-wanted"&gt;Stack Overflow Developer Survey&lt;/a&gt;. And for good reason. Elixir applications are scalable, very reliable, and the syntax is also quite nice. &lt;/p&gt;

&lt;p&gt;While the language has made headway in highly concurrent web applications, some of our readers might not yet be familiar with it. In this article, we will give a brief introduction to what Elixir is and why one would use it for a software project in contrast to technologies like Java, Ruby, and others. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-erlang-a-brief-history" class="anchor"&gt;
  &lt;/a&gt;
  What is Erlang? A brief history
&lt;/h2&gt;

&lt;p&gt;Every discussion of Elixir must inevitably start with a discussion of &lt;a href="https://www.erlang.org/"&gt;Erlang&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Erlang is a rather old language, created in the 1980s. Its purpose was to solve the problem of reliable phone switching, which it did almost perfectly. Erlang provided tools for creating code that is highly scalable, concurrent, with incredible uptime and fault tolerance.&lt;/p&gt;

&lt;p&gt;To make this wonderful toolset more accessible, José Valim created Elixir.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/lxYFOM3UJzo"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Elixir was intended to be a Ruby-like language that would give developers access to all the powerful tools that Erlang gives to their developers for doing parallel and concurrent computation. Elixir was to include features that were necessary but missing in Erlang. &lt;/p&gt;

&lt;p&gt;In that sense, it succeeded. While Erlang and Elixir are both still used widely in their respective fields, Elixir is much more popular and gaining popularity. &lt;/p&gt;

&lt;p&gt;You can learn more about the history of Elixir and its predecessor, Erlang, from our &lt;a href="https://serokell.io/blog/history-of-erlang-and-elixir"&gt;History of Erlang and Elixir&lt;/a&gt; blog post.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#main-features-of-elixir" class="anchor"&gt;
  &lt;/a&gt;
  Main features of Elixir
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;The Elixir programming language wraps functional programming with immutable state and an actor-based approach to concurrency in a tidy, modern syntax. And it runs on the industrial-strength, high-performance, distributed Erlang VM. But what does all that mean?  — Dave Thomas, Programming Elixir &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cRbCWCww--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://serokell.io/files/zo/zorp6ki9.2_%289%29.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cRbCWCww--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://serokell.io/files/zo/zorp6ki9.2_%289%29.jpg" alt="Features of Elixir"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Elixir is built on top of the Erlang VM.&lt;/strong&gt; Elixir has access to all the concurrency tools that Erlang has access to, making it one of the most powerful modern languages for building scalable, distributed systems. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Elixir has Ruby-like syntax.&lt;/strong&gt; If you have already programmed in Ruby, the syntax of Elixir will feel very familiar. Ruby is one of the most concise and productivity-oriented languages out there, but it is lacking in performance and concurrency. Erlang VM solves both of these problems, and, therefore, Elixir is the best of both worlds. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Elixir is functional.&lt;/strong&gt; While Elixir and Erlang could be characterized as being in a group of their own (they are both process-oriented), Elixir also has all the constructs you expect from modern FP languages. In particular, immutable data structures help concurrency quite a lot, and pattern matching is great for writing declarative code. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Elixir has dynamic typing.&lt;/strong&gt; Elixir has dynamic typing in contrast to other functional languages like Haskell and Scala. This means that types are checked in run-time, not during compilation. While this can be a downside when building critical systems, it also increases development speed for simple web applications. Static types can be introduced in Elixir through typespecs. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#benefits-of-elixir" class="anchor"&gt;
  &lt;/a&gt;
  Benefits of Elixir
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VD4K5frd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://serokell.io/files/b7/b7gwa45i.3_%287%29.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VD4K5frd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://serokell.io/files/b7/b7gwa45i.3_%287%29.jpg" alt="Benefits of Elixir"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#beam" class="anchor"&gt;
  &lt;/a&gt;
  BEAM
&lt;/h3&gt;

&lt;p&gt;Elixir is built on top of BEAM, the Erlang VM, and it shares the same abstractions that have made Erlang one of the best choices for concurrent, high-volume applications. &lt;/p&gt;

&lt;p&gt;With Erlang, Elixir shares these three characteristics: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Concurrency.&lt;/strong&gt; Elixir uses lightweight threads of execution (called processes). These are isolated, run across all CPUs, and communicate through messages. Together with the immutability of data that comes from the functional nature of the language, this makes it less hard to write concurrent programs in Elixir.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Scalability.&lt;/strong&gt; These same processes allow us to scale systems easily, either horizontally (adding more machines to the cluster) or vertically (using the available resources of the machine more efficiently).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Reliability.&lt;/strong&gt; Elixir and Erlang have a unique approach to fault-tolerance. While things sometimes inevitably fail in production, lightweight processes can be quickly restarted by the supervisor system. This deals with most bugs that are not due to serious faults in software development. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From Erlang, Elixir also gets the &lt;strong&gt;Open Telecom Platform&lt;/strong&gt;. OTP is a part of Erlang's standard library that was used to achieve fault-tolerance in telecom systems, but its usage nowadays is much wider – one can use it for basically any type of concurrent programming. &lt;/p&gt;

&lt;p&gt;Compared to conventional solutions, OTP gives a great foundation so that the developer can spend time on implementing the actual business logic. With other languages, a lot of time is spent on plumbing. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#functional-programming" class="anchor"&gt;
  &lt;/a&gt;
  Functional Programming
&lt;/h3&gt;

&lt;p&gt;Besides, Elixir is very much a &lt;strong&gt;functional programming language&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Functional programming is a programming paradigm that treats programs like evaluations of mathematical functions and avoids things like mutable data and changing state. &lt;/p&gt;

&lt;p&gt;In contrast to mainstream programming languages like Java or Python, Elixir code is structured in functions and modules (groups of functions) instead of objects and classes. In addition, all the data types are immutable. For example, calling a function on a variable will produce a new variable, not change the variable in place. &lt;/p&gt;

&lt;p&gt;Functional programming supports and takes advantage of things like &lt;a href="https://elixir-lang.org/getting-started/pattern-matching.html"&gt;pattern matching&lt;/a&gt;, higher-order functions, and declarative style of writing code, and that comes with multiple benefits: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  better maintainability;&lt;/li&gt;
&lt;li&gt;  clearer testing and debugging;&lt;/li&gt;
&lt;li&gt;  easier handling of concurrent programs;&lt;/li&gt;
&lt;li&gt;  high-level abstractions that make code simpler to write and understand. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more info on the benefits of functional programming, check out our &lt;a href="https://serokell.io/blog/introduction-to-functional-programming"&gt;Introduction to Functional Programming&lt;/a&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#phoenix" class="anchor"&gt;
  &lt;/a&gt;
  Phoenix
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VlQOe6d1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://serokell.io/files/r5/r54e1c0i.4_%283%29.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VlQOe6d1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://serokell.io/files/r5/r54e1c0i.4_%283%29.jpg" alt="Phoenix"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to use the best web framework in the world, you will have to use Elixir.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.phoenixframework.org/"&gt;Phoenix&lt;/a&gt; is as easy to use as any of your regular MVC web frameworks (like Rails and Django), but it is also backed up by the BEAM. It enables one to efficiently churn out web apps while not compromising on either speed or maintainability.&lt;/p&gt;

&lt;p&gt;Turns out, the lightweight processes of Elixir/Erlang are great for solving problems of concurrency and scalability in web services. While Phoenix Channels can achieve &lt;a href="http://www.phoenixframework.org/blog/the-road-to-2-million-websocket-connections"&gt;2 million websocket connections on a single box&lt;/a&gt;, the capacity can be multiplied by distributing the traffic to more nodes. &lt;/p&gt;

&lt;p&gt;It has downsides too, though. The ecosystem of Phoenix and Elixir is not as mature as for Ruby on Rails or Python’s Django, so one might run into the problem where “not all batteries are included”. But all in all, the benefits outweigh the costs.&lt;/p&gt;

&lt;p&gt;Here are some useful resources on Phoenix to check out: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://www.youtube.com/watch?v=bk3icU8iIto"&gt;Phoenix a Web Framework for the New Web&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://blog.eduonix.com/web-programming-tutorials/introduction-phoenix-framework-works-action/"&gt;Introduction to The Phoenix Framework &amp;amp; How It Works in Action&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.youtube.com/watch?v=F-7MX_Az6_4"&gt;Phoenix: an Intro to Elixir's Web Framework&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#if-you-want-to-scale-choose-elixir" class="anchor"&gt;
  &lt;/a&gt;
  If you want to scale, choose Elixir
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bMyXKmzh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://serokell.io/files/sk/sk9u4a1w.5.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bMyXKmzh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://serokell.io/files/sk/sk9u4a1w.5.jpg" alt="Elixir companies: Adobe, Discord, Moz"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Elixir is used by &lt;a href="https://serokell.io/blog/elixir-companies"&gt;a ton&lt;/a&gt; of companies:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;Adobe&lt;/strong&gt; used Elixir to build a client/cloud application for a collaborative photography workflow.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Discord&lt;/strong&gt; uses Elixir for their large-scale messaging system that you have probably heard about. 5 million concurrent users? &lt;a href="https://blog.discordapp.com/scaling-elixir-f9b8e1e7c29b?gi=88994ceb8364"&gt;No worries.&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Moz&lt;/strong&gt; uses Elixir for the backend of their digital marketing and SEO toolset, Moz Pro. &lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Financial Times&lt;/strong&gt; has used Elixir for developing multiple applications. &lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Motorola Solutions&lt;/strong&gt; uses Erlang and Elixir for mission-critical communication systems that need to be reliable and fault-tolerant. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Many more also use Erlang, such as WhatsApp and Heroku. &lt;/p&gt;

&lt;p&gt;As we can see from the above companies, Elixir enables to write fault-tolerant, scalable code for concurrent systems, and as such, it is perfect for messaging systems and web applications that might need to handle a lot of users efficiently. &lt;/p&gt;

&lt;p&gt;If you want to apply Elixir to your projects but don’t know where to start, &lt;a href="https://serokell.io/hire-us"&gt;shoot us a message&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>elixir</category>
      <category>erlang</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>8 Awesome React Hooks</title>
      <author>Simon Holdorf</author>
      <pubDate>Wed, 23 Dec 2020 15:23:58 +0000</pubDate>
      <link>https://dev.to/simonholdorf/8-awesome-react-hooks-2b14</link>
      <guid>https://dev.to/simonholdorf/8-awesome-react-hooks-2b14</guid>
      <description>&lt;p&gt;React.js is currently the most popular JavaScript library for front end developers. Invented by Facebook, but available as an open-source project, it’s used by developers and corporations all over the world.&lt;/p&gt;

&lt;p&gt;React really changed the way we build single-page applications — one of its greatest features is hooks. Hooks were introduced not long ago and enabled us to use functional components instead of class-based components while dealing with the state. Besides built-in hooks, React offers us ways to implement our own custom hooks.&lt;/p&gt;

&lt;p&gt;Here are some of my favorite examples for custom hooks and their implementation that you can also use in your applications and projects.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#usetimeout-react-hook" class="anchor"&gt;
  &lt;/a&gt;
  useTimeout - React Hook
&lt;/h2&gt;

&lt;p&gt;With this hook, we can implement setTimeout using a declarative approach. First, we create a custom hook with a callback and a delay. Then we use the useRef hook to create a ref for the callback function. Finally, we make use of useEffect twice. One time for remembering the last callback and one time for setting up the timeout and cleaning up.&lt;/p&gt;

&lt;p&gt;The example shows an implementation of a timer:&lt;br&gt;
&lt;a href="//images.ctfassets.net/28643bqnqgzl/6wVwlZFsyai6ND4qr6nH7j/6c6501fffae8798de290fd67adfe80a1/rh1.png" class="article-body-image-wrapper"&gt;&lt;img src="//images.ctfassets.net/28643bqnqgzl/6wVwlZFsyai6ND4qr6nH7j/6c6501fffae8798de290fd67adfe80a1/rh1.png" alt="useTimeout - React Hook"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#useprevious-react-hook" class="anchor"&gt;
  &lt;/a&gt;
  usePrevious - React Hook
&lt;/h2&gt;

&lt;p&gt;This is another great custom hook that we can use in our applications. With it, we can store props or the previous state. First, we create a custom hook that takes in a value. Then we use the useRef hook to create a ref for the value. Finally, we use useEffect to remember the latest value.&lt;/p&gt;

&lt;p&gt;The example shows an implementation of a counter.&lt;br&gt;
&lt;a href="//images.ctfassets.net/28643bqnqgzl/5Jo9rQN54DRh0Bbtq3mCW5/acae81a63e224172ee810eeea1bff12e/rh2.png" class="article-body-image-wrapper"&gt;&lt;img src="//images.ctfassets.net/28643bqnqgzl/5Jo9rQN54DRh0Bbtq3mCW5/acae81a63e224172ee810eeea1bff12e/rh2.png" alt="usePrevious - React Hook"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#useclickinside-react-hook" class="anchor"&gt;
  &lt;/a&gt;
  useClickInside - React Hook
&lt;/h2&gt;

&lt;p&gt;If you deal with event handling for clicking inside of wrapped components then the useClickInside hook is the right choice for you. First, we create a custom hook that takes in a ref and a callback to handle the click event. Then we make use of useEffect to append and clean up the click event. Finally, we use useRef to create a ref for the component to be clicked and pass it to the useClickInside hook.&lt;br&gt;
&lt;a href="//images.ctfassets.net/28643bqnqgzl/4nIDUQsfiejVRFF3eLJ1v9/99ba9dea377583c09ba96269e32b1f8f/rh3.png" class="article-body-image-wrapper"&gt;&lt;img src="//images.ctfassets.net/28643bqnqgzl/4nIDUQsfiejVRFF3eLJ1v9/99ba9dea377583c09ba96269e32b1f8f/rh3.png" alt="useClickInside - React Hook"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#useclickoutside-react-hook" class="anchor"&gt;
  &lt;/a&gt;
  useClickOutside - React Hook
&lt;/h2&gt;

&lt;p&gt;The useClickOutside hook is quite similar to the useClickInside hook but it takes care of clicking outside a wrapped component and not inside. So again, we create a custom hook that takes in a ref and a callback to handle the click event. Then we make use of useEffect to append and clean up the click event. Finally, we use useRef to create a ref for the component and pass it to the useClickOutside hook.&lt;br&gt;
&lt;a href="//images.ctfassets.net/28643bqnqgzl/WilMHRGnV8sLSLL41CqZL/bbba6697b6400d234b88acf6ea9c3072/rh4.png" class="article-body-image-wrapper"&gt;&lt;img src="//images.ctfassets.net/28643bqnqgzl/WilMHRGnV8sLSLL41CqZL/bbba6697b6400d234b88acf6ea9c3072/rh4.png" alt="useClickOutside - React Hook"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#usefetch-react-hook" class="anchor"&gt;
  &lt;/a&gt;
  useFetch - React Hook
&lt;/h2&gt;

&lt;p&gt;The useFetch hook can be used to implement fetch in a declarative way. First, we use useState to initialize the response and error state variables. Then we use useEffect to asynchronously call fetch and update the state. Finally, we return an object that contains the response/error variables.&lt;br&gt;
The example shows a way to fetch a character from the Star Wars API and render its name:&lt;br&gt;
&lt;a href="//images.ctfassets.net/28643bqnqgzl/5l1p7UFaD95p1zJt2zgu0z/291c3c93d98870a4a6ae3fb1adbf730c/rh5.png" class="article-body-image-wrapper"&gt;&lt;img src="//images.ctfassets.net/28643bqnqgzl/5l1p7UFaD95p1zJt2zgu0z/291c3c93d98870a4a6ae3fb1adbf730c/rh5.png" alt="useFetch - React Hook"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#useinterval-react-hook" class="anchor"&gt;
  &lt;/a&gt;
  useInterval - React Hook
&lt;/h2&gt;

&lt;p&gt;If you want to implement setInterval in a declarative manner you can use this hook called useInterval.&lt;/p&gt;

&lt;p&gt;First, we have to create a custom hook taking in a callback and a delay. Then we use useRef to create a ref for the callback. Finally, we use useEffect to remember the latest callback and to set up the interval and clean up.&lt;br&gt;
The example shows an implementation for a custom ResourceCounter that can be used in a browser game, for example.&lt;br&gt;
&lt;a href="//images.ctfassets.net/28643bqnqgzl/3Cm21kv0bD7el75ie3NXC2/99e1df7e03c0b7578710deed69df6b2b/rh6.png" class="article-body-image-wrapper"&gt;&lt;img src="//images.ctfassets.net/28643bqnqgzl/3Cm21kv0bD7el75ie3NXC2/99e1df7e03c0b7578710deed69df6b2b/rh6.png" alt="useInterval - React Hook"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#usecomponentdidmount-react-hook" class="anchor"&gt;
  &lt;/a&gt;
  useComponentDidMount - React Hook
&lt;/h2&gt;

&lt;p&gt;This hook is a small example of how to execute a callback right after a component is mounted. For the second argument, we simply use useEffect with an empty array, to execute the provided callback once as soon as the component is mounted.&lt;br&gt;
&lt;a href="//images.ctfassets.net/28643bqnqgzl/kHvi3aY1tfWFt0DMgSC66/8f749220a7221e9e22a85cd29fad5929/rh7.png" class="article-body-image-wrapper"&gt;&lt;img src="//images.ctfassets.net/28643bqnqgzl/kHvi3aY1tfWFt0DMgSC66/8f749220a7221e9e22a85cd29fad5929/rh7.png" alt="useComponentDidMount - React Hook"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#usecomponentwillunmount-react-hook" class="anchor"&gt;
  &lt;/a&gt;
  useComponentWillUnmount - React Hook
&lt;/h2&gt;

&lt;p&gt;useComponentWillUnmount is similar to the example above but will execute a callback as soon as the component is unmounted. So we use useEffect again with an empty array as the second argument to execute the provided callback right before the cleanup&lt;br&gt;
&lt;a href="//images.ctfassets.net/28643bqnqgzl/2Aju8NS7W90tAQpss4D9kd/e8d3982dbb01f0335e49d6059effced4/rh8.png" class="article-body-image-wrapper"&gt;&lt;img src="//images.ctfassets.net/28643bqnqgzl/2Aju8NS7W90tAQpss4D9kd/e8d3982dbb01f0335e49d6059effced4/rh8.png" alt="useComponentWillUnmount React Hook"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;These are some of my favorite examples of custom React hooks that you can use in your applications.&lt;/p&gt;

&lt;p&gt;If you are looking for inspiration and &lt;a href="https://thesmartcoder.dev/9-projects-you-can-do-to-become-a-front-end-master/"&gt;front end projects&lt;/a&gt; check out my site!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you like what I write and want to support me and my work, please follow me on &lt;a href="https://twitter.com/simonholdorf"&gt;Twitter&lt;/a&gt; to learn more about programming, making, writing &amp;amp; careers🥰&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
