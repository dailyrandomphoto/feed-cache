<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Animated and responsive SIGNUP page</title>
      <author>Neha Choudhary</author>
      <pubDate>Wed, 29 Dec 2021 11:20:13 +0000</pubDate>
      <link>https://dev.to/nehachoudhary19/animated-and-responsive-signup-page-4l39</link>
      <guid>https://dev.to/nehachoudhary19/animated-and-responsive-signup-page-4l39</guid>
      <description>&lt;p&gt;&lt;strong&gt;B&lt;/strong&gt;asic signup pages seems to be boring??&lt;/p&gt;

&lt;p&gt;For me tooüòï..&lt;/p&gt;

&lt;p&gt;So, that's why I designed a responsive, animated signup page with a multi-colored button using HTML and CSS.&lt;/p&gt;

&lt;p&gt;But this would require some basic knowledge of HTML and CSS. Here I'll explain the main concept along with blocks of the code snippets from which you could copy the code but for the complete code you would have to click the button at the end of the blog and download the code.&lt;br&gt;
So, let's get our hands dirty with code!!   &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8v2TlSIU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s77fcj8mf1mg4z17nm73.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8v2TlSIU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s77fcj8mf1mg4z17nm73.png" alt="Image description" width="880" height="427"&gt;&lt;/a&gt;&lt;br&gt;
[the animation couldn't be seen in an image, you could just click on the link at the end of the blog and refer to the animated signup page on GitHub pages]&lt;/p&gt;

&lt;p&gt;So basically, as you could see in the above image that at the very first we are supposed to design a box and let us name it box-form. So in that box-form we made two parts- left and the right.&lt;br&gt;
In the left part we are supposed to add a background image which will be added through CSS i.e.  the stylesheet and then the text is written on the top of it. So a different class named 'overlay' is to be created using HTML and then the text and the social media buttons are added to it.&lt;br&gt;
Let's have a look at this code snippet-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="box-form"&amp;gt;
    &amp;lt;div class="left"&amp;gt;
       &amp;lt;div class="overlay"&amp;gt;
      &amp;lt;h1&amp;gt;Hey techie!!&amp;lt;/h1&amp;gt;
      &amp;lt;p&amp;gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit.Curabitur et est sed felis aliquet sollicitudin&amp;lt;/p&amp;gt;
        &amp;lt;div class="buttn"&amp;gt;         
         &amp;lt;a href="#" class="facebook"&amp;gt;&amp;lt;i class="fa fa-facebook" aria-hidden="true"&amp;gt;&amp;lt;/i&amp;gt; Login with Facebook&amp;lt;/a&amp;gt;
         &amp;lt;a href="#"&amp;gt;&amp;lt;i class="fa fa-twitter" aria-hidden="true"&amp;gt;&amp;lt;/i&amp;gt; Login with  Twitter  &amp;lt;/a&amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the same way if the right part of the box-form is written then it would include the input types for email, username and password along with the checkbox of remember me and a multicolored button with signup option.&lt;br&gt;
So the code snippet for the same would be-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="box-form"&amp;gt;
  &amp;lt;div class="right"&amp;gt;
    &amp;lt;h5&amp;gt;SIGNUP&amp;lt;/h5&amp;gt;
    &amp;lt;p&amp;gt;Already have an account? &amp;lt;a href="#"&amp;gt;Login&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
     &amp;lt;div class="inputs"&amp;gt;
       &amp;lt;input type="email" placeholder="Enter your email address"&amp;gt;
       &amp;lt;input type="text" placeholder="Username"&amp;gt;
    &amp;lt;br&amp;gt;
       &amp;lt;input type="password" placeholder="Enter your password"&amp;gt;
       &amp;lt;input type="password" placeholder="Confirm your password"&amp;gt;
    &amp;lt;/div&amp;gt;
   &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;
     &amp;lt;div class="remember-me-"&amp;gt;
    &amp;lt;label&amp;gt;
       &amp;lt;input type="checkbox" name="item" checked/&amp;gt;
       &amp;lt;span class="text-checkbox"&amp;gt;Remember me&amp;lt;/span&amp;gt;
    &amp;lt;/label&amp;gt;
     &amp;lt;/div&amp;gt;
         &amp;lt;br&amp;gt;
      &amp;lt;button&amp;gt;SignUp&amp;lt;/button&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now moving towards the CSS part....&lt;br&gt;
Let's have a look how to make the background animated and for the rest of the code please download the code from the link at the end of the blog. So, here linear-gradient is used to set linear gradient at the background image and the background-position is adjusted accordingly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;body {
    background-image: linear-gradient(135deg, #8ac1ef, #ca6ce9, #8ac1ee, #e93356);
    animation: gradient 10s ease infinite;
    background-size: 400% 400%;
    font-family: "Open Sans", sans-serif;
    color: #333333;
}

@keyframes gradient{
    0%{
        background-position:0% 50%;
    }
    50%{
        background-position:100% 50%;
    }
    100%{
        background-position:0% 50%;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, this was all about an animated and responsive login web page. The code for the responsive part is present in the file to be downloaded and also in case of any discrepancy you can mention in the comment section. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/Nehachoudhary19/Animated-signup"&gt;&lt;strong&gt;DOWNLOAD CODE&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note: Click on the download code button , a GitHub repository would open and then download the code from the repository and if feel to change something then all the suggestions and improvements are welcomed!!&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Build Issues, Code Generation and Depth vs. Breadth First - Building DDTJ Day 8</title>
      <author>Shai Almog</author>
      <pubDate>Wed, 29 Dec 2021 11:12:55 +0000</pubDate>
      <link>https://dev.to/codenameone/build-issues-code-generation-and-depth-vs-breadth-first-building-ddtj-day-8-2242</link>
      <guid>https://dev.to/codenameone/build-issues-code-generation-and-depth-vs-breadth-first-building-ddtj-day-8-2242</guid>
      <description>&lt;p&gt;Yesterday &lt;a href="https://dev.to/codenameone/60x-performance-improvement-moving-on-fullstack-building-ddtj-day-7-2c92"&gt;I was making substantial progress&lt;/a&gt;, so naturally I spent most of today with my figurative wheels spinning in mud‚Ä¶&lt;/p&gt;

&lt;p&gt;I‚Äôm finally at the stage of generating the source code for a unit test from data. I hoped it would be a smooth experience, but I feared it wouldn‚Äôt be trivial. As I‚Äôm doing that, I‚Äôm running into a lot of edge cases and problematic behaviors in the code. Had I gone with a depth first approach and worked on getting the code working in Spring Boot, I might have missed a lot of these important fixes. I‚Äôm sure getting the code working in Spring Boot will expose a lot of other issues, but I think they will just be standard bugs, not bigger changes like the ones I‚Äôm doing right now.&lt;/p&gt;

&lt;p&gt;To be fair, I merged a minor issue yesterday. Mostly to improve code coverage. While the PR had over 80% coverage, the code rounded down to 79%. The solution was to add a small test that pushes the coverage further.&lt;/p&gt;

&lt;p&gt;Most of the issues I‚Äôm running into right now relate to data that I didn‚Äôt store or didn‚Äôt store in the right location. But I wasted a lot of time yesterday and today on some nonsense.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#unreachable-controller"&gt;
  &lt;/a&gt;
  Unreachable Controller
&lt;/h3&gt;

&lt;p&gt;I added a Spring Boot MVC controller and a Freemarker template. Things that I‚Äôve done multiple times in the past. Not something too difficult.&lt;/p&gt;

&lt;p&gt;Got a 404‚Ä¶&lt;/p&gt;

&lt;p&gt;Must have missed something in the configuration‚Ä¶ Doing that over again. Reviewing, Googling (&lt;a href="https://ecosia.org/"&gt;or is it Ecosiaing?&lt;/a&gt;), rinse repeat. &lt;/p&gt;

&lt;p&gt;Nothing comes up.&lt;/p&gt;

&lt;p&gt;I try narrowing down the problem. Renaming classes, adding dummy services just to see if a non-MVC call works (it doesn‚Äôt). &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution
&lt;/h3&gt;

&lt;p&gt;As I changed the version to 0.0.5, something must have broken in the build and its relation to the IDE. I still don‚Äôt know what it was. But a few well placed ‚Äúclean package‚Äù calls solved the issue.&lt;/p&gt;

&lt;p&gt;It took me way too long to try that which is pretty embarrassing. I guess my mind was elsewhere. Hopefully, this detour doesn‚Äôt set me too far off course to finish this by the end of the week.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code-generation"&gt;
  &lt;/a&gt;
  Code Generation
&lt;/h2&gt;

&lt;p&gt;Once I resolved this, the process of code generation became mostly a mechanical process of getting the data from the model and adapting it to source code. Unfortunately, a lot of the data is still missing, so that‚Äôs where I‚Äôm stuck at this moment. I hope I‚Äôll be able to get something decent by the end of the week.&lt;/p&gt;

&lt;p&gt;The Freemarker code is very easy to work with and so is Spring MVC. I already have a test case printing but not much more. No mocks and object initialization is proving to be very tricky.&lt;/p&gt;

&lt;p&gt;I still didn‚Äôt get into the whole ‚Äúexception‚Äù handling complexity or declaring checked exceptions. These aren‚Äôt too hard, I just want to keep the focus for now. Hopefully, they won‚Äôt be a major blocker in the future.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tomorrow"&gt;
  &lt;/a&gt;
  Tomorrow
&lt;/h2&gt;

&lt;p&gt;I kept this post brief so I can focus on work. Today and Tomorrow are crucial days that will determine whether I make it past the finish line. I think this might be close, so I want to put 100% on getting there.&lt;/p&gt;

&lt;p&gt;I have 3 more blog posts to do in this series. After I finish the 10th, I plan to do a summary/post mortem to see what worked and what didn‚Äôt.¬†&lt;/p&gt;

&lt;p&gt;If you want to keep up with the latest updates on this series and the many other things I work on, then &lt;a href="https://twitter.com/debugagent"&gt;follow me on twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>startup</category>
      <category>opensource</category>
      <category>testing</category>
      <category>programming</category>
    </item>
    <item>
      <title>How to create a styled custom Icon components in MUI v5?</title>
      <author>Hosein Pouyanmehr</author>
      <pubDate>Wed, 29 Dec 2021 11:10:56 +0000</pubDate>
      <link>https://dev.to/hajhosein/how-to-create-a-styled-custom-icon-components-in-mui-v5-4onc</link>
      <guid>https://dev.to/hajhosein/how-to-create-a-styled-custom-icon-components-in-mui-v5-4onc</guid>
      <description>&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#about"&gt;What is this post about?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#prerequisites"&gt;Prerequisites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#step-one"&gt;Step One: Imports&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#step-two"&gt;Step Two: Create a styled SvgIcon component&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#step-three"&gt;Step Three: Create the component&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#final-code"&gt;Final code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-is-this-post-about"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt;What is this post about?
&lt;/h2&gt;

&lt;p&gt;In this short tutorial, you'll learn to make your own MUI icon component which will behave as same as MUI icons. As you may know, icons provided in the &lt;a href="https://www.npmjs.com/package/@mui/icons-material"&gt;&lt;code&gt;@mui/icons-material&lt;/code&gt;&lt;/a&gt; package can easily understand MUI theming and, they can simply communicate with other MUI components. Thanks to the MUI &lt;code&gt;SvgIcon&lt;/code&gt; component you can easily create your icon component that looks like MUI icons.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt; Prerequisites
&lt;/h2&gt;

&lt;p&gt;I think you already have an environment perfectly set up, but I want to point this that having &lt;code&gt;@mui/icons-material&lt;/code&gt; isn't necessary. So as a minimum, you need a react app as well as &lt;code&gt;@mui/material&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#steps"&gt;
  &lt;/a&gt;
  Steps
&lt;/h2&gt;

&lt;p&gt;I will write both TypeScript and JavaScript approaches. So, for instance, if you write your code in TS you can skip JS parts or vice versa. Also, I'll use &lt;code&gt;@emotion&lt;/code&gt; as it's the default style library used in MUI v5.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-one-imports"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt; Step One: Imports
&lt;/h3&gt;

&lt;p&gt;Create a file with your desired name. I'm going to name it "Mopeim" and import React at the top.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#js"&gt;
  &lt;/a&gt;
  JS
&lt;/h4&gt;

&lt;p&gt;Then we need to import the &lt;code&gt;SvgIcon&lt;/code&gt; component and &lt;code&gt;styled&lt;/code&gt; utility from &lt;code&gt;@mui/matarial&lt;/code&gt;, So the code will be like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;SvgIcon&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;MuiSvgIcon&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@mui/material&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#ts"&gt;
  &lt;/a&gt;
  TS
&lt;/h4&gt;

&lt;p&gt;In TypeScript, we also need to import the &lt;code&gt;SvgIconProps&lt;/code&gt; type to create our new component properly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;SvgIcon&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;MuiSvgIcon&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;SvgIconProps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@mui/material&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The reason that I renamed &lt;code&gt;SvgIcon&lt;/code&gt; to &lt;code&gt;MuiSvgIcon&lt;/code&gt; is that in the next step &lt;strong&gt;we're going to create a new styled &lt;code&gt;SvgIcon&lt;/code&gt;&lt;/strong&gt; and we'll name that new component SvgIcon. You'll get it better in the next step.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-two-create-a-styled-raw-svgicon-endraw-component"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt; Step Two: Create a styled &lt;code&gt;SvgIcon&lt;/code&gt; component
&lt;/h3&gt;

&lt;p&gt;At this step, we'll create a &lt;code&gt;SvgIcon&lt;/code&gt; with our custom styles. Each path may need several CSS like &lt;code&gt;fill&lt;/code&gt; or &lt;code&gt;stroke&lt;/code&gt; etc. This &lt;code&gt;SvgIcon&lt;/code&gt; in HTML will become a &lt;code&gt;&amp;lt;svg&amp;gt;&amp;lt;/svg&amp;gt;&lt;/code&gt; tag with our styles.&lt;/p&gt;

&lt;p&gt;The general look of our component and the styled function will be like this.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#js"&gt;
  &lt;/a&gt;
  JS
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SvgIcon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)((&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#ts"&gt;
  &lt;/a&gt;
  TS
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SvgIcon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;PropsType&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In both TS and JS approaches, first, we call the &lt;code&gt;styled&lt;/code&gt; function and then pass a component to that. This component can be one of MUI components or even simple HTML tags like an &lt;code&gt;a&lt;/code&gt; or a &lt;code&gt;button&lt;/code&gt; etc. Here we want to create a &lt;code&gt;svg&lt;/code&gt; tag, and we want to make it in the MUI way. So we pass the &lt;code&gt;SvgIcon&lt;/code&gt; component as the first prop to the &lt;code&gt;styled&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;For options, you should pass an object containing all options you want. I'm not going to explain all the available styled options as you can read about them &lt;a href="https://mui.com/system/styled/#styled-component-options-styles-component"&gt;here&lt;/a&gt; in the MUI documents. Here, I use &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;shouldForwardProp&lt;/code&gt; options to set a name for our new SvgIcon Component and also shouldForwardProp to say which property should or shouldn't forward to the styles. You also can ignore these options as they're optional. MUI docs explain these two options like this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;options.shouldForwardProp&lt;/code&gt;  (&lt;em&gt;&lt;code&gt;(prop: string) =&amp;gt; bool&lt;/code&gt;&lt;/em&gt;  [optional]): Indicates whether the  &lt;code&gt;prop&lt;/code&gt;  should be forwarded to the  &lt;code&gt;Component&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;options.name&lt;/code&gt;  (&lt;em&gt;string&lt;/em&gt;  [optional]): The key used under  &lt;code&gt;theme.components&lt;/code&gt;  for specifying  &lt;code&gt;styleOverrides&lt;/code&gt;  and  &lt;code&gt;variants&lt;/code&gt;. Also used for generating the  &lt;code&gt;label&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is how my icon looks:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--szBXEWmt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i0f1bykywcjmw3cxixm9.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--szBXEWmt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i0f1bykywcjmw3cxixm9.jpg" alt="Mopeim Logo" width="880" height="880"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I want to name it "MopeimIcon" and I also want to &lt;strong&gt;avoid&lt;/strong&gt; that to have a fill property. So let's add this logic to our code.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#js"&gt;
  &lt;/a&gt;
  JS
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SvgIcon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;MuiSvgIcon&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="mi"&gt;5&lt;/span&gt;   &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;MopeimIcon&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="mi"&gt;6&lt;/span&gt;   &lt;span class="na"&gt;shouldForwardProp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;prop&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fill&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="p"&gt;})(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
&lt;span class="mi"&gt;8&lt;/span&gt;   &lt;span class="na"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="mi"&gt;9&lt;/span&gt;   &lt;span class="na"&gt;stroke&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;currentColor&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="mi"&gt;10&lt;/span&gt;  &lt;span class="na"&gt;strokeLinecap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;round&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="mi"&gt;11&lt;/span&gt;  &lt;span class="na"&gt;strokeLinejoin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;round&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="mi"&gt;12&lt;/span&gt;  &lt;span class="na"&gt;strokeWidth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2.25px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="mi"&gt;13&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#ts"&gt;
  &lt;/a&gt;
  TS
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SvgIcon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;MuiSvgIcon&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="mi"&gt;5&lt;/span&gt;   &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;MopeimIcon&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="mi"&gt;6&lt;/span&gt;   &lt;span class="na"&gt;shouldForwardProp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;prop&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fill&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;SvgIconProps&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
&lt;span class="mi"&gt;8&lt;/span&gt;   &lt;span class="na"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="mi"&gt;9&lt;/span&gt;   &lt;span class="na"&gt;stroke&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;currentColor&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="mi"&gt;10&lt;/span&gt;  &lt;span class="na"&gt;strokeLinecap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;round&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="mi"&gt;11&lt;/span&gt;  &lt;span class="na"&gt;strokeLinejoin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;round&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="mi"&gt;12&lt;/span&gt;  &lt;span class="na"&gt;strokeWidth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2.25px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="mi"&gt;13&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: On line 6, when we want to define some logic for the &lt;code&gt;shouldForwardProp&lt;/code&gt; we &lt;strong&gt;have to&lt;/strong&gt; wrap the style prop in quotes. So this is &lt;strong&gt;NOT&lt;/strong&gt; true:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="mi"&gt;6&lt;/span&gt;   &lt;span class="nx"&gt;shouldForwardProp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;prop&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;//Cannot find name 'fill'.&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you need to use some of the props in your styling, you can pass them like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;SvgIconProps&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;anotherProp&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
&lt;span class="mi"&gt;8&lt;/span&gt;   &lt;span class="na"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;palette&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;primary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="mi"&gt;9&lt;/span&gt;   &lt;span class="na"&gt;borderRadius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;borderRadius&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="mi"&gt;10&lt;/span&gt;  &lt;span class="na"&gt;anotherStyle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;anotherProp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Just make sure that the prop exists as a SvgIcon prop.&lt;/p&gt;

&lt;p&gt;We can also use the &lt;code&gt;defaultProps&lt;/code&gt; property on SvgIcon to set some defaults for our &lt;code&gt;svg&lt;/code&gt;. So:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="mi"&gt;14&lt;/span&gt;
&lt;span class="mi"&gt;15&lt;/span&gt; &lt;span class="nx"&gt;SvgIcon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defaultProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="mi"&gt;16&lt;/span&gt;  &lt;span class="na"&gt;viewBox&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0 0 24 24&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="mi"&gt;17&lt;/span&gt;  &lt;span class="na"&gt;focusable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;false&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="mi"&gt;18&lt;/span&gt;  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aria-hidden&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;true&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="mi"&gt;19&lt;/span&gt;  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In above props:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;"viewBox" means the points "seen" in this SVG drawing area. 4 values separated by white space or commas. (min x, min y, width, height)
Definition is from &lt;a href="https://www.w3schools.com/"&gt;w3schools&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Using "focusable" and setting it to "false" make it unfocusable which is pretty self-explanatory. By the way, It means won't get focused when you press the tab key on your keyboard.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Adding &lt;code&gt;aria-hidden="true"&lt;/code&gt; to an element removes that element and all of its children from the accessibility tree.
Read more about this attribute &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-hidden_attribute"&gt;here&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#step-three-create-the-component"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt; Step Three: Create the component
&lt;/h3&gt;

&lt;p&gt;The final step is to create our Icon component. We'll create a functional component and then we use the &lt;code&gt;SvgIcon&lt;/code&gt; that we've modified before, and a path. &lt;br&gt;
If you've designed your icon with tools such as Adobe Illustrator, export it as SVG and then extract the path and the styles from it. Otherwise, If you want to find the path of a free SVG icon, you can inspect it by your browser dev tools. My icon path is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;M15,19.16V15.07a4.27,4.27,0,0,0,6,0h0a4.27,4.27,0,0,0,0-6h0a4.27,4.27,0,0,0-6,0l-3,3-3,3a4.27,4.27,0,0,1-6,0h0a4.27,4.27,0,0,1,0-6h0A4.27,4.27,0,0,1,9,9
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#js"&gt;
  &lt;/a&gt;
  JS
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="mi"&gt;20&lt;/span&gt;
&lt;span class="mi"&gt;21&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Mopeim&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="mi"&gt;22&lt;/span&gt;  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="mi"&gt;23&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;SvgIcon&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="mi"&gt;24&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;M15,19.16V15.07a4.27,4.27,0,0,0,6,0h0a4.27,4.27,0,0,0,0-6h0a4.27,4.27,0,0,0-6,0l-3,3-3,3a4.27,4.27,0,0,1-6,0h0a4.27,4.27,0,0,1,0-6h0A4.27,4.27,0,0,1,9,9&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="mi"&gt;25&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/SvgIcon&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="mi"&gt;27&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="mi"&gt;28&lt;/span&gt;
&lt;span class="mi"&gt;29&lt;/span&gt; &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Mopeim&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="mi"&gt;30&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#ts"&gt;
  &lt;/a&gt;
  TS
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="mi"&gt;20&lt;/span&gt;
&lt;span class="mi"&gt;21&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Mopeim&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FunctionComponent&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;SvgIconProps&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="mi"&gt;22&lt;/span&gt;  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="mi"&gt;23&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;SvgIcon&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="mi"&gt;24&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;M15,19.16V15.07a4.27,4.27,0,0,0,6,0h0a4.27,4.27,0,0,0,0-6h0a4.27,4.27,0,0,0-6,0l-3,3-3,3a4.27,4.27,0,0,1-6,0h0a4.27,4.27,0,0,1,0-6h0A4.27,4.27,0,0,1,9,9&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="mi"&gt;25&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/SvgIcon&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="mi"&gt;27&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="mi"&gt;28&lt;/span&gt;
&lt;span class="mi"&gt;29&lt;/span&gt; &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Mopeim&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="mi"&gt;30&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#final-code"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt; Final Code
&lt;/h3&gt;

&lt;p&gt;The final code looks like this:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#js"&gt;
  &lt;/a&gt;
  JS
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;SvgIcon&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;MuiSvgIcon&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@mui/material&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SvgIcon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;MuiSvgIcon&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="mi"&gt;5&lt;/span&gt;   &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;MopeimIcon&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="mi"&gt;6&lt;/span&gt;   &lt;span class="na"&gt;shouldForwardProp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;prop&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fill&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="p"&gt;})(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
&lt;span class="mi"&gt;8&lt;/span&gt;   &lt;span class="na"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="mi"&gt;9&lt;/span&gt;   &lt;span class="na"&gt;stroke&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;currentColor&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="mi"&gt;10&lt;/span&gt;  &lt;span class="na"&gt;strokeLinecap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;round&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="mi"&gt;11&lt;/span&gt;  &lt;span class="na"&gt;strokeLinejoin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;round&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="mi"&gt;12&lt;/span&gt;  &lt;span class="na"&gt;strokeWidth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2.25px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="mi"&gt;13&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;
&lt;span class="mi"&gt;14&lt;/span&gt;
&lt;span class="mi"&gt;15&lt;/span&gt; &lt;span class="nx"&gt;SvgIcon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defaultProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="mi"&gt;16&lt;/span&gt;  &lt;span class="na"&gt;viewBox&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0 0 24 24&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="mi"&gt;17&lt;/span&gt;  &lt;span class="na"&gt;focusable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;false&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="mi"&gt;18&lt;/span&gt;  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aria-hidden&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;true&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="mi"&gt;19&lt;/span&gt;  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="mi"&gt;20&lt;/span&gt;
&lt;span class="mi"&gt;21&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Mopeim&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="mi"&gt;22&lt;/span&gt;  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="mi"&gt;23&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;SvgIcon&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="mi"&gt;24&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;M15,19.16V15.07a4.27,4.27,0,0,0,6,0h0a4.27,4.27,0,0,0,0-6h0a4.27,4.27,0,0,0-6,0l-3,3-3,3a4.27,4.27,0,0,1-6,0h0a4.27,4.27,0,0,1,0-6h0A4.27,4.27,0,0,1,9,9&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="mi"&gt;25&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/SvgIcon&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="mi"&gt;27&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="mi"&gt;28&lt;/span&gt;
&lt;span class="mi"&gt;29&lt;/span&gt; &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Mopeim&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="mi"&gt;30&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#ts"&gt;
  &lt;/a&gt;
  TS
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;SvgIcon&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;MuiSvgIcon&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;SvgIconProps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@mui/material&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SvgIcon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;MuiSvgIcon&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="mi"&gt;5&lt;/span&gt;   &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;MopeimIcon&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="mi"&gt;6&lt;/span&gt;   &lt;span class="na"&gt;shouldForwardProp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;prop&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fill&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;SvgIconProps&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
&lt;span class="mi"&gt;8&lt;/span&gt;   &lt;span class="na"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="mi"&gt;9&lt;/span&gt;   &lt;span class="na"&gt;stroke&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;currentColor&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="mi"&gt;10&lt;/span&gt;  &lt;span class="na"&gt;strokeLinecap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;round&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="mi"&gt;11&lt;/span&gt;  &lt;span class="na"&gt;strokeLinejoin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;round&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="mi"&gt;12&lt;/span&gt;  &lt;span class="na"&gt;strokeWidth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2.25px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="mi"&gt;13&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;
&lt;span class="mi"&gt;14&lt;/span&gt;
&lt;span class="mi"&gt;15&lt;/span&gt; &lt;span class="nx"&gt;SvgIcon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defaultProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="mi"&gt;16&lt;/span&gt;  &lt;span class="na"&gt;viewBox&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0 0 24 24&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="mi"&gt;17&lt;/span&gt;  &lt;span class="na"&gt;focusable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;false&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="mi"&gt;18&lt;/span&gt;  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aria-hidden&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;true&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="mi"&gt;19&lt;/span&gt;  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="mi"&gt;20&lt;/span&gt;
&lt;span class="mi"&gt;21&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Mopeim&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FunctionComponent&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;SvgIconProps&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="mi"&gt;22&lt;/span&gt;  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="mi"&gt;23&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;SvgIcon&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="mi"&gt;24&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;M15,19.16V15.07a4.27,4.27,0,0,0,6,0h0a4.27,4.27,0,0,0,0-6h0a4.27,4.27,0,0,0-6,0l-3,3-3,3a4.27,4.27,0,0,1-6,0h0a4.27,4.27,0,0,1,0-6h0A4.27,4.27,0,0,1,9,9&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="mi"&gt;25&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/SvgIcon&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="mi"&gt;27&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="mi"&gt;28&lt;/span&gt;
&lt;span class="mi"&gt;29&lt;/span&gt; &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Mopeim&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="mi"&gt;30&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>mui</category>
      <category>react</category>
      <category>typescript</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Tweet Hunter- The Ecosystem to Tweet &amp; Make Money.</title>
      <author>Ankur Tyagi</author>
      <pubDate>Wed, 29 Dec 2021 10:40:53 +0000</pubDate>
      <link>https://dev.to/tyaga001/tweet-hunter-the-ecosystem-to-tweet-make-money-567j</link>
      <guid>https://dev.to/tyaga001/tweet-hunter-the-ecosystem-to-tweet-make-money-567j</guid>
      <description>&lt;p&gt;This week, I got a chance to explore Tweet Hunter- a ‚Äúmillion tweet library‚Äù. And what I found was that 99% of people are trying to make money off Twitter the wrong way.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#and-its-costing-them-a-lot-of-money"&gt;
  &lt;/a&gt;
  And It's costing them a lot of money?
&lt;/h3&gt;

&lt;p&gt;A proper Twitter monetization machine requires 2 things: Traffic and offers. &lt;/p&gt;

&lt;p&gt;Traffic to make sure people see and offers to make sure people buy. Simple as that.&lt;/p&gt;

&lt;p&gt;Meaning Tweet Hunter doesn‚Äôt just give you eyes and dollars. &lt;br&gt;
It also gives you the option to pay absolutely nothing if you don‚Äôt get more of those within a week.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-tweet-hunter"&gt;
  &lt;/a&gt;
  What is Tweet Hunter?
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Your personal virtual Twitter assistant.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In simpler terms, With "Tweet Hunter" it's easy for anyone to grow a high-quality Twitter audience. &lt;/p&gt;

&lt;p&gt;Moreover, Tweet Hunter lets you build a Twitter audience that gets you users, subscribers, clients, and long-lasting relationships, respectively.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--22TDlU46--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640086641437/fwNUc8Wep.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--22TDlU46--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640086641437/fwNUc8Wep.jpeg" alt="7.JPG" width="880" height="403"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#here-are-all-the-reasons-why-im-interested"&gt;
  &lt;/a&gt;
  Here Are All The Reasons Why I'm Interested:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;I can look up any topic and get new ideas.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TPx6sc0l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640586158717/K6kAxvTvy.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TPx6sc0l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640586158717/K6kAxvTvy.jpeg" alt="8.JPG" width="622" height="231"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It helps me to inspire by formats being leveraged by others in my niche.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4cPvwKL6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640586213448/n_ud6E_eg.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4cPvwKL6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640586213448/n_ud6E_eg.jpeg" alt="9.JPG" width="620" height="453"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It helps me to create more consistent content on daily basis.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B0k2_rSm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640586256230/qzRQDh5jo.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B0k2_rSm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640586256230/qzRQDh5jo.jpeg" alt="10.JPG" width="609" height="385"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It helps me to tweet the right way with the right content &amp;amp; it saves a lot of my time.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_IdwlxbL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640586332691/kU0JzQ2Gg.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_IdwlxbL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640586332691/kU0JzQ2Gg.jpeg" alt="11.JPG" width="880" height="264"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-see-what-tweet-hunter-can-do-for-you-to-generate-tweets"&gt;
  &lt;/a&gt;
  Let's See What Tweet Hunter Can Do For You To Generate Tweets:
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Tweet Inspirations For You (AI engine select these for you based on your Twitter account.)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Search for any topic and find viral tweets to get inspired by.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AI-generated Tweets for you.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Your Tweet Variations&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;All your collections&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Excellent collections of tweets by staff for you. &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#tweet-inspirations-for-you"&gt;
  &lt;/a&gt;
  Tweet Inspirations For You
&lt;/h2&gt;

&lt;p&gt;Their AI engine generates the best tweets for you based on your Twitter account.&lt;br&gt;
Keeping your BIO &amp;amp; Old Feed into account. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#search-for-any-topic-amp-find-viral-tweets-to-get-inspired-by"&gt;
  &lt;/a&gt;
  Search For Any Topic &amp;amp; Find Viral Tweets To Get Inspired By.
&lt;/h2&gt;

&lt;p&gt;Search for any topic &amp;amp; see old viral tweets of big accounts to get inspiration: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Startup&lt;/li&gt;
&lt;li&gt;Marketing&lt;/li&gt;
&lt;li&gt;JavaScript&lt;/li&gt;
&lt;li&gt;SEO&lt;/li&gt;
&lt;li&gt;Open Source&lt;/li&gt;
&lt;li&gt;Web 3.0&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#lets-see-how-to-plan-your-feed-while-using-tweet-hunter"&gt;
  &lt;/a&gt;
  Let's See How To Plan Your Feed While Using Tweet Hunter:
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#feed-tab"&gt;
  &lt;/a&gt;
  Feed Tab
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dzDOePKO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639648814413/-tizL2jfR.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dzDOePKO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639648814413/-tizL2jfR.jpeg" alt="1.JPG" width="880" height="281"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#evergreen-tab"&gt;
  &lt;/a&gt;
  Evergreen Tab
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;The evergreen tweet tab lets you choose some of your best tweets that will be automatically retweeted based on your evergreen schedule.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--000FiliO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639649351354/fBbmuGEqL.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--000FiliO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639649351354/fBbmuGEqL.jpeg" alt="2.JPG" width="880" height="453"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-see-how-to-engage-with-people-in-tweet-hunter-dashboard"&gt;
  &lt;/a&gt;
  Let's See How To Engage With People In Tweet Hunter Dashboard:
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;This is the most loved feature I personally like about Magical Tweet Hunter. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#create-a-list-of-your-people-amp-engage-by-people"&gt;
  &lt;/a&gt;
  Create a list of your people &amp;amp; engage (by people):
&lt;/h3&gt;

&lt;p&gt;You can make a list of your favorite Twitter accounts &amp;amp; can engage here within the web app. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;No RTs, no replies. Add people to engage with or search for keywords to find tweets.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You get one checkbox to auto-like while replying. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JssZmiGN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639649809911/ultWA72Kw.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JssZmiGN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639649809911/ultWA72Kw.jpeg" alt="3.JPG" width="880" height="464"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#search-tweets-by-keywords-amp-engage-by-keywords"&gt;
  &lt;/a&gt;
  Search tweets by keywords &amp;amp; engage (by keywords):
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KqRSTWP3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639649975145/kPFyZPeww.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KqRSTWP3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639649975145/kPFyZPeww.jpeg" alt="4.JPG" width="880" height="455"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-see-how-tweet-hunter-helps-you-creating-epic-threads"&gt;
  &lt;/a&gt;
  Let's See How Tweet Hunter Helps You Creating Epic Threads:
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#thread-idea-generator"&gt;
  &lt;/a&gt;
  Thread Idea Generator
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Search a topic and it will generate thread ideas for you.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c7l1Cd_Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639650315330/pJUMqHC4w.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c7l1Cd_Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639650315330/pJUMqHC4w.jpeg" alt="5.JPG" width="880" height="483"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thread-hook-generator"&gt;
  &lt;/a&gt;
  Thread Hook Generator
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Search a topic and it will generate Thread Hooks for you. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8ECTIQsw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639650506229/stEk2VdbA.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8ECTIQsw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639650506229/stEk2VdbA.jpeg" alt="6.JPG" width="880" height="411"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Stuck on an idea of what to tweet? TweetHunter's got you covered. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#lets-see-how-to-get-help-to-grow-your-twitter-account-amp-best-out-of-resources-available"&gt;
  &lt;/a&gt;
  Let's See How To Get Help To Grow Your Twitter Account &amp;amp; Best Out Of Resources Available:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.notion.so/Engagement-51f7cda5f8224175abef24a404dfcaa1"&gt;Engagement&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.notion.so/Followers-962bb188c50c4dfe9a7566f83b99d584"&gt;Followers&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.notion.so/Sales-cf64c14f60a348ca9eff1fbc08dbcb49"&gt;Sales&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.notion.so/Email-Subs-31558a46904a4946a83e62dc6c5a7fa3"&gt;Email Subs&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.notion.so/Telegram-Channel-082e3260086b454fbc84f6b4c188918f"&gt;Telegram Channel&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#its-just-easier"&gt;
  &lt;/a&gt;
  It‚Äôs just easier.
&lt;/h2&gt;

&lt;p&gt;If you‚Äôd like to make more money and get more traffic to your page‚Ä¶&lt;br&gt;
‚Ä¶ Or pay nothing, click &lt;a href="http://tweethunter.io/?via=ankur"&gt;here&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;That was it for this blog.&lt;/p&gt;

&lt;p&gt;I hope you learned something new today. &lt;/p&gt;

&lt;p&gt;If you did, please like/share so that it reaches others as well.&lt;/p&gt;

&lt;p&gt;Connect with me on &lt;a href="https://twitter.com/TheAnkurTyagi"&gt;Twitter &lt;/a&gt; &lt;/p&gt;

&lt;p&gt;If you like this. &lt;/p&gt;

&lt;p&gt;I encourage you all to sign up for my newsletter.&lt;/p&gt;

&lt;p&gt;It's free. &lt;br&gt;
You can ask me your questions via email.&lt;/p&gt;

&lt;p&gt;Check out old editions here:  &lt;a href="https://www.getrevue.co/profile/AnkurTyagi"&gt;The 2-1-1 Developer Growth Newsletter by Ankur&lt;/a&gt;  &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>saas</category>
      <category>webdev</category>
      <category>productivity</category>
    </item>
    <item>
      <title>React JS create App. Part 2 of 10: Icon button</title>
      <author>101samovar</author>
      <pubDate>Wed, 29 Dec 2021 10:24:59 +0000</pubDate>
      <link>https://dev.to/101samovar/react-js-create-app-part-2-of-10-icon-button-3p7p</link>
      <guid>https://dev.to/101samovar/react-js-create-app-part-2-of-10-icon-button-3p7p</guid>
      <description>&lt;p&gt;In the previous video we created the layout of the Mind Map App.&lt;br&gt;
The layout is good.&lt;br&gt;
But it will be better with icons and icon buttons.&lt;/p&gt;

&lt;p&gt;Source code:&lt;br&gt;
&lt;a href="https://github.com/101samovar/react-mindmap.git"&gt;https://github.com/101samovar/react-mindmap.git&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our channel:&lt;br&gt;
&lt;a href="https://youtu.be/i2sOS85Y_JM"&gt;https://youtu.be/i2sOS85Y_JM&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>tutorial</category>
      <category>programming</category>
    </item>
    <item>
      <title>Just used my responsive skills to design this restaurant website</title>
      <author>Atul Prajapati</author>
      <pubDate>Wed, 29 Dec 2021 10:23:59 +0000</pubDate>
      <link>https://dev.to/atulcodex/just-used-my-responsive-skills-to-design-this-restaurant-website-h05</link>
      <guid>https://dev.to/atulcodex/just-used-my-responsive-skills-to-design-this-restaurant-website-h05</guid>
      <description>&lt;p&gt;In the last DEV post I have shared the my real experience of Kevin Powell's course "Responsive layout" and journey.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/atulcodex" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ErqHWdNW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--ZnbzrMba--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/164389/2f218b06-d5c9-4cae-b3b5-d582cfc110a0.jpg" alt="atulcodex"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/atulcodex/roller-coaster-journey-to-learn-css-responsive-layout-course-by-kavin-powell-7ln" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Roller coaster journey to learn CSS responsive layout course by Kavin Powell.&lt;/h2&gt;
      &lt;h3&gt;Atul Prajapati „Éª Dec 23 „Éª 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;To sharp my skills and knowledge to the next level web development project, I have made this restaurant website template.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bnAd4B0B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/05gcu7qgmrkq7lazmxfi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bnAd4B0B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/05gcu7qgmrkq7lazmxfi.png" alt="Restaurant website template" width="880" height="499"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/atulcodex"&gt;
        atulcodex
      &lt;/a&gt; / &lt;a href="https://github.com/atulcodex/Restaurant-website"&gt;
        Restaurant-website
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      This is a Modern, Clean and Professional restaurant website template. Prefect for restaurant, Fastfood, Bakery, Cafe, Pub, Bar, Catering, and any food business. This work is totally open-saurce and free to use.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Restaurant website template&lt;/h1&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/atulcodex/Restaurant-websiteimg/Restaurant-website-by-atulcodex.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v6dhwxCd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/atulcodex/Restaurant-websiteimg/Restaurant-website-by-atulcodex.png" alt="Restaurant website template"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is a Modern, Clean and Professional restaurant website template. Prefect for restaurant, Fastfood, Bakery, Cafe, Pub, Bar, Catering, and any food business. This work is totally open-saurce and free to use.&lt;/p&gt;
&lt;h3&gt;
Features&lt;/h3&gt;
&lt;ul class="contains-task-list"&gt;
&lt;li class="task-list-item"&gt;
 Single page restaurant website&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Opensource restaurant website&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Easy to change color&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Modern, unique Design&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Easy core CSS structure&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Smooth page transitions&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Super fast loading&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Valid HTML5 &amp;amp; CSS3&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Responsive 100%&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Easy Customization&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 No third party plugins&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;.
.
.
.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://restaurant-website-atulcodex.netlify.app/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/08475b45ac77dd012c7135c92310ab15ff8833b3e4b0dc137e6fb6dabad73b8e/68747470733a2f2f692e6962622e636f2f76774e386367572f6c6976652d64656d6f2e706e67" alt="Nihory - Portfolio site template live demo"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.
.
.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/atulcodex" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/c968055274b1e1804d6f49be3455388190da28566db8a51b28f727e16d767498/68747470733a2f2f692e6962622e636f2f3772523953344c2f6275792d6d652d612d636f666665652e706e67" alt="Atul - Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/atulcodex/Restaurant-website"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


&lt;p&gt;This is a Modern, Clean and Professional restaurant website template. Prefect for restaurant, Fastfood, Bakery, Cafe, Pub, Bar, Catering, and any food business. This work is totally open-saurce and free to use.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Single page restaurant website&lt;/li&gt;
&lt;li&gt;Opensource restaurant website&lt;/li&gt;
&lt;li&gt;Easy to change color&lt;/li&gt;
&lt;li&gt;Modern, unique Design&lt;/li&gt;
&lt;li&gt;Easy core CSS structure&lt;/li&gt;
&lt;li&gt;Smooth page transitions&lt;/li&gt;
&lt;li&gt;Super fast loading&lt;/li&gt;
&lt;li&gt;Valid HTML5 &amp;amp; CSS3&lt;/li&gt;
&lt;li&gt;Responsive 100%&lt;/li&gt;
&lt;li&gt;Easy Customization&lt;/li&gt;
&lt;li&gt;No third party plugins&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Please review this template and comment your thoughts.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>html</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Deploy ASP.NET Web Applications For Free !</title>
      <author>Aimen Zairi</author>
      <pubDate>Wed, 29 Dec 2021 10:18:02 +0000</pubDate>
      <link>https://dev.to/zairiaimendev/deploy-aspnet-web-applications-for-free--5bda</link>
      <guid>https://dev.to/zairiaimendev/deploy-aspnet-web-applications-for-free--5bda</guid>
      <description>&lt;p&gt;Hello everyone, I Hope you are all doing well.&lt;br&gt;
there are a lot of ways to host and deploy you .net web apps but not all of them are free or are as easy to use as the tool i will be discussing today.&lt;br&gt;
SmarterASP offers 2 months for free for you to test out your app or even if you want to go into production.&lt;br&gt;
If you are interested I've made the following video to show the process.&lt;br&gt;
In this video i also show a lot of extra configurations for stuff like image uploading and database setup that you might not find straight forward.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Hope you find it useful, don't forget to support me by subscribing :) (Hope we hit 100 Subs soon)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://www.SmarterASP.NET/index?r=ZairiAimen"&gt;Smarter ASP Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/JM5joh1n75U"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#extra-notes"&gt;
  &lt;/a&gt;
  Extra Notes
&lt;/h2&gt;

&lt;p&gt;will add notes everytime i find something important&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#net-roles-"&gt;
  &lt;/a&gt;
  .NET Roles :
&lt;/h3&gt;

&lt;p&gt;the easiest solution i found was to copy the SQL creation code from your local database if you already have roles and role accounts and execute the query in SmarterASP.&lt;/p&gt;

</description>
      <category>devops</category>
      <category>programming</category>
      <category>beginners</category>
      <category>dotnet</category>
    </item>
    <item>
      <title>What Does a Backend Engineer ACTUALLY Do?</title>
      <author>Maddy</author>
      <pubDate>Wed, 29 Dec 2021 10:01:22 +0000</pubDate>
      <link>https://dev.to/maddy/what-does-a-backend-engineer-actually-do-g6a</link>
      <guid>https://dev.to/maddy/what-does-a-backend-engineer-actually-do-g6a</guid>
      <description>&lt;p&gt;Originally published on my &lt;a href="https://techwithmaddy.com/what-does-a-backend-engineer-actually-do"&gt;blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When it comes to software engineering, it's challenging to imagine what a backend engineer does daily. As a backend engineer, I get this question often: "What do you do"? üòÅ&lt;/p&gt;

&lt;p&gt;This article will address this subject.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-does-a-backend-engineer-do"&gt;
  &lt;/a&gt;
  WHAT DOES A BACKEND ENGINEER DO?
&lt;/h4&gt;

&lt;p&gt;A backend engineer is the type of engineer responsible for creating the skeleton of a software application. &lt;/p&gt;

&lt;p&gt;Backend engineering is sometimes known as &lt;em&gt;server-side engineering&lt;/em&gt; because backend engineers deal with everything that happens on the server. &lt;/p&gt;

&lt;p&gt;Backend engineering is not client-facing. The user doesn't see or interact with a software application's backend.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-are-the-responsibilities-of-a-backend-engineer"&gt;
  &lt;/a&gt;
  WHAT ARE THE RESPONSIBILITIES OF A BACKEND ENGINEER?
&lt;/h4&gt;

&lt;p&gt;I've grouped the duties of a backend engineer into five primary responsibilities:&lt;/p&gt;

&lt;p&gt;‚úÖ Software logic.&lt;/p&gt;

&lt;p&gt;‚úÖ API design and development.&lt;/p&gt;

&lt;p&gt;‚úÖ Database management.&lt;/p&gt;

&lt;p&gt;‚úÖ Third-party services.&lt;/p&gt;

&lt;p&gt;‚úÖ Infrastructure operations.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#software-logic"&gt;
  &lt;/a&gt;
  SOFTWARE LOGIC
&lt;/h4&gt;

&lt;p&gt;Backend engineers deal with &lt;em&gt;business&lt;/em&gt; and &lt;em&gt;infrastructure&lt;/em&gt; logic.&lt;/p&gt;

&lt;p&gt;Business logic is the logic defined by the business.&lt;/p&gt;

&lt;p&gt;Whenever we have to create a new feature (or maybe even modify an already existing one), our responsibility is to ensure that the code follows and implements the component's business rules.&lt;/p&gt;

&lt;p&gt;Business logic usually involves &lt;em&gt;validation&lt;/em&gt; and &lt;em&gt;flow&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;To understand this further, I found this &lt;a href="https://softwareengineering.stackexchange.com/questions/234251/what-really-is-the-business-logic"&gt;example &lt;/a&gt; helpful and exciting to read:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In one application, the business folks will say this is a business rule, and so you write code to enforce this business logic (validation). Another application will say that if the number of items ordered is greater than the number of items in stock, to accept the order and then to place your own order for the difference plus 20%, and so you will write this business logic (flow).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Infrastructure logic instead is the logic that describes how the software application operates. Classes that contain infrastructure logic define what we need to make the code work. For example, if we get an XYZ HTTP response, then do XYZ.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#api-design-and-development"&gt;
  &lt;/a&gt;
  API DESIGN AND DEVELOPMENT
&lt;/h4&gt;

&lt;p&gt;API design and development are some of the core activities of a backend engineer. &lt;/p&gt;

&lt;p&gt;Backend engineers work in close contact with frontend engineers and UX designers. &lt;/p&gt;

&lt;p&gt;Backend engineers need to be thoughtful about the endpoints to expose, what endpoints will return, etc. &lt;/p&gt;

&lt;p&gt;API development means writing the code.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#database-management"&gt;
  &lt;/a&gt;
  DATABASE MANAGEMENT
&lt;/h4&gt;

&lt;p&gt;Backend engineers spend time curating and interacting with the database. &lt;/p&gt;

&lt;p&gt;Database management can involve deciding and creating the entities to store in the database, generating new tables or modifying the existing ones by adding or removing new columns, modifying the constraints, etc. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#third-party-services"&gt;
  &lt;/a&gt;
  THIRD PARTY SERVICES
&lt;/h4&gt;

&lt;p&gt;A software application has many moving pieces. It's not just a language with a framework. &lt;/p&gt;

&lt;p&gt;Nowadays, software applications are connected to third party services such as Amazon Web Services, Stripe, Google Pay, etc. &lt;/p&gt;

&lt;p&gt;Backend engineers interact with those services and also embed them in software applications.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#infrastructure-operations"&gt;
  &lt;/a&gt;
  INFRASTRUCTURE OPERATIONS
&lt;/h4&gt;

&lt;p&gt;Backend engineers also deal with infrastructure work. &lt;/p&gt;

&lt;p&gt;They are responsible for the performance, optimization and security of an organization's software application.&lt;/p&gt;

&lt;p&gt;Infrastructure work can involve dealing with monitoring/alerting services to track the performance of an application. An example of a monitoring service is  &lt;a href="https://newrelic.com/"&gt;New Relic&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-skills-do-you-need-to-become-a-backend-engineer"&gt;
  &lt;/a&gt;
  What skills do you need to become a backend engineer?
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Server-side languages: Java, PHP, JavaScript, Python, etc.&lt;/li&gt;
&lt;li&gt;Backend frameworks: Spring, Django, Flask, etc.&lt;/li&gt;
&lt;li&gt;Databases: MySQL, PostgreSQL, etc.&lt;/li&gt;
&lt;li&gt;Version Control: Git, BitBucket, etc.&lt;/li&gt;
&lt;li&gt;Web services: REST and SOAP.&lt;/li&gt;
&lt;li&gt;Cloud computing (Amazon Web Services, Google Cloud Platform, Azure).&lt;/li&gt;
&lt;li&gt;An awareness around security, performance, scalability and maintainability.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hope you've now understood what a backend engineer does. It is more abstract than frontend engineering but essential to ensure the smooth running of a software application.&lt;/p&gt;

&lt;p&gt;Are you a backend engineer? Do you agree with the five points described above? Let me know in the comments.&lt;/p&gt;

&lt;p&gt;Until next time! üëãüèæ&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>career</category>
    </item>
    <item>
      <title>Drawing app that records your actions</title>
      <author>Sebastian</author>
      <pubDate>Wed, 29 Dec 2021 09:49:40 +0000</pubDate>
      <link>https://dev.to/sebcodestheweb/drawing-app-that-records-your-actions-62p</link>
      <guid>https://dev.to/sebcodestheweb/drawing-app-that-records-your-actions-62p</guid>
      <description>&lt;h2&gt;
  &lt;a href="#drawing-app-that-records-your-actions"&gt;
  &lt;/a&gt;
  Drawing app that records your actions
&lt;/h2&gt;

&lt;p&gt;Checkout the deployed project here: &lt;a href="https://drawingplayback.netlify.app/"&gt;https://drawingplayback.netlify.app/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hello, and welcome to my blog! üòä&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-this"&gt;
  &lt;/a&gt;
  --What is this?--
&lt;/h2&gt;

&lt;p&gt;This is a normal pixel art drawing board. But wait is it!?&lt;/p&gt;

&lt;p&gt;No, that would be kinda boring, so I added a feature where you can record your actions and then playback those actions. To do this.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Press Record&lt;/li&gt;
&lt;li&gt;Draw stuff&lt;/li&gt;
&lt;li&gt;Stop Recording&lt;/li&gt;
&lt;li&gt;Click on Play&lt;/li&gt;
&lt;li&gt;You can draw while your previous drawing is playing back&lt;/li&gt;
&lt;li&gt;Click exit play&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you were to have some problems, just reload the page. Also it only properly works on a computer, it won't display correctly on a phone.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-it-works"&gt;
  &lt;/a&gt;
  --How it works--
&lt;/h2&gt;

&lt;p&gt;The way the recording works is by using an array of objects, keeping track of all the changes when you change the color of a square, and when the change occurred in milliseconds after you pressed record. &lt;/p&gt;

&lt;p&gt;It looks something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;changes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pixel-53&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;backgroundColor&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;red&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3200&lt;/span&gt; &lt;span class="c1"&gt;//(ms)&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;

&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pixel-323&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;backgroundColor&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;green&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4500&lt;/span&gt; &lt;span class="c1"&gt;//(ms)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It then plays back those changes. And thus, you can live interact with the drawing board, whilst your recording is playing back!&lt;/p&gt;

&lt;p&gt;You can chain recordings together to create multiple recordings playing back at the same time.&lt;/p&gt;

&lt;p&gt;About the drawing board itself, it uses css grid to create 3000 squares. When the user is holding the mouse down it starts to draw the selected color (which you can choose by clicking on the black sqaure in the right bottom). If you want to erase, you can click on eraser, and it will delete all of the squares you've drawn when you hover over them.&lt;/p&gt;

&lt;p&gt;You can view the code on github: &lt;a href="https://github.com/SebCodesTheWeb/drawingplayback"&gt;https://github.com/SebCodesTheWeb/drawingplayback&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#about-me"&gt;
  &lt;/a&gt;
  --About me--
&lt;/h2&gt;

&lt;p&gt;Hello! My name is Sebastian, and I'm a high-school student from Sweden. I have dabbled with some front-end development for the past few months. And since Christmas brake finally arrived, I've decided to start a challenge for myself! I'm going to code for the coming 20 days.&lt;/p&gt;

&lt;p&gt;I'm following the front-end career path at Scrimba and I'm currently at module 8 (Flexbox, Grid and Fetch)&lt;/p&gt;

&lt;p&gt;By the end of the 20 days I'm hoping to have finished the front-end career path and have started with some backend Node.js development. I will be documenting my progress for the coming days, and filming myself on my Youtube-channel, so feel free to follow along my journey and learn with me!&lt;/p&gt;

&lt;p&gt;--Social Media--&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Youtube: &lt;a href="http://www.youtube.com/channel/UCikWIcChAOSwoc2qpbZ6iIA"&gt;www.youtube.com/channel/UCikWIcChAOSwoc2qpbZ6iIA&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Blog: &lt;a href="https://sebcodestheweb.hashnode.dev/"&gt;https://sebcodestheweb.hashnode.dev/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Github: &lt;a href="https://github.com/SebCodesTheWeb"&gt;https://github.com/SebCodesTheWeb&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Peace.&lt;/p&gt;

</description>
      <category>css</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>html</category>
    </item>
    <item>
      <title>Kotlin short recipes: Generating a chessboard for a console game</title>
      <author>Vic Sh√≥stak</author>
      <pubDate>Wed, 29 Dec 2021 09:35:54 +0000</pubDate>
      <link>https://dev.to/koddr/kotlin-short-recipes-generating-a-chessboard-for-a-console-game-3a98</link>
      <guid>https://dev.to/koddr/kotlin-short-recipes-generating-a-chessboard-for-a-console-game-3a98</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Hello, DEV friends! üëã&lt;/p&gt;

&lt;p&gt;This series of a really short (&lt;em&gt;but useful&lt;/em&gt;) articles will aim at a general demonstration of how the &lt;a href="https://kotlinlang.org/docs/getting-started.html"&gt;Kotlin&lt;/a&gt; language can elegantly solve many of the (&lt;em&gt;non-&lt;/em&gt;)trivial problems.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;üî• Disclaimer: The purpose of this article is to show the essence of the solution, not to dive into the subject in detail. For a deeper dive, links to the Kotlin documentation pages will be left.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Yes, let's do it! üëá&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  üìù Table of contents
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#the-result-of-our-efforts"&gt;The result of our efforts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#project-structure"&gt;Project structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#create-the-ui-package"&gt;Create the UI package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#create-the-entry-point"&gt;Create the entry point&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#learn-kotlin"&gt;Learn Kotlin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-result-of-our-efforts"&gt;
  &lt;/a&gt;
  The result of our efforts
&lt;/h2&gt;

&lt;p&gt;Let's go backwards. This will help you better understand what we will be trying to get out of this. &lt;/p&gt;

&lt;p&gt;I chose a game of chess to show you how to work with repetitive elements and draw a console UI for your projects (or even games). This is what the result of our program will look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;Let's play Chess!
+---+---+---+---+---+---+---+---+
|   |   |   |   |   |   |   |   | 8
+---+---+---+---+---+---+---+---+
|   |   |   |   |   |   |   |   | 7
+---+---+---+---+---+---+---+---+
|   |   |   |   |   |   |   |   | 6
+---+---+---+---+---+---+---+---+
|   |   |   |   |   |   |   |   | 5
+---+---+---+---+---+---+---+---+
|   |   |   |   |   |   |   |   | 4
+---+---+---+---+---+---+---+---+
|   |   |   |   |   |   |   |   | 3
+---+---+---+---+---+---+---+---+
|   |   |   |   |   |   |   |   | 2
+---+---+---+---+---+---+---+---+
|   |   |   |   |   |   |   |   | 1
+---+---+---+---+---+---+---+---+
  a   b   c   d   e   f   g   h
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you may notice, the numbers are on the right, not on the left, as many people have used to. This is because it is much easier to position elements in a line-by-line printout. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;‚òùÔ∏è If you don't like it that much, you can always change just one line of code (&lt;em&gt;which I'll show below&lt;/em&gt;). That will be your homework! That's it, yeah.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#toc"&gt;‚Üë Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#project-structure"&gt;
  &lt;/a&gt;
  Project structure
&lt;/h2&gt;

&lt;p&gt;The structure of the project (game) will be as Kotlin &lt;a href="https://kotlinlang.org/docs/idioms.html"&gt;idiomatic&lt;/a&gt; as possible. &lt;/p&gt;

&lt;p&gt;As always, the entry point will be in &lt;code&gt;Main.kt&lt;/code&gt;. All UI elements and the drawing class itself in the &lt;code&gt;ui&lt;/code&gt; package:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qE9yl3sX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aibm4u2ng3bz484z8sfy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qE9yl3sX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aibm4u2ng3bz484z8sfy.png" alt="project structure" width="664" height="277"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="#toc"&gt;‚Üë Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-the-ui-package"&gt;
  &lt;/a&gt;
  Create the UI package
&lt;/h2&gt;

&lt;p&gt;To improve reusability, let's immediately put some UI elements into the Kotlin's built-in &lt;a href="https://kotlinlang.org/docs/enum-classes.html"&gt;enum class&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ./src/main/kotlin/ui/Element.kt&lt;/span&gt;

&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;ui&lt;/span&gt;

&lt;span class="k"&gt;enum&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;view&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;EMPTY_CELL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;" "&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nc"&gt;DIVIDER&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"+---+---+---+---+---+---+---+---+"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nc"&gt;ALPHABETICAL_INDEXES&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"a   b   c   d   e   f   g   h"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Okay, move on to the rendering engine itself. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;üòâ By the way, I'll use a wonderful Kotlin &lt;a href="https://kotlinlang.org/docs/data-classes.html"&gt;data classes&lt;/a&gt; for it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, let's create an array-structure with the given number of rows and cells and display the entire assembled UI via &lt;code&gt;println()&lt;/code&gt; in our &lt;code&gt;draw()&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;Sounds like a plan, let's do it! üëá&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ./src/main/kotlin/ui/Board.kt&lt;/span&gt;

&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;ui&lt;/span&gt;

&lt;span class="kd"&gt;data class&lt;/span&gt; &lt;span class="nc"&gt;Board&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Array for building the board:&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;board&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nc"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nc"&gt;Element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;EMPTY_CELL&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// Function for forming and drawing the board with&lt;/span&gt;
    &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;draw&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// 1Ô∏è‚É£&lt;/span&gt;
        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;boardAsString&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;mapIndexed&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;cells&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;joinToString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;" | "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="s"&gt;"| $cells | ${index + 1}\n${Element.DIVIDER}"&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// print game's title&lt;/span&gt;
        &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;DIVIDER&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// print starting divider&lt;/span&gt;

        &lt;span class="c1"&gt;// 2Ô∏è‚É£&lt;/span&gt;
        &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;boardAsString&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;reversed&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;joinToString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"\n"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

        &lt;span class="c1"&gt;// print ending string with left padding&lt;/span&gt;
        &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"  ${Element.ALPHABETICAL_INDEXES}"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;1Ô∏è‚É£ : To simplify, we will expand our array with the function &lt;a href="https://kotlinlang.org/docs/collection-transformations.html#map"&gt;mapIndexed()&lt;/a&gt;, where each element will be a string with an already prepared UI.&lt;/p&gt;

&lt;p&gt;2Ô∏è‚É£ : To display line numbering reverse, we use Kotlin's built-in &lt;a href="https://kotlinlang.org/docs/collection-ordering.html#reverse-order"&gt;reversed()&lt;/a&gt; function. And then just output the result using the &lt;a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.sequences/join-to-string.html"&gt;joinToString()&lt;/a&gt; function, which specifies the string translation (&lt;code&gt;\n&lt;/code&gt;), as an element separator.&lt;/p&gt;

&lt;p&gt;&lt;a href="#toc"&gt;‚Üë Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-the-entry-point"&gt;
  &lt;/a&gt;
  Create the entry point
&lt;/h2&gt;

&lt;p&gt;And, finally, let's create an entry point of our console game (&lt;code&gt;Main.kt&lt;/code&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ./src/main/kotlin/Main.kt&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;ui.Board&lt;/span&gt;

&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;board&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Board&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Let's play Chess!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;draw&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;üí° You can give your playing field any name you want. Just add it to the primary constructor of the &lt;code&gt;Board&lt;/code&gt; data class.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Run our program (Shift + Ctrl + R) and üí• BOOM üí• everything works the way we wanted it to:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y6qo6-zM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/quf5uhy4u022hcxr9ezc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y6qo6-zM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/quf5uhy4u022hcxr9ezc.png" alt="result" width="880" height="475"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="#toc"&gt;‚Üë Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#learn-kotlin"&gt;
  &lt;/a&gt;
  Learn Kotlin
&lt;/h2&gt;

&lt;p&gt;Do you want to learn Kotlin? üë©‚Äçüéì üë®‚Äçüéì&lt;/p&gt;

&lt;p&gt;Then come to &lt;a href="https://hyperskill.org/join/9e07b927f"&gt;JetBrains Academy&lt;/a&gt;, where there is a free basic course in this language for free! There you will find both theoretical part and many practical tasks of any level of complexity.&lt;/p&gt;

&lt;p&gt;&lt;a href="#toc"&gt;‚Üë Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#photos-and-videos-by"&gt;
  &lt;/a&gt;
  Photos and videos by
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Kotlin mascot authors &lt;a href="https://kotlinlang.org/docs/kotlin-mascot.html"&gt;https://kotlinlang.org/docs/kotlin-mascot.html&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Vic Sh√≥stak &lt;a href="https://shostak.dev"&gt;https://shostak.dev&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ps"&gt;
  &lt;/a&gt;
  P.S.
&lt;/h2&gt;

&lt;p&gt;If you want more articles like this on this blog, then post a comment below and subscribe to me. Thanks! üòò&lt;/p&gt;

&lt;p&gt;And, of course, you can support me by donating at &lt;a href="https://liberapay.com/koddr/donate"&gt;LiberaPay&lt;/a&gt;. &lt;em&gt;Each donation will be used to write new articles and develop non-profit open-source projects for the community.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://liberapay.com/koddr/donate"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qrXDZTNF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zq8442cqyjq2i1jdeay8.png" alt="Support author at LiberaPay" width="424" height="104"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>kotlin</category>
      <category>gamedev</category>
      <category>showdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Striver's SDE Sheet Journey - #8 Merge Overlapping Subintervals</title>
      <author>sachin26</author>
      <pubDate>Wed, 29 Dec 2021 09:14:24 +0000</pubDate>
      <link>https://dev.to/sachin26/strivers-sde-sheet-journey-8-merge-overlapping-subintervals-4jff</link>
      <guid>https://dev.to/sachin26/strivers-sde-sheet-journey-8-merge-overlapping-subintervals-4jff</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;u&gt;Problem Statement&lt;/u&gt; :-&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Given an array of intervals where &lt;code&gt;intervals[i] = [starti, endi]&lt;/code&gt;, merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Input: intervals=[[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Explanation :&lt;/strong&gt; &lt;em&gt;Since intervals [1,3] and [2,6] are overlapping we can merge them to form [1,6]&lt;br&gt;
 intervals.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;So, in this problem, we need to merge those intervals which are overlapping, which means intervals that start point lies between the start &amp;amp; endpoint of another interval.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#solution-1"&gt;
  &lt;/a&gt;
  &lt;u&gt;Solution 1&lt;/u&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;step-1&lt;/strong&gt; first, we need to &lt;strong&gt;sort&lt;/strong&gt; the &lt;code&gt;intervals&lt;/code&gt; on the basis of their starting point. by doing this we can easily merge overlapping adjacent intervals.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;unsorted intervals&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wLFMUeZl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y7ahbqnqqn5rplzzmmq7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wLFMUeZl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y7ahbqnqqn5rplzzmmq7.png" alt="dsa" width="300" height="150"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;sorted intervals&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3x74NnGF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iig6aamvyjncml77sgcm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3x74NnGF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iig6aamvyjncml77sgcm.png" alt="dsa" width="300" height="150"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;step-2&lt;/strong&gt; take the first interval and compare its &lt;code&gt;end&lt;/code&gt; with the next interval &lt;code&gt;start&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;if they overlap, update the &lt;code&gt;end&lt;/code&gt; of the first interval with the max end of overlapping intervals.&lt;/p&gt;

&lt;p&gt;if they do not overlap, move to the next interval.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;See below the java version of this approach.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Java&lt;br&gt;
&lt;/p&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[][]&lt;/span&gt; &lt;span class="nf"&gt;merge&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[][]&lt;/span&gt; &lt;span class="n"&gt;intervals&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

        &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;validIntervals&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;();&lt;/span&gt;

        &lt;span class="c1"&gt;// sort the array by thier starting point&lt;/span&gt;
        &lt;span class="nc"&gt;Arrays&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sort&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;intervals&lt;/span&gt;&lt;span class="o"&gt;,(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;)-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;compare&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;],&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]));&lt;/span&gt;

        &lt;span class="c1"&gt;// store first interval as valid&lt;/span&gt;
        &lt;span class="n"&gt;validIntervals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;intervals&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="o"&gt;]);&lt;/span&gt;


        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;intervals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++){&lt;/span&gt;
            &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;interval&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;intervals&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
            &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;validInterval&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;validIntervals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;validIntervals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="o"&gt;()-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

            &lt;span class="c1"&gt;// if intervals overlapping,then marge&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;validInterval&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;interval&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="o"&gt;]){&lt;/span&gt;
               &lt;span class="n"&gt;validInterval&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;max&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;interval&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;],&lt;/span&gt;&lt;span class="n"&gt;validInterval&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;]);&lt;/span&gt; 
            &lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;validIntervals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;interval&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;validIntervals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toArray&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;validIntervals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="o"&gt;()-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;][]);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thank you for reading this blog. if you find something wrongs, let me know in the comment section.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>programming</category>
      <category>dsa</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Anayo Debugging 1: java.lang.NoClassDefFoundError: &lt;clinit&gt; failed for class com.facebook.flipper.android.EventBase</title>
      <author>Anayo Oleru</author>
      <pubDate>Wed, 29 Dec 2021 09:06:11 +0000</pubDate>
      <link>https://dev.to/anayooleru/anayo-debugging-1-javalangnoclassdeffounderror-failed-for-class-comfacebookflipperandroideventbase-3pm5</link>
      <guid>https://dev.to/anayooleru/anayo-debugging-1-javalangnoclassdeffounderror-failed-for-class-comfacebookflipperandroideventbase-3pm5</guid>
      <description>&lt;h1&gt;
  &lt;a href="#bug"&gt;
  &lt;/a&gt;
  Bug
&lt;/h1&gt;

&lt;p&gt;Generating an Android build package(APK)from Android Studio builds successfully. But running the generated APK on a real device or device connected to Android Studio Crashes on launch and returns the following errors.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;getWifiLinkLayerStats_1_3_Internal(l.973) failed {.code = ERROR_NOT_SUPPORTED, .description = }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
/? E/studio.deploy: Could not get package user id: run-as: unknown package: com....
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
/? E/studio.deploy: Could not find apks for this package: com....
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
/? E/Finsky: [2] VerifyPerSourceInstallationConsentInstallTask.d(2): Package name null is not an installed package
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
/? E/installd: Couldn't opendir /data/app/vmdl1184715882.tmp: No such file or directory
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
/? E/installd: Failed to delete /data/app/vmdl1184715882.tmp: No such file or directory
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
/? E/ssioncontrolle: Not starting debugger since process cannot load the jdwp agent.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
java.lang.NoClassDefFoundError: &amp;lt;clinit&amp;gt; failed for class com.facebook.flipper.android.EventBase; see exception in other thread
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I read through all, trying to understand each of them. But what stood out from these errors, and that has some sort of clarity is the last one:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;java.lang.NoClassDefFoundError: &amp;lt;clinit&amp;gt; failed for class com.facebook.flipper.android.EventBase; see exception in other thread
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I was a bit skeptical, because it's getting really difficult to justify Flipper, a debug tool shouldn't crash and block the development process.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-i-solved-it"&gt;
  &lt;/a&gt;
  How I solved it
&lt;/h1&gt;

&lt;p&gt;After several trial and error, I was able to arrive at a solution that worked. I had to re-think, this particular error happens when after I try running the generated APK and not when I was generating a build. And I looked at how the Android build process works, the compiler converts the source code into DEX(whatever the name is) files, which include byte code that runs on android devices. So this would mean that while compiling, there was possibly a mix of old and new source code(which is possible since there is no such thing as a perfect compiler), or if there isn't no issue, then there must be something wrong with the compiled files. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;What is the best way to resolve something like this? As any other way, deleting the build and starting afresh as a new build.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is what I did, and it worked.&lt;/p&gt;

&lt;p&gt;Here is what I did, the steps I took:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Deleted android build file, you can find this file in: 
android&amp;gt;app inside app delete build folder&lt;/li&gt;
&lt;li&gt;Then I cleaned the gradlew:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd android &amp;amp;&amp;amp;./gradlew clean
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Next I rebuilt the application again&lt;/li&gt;
&lt;li&gt;Then I ran the APK&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Voila! It solved all the above issues. I hope this will help you and save you time, if you face similar error or the same error.&lt;/p&gt;

&lt;p&gt;If it helps you, like this post.&lt;/p&gt;




&lt;p&gt;My name is &lt;strong&gt;Anayo Oleru&lt;/strong&gt;, I specialise in Backend Development(NodeJS &amp;amp; ExpressJS), but I am experienced with Web frontend(ReactJS) and mobile(React-native). And I am open to offers in these fields.&lt;/p&gt;

&lt;p&gt;You can follow me on Twitter at &lt;a href="https://twitter.com/AnayoOleru"&gt;@AnayoOleru&lt;/a&gt; or send an email to: &lt;a href="mailto:anayo_oleru@outlook.com"&gt;anayo_oleru@outlook.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cheers and take care.&lt;/p&gt;

</description>
      <category>reactnative</category>
      <category>androidstudio</category>
      <category>flipper</category>
      <category>unknownpackage</category>
    </item>
  </channel>
</rss>
