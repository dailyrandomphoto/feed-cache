<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>SecYourIT</title>
      <author>Shubham Palriwala</author>
      <pubDate>Tue, 07 Dec 2021 19:10:34 +0000</pubDate>
      <link>https://dev.to/shubhampalriwala/secyourit-3pd7</link>
      <guid>https://dev.to/shubhampalriwala/secyourit-3pd7</guid>
      <description>&lt;h3&gt;
  &lt;a href="#inspiration"&gt;
  &lt;/a&gt;
  Inspiration
&lt;/h3&gt;

&lt;p&gt;Being an LFX Mentee at Kyverno this quarter, I was looking after and enchancing their Security Processes and their CI mechanisms. That is when I was exposed to the world of DevSecOps. I remember copying down the same actions multiple times. Fast forward to a month and here I am in this Github Action x DEV Hackathon 2021 where I am solving this problem so that nobody faces this again.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#my-workflow"&gt;
  &lt;/a&gt;
  My Workflow
&lt;/h3&gt;

&lt;p&gt;I introduce y'all to SecYourIT (read: sec-your-it-e), a 5-in-one DevSecOps reusable GitHub workflow that takes care of your project's security in the CI itself thanks to Github Actions. You can customise it based on the language of your project as it supports more than 20 languages.&lt;br&gt;
It handles the following components of your project:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sensitive Token Exposure [Check for Tokens or Keys being pushed]&lt;/li&gt;
&lt;li&gt;Commit Authenticity Verification [Verify Commits]&lt;/li&gt;
&lt;li&gt;Dependency Scanning [Scan for vulnerabilities in Dependencies]&lt;/li&gt;
&lt;li&gt;SCA [Software Composition Analysis],&lt;/li&gt;
&lt;li&gt;SAST [Static Application Security Testing]&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Check out &lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ShubhamPalriwala"&gt;
        ShubhamPalriwala
      &lt;/a&gt; / &lt;a href="https://github.com/ShubhamPalriwala/secyourit"&gt;
        secyourit
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Time to get your project some action, security action
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/ShubhamPalriwala/secyourit./banner.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4jnbtKCN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/ShubhamPalriwala/secyourit./banner.png" alt="SecYourIT"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SecYourIT&lt;/strong&gt;:  &lt;em&gt;Secure your IT services seamlessly with this workflow&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Run SecYourIt in any of your application. Let it be a CLI, a Web-App, an App, any software, SecYourIT is there for you.&lt;/p&gt;
&lt;h2&gt;
Usage&lt;/h2&gt;
&lt;p&gt;You can trigger this workflow as simple as&lt;/p&gt;
&lt;div class="highlight highlight-source-yaml position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-ent"&gt;jobs&lt;/span&gt;:
    &lt;span class="pl-ent"&gt;secyourit&lt;/span&gt;:
        &lt;span class="pl-ent"&gt;uses&lt;/span&gt;: &lt;span class="pl-s"&gt;shubhampalriwala/secyourit/.github/workflows/secryourit.yaml@master&lt;/span&gt;
        &lt;span class="pl-ent"&gt;with&lt;/span&gt;:
            &lt;span class="pl-ent"&gt;signerID&lt;/span&gt;: 
            &lt;span class="pl-ent"&gt;org&lt;/span&gt;: 
            &lt;span class="pl-ent"&gt;path&lt;/span&gt;:
            &lt;span class="pl-ent"&gt;language&lt;/span&gt;:
        &lt;span class="pl-ent"&gt;secrets&lt;/span&gt;:
            &lt;span class="pl-ent"&gt;SNYK_API_TOKEN&lt;/span&gt;: &lt;span class="pl-s"&gt;${{secrets.SNYK_API_TOKEN}}&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
Parameters:&lt;/h2&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Use&lt;/th&gt;
&lt;th&gt;Required&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;SignerID&lt;/td&gt;
&lt;td&gt;Input&lt;/td&gt;
&lt;td&gt;Notary Commit Verification&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;List of SignerID(s) (separated by space) to authenticate against. A SignerID is the signer's public address (represented as a 40 hex characters long string prefixed with 0x)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Org&lt;/td&gt;
&lt;td&gt;Input&lt;/td&gt;
&lt;td&gt;Notary Commit Verification&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;Organization's ID to authenticate against. Note that org takes precedence over signerID&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Path&lt;/td&gt;
&lt;td&gt;Input&lt;/td&gt;
&lt;td&gt;Notary Commit Verification&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;Path to git working directory. Default to the current SecYourIT repo&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Language&lt;/td&gt;
&lt;td&gt;Input&lt;/td&gt;
&lt;td&gt;SCA and SAST&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;The language is required to run&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;…&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/ShubhamPalriwala/secyourit"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h3&gt;

&lt;p&gt;Maintainer Must-Haves&lt;br&gt;
DIY Deployments&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#yaml-file-or-link-to-code"&gt;
  &lt;/a&gt;
  Yaml File or Link to Code
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;secyourit&lt;/span&gt;
&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;workflow_call&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;inputs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;signerID&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;string&lt;/span&gt;
      &lt;span class="na"&gt;org&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;string&lt;/span&gt;
      &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;string&lt;/span&gt;
      &lt;span class="na"&gt;language&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;string&lt;/span&gt;
    &lt;span class="na"&gt;secrets&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;SNYK_API_TOKEN&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;hola-secyourit&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Welcome&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;to&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;SecyourIT"&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Project Init&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;echo "SecyourIT says Hi!"&lt;/span&gt;

  &lt;span class="na"&gt;find-secrets&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;Scan&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;for&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Secrets'&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Find Secrets&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;max/secret-scan@master&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;exclude_path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;.github/workflows/configuration/exclude_paths.txt'&lt;/span&gt;

  &lt;span class="na"&gt;verify-commits-using-notary&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Verify Commits using Notary&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;vchain-us/verify-action@master&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;signerID&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{inputs.signerID}}&lt;/span&gt;
          &lt;span class="na"&gt;org&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{inputs.org}}&lt;/span&gt;
          &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{inputs.path}}&lt;/span&gt;

  &lt;span class="na"&gt;scan-image-using-trivy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Trivy Scan Image&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Scan File system suing Trivy&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;aquasecurity/trivy-action@master&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;scan-type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;fs'&lt;/span&gt;
          &lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;table'&lt;/span&gt;
          &lt;span class="na"&gt;exit-code&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;1'&lt;/span&gt;
          &lt;span class="na"&gt;ignore-unfixed&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
          &lt;span class="na"&gt;vuln-type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;os,library'&lt;/span&gt;
          &lt;span class="na"&gt;severity&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;CRITICAL,HIGH,MEDIUM'&lt;/span&gt;

  &lt;span class="na"&gt;sca-using-snyk&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Software Compositon Analysis using Snyk&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Run Snyk to check for vulnerabilities&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;snyk/actions/${{inputs.language}}@master&lt;/span&gt;
        &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;SNYK_TOKEN&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.SNYK_API_TOKEN }}&lt;/span&gt;

  &lt;span class="na"&gt;sast-using-appthreat&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;SAST using AppThreat&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Run SAST Scan by AppThreat&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AppThreat/sast-scan-action@master&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{inputs.language}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/ShubhamPalriwala/secyourit"&gt;Github URL&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.figma.com/file/GtVvanvVW1bPjJqiffqOvw/SecYourIT?node-id=0%3A1"&gt;Figma Project Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Open Source Projects that are being used in my workflow:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/marketplace/actions/secret-scan"&gt;Max/Secret-Scan&lt;/a&gt; to scan for tokens and sensitive date&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/vchain-us/verify-action"&gt;VChain-US/Verify-Action&lt;/a&gt; to verify the authenticity of the commits&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/aquasecurity/trivy-action"&gt;AquaSecurity/Trivy-Action&lt;/a&gt; to scan the file system and the dependencies for vulnerabilities&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/snyk/actions"&gt;Snyk/Actions&lt;/a&gt; to perform Software Composition Analysis&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/AppThreat/sast-scan"&gt;AppThreat/sast-scan-action&lt;/a&gt; to perform Static Application Security Testing&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>actionshackathon21</category>
      <category>devops</category>
      <category>actionshackathon</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Project 7: Array Cardio Day 2</title>
      <author>prachigarg19</author>
      <pubDate>Tue, 07 Dec 2021 18:44:40 +0000</pubDate>
      <link>https://dev.to/prachigarg19/project-7-array-cardio-day-2-25ln</link>
      <guid>https://dev.to/prachigarg19/project-7-array-cardio-day-2-25ln</guid>
      <description>&lt;p&gt;Welcome to my "Build 30 Js Projects in 30 Days" Series .This is day 7 and project 7. If you haven't read the other articles in this series please check them out first. I'll list them at the end of this article.&lt;/p&gt;

&lt;p&gt;As mentioned in my previous article. This is the Day 7 challenge of &lt;a href="https://javascript30.com/"&gt;Wes Bos Javascript30 course&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This challenge was more theoretical rather than implementation. It explained various array prototype methods that I found super helpful and so I'll be explaining each method taught in this challenge and I strongly recommend you to not skip this challenge.&lt;br&gt;
&lt;a href="https://dev.to/prachigarg19/project-4-array-cardio-day-1-3b1k"&gt;Checkout&lt;/a&gt; the first part if you haven't yet.&lt;/p&gt;

&lt;p&gt;As always before starting download the starter files from &lt;a href="https://github.com/wesbos/JavaScript30"&gt;here&lt;/a&gt;. I've made a separate article on how to download starter files, you can check it out &lt;a href="https://dev.to/prachigarg19/build-30-javascript-projects-in-30-daysday-0-2m8j"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I'll be linking the documentations I referred for each function to further clear up the topic.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Before proceeding you should be familiar with arrow functions.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.some():&lt;/strong&gt; It returns true if at least one element of our array satisfies the test condition of the function passed as a parameter.&lt;br&gt;
e.g. we want to check if any element is divisible by 3.There are 2 ways to do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let arr=[3,4,5,1,8];
let isDivisible=false;
for(item of arr){
    if(item%3==0)
    isDivisible=true;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now this can be done in a single line using some() method.&lt;br&gt;
It takes a function as a parameter(which will contain our condition), and the parameter function further takes the current element being checked, index(optional) and array on which some is used(optional) as parameters.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let arr=[3,4,5,1,8];
let isDivisible=arr.some(item=&amp;gt;item%3==0)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here item is the current element being checked for its divisbiliy with 3.&lt;/p&gt;

&lt;p&gt;See how code has been reduced to single line.&lt;br&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some"&gt;Here&lt;/a&gt; is the documentation I read along with the video.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.every():&lt;/strong&gt; It is like some(),the difference is that it returns true ONLY IF ALL elements satisfies the condition.&lt;br&gt;
Let's take the same example as above.&lt;br&gt;
Long way-&amp;gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let arr=[3,4,5,1,8];
let isDivisible=false;
let count=0;
for(item of arr){
    if(item%3==0)
    count++;
}
isDivisible=(count==5?true:false);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now this whole can be reduced to one line using every().&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let arr=[3,4,5,1,8];
let isDivisible=arr.every(item=&amp;gt;item%3==0);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;3.find():&lt;/strong&gt; It is like &lt;a href="https://dev.to/prachigarg19/project-4-array-cardio-day-1-3b1k"&gt;filter&lt;/a&gt;,the difference is that instead or returning all the elements returning true for the condition,it returns the first element.&lt;/p&gt;

&lt;p&gt;Taking similar example-&lt;br&gt;
Long way-&amp;gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let arr=[3,4,5,1,8];
let element;

for(item of arr){
    if(item%3==0)
    {
      element=item;
       break;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;using find() method-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let arr=[3,4,5,1,8];
let element=arr.find(item=&amp;gt;item%3==0)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Parameters are similar to all methods mentioned above.&lt;br&gt;
Here is the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find"&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4.findIndex():&lt;/strong&gt; It returns the first index of the elements satisfying the condition. If no such element exists,-1 is returned.&lt;br&gt;
Let's return the index for the element in above example-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let arr=[3,4,5,1,8];
let index;

for(i=0;i&amp;lt;arr.length;i++){
    if(arr[i]%3==0)
    {
      index=i;
       break;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;using findIndex() function -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let arr=[3,4,5,1,8];
let index=arr.findIndex(item=&amp;gt;item%3==0)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Parameters are same as above functions.&lt;/p&gt;

&lt;p&gt;For further understanding, refer &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex"&gt;Documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#things-i-learnt"&gt;
  &lt;/a&gt;
  &lt;u&gt;&lt;em&gt;Things I learnt:&lt;/em&gt;&lt;/u&gt;
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;More Array.prototype methods.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#previous-article-from-this-series"&gt;
  &lt;/a&gt;
  &lt;u&gt;Previous article from this series:&lt;/u&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://dev.to/prachigarg19/project-6ajax-type-ahead-40b3"&gt;Day 6 Project 6&lt;/a&gt;.In this project I built a search filter which is very common feature in website nowadays. Do check it out if you haven't already.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  &lt;u&gt;Conclusion&lt;/u&gt;
&lt;/h2&gt;

&lt;p&gt;That's it for today's project.&lt;br&gt;
These functions as you saw are super handful and will surely help in reducing the line of code.&lt;/p&gt;

&lt;p&gt;Next project will be HTML5 Canvas .&lt;/p&gt;

&lt;p&gt;If you have any doubts or suggestions please do let me know in the comment section. I'll be more than happy to interact with you.&lt;/p&gt;

&lt;p&gt;If you like this series and want to be a part of it, do consider following me at &lt;a class="mentioned-user" href="https://dev.to/prachigarg19"&gt;@prachigarg19&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;Thanks for reading. :)&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Top 7 Featured DEV Posts from the Past Week</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Tue, 07 Dec 2021 18:14:02 +0000</pubDate>
      <link>https://dev.to/devteam/top-7-featured-dev-posts-from-the-past-week-4c7j</link>
      <guid>https://dev.to/devteam/top-7-featured-dev-posts-from-the-past-week-4c7j</guid>
      <description>&lt;p&gt;&lt;em&gt;Every Tuesday we round up the previous week's top posts based on traffic, engagement, and a hint of editorial curation. The typical week starts on Monday and ends on Sunday, but don't worry, we take into account posts that are published later in the week.&lt;/em&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#it-is-possible-to-be-critical-of-things-that-you-love-to-help-them-grow"&gt;
  &lt;/a&gt;
  "It is [possible] to be critical of things that you love to help them grow."
&lt;/h2&gt;

&lt;p&gt;What an energizing, truthful, and positive article about why software development is so incredible. Great work, &lt;a class="mentioned-user" href="https://dev.to/david_whitney"&gt;@david_whitney&lt;/a&gt;
. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/david_whitney" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--33YQvnfA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--zG-6E8eS--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/370904/17c75e16-5ae8-4b0a-9a82-219408a144f2.jpg" alt="david_whitney"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/david_whitney/a-love-letter-to-software-1n9f" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;A Love Letter to Software&lt;/h2&gt;
      &lt;h3&gt;David Whitney ・ Dec 2 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#psychology&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#learner-gt-impostor"&gt;
  &lt;/a&gt;
  "Learner" &amp;gt; "Impostor"
&lt;/h2&gt;

&lt;p&gt;There are a lot of articles about impostors syndrome out there, but &lt;a class="mentioned-user" href="https://dev.to/jingjing142"&gt;@jingjing142&lt;/a&gt;
's has extremely actionable, clear advice for anyone suffering from it right now. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/jingjing142" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IUFE2CGe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--RX8jPU1---/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/384604/01127fa6-4788-4c1f-bf27-58df7b4f151d.jpeg" alt="jingjing142"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/jingjing142/dealing-with-imposter-syndrome-449i" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Dealing with Imposter Syndrome&lt;/h2&gt;
      &lt;h3&gt;Jing ・ Dec 4 ・ 7 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#psychology&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#mentalhealth&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#motivation-amp-accountability-are-possible"&gt;
  &lt;/a&gt;
  Motivation &amp;amp; accountability are possible
&lt;/h2&gt;

&lt;p&gt;And the "secret" sauce might just lie in blogging about what you're learning as a dev — or what you already know and can share with others! &lt;a class="mentioned-user" href="https://dev.to/sagarbarapatre"&gt;@sagarbarapatre&lt;/a&gt;
 explains (in a blog, naturally). &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/sagarbarapatre" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9yXGbh0---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--oTiCvPLa--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/470482/0a92298a-d055-4a65-a254-0bfd9ee65487.png" alt="sagarbarapatre"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/sagarbarapatre/why-every-developer-should-start-blogging-26j0" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Why Every Developer Should Start Blogging&lt;/h2&gt;
      &lt;h3&gt;Sagar Barapatre ・ Dec 3 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#100daysofcode&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#writing&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#a-happier-meal"&gt;
  &lt;/a&gt;
  A Happier Meal
&lt;/h2&gt;

&lt;p&gt;When &lt;a class="mentioned-user" href="https://dev.to/alvaromontoro"&gt;@alvaromontoro&lt;/a&gt;
's partner brought home McDonald's Happy Meals for the kids, he did what many developers would and hacked the small toy included to make it better. Super cool! Kids, if you want to play with your new toy immediately, keep it far away from your local software developer 😆   &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/alvaromontoro" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8ekLisLu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--aTV3h--8--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/161327/2ff05281-db58-4dcb-946a-4b679e4a266b.jpeg" alt="alvaromontoro"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/alvaromontoro/building-a-robot-friend-from-a-mcdonalds-toy-lgm" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Building a Robot Friend from a McDonald's Toy&lt;/h2&gt;
      &lt;h3&gt;Alvaro Montoro ・ Dec 4 ・ 12 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#what-makes-an-api-restful"&gt;
  &lt;/a&gt;
  What makes an API RESTful?
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/miramarshall"&gt;@miramarshall&lt;/a&gt;
 answers this very question in a succinct and simple way. If you've been struggling with the concept of REST APIs, you'll want to bookmark this post! &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/miramarshall" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_8rA3cx9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Z5CzzcSU--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/749717/712022aa-dc9b-46bc-a3d2-c2fc64be4c88.jpeg" alt="miramarshall"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/miramarshall/what-is-a-rest-api-m5k" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;What is a REST API?&lt;/h2&gt;
      &lt;h3&gt;Mira Marshall ・ Dec 4 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#apis&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#getting-more-comfortable-with-the-command-line"&gt;
  &lt;/a&gt;
  Getting more comfortable with the command line
&lt;/h2&gt;

&lt;p&gt;"It is my belief that the terminal itself is not what frightens us, but the unfamiliarity of it all. Once you build up your confidence, the terminal can, and will, be your new best friend. I promise!"&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reassuring words from &lt;a class="mentioned-user" href="https://dev.to/stackoverturf"&gt;@stackoverturf&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/stackoverturf" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Til43kcE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--HaMADLeF--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/759121/066b3dc8-167d-48a6-9d77-50f65b989882.JPG" alt="stackoverturf"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/stackoverturf/10-terminal-commandments-for-coding-newbies-3doe" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;10 Terminal Commandments for Coding Newbies&lt;/h2&gt;
      &lt;h3&gt;Taylor Overturf ・ Dec 5 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#100daysofcode&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#todayilearned&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#making-all-web-media-accessible"&gt;
  &lt;/a&gt;
  Making &lt;em&gt;all&lt;/em&gt; web media accessible
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/unicodeveloper"&gt;@unicodeveloper&lt;/a&gt;
 explains that with Cloudinary, you can enable people with hearing or visual challenges to access video and audio content. Let's learn how in their tutorial!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/unicodeveloper" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DKGnU9sV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--lqZ7uLPe--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/304853/b1f707ad-5975-4aca-a2bd-db854a60dda5.jpg" alt="unicodeveloper"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/unicodeveloper/making-your-video-more-accessible-1he5" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Making Your Video More Accessible&lt;/h2&gt;
      &lt;h3&gt;Prosper Otemuyiwa ・ Dec 3 ・ 8 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#video&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#accessible&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;em&gt;That's it for our weekly wrap up! Keep an eye on dev.to this week for daily content and discussions...and if you miss anything, we'll be sure to recap it next Tuesday!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>icymi</category>
    </item>
    <item>
      <title>How to Build an API using Strapi</title>
      <author>Uchechukwu Azubuko</author>
      <pubDate>Tue, 07 Dec 2021 18:06:34 +0000</pubDate>
      <link>https://dev.to/uche_azubuko/how-to-build-an-api-using-strapi-3ibf</link>
      <guid>https://dev.to/uche_azubuko/how-to-build-an-api-using-strapi-3ibf</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Ever needed to build and ship an API in very little time? Read this article to learn how to use Strapi to get the job done.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;APIs are so useful and ubiquitous in any application, and as a developer, you may be fazed by building an API in very little time. In this article, I will show you how to build a Node.js API so fast (perhaps, in 10 minutes) using the help of Strapi’s intuitive interface.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-youll-learn"&gt;
  &lt;/a&gt;
  What You’ll Learn
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;How to build an API quickly with Strapi.&lt;/li&gt;
&lt;li&gt;How to build a Node backend without writing Node code.&lt;/li&gt;
&lt;li&gt;How to manage relational fields with Strapi.&lt;/li&gt;
&lt;li&gt;How to add GraphQL endpoints to fetch and mutate your API.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#this-article-is-written-for"&gt;
  &lt;/a&gt;
  This Article Is Written For
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Developers that need to build backend APIs quickly.&lt;/li&gt;
&lt;li&gt;Developers that want to build a backend, but only want to focus on the frontend.&lt;/li&gt;
&lt;li&gt;Developers that want to build a Node backend API, but don’t have the Node expertise.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#what-you-will-build"&gt;
  &lt;/a&gt;
  What You Will Build
&lt;/h4&gt;

&lt;p&gt;In this article, you will start from scratch (i.e., from an empty directory), then you will go through all the steps needed to build an API using Strapi. The API that you will build will allow clients to make requests to manipulate content. The content, in this case, will represent blog posts (as in, for a blogging website - if you’d like to build out the frontend, moving forward.)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h3&gt;

&lt;p&gt;What you’ll need for this tutorial:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Knowledge of API; it might make sense to learn about it first. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Node &amp;amp; NPM - You’ll need to have Node and NPM installed on your local machine. To confirm they’re installed, run the following commands in your terminal:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node -v &amp;amp;&amp;amp; npm --v
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The Node Package Manager comes installed with Node. If you don’t have them installed, you can follow the instructions on the official &lt;a href="https://nodejs.org/"&gt;Node.js&lt;/a&gt; website.&lt;/p&gt;

&lt;p&gt;This tutorial was completed using Node v14.18.1.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Yarn - Yarn is a package manager that would help us manage our application dependencies in a way that is several times faster and more reliable than NPM. You can install yarn using:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install --global yarn
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of Contents
&lt;/h3&gt;

&lt;p&gt;Here’s what we’ll cover today:&lt;/p&gt;

&lt;p&gt;👋 Intro to Strapi&lt;br&gt;
⚙️ Setting up the Strapi project&lt;br&gt;
🏗️ Building the Strapi backend&lt;br&gt;
🤝 Understanding and using relations in Strapi&lt;br&gt;
⚡ Delivering faster with GraphQL and Strapi&lt;br&gt;
🤔 Conclusion&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#intro-to-strapi"&gt;
  &lt;/a&gt;
  Intro to Strapi
&lt;/h3&gt;

&lt;p&gt;Strapi is an open-source headless CMS (Content Management System) based on Node.js that gives developers the ability to easily build self-hosted, customizable, and performant content APIs (RESTful and GraphQL). With Strapi, weeks of API development can be saved, because it’s no-code, and building a robust API could be done in less than 20 minutes.&lt;/p&gt;

&lt;p&gt;Isn’t that awesome? I thought so too. Let’s dive right into how that can be made possible.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setting-up-the-strapi-project"&gt;
  &lt;/a&gt;
  Setting up the Strapi project
&lt;/h3&gt;

&lt;p&gt;There are various ways to &lt;a href="https://strapi.io/documentation/developer-docs/latest/setup-deployment-guides/installation.html"&gt;install&lt;/a&gt; a new Strapi project. However, the Strapi CLI is the best way to get started.&lt;/p&gt;

&lt;p&gt;For starters, open a terminal and navigate to the directory where you’d like to create this project. Run the following command in your terminal to scaffold a new Strapi project:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn create strapi-app my-project --quickstart
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;Using the &lt;code&gt;--quickstart&lt;/code&gt; flag at the end of the command provides you with the &lt;a href="https://www.sqlite.org/"&gt;SQLite&lt;/a&gt; database by default, and directly creates the project in quickstart mode. If you’d like to switch databases, &lt;a href="https://strapi.gitee.io/documentation/3.0.0-beta.x/guides/databases.html"&gt;read more&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When project creation is completed, the app should automatically start at &lt;a href="http://localhost:1337"&gt;localhost:1337&lt;/a&gt; on your browser.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iNEi5yw1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EA40404FBBCC4B6AC68C86E59D06B777193FAD00C474FA40A98AAE13F8E620D5_1638058550273_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iNEi5yw1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EA40404FBBCC4B6AC68C86E59D06B777193FAD00C474FA40A98AAE13F8E620D5_1638058550273_image.png" alt="" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If your app didn’t automatically start, run the following command in the project folder:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn develop
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Open up the app folder with your IDE, and the project structure should look like mine below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vwP8pUe4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EA40404FBBCC4B6AC68C86E59D06B777193FAD00C474FA40A98AAE13F8E620D5_1638116197881_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vwP8pUe4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EA40404FBBCC4B6AC68C86E59D06B777193FAD00C474FA40A98AAE13F8E620D5_1638116197881_image.png" alt="" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#building-the-strapi-backend"&gt;
  &lt;/a&gt;
  Building the Strapi backend
&lt;/h3&gt;

&lt;p&gt;With the project folder now created, the first step to building a Strapi backend is to register an admin.&lt;/p&gt;

&lt;p&gt;You can register an admin by filling the form that was provided on startup, as I have done below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bkri-f0p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EA40404FBBCC4B6AC68C86E59D06B777193FAD00C474FA40A98AAE13F8E620D5_1638058810499_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bkri-f0p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EA40404FBBCC4B6AC68C86E59D06B777193FAD00C474FA40A98AAE13F8E620D5_1638058810499_image.png" alt="" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then, click on the “LET’S START” button. This will create your account and take you to the Strapi admin UI, which you will use for development configurations.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V7kAPV3w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EA40404FBBCC4B6AC68C86E59D06B777193FAD00C474FA40A98AAE13F8E620D5_1638062668087_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V7kAPV3w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EA40404FBBCC4B6AC68C86E59D06B777193FAD00C474FA40A98AAE13F8E620D5_1638062668087_image.png" alt="" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Isn’t it amazing how you moved from &lt;code&gt;yarn create&lt;/code&gt; to having a dashboard where you can create your very own API pretty soon?&lt;/p&gt;

&lt;p&gt;At this point, you are ready to use the awesome powers of Strapi in &lt;strong&gt;building an API for blog posts&lt;/strong&gt;. Let’s proceed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#designing-the-data-structure"&gt;
  &lt;/a&gt;
  Designing the Data Structure
&lt;/h3&gt;

&lt;p&gt;At this point, we are going to start creating the data structure for our API. We can do this by creating content-types. The first content type we will build is for posts.&lt;/p&gt;

&lt;p&gt;Go to the &lt;code&gt;Content-Types Builder&lt;/code&gt; section and click on &lt;code&gt;Create new collection type&lt;/code&gt;. A modal will appear, where you will enter &lt;code&gt;post&lt;/code&gt; as the display name.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Content-Types Builder allows to create and update content-types: single and collection types. &lt;a href="https://strapi.io/documentation/user-docs/latest/content-types-builder/creating-new-content-type.html#creating-a-new-content-type"&gt;Read more&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Then, a modal will appear which you will use to create the fields for the &lt;code&gt;post&lt;/code&gt; content-type.&lt;/p&gt;

&lt;p&gt;Hmm, what fields does a blog post always have… Let’s create the following ones:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;title&lt;/code&gt; with type &lt;strong&gt;Text&lt;/strong&gt; (&lt;strong&gt;required&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;content&lt;/code&gt; with type &lt;strong&gt;Rich Text&lt;/strong&gt; (&lt;strong&gt;required&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;image&lt;/code&gt; with type &lt;strong&gt;Media&lt;/strong&gt; (&lt;strong&gt;Single image&lt;/strong&gt;) and (&lt;strong&gt;required&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;author&lt;/code&gt; with type &lt;strong&gt;Text&lt;/strong&gt; (&lt;strong&gt;required&lt;/strong&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, you have a &lt;code&gt;post&lt;/code&gt; content-type with 4 fields - Text, Rich Text, Media, and Text.&lt;/p&gt;

&lt;p&gt;Hit &lt;strong&gt;Finish&lt;/strong&gt;, then &lt;strong&gt;Save&lt;/strong&gt;! Here you go, your first content-type has been created, and you have successfully created the schema for a blog post.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Schemas help to implement the database’s design. Database schemas are the blueprints that help developers visualize how databases should be built. They provide a reference point that indicates what fields of information the project contains.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hdsGrC0H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EA40404FBBCC4B6AC68C86E59D06B777193FAD00C474FA40A98AAE13F8E620D5_1638113888351_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hdsGrC0H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EA40404FBBCC4B6AC68C86E59D06B777193FAD00C474FA40A98AAE13F8E620D5_1638113888351_image.png" alt="" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, on the sidebar, we will see the “COLLECTION TYPES” section and if you go to the post section, you’ll find there are currently no posts.&lt;/p&gt;

&lt;p&gt;You can create a brand new post by clicking &lt;strong&gt;Add new posts&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;You’ll see that you are provided with a CMS for inputting data. Go ahead and fill up the fields (title, featured image, author, content) with information about the first post you’d like to add to your database. You can add lots of posts if you’d like.&lt;/p&gt;

&lt;p&gt;Then hit &lt;strong&gt;Save&lt;/strong&gt;, and &lt;strong&gt;Publish&lt;/strong&gt;. A screenshot of mine is shown below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hqeKCx_v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EA40404FBBCC4B6AC68C86E59D06B777193FAD00C474FA40A98AAE13F8E620D5_1638114103028_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hqeKCx_v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EA40404FBBCC4B6AC68C86E59D06B777193FAD00C474FA40A98AAE13F8E620D5_1638114103028_image.png" alt="" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To view the &lt;code&gt;posts&lt;/code&gt; API, visit &lt;a href="http://localhost:1337/posts"&gt;localhost:1337/posts&lt;/a&gt;. P.s.: Notice it pluralized the name of the collection type that we had set initially - post.&lt;/p&gt;

&lt;p&gt;You will get a status 403 - forbidden error, as shown below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xNcSecHi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EA40404FBBCC4B6AC68C86E59D06B777193FAD00C474FA40A98AAE13F8E620D5_1638105741189_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xNcSecHi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EA40404FBBCC4B6AC68C86E59D06B777193FAD00C474FA40A98AAE13F8E620D5_1638105741189_image.png" alt="" width="553" height="230"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That’s because we attempted to view the API as an unauthenticated user, and by default, viewing an API requires authentication. To make posts public, we have to grant read-access to the post content-type. To do this, head to the dashboard and under the “GENERAL” section.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Click on the &lt;strong&gt;Settings&lt;/strong&gt; then &lt;strong&gt;Roles &amp;amp; Permission&lt;/strong&gt; and click on the &lt;code&gt;public&lt;/code&gt; role.&lt;/li&gt;
&lt;li&gt;Check the article &lt;code&gt;find&lt;/code&gt; and &lt;code&gt;findone&lt;/code&gt; options under permission and save.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With these, you have permitted a public user to get all posts &lt;code&gt;**GET**&lt;/code&gt; &lt;code&gt;/posts&lt;/code&gt;, and also get a single post &lt;code&gt;**GET**&lt;/code&gt; &lt;code&gt;/posts/:id&lt;/code&gt;; something so similar to the REST API GET method.&lt;/p&gt;

&lt;p&gt;Then hit &lt;strong&gt;Save&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;Now, if we head over to &lt;a href="http://localhost:1337/posts"&gt;localhost:1337/posts&lt;/a&gt; you should now see all your posts from the post endpoint this time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ft5QWZhi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EA40404FBBCC4B6AC68C86E59D06B777193FAD00C474FA40A98AAE13F8E620D5_1638114178599_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ft5QWZhi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EA40404FBBCC4B6AC68C86E59D06B777193FAD00C474FA40A98AAE13F8E620D5_1638114178599_image.png" alt="" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can access created endpoints with REST API methods, because by default, Strapi provides our endpoints via REST, but later in this article, I will show you how endpoints can be accessed via GraphQL&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In the project folder, the &lt;code&gt;./api/**/config/routes.json&lt;/code&gt; files define all available endpoints for the clients. By default, Strapi generates endpoints for all your Content Types. &lt;a href="https://strapi.io/documentation/developer-docs/latest/development/backend-customization.html#routing"&gt;Read more&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Looks like we’re making progress. Doesn’t it?&lt;/p&gt;

&lt;p&gt;Now we have created a post, the content is stored in your database so that you can have access to your data when you need to.&lt;/p&gt;

&lt;p&gt;If you look through the &lt;code&gt;posts&lt;/code&gt; endpoint, you’d notice that one other benefit of Strapi is that it supports image optimization too. You are given the ability to render different image formats including thumbnail, large, medium, and small.&lt;/p&gt;

&lt;p&gt;With Strapi, you also don’t have to go through the stress of building out an MVC project structure - creating a database, database connections, models, etc. Here, it’s all done under the hood for you. We’ll have a look at that pretty soon.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Isn’t it beautiful to see that we are making headway?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Back in your IDE, you will now see that a &lt;code&gt;./api/posts/&lt;/code&gt; folder has been created in the project folder, which is a reflection of the &lt;code&gt;posts&lt;/code&gt; endpoint you created on the admin panel.&lt;/p&gt;

&lt;p&gt;In the models folder, the &lt;code&gt;posts.settings.json&lt;/code&gt; file defines the &lt;code&gt;post&lt;/code&gt; schema that you created, as shown below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E7xrterz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EA40404FBBCC4B6AC68C86E59D06B777193FAD00C474FA40A98AAE13F8E620D5_1638116163053_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E7xrterz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EA40404FBBCC4B6AC68C86E59D06B777193FAD00C474FA40A98AAE13F8E620D5_1638116163053_image.png" alt="" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As your app grows -- the more content-types(endpoints) you add up, the more folders are created in the api directory.&lt;/p&gt;

&lt;p&gt;Also, note that image uploads are stored in the &lt;code&gt;public/uploads&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I feel it makes huge sense that all of your code corresponds to all actions made on the dashboard. What do you think?&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#understanding-and-using-relations-in-strapi"&gt;
  &lt;/a&gt;
  Understanding and using relations in Strapi
&lt;/h3&gt;

&lt;p&gt;Let’s say you have a collection of videos, and for each blog post; a video should be embedded within. To establish a connection between a video from the videos collection and its associated blog post, you first have to learn how to use relations in Strapi. &lt;/p&gt;

&lt;p&gt;Relation-type fields added to a content-type from the Content-Types Builder allow to establish a relation with another content-type - mandatorily a collection type. These fields are called "relational fields".&lt;/p&gt;

&lt;p&gt;With our new-found knowledge, let’s go ahead and create the video collection - to demonstrate how to set up relations in Strapi.&lt;/p&gt;

&lt;p&gt;Go to the &lt;code&gt;Content-Types Builder&lt;/code&gt; section and click on &lt;code&gt;Create new collection type&lt;/code&gt;. Enter &lt;code&gt;video&lt;/code&gt; as the display name.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_jCVrl4I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EA40404FBBCC4B6AC68C86E59D06B777193FAD00C474FA40A98AAE13F8E620D5_1638116918626_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_jCVrl4I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EA40404FBBCC4B6AC68C86E59D06B777193FAD00C474FA40A98AAE13F8E620D5_1638116918626_image.png" alt="" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then add the following field for the video content-type:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;url&lt;/code&gt; with type &lt;strong&gt;Text&lt;/strong&gt; (&lt;strong&gt;required&lt;/strong&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hit &lt;strong&gt;Finish&lt;/strong&gt;, then &lt;strong&gt;Save&lt;/strong&gt;! Now, your second content-type has been created, and you have successfully created the schema for a video.&lt;/p&gt;

&lt;p&gt;To continue, grab a video URL, perhaps the one for your favorite YouTube video.&lt;/p&gt;

&lt;p&gt;Because we want to create a link between the post collection and the video collection, we also need to add a new field called &lt;code&gt;video&lt;/code&gt; in the &lt;code&gt;Posts&lt;/code&gt; collection. The field type for this would be &lt;strong&gt;Relation&lt;/strong&gt;, and we can choose the kind of relationship we want between &lt;code&gt;posts&lt;/code&gt; and &lt;code&gt;videos&lt;/code&gt; (by selecting any of the 6 options), to keep things simple in this demonstration, we’ll choose the one to one relationship where a post has a video, as shown below:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: For a field to be a relation, it has to be a collection type.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bGL_d3MW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EA40404FBBCC4B6AC68C86E59D06B777193FAD00C474FA40A98AAE13F8E620D5_1638117989452_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bGL_d3MW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EA40404FBBCC4B6AC68C86E59D06B777193FAD00C474FA40A98AAE13F8E620D5_1638117989452_image.png" alt="" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hit the &lt;strong&gt;Finish&lt;/strong&gt; button when you’re done.&lt;/p&gt;

&lt;p&gt;Now your post schema should look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tGleTUOd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EA40404FBBCC4B6AC68C86E59D06B777193FAD00C474FA40A98AAE13F8E620D5_1638118149661_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tGleTUOd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EA40404FBBCC4B6AC68C86E59D06B777193FAD00C474FA40A98AAE13F8E620D5_1638118149661_image.png" alt="" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With these, the video field in the &lt;code&gt;Posts&lt;/code&gt; collection has a relation with the &lt;code&gt;Videos&lt;/code&gt; collection.&lt;/p&gt;

&lt;p&gt;To continue, navigate to the &lt;strong&gt;Videos&lt;/strong&gt; sections under the “COLLECTION TYPES” in your dashboard, then click the &lt;strong&gt;Add New Video&lt;/strong&gt; button to add a video to your &lt;code&gt;Videos&lt;/code&gt; collection as shown below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fkMbqsYY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EA40404FBBCC4B6AC68C86E59D06B777193FAD00C474FA40A98AAE13F8E620D5_1638118476871_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fkMbqsYY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EA40404FBBCC4B6AC68C86E59D06B777193FAD00C474FA40A98AAE13F8E620D5_1638118476871_image.png" alt="" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hit &lt;strong&gt;Save&lt;/strong&gt;, then &lt;strong&gt;Publish&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;With the video added, we can now link it with a blog post, by heading to the post of choice in the Posts collection, clicking the &lt;strong&gt;Edit&lt;/strong&gt; button, and selecting the video URL you’d like to add to that post.&lt;/p&gt;

&lt;p&gt;Tadaa! If you visit &lt;a href="http://localhost:1337/posts"&gt;localhost:1337/posts&lt;/a&gt; on your browser, you will see that the &lt;code&gt;posts&lt;/code&gt; endpoint has been updated and the video has been added to the post where you included it, as shown below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h9EuD-03--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EA40404FBBCC4B6AC68C86E59D06B777193FAD00C474FA40A98AAE13F8E620D5_1638120192039_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h9EuD-03--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EA40404FBBCC4B6AC68C86E59D06B777193FAD00C474FA40A98AAE13F8E620D5_1638120192039_image.png" alt="" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#delivering-faster-with-graphql-and-strapi"&gt;
  &lt;/a&gt;
  Delivering faster with GraphQL and Strapi
&lt;/h3&gt;

&lt;p&gt;Delivering applications faster is always a top priority. In this section, you will learn how to easily query your data through a generated GraphQL schema.&lt;/p&gt;

&lt;p&gt;To get started with GraphQL in your app, you first have to install the plugin by running the following command in your project directory:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn strapi install graphql
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;With the GraphQL plugin installed, you will be able to add a GraphQL endpoint to fetch and mutate your content.&lt;/p&gt;

&lt;p&gt;Restart the app using:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn develop
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;When you visit &lt;a href="http://localhost:1337/graphql"&gt;localhost:1337/graphql&lt;/a&gt; in your browser, you should see the interface (&lt;strong&gt;GraphQL Playground&lt;/strong&gt;) that will help you to write a GraphQL query to explore your data&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8ZZyT2Bb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EA40404FBBCC4B6AC68C86E59D06B777193FAD00C474FA40A98AAE13F8E620D5_1638202593800_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8ZZyT2Bb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EA40404FBBCC4B6AC68C86E59D06B777193FAD00C474FA40A98AAE13F8E620D5_1638202593800_image.png" alt="" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you’d like to access the id, title, url of the featured image, author, and url of the video for blog posts, you can write the query as I’ve shown below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ew3RId3Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ooigo66dg7l79utur7ma.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ew3RId3Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ooigo66dg7l79utur7ma.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We were able to grab data pretty fast and conveniently! Also, using the sidebar, you can have a peek at your schema. Awesome!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;In this article, you learned how fast, easy to use, and powerful Strapi is for building APIs. Setting up our backend was super seamless. Just create your collections and Strapi generates RESTful endpoints by default, or if you’d prefer to use GraphQL endpoints, simply install the plugin. All of these, using best web practices. Awesome stuff, indeed!&lt;/p&gt;

&lt;p&gt;If you have any questions or suggestions, feel free to post a comment, &lt;a href="//mailto:azubukouche@yahoo.com"&gt;email&lt;/a&gt;, or &lt;a href="https://twitter.com/UcheAzubuko"&gt;DM&lt;/a&gt; me.&lt;/p&gt;

&lt;p&gt;If you enjoyed this article, please hit the &lt;em&gt;LOVE&lt;/em&gt; ❤️ button as many times as you wish. Thanks!!!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://strapi.io/documentation/developer-docs/latest/getting-started/introduction.html"&gt;Strapi developer documentation&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>jamstack</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>SafeCloset, a Secret Safe - Why and how I made it in Rust </title>
      <author>Denys Séguret</author>
      <pubDate>Tue, 07 Dec 2021 18:00:18 +0000</pubDate>
      <link>https://dev.to/dystroy/safecloset-a-secret-safe-why-and-how-i-made-it-in-rust-2k47</link>
      <guid>https://dev.to/dystroy/safecloset-a-secret-safe-why-and-how-i-made-it-in-rust-2k47</guid>
      <description>&lt;p&gt;Like everybody, I have small secrets to store, like door codes, some passwords, where I buried the body, etc.&lt;/p&gt;

&lt;p&gt;They must be kept away from other eyes but, more importantly, they must be available, even if I'm traveling far from my computers.&lt;/p&gt;

&lt;p&gt;And they must be easily backed up without risk.&lt;/p&gt;

&lt;p&gt;In the past, I've dealt with such secret storage with various solutions, like having files decrypted, edited with my favorite editor, then encrypted again.&lt;/p&gt;

&lt;p&gt;They were full of weaknesses:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;temporary clear files that could be inadvertently backed up, or staying here if I had to leave or in case of crash&lt;/li&gt;
&lt;li&gt;editor weaknesses, like backup files and plugins&lt;/li&gt;
&lt;li&gt;OS specificity making them inaccessible when far from my computers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The temporary clear files where the most dangerous problem. I've had to hunt for my clear files after a badly parameterized backup rule.&lt;br&gt;
Editor plugins were a real threat too, especially as I started using an AI plugin storing whole extracts of my texts for better auto-completion.&lt;/p&gt;

&lt;p&gt;So I had to find or build better.&lt;/p&gt;

&lt;p&gt;The obvious requirements for my new solution were:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;an encrypted storage file, with a strong algorithm&lt;/li&gt;
&lt;li&gt;a storage format making it possible to keep the file on non secure disks&lt;/li&gt;
&lt;li&gt;a multi-platform application, that can be easily carried too&lt;/li&gt;
&lt;li&gt;totally open-source, so that the program can be fixed or rewritten&lt;/li&gt;
&lt;li&gt;no clear file ever created, no data sent to external API, so the application is an editor too&lt;/li&gt;
&lt;li&gt;pure Rust, to avoid most nasty bugs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I added a few less obvious requirements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;easy fuzzy key search&lt;/li&gt;
&lt;li&gt;fast opening, instant closing&lt;/li&gt;
&lt;li&gt;auto-closing (dead man switch)&lt;/li&gt;
&lt;li&gt;focus on ergonomics, I want to feel comfortable editing in the application&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And in case I inadvertently become a secret agent:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;plausible deniability by putting drawers (storage units) inside other ones&lt;/li&gt;
&lt;li&gt;non observability of deep drawers (having several versions of the file doesn't let you know whether there were changes and in which deep drawer)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, let's see the technical choices.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#programming-language-rust"&gt;
  &lt;/a&gt;
  Programming language: Rust
&lt;/h3&gt;

&lt;p&gt;As I said, this was obvious to me. Such program can't really be written today in another language. Rust doesn't prevent all bugs, but it makes it possible to avoid the nasty ones which stay hidden and compromise security.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cryptographic-algorithm-and-library-aesgcm"&gt;
  &lt;/a&gt;
  Cryptographic algorithm and library : AES-GCM
&lt;/h3&gt;

&lt;p&gt;I never considered rolling my own algorithm or using a lightly tested library.&lt;/p&gt;

&lt;p&gt;I choose an AEDS crate from the RustCrypto group: &lt;a href="https://github.com/RustCrypto/AEADs/tree/master/aes-gcm-siv"&gt;AES-GCM in its SIV variant&lt;/a&gt; (the SIV variant isn't really needed but it doesn't cost much).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#file-format"&gt;
  &lt;/a&gt;
  File format
&lt;/h3&gt;

&lt;p&gt;The minimal unit of secret in SafeCloset is an &lt;em&gt;entry&lt;/em&gt;, which is made of  a name and a value, for example "VISA Card code" and "9875".&lt;/p&gt;

&lt;p&gt;Entries are stored together in a &lt;em&gt;drawer&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;SafeCloset uses the metaphor of &lt;em&gt;closets&lt;/em&gt; and &lt;em&gt;drawers&lt;/em&gt;:&lt;br&gt;
A SafeCloset file contains something which is called a &lt;em&gt;closet&lt;/em&gt;.&lt;br&gt;
A &lt;em&gt;closet&lt;/em&gt; contains several &lt;em&gt;drawers&lt;/em&gt;. Each drawer is separately encrypted, with its own passphrase (and nonce).&lt;/p&gt;

&lt;p&gt;A drawer also contains a closet, which contains deeper drawers.&lt;/p&gt;

&lt;p&gt;To ensure plausible deniability, drawers are automatically created, including deep ones, and nothing distinguishes drawers that you created and you can open from the ones which were automatically created and that you can't open (you could if you knew their password but they aren't displayed on creation and they only contain random bytes anyway).&lt;/p&gt;

&lt;p&gt;Drawers are serialized using the &lt;a href="https://serde.rs/"&gt;serde&lt;/a&gt; crate which is kind of standard in the Rust world and is very convenient. For the encoding format, I choose &lt;a href="https://msgpack.org/index.html"&gt;MessagePack&lt;/a&gt; which, like JSON, allows field addition but is much more compact. Having optional fields is very important to allow evolution of the file format while ensuring old files will stay compatible with newer versions of the application.&lt;/p&gt;

&lt;p&gt;Combining the chosen encryption scheme and the serialization encoding with the list of structures and fields, the complete file format is described in the &lt;a href="https://dystroy.org/safecloset/community/#storage-format"&gt;community page&lt;/a&gt; to allow replacement of the application if needed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#making-an-ui-in-the-terminal"&gt;
  &lt;/a&gt;
  Making an UI in the terminal
&lt;/h3&gt;

&lt;p&gt;There are many low level libraries whose features go from the basic (and easy) task of coloring and styling the text you print in the terminal to handling events, terminal size, alternate screen, etc. I personally like &lt;a href="https://github.com/crossterm-rs/crossterm"&gt;Crossterm&lt;/a&gt; which is cross platform and well designed.&lt;/p&gt;

&lt;p&gt;I combine it with &lt;a href="https://github.com/Canop/termimad/"&gt;Termimad&lt;/a&gt;, a crate I made to manage skins, generate texts without mixing the style and the content, handle text inputs, even with wide characters, and a lot of small TUI related problems.&lt;/p&gt;

&lt;p&gt;Termimad allows fancy things like editing texts in small areas of your terminal and fading the view behind the menus or dialogs:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M71XjnL0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dystroy.org/safecloset/img/menu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M71XjnL0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dystroy.org/safecloset/img/menu.png" alt="the fancy color fading" width="562" height="356"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As the author of Termimad I feel comfortable to &lt;em&gt;not&lt;/em&gt; recommend you use it for your own TUI. Not that it's bad, I like it, but it's a strange beast covering much more than what a library should do, and at a much lower level than your typical framework. If you're not used to low level TUI libraries and well versed in Rust, I suggest you look at other higher level TUI crates.&lt;br&gt;
If you still hesitate, come to &lt;a href="https://miaou.dystroy.org/3768"&gt;my chat&lt;/a&gt; and I'll tell you whether Termimad might be the right choice for your application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-result-safecloset"&gt;
  &lt;/a&gt;
  The result: SafeCloset
&lt;/h2&gt;

&lt;p&gt;Here it is: &lt;a href="https://dystroy.org/safecloset/"&gt;https://dystroy.org/safecloset/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If I may say so, I'd say SafeCloset is convenient and pleasant to use.&lt;br&gt;
It lets me find and read my secrets in a few keystrokes.&lt;br&gt;
And it seems to be the most secure solution I ever used.&lt;br&gt;
I designed it to be intuitive for other users too, and I hope I succeeded.&lt;/p&gt;

&lt;p&gt;To better introduce it,  I made a website explaining how it works, how to install it, how to use it: &lt;a href="https://dystroy.org/safecloset/"&gt;https://dystroy.org/safecloset/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The current version is a candidate for a release as 1.0, there's nothing important missing right now, but I'll let some time run to be sure.&lt;/p&gt;

&lt;p&gt;I'd welcome your opinion!&lt;/p&gt;

</description>
      <category>rust</category>
      <category>opensource</category>
      <category>showdev</category>
      <category>cryptography</category>
    </item>
    <item>
      <title>Make &amp; Deploy Doxygen</title>
      <author>Siddhant Khare</author>
      <pubDate>Tue, 07 Dec 2021 17:45:57 +0000</pubDate>
      <link>https://dev.to/siddhantkcode/make-deploy-doxygen-1c50</link>
      <guid>https://dev.to/siddhantkcode/make-deploy-doxygen-1c50</guid>
      <description>&lt;p&gt;Using this Workflow file you can deploy your &lt;strong&gt;&lt;a href="https://www.doxygen.nl/index.html"&gt;Doxygen&lt;/a&gt;&lt;/strong&gt; docs to GitHub pages &lt;em&gt;(in this example)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I have created this Workflow for &lt;a href="https://github.com/metacall/landing-page"&gt;MetaCall/landing-page&lt;/a&gt; to deploy their landing page.&lt;/p&gt;

&lt;p&gt;They are using &lt;code&gt;Docsify&lt;/code&gt; also for documentation, so that part is also getting deployed using the same workflow file.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#my-workflow"&gt;
  &lt;/a&gt;
  My Workflow
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/metacall/landing-page/blob/master/.github/workflows/make_doxygen.yml"&gt;Make &amp;amp; Deploy doxygen.yml&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h3&gt;

&lt;p&gt;DIY Deployments&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#yaml-file"&gt;
  &lt;/a&gt;
  Yaml File
&lt;/h3&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h3&gt;

&lt;p&gt;We Are using at &lt;a href="https://github.com/metacall"&gt;MetaCall&lt;/a&gt;'s Landing Page&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/metacall"&gt;
        metacall
      &lt;/a&gt; / &lt;a href="https://github.com/metacall/landing-page"&gt;
        landing-page
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Repository containing the landing page for MetaCall Core project.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;div&gt;
  &lt;a href="https://metacall.io" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7kjcurKH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/metacall/core/develop/deploy/images/logo.png" alt="METACALL" width="80" height="80"&gt;&lt;/a&gt;
  &lt;h1&gt;
&lt;b&gt;MetaCall Polyglot Runtime&lt;/b&gt;
&lt;/h1&gt;
  &lt;a href="https://metacall.io" rel="nofollow"&gt;MetaCall.io&lt;/a&gt; |
  &lt;a href="https://github.com/metacall/landing-page/#/README?id=install"&gt;Install&lt;/a&gt; |
  &lt;a href="https://github.com/metacall/landing-page/#/docs/docs"&gt;Docs&lt;/a&gt;
&lt;/div&gt;
&lt;div id="user-content-badges"&gt;
  &lt;a href="https://t.me/joinchat/BMSVbBatp0Vi4s5l4VgUgg" alt="Discord" rel="nofollow"&gt;
    &lt;img src="https://camo.githubusercontent.com/6896ac2230a3a6acb7b3b26caf12d0614a48c6fc570a27e55acb71290fee4b8d/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f6c6162656c3d6d65746163616c6c266d6573736167653d6a6f696e26636f6c6f723d626c7565266c6f676f3d74656c656772616d267374796c653d666c6174"&gt;&lt;/a&gt;
  &lt;a href="https://discord.gg/upwP4mwJWa" alt="Discord" rel="nofollow"&gt;
    &lt;img src="https://camo.githubusercontent.com/ec852400a2ba71b6ba7b95d4a8f4726362b03dd796880021912bc4c6e7211509/68747470733a2f2f696d672e736869656c64732e696f2f646973636f72642f3738313938373830353937343735373432363f6c6162656c3d646973636f7264267374796c653d666c6174"&gt;&lt;/a&gt;
  &lt;a href="https://matrix.to/#/#metacall:matrix.org" alt="Matrix" rel="nofollow"&gt;
    &lt;img src="https://camo.githubusercontent.com/3ac263029803ee51d8a864e80d7b533ef0f9382e092d4dd807974ac555a6e2e5/68747470733a2f2f696d672e736869656c64732e696f2f6d61747269782f6d65746163616c6c3a6d61747269782e6f72673f6c6162656c3d6d6174726978267374796c653d666c6174"&gt;&lt;/a&gt;
  &lt;a href="https://twitter.com/metacallio" alt="Twitter" rel="nofollow"&gt;
    &lt;img src="https://camo.githubusercontent.com/8f843c14d44584589d56800b0bd65e96990facd9cf0dbd787f05462449463845/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f666f6c6c6f772f6d65746163616c6c696f3f6c6162656c3d4d65746143616c6c"&gt;&lt;/a&gt;
&lt;p&gt;&lt;a href="https://medium.com/@metacall/call-functions-methods-or-procedures-between-programming-languages-with-metacall-58cfece35d7" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y4wCawSv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/metacall/core/develop/deploy/images/overview.png" alt="M E T A C A L L" width="350" height="auto"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;MetaCall&lt;/strong&gt; allows calling functions, methods or procedures between multiple programming languages.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sum.py&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-python position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;sum&lt;/span&gt;(&lt;span class="pl-s1"&gt;a&lt;/span&gt;, &lt;span class="pl-s1"&gt;b&lt;/span&gt;):
  &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-s1"&gt;a&lt;/span&gt; &lt;span class="pl-c1"&gt;+&lt;/span&gt; &lt;span class="pl-s1"&gt;b&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;&lt;code&gt;main.js&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-js position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt; sum &lt;span class="pl-kos"&gt;}&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;require&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s"&gt;"./sum.py"&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;

&lt;span class="pl-en"&gt;sum&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-c1"&gt;3&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt; &lt;span class="pl-c"&gt;// 7&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;&lt;code&gt;shell&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;metacall main.js&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;MetaCall&lt;/strong&gt; is a extensible, embeddable and interoperable cross-platform polyglot runtime. It supports NodeJS, Vanilla JavaScript, TypeScript, Python, Ruby, C#, Go, C, C++, Rust, D, Cobol &lt;a href="https://github.com/metacall/landing-page/docs/docs.md#_2-language-support"&gt;and more&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
Install&lt;/h2&gt;
&lt;p&gt;The easiest way to install &lt;strong&gt;MetaCall&lt;/strong&gt; is the following:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;curl -sL https://raw.githubusercontent.com/metacall/install/master/install.sh &lt;span class="pl-k"&gt;|&lt;/span&gt; sh&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;For more information about other install methodologies and platforms or Docker, check the &lt;a href="https://github.com/metacall/landing-page/docs/docs.md#_41-installation"&gt;install documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
Examples&lt;/h2&gt;
&lt;p&gt;You can find a complete &lt;a href="https://github.com/metacall/landing-page/docs/docs.md#_43-examples"&gt;list of examples in the documentation&lt;/a&gt;. If you are interested in submitting new examples, please &lt;a href="https://github.com/metacall/landing-page/docs/community.md#community"&gt;contact us in our chats&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/metacall/landing-page"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


&lt;p&gt;&lt;a href="https://core.metacall.io/api/html/index.html"&gt;Live Demo Preview&lt;/a&gt;&lt;/p&gt;

</description>
      <category>actionshackathon21</category>
      <category>devops</category>
      <category>doxygen</category>
      <category>deploy</category>
    </item>
    <item>
      <title>Quickest Way to Secure API Keys on the Frontend (In Minutes)</title>
      <author>KOR Connect</author>
      <pubDate>Tue, 07 Dec 2021 17:13:19 +0000</pubDate>
      <link>https://dev.to/korconnect/quickest-way-to-secure-api-keys-on-the-frontend-in-minutes-1g97</link>
      <guid>https://dev.to/korconnect/quickest-way-to-secure-api-keys-on-the-frontend-in-minutes-1g97</guid>
      <description>&lt;p&gt;There are often times when we are building websites that leverage the benefits of being delivered on a CDN (security, performance, no backend infrastructure required), but we want more powerful, dynamic functionality. The best way to increase functionality is through APIs; i.e. email contact forms, processing of outside data, or present information like the weather forecast, flight schedules, currency exchange rates, etc. How would we make these API integrations quickly and securely if we do not want to build out a backend or add infrastructure to handle these API calls? Where do we secure the private API keys? What if we don't want user authentication prior to allowing our users to interact with the 3rd party APIs? The answer is &lt;a href="https://korconnect.io/"&gt;KOR Connect&lt;/a&gt;, KOR Connect is a middleware platform that allows CDN front ends to secure API Keys in a quick and simple way, while automatically deploying security layers during the API integration process. The bonus is that it is also free to use! &lt;/p&gt;

&lt;p&gt;We will talk through an example of integrating a Covid 19 tracker. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YegtineV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3pwd5x53btr62ogn1nrd.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YegtineV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3pwd5x53btr62ogn1nrd.gif" alt="Corona_Tracker_GIF" width="880" height="369"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's create a COVID-19 tracker. In order to do this, we have to pick the API that we want to use. I decided on the &lt;a href="https://rapidapi.com/axisbits-axisbits-default/api/covid-19-statistics/"&gt;COVID-19 Statistics API&lt;/a&gt; that uses data from John Hopkins University.&lt;/p&gt;

&lt;p&gt;If you already have a &lt;a href="https://korconnect.io/"&gt;KOR Connect&lt;/a&gt; account you can sign in &lt;a href="https://app.korconnect.io/login"&gt;here&lt;/a&gt; or you can create a new account.&lt;br&gt;
Let’s start by creating an API connection on KOR Connect by clicking on the “+ Connect API” button:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iQ5ZGSCd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5a5dxftj5lgyzsbskmja.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iQ5ZGSCd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5a5dxftj5lgyzsbskmja.jpeg" alt="Connect_API" width="880" height="407"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The connection details were all copied directly from RapidAPI. More information regarding the API connection module &lt;a href="https://kor-comunity.gitlab.io/kor-connect/adir/GETSTARTED.html"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5YvvmBvM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1v8c8a3x315oembhs6nd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5YvvmBvM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1v8c8a3x315oembhs6nd.png" alt="Connection_module" width="880" height="952"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Done! After making the connection, go to View Details for your new API connection.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EQf-FqAl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6hlhoqbezgzdg488lt8c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EQf-FqAl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6hlhoqbezgzdg488lt8c.png" alt="View_Details" width="880" height="429"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now you will see the Secure API and Public API key, both generated by KOR Connect. You can also adjust your per-user rate limit for your API calls at the top left of the screen (the default is 5 calls per second). In this example, we will be using the Single URL Security Type provided by KOR Connect. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aNJmN8ib--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/75c6wb6gsmqjylqo8hu4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aNJmN8ib--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/75c6wb6gsmqjylqo8hu4.png" alt="API_Details" width="880" height="415"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;If you want, &lt;a href="https://www.youtube.com/watch?v=m-MAIpnH9ag"&gt;here&lt;/a&gt; is a great video tutorial by Traversy Media walking you through building the site on Vue.js. (&lt;a href="https://github.com/bradtraversy/vue-covid-tracker"&gt;Here&lt;/a&gt; is the code for his COVID-19 tracker).&lt;/em&gt; &lt;em&gt;&lt;strong&gt;Note:&lt;/strong&gt; In the tutorial he uses a public API, we will use KOR Connect to easily integrate the private API into our site.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now, all you have to do is grab the Secure URL and Public API Key provided by KOR Connect (refer to the image above) and use them to make an API request. Here's an example of the fetch request.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;YOUR-SECURE-URL&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;method&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;GET&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;headers&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;x-rapidapi-key&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;YOUR-PUBLIC-API-KEY&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That’s it, now you are ready to start testing/ using your API integration. KOR Connect automatically sets the Connection Mode to Testing. When you are ready to go to production make sure you remember to switch the Connection Mode to Production, this will activate security and remove localhost from the allowed domains (more information &lt;a href="https://kor-comunity.gitlab.io/kor-connect/adir/TESTINGPRODUCTIONMODES.html"&gt;here&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K0phmhaH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vea7kzfaxyteewz0e4wp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K0phmhaH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vea7kzfaxyteewz0e4wp.png" alt="Connection_Modes" width="880" height="189"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It was as simple as that, now your API integration works without any additional libraries or configurations.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NUYg93PC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p4b1i79gco4w9c625p05.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NUYg93PC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p4b1i79gco4w9c625p05.jpeg" alt="Finished_Tracker" width="846" height="399"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you're interested in adding even more security through an attestation service, click &lt;a href="https://dev.to/korconnect/quickest-way-to-secure-api-keys-on-the-frontend-1jcp"&gt;here&lt;/a&gt; for additional instructions.&lt;/p&gt;

&lt;p&gt;In case you are interested in what happens automatically on KOR Connect’s end after you make a connection. Bot controls are activated that inspect for miscellaneous bots, security-related bots, calls coming from automated browsers, black listed origins, and user agents that don’t seem to be coming from a browser; these calls are blocked if they don’t pass inspection. Furthermore, KOR Connect validates the access-control-allow-origin header from your allowed origins, as well as provides a per-user rate limiter that can block malicious actors abusing calls without causing any interruptions to other users.&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>webdev</category>
      <category>security</category>
      <category>javascript</category>
    </item>
    <item>
      <title>OpenTelemetry SDK and Collector Deployment Strategies</title>
      <author>Michael Haberman</author>
      <pubDate>Tue, 07 Dec 2021 17:09:55 +0000</pubDate>
      <link>https://dev.to/aspecto/opentelemetry-sdk-and-collector-deployment-strategies-5848</link>
      <guid>https://dev.to/aspecto/opentelemetry-sdk-and-collector-deployment-strategies-5848</guid>
      <description>&lt;p&gt;So you are starting your journey with &lt;a href="https://opentelemetry.io/"&gt;OpenTelemetry&lt;/a&gt;, congrats! &lt;/p&gt;

&lt;p&gt;When looking back on my OpenTelemetry journey, it wasn’t always smooth sailing. So I’m writing this to try and help.&lt;/p&gt;

&lt;p&gt;In this article, I will walk you through the different deployment methods. More specifically, what options are available for us when it comes to the SDK and Collector. &lt;/p&gt;

&lt;p&gt;By the end of reading this, you will hopefully have a clearer view of which option you should choose.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#opentelemetry-components"&gt;
  &lt;/a&gt;
  OpenTelemetry Components
&lt;/h1&gt;

&lt;p&gt;The first thing that you should do is get yourself familiarized with the different OpenTelemetry components and their roles. So let’s jump right into it.&lt;/p&gt;

&lt;p&gt;Similar to any full-stack system, you have a frontend, a backend, and a database. OpenTelemetry is a bit like a full-stack system:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SDK / Distro – Collecting telemetry data from your services.&lt;/li&gt;
&lt;li&gt;Collector – Ingest the telemetry data and persist it.&lt;/li&gt;
&lt;li&gt;DB – Stores all the telemetry data.&lt;/li&gt;
&lt;li&gt;Visualization – UI to display traces.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Your end goal is to visualize quality traces and have the ability to understand your system and troubleshoot issues. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Here is the TL;DR version of how it works:&lt;/em&gt;&lt;/strong&gt; the OpenTelemetry SDK sends data to the collector that saves the data in a database. The visualization layer then queries the DB and displays your beautiful traces. &lt;/p&gt;

&lt;p&gt;Once you have this setup, you are a happy engineer!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Vhl43WDh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/treo3tuhwv5b0tsw8hzv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Vhl43WDh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/treo3tuhwv5b0tsw8hzv.png" alt="OpenTelemetry deployment architecture" width="880" height="580"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When it comes to the visualization layer, you have two options: a vendor (like &lt;a href="https://www.aspecto.io/?utm_source=post&amp;amp;utm_medium=dev.to&amp;amp;utm_campaign=opentelemetry-deployment-methods-sdk-and-collector"&gt;Aspecto&lt;/a&gt;) or an open-source (&lt;a href="https://www.jaegertracing.io/"&gt;Jaeger&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f3UgePRp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zojhgsusms25avw71o7o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f3UgePRp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zojhgsusms25avw71o7o.png" alt="Aspecto trace visualization" width="880" height="505"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#deployment-methods"&gt;
  &lt;/a&gt;
  Deployment Methods
&lt;/h1&gt;

&lt;p&gt;When it comes to collecting and ingesting the data, there are two components in play:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The &lt;a href="https://opentelemetry.io/docs/concepts/components/#specification"&gt;SDK&lt;/a&gt;: in charge of collecting the data.&lt;/li&gt;
&lt;li&gt;The &lt;a href="https://opentelemetry.io/docs/collector/"&gt;Collector&lt;/a&gt;: the component responsible for how to receive, process, and export telemetry data.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can choose between the open source-only path, the vendor path, or a combination of the two.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#choosing-a-vendor-an-open-sourcevendor-combo"&gt;
  &lt;/a&gt;
  Choosing a vendor / an open source-vendor combo
&lt;/h2&gt;

&lt;p&gt;There are a few ways to go about it:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-you-collect-the-data-sdk-distro"&gt;
  &lt;/a&gt;
  How you collect the data (SDK / Distro)
&lt;/h3&gt;

&lt;p&gt;Vendors may tell you to install their OpenTelemetry distribution (also referred to as distro), or you can install the native out-of-the-box OpenTelemetry SDK.&lt;/p&gt;

&lt;p&gt;An OpenTelemetry distribution (&lt;a href="https://opentelemetry.io/docs/concepts/distributions/#what-is-a-distribution"&gt;distro&lt;/a&gt;) is a customized version of an OpenTelemetry component. Essentially, it is an OpenTelemetry SDK with some customizations that are vendor, or end-user-specific.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#where-to-send-the-data-collector"&gt;
  &lt;/a&gt;
  Where to send the data (Collector)
&lt;/h3&gt;

&lt;p&gt;If you choose to install the OpenTelemetry native SDK, you can send data directly to the vendor or send data to your OpenTelemetry collector that then sends it to the vendor.&lt;/p&gt;

&lt;p&gt;In any case, &lt;strong&gt;&lt;em&gt;you must install some OpenTelemetry SDK&lt;/em&gt;&lt;/strong&gt; in your services. It can be either the OpenTelemetry out-of-the-box SDK or a vendor distro. &lt;/p&gt;

&lt;p&gt;Pro tip: always prefer going vendor-neutral unless you get significant value for using the vendor distro.&lt;/p&gt;

&lt;p&gt;As for the OpenTelemetry Collector, you do not have to use it. As I mentioned above, you can send data directly to the vendor from the OpenTelemetry SDK or send it to a collector you manage and from there to the vendor.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#choosing-an-open-source"&gt;
  &lt;/a&gt;
  Choosing an open source
&lt;/h3&gt;

&lt;p&gt;If you choose the open-source-only path, you must run the whole stack yourself (i.e., OpenTelemetry SDK, Collector, Jaeger as a visualization layer). It has now become your operational responsibility (scaling, securing, DRP, etc.) – Are you ready for the challenge?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SQoID3ze--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jickjwohgmzwm6bff3vm.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SQoID3ze--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jickjwohgmzwm6bff3vm.jpg" alt="OpenTelemetry deployment decision tree" width="880" height="651"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#using-a-vendor-distro-pros-amp-cons"&gt;
  &lt;/a&gt;
  Using a Vendor Distro: Pros &amp;amp; Cons
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros
&lt;/h2&gt;

&lt;p&gt;The easiest and simplest way. Many times it ends with a few lines of code, and the vendor does the heavy lifting for you. You also have the vendor’s full support if anything goes wrong.     &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons
&lt;/h2&gt;

&lt;p&gt;Vendor lock. If you ever decide to change vendors, make sure you have enough capacity to do so and that the new vendor’s offer is worth it because it will take plenty of time and effort.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#managing-collector-on-your-own-pros-amp-cons"&gt;
  &lt;/a&gt;
  Managing Collector on Your Own: Pros &amp;amp; Cons
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros
&lt;/h2&gt;

&lt;p&gt;This option gives you the most flexibility to decide where you want to send your data.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons
&lt;/h2&gt;

&lt;p&gt;Managing a collector on your own takes time and knowledge – do you have that?&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#should-you-manage-an-opentelemetry-collector"&gt;
  &lt;/a&gt;
  Should You Manage an OpenTelemetry Collector?
&lt;/h1&gt;

&lt;p&gt;Here are a few tips to help you decide if you should manage a collector on your own:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The collector receives a lot of data. For every API call, DB query, cloud vendor interaction, or 3rd party API call your back end is handing, the collector will receive one event (one span in OpenTelemetry terminology). &lt;strong&gt;Are you experienced in managing data on a large scale?&lt;/strong&gt; Do you have time to learn how to optimize the OpenTelemetry Collector? If yes, consider running it yourself.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Do you have the capacity to make a disaster recovery plan for when things go sideways with the collector?&lt;/strong&gt; If the answer is no, I would suggest not running it on your own. Telemetry data becomes the data to debug/troubleshoot your production, which means it has to be available at all times.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Are you running OpenTelemetry primarily for traces, or are you interested in metrics and logs as well?&lt;/strong&gt; OpenTelemetry can collect logs, traces, and metrics. Sending them all to one backend and then distributing them to different vendors / open sources gives you a lot of power.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Running your collector allows you to ship data anywhere and change it as you see fit. For example, you can start with one vendor and flip it in a simple configuration change. You can even run multiple POCs with vendors and open sources at the same time quite easily. The price is operational.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-bottom-line"&gt;
  &lt;/a&gt;
  The Bottom Line
&lt;/h1&gt;

&lt;p&gt;Here is a quick summary of our deployment options:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Use a vendor’s distro.&lt;/li&gt;
&lt;li&gt;Use the OpenTelemetry native SDK, and send data directly to the vendor’s collector.&lt;/li&gt;
&lt;li&gt;Use an OpenTelemetry SDK, send data to your collector, and then to the collector provided by the vendor.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It all mainly comes down to whether you have the capacity and resources to set up and manage all the components on your own – in this case, you should give the open-source path a try. &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>opentelemetry</category>
      <category>opensource</category>
      <category>microservices</category>
    </item>
    <item>
      <title>Type-safe JSON.parse() with joi</title>
      <author>armenhalajyan</author>
      <pubDate>Tue, 07 Dec 2021 17:03:23 +0000</pubDate>
      <link>https://dev.to/armenhalajyan/type-safe-jsonparse-with-joi-4ja</link>
      <guid>https://dev.to/armenhalajyan/type-safe-jsonparse-with-joi-4ja</guid>
      <description>&lt;p&gt;As developers, we often interact with APIs and databases that return a response in &lt;code&gt;JSON&lt;/code&gt; format. To parse that &lt;code&gt;JSON&lt;/code&gt; response we have to reach for the &lt;code&gt;JSON.parse()&lt;/code&gt; method. &lt;br&gt;
By default, &lt;code&gt;JSON.parse()&lt;/code&gt; will return the object with type &lt;code&gt;any&lt;/code&gt;. This means that we can simply declare the type of our object inline, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;MyObject&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;key1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;key2&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;key3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;jsonString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myObject&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;MyObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;jsonString&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This would be sufficient if we were absolutely sure that &lt;code&gt;jsonString&lt;/code&gt; is assignable to type &lt;code&gt;MyObject&lt;/code&gt;. However, if for any reason the API sends us a different response, Typescript will not prevent us from misusing that response and potentially getting runtime errors.&lt;/p&gt;

&lt;p&gt;To address this issue we can use a runtime data validator such as &lt;a href="https://www.npmjs.com/package/joi"&gt;joi&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ObjectSchema&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ValidationError&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;joi&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;typedParse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;TSchema&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;jsonString&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ObjectSchema&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;TSchema&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;TSchema&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;warning&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;TSchema&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;error&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;ValidationError&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;warning&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;unknown&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
        &lt;span class="nx"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;jsonString&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="c1"&gt;// handle error and warning cases as needed&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;warning&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;warning&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can import and use this reusable function anywhere we use &lt;code&gt;JSON.parse()&lt;/code&gt; by providing the &lt;code&gt;JSON&lt;/code&gt; string and the corresponding joi schema:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Joi&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;joi&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;typedParse&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./util/typedParse.ts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;MyObject&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;key1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;key2&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;key3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;jsonString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;schema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Joi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;MyObject&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;key1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Joi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="na"&gt;key2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Joi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="na"&gt;key3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Joi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;typedParse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;jsonString&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This allows us to take advantage of all the type safety and autocompletion that Typescript offers when the API request matches what we expect, and at the same time prevents unexpected behavior when the API returns a different response.&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>showdev</category>
      <category>webdev</category>
      <category>discuss</category>
    </item>
    <item>
      <title>
1 line of code: How to capitalise a string</title>
      <author>martin krause</author>
      <pubDate>Tue, 07 Dec 2021 16:58:44 +0000</pubDate>
      <link>https://dev.to/martinkr/1-line-of-code-how-to-capitalise-a-string-10nh</link>
      <guid>https://dev.to/martinkr/1-line-of-code-how-to-capitalise-a-string-10nh</guid>
      <description>&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;capitalise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;charAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;`;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Returns a new capitalised string.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#the-repository-amp-npm-package"&gt;
  &lt;/a&gt;
  The repository &amp;amp; npm package
&lt;/h2&gt;

&lt;p&gt;You can find the all the utility functions from this series at &lt;a href="https://github.com/martinkr/onelinecode"&gt;github.com/martinkr/onelinecode&lt;/a&gt;&lt;br&gt;
The library is also published to &lt;a href="https://www.npmjs.com/package/@onelinecode/onelinecode"&gt;npm as @onelinecode&lt;/a&gt; for your convenience.&lt;/p&gt;

&lt;p&gt;The code and the npm package will be updated every time I publish a new article.&lt;/p&gt;




&lt;p&gt;Follow me on &lt;a href="http://twitter.com/_martinkr"&gt;Twitter: @martinkr&lt;/a&gt; and consider to &lt;a href="https://www.buymeacoffee.com/martinkr"&gt;buy me a coffee&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@zoo_monkey"&gt;zoo_monkey&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/fuji"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://modernfrontend.dev/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cH97ToOx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://modernfrontend.dev/banner/banner_583-111.png" alt="Subscribe to the weekly modern frontend development newsletter" width="583" height="111"&gt;&lt;/a&gt;&lt;/p&gt;




</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>performance</category>
      <category>codequality</category>
    </item>
    <item>
      <title>Comparing Previous useEffect Values in React</title>
      <author>Mike Cavaliere</author>
      <pubDate>Tue, 07 Dec 2021 16:55:43 +0000</pubDate>
      <link>https://dev.to/mcavaliere/comparing-previous-useeffect-values-in-react-2o4g</link>
      <guid>https://dev.to/mcavaliere/comparing-previous-useeffect-values-in-react-2o4g</guid>
      <description>&lt;p&gt;With functional components now being the standard in React, we lost one notable perk of using the lifecycle hooks (such as &lt;code&gt;componentDidUpdate()&lt;/code&gt;) of class-based components: the intrinsic ability to compare previous values to new ones. &lt;/p&gt;

&lt;p&gt;If I wanted to respond to a component's "count" change for example, I could do something like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;componentDidUpdate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prevProps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;prevState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;prevProps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Count incremented! Do something.&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I came across the need to do this while working on &lt;a href="https://github.com/mcavaliere/emoji-battle"&gt;Emoji Battle&lt;/a&gt; yesterday—I wanted to show an animation anytime an emoji's vote count incremented. &lt;/p&gt;

&lt;p&gt;Luckily &lt;a href="https://stackoverflow.com/a/57706747"&gt;Stack Overflow had a great solution&lt;/a&gt; as usual, which I turned into a hook I'll probably reuse in the future. &lt;/p&gt;

&lt;p&gt;Basically you create a very simple custom hook that uses a React ref to track the previous value, and refer to it in the useEffect.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;usePreviousValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Based on this, I used it to increment my Emoji counter as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;controls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useAnimation&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;previousValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;usePreviousValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;previousValue&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;previousValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

      &lt;span class="c1"&gt;// Trigger the framer-motion animation&lt;/span&gt;
      &lt;span class="nx"&gt;controls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="na"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Try this &lt;code&gt;usePreviousValue&lt;/code&gt; hook out next time you need to track value changes in React functional components. &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>hooks</category>
      <category>useeffect</category>
    </item>
    <item>
      <title>New Dev into Ubuntu</title>
      <author>Angelo Rafael</author>
      <pubDate>Tue, 07 Dec 2021 16:55:18 +0000</pubDate>
      <link>https://dev.to/angelorpt/new-dev-into-ubuntu-35pn</link>
      <guid>https://dev.to/angelorpt/new-dev-into-ubuntu-35pn</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;A alguns meses decidi migrar e tornar-me um Dev em Linux. Analisei várias opções e a que me pareceu mais evidente para assumir como distro oficial foi a Ubuntu. &lt;br&gt;
Mas e quanto aos programas que eu utilizava? Tem versões para Ubuntu, ou tem alternativas equivalentes? Pensando nisso eu montei o passo-a-passo dos principais programas que utilizo como usuário Linux e como instalá-los, praticamente um cheatsheet.&lt;br&gt;
Espero que seja útil para todos que, como eu, estão em processo de migração.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Google Chrome&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
&lt;span class="nb"&gt;sudo &lt;/span&gt;apt &lt;span class="nb"&gt;install&lt;/span&gt; ./google-chrome-stable_current_amd64.deb
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Curl&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;apt &lt;span class="nb"&gt;install &lt;/span&gt;curl
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Imwheel&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Programa que altera a configuração das linhas saltadas ao rodar o scroll do mouse.
&lt;/li&gt;
&lt;/ul&gt;

&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;apt-get &lt;span class="nb"&gt;install &lt;/span&gt;imwheel

&lt;span class="c"&gt;# Abra o arquivo&lt;/span&gt;
gedit ~/.imwheelrc

&lt;span class="c"&gt;# Cole as seguintes linhas e salve&lt;/span&gt;
&lt;span class="s2"&gt;".*"&lt;/span&gt;
None,      Up,   Button4, 3
None,      Down, Button5, 3
Control_L, Up,   Control_L|Button4
Control_L, Down, Control_L|Button5
Shift_L,   Up,   Shift_L|Button4
Shift_L,   Down, Shift_L|Button5

&lt;span class="c"&gt;# Para executar, no terminal&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;imwheel

&lt;span class="c"&gt;# Para encerrar&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;kill &lt;/span&gt;imwheel
&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Firacode&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fonte que utilizo para desenvolvimento.
&lt;/li&gt;
&lt;/ul&gt;

&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# !/usr/bin/env bash&lt;/span&gt;

&lt;span class="nv"&gt;fonts_dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;HOME&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/.local/share/fonts"&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;fonts_dir&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"mkdir -p &lt;/span&gt;&lt;span class="nv"&gt;$fonts_dir&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    &lt;span class="nb"&gt;mkdir&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;fonts_dir&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;else
    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Found fonts dir &lt;/span&gt;&lt;span class="nv"&gt;$fonts_dir&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;fi

&lt;/span&gt;&lt;span class="nv"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;5.2
&lt;span class="nv"&gt;zip&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;Fira_Code_v&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;version&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;.zip
curl &lt;span class="nt"&gt;--fail&lt;/span&gt; &lt;span class="nt"&gt;--location&lt;/span&gt; &lt;span class="nt"&gt;--show-error&lt;/span&gt; https://github.com/tonsky/FiraCode/releases/download/&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;version&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;/&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;zip&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="nt"&gt;--output&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;zip&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;
unzip &lt;span class="nt"&gt;-o&lt;/span&gt; &lt;span class="nt"&gt;-q&lt;/span&gt; &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;fonts_dir&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;zip&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;
&lt;span class="nb"&gt;rm&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;zip&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"fc-cache -f"&lt;/span&gt;
fc-cache &lt;span class="nt"&gt;-f&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Git&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;apt &lt;span class="nb"&gt;install &lt;/span&gt;git-all

&lt;span class="c"&gt;# generate key ssh&lt;/span&gt;
ssh-keygen &lt;span class="nt"&gt;-t&lt;/span&gt; rsa &lt;span class="nt"&gt;-b&lt;/span&gt; 4096 &lt;span class="nt"&gt;-C&lt;/span&gt; &lt;span class="s2"&gt;"your_email@example.com"&lt;/span&gt;

&lt;span class="c"&gt;# exibindo ssh file&lt;/span&gt;
&lt;span class="nb"&gt;ls&lt;/span&gt; &lt;span class="nt"&gt;-al&lt;/span&gt; ~/.ssh

&lt;span class="c"&gt;# copy ssh key created&lt;/span&gt;
&lt;span class="nb"&gt;cat&lt;/span&gt; ~/.ssh/id_rsa.pub
&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;zsh&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Terminal
&lt;/li&gt;
&lt;/ul&gt;

&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;apt-get update

&lt;span class="nb"&gt;sudo &lt;/span&gt;apt-get &lt;span class="nb"&gt;install &lt;/span&gt;zsh

&lt;span class="c"&gt;# oh-my-szh&lt;/span&gt;
&lt;span class="c"&gt;# Via curl&lt;/span&gt;
sh &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;curl &lt;span class="nt"&gt;-fsSL&lt;/span&gt; https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

&lt;span class="c"&gt;# Via wget&lt;/span&gt;
sh &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;wget https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh &lt;span class="nt"&gt;-O&lt;/span&gt; -&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Gogh&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Configuração de cores e temas dos terminal gnome
&lt;/li&gt;
&lt;/ul&gt;

&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Instalação&lt;/span&gt;
&lt;span class="c"&gt;# Para instalar e utilizar o Gogh é muito simples. &lt;/span&gt;
&lt;span class="c"&gt;# Primeiramente certifique-se de que possui as dependências, &lt;/span&gt;
&lt;span class="c"&gt;# exemplo para sistemas baseados em APT:&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;apt &lt;span class="nb"&gt;install &lt;/span&gt;dconf-cli uuid-runtime wget

&lt;span class="c"&gt;# Após isso é só escolher um dos comandos abaixo, como wget ou curl:&lt;/span&gt;
bash &lt;span class="nt"&gt;-c&lt;/span&gt;  &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;wget &lt;span class="nt"&gt;-qO-&lt;/span&gt; https://git.io/vQgMr&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Snap&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Gerenciador de instalação de pacotes.
&lt;/li&gt;
&lt;/ul&gt;

&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;apt update
&lt;span class="nb"&gt;sudo &lt;/span&gt;apt &lt;span class="nb"&gt;install &lt;/span&gt;snapd
&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Free Download Manager&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# https://www.freedownloadmanager.org/pt/&lt;/span&gt;

wget https://dn3.freedownloadmanager.org/6/latest/freedownloadmanager.deb
&lt;span class="nb"&gt;sudo &lt;/span&gt;dpkg &lt;span class="nt"&gt;-i&lt;/span&gt; freedownloadmanager.deb
&lt;span class="nb"&gt;sudo &lt;/span&gt;apt &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-f&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;FreeFileSync&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Programa que sincroniza dois diretórios.
&lt;/li&gt;
&lt;/ul&gt;

&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;wget&lt;/span&gt; &lt;span class="nx"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//freefilesync.org/download/FreeFileSync_11.14_Linux.tar.gz | bash&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Docker&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Container no Ubuntu
&lt;/li&gt;
&lt;/ul&gt;

&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Fonte&lt;/span&gt;
&lt;span class="c"&gt;# https://docs.docker.com/engine/install/ubuntu/&lt;/span&gt;

&lt;span class="c"&gt;# Remover versões antigas&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;apt-get remove docker docker-engine docker.io containerd runc

&lt;span class="c"&gt;# Atualizar &lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;apt-get update

&lt;span class="c"&gt;# Instalar pacotes necessários&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;apt-get &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    apt-transport-https &lt;span class="se"&gt;\&lt;/span&gt;
    ca-certificates &lt;span class="se"&gt;\&lt;/span&gt;
    curl &lt;span class="se"&gt;\&lt;/span&gt;
    gnupg &lt;span class="se"&gt;\&lt;/span&gt;
    lsb-release

&lt;span class="c"&gt;# Adicionar o repositório&lt;/span&gt;
curl &lt;span class="nt"&gt;-fsSL&lt;/span&gt; https://download.docker.com/linux/ubuntu/gpg | &lt;span class="nb"&gt;sudo &lt;/span&gt;gpg &lt;span class="nt"&gt;--dearmor&lt;/span&gt; &lt;span class="nt"&gt;-o&lt;/span&gt; /usr/share/keyrings/docker-archive-keyring.gpg

&lt;span class="c"&gt;# Definir a versão estável do repositório&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="s2"&gt;"deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;&lt;span class="s2"&gt;
  &lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;lsb_release &lt;span class="nt"&gt;-cs&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt; stable"&lt;/span&gt; | &lt;span class="nb"&gt;sudo tee&lt;/span&gt; /etc/apt/sources.list.d/docker.list &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; /dev/null

&lt;span class="c"&gt;# Instalar Docker Engine&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;apt-get update
&lt;span class="nb"&gt;sudo &lt;/span&gt;apt-get &lt;span class="nb"&gt;install &lt;/span&gt;docker-ce docker-ce-cli containerd.io

&lt;span class="c"&gt;# Testando instalação&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;docker run hello-world

&lt;span class="c"&gt;# Docker with non-root user&lt;/span&gt;
&lt;span class="c"&gt;# https://docs.docker.com/engine/install/linux-postinstall/&lt;/span&gt;

&lt;span class="c"&gt;# 1. Create the docker group.&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;groupadd docker
&lt;span class="c"&gt;# 2. Add your user to the docker group.&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;usermod &lt;span class="nt"&gt;-aG&lt;/span&gt; docker &lt;span class="nv"&gt;$USER&lt;/span&gt;
&lt;span class="c"&gt;# 3. Log out and log back in so that your group membership is re-evaluated.&lt;/span&gt;
&lt;span class="c"&gt;#    If testing on a virtual machine, it may be necessary to restart the virtual machine for changes to take effect.&lt;/span&gt;
&lt;span class="c"&gt;#    On a desktop Linux environment such as X Windows, log out of your session completely and then log back in.&lt;/span&gt;
&lt;span class="c"&gt;#    On Linux, you can also run the following command to activate the changes to groups:&lt;/span&gt;
newgrp docker
&lt;span class="c"&gt;# 4. Testing&lt;/span&gt;
docker run hello-world
&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Docker-compose&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# https://docs.docker.com/compose/install/&lt;/span&gt;

&lt;span class="c"&gt;# Run this command to download the current stable release of Docker Compose:&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;curl &lt;span class="nt"&gt;-L&lt;/span&gt; &lt;span class="s2"&gt;"https://github.com/docker/compose/releases/download/1.29.2/docker-compose-&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;uname&lt;/span&gt; &lt;span class="nt"&gt;-s&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;uname&lt;/span&gt; &lt;span class="nt"&gt;-m&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="nt"&gt;-o&lt;/span&gt; /usr/local/bin/docker-compose

&lt;span class="c"&gt;# Apply executable permissions to the binary:&lt;/span&gt;
&lt;span class="nb"&gt;sudo chmod&lt;/span&gt; +x /usr/local/bin/docker-compose

&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;espanso&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Programa que automatiza comandos de texto.
&lt;/li&gt;
&lt;/ul&gt;

&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#snap&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;apt-get update
&lt;span class="nb"&gt;sudo &lt;/span&gt;apt-get &lt;span class="nb"&gt;install &lt;/span&gt;xclip
&lt;span class="nb"&gt;sudo &lt;/span&gt;snap &lt;span class="nb"&gt;install &lt;/span&gt;espanso &lt;span class="nt"&gt;--classic&lt;/span&gt;
espanso start

&lt;span class="c"&gt;#debian&lt;/span&gt;
wget https://github.com/federico-terzi/espanso/releases/latest/download/espanso-debian-amd64.deb
&lt;span class="nb"&gt;sudo &lt;/span&gt;apt &lt;span class="nb"&gt;install&lt;/span&gt; ./espanso-debian-amd64.deb
espanso start
&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Brave&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;apt &lt;span class="nb"&gt;install &lt;/span&gt;apt-transport-https curl

&lt;span class="nb"&gt;sudo &lt;/span&gt;curl &lt;span class="nt"&gt;-fsSLo&lt;/span&gt; /usr/share/keyrings/brave-browser-archive-keyring.gpg https://brave-browser-apt-release.s3.brave.com/brave-browser-archive-keyring.gpg

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"deb [signed-by=/usr/share/keyrings/brave-browser-archive-keyring.gpg arch=amd64] https://brave-browser-apt-release.s3.brave.com/ stable main"&lt;/span&gt;|sudo &lt;span class="nb"&gt;tee&lt;/span&gt; /etc/apt/sources.list.d/brave-browser-release.list

&lt;span class="nb"&gt;sudo &lt;/span&gt;apt update

&lt;span class="nb"&gt;sudo &lt;/span&gt;apt &lt;span class="nb"&gt;install &lt;/span&gt;brave-browser
&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Notepad++&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;snap &lt;span class="nb"&gt;install &lt;/span&gt;notepadqq
&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;gparted&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Gerenciador de partições
&lt;/li&gt;
&lt;/ul&gt;

&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;apt-get update
&lt;span class="nb"&gt;sudo &lt;/span&gt;apt-get &lt;span class="nb"&gt;install &lt;/span&gt;gparted &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;sudo &lt;/span&gt;gparted
&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;swap&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Como alterar a memória swap
&lt;/li&gt;
&lt;/ul&gt;

&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Turn swap off&lt;/span&gt;
&lt;span class="c"&gt;# This moves stuff in swap to the main memory and might take several minutes&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;swapoff &lt;span class="nt"&gt;-a&lt;/span&gt;

&lt;span class="c"&gt;# Create an empty swapfile&lt;/span&gt;
&lt;span class="c"&gt;# Note that "1G" is basically just the unit and count is an integer.&lt;/span&gt;
&lt;span class="c"&gt;# Together, they define the size. In this case 8GB.&lt;/span&gt;
&lt;span class="nb"&gt;sudo dd &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/zero &lt;span class="nv"&gt;of&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/swapfile &lt;span class="nv"&gt;bs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;12G &lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;8
&lt;span class="c"&gt;# Set the correct permissions&lt;/span&gt;
&lt;span class="nb"&gt;sudo chmod &lt;/span&gt;0600 /swapfile

&lt;span class="c"&gt;# Set up a Linux swap area&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;mkswap /swapfile
&lt;span class="c"&gt;# Turn the swap on&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;swapon /swapfile

&lt;span class="nb"&gt;grep &lt;/span&gt;Swap /proc/meminfo

&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Node&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# fonte: https://github.com/nodesource/distributions/blob/master/README.md&lt;/span&gt;

&lt;span class="c"&gt;# Using Ubuntu&lt;/span&gt;
curl &lt;span class="nt"&gt;-fsSL&lt;/span&gt; https://deb.nodesource.com/setup_14.x | &lt;span class="nb"&gt;sudo&lt;/span&gt; &lt;span class="nt"&gt;-E&lt;/span&gt; bash -
&lt;span class="nb"&gt;sudo &lt;/span&gt;apt-get &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-y&lt;/span&gt; nodejs

&lt;span class="c"&gt;# npm &lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;apt-get &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-y&lt;/span&gt; build-essential
&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;NVM&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight shell"&gt;&lt;code&gt;wget &lt;span class="nt"&gt;-qO-&lt;/span&gt; https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash
curl &lt;span class="nt"&gt;-o-&lt;/span&gt; https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash

&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;NVM_DIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nt"&gt;-z&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;XDG_CONFIG_HOME&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;printf&lt;/span&gt; %s &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;HOME&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/.nvm"&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;printf&lt;/span&gt; %s &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;XDG_CONFIG_HOME&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/nvm"&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nt"&gt;-s&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$NVM_DIR&lt;/span&gt;&lt;span class="s2"&gt;/nvm.sh"&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\.&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$NVM_DIR&lt;/span&gt;&lt;span class="s2"&gt;/nvm.sh"&lt;/span&gt; &lt;span class="c"&gt;# This loads nvm&lt;/span&gt;

nvm list-remote
nvm &lt;span class="nb"&gt;install &lt;/span&gt;Fermium
nvm list

v10.24.1
v12.22.4
v13.14.0
v14.18.1
v15.14.0
v16.12.0
&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Teams&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# https://www.edivaldobrito.com.br/como-instalar-o-microsoft-teams-no-linux-ubuntu-fedora-opensuse-e-derivados/&lt;/span&gt;

&lt;span class="nb"&gt;uname&lt;/span&gt; &lt;span class="nt"&gt;-m&lt;/span&gt;
wget &lt;span class="s2"&gt;"https://teams.microsoft.com/downloads/desktopurl?env=production&amp;amp;plat=linux&amp;amp;arch=x64&amp;amp;download=true&amp;amp;linuxArchiveType=deb"&lt;/span&gt; &lt;span class="nt"&gt;-O&lt;/span&gt; teams.deb | bash
&lt;span class="nb"&gt;sudo &lt;/span&gt;dpkg &lt;span class="nt"&gt;-i&lt;/span&gt; teams.deb

&lt;span class="nb"&gt;sudo &lt;/span&gt;apt-get &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-f&lt;/span&gt; 
&lt;span class="c"&gt;# ou&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;apt &lt;span class="nb"&gt;install&lt;/span&gt; ./teams.deb

&lt;span class="c"&gt;# remover&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;apt-get remove teams&lt;span class="k"&gt;*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Calibre&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Gerenciador de ebooks
&lt;/li&gt;
&lt;/ul&gt;

&lt;pre class="highlight shell"&gt;&lt;code&gt;curl &lt;span class="nt"&gt;-L&lt;/span&gt; https://calibre-ebook.com/dist/src | &lt;span class="nb"&gt;tar &lt;/span&gt;xvJ 
&lt;span class="nb"&gt;cd &lt;/span&gt;calibre&lt;span class="k"&gt;*&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;sudo &lt;/span&gt;python3 setup.py &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Wallch&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Alterna os papéis de parede automaticamente
&lt;/li&gt;
&lt;/ul&gt;

&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# https://www.edivaldobrito.com.br/papel-de-parede-automatico-wallch/&lt;/span&gt;

&lt;span class="c"&gt;# Adiciona o repositório&lt;/span&gt;
&lt;span class="c"&gt;# sudo add-apt-repository ppa:wallch/wallch-daily&lt;/span&gt;

&lt;span class="c"&gt;# Atualiza a lista de repositório no Linux&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;apt-get update

&lt;span class="c"&gt;# Instala o Wallch&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;apt-get &lt;span class="nb"&gt;install &lt;/span&gt;wallch
&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Slim PDF&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Versão do Sistema&lt;/span&gt;
&lt;span class="nb"&gt;uname&lt;/span&gt; &lt;span class="nt"&gt;-m&lt;/span&gt;

&lt;span class="c"&gt;# Baixar o arquivo .deb&lt;/span&gt;
wget https://cdn.investintech.com/download/InstallSlimPDFReader.deb &lt;span class="nt"&gt;-O&lt;/span&gt; slim.deb

&lt;span class="c"&gt;# Instalar o programa&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;dpkg &lt;span class="nt"&gt;-i&lt;/span&gt; slim.deb

&lt;span class="nb"&gt;sudo &lt;/span&gt;apt-get &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-f&lt;/span&gt;

&lt;span class="c"&gt;# Remover o programa&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;apt-get remove slim&lt;span class="k"&gt;*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Open Connect (VPN)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Programa para VPN
&lt;/li&gt;
&lt;/ul&gt;

&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Instalar pacotes do Open Connect&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;apt-get &lt;span class="nb"&gt;install &lt;/span&gt;openconnect network-manager-openconnect network-manager-openconnect-gnome

&lt;span class="c"&gt;# Estabelecer conexão com VPN&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;openconnect &lt;span class="nt"&gt;-u&lt;/span&gt; user &lt;span class="nt"&gt;--passwd-on-stdin&lt;/span&gt; vpn.example.com
&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Flameshot&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Programa de printscreen
&lt;/li&gt;
&lt;/ul&gt;

&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;sudo&lt;/span&gt; &lt;span class="nx"&gt;apt&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="nx"&gt;flameshot&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;NoiseTorch&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Supressor de ruídos para Linux
&lt;/li&gt;
&lt;/ul&gt;

&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# https://github.com/lawl/NoiseTorch&lt;/span&gt;

wget https://github.com/lawl/NoiseTorch/releases/download/0.11.4/NoiseTorch_x64.tgz | bash

&lt;span class="c"&gt;# Unpack the tgz file, into your home directory.&lt;/span&gt;
&lt;span class="nb"&gt;tar&lt;/span&gt; &lt;span class="nt"&gt;-C&lt;/span&gt; &lt;span class="nv"&gt;$HOME&lt;/span&gt; &lt;span class="nt"&gt;-xzf&lt;/span&gt; NoiseTorch_x64.tgz

&lt;span class="c"&gt;# This will unpack the application, icon and desktop entry to the correct place.&lt;/span&gt;
&lt;span class="c"&gt;# Depending on your desktop environment you may need to wait for it to rescan for applications, or tell it to do a refresh now.&lt;/span&gt;

&lt;span class="c"&gt;# With gnome this can be done with:&lt;/span&gt;
gtk-update-icon-cache

&lt;span class="c"&gt;# You now have a noisetorch binary and desktop entry on your system.&lt;/span&gt;
&lt;span class="c"&gt;# Give it the required permissions with setcap:&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;setcap &lt;span class="s1"&gt;'CAP_SYS_RESOURCE=+ep'&lt;/span&gt; ~/.local/bin/noisetorch

&lt;span class="c"&gt;# If noisetorch doesn't start after installation, you may also have to make sure &lt;/span&gt;
&lt;span class="c"&gt;# that ~/.local/bin is in your PATH. On most distributions e.g. Ubuntu, &lt;/span&gt;
&lt;span class="c"&gt;# this should be the case by default. If it's not, make sure to append&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;&lt;span class="s2"&gt;/.local/bin"&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
    &lt;/span&gt;&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;&lt;span class="s2"&gt;/.local/bin:&lt;/span&gt;&lt;span class="nv"&gt;$PATH&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="c"&gt;# to your ~/.profile. If you do already have that, you may have to log in and &lt;/span&gt;
&lt;span class="c"&gt;# out for it to actually apply if this is the first time you're using ~/.local/bin.&lt;/span&gt;

&lt;span class="c"&gt;# ----------------&lt;/span&gt;
&lt;span class="c"&gt;# Removendo Noise Torch&lt;/span&gt;
&lt;span class="nb"&gt;rm&lt;/span&gt; ~/.local/bin/noisetorch
&lt;span class="nb"&gt;rm&lt;/span&gt; ~/.local/share/applications/noisetorch.desktop
&lt;span class="nb"&gt;rm&lt;/span&gt; ~/.local/share/icons/hicolor/256x256/apps/noisetorch.png
&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Java&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;apt &lt;span class="nb"&gt;install &lt;/span&gt;default-jdk

java &lt;span class="nt"&gt;-version&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;VMWare&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Programa de Máquinas Virtuais
&lt;/li&gt;
&lt;/ul&gt;

&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Download do arquivo&lt;/span&gt;
&lt;span class="c"&gt;# https://www.vmware.com/go/getplayer-linux&lt;/span&gt;

&lt;span class="nb"&gt;sudo &lt;/span&gt;apt update
&lt;span class="nb"&gt;sudo &lt;/span&gt;apt-get &lt;span class="nb"&gt;install &lt;/span&gt;gcc build-essencial
&lt;span class="nb"&gt;sudo chmod &lt;/span&gt;u+x arquivo.bundle
&lt;span class="nb"&gt;sudo&lt;/span&gt; ./arquivo.bundle
&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Snap Store&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;sudo&lt;/span&gt; &lt;span class="nx"&gt;snap&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="nx"&gt;snap&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Snap&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Instalações de programas do snap em lote
&lt;/li&gt;
&lt;/ul&gt;

&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;sudo&lt;/span&gt; &lt;span class="nx"&gt;snap&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="nx"&gt;vlc&lt;/span&gt; &lt;span class="nx"&gt;discord&lt;/span&gt; &lt;span class="nx"&gt;insomnia&lt;/span&gt; &lt;span class="nx"&gt;mailspring&lt;/span&gt; &lt;span class="nx"&gt;notion&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;snap&lt;/span&gt; &lt;span class="nx"&gt;telegram&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;desktop&lt;/span&gt; &lt;span class="nx"&gt;beekeeper&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;studio&lt;/span&gt; &lt;span class="nx"&gt;colorpicker&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="nx"&gt;obs&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;studio&lt;/span&gt; &lt;span class="nx"&gt;teams&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;insiders&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Snap Classic&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;sudo&lt;/span&gt; &lt;span class="nx"&gt;snap&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="nx"&gt;code&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;classic&lt;/span&gt;
&lt;span class="nx"&gt;sudo&lt;/span&gt; &lt;span class="nx"&gt;snap&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="nx"&gt;slack&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;classic&lt;/span&gt;
&lt;span class="nx"&gt;sudo&lt;/span&gt; &lt;span class="nx"&gt;snap&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="nx"&gt;go&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;classic&lt;/span&gt;
&lt;span class="nx"&gt;sudo&lt;/span&gt; &lt;span class="nx"&gt;snap&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="nx"&gt;flutter&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;classic&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Discord&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;sudo&lt;/span&gt; &lt;span class="nx"&gt;snap&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="nx"&gt;discord&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Insomnia&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;snap &lt;span class="nb"&gt;install &lt;/span&gt;insomnia
&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Mailspring&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;snap &lt;span class="nb"&gt;install &lt;/span&gt;mailspring
&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Notion&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;snap &lt;span class="nb"&gt;install &lt;/span&gt;notion-snap
&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Telegram&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;sudo&lt;/span&gt; &lt;span class="nx"&gt;snap&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="nx"&gt;telegram&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;desktop&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Slack&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;sudo&lt;/span&gt; &lt;span class="nx"&gt;snap&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="nx"&gt;slack&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;classic&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;xMind&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;snap &lt;span class="nb"&gt;install &lt;/span&gt;xmind
&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Evince (PDF)&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;snap &lt;span class="nb"&gt;install &lt;/span&gt;evince
&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
  </channel>
</rss>
