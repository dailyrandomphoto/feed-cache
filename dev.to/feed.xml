<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Useful Tools for Every Programmer</title>
      <author>Mark Vassilevskiy</author>
      <pubDate>Fri, 03 Dec 2021 01:32:34 +0000</pubDate>
      <link>https://dev.to/markfusion/useful-tools-for-every-programmer-5dj8</link>
      <guid>https://dev.to/markfusion/useful-tools-for-every-programmer-5dj8</guid>
      <description>&lt;p&gt;Programming is an extremely difficult task. It takes a lot of time and effort to learn, even more so when you are trying to build something from scratch. But what if there was a way to make programming easier? What if you could cut down on the amount of time it took for you to develop your idea? Well, luckily for programmers everywhere, there are many tools that can help increase productivity and efficiency in your job! In this blog post, we will discuss some of these tools and why they should be used by every programmer out there.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#ide-that-suits-for-you"&gt;
  &lt;/a&gt;
  IDE That Suits For You
&lt;/h2&gt;

&lt;p&gt;The first tool that every programmer should use is a good IDE. An IDE, or Integrated Development Environment, provides the user with many useful tools such as debugging and error checking to make programming easier. The IDE that you should use depends on the language of the program. &lt;/p&gt;

&lt;p&gt;For example, if you are programming in Java then it would be a good idea to buy or download an IDE such as IntelliJ IDEA which is made by Jetbrains and was ranked #1 out of all other software development tools (in this list: Programming Tools - Stack Overflow Developer Survey Results 2017). This tool will make your life much easier because it allows for debugging and error checking within the program. It also makes writing code faster and more efficient with its clever refactoring options and clean interface design. &lt;/p&gt;

&lt;p&gt;Other languages have their own respective IDEs available; these include Eclipse (C++), Visual Studio Code (TypeScript, JavaScript, CSS, HTML, PHP), and Visual Studio (C++, CSS, HTML). But if you are programming in a language like Python or Ruby then it would be best to use an IDE that is made specifically for the language. These IDEs include PyCharm (Python) and RubyMine (Ruby on Rails).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#useful-services"&gt;
  &lt;/a&gt;
  Useful Services
&lt;/h2&gt;

&lt;p&gt;For those of you who do not want to purchase another program just for their coding needs, there are some free options available as well! &lt;/p&gt;

&lt;p&gt;Lets Code: Test-Driven JavaScript is an online tutorial where users learn how to code with CoffeeScript by writing tests first; this means that before any code is written into your project you must write out what you expect it to do so when something goes wrong later down the line you will know how to fix it. &lt;/p&gt;

&lt;p&gt;This project is extremely useful because it allows you to learn a new coding language without having any prior experience in the field which can be very beneficial for those who are just starting out! It also provides examples and documentation so that users have support when they get stuck or need help with something specific. &lt;/p&gt;

&lt;p&gt;The website Codecademy, on the other hand, has courses available depending on what programming language you want to use; this includes HTML/CSS, Python, JavaScript (jQuery), Ruby &amp;amp; Rails among many others. These courses allow users to take their knowledge of programming even further by teaching them about algorithms and more advanced techniques necessary for building bigger programs like web applications. So if you already know some coding, these courses will help you build on what you already know by teaching you new practical skills. &lt;/p&gt;

&lt;p&gt;There are also many different services that can be used to learn how to program without having any prior knowledge in the field! Some of them include Learn Python The Hard Way, Coursera’s Programming Languages Specialization (which includes C++), and MIT OpenCourseWare. These free resources allow for users with no programming experience to learn about coding languages like Java or Ruby so they too, soon enough, will become full-fledged programmers! Tools Like This Will Save You Time And Effort&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-make-your-code-readable-and-pretty"&gt;
  &lt;/a&gt;
  How to Make Your Code Readable And Pretty
&lt;/h2&gt;

&lt;p&gt;Programming is an extremely difficult task that takes a lot of time and effort when trying it from scratch. Luckily though there are some very useful tools that can help you write code faster and easier by providing useful error-checking tools, functionality for writing clean code, and much more! &lt;/p&gt;

&lt;p&gt;One of the best tools for helping to debug a program is Debugging Tools For Windows which was created specifically for this purpose. This tool allows users to see what programs are running on their computer as well as change its memory so they can test out different scenarios without having to go through certain parts of their software multiple times or close it all together just because one part bugs them. Another great debugging tool is Valgrind which helps find errors within your source codes such as memory leaks; these issues normally happen when a programmer accidentally forgets closing down open variables in his/her programming after using them throughout the entire program. These tools can be used with any programming language but are most needed for C/C++ because these languages require the programmer to do more on their own without having additional features included, unlike other languages like Python where it automatically handles memory management and similar tasks.&lt;/p&gt;

&lt;p&gt;A great way to make your code cleaner is through Source Code Formatter which helps programmers format their source codes in a uniform manner; this tool not only makes it easier for humans to read but also all of the different programs that you will use throughout the coding process since they too want clean readable data! This means that if you provide them with messy or unorganized information then they won’t work as well (or at all) so formating becomes very important when writing lengthy chunks of code.&lt;/p&gt;

&lt;p&gt;Another great tool is JSLint which was created by Douglas Crockford in order to help programmers write clean and fast JavaScript; this tool can check your source codes for any mistakes or errors that you may have unintentionally made when writing it. This way, the programmer doesn’t need to go back through everything he/she wrote just because they forgot a closing parenthesis somewhere! Tools like these save time and effort since they allow programmers to quickly find what they are looking for without having to read every single line within their program so if one goes missing then it becomes very easy to spot them out! Useful Tools For Every Programmer Useful tools like Debugging Tool For Windows, Valgrind, Source Code Formatter, and JSLint are great tools for programmers to use because they help make coding more manageable and less time-consuming.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;These were Useful Tools For Every Programmer like Debugging Tool For Windows, Valgrind, Source Code Formatter, and JSLint are great tools for programmers to use because they help make coding more manageable and less time-consuming. So if you enjoyed this article and the information that I gave it would be nice if you'll leave a like and subscribe, so you'll never miss any of my future articles&lt;/p&gt;

</description>
      <category>programming</category>
      <category>productivity</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Guide to model training: Part 4 — Ditching datetime</title>
      <author>Mage</author>
      <pubDate>Fri, 03 Dec 2021 01:09:35 +0000</pubDate>
      <link>https://dev.to/mage_ai/guide-to-model-training-part-4-ditching-datetime-2eg6</link>
      <guid>https://dev.to/mage_ai/guide-to-model-training-part-4-ditching-datetime-2eg6</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TLDR
&lt;/h2&gt;

&lt;p&gt;Apply feature engineering by converting time series data to numerical values for training machine learning models.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#outline"&gt;
  &lt;/a&gt;
  Outline
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Recap&lt;/li&gt;
&lt;li&gt;Before we begin&lt;/li&gt;
&lt;li&gt;The datetime data type&lt;/li&gt;
&lt;li&gt;Converting to date&lt;/li&gt;
&lt;li&gt;What’s next?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#recap"&gt;
  &lt;/a&gt;
  Recap
&lt;/h2&gt;

&lt;p&gt;In our series so far, we’ve gone over scaling data to prepare for model training. We started with a dataset filled with categorical and numerical values and scaled them so that a computer could understand them. For the remainder of our dataset, we’re almost ready to begin model training; we just need to scale our dates.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#before-we-begin"&gt;
  &lt;/a&gt;
  Before we begin
&lt;/h2&gt;

&lt;p&gt;In this section, we’ll be revisiting the datatypes of numerical and categorical values. Please read &lt;a href="https://www.mage.ai/blog/qualitative-data"&gt;part 1&lt;/a&gt; and &lt;a href="https://www.mage.ai/blog/scaling-numerical-data"&gt;part 2&lt;/a&gt; before proceeding if you’re unfamiliar with those terms. We’ll be using the same &lt;a href="https://app.box.com/s/ktd1t87fl925hjxkzsclp1343eq822f1"&gt;big_data&lt;/a&gt; dataset used throughout the model training guides.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#importance-of-dates"&gt;
  &lt;/a&gt;
  Importance of dates
&lt;/h2&gt;

&lt;p&gt;When collecting data to feed into machine learning models, it’s common to have data on when a user signed up. The model can use this information to find hidden correlation between users. Maybe there was a sign-up bonus or event for users when creating an account. The data would reflect on the success and failure and would be considered when reviewing the model.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#modern-day-standards"&gt;
  &lt;/a&gt;
  Modern day standards
&lt;/h2&gt;

&lt;p&gt;Dates are important and critical to success, especially when collaborating across different locations or countries. Dates can be written in so many ways, across multiple time zones, so the internet agreed on a standard to be used, under &lt;a href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO 8601&lt;/a&gt;, last updated in 2019. It simplifies dates into what’s known as the datetime format, to represent dates using numerical values to begin formatting.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-datetime-data-types"&gt;
  &lt;/a&gt;
  The datetime data types
&lt;/h2&gt;

&lt;p&gt;Our dates are formatted as 2021–11–30 as an example. It follows a year, month, day format. But when you think about what data type it is, it’s hard to say for sure. A computer thinks of it as an object or string at first. But when humans look at it, it’s obviously a number. So what is the actual data type?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#strftime-format"&gt;
  &lt;/a&gt;
  strftime format
&lt;/h3&gt;

&lt;p&gt;In Pandas, there is a to_datetime function that will convert the datatype to a datetime value. This usually requires a formatter that specifies how to parse the input by year, month, day, day of week, month name, hour, minute, second, and even account for 12 hour time or time zones. Datetimes in Pandas follow the strftime format used in UNIX.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P1hGLj1j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/0%2AWzn-aj10siXS5uHX" alt="" width="880" height="331"&gt;&lt;em&gt;Datetime abbreviations and outputs cheat sheet (Source: &lt;a href="https://devhints.io/datetime"&gt;DevHints&lt;/a&gt;)&lt;/em&gt;
&lt;/center&gt;
&lt;h2&gt;
  &lt;a href="#converting-dates"&gt;
  &lt;/a&gt;
  Converting dates
&lt;/h2&gt;

&lt;p&gt;In our current dataset we have one datetime value, Dt_Customer, logged when a user first signs up for an account. Upon inspection, it’s a string or object data type.&lt;/p&gt;


&lt;center&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PCpsi9lS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r7i2gsa31fmn5sxc3x3a.png" alt="Image description" width="560" height="306"&gt;&lt;/center&gt;
&lt;h3&gt;
  &lt;a href="#string-to-datetime"&gt;
  &lt;/a&gt;
  String to datetime
&lt;/h3&gt;

&lt;p&gt;Looking at the output, we see 21–08–2021, which shows that it is in month, day, year format. By comparing with the cheatsheet, to format it we’ll match it with %d-%m-%Y.&lt;/p&gt;


&lt;center&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kbwOCRQB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zouf263stztqmzy4ixy7.png" alt="Image description" width="880" height="477"&gt;&lt;/center&gt;
&lt;em&gt;The output standard is YYY-MM-DD&lt;/em&gt;
&lt;h3&gt;
  &lt;a href="#datetime-to-integer"&gt;
  &lt;/a&gt;
  Datetime to Integer
&lt;/h3&gt;

&lt;p&gt;But we aren’t completed yet. Even though we have it in datetime format, machines still cannot understand it. To finish off the conversion, we’ll break down the datetime into their own columns for year, month, and day.&lt;/p&gt;

&lt;p&gt;The datetime format must follow the ISO, and contain functions that allow it to parse specific portions. For Pandas we’ll be using the dt.year, dt.month, and dt.day methods.&lt;/p&gt;


&lt;center&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W6ile3db--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lemky5terrqna5owls1p.png" alt="Image description" width="872" height="126"&gt;&lt;/center&gt;

&lt;p&gt;Once we are sure that the values match, let’s remove the original column so the dataset contains only machine readable values.&lt;/p&gt;


&lt;center&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eJjFczSM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oagp1jhjwewe1sq9lm70.png" alt="Image description" width="880" height="827"&gt;&lt;/center&gt;
&lt;h2&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What’s next
&lt;/h2&gt;

&lt;p&gt;Now that all of our data has been modified to be so simple that a computer can understand and generate models. Throughout the series we’ve covered scaling data, filling in missing values, and now converting to datetime. For our finale, we’ll take all of our finished datasets from parts 1 thru 4, and combine them together to begin training a classification model for remarketing on whether we should send or not send another email to our customers.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>machinelearning</category>
      <category>tutorial</category>
      <category>python</category>
    </item>
    <item>
      <title>Hoisting: Some exercises.</title>
      <author>Karen Molina</author>
      <pubDate>Fri, 03 Dec 2021 00:28:16 +0000</pubDate>
      <link>https://dev.to/voidrizoma/hoisting-some-exercises-2efd</link>
      <guid>https://dev.to/voidrizoma/hoisting-some-exercises-2efd</guid>
      <description>&lt;p&gt;Hello! &lt;/p&gt;

&lt;p&gt;This time we will review the hoisting and the scope, one more time. Previously, we check them as concepts. But now, we going to realize come exercises to see how the hoisting and scope work inside the JS engine.&lt;/p&gt;

&lt;p&gt;Remember in JS we have three ways to make a declaration: var, let and const.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;variable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// undefined&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;variable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hi&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;variable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Hi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this case, if we call the variable with the keyword "var" before the initialization, JS returns an undefined value. That's happened because, with the hoisting, anything variable with a "var" keyword has been moved at the top. So, JS moves the initialization, but not the value or the assignation. The value has been assigned in line 2. &lt;/p&gt;

&lt;p&gt;What happens if we try to call our variables with the keywords "let" and "const" before the initialization?&lt;br&gt;
Let's see below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;variable2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;anotherVariable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;variable2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hi, i'm a let&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;anotherVariable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hi, i'm a const&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="c1"&gt;//ReferenceError: Cannot access anotherVariable' before initialization&lt;/span&gt;
&lt;span class="c1"&gt;//ReferenceError: Cannot access 'variable2' before initialization&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this case, we see that JS gives us an error, a specific error called: Reference Error, that's means that JS does not hoist the declarations with those keywords.&lt;/p&gt;

&lt;p&gt;Another issue with the hoisting happens in the functions. In this case, we must see some examples as to how the some of functions can be affected by the hoisting.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;//5&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sum2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;//ReferenceError: Cannot access 'sum2' before initialization&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sum2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;num1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sumNumbers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// ReferenceError: Cannot access 'sumNumbers' before initialization&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sumNumbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this case and always all the functions as function declaration have moved at the top like the variable with "var", but with a small and important difference, in this case, the function work. Why?  The reason is that JS moves not just the initialization as a variable, JS moves the scope too. Meanwhile, a function expression and the arrow functions never will be moved at the top, and JS shows us a reference error if we invoke them before an initialization.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Refactoring GitHub Actions Workflow</title>
      <author>Justin Yoo</author>
      <pubDate>Fri, 03 Dec 2021 00:00:26 +0000</pubDate>
      <link>https://dev.to/azure/refactoring-github-actions-workflow-ih5</link>
      <guid>https://dev.to/azure/refactoring-github-actions-workflow-ih5</guid>
      <description>&lt;p&gt;A while ago, I wrote a blog post about &lt;a href="https://devkimchi.com/2019/09/04/azure-devops-pipelines-refactoring-technics/"&gt;Azure DevOps Pipelines refactoring technics&lt;/a&gt;. &lt;a href="https://docs.github.com/en/actions"&gt;GitHub Actions&lt;/a&gt; is also suitable for building CI/CD pipelines. But, compared to &lt;a href="https://docs.microsoft.com/azure/devops/user-guide/what-is-azure-devops?view=azure-devops&amp;amp;WT.mc_id=dotnet-51099-juyooo&amp;amp;ocid=AID3035186"&gt;Azure DevOps&lt;/a&gt;, there are many spaces to achieve the same efficiency level as Azure DevOps. GitHub Actions has recently released a new feature called &lt;a href="https://docs.github.com/en/actions/learn-github-actions/reusing-workflows"&gt;"Reusable Workflows"&lt;/a&gt;, which you can reduce the refactoring concerns. Throughout this post, I'm going to refactor the existing &lt;a href="https://docs.microsoft.com/azure/static-web-apps/overview?WT.mc_id=dotnet-51099-juyooo&amp;amp;ocid=AID3035186"&gt;Azure Static Web Apps&lt;/a&gt; CI/CD pipeline workflows, using the "reusable workflows" feature of GitHub Actions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#workflow-for-azure-static-web-apps"&gt;
  &lt;/a&gt;
  Workflow for Azure Static Web Apps
&lt;/h2&gt;

&lt;p&gt;While provisioning an &lt;a href="https://docs.microsoft.com/azure/static-web-apps/overview?WT.mc_id=dotnet-51099-juyooo&amp;amp;ocid=AID3035186"&gt;Azure Static Web Apps (ASWA)&lt;/a&gt; instance, GitHub Actions workflow is automatically generated by default. Here's a sample workflow. I'm pretty sure it's not that different from yours.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The problem is that once you provision the ASWA instance, you can't change the name of the auto-generated workflow file. Therefore, you are only allowed to modify the file.&lt;/p&gt;

&lt;p&gt;Let's imagine a situation. You've got a codebase that deploys to multiple Azure Static Web Apps instances – DEV, TEST and PROD, which is pretty common. In that case, you will have as many GitHub Actions workflow files as the number of ASWA instances. But all the workflow files are virtually the same as each other except their filenames. So if you refactor those workflows, the overall process would be more simplified.&lt;/p&gt;

&lt;p&gt;For the refactoring practice, you would use the &lt;a href="https://docs.github.com/en/actions/learn-github-actions/events-that-trigger-workflows#workflow_dispatch"&gt;&lt;code&gt;workflow_dispatch&lt;/code&gt;&lt;/a&gt; event, together with the &lt;a href="https://docs.github.com/en/rest/reference/actions#create-a-workflow-dispatch-event"&gt;webhook event&lt;/a&gt;, to call the refactored workflow. Once it's set up, unless the access token gets invalidated, you'll be able to use the workflow. But what if the access token is expired or compromised? You MUST reissue the token, which is less ideal. How can we work out this situation?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reusable-workflows-or-called-workflow"&gt;
  &lt;/a&gt;
  Reusable Workflows (or Called Workflow)
&lt;/h2&gt;

&lt;p&gt;The reusable workflows use the newly introduced event called &lt;a href="https://docs.github.com/en/actions/learn-github-actions/events-that-trigger-workflows#workflow_call"&gt;&lt;code&gt;workflow_call&lt;/code&gt;&lt;/a&gt;. It reuses the workflows at the job level. Let's refactor the workflow above. Copy both &lt;code&gt;build_and_deploy_job&lt;/code&gt; and &lt;code&gt;close_pull_request_job&lt;/code&gt; jobs and paste both into a new YAML file, which is called either "reusable workflow" or "called workflow".&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;According to the workflow above, there are input variables and secret variables and other variables:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Event Object

&lt;ul&gt;
&lt;li&gt;Event Name: &lt;code&gt;github.event_name&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Event Action: &lt;code&gt;github.event.action&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Secrets

&lt;ul&gt;
&lt;li&gt;Azure Static Web Apps API Token: &lt;code&gt;secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_XXXX_XXXX_XXXX&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;GitHub Token: &lt;code&gt;secrets.GITHUB_TOKEN&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;App Locations

&lt;ul&gt;
&lt;li&gt;Web App: &lt;code&gt;app_location&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;API App: &lt;code&gt;api_location&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Web App Artifact: &lt;code&gt;output_location&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The "called" workflow can't directly access those values defined in the "caller" workflow. Therefore, they MUST be propagated from the "caller" workflow to the "called" workflow. Let's update the variable parts in the "called" workflow like below &lt;em&gt;(line #7-8, 20-21, 23-24, 30-31, 33-34, 36-37, 43-44, 54-55)&lt;/em&gt;.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;All values have become parameterised. Now, you need to define them in the "called" workflow, under the &lt;code&gt;workflow_call&lt;/code&gt; event. All non-secret variables go under the &lt;code&gt;inputs&lt;/code&gt; attribute &lt;em&gt;(line #6-21)&lt;/em&gt;, and all the secret variables go under the &lt;code&gt;secrets&lt;/code&gt; attribute &lt;em&gt;(line #23-27)&lt;/em&gt;.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Now, the refactoring has been completed!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#caller-workflow"&gt;
  &lt;/a&gt;
  Caller Workflow
&lt;/h2&gt;

&lt;p&gt;Let's update the existing ASWA workflow. As both jobs defined under the &lt;code&gt;jobs&lt;/code&gt; node are no longer necessary, delete them. And define a new "reusable" workflow like below:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Called Workflow &lt;em&gt;(line #14-15)&lt;/em&gt;: &lt;code&gt;&amp;lt;org_name&amp;gt;/&amp;lt;repo_name&amp;gt;/.github/workflows/&amp;lt;reusable_workflow_filename&amp;gt;@&amp;lt;branch_or_tag&amp;gt;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Input Variables &lt;em&gt;(line #17-22)&lt;/em&gt;: Under &lt;code&gt;with&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Secret Variables &lt;em&gt;(line #24-26)&lt;/em&gt;: Under &lt;code&gt;secrets&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Now, regardless of the number of "caller" workflows, update them like above. You only need to update the "called" workflow then all ASWA pipelines will get the updated workflow applied, which is really convenient!&lt;/p&gt;




&lt;p&gt;So far, I've shown how to refactor the &lt;a href="https://docs.microsoft.com/azure/static-web-apps/overview?WT.mc_id=dotnet-51099-juyooo&amp;amp;ocid=AID3035186"&gt;Azure Static Web Apps&lt;/a&gt; workflow with the &lt;a href="https://docs.github.com/en/actions/learn-github-actions/reusing-workflows"&gt;reusable workflows&lt;/a&gt; feature of &lt;a href="https://docs.github.com/en/actions"&gt;GitHub Actions&lt;/a&gt;. I'm sure that it's not just for ASWA but also can be utilised in many different scenarios.&lt;/p&gt;

</description>
      <category>azure</category>
      <category>azurestaticwebapps</category>
      <category>githubactions</category>
      <category>refactoring</category>
    </item>
    <item>
      <title>Web3 - The Ultimate Guide to Create your own Cryptocurrency Token with Solidity</title>
      <author>Matheus Costa</author>
      <pubDate>Thu, 02 Dec 2021 23:08:23 +0000</pubDate>
      <link>https://dev.to/costamatheus97/web3-the-ultimate-guide-to-create-your-own-cryptocurrency-token-with-solidity-ne9</link>
      <guid>https://dev.to/costamatheus97/web3-the-ultimate-guide-to-create-your-own-cryptocurrency-token-with-solidity-ne9</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Old or new to the crypto world, you have probably already met with some cryptocurrencies. But how about creating one? That's what we're going to do in this tutorial.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#erc20"&gt;
  &lt;/a&gt;
  ERC-20
&lt;/h2&gt;

&lt;p&gt;First, what is ERC-20? Some kind of android? No! Besides the difficult name, it is just a protocol to define what basic structure, rules and functionalities your fungible token (like crypto currencies) must have to properly interact with the world. But good news! You don't have to write it from scratch, because &lt;a href="https://github.com/OpenZeppelin/openzeppelin-contracts"&gt;OpenZeppelin&lt;/a&gt; already has a bunch of secure boilerplate smart contracts written and audited by the community developers, so you just have to import it in your code and extend your contract so it inherits the ERC-20 basic properties and methods.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-basic-properties-and-methods"&gt;
  &lt;/a&gt;
  The basic properties and methods
&lt;/h2&gt;

&lt;p&gt;To properly interact with the world your token needs some basic rules, such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Name (like Ethereum or Dogecoin)&lt;/li&gt;
&lt;li&gt;Symbol (like ETH for Ethereum)&lt;/li&gt;
&lt;li&gt;Decimals (like 2 for US Dollars and 18 for Ethereum)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And also basic functionalities, such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;totalSupply (to indicate the total supply of the token)&lt;/li&gt;
&lt;li&gt;balanceOf (to check the balance of the indicated wallet)&lt;/li&gt;
&lt;li&gt;transfer (to send or receive the token)&lt;/li&gt;
&lt;li&gt;allowance (which allows a 3rd party to move your tokens)&lt;/li&gt;
&lt;li&gt;mint (to mint new tokens)&lt;/li&gt;
&lt;li&gt;burn (to burn tokens)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And a couple more you can check at the &lt;a href="https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol"&gt;OpenZeppelin ERC-20 smart contract&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-code"&gt;
  &lt;/a&gt;
  The code
&lt;/h2&gt;

&lt;p&gt;Let's go to the fun part: coding. For this part, I'm assuming you already have basic Solidity experience. Open your &lt;a href="https://remix.ethereum.org/"&gt;Remix IDE&lt;/a&gt;, create a new file and set your Pragma to the newest available version. Import the ERC-20 smart contract from &lt;a href="https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol"&gt;here&lt;/a&gt; and extend your token smart contract. You should have something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pragma solidity ^0.8.7;

import 'https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol';

contract CakeCoin is ERC20 {

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we need to add the constructor function, so we can assign values to the &lt;strong&gt;name&lt;/strong&gt; and &lt;strong&gt;symbol&lt;/strong&gt; properties, and also mint some starting tokens on the smart contract creation. You can choose to either mint a specific quantity of your token on the contract creation, with no possibility to mint more than the initial supply, or create a function so you can mint on demand. It depends on your strategy.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pragma solidity ^0.8.7;

import 'https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol';

contract CakeCoin is ERC20 {
    address public owner;

    constructor() ERC20('CakeCoin', 'CAKE') {
        _mint(msg.sender, 100000 * 10 ** 18);
        owner = msg.sender;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we defined our token as CakeCoin, with its symbol being CAKE. We also set some initial coins, defined 18 decimals and registered the owner address, so we can create functions like mint which can only be used by the contract creator. Now let's create the mint function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pragma solidity ^0.8.7;

import 'https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol';

contract CakeCoin is ERC20 {
    address public owner;

    constructor() ERC20('CakeCoin', 'CAKE') {
        _mint(msg.sender, 100000 * 10 ** 18);
        owner = msg.sender;
    }

    function mint(address to, uint amount) external {
        require(msg.sender == owner, "Only the coin owner can mint more coins");
        _mint(to, amount);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With the mint function, the contract owner can mint new tokens and send it to any address. That's it for the basic funcionalities of our token, but you can create any other functionality to interact with it as you want. Sky is the limit :)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deploying-the-smart-contract-to-a-local-development-blockchain"&gt;
  &lt;/a&gt;
  Deploying the smart contract to a local development blockchain
&lt;/h2&gt;

&lt;p&gt;To test our smart contract, we can deploy it to a local development blockchain with Remix as the example below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D-avoq-7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ecyvhk0t6uh04mbk2hna.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D-avoq-7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ecyvhk0t6uh04mbk2hna.png" alt="Local Development Environment" width="368" height="418"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Just set the environment to JavaScript VM (London), choose any test account and click deploy. After that, if your contract doesn't have any errors, you will be able to interact with your smart contract. You can see that we can use not only our functions, but also every function inherited from the ERC-20 smart contract.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AzrQ83az--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fhe3d8kwczpidsmrb4ix.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AzrQ83az--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fhe3d8kwczpidsmrb4ix.png" alt="Contract Functions" width="302" height="870"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deploying-the-contract-to-the-mainnet"&gt;
  &lt;/a&gt;
  Deploying the contract to the mainnet
&lt;/h2&gt;

&lt;p&gt;We can also deploy our contract in the Ethereum mainnet with Remix, but you'll need MetaMask and some funds to pay for the fees.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SezZy8sk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y0ady8xczzszby63tsdi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SezZy8sk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y0ady8xczzszby63tsdi.png" alt="Mainnet Environment" width="303" height="429"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For the deployment we'll select the Injected Web3 option, which will trigger a MetaMask popup to connect your account. After that, we'll need to pick the correct account and click deploy.&lt;/p&gt;

&lt;p&gt;Thats it folks, hope you enjoyed the tutorial and reach me out if you have any questions!&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>programming</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Steering your submarine with Elixir, Leex and Yecc (AoC'21, day 2)</title>
      <author>Paweł Świątkowski</author>
      <pubDate>Thu, 02 Dec 2021 22:22:46 +0000</pubDate>
      <link>https://dev.to/katafrakt/steering-your-submarine-with-elixir-leex-and-yecc-aoc21-day-2-d7j</link>
      <guid>https://dev.to/katafrakt/steering-your-submarine-with-elixir-leex-and-yecc-aoc21-day-2-d7j</guid>
      <description>&lt;p&gt;After &lt;a href="https://katafrakt.me/2020/12/02/aoc2-with-parslet/"&gt;solving a Advent of Code challenge&lt;/a&gt; by treating the input as a program last year, I wanted more this year. The opportunity came today and I decided to take it. Instead of Parlet and Ruby, though, I decided to use Elixir/Erlang tooling to get the job done.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The problem
&lt;/h2&gt;

&lt;p&gt;In &lt;a href="https://adventofcode.com/2021/day/2"&gt;the Day 2 this year&lt;/a&gt; you need to pilot your submarine. This is done by a series of commands, such as this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;forward 5
down 5
forward 8
up 3
down 8
forward 2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have a command, followed by a number - one pair per line. There are three commands:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;forward&lt;/code&gt; moves the submarine horizontally by &lt;code&gt;number&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;down&lt;/code&gt; moves it down, &lt;strong&gt;increasing the depth&lt;/strong&gt; we're at&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;up&lt;/code&gt; does exactly the opposite of &lt;code&gt;down&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A series of commands - that's a program! To execute it, we need basically 3 things: a lexer, a parser and an interpreter. Fortunately, Elixir gives us a tooling for first two for free, and the last one is easy. Let's do it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#lexer"&gt;
  &lt;/a&gt;
  Lexer
&lt;/h3&gt;

&lt;p&gt;We are going to start with creating a new mix project with &lt;code&gt;mix new submarine_lang&lt;/code&gt;. Our first step will be to create a lexer, which will tokenize the input. This is what I put in &lt;code&gt;src/lexer.xrl&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Definitions.
FORWARD       = (forward)
UP            = (up)
DOWN          = (down)
WHITESPACE    = [\s\t\n]
DIGITS        = [0-9]+

Rules.
{WHITESPACE} : skip_token.
{FORWARD}    : {token, {move, forward}}.
{UP}         : {token, {move, up}}.
{DOWN}       : {token, {move, down}}.
{DIGITS}     : {token, {number, list_to_integer(TokenChars)}}.

Erlang code.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This lexer is not perfect. It could me more strict, for example to not allow two commands in the same line, but it serves its purpose for this task, while at the same time remains relatively simple. We basically have three commands, a number (&lt;code&gt;DIGITS&lt;/code&gt;) and whitespace.&lt;/p&gt;

&lt;p&gt;Let's take our parser for a test drive then, with &lt;code&gt;iex -S mix&lt;/code&gt;. The important thing to remember is that Leex only takes Erlang strings as inputs, so you either have to use single-quoted strings or use &lt;code&gt;to_charlist&lt;/code&gt; method from &lt;code&gt;Elixir.Kernel&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here are some examples:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Interactive Elixir (1.12.2) - press Ctrl+C to exit (type h() ENTER for help)
iex(1)&amp;gt; :lexer.string('forward 5')
{:ok, [move: :forward, number: 5], 1}
iex(2)&amp;gt; :lexer.string('forward 5\ndown 1\ndown 100')
{:ok,
 [move: :forward, number: 5, move: :down, number: 1, move: :down, number: 100],
 3}
iex(3)&amp;gt; :lexer.string('backward 6')                 
{:error, {1, :lexer, {:illegal, 'b'}}, 1}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that since the result is a list of tuples with two elements, &lt;code&gt;iex&lt;/code&gt; displays it as a keyword list (because that's what a keyword list is).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#parser"&gt;
  &lt;/a&gt;
  Parser
&lt;/h3&gt;

&lt;p&gt;Since the lexing/tokenizing part is done, we are now going to move on to parser, which will put some basic meaning into our tokens. The parser will reside in &lt;code&gt;src/parser.yrl&lt;/code&gt; and it is really simple:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Nonterminals command command_list.
Terminals number move.
Rootsymbol command_list.

command      -&amp;gt; move number : {'$1', '$2'}.
command_list -&amp;gt; command : ['$1'].
command_list -&amp;gt; command command_list : ['$1' | '$2'].
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have two terminal symbols, two non-terminal to group them and a non-terminal &lt;code&gt;command_list&lt;/code&gt; should be the root. Let's test it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;iex(1)&amp;gt; {:ok, tokens, _} = :lexer.string('forward 5\ndown 1\ndown 100')
{:ok,
 [move: :forward, number: 5, move: :down, number: 1, move: :down, number: 100],
 3}
iex(2)&amp;gt; :parser.parse(tokens)
{:ok,
 [
   {{:move, :forward}, {:number, 5}},
   {{:move, :down}, {:number, 1}},
   {{:move, :down}, {:number, 100}}
 ]}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ok, nice. We have a list of tuples, where each one of them contains two other tuples - a &lt;code&gt;move&lt;/code&gt; command and a &lt;code&gt;number&lt;/code&gt;. With that, we can move on to a very basic interpreter.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#interpreter"&gt;
  &lt;/a&gt;
  Interpreter
&lt;/h3&gt;

&lt;p&gt;We have the semiotic part done, now let's add some semantic into it. Our interpreter is going to just take a list of commands and apply them one by one, along with some representation of context or state. This is exactly what &lt;code&gt;Enum.reduce&lt;/code&gt; does and so we are going to use it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;SubmarineLang&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;eval_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
      &lt;span class="n"&gt;name&lt;/span&gt;
      &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read!&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;to_charlist&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:lexer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;defp&lt;/span&gt; &lt;span class="n"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;when&lt;/span&gt; &lt;span class="n"&gt;is_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;Enum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;eval&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;defp&lt;/span&gt; &lt;span class="n"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;({{&lt;/span&gt;&lt;span class="ss"&gt;:move&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:forward&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;}},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;depth&lt;/span&gt;&lt;span class="p"&gt;}),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;depth&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;defp&lt;/span&gt; &lt;span class="n"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;({{&lt;/span&gt;&lt;span class="ss"&gt;:move&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:down&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;}},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;depth&lt;/span&gt;&lt;span class="p"&gt;}),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;depth&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;defp&lt;/span&gt; &lt;span class="n"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;({{&lt;/span&gt;&lt;span class="ss"&gt;:move&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:up&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;}},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;depth&lt;/span&gt;&lt;span class="p"&gt;}),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;depth&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And this is it. When we run the interpreter, it will go through the commands one by one and adjust the context (a tuple with horizontal position and a depth) accordingly. The result will be such a tuple after applying all the commands. All that's left is to multiply first element by the second.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-second-part"&gt;
  &lt;/a&gt;
  The second part
&lt;/h3&gt;

&lt;p&gt;I'm not going to go into details about second part, but there the meaning of each command changes - now it makes a different modification to the context. Therefore you need to change the interpreter and only the interpreter.&lt;/p&gt;

&lt;p&gt;My complete solution is &lt;a href="https://github.com/katafrakt/advent_of_code_2021/tree/947c28f223d089c5996a3f4ce05cabaa15c9ed69/02"&gt;available on Github&lt;/a&gt;, if you want to take a look.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#some-reading"&gt;
  &lt;/a&gt;
  Some reading
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://programmer.help/blogs/erlang-elixir-using-leex-and-yecc-parsing-domain-language-dsl.html"&gt;Erlang/Elixir: Using Leex and Yecc Parsing Domain Language (DSL)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pl-rants.net/posts/leex-yecc-in-elixir/"&gt;Using Leex and Yecc in Elixir&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>adventofcode</category>
      <category>elixir</category>
      <category>programming</category>
    </item>
    <item>
      <title>Would you opt to have your consciousness live forever on a computer? Tell us for an upcoming episode of our podcast! 🎧  </title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Thu, 02 Dec 2021 21:50:50 +0000</pubDate>
      <link>https://dev.to/devteam/would-you-want-to-have-your-consciousness-live-forever-on-a-computer-tell-us-for-an-upcoming-episode-of-our-podcast-2je3</link>
      <guid>https://dev.to/devteam/would-you-want-to-have-your-consciousness-live-forever-on-a-computer-tell-us-for-an-upcoming-episode-of-our-podcast-2je3</guid>
      <description>&lt;p&gt;The &lt;a href="//dev.to/devdiscuss"&gt;DevDiscuss Podcast&lt;/a&gt; begins with an interview and ends with commentary from listeners — and we like to feature the &lt;em&gt;actual&lt;/em&gt; voices from our community!&lt;/p&gt;

&lt;p&gt;To inform an upcoming episode of the show, we'd like to know...&lt;/p&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#would-you-optin-to-have-your-consciousness-live-forever-on-a-computer-why-or-why-not"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Would you opt-in to have your consciousness live forever on a computer? Why or why not?&lt;/strong&gt;
&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;For your chance to hear your actual comments on an upcoming episode, answer the question above by:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Calling our Google Voice at +1 (929)500-1513 and leave a message 📞&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Sending a voice memo to &lt;a href="mailto:pod@dev.to"&gt;pod@dev.to&lt;/a&gt; 🎙&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;OR, leaving a comment here (we'll read your response aloud for you) 🗣&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please send in your recordings by Wednesday, December 8th at 9 AM, ET (1 PM UTC, 6 AM PT)&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#voice-recordings-will-be-given-priority-placement"&gt;
  &lt;/a&gt;
  Voice recordings will be given priority placement 😉
&lt;/h4&gt;

&lt;p&gt;Catch up on recent episodes of the show &lt;a href="https://dev.to/devdiscuss"&gt;here&lt;/a&gt; 👀  &lt;/p&gt;

</description>
      <category>podcast</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Computer Network Concepts - The one and only guide you need</title>
      <author>WEI FENG</author>
      <pubDate>Thu, 02 Dec 2021 21:47:59 +0000</pubDate>
      <link>https://dev.to/weifengnusceg/computer-network-concepts-the-one-and-only-guide-you-need-5d2k</link>
      <guid>https://dev.to/weifengnusceg/computer-network-concepts-the-one-and-only-guide-you-need-5d2k</guid>
      <description>&lt;p&gt;"To become a Web Frontend Developer, we can never survive without Computer network knowledges. Frontend is never solely about Javascript or CSS. We work closely with network protocol and http request daily"&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table Of Contents
&lt;/h2&gt;

&lt;p&gt;&lt;a href="#c1"&gt;1. Common HTTP request that we will use&lt;/a&gt;&lt;br&gt;
&lt;a href="#c2"&gt;2. Inheritable and non-inheritable properties in CSS&lt;/a&gt;&lt;br&gt;
&lt;a href="#c3"&gt;3. HTTP respond Header &lt;/a&gt;&lt;br&gt;
&lt;a href="#c4"&gt;4. Common HTTP respond status code &lt;/a&gt;&lt;br&gt;
&lt;a href="#c5"&gt;5. Key differences between HTTP=1.0, HTTP=1.1, 2.0 &lt;/a&gt;&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
In progress.....&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#1-common-http-request-that-we-will-use"&gt;
  &lt;/a&gt;
  1. Common HTTP request that we will use &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.w3schools.com/tags/ref_httpmethods.asp"&gt;&amp;gt; - What is HTTP? Refer to the W3school for full detail&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Hypertext Transfer Protocol (HTTP) is designed to enable communications between clients and servers.&lt;br&gt;
HTTP works as a request-response protocol between a client and server.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Request Method&lt;/th&gt;
&lt;th&gt;Explaination&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;GET:&lt;/td&gt;
&lt;td&gt;GET is used to request data from a specified resource.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;POST：&lt;/td&gt;
&lt;td&gt;POST is used to send data to a server to create/update a resource.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PUT：&lt;/td&gt;
&lt;td&gt;PUT is used to send data to a server to create/update a resource.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DELETE：&lt;/td&gt;
&lt;td&gt;The DELETE method deletes the specified resource.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HEAD：&lt;/td&gt;
&lt;td&gt;HEAD is almost identical to GET, but without the response body.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;OPTIONS：&lt;/td&gt;
&lt;td&gt;The OPTIONS method describes the communication options for the target resource.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Difference between GET and POST&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QaZjbIQc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pu56k3mu60kjbmsowwgi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QaZjbIQc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pu56k3mu60kjbmsowwgi.png" alt="Image description" width="880" height="972"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#2-http-request-header"&gt;
  &lt;/a&gt;
  2. HTTP request Header &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/HTTP_header"&gt;Refer to this documentation&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;GET&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;home&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt; &lt;span class="nx"&gt;HTTP&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;1.1&lt;/span&gt; 

&lt;span class="c1"&gt;// Http method, path of the resource, protocol &lt;/span&gt;

&lt;span class="nx"&gt;Host&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;developer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mozilla&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;org&lt;/span&gt;

&lt;span class="c1"&gt;// Domain of the current page who sends the request&lt;/span&gt;

&lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Agent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Mozilla&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;5.0&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Macintosh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;Intel&lt;/span&gt; &lt;span class="nx"&gt;Mac&lt;/span&gt; &lt;span class="nx"&gt;OS&lt;/span&gt; &lt;span class="nx"&gt;X&lt;/span&gt; &lt;span class="mf"&gt;10.9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;rv&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;50.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;Gecko&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;20100101&lt;/span&gt; &lt;span class="nx"&gt;Firefox&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;50.0&lt;/span&gt;

&lt;span class="c1"&gt;// Browser'user Proxy &lt;/span&gt;

&lt;span class="nx"&gt;Accept&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;application&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;xhtml&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;xml&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;application&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;xml&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nx"&gt;q&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.9&lt;/span&gt;

&lt;span class="c1"&gt;//accepted content type for the browser&lt;/span&gt;

&lt;span class="nx"&gt;Accept&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;en&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;US&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;en&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nx"&gt;q&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt; 

&lt;span class="c1"&gt;//accept language for the browser&lt;/span&gt;

&lt;span class="nx"&gt;Accept&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Encoding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;gzip&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;deflate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;br&lt;/span&gt; 

&lt;span class="c1"&gt;//accepted encoding method&lt;/span&gt;

&lt;span class="nx"&gt;Referer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//developer.mozilla.org/testpage.html&lt;/span&gt;

&lt;span class="c1"&gt;//the URL that make the request&lt;/span&gt;

&lt;span class="nx"&gt;Connection&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;keep&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;alive&lt;/span&gt; 

&lt;span class="c1"&gt;//the connection type between sever and client&lt;/span&gt;

&lt;span class="nx"&gt;If&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Modified&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Since&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Mon&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt; &lt;span class="nx"&gt;Jul&lt;/span&gt; &lt;span class="mi"&gt;2016&lt;/span&gt; &lt;span class="mi"&gt;02&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;04&lt;/span&gt; &lt;span class="nx"&gt;GMT&lt;/span&gt;
&lt;span class="nx"&gt;If&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;None&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Match&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;c561c68d0ba92bbeb8b0fff2a9199f722e3a621a&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="nx"&gt;Cache&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Control&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;

&lt;span class="c1"&gt;//for cache control&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-http-respond-header"&gt;
  &lt;/a&gt;
  3. HTTP respond Header &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="mi"&gt;200&lt;/span&gt; &lt;span class="nx"&gt;OK&lt;/span&gt;

&lt;span class="c1"&gt;// HTTP response status codes, short description&lt;/span&gt;

&lt;span class="nx"&gt;Access&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Control&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Allow&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Origin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;

&lt;span class="c1"&gt;// CORS&lt;/span&gt;

&lt;span class="nx"&gt;Connection&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Keep&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Alive&lt;/span&gt;

&lt;span class="c1"&gt;//connection type&lt;/span&gt;

&lt;span class="nx"&gt;Content&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;utf&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;

&lt;span class="c1"&gt;// document type&lt;/span&gt;

&lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Mon&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt; &lt;span class="nx"&gt;Jul&lt;/span&gt; &lt;span class="mi"&gt;2016&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;06&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt; &lt;span class="nx"&gt;GMT&lt;/span&gt;

&lt;span class="c1"&gt;//responding time&lt;/span&gt;

&lt;span class="nx"&gt;Etag&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;c561c68d0ba92bbeb8b0f612a9199f722e3a621a&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="nx"&gt;Last&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Modified&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Mon&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt; &lt;span class="nx"&gt;Jul&lt;/span&gt; &lt;span class="mi"&gt;2016&lt;/span&gt; &lt;span class="mi"&gt;02&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;04&lt;/span&gt; &lt;span class="nx"&gt;GMT&lt;/span&gt;
&lt;span class="c1"&gt;//for cache control&lt;/span&gt;

&lt;span class="nb"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Cookie&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;mykey&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;myvalue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;expires&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;Mon&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Jul&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2017&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;06&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt; &lt;span class="nx"&gt;GMT&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;Max&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Age&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;31449600&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;Path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sr"&gt;/; secur&lt;/span&gt;&lt;span class="err"&gt;e
&lt;/span&gt;
&lt;span class="c1"&gt;// set cookie expire time and other related information&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#4-common-http-respond-status-code"&gt;
  &lt;/a&gt;
  4. Common HTTP respond status code &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status#successful_responses"&gt;Refer to this documentation for details&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Successful responses&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;- 200 OK&lt;/strong&gt;&lt;br&gt;
The request succeeded. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;- 204 No Content&lt;/strong&gt;&lt;br&gt;
There is no content to send for this request, but the headers may be useful. The user agent may update its cached headers for this resource with the new ones.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;- 206 Partial Content&lt;/strong&gt;&lt;br&gt;
This response code is used when the Range header is sent from the client to request only part of a resource.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Redirection messages&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;- 301 Moved Permanently&lt;/strong&gt;&lt;br&gt;
The URL of the requested resource has been changed permanently. The new URL is given in the response.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;- 304 Not Modified&lt;/strong&gt;&lt;br&gt;
This is used for caching purposes. It tells the client that the response has not been modified, so the client can continue to use the same cached version of the response.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Client error responses&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;- 400 Bad Request&lt;/strong&gt;&lt;br&gt;
The server could not understand the request due to invalid syntax.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;- 401 Unauthorized&lt;/strong&gt;&lt;br&gt;
Although the HTTP standard specifies "unauthorized", semantically this response means "unauthenticated". That is, the client must authenticate itself to get the requested response.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;- 403 Forbidden&lt;/strong&gt;&lt;br&gt;
The client does not have access rights to the content; that is, it is unauthorized, so the server is refusing to give the requested resource. Unlike 401 Unauthorized, the client's identity is known to the server.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;- 404 Not Found&lt;/strong&gt;&lt;br&gt;
The server can not find the requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Server error responses&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;- 500 Internal Server Error&lt;/strong&gt;&lt;br&gt;
The server has encountered a situation it does not know how to handle.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;- 501 Not Implemented&lt;/strong&gt;&lt;br&gt;
The request method is not supported by the server and cannot be handled. The only methods that servers are required to support (and therefore that must not return this code) are GET and HEAD.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;- 502 Bad Gateway&lt;/strong&gt;&lt;br&gt;
This error response means that the server, while working as a gateway to get a response needed to handle the request, got an invalid response.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;- 503 Service Unavailable&lt;/strong&gt;&lt;br&gt;
The server is not ready to handle the request. Common causes are a server that is down for maintenance or that is overloaded.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-key-differences-between-http10-http11-20"&gt;
  &lt;/a&gt;
  5. Key differences between HTTP=1.0, HTTP=1.1, 2.0 &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://programmerall.com/article/6663649849/"&gt;Refer to the full article here&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;1. PersistentConnection&lt;/strong&gt;&lt;br&gt;
HTTP 1.0 stipulates that the browser and the server only maintain a short connection. The server immediately disconnects the TCP connection after processing the request.&lt;/p&gt;

&lt;p&gt;HTTP 1.1 supports Persistent Connection, andLong connection is used by default.For HTTP 1.1 long connections, new request headers need to be added to help achieve this. The value of the Connection request header is Keep-Alive, the client informs the server to keep the connection after returning the result of this request; the value of the Connection request header is close When, the client notifies the server to close the connection after returning the result of this request.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.Pipelining&lt;/strong&gt;&lt;br&gt;
　　 Request pipeline (Pipelining) processing, multiple HTTP requests and responses can be transmitted on a TCP connection, reducing the consumption and delay of establishing and closing connections.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.host field:&lt;/strong&gt;&lt;br&gt;
　　 In HTTP1.0, it is believed that each server is bound to a unique IP address. Therefore, the URL in the request message does not convey the hostname. But with the development of virtual host technology, there can be multiple virtual hosts (Multi-homed Web Servers) on a physical server, and they share an IP address. With the host field HTTP1.1 can send request to different host on the same server&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4.Bandwidth optimization:&lt;/strong&gt;&lt;br&gt;
　　 In HTTP/1.0, there are some phenomena of wasting bandwidth. For example, the client only needs a part of an object, but the server sends the entire object.&lt;/p&gt;

&lt;p&gt;　　 The range header field is introduced in the request message in HTTP/1.1,It allows to request only certain part of the resource. If the server correspondingly returns the content requested by the object, the response code is 206 (Partial Content), which can prevent the Cache from mistaking the response as a complete object.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5.Cache:&lt;/strong&gt;&lt;br&gt;
    HTTP/1.1 adds the Cache-Control header field which supports an extensible instruction subset: for example, the max-age instruction supports relative timestamp.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HTTP 2.0&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.Multiplexing:&lt;/strong&gt;&lt;br&gt;
　　 HTTP 2.0 uses multiplexing technology to process multiple requests concurrently on the same connection, and the number of concurrent requests is several orders of magnitude larger than HTTP 1.1.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.data compression:&lt;/strong&gt;&lt;br&gt;
　　 HTTP 1.1 does not support header data compression, HTTP 2.0 uses HPACK algorithm to compress header data, so that the data volume is smaller and the transmission on the network will be faster.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.Server push:&lt;/strong&gt;&lt;br&gt;
　　 When we request data from a web server that supports HTTP2.0, the server will push some resources needed by the client to the client by the way, so that the client will not create a connection again and send a request to the server to obtain it. This method is very suitable for loading static resources.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4.Binary framing:&lt;/strong&gt;&lt;br&gt;
　　 HTTP/2 adds a binary framing layer between the application layer (HTTP/2) and the transport layer (TCP or UDP).&lt;br&gt;
　　 Without changing the semantics, methods, status codes, URI and header fields of HTTP/1.x, it solves the performance limitations of HTTP 1.1, improves transmission performance, and achieves low latency and high throughput.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>computerscience</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How to add Lottie animations to SwiftUI</title>
      <author>Kevin Furjan</author>
      <pubDate>Thu, 02 Dec 2021 21:18:06 +0000</pubDate>
      <link>https://dev.to/kfurjan/how-to-add-lottie-animations-to-swiftui-1j22</link>
      <guid>https://dev.to/kfurjan/how-to-add-lottie-animations-to-swiftui-1j22</guid>
      <description>&lt;p&gt;Using Lottie animations is an easy and popular way to add animations to your app to have that modern look and feel. All sorts of companies use Lottie animations, from startups all the way to the big boys, such as Google, Microsoft, Spotify, and Netflix to name the few.&lt;/p&gt;

&lt;p&gt;Using LottieFiles you have a choice to make your own animations using &lt;a href="https://lottiefiles.com/editor"&gt;Lottie Editor&lt;/a&gt;, buying animations from creators on &lt;a href="https://lottiefiles.com/marketplace"&gt;Lottie Marketplace&lt;/a&gt; or using &lt;a href="https://lottiefiles.com/featured"&gt;Free Animations&lt;/a&gt; to get LottieFile(s) completely free of charge to add them into you project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#uikit-and-swiftui-interoperability"&gt;
  &lt;/a&gt;
  UIKit and SwiftUI interoperability
&lt;/h2&gt;

&lt;p&gt;Unfortunately, Lottie animations cannot be added directly to SwiftUI view without some work prior to that. In order to add Lottie animation to SwiftUI, you need to implement &lt;code&gt;UIViewRepresentable&lt;/code&gt; protocol which is a wrapper for a UIKit view that you use to integrate Lottie view into your SwiftUI view hierarchy.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#show-me-the-code"&gt;
  &lt;/a&gt;
  Show me the code
&lt;/h2&gt;

&lt;p&gt;Let's get straight to the point, just make sure you &lt;a href="https://github.com/airbnb/lottie-ios#installing-lottie"&gt;previously installed&lt;/a&gt;  &lt;code&gt;lottie-ios&lt;/code&gt; library using your preferred package manager, whether it is CocoaPods, Carthage or Swift Package Manager.&lt;/p&gt;

&lt;p&gt;Add new file name LottieView and add following contents:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;import&lt;/span&gt; &lt;span class="kt"&gt;Lottie&lt;/span&gt;
&lt;span class="kd"&gt;import&lt;/span&gt; &lt;span class="kt"&gt;SwiftUI&lt;/span&gt;

&lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="kt"&gt;LottieView&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;UIViewRepresentable&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;animationView&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;AnimationView&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;makeUIView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;UIViewRepresentableContext&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;LottieView&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;UIView&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;view&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;UIView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zero&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;animationView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;animation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Animation&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;named&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;animationView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contentMode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scaleAspectFill&lt;/span&gt;
        &lt;span class="n"&gt;animationView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loopMode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loop&lt;/span&gt;

        &lt;span class="n"&gt;animationView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;translatesAutoresizingMaskIntoConstraints&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
        &lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;addSubview&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;animationView&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="kt"&gt;NSLayoutConstraint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;activate&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
            &lt;span class="n"&gt;animationView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heightAnchor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;constraint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;equalTo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heightAnchor&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="n"&gt;animationView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;widthAnchor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;constraint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;equalTo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;widthAnchor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;])&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;view&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;updateUIView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="nv"&gt;uiView&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;UIViewType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;UIViewRepresentableContext&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;LottieView&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All you need to do know is add following code to your SwiftUI view: &lt;code&gt;LottieView(fileName: "your-file-name")&lt;/code&gt; and that's it, you have fully functioning Lottie animation inside SwiftUI view. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-i-make-it-to-play-or-pause"&gt;
  &lt;/a&gt;
  How do I make it to play or pause
&lt;/h2&gt;

&lt;p&gt;In order to make animation play or pause, a bit more coding is required. It is required to provide &lt;em&gt;Coordinator&lt;/em&gt; to your LottieView. &lt;/p&gt;

&lt;p&gt;What is &lt;em&gt;Coordinator&lt;/em&gt;? Let's see what Apple says:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The system doesn’t automatically communicate changes occurring within your view to other parts of your SwiftUI interface. When you want your view to coordinate with other SwiftUI views, you must provide a Coordinator instance to facilitate those interactions. For example, you use a coordinator to forward target-action and delegate messages from your view to any SwiftUI views.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's see updated code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;import&lt;/span&gt; &lt;span class="kt"&gt;Lottie&lt;/span&gt;
&lt;span class="kd"&gt;import&lt;/span&gt; &lt;span class="kt"&gt;SwiftUI&lt;/span&gt;

&lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="kt"&gt;LottieView&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;UIViewRepresentable&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;isEnabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Bool&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;animationView&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;AnimationView&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;makeUIView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;UIViewRepresentableContext&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;LottieView&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;UIView&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;view&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;UIView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zero&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;animationView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;animation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Animation&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;named&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;animationView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contentMode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scaleAspectFill&lt;/span&gt;
        &lt;span class="n"&gt;animationView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loopMode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loop&lt;/span&gt;

        &lt;span class="n"&gt;animationView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;translatesAutoresizingMaskIntoConstraints&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
        &lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;addSubview&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;animationView&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="kt"&gt;NSLayoutConstraint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;activate&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
            &lt;span class="n"&gt;animationView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heightAnchor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;constraint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;equalTo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heightAnchor&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="n"&gt;animationView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;widthAnchor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;constraint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;equalTo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;widthAnchor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;])&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;view&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;updateUIView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="nv"&gt;uiView&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;UIViewType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;UIViewRepresentableContext&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;LottieView&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;isEnabled&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;coordinator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;animationView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;play&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;coordinator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;animationView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kt"&gt;Coordinator&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;NSObject&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;LottieView&lt;/span&gt;

        &lt;span class="nf"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="nv"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;LottieView&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;makeCoordinator&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Coordinator&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;Coordinator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And this is it! You can now pass &lt;code&gt;isEnabled&lt;/code&gt; &lt;em&gt;Bool&lt;/em&gt; value to LottieView to make it play or pause.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#one-final-gotcha"&gt;
  &lt;/a&gt;
  One final gotcha
&lt;/h2&gt;

&lt;p&gt;If you are using &lt;a href="https://developer.apple.com/documentation/swiftui/tabview"&gt;TabView&lt;/a&gt; withing your SwiftUI application and you are switching between tabs you will notice that animations won't start playing automatically when you switch back to view with animations.&lt;/p&gt;

&lt;p&gt;All you must do is add &lt;code&gt;animationView.backgroundBehavior = .pauseAndRestore&lt;/code&gt; to &lt;code&gt;makeUIView(context:)&lt;/code&gt; method. Now animations will &lt;em&gt;pause and restore&lt;/em&gt; as the code itself suggests.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Thank you for reading and I hope this article was useful to you! In conclusion, this article went over how to add Lottie animation(s) to SwiftUI view, make it reactive if needed and how to use Lottie animations with TabView.&lt;/p&gt;




&lt;p&gt;If you like my content and find it useful, please consider following me here on DEV Community. If you are feeling extra generous, please consider &lt;a href="https://buymeacoffee.com/kfurjan"&gt;buying me a coffee&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Connect with me on &lt;a href="https://www.linkedin.com/in/kevin-furjan/"&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>ios</category>
      <category>swift</category>
      <category>ux</category>
      <category>design</category>
    </item>
    <item>
      <title>Starting with tailwind css from scratch</title>
      <author>Bingeh Afumbom</author>
      <pubDate>Thu, 02 Dec 2021 21:12:14 +0000</pubDate>
      <link>https://dev.to/elabrava20/starting-with-tailwind-css-from-scratch-3hfb</link>
      <guid>https://dev.to/elabrava20/starting-with-tailwind-css-from-scratch-3hfb</guid>
      <description>&lt;p&gt;Starting with a new framework can be really tedious sometimes. Don't get me started about the starter files you have to build. &lt;/p&gt;

&lt;p&gt;In this article, I'll show you how to set up tailwind css easy peasy, without having to dig too much through the internet. We'll start from making sure you have node installed in your computer, easy/awesome terminal tricks, right down to making sure you are set to start using tailwind in your code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#check-for-node-in-your-computer"&gt;
  &lt;/a&gt;
  Check for node in your computer
&lt;/h2&gt;

&lt;p&gt;Side note: You do not need any knowledge of node to use tailwind. We'll just use it for necessary installations.&lt;/p&gt;

&lt;p&gt;To check if you already have node installed, then run the following command in your terminal.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;node -v&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If node was previously installed, then it should display the current version after you hit enter. If it wasn't, then you'll have to install node. You can get it for whatever OS you are using from &lt;a href="https://nodejs.org/en/"&gt;this website&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-next"&gt;
  &lt;/a&gt;
  What next?
&lt;/h2&gt;

&lt;p&gt;After installing node, check the version again just to be sure. Use the first terminal command above to do so.&lt;/p&gt;

&lt;p&gt;Our node is in place (Let's assume that you installed without much struggle lol), we'll get started by creating project folders. There's a really neat way to do this through the terminal. It's faster, and I personally think it's fun...?&lt;/p&gt;

&lt;p&gt;Start by creating a folder. We'll call it tailwind. In your terminal, type &lt;code&gt;mkdir tailwind&lt;/code&gt; and hit enter. After this folder has been created we have to enter it. Do this by typing &lt;code&gt;cd tailwind&lt;/code&gt; where cd means change directory.&lt;/p&gt;

&lt;p&gt;Then we want to make a project folder in this tailwind folder. We say &lt;code&gt;mkdir project1&lt;/code&gt; again, and then &lt;code&gt;cd project1&lt;/code&gt;. To ensure that these folders are indeed being created, trying finding them on your computer.&lt;/p&gt;

&lt;p&gt;To summarize the commands we've used...&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mkdir tailwind&lt;/code&gt;&lt;br&gt;
&lt;code&gt;cd tailwind&lt;/code&gt;&lt;br&gt;
&lt;code&gt;mkdir project1&lt;/code&gt;&lt;br&gt;
&lt;code&gt;cd project1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The last command on your terminal should be something like this... &lt;/p&gt;

&lt;p&gt;&lt;code&gt;njong@njong-Latitude-E6440:~/tailwind/project1$&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Disclaimer: I use Linux, specifically ubuntu as an OS. But the directives are pretty much the same in Windows, so do not worry.&lt;/p&gt;

&lt;p&gt;In order for us to open this folder in vscode directly from the terminal, we add &lt;code&gt;code&lt;/code&gt; and &lt;code&gt;.&lt;/code&gt; like this&lt;/p&gt;

&lt;p&gt;&lt;code&gt;njong@njong-Latitude-E6440:~/tailwind/project1$ code .&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The dot is telling the terminal to open the folder project1 in vscode.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#are-we-done-yet"&gt;
  &lt;/a&gt;
  Are we done yet?
&lt;/h2&gt;

&lt;p&gt;Not quite. But almost, I promise. Your IDE should have opened by now, and your workspace should be in the project1 folder. This is where everything gets real.&lt;/p&gt;

&lt;p&gt;Click terminal on vscode access tool bar, and chose new terminal. We want to create a .json file. In your vscode terminal, type,&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm init -y&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;After pressing enter, you should see a package.json file added to your explorer tab. Open it, and it should look something like this;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Eom-i21U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ct89eqkv8wjv6ya81xrv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Eom-i21U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ct89eqkv8wjv6ya81xrv.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After creating the package.json file, you actually want to install tailwind. In your terminal, type;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm install tailwindcss&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Check your package.json file again, and you'll see that a dependency has been included. Also notice on the explorer tab, a new folder called node_modules has been created. Don't let the contents scare you, as you will rarely ever have to work with this folder.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---GDVx6c0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y34lpkca8d8qc9g1maob.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---GDVx6c0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y34lpkca8d8qc9g1maob.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In order to fully comprehend tailwind, we'll need to create two more folders. A source folder, and a public folder. The source folder is where we want to keep any other css styles we might need for our project. Between the source and and public folder, we have tailwind. Whenever we change a style in the source folder, tailwind will need to process those changes and output them to a certain file in the public folder. This is what our index.html file will then use. I hope the image below clarifies this paragraph by a bit.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I2h3Lx9K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x0g3f182dl5xp157xl4a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I2h3Lx9K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x0g3f182dl5xp157xl4a.png" alt="Image description" width="500" height="125"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, go ahead and create two folders. Name one &lt;code&gt;src&lt;/code&gt;, and the other one &lt;code&gt;public&lt;/code&gt;. In the src folder, create a file, and name it &lt;code&gt;style.css&lt;/code&gt;. Add the following lines to the styles.css file you just created.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;@tailwind base;&lt;br&gt;
@tailwind components;&lt;br&gt;
@tailwind utilities;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will inject the the base, component, and utility styles. Navigate back to your package.json file, and change the test script inside the scripts braces to,&lt;/p&gt;

&lt;p&gt;&lt;code&gt;"build-css":"tailwindcss build src/styles.css -o public/styles.css"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This basically means that when we build in the styles.css file of the src folder, we want to process and output in a certain styles.css folder which will be automatically created in the public folder.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#one-step-away"&gt;
  &lt;/a&gt;
  One step away...
&lt;/h2&gt;

&lt;p&gt;We are one step away from finally setting up our tailwind for use. Save the changes you've made to the package.json file, and dive back into your terminal. We need to run this script, and it will install all the tailwind dependencies for us in the styles.css file, which will be created in the public folder. To run a script,&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm run (script-name)&lt;/code&gt;. In this case, we type &lt;code&gt;npm run build-css&lt;/code&gt;. Hit enter.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Qevu-HME--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/azt4x0wr7jipysiepm8t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qevu-HME--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/azt4x0wr7jipysiepm8t.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ladies and gentlemen, you have officially set up tailwind for use. As you can see, a styles.css file was created in the public folder and you can now see the utility classes you'll be using, in that file. You can start by working with these utility classes in an index.html file that you will create.&lt;/p&gt;

&lt;p&gt;Remember that if we were to add normal css styling to our src/styles.css, we would need to run the script again, so that it affects our public/styles.css and hence, our index.html.&lt;/p&gt;

&lt;p&gt;If you found this article useful, please share. Feel free to  connect with me on &lt;a href="https://twitter.com/ELabrava20"&gt;twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>css</category>
    </item>
    <item>
      <title>How to secure data using stored procedures in SQL
</title>
      <author>Arctype Team</author>
      <pubDate>Thu, 02 Dec 2021 21:01:02 +0000</pubDate>
      <link>https://dev.to/arctype/how-to-secure-data-using-stored-procedures-in-sql-3k1m</link>
      <guid>https://dev.to/arctype/how-to-secure-data-using-stored-procedures-in-sql-3k1m</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XhjJzECV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638478448390/OUqe5gAI0.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XhjJzECV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638478448390/OUqe5gAI0.jpeg" alt="Featured.jpeg" width="880" height="587"&gt;&lt;/a&gt;&lt;br&gt;
A stored procedure is a set of SQL statements with an assigned name, which can be stored for later use so it can be reused and shared by multiple programs. Some of the benefits offered by stored procedures are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Security.&lt;/li&gt;
&lt;li&gt;Performance.&lt;/li&gt;
&lt;li&gt;Ease of use.&lt;/li&gt;
&lt;li&gt;Maintainability.&lt;/li&gt;
&lt;li&gt;Scalability.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this article, I will show you how to secure data using a stored procedure. But before I do that, let us go through how stored procedures can be a secure and safe way to give access to your database.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-are-stored-procedures-useful"&gt;
  &lt;/a&gt;
  Why are stored procedures useful?
&lt;/h2&gt;

&lt;p&gt;Stored procedures can be used to allow access to some parts of a table in a database while denying direct select, insert, update and delete operations against the table. That means that someone cannot directly write SQL queries that do what they want to the database table.&lt;/p&gt;

&lt;p&gt;Using stored procedures to limit access to a database makes the process easier to design and manage. This can be helpful in protecting sensitive data in a database.&lt;/p&gt;

&lt;p&gt;Let’s say, for example, that your database has tables with financial data or any sensitive data like social security numbers. Giving direct access to these tables to anyone is not a good idea because someone can decide to commit fraud or steal personal information to commit identity theft. Disgruntled employees with access to the database can also decide to trash or delete some of your business-critical data.&lt;/p&gt;

&lt;p&gt;These risks can be avoided by using stored procedures to define things that you want those who have access to the database to do. They give better control of permissions which means users can be limited to specific columns and rows in a table. Stored procedures can also provide an additional layer of protection against SQL Injection.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-and-calling-a-stored-procedure"&gt;
  &lt;/a&gt;
  Creating and Calling a Stored Procedure
&lt;/h2&gt;

&lt;p&gt;The general syntax for creating and calling a stored procedure is as shown below:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CREATE PROCEDURE procedure_name AS sql_statement GO;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;And the resulting output is:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;EXEC procedure_name;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;The above process of creating and calling a stored procedure is just a general process. That means different databases have different ways of creating and calling a Stored Procedure.&lt;/p&gt;

&lt;p&gt;In this article, I will be using PostgreSQL to create and call a stored procedure. But before creating and calling a stored procedure, let us create a table of employees that contains six columns.&lt;/p&gt;

&lt;p&gt;The first column will be employee id, the second will be employee name, the third will be employee department, the fourth will be employee social security number, the fifth will be employee account number, and the last column will be employee salary. Below is the SQL query for creating the Employees table.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CREATE TABLE Employees (
   EmpNo integer,
   EmpName varchar(50),
   Dept varchar(50),
   SS_No integer,
   ACC_No integer,
   EmpSal integer
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Now let's create a stored procedure that inserts values into the Employees table:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CREATE PROCEDURE Insert_Emp_Table (
   empno integer,
   empname varchar(50),
   dept varchar(50),
   ss_no integer,
   acc_no integer,
   empsal integer
   )
LANGUAGE 'plpgsql'
AS $$
BEGIN
INSERT INTO employees VALUES (empno, empname, dept, ss_no, acc_no, empsal);
COMMIT;
END;
$$;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;The Employees table we created is empty but we can add data to the table by calling the stored procedure that we just created.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CALL Insert_Emp_Table(1, 'Bonface', 'WebDev', 23214, 42357, 10000);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Once you check the Employees table, you will find out that the values that you included when calling the stored procedure have been populated into the table.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8VNs_MmL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/bLi31Xy_KFKuG0b0MOKaKWENPnyFg8WQMcqdliTQU68H-mHc91IT2C_Cb3VhkAfqOVWxsD0ySjR0pkIcUHu587hZhj6fpFm7l-3_MTA0uHzVI1AudW_9vQFHeLyiA_88cFLu5MVb" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8VNs_MmL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/bLi31Xy_KFKuG0b0MOKaKWENPnyFg8WQMcqdliTQU68H-mHc91IT2C_Cb3VhkAfqOVWxsD0ySjR0pkIcUHu587hZhj6fpFm7l-3_MTA0uHzVI1AudW_9vQFHeLyiA_88cFLu5MVb" alt="Visual confirming a record was successfully added." width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#securing-data-using-a-stored-procedure"&gt;
  &lt;/a&gt;
  Securing data using a Stored Procedure
&lt;/h3&gt;

&lt;p&gt;As a database owner or database admin, how can you allow someone to only insert values to the Employees table without being able to do anything else?&lt;/p&gt;

&lt;p&gt;You can do that by granting that user the permission to call the stored procedure we created above. Let us create a role or user called John with only login privileges. Then we will grant him permission to call the stored procedure that inserts values into the Employees table.&lt;/p&gt;

&lt;p&gt;We can do that by running the SQL query below.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CREATE ROLE john WITH LOGIN PASSWORD 'john';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;You can grant user john permission to call the stored procedure by running the following SQL query.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;GRANT ALL ON PROCEDURE Insert_Emp_Table TO john;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;When you log in as the user &lt;code&gt;John&lt;/code&gt; and try to run any query that does anything to the Employees table, you will get an error that says &lt;code&gt;permission denied for table employees.&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vsnNmchm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/eIwVsl-L0HmYa2xZbNgtymVPbEenR4Zscb3eotWFDp0E73noL5JNxSms3RvApyZWDKDltzFYy6pyqRN7BvjH3JZfadl9Z5GgVL8UiUzWoE_NXQ-2qPoBmoaVRUwg3aqCIAprECQR" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vsnNmchm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/eIwVsl-L0HmYa2xZbNgtymVPbEenR4Zscb3eotWFDp0E73noL5JNxSms3RvApyZWDKDltzFYy6pyqRN7BvjH3JZfadl9Z5GgVL8UiUzWoE_NXQ-2qPoBmoaVRUwg3aqCIAprECQR" alt="Image showing user does not have full permission." width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That means that the user &lt;code&gt;John&lt;/code&gt; cannot access any table in our database or do anything that we don’t want him to do as the database owner. The only way user &lt;code&gt;John&lt;/code&gt; can access any table in our database is by calling stored procedures that we have granted them permission to call.&lt;/p&gt;

&lt;p&gt;For example, as the user &lt;code&gt;John&lt;/code&gt;, you can still insert values to the Employees table by running the SQL query below.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CALL Insert_Emp_Table(3, 'Brian', 'Writer', 36514, 97352, 9000);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;And, as you can see from the screenshot below, the stored procedure call has succeeded because we gave him permission to call that stored procedure.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HoAt6wF8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/0OePnTa_g4z0-KVCb-WXY_x-CRXlumrw5qXWliQP7eUYXuqPztFnBTg_Zna01dhicjX7lUrhS5KQTGZYBNKFaki0KCjMGA3b3UpQ5zmycfKDPUeBoIhcoEbxPThg0N2CKgKXz40u" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HoAt6wF8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/0OePnTa_g4z0-KVCb-WXY_x-CRXlumrw5qXWliQP7eUYXuqPztFnBTg_Zna01dhicjX7lUrhS5KQTGZYBNKFaki0KCjMGA3b3UpQ5zmycfKDPUeBoIhcoEbxPThg0N2CKgKXz40u" alt="Image showing user has insert permission." width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now let us login back as the database owner and run the following query to view data in the Employees table.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT * FROM employees;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;You will find out that data was inserted into the employees table through the stored procedure call made by user John as shown by the screenshot below.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K8Id2j3P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/IJul_B6OVw7nt8rB7AoY7Jl1awMIezUHkSnzFWPJghrjG-FMTVAfHVcw4DOTZs86CCsPRLVA4KgHjsMEAsc_ESP5funj8VJgAaykwhbzn3ngdv4fvJ-ExnTf5nQZM26xhBV1Likb" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K8Id2j3P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/IJul_B6OVw7nt8rB7AoY7Jl1awMIezUHkSnzFWPJghrjG-FMTVAfHVcw4DOTZs86CCsPRLVA4KgHjsMEAsc_ESP5funj8VJgAaykwhbzn3ngdv4fvJ-ExnTf5nQZM26xhBV1Likb" alt="Image showing database entries are correct." width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;As seen from the process above, stored procedures are a secure and safe way to give access to your database. That means someone can only be able to do what is defined in stored procedures that you have given him permission to call. And that makes stored procedures great for securing data in a database.&lt;/p&gt;

</description>
      <category>database</category>
      <category>tutorial</category>
      <category>postgres</category>
    </item>
    <item>
      <title>How To Develop A Progressive Web Application On An Android Device</title>
      <author>Meir Gabay</author>
      <pubDate>Thu, 02 Dec 2021 20:46:17 +0000</pubDate>
      <link>https://dev.to/unfor19/how-to-develop-a-progressive-web-application-on-an-android-device-39jj</link>
      <guid>https://dev.to/unfor19/how-to-develop-a-progressive-web-application-on-an-android-device-39jj</guid>
      <description>&lt;p&gt;In the past few weeks I've been wondering how the whole eco-system of a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Progressive_web_apps"&gt;Progressive Web Application&lt;/a&gt; (PWA) works. As always, I need to get my hands dirty and code something to understand it.&lt;/p&gt;

&lt;p&gt;My main goal is to provision a local development environment, which hot-reloads (code changed) the application on a physical Android device.&lt;/p&gt;

&lt;p&gt;The main challenge was to figure out a way to access the PWA which is running on my local machine from my Android device (Samsung Galaxy S10). Why you ask? Because &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Progressive_web_apps/Installable_PWAs#requirements"&gt;PWA requires HTTPS access&lt;/a&gt; so using IP addresses is not an option.&lt;/p&gt;

&lt;p&gt;Ladies and gentleman, I present to you - &lt;a href="https://github.com/unfor19/pwa-quasar-local"&gt;unfor19/pwa-quasar-local&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This project demonstrates how to develop a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Progressive_web_apps"&gt;Progressive Web Application&lt;/a&gt; (PWA) locally on an Android device, using the &lt;a href="https://quasar.dev/"&gt;Quasar Framework v2&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#final-results"&gt;
  &lt;/a&gt;
  Final Results
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt;: Images may look weird on DEV.to, not sure why. Go to the GitHub repo &lt;a href="https://github.com/unfor19/pwa-quasar-local"&gt;unfor19/pwa-quasar-local&lt;/a&gt; if you experience weird widths and heights&lt;/p&gt;

&lt;p&gt;I took screenshots with my Android device during the process to document the full user-experience of installing a PWA for the first time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#accessed-pwa-from-android-device"&gt;
  &lt;/a&gt;
  Accessed PWA From Android Device
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;Add to Home Screen&lt;/code&gt; popup appears!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---Mu-Jv5s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gm0i6hcs1r5gj8kpsnwr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---Mu-Jv5s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gm0i6hcs1r5gj8kpsnwr.png" alt="Image description" width="880" height="1858"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#clicked-add-to-home-screen"&gt;
  &lt;/a&gt;
  Clicked Add To Home Screen
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--46Y0MbgI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jmcqhb3wmaow9m7illka.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--46Y0MbgI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jmcqhb3wmaow9m7illka.jpg" alt="Image description" width="880" height="1858"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#clicked-install"&gt;
  &lt;/a&gt;
  Clicked Install
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--imBdcEp4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vtukh8o2olvavve2c2hh.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--imBdcEp4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vtukh8o2olvavve2c2hh.jpg" alt="Image description" width="880" height="1858"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installation-completed"&gt;
  &lt;/a&gt;
  Installation Completed
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E2xenZwR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/39gsgk30cbi5o4vd9luz.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E2xenZwR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/39gsgk30cbi5o4vd9luz.jpg" alt="Image description" width="880" height="1858"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pwa-appears-on-the-devices-apps-list"&gt;
  &lt;/a&gt;
  PWA Appears On The Device's Apps List
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Wm_BgTrm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mobjtzmtswc8cbrm79iy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Wm_BgTrm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mobjtzmtswc8cbrm79iy.png" alt="Image description" width="880" height="1858"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pwa-has-a-cool-splashscreen"&gt;
  &lt;/a&gt;
  PWA Has A Cool Splashscreen
&lt;/h3&gt;

&lt;p&gt;That is thanks to &lt;a href="https://quasar.dev/"&gt;Quasar&lt;/a&gt; which does it, as always, automatically.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZqrJRzFy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b02ytmru2zntenwqdvbb.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZqrJRzFy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b02ytmru2zntenwqdvbb.jpg" alt="Image description" width="880" height="1858"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#first-run-after-installation"&gt;
  &lt;/a&gt;
  First Run After Installation
&lt;/h3&gt;

&lt;p&gt;The application is running on the device as if it were a "normal application".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--THIYrwKU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j896i1kn9wme2ae3gmuw.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--THIYrwKU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j896i1kn9wme2ae3gmuw.jpg" alt="Image description" width="880" height="1858"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-words"&gt;
  &lt;/a&gt;
  Final Words
&lt;/h2&gt;

&lt;p&gt;It was a true joy to work with Quasar since it made the whole process of generating a PWA out-of-the-box, without writing a single line of code. So head over to &lt;a href="https://github.com/unfor19/pwa-quasar-local"&gt;unfor19/pwa-quasar-local&lt;/a&gt; and do your PWA magic!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>vue</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
