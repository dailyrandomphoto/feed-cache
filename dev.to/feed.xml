<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>ERC20 and BEP20 Token Generator Script | Auto Gain and Multi-Chain</title>
      <author>Webtroloji</author>
      <pubDate>Wed, 08 Dec 2021 21:58:22 +0000</pubDate>
      <link>https://dev.to/webtroloji/erc20-and-bep20-token-generator-script-auto-gain-and-multi-chain-4h73</link>
      <guid>https://dev.to/webtroloji/erc20-and-bep20-token-generator-script-auto-gain-and-multi-chain-4h73</guid>
      <description>&lt;h2&gt;
  &lt;a href="#token-amp-crypto-creation-script-v20"&gt;
  &lt;/a&gt;
  TOKEN &amp;amp; CRYPTO CREATION SCRIPT (v.2.0)
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#multi-chain-erc20-bep20-hrc20"&gt;
  &lt;/a&gt;
  MULTI CHAIN ‚Äî ERC20, BEP20, HRC20
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#metamask-integrated-and-fully-automatic-delivery"&gt;
  &lt;/a&gt;
  METAMASK INTEGRATED AND FULLY AUTOMATIC DELIVERY
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#multi-language-feature-automatic-language-forward"&gt;
  &lt;/a&gt;
  MULTI LANGUAGE FEATURE ‚Äî AUTOMATIC LANGUAGE FORWARD
&lt;/h2&gt;

&lt;p&gt;(English, German, French, Russian, Arabic, Chinese, Turkish)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-amp-night-mode"&gt;
  &lt;/a&gt;
  DAY &amp;amp; NIGHT MODE
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#languagesetting-blog-and-fixed-pages"&gt;
  &lt;/a&gt;
  LANGUAGE-SETTING BLOG AND FIXED PAGES
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://tokenator.app"&gt;LIVE PREVIEW&lt;br&gt;
&lt;/a&gt;&lt;br&gt;
ERC20 Token Generator&lt;/p&gt;

&lt;p&gt;Hello.&lt;br&gt;
In the content of the subject, I will try to explain to you from the way the script works to all its features.&lt;br&gt;
I present to you this script that I have been working on for days.&lt;br&gt;
You Let Your Visitors Create Tokens In ERC20, BEP20 and HRC20 Standards on Ethereum, Binance Smart Chain, Polygon, Avalanche, HECO, Fantom and Arbitrum Networks.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yTz4hIIw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3bwg3udfl3p0bgao8g80.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yTz4hIIw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3bwg3udfl3p0bgao8g80.png" alt="BEP20 Token Generator" width="880" height="482"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can separately determine the fee for the Token Generation Service in each Network.&lt;br&gt;
You Have Price Setting Fields such as Master Price, Burnable, Mintable, Verified Source Code.&lt;br&gt;
The prices you set for each feature that the visitor wants to buy will be collected and the total fee will be charged from the visitor.&lt;br&gt;
You receive your payments with the token of the network where the token was created.&lt;br&gt;
Ex: Ethereum Network = ETH, BSC Network = BNB, Polygon Network = MATIC&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZdGFcTvL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/onko6bbwsc0c6xh6qdrv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZdGFcTvL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/onko6bbwsc0c6xh6qdrv.png" alt="ERC20 Token Generator" width="880" height="564"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In addition, Tesnet Networks of All Networks have also been integrated into the script so that your visitors can perform Token Generation Tests.&lt;br&gt;
If All Desired Items Are Entered Correctly and Conditions Are Provided;&lt;br&gt;
MetaMask Opens Automatically and Asks for Access Permission.&lt;br&gt;
After the Access Permission is granted, it Pays the Service Fee You Set.&lt;br&gt;
Payments are made directly to your wallet address registered in the Admin Panel.&lt;br&gt;
After the Payment Transfer is Completed, MetaMask Opens Again and User Approves the Token Agreement.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a3pqtV4b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j0fsv47r18pstvdhlmht.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a3pqtV4b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j0fsv47r18pstvdhlmht.png" alt="BSC Token Create" width="880" height="501"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After the Agreement Confirmation, Token is Prepared, Sent to the Preferred Network and All Tokens are Defined to the Wallet Address where the User Accepts the Agreement.&lt;br&gt;
The Wallet Address where the Agreement is Accepted becomes the Owner Address of O Token.&lt;br&gt;
Transactions are executed automatically and the Transaction Page with Token Information is opened.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XF736fMI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vj1tvfc7r9i225fkc5vw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XF736fMI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vj1tvfc7r9i225fkc5vw.png" alt="Binance Smart Chain Token Maker" width="880" height="583"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On this page;&lt;br&gt;
Page where the contract is made,&lt;br&gt;
There are links to the Network Page where Token Information is Listed.&lt;br&gt;
There is an auxiliary button where the prepared Token can add its information to the MetaMask Wallet.&lt;br&gt;
‚ÄúVerify Source Code‚Äù Button Is Also Available If The User Wants To Verify The Source Code Of His Token On The Network He Prefers.&lt;/p&gt;

&lt;p&gt;Other Features;&lt;br&gt;
Blog Module Published by Language&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m5j6lc5e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xwmfvisdgixacx5vt0bi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m5j6lc5e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xwmfvisdgixacx5vt0bi.png" alt="Image description" width="880" height="357"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Script Written with Multi-Language Feature and 7 Languages Added Ready.&lt;br&gt;
Automatic Language Forwarding Feature Is Available According To The Browser Language.&lt;br&gt;
If you want to add extra languages other than 7 ready languages, you can easily add and translate from the Admin Panel.&lt;br&gt;
Light and Night Mode Feature:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hwgr7-HT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zvba1z0va3d38doe42x5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hwgr7-HT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zvba1z0va3d38doe42x5.png" alt="Image description" width="880" height="462"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IfMQigSh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ol34g8k4omgwmp4iz3rs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IfMQigSh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ol34g8k4omgwmp4iz3rs.png" alt="Image description" width="880" height="293"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://tokenator.app"&gt;CLICK FOR DEMO.&lt;br&gt;
&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Software Features and Requirements:&lt;br&gt;
You Must Have PHP 7.4 and NodeJS Installed on Your Server.&lt;br&gt;
Coded Immaculately with CodeIgniter4.&lt;br&gt;
Powered by NodeJS.&lt;br&gt;
A Performance Server is Recommended for Fast Transactions.&lt;/p&gt;

&lt;p&gt;For Purchases, Questions, Suggestions and Information, Please Contact via Telegram or Whatsapp.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://api.whatsapp.com/send?phone=908503048932"&gt;WHATSAPP&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;&lt;a href="https://t.me/webtrolojiwork"&gt;TELEGRAM&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If You Like My Script, I Will Take A Like üòä&lt;/p&gt;

</description>
      <category>erc20</category>
      <category>bep20</category>
      <category>ethereum</category>
      <category>web3</category>
    </item>
    <item>
      <title>Label automation at your fingertips</title>
      <author>Nik Lopin</author>
      <pubDate>Wed, 08 Dec 2021 21:38:47 +0000</pubDate>
      <link>https://dev.to/doka-guide/label-automation-at-your-fingertips-33k3</link>
      <guid>https://dev.to/doka-guide/label-automation-at-your-fingertips-33k3</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YeAp6S_y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mei9bas7nk6dcgcforwm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YeAp6S_y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mei9bas7nk6dcgcforwm.png" alt="Image of dog created using font characters" width="880" height="293"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://doka.guide/"&gt;Doka&lt;/a&gt; is a Russian web developer's newest open-source handbook. We are new, so we had to create our workflow from scratch. We are demanding labels users, and we can hook you up too!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#problem"&gt;
  &lt;/a&gt;
  Problem
&lt;/h2&gt;

&lt;p&gt;When a project has a sophisticated multi-stage review process, the workflow quickly goes out of hand - pull requests get lost, and the review time grows, leading to unhappy contributors.&lt;/p&gt;

&lt;p&gt;For example, In Doka's case, we have four sections of our website, each with a dedicated editor: HMTL, CSS, JS, and tools. On top of that, there is a responsible for demos, an illustrator, and a publishing editor. We wanted to have one place where they can go to understand what job is pending.&lt;/p&gt;

&lt;p&gt;In most of the repos, you probably want to know:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the scope a particular PR has;&lt;/li&gt;
&lt;li&gt;what parts of the project it touches;&lt;/li&gt;
&lt;li&gt;whether it removes or edits files you don't want to be touched.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#options"&gt;
  &lt;/a&gt;
  Options
&lt;/h2&gt;

&lt;p&gt;What are the options Github gives us? There are not many: codeowners and labels.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#codeowners"&gt;
  &lt;/a&gt;
  Codeowners
&lt;/h3&gt;

&lt;p&gt;Assignee and reviewers are similar. Somebody assigns a person responsible for the PR, and you can filter the list by your name. &lt;/p&gt;

&lt;p&gt;Reviewers can even be automated using a CODEOWNERS file at the root of the project. Code owners are defined based on files and have to get approval from the owner. &lt;/p&gt;

&lt;p&gt;The significant advantage of that approach is that the reviewer gets notifications about the PR. &lt;/p&gt;

&lt;p&gt;However, the more code you have, the more complicated the file becomes. It also bloats the notification panel because you automatically watch every PR you were assigned to.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#labels"&gt;
  &lt;/a&gt;
  Labels
&lt;/h3&gt;

&lt;p&gt;Labels are a non-restrictive approach to marking PRs, and they do not require anything from your side to provide insights about the PR content.&lt;/p&gt;

&lt;p&gt;We found they are a great companion of code owners when cooked well. The label-scoped pull requests and issues have a unique filter URL, which a person can bookmark and see only their scope of work.&lt;/p&gt;

&lt;p&gt;However, you need to be careful to not create too many, making them impossible to grasp and use by contributors.&lt;/p&gt;

&lt;p&gt;The standard approach is to label PRs by task type (bug, feature, question, etc.) and by complexity (internal, good first issue).&lt;/p&gt;

&lt;p&gt;We decided to add more essential labels:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;scope - module, section, component;&lt;/li&gt;
&lt;li&gt;type work needed - design review, editor check, or demo creation;&lt;/li&gt;
&lt;li&gt;restricted files touched ‚Äî e.g., removed &lt;code&gt;package-lock.json&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;add your project-specific labels - we also add a label that reflects the &lt;code&gt;tag&lt;/code&gt; key from markdown files' frontmatter.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2IaJtzH1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b0s01p814jse5uupma0r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2IaJtzH1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b0s01p814jse5uupma0r.png" alt="Use code owners and labels" width="880" height="391"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We took the best from both worlds and followed the approach we found extremely useful:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Define code owners for parts that are critical, no less than two people per section;&lt;/li&gt;
&lt;li&gt;Provide additional information automatically through labels.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We couldn't find the best automatic labeler, so we wrote it ourselves. With it, you can automate both sides of the equation. It has built-in core modules:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;label PR based on file paths in a PR and their status (added, removed, renamed, modified);&lt;/li&gt;
&lt;li&gt;assignee;&lt;/li&gt;
&lt;li&gt;front matter from any statically generated engine (we use 11ty)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can add yours!&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/doka-guide"&gt;
        doka-guide
      &lt;/a&gt; / &lt;a href="https://github.com/doka-guide/doka-labeler"&gt;
        doka-labeler
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      An action for automatically labelling pull requests
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;div&gt;
  &lt;a rel="noopener noreferrer" href="https://github.com/doka-guide/doka-labeler/blob/main/img/logo.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P0f1kF6k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/doka-guide/doka-labeler/raw/main/img/logo.png" width="230" height="80" alt="Dog in glasses"&gt;&lt;/a&gt;
  &lt;h1&gt;
Doka Labeler&lt;/h1&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a href="https://github.com/doka-guide/doka-labeler/actions/workflows/test.yaml"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hFD2qyCJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/doka-guide/doka-labeler/actions/workflows/test.yaml/badge.svg" alt="Testing"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Automatically label pull requests based on multiple criteria with minimal configuration:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;files added, deleted, renamed, or modified&lt;/li&gt;
&lt;li&gt;assignees&lt;/li&gt;
&lt;li&gt;front matter of markdown files&lt;/li&gt;
&lt;li&gt;your custom rules&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Example&lt;/h2&gt;
&lt;p&gt;Set "design review" label if PR contains a new HTML file in the &lt;em&gt;src&lt;/em&gt; folder:&lt;/p&gt;
&lt;div class="highlight highlight-source-yaml position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-ent"&gt;design review&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-ent"&gt;files&lt;/span&gt;:
    &lt;span class="pl-ent"&gt;added&lt;/span&gt;: &lt;span class="pl-s"&gt;src/**/*.html&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
Comparison with other labelers&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Doka Labeler ‚Äî set labels PRs based on files and their statuses, assignees, front matter, and more with readable configuration.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/marketplace/actions/labeler"&gt;Official Github Labeler&lt;/a&gt; ‚Äî can assign labels by file path presented in the PR. Cannot assign labels based on file status.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/marketplace/actions/pr-labeler"&gt;PR Labeler&lt;/a&gt; ‚Äî assign labels based on branch name.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/marketplace/actions/label-mastermind"&gt;Label Mastermind&lt;/a&gt; ‚Äî can do everything, but has a complex configuration&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Getting Started&lt;/h2&gt;
&lt;h3&gt;
Create Workflow&lt;/h3&gt;
&lt;p&gt;Create a workflow (eg: .github/workflows/labeler.yml see &lt;a href="https://help.github.com/en/articles/configuring-a-workflow#creating-a-workflow-file"&gt;Creating a Workflow file&lt;/a&gt;) to apply the labeler for the repository:&lt;/p&gt;
&lt;div class="highlight highlight-source-yaml position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-ent"&gt;name&lt;/span&gt;: &lt;span class="pl-s"&gt;Labeler&lt;/span&gt;
&lt;span class="pl-ent"&gt;on&lt;/span&gt;
  &lt;span class="pl-ent"&gt;push&lt;/span&gt;:
    &lt;span class="pl-ent"&gt;branches&lt;/span&gt;:&lt;/pre&gt;‚Ä¶
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/doka-guide/doka-labeler"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;

&lt;p&gt;Let's consider a blog where posts are placed in the &lt;em&gt;posts&lt;/em&gt; folder. Each post can be either an article or a daily log which is defined in the &lt;code&gt;tags&lt;/code&gt; front-matter key (as in dev.to). &lt;/p&gt;

&lt;p&gt;We want to label PRs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;with the type of post it contains;&lt;/li&gt;
&lt;li&gt;as "needs design review" when a new image is added;&lt;/li&gt;
&lt;li&gt;an alarming label when critical files are removed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is how we can organize it using Doka Labeler. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#create-workflow"&gt;
  &lt;/a&gt;
  Create workflow
&lt;/h4&gt;

&lt;p&gt;Create a workflow definition file at &lt;code&gt;.github/workflows/labeler.yml&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;
  &lt;em&gt;labeler.yml&lt;/em&gt;
  &lt;br&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Labeler&lt;/span&gt;

&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;main&lt;/span&gt;
  &lt;span class="na"&gt;pull_request&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;main&lt;/span&gt;
  &lt;span class="na"&gt;workflow_dispatch&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;labeling&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Run labeler&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;doka-guide/doka-labeler@v1&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;token&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;${{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;secrets.GITHUB_TOKEN&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}"&lt;/span&gt;
          &lt;span class="na"&gt;config&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;.github/labeler-config.yml"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#define-labeling-rules"&gt;
  &lt;/a&gt;
  Define labeling rules
&lt;/h4&gt;

&lt;p&gt;Create a config file at &lt;code&gt;.github/labeler-config.yml&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;
  &lt;em&gt;labeler-config.yml&lt;/em&gt;
  &lt;br&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# set "article" label when front matter has "article"&lt;/span&gt;
&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;article"&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;meta&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;tags&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;article"&lt;/span&gt;

&lt;span class="c1"&gt;# set "daily log" label from front matter:&lt;/span&gt;
&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;daily&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;log"&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;meta&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;tags&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;daily-log"&lt;/span&gt;


&lt;span class="c1"&gt;# "design review" if images are added or modified:&lt;/span&gt;
&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;design&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;review"&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;files&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;added&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="s"&gt;.(jpg|jpeg|svg|png)&lt;/span&gt;
      &lt;span class="na"&gt;modified&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="s"&gt;.(jpg|jpeg|svg|png)&lt;/span&gt;

&lt;span class="c1"&gt;# alarm when critical files are removed&lt;/span&gt;
&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;üö®&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;alarm"&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;strategy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;create-if-missing&lt;/span&gt; &lt;span class="c1"&gt;# create this label if it does not exist&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;files&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;modified&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;package-lock.json&lt;/span&gt;
      &lt;span class="na"&gt;removed&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;package-lock.json&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;package.json&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;.github/**&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;/p&gt;

&lt;p&gt;We have more examples &lt;a href="https://github.com/doka-guide/doka-labeler/tree/main/examples"&gt;in the repository&lt;/a&gt;!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h3&gt;

&lt;p&gt;Maintainer Must-Haves&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#gratitude"&gt;
  &lt;/a&gt;
  Gratitude
&lt;/h3&gt;

&lt;p&gt;People:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__user ltag__user__id__738094"&gt;
  
    .ltag__user__id__738094 .follow-action-button {
      background-color: #000000 !important;
      color: #ffffff !important;
      border-color: #000000 !important;
    }
  
    &lt;a href="/igsekor" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ALUWLQGK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--1xFsqtkU--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/738094/35410469-b249-4e2b-981d-0eaed5f15c36.jpeg" alt="igsekor image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/igsekor"&gt;Igor Korovchenko&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/igsekor"&gt;My first code was on Basic in September 1990. During 3 years after 1992 I hadn't any opportunity to write a code. But from the end of 1995 I started...&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;div class="ltag__user ltag__user__id__206604"&gt;
  
    .ltag__user__id__206604 .follow-action-button {
      background-color: #00328a !important;
      color: #55f676 !important;
      border-color: #00328a !important;
    }
  
    &lt;a href="/nlopin" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m7P8RUZA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--ZNr0iA3Z--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/206604/251d3416-af2c-4ef2-a3ac-a1b9477af193.jpg" alt="nlopin image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/nlopin"&gt;Nik Lopin&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/nlopin"&gt;Teaching, mentoring, edtech, mobility and fast web. 

10+ years in IT, in various positions: engineer, tech lead, engineering manager, and product owner.&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Libraries used:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/actions/checkout"&gt;Checkout Action&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/micromatch/picomatch"&gt;Picomatch&lt;/a&gt; instead of minimatch&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/jxson/front-matter"&gt;front-matter&lt;/a&gt; parser&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/vercel/ncc"&gt;Vercel's ncc&lt;/a&gt; compiler&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>actionshackathon21</category>
      <category>github</category>
      <category>opensource</category>
      <category>doka</category>
    </item>
    <item>
      <title>How I Fixed A Memory Leak In Expose.sh, My NodeJS App</title>
      <author>Robbie Cahill</author>
      <pubDate>Wed, 08 Dec 2021 21:34:13 +0000</pubDate>
      <link>https://dev.to/robbiecahill/how-i-fixed-a-memory-leak-in-my-nodejs-app-b31</link>
      <guid>https://dev.to/robbiecahill/how-i-fixed-a-memory-leak-in-my-nodejs-app-b31</guid>
      <description>&lt;h4&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h4&gt;

&lt;p&gt;If you run Node in production, sooner or later you'll come across a common bug known as a memory leak.&lt;/p&gt;

&lt;p&gt;This was the case with my current side project, &lt;a href="https://expose.sh?utm_source=dev.to"&gt;expose&lt;/a&gt;. I wrote a popular article &lt;a href="https://dev.to/robbiecahill/six-ways-to-drastically-boost-your-productivity-as-a-node-developer-1mjd"&gt;Six Ways To Drastically Boost Your Productivity As A Node Developer&lt;/a&gt; which mentioned it, then suddenly the server was overloaded.&lt;/p&gt;

&lt;p&gt;During the period of high load, I could see that a memory leak was forming.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-is-raw-expose-endraw-"&gt;
  &lt;/a&gt;
  What is &lt;code&gt;expose&lt;/code&gt;?
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;expose&lt;/code&gt; is a command line app that makes its simple to give a public URL to any web based app you have running locally on your machine. So if you have a local API runnig at &lt;code&gt;http://localhost:8000&lt;/code&gt; and you then run &lt;code&gt;expose 8000&lt;/code&gt;, it will generate a public URL that you can then share.&lt;/p&gt;

&lt;p&gt;It works by creating a websocket connection between the client and the expose service, which listens with websocket, http and https. When requests come in to the public URL, they are routed through the websocket connection to the client and then the client hits your server locally.&lt;/p&gt;

&lt;p&gt;This has various uses like demoing early work without needing to deploy code anywhere and debugging webhook integrations.&lt;/p&gt;

&lt;p&gt;You can install it for Linux, Mac and Windows &lt;a href="https://expose.sh/install?utm_source=dev.to"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-leak"&gt;
  &lt;/a&gt;
  The leak
&lt;/h4&gt;

&lt;p&gt;In the &lt;code&gt;expose&lt;/code&gt; server, I have a Singleton class called &lt;code&gt;Proxy&lt;/code&gt;, which is in TypeScript, the superset of JavaScript with type safety.&lt;/p&gt;

&lt;p&gt;This class manages all client connections to the expose service. Anytime you run &lt;code&gt;expose&lt;/code&gt; to get a public url for your project running on localhost, a Websocket connection is created between the client and the service. Those connections are stored in &lt;code&gt;Proxy.connections&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is a trimmed down version of the &lt;code&gt;Proxy&lt;/code&gt; class. The real version has extra logic, such as finder methods to help route requests to the right client websocket so that you see your site, not someone elses when you hit the public URL.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Connection&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./connection&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;HostipWebSocket&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./websocket/host-ip-websocket&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nb"&gt;Proxy&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;instance&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Proxy&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nl"&gt;connections&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Connection&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

    &lt;span class="nx"&gt;addConnection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hostname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;websocket&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;HostipWebSocket&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;clientId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="na"&gt;connection&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;hostname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;clientId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;websocket&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;

        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connections&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;....&lt;/span&gt;
&lt;span class="nx"&gt;More&lt;/span&gt; &lt;span class="nx"&gt;methods&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;find&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;right&lt;/span&gt; &lt;span class="nx"&gt;connections&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;avoid&lt;/span&gt;    &lt;span class="nx"&gt;duplicates&lt;/span&gt; &lt;span class="nx"&gt;etc&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;....&lt;/span&gt;

    &lt;span class="nx"&gt;listConnections&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connections&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;getInstance&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nb"&gt;Proxy&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;Proxy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nb"&gt;Proxy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Proxy&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Proxy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Every time a client connects, &lt;code&gt;addConnection()&lt;/code&gt; is called. The problem here is that when they disconnect, the Websocket connection stays alive and their entry in &lt;code&gt;Proxy.connections&lt;/code&gt; stays there.&lt;/p&gt;

&lt;p&gt;So as more clients connect, the &lt;code&gt;Proxy.connections&lt;/code&gt; array gets bigger and bigger. This is a classic memory leak.&lt;/p&gt;

&lt;p&gt;Before the article, this wasn't such an issue as few people were connecting to and using the service. After the article, the server had to deal with more connections, then ran out of memory. I ended up upgrading the instance to a bigger one, which handled the load even with the memory leak.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#fixing-the-leak"&gt;
  &lt;/a&gt;
  Fixing the leak
&lt;/h4&gt;

&lt;p&gt;Once the problem was apparent, I went about fixing the leak.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;addConnection()&lt;/code&gt;, I started tagging websocket connections with the client id of the connecting client.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;addConnection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hostname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;websocket&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;HostipWebSocket&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;clientId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;// Tag the connection so it can be found and destroyed later&lt;/span&gt;
&lt;span class="c1"&gt;// when the client disconnects&lt;/span&gt;
        &lt;span class="nx"&gt;websocket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exposeShClientId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;clientId&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="na"&gt;connection&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;hostname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;clientId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;websocket&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;

        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connections&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I also added a &lt;code&gt;deleteConnection()&lt;/code&gt; method to the &lt;code&gt;Proxy&lt;/code&gt; class to handle the actual deletion of connections, so they could then be cleaned up by the garbage collector.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;deleteConnection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;clientId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connections&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connections&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clientId&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;clientId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connections&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I then added a hook on the websocket connections so that when they close, their associated &lt;code&gt;Connection&lt;/code&gt; is deleted&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;websocket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;close&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reason&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;websocket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;terminate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;proxy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Proxy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getInstance&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="nx"&gt;proxy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deleteConnection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;websocket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exposeShClientId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once this was done, connections in &lt;code&gt;Proxy.connections&lt;/code&gt; were cleaned up as clients disconnected. No more endlessly growing array and no more memory leak.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h4&gt;

&lt;p&gt;Memory leaks are common in Node as servers often run as a single process. Anything left over from each connection that grows will cause a memory leak.&lt;/p&gt;

&lt;p&gt;So keep an eye out for them next time you see your instance running out of memory.&lt;/p&gt;

&lt;p&gt;Tip: If you want to basically almost eliminate memory leaks, consider trying out PHP, my other favorite language. Each request is a separate process so it is basically stateless. It wouldn't work for &lt;code&gt;expose&lt;/code&gt;, because the server needs to maintain state with the connections.&lt;/p&gt;

&lt;p&gt;To introduce a memory leak into a PHP application would take alot of effort - not just a bug in the code but also very bad misconfiguration. This is one of the better parts of PHP as you are protected from these kinds of bugs.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>tutorial</category>
      <category>node</category>
    </item>
    <item>
      <title>Introduction to the Twelve-Factor App Part 2</title>
      <author>Anvil Engineering</author>
      <pubDate>Wed, 08 Dec 2021 21:14:25 +0000</pubDate>
      <link>https://dev.to/useanvil/introduction-to-the-twelve-factor-app-part-2-icm</link>
      <guid>https://dev.to/useanvil/introduction-to-the-twelve-factor-app-part-2-icm</guid>
      <description>&lt;h1&gt;
  &lt;a href="#12-factor-app-blog-post-part-2"&gt;
  &lt;/a&gt;
  12 Factor App Blog Post Part 2
&lt;/h1&gt;

&lt;p&gt;Summary: Make your toy web apps more robust and manageable by following the Twelve-Factor App methodology.&lt;/p&gt;

&lt;p&gt;This is the second part in a series of posts detailing the &lt;a href="https://12factor.net/"&gt;12 Factor App&lt;/a&gt;. In the last post we looked at:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Your codebase and made it deployable across different environments&lt;/li&gt;
&lt;li&gt;Dependencies and why they‚Äôre important in reproducibility&lt;/li&gt;
&lt;li&gt;Configuration files and how to make them useful across different environments&lt;/li&gt;
&lt;li&gt;Backing services, what they are and how decoupling gives your app more flexibility&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you need a refresher or aren‚Äôt familiar with the above already, take a look at &lt;a href="https://www.useanvil.com/blog/engineering/introduction-twelve-factor-app/"&gt;the last post&lt;/a&gt;. Many of the earlier concepts are used as building blocks for the concepts in this post.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#v-build-release-run"&gt;
  &lt;/a&gt;
  V. Build, release, run
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Strictly separate build and run stages - &lt;a href="https://12factor.net/build-release-run"&gt;https://12factor.net/build-release-run&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Many of the previous sections finally start coming together here. This may be one of the more time consuming sections or steps, but also the one that will improve your development and release cycles tremendously. These steps are also what people usually refer to as Continuous Integration/Continuous Deployment, or CI/CD. Let‚Äôs step through from the start.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#build"&gt;
  &lt;/a&gt;
  Build:
&lt;/h4&gt;

&lt;p&gt;In the build step, the goal is to get all code and assets into a usable state at the run step. The end product can differ depending on whether you‚Äôre building for development or for production. In a development environment, for example, we could skip optimizations such as compressing files and compiling frontend assets (HTML/CSS/JS) into bundles that would normally live in a CDN.&lt;/p&gt;

&lt;p&gt;In general, the build step can look like the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Pin your release on a specific commit or tag, if using git (Factor I). 
This keeps everything at a known starting point.&lt;/li&gt;
&lt;li&gt;Start compiling your code.
This depends on the codebase, but in general, this would be:

&lt;ul&gt;
&lt;li&gt;Gather all the app‚Äôs dependencies (Factor II) via &lt;code&gt;npm&lt;/code&gt;, &lt;code&gt;PyPI&lt;/code&gt;, git clones, etc.&lt;/li&gt;
&lt;li&gt;Compile code where needed. This could mean using a bundler like &lt;code&gt;webpack&lt;/code&gt;, or compiling binaries and libraries like Java .jar files.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Log all build processes running.&lt;/li&gt;
&lt;li&gt;Build process should have a mechanism to keep track of attempted builds -- whether or not they were successful.&lt;/li&gt;
&lt;li&gt;If any of the above fails to complete, stop the entire build-release-run process and send notifications or some sort of message to the developer about the failure.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#release"&gt;
  &lt;/a&gt;
  Release:
&lt;/h4&gt;

&lt;p&gt;In the release step, the main product of the release step is to have your compiled and built code ready to run, publish, or use for the end-user in some way.&lt;/p&gt;

&lt;p&gt;The release process can look like the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Apply config specific to this build‚Äôs environment (Factor III).&lt;/li&gt;
&lt;li&gt;For example, a development environment can point to a database running on a cheap server instance, while a production version would point to a much more robust version on Amazon RDS with backups enabled.&lt;/li&gt;
&lt;li&gt;Run your tests! This would include unit, integration, and end-to-end tests. These tests would run against the compiled build and with the proper config applied. If any tests fail, we could immediately cancel any further actions and send out notifications/messages about the failure.&lt;/li&gt;
&lt;li&gt;Any other preparations you need before getting to the run phase.&lt;/li&gt;
&lt;li&gt;If using Docker, this is when you would create an image of all the parts of your application that you want deployed. This image is a snapshot of the application code where you know all tests have passed and the build process ran successfully.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#run"&gt;
  &lt;/a&gt;
  Run:
&lt;/h4&gt;

&lt;p&gt;At this point, all the previous steps should have given us high confidence that your application will work as expected. We‚Äôve compiled and prepared all code and assets, ensuring that the application is set up correctly and does not have any build-time problems. We‚Äôve tested the application itself with run-time tests, and maybe even end-to-end tests. Now all we have to do is just deploy the thing.&lt;/p&gt;

&lt;p&gt;The Run step should be fairly straightforward. We‚Äôll be assuming you‚Äôre using Docker, or some other containerization tool:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Upload your Docker image(s) from the release step to your code‚Äôs final running destination.&lt;/li&gt;
&lt;li&gt;Run your application.&lt;/li&gt;
&lt;li&gt;Notify/message any other external services that your application is up and running.&lt;/li&gt;
&lt;li&gt;If scaling to multiple instances, there are infrastructure considerations that need to be made. You would need a load balancer like &lt;a href="http://nginx.org/en/docs/http/load_balancing.html"&gt;nginx&lt;/a&gt; or &lt;a href="http://www.haproxy.org/"&gt;HAProxy&lt;/a&gt;. Some cloud services also handle this automatically like Amazon ECS, so double check with your provider docs as well. At the higher end of complexity, much of this can also be handled with Kubernetes, but that in itself would require more than a few blog posts to introduce.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The build-release-run workflow is very well-supported on platforms like GitHub and GitLab with GitHub Actions and GitLab CI/CD, respectively. You can also customize your own build process with tools like Jenkins and CircleCI. When using those services, the build and release steps are covered, but the run step will require a container hosting service such as Amazon ECS. There are also services that encompass all the steps such as Heroku (which developed this 12 Factor methodology).&lt;/p&gt;

&lt;p&gt;At this point, we actually have a running app. We could stop here, but we have millions of users to take care of and the application needs to scale easily!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#vi-processes"&gt;
  &lt;/a&gt;
  VI. Processes
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Execute the app as one or more stateless processes&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This section is mainly how to think about your application processes in the context of scaling. At its simplest case, we can think of a single-purpose application that resizes images. This application would get image data, resize it, and finally upload it to a cloud storage service like Amazon S3.&lt;/p&gt;

&lt;p&gt;For this application, we have no shared state from other processes. We can even imagine 10s or 100s of instances of these running independently in parallel. They all don‚Äôt require any additional context data nor do they need to share data. They only need an input (image data) and they return an output (successful upload to S3).&lt;/p&gt;

&lt;p&gt;What‚Äôs the key aspect to processes?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Processes are stateless&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;That is, they don't expect data in memory or on disk will exist permanently. The easiest way to think about this is to ask: If the app were to be completely torn down and redeployed from a Docker image, would it be a catastrophic failure?&lt;/p&gt;

&lt;p&gt;In a twelve-factor app, all the states that we need to persist (database, cloud storage, session data, etc.) are saved in backing services (Factor IV) that our app uses. These backing services are defined in our app‚Äôs config (Factor III) which has been applied in the release step of our build-release-run process (Factor V). The app itself should be highly recoverable if it goes down, and at the opposite end, the app should easily scale up to more instances.&lt;/p&gt;

&lt;p&gt;This architecture will play a key role in a few of the next sections.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#to-be-continued"&gt;
  &lt;/a&gt;
  To be continued
&lt;/h2&gt;

&lt;p&gt;This post covered sections V-VI of the Twelve-Factor App methodology. Hopefully, this has shown the interconnectedness of all the factors and how smaller efforts in your application architecture can build up to something that can scale and have more resilience.&lt;br&gt;
Here at Anvil we follow many of these concepts in our development process and we believe that sharing our experiences helps everyone create awesome products. If you‚Äôre developing something cool with PDFs or paperwork automation, let us know at &lt;a href="mailto:developers@useanvil.com"&gt;developers@useanvil.com&lt;/a&gt;. We‚Äôd love to hear from you.&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Bulletproof Express - Enterprise-Level Express.js</title>
      <author>Jo√£o Victor Cardoso Kdouk</author>
      <pubDate>Wed, 08 Dec 2021 20:48:39 +0000</pubDate>
      <link>https://dev.to/jvkdouk/bulletproof-express-enterprise-level-expressjs-2gig</link>
      <guid>https://dev.to/jvkdouk/bulletproof-express-enterprise-level-expressjs-2gig</guid>
      <description>&lt;p&gt;&lt;a href="https://github.com/JVKdouk/bulletproof-express/"&gt;Click Here to Access It&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I believe I am not the only who has read tens of express guides and never really found the perfect way of implementing it.&lt;/p&gt;

&lt;p&gt;In fact, I am confident to say that every Node.js developer has read at least 5 to 6 different guides on writing Express applications. How to make it work is not really a problem nowadays. However, have you ever asked yourself what is the &lt;strong&gt;right way&lt;/strong&gt; to do it? &lt;/p&gt;

&lt;p&gt;With that in mind, I decided to create a boilerplate that would summarize all the best practices used nowadays in the software industry, ensuring reliability, maintainability and scalability. This is what Bulletproof Express tries to accomplish. These are the features currently provided:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;[x] Security (HTTP Parameter Pollution, Fingerprint, XSS...)&lt;/li&gt;
&lt;li&gt;[x] Support to Prisma DB (Easily Swappable)&lt;/li&gt;
&lt;li&gt;[x] Error Management&lt;/li&gt;
&lt;li&gt;[x] Logging (Using Sentry)&lt;/li&gt;
&lt;li&gt;[x] Component Structure (Features)&lt;/li&gt;
&lt;li&gt;[x] Queries and Mutators&lt;/li&gt;
&lt;li&gt;[x] Testing (Using Jest)&lt;/li&gt;
&lt;li&gt;[x] Permissions&lt;/li&gt;
&lt;li&gt;[x] TypeScript&lt;/li&gt;
&lt;li&gt;[x] Multi-Auth Support (JWT Implemented)&lt;/li&gt;
&lt;li&gt;[x] Cookie Parsing Supported&lt;/li&gt;
&lt;li&gt;[x] Environment Variable Parsing&lt;/li&gt;
&lt;li&gt;[x] Node.js Best Practices Compliant&lt;/li&gt;
&lt;li&gt;[x] Fully Asynchronous Controllers&lt;/li&gt;
&lt;li&gt;[ ] Seeding&lt;/li&gt;
&lt;li&gt;[ ] Testing via Docker&lt;/li&gt;
&lt;li&gt;[ ] Auto-Documentation (Swagger?)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#mvc-into-components"&gt;
  &lt;/a&gt;
  MVC into Components
&lt;/h2&gt;

&lt;p&gt;This boilerplate implements a slightly modified version of Model-View-Controller Pattern. Instead of having a single file storing every endpoint of a controller, every controller is broken down into Queries and Mutators. Inside Queries, you will find operations that retrieve data (usually GET methods). Inside Mutators, you will find operations that change data (usually POST, DELETE, and PUT methods).&lt;br&gt;
Queries and Mutators are joined together inside the controller-specific &lt;code&gt;routes.ts&lt;/code&gt;, which in turn are joined by the upper-level router at &lt;code&gt;/routes/index.ts&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nodejs-best-practices"&gt;
  &lt;/a&gt;
  Node.js Best Practices
&lt;/h2&gt;

&lt;p&gt;This repository is compliant with Node.js Best Practices (&lt;a href="https://github.com/goldbergyoni/nodebestpractices"&gt;Click Here&lt;/a&gt; to access their repository). Security standards are put above any decision. Testing is easy to implement and broken into individual feature, integrating it with the rest of the code as it should be. If you feel like there is any violation of those best practices, feel free to open an issue.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#special-thanks"&gt;
  &lt;/a&gt;
  Special Thanks
&lt;/h2&gt;

&lt;p&gt;Special thanks to the Spectrum Project (&lt;a href="https://github.com/withspectrum/spectrum"&gt;Here&lt;/a&gt;) for laying the foundations to Bulletproof Express. Also, many thanks to Node.js Best Practices (&lt;a href="https://github.com/goldbergyoni/nodebestpractices"&gt;Here&lt;/a&gt;) and Bulletproof React (&lt;a href="https://github.com/alan2207/bulletproof-react"&gt;Here&lt;/a&gt;) for providing guidance on how Enterprise-Level Software should be written.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>programming</category>
      <category>express</category>
    </item>
    <item>
      <title>Acra. Features: Data masking</title>
      <author>Cossack Labs</author>
      <pubDate>Wed, 08 Dec 2021 20:47:16 +0000</pubDate>
      <link>https://dev.to/cossacklabs/acra-features-data-masking-3ng7</link>
      <guid>https://dev.to/cossacklabs/acra-features-data-masking-3ng7</guid>
      <description>&lt;p&gt;At &lt;a href="https://www.cossacklabs.com/"&gt;Cossack Labs&lt;/a&gt;, we strive to go ahead of trends and blaze a most effective trail for our customers. So, we designed Acra as a powerful multi-layer security tool for fintech, neobanks, healthcare and critical industry companies to cover data security threats in one shot.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;a href="https://github.com/cossacklabs/acra"&gt;Use Acra Community Edition for free&lt;/a&gt;. Check out &lt;a href="https://www.cossacklabs.com/acra/#pricing"&gt;Acra Enterprise Edition&lt;/a&gt; tailored for solutions with high security requirements.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#data-masking"&gt;
  &lt;/a&gt;
  3Ô∏è‚É£ Data masking
&lt;/h2&gt;

&lt;p&gt;Acra allows configuring &lt;a href="https://docs.cossacklabs.com/acra/security-controls/masking/"&gt;data masking&lt;/a&gt; to certain database fields. Data fields stay encrypted in the database, but look masked/anonymized when reading through Acra.&lt;/p&gt;

&lt;p&gt;üí° Data masking is useful &lt;strong&gt;whether anonymizing datasets for reporting or exchanging the data with untrusted third parties.&lt;/strong&gt; Acra supports full or partial data masking, allowing customization of mask format.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9qx1QWAw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f1pk8fvs4u2i00fa8j1a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9qx1QWAw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f1pk8fvs4u2i00fa8j1a.png" alt="Data masking. Acra by Cossack Labs" width="822" height="290"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, with data masking, &lt;strong&gt;data stays encrypted, but could be easily shared&lt;/strong&gt; with untrusted parties without revealing it. &lt;/p&gt;

&lt;p&gt;üî• Let‚Äôs explore that else you get in the same box with Acra database security suite, follow the series.&lt;/p&gt;

</description>
      <category>cryptography</category>
      <category>security</category>
      <category>encryption</category>
      <category>database</category>
    </item>
    <item>
      <title>BUILD A TRANSLATOR WITH PYTHON IN 5 MINUTES.</title>
      <author>Geof</author>
      <pubDate>Wed, 08 Dec 2021 20:42:06 +0000</pubDate>
      <link>https://dev.to/geofspot/build-a-translator-with-python-in-5-minutes-3ede</link>
      <guid>https://dev.to/geofspot/build-a-translator-with-python-in-5-minutes-3ede</guid>
      <description>&lt;h2&gt;
  &lt;a href="#building-a-language-translator-with-python-is-fun"&gt;
  &lt;/a&gt;
  BUILDING A LANGUAGE TRANSLATOR WITH PYTHON IS FUN.
&lt;/h2&gt;

&lt;p&gt;Why pay a translator or purchase an expensive translation app when you can build an effective multilingual translator with python in 5 minutes?&lt;/p&gt;

&lt;p&gt;Going furthermore, we‚Äôll make this translator even more fun by adding a text to speech capability to it. This will also make it easy for one to use this translator to learn a new language. Sounds interesting right?&lt;/p&gt;

&lt;p&gt;Talk is cheap..I know right? Well then let‚Äôs get down to the business of the day. To build this amazing translator with python, we‚Äôll be needing a few python modules:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://py-googletrans.readthedocs.io/en/latest/"&gt;googletrans&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://gtts.readthedocs.io/en/latest/"&gt;gtts&lt;/a&gt;(Google text to speech)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/playsound/"&gt;playsound&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/library/pprint.html"&gt;pprint&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To familiarize yourself with the aforementioned just click on them and view the module‚Äôs documentation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#let-the-coding-begin"&gt;
  &lt;/a&gt;
  LET THE CODING BEGIN..
&lt;/h2&gt;

&lt;p&gt;First we‚Äôll start by importing those modules:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;googletrans&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Translator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;constants&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pprint&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;pprint&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;playsound&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;playsound&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;gtts&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;gTTS&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#why-do-we-need-these-modules"&gt;
  &lt;/a&gt;
  WHY DO WE NEED THESE MODULES?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;So we‚Äôll use google trans to translate to any language we choose.&lt;/li&gt;
&lt;li&gt;Pretty printer(pprint) will print out language codes in a cleaner format.&lt;/li&gt;
&lt;li&gt;Meanwhile we‚Äôll use gtts to convert the translated language text to speech/audio format(mp3).Then we‚Äôll use playsound to play the translated words(mp3).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let‚Äôs put it all together in a function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;trnslate&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;tr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Translator&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;pprint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'The available languages and their codes are: 
 &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;constants&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LANGUAGES&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;lan&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Please enter your desired language:&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;phrase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Say something nice:&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;translated&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;phrase&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lan&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;translated&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#lets-quickly-explain-the-code"&gt;
  &lt;/a&gt;
  Let‚Äôs quickly explain the code:
&lt;/h4&gt;

&lt;p&gt;We created a function called &lt;em&gt;trnslate()&lt;/em&gt;, we didn‚Äôt call it translate to avoid issues since that‚Äôs a method in the module. Then we created an instance of &lt;strong&gt;&lt;em&gt;Translator&lt;/em&gt;&lt;/strong&gt; class and assigned to a variable &lt;em&gt;tr&lt;/em&gt;. The we used the &lt;em&gt;constants.LANGUAGES&lt;/em&gt; to print out all the available languages and their codes to our program user.&lt;/p&gt;

&lt;p&gt;We set up the words to translate and preferred language in the variables named &lt;em&gt;lan&lt;/em&gt; and &lt;em&gt;phrase&lt;/em&gt;, you can call yours anything you like.&lt;/p&gt;

&lt;p&gt;Then we translated and saved the phrase/words to the variable named &lt;em&gt;translated&lt;/em&gt; and use &lt;em&gt;pprint&lt;/em&gt; to print them out. Ordinarily if you don‚Äôt add the &lt;em&gt;.text&lt;/em&gt; at the end of the variable &lt;em&gt;translated&lt;/em&gt; you‚Äôll get extra information about the translated words, but to limit things to only the translated texts we append the .text.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-make-it-even-more-fun-with-text-to-speech"&gt;
  &lt;/a&gt;
  LET‚ÄôS MAKE IT EVEN MORE FUN WITH TEXT TO SPEECH:
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;trnslate&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;tr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Translator&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;pprint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'The available languages and their codes are: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;constants&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LANGUAGES&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;lan&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Please enter your desired language:&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;phrase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Say something nice:&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;translated&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;phrase&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lan&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;translated&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;aud&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gTTS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;translated&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lang&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lan&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;aud&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'trantest.mp3'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;playsound&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'trantest.mp3'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;trnslate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So the extra codes added was to convert the translated words to speech. We used &lt;em&gt;ggts&lt;/em&gt; to translate the text to the same language the user preferred.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But be advised:&lt;/strong&gt; all the languages available in &lt;em&gt;googletrans&lt;/em&gt; might not all be in &lt;em&gt;gtts&lt;/em&gt;. So make sure the language you use is available in both modules. To confirm that, check the languages on googletrans with &lt;em&gt;&lt;strong&gt;print(constants.LANGUAGES)&lt;/strong&gt;&lt;/em&gt;, then go to your command line and run &lt;em&gt;&lt;strong&gt;gtts-cli ‚Äìall&lt;/strong&gt;&lt;/em&gt;. With the information you‚Äôll be able to figure out all the languages the both modules have in common.&lt;/p&gt;

&lt;p&gt;To avoid errors make sure all the modules are already installed and imported before running the codes. However if you wish to translate only without having the text to speech part, probably because the language you want is not on gtts, then you may comment or remove all the codes associated with gtts and your code will still work perfectly.&lt;/p&gt;

&lt;p&gt;To see another tutorial on text to speech checkout this short tutorial &lt;a href="https://pythgenie.geofsphere.com/text-to-speech-in-python/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Hope you enjoyed building this quick translator with python codes. Remember you need internet for this codes to work effectively.&lt;/p&gt;

&lt;p&gt;Click the follow button to automatically get the first hand information when the next post or more advanced translator with python tutorial is published.&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>translator</category>
    </item>
    <item>
      <title>Build Load Balancer in Go</title>
      <author>b0r</author>
      <pubDate>Wed, 08 Dec 2021 20:30:38 +0000</pubDate>
      <link>https://dev.to/b0r/build-load-balancer-in-go-1oo7</link>
      <guid>https://dev.to/b0r/build-load-balancer-in-go-1oo7</guid>
      <description>&lt;p&gt;&lt;strong&gt;Learn how to build a simple load balancer server in Go.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Table of Contents:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#what-is-a-load-balancer"&gt;What is a Load Balancer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#use-cases"&gt;Use cases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#load-balancing-techniques"&gt;Load Balancing techniques&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#load-balancer-implementation"&gt;Load Balancer implementation&lt;/a&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#s1"&gt;Step 1: Create origin server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#s2"&gt;Step 2: Create a load balancer server&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#additional-info"&gt;Additional information&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#resources"&gt;Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-load-balancer"&gt;
  &lt;/a&gt;
  What is a Load Balancer &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;A load balancer is a server that provides a gateway between the client and one or more origin servers. Instead of connecting directly to one of the origin servers, client directs the request to the load balancer server, which routes the request to one of multiple origin servers capable of fulfilling the request.&lt;/p&gt;

&lt;p&gt;Load balancing refers to evenly distributing load (incoming network traffic) across a group of backend resources or origin servers. [1]&lt;/p&gt;

&lt;p&gt;Load balancer is a type of &lt;a href="https://dev.to/b0r/implement-reverse-proxy-in-gogolang-2cp4"&gt;reverse proxy&lt;/a&gt; with capability of evenly distributing the load.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4LWn1u6G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bn1tg5o6f6kjqkmsbsep.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4LWn1u6G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bn1tg5o6f6kjqkmsbsep.png" alt="Simple load balancer example (2)" width="640" height="324"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-cases"&gt;
  &lt;/a&gt;
  Use cases &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Typical use cases are: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;distributing client requests or network load efficiently across multiple origin servers&lt;/li&gt;
&lt;li&gt;ensuring high availability and reliability by sending requests only to origin servers that are online&lt;/li&gt;
&lt;li&gt;providing the flexibility to add or subtract servers as demand dictates (elasticity) [2]&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#load-balancing-techniques"&gt;
  &lt;/a&gt;
  Load Balancing techniques &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#random-order"&gt;
  &lt;/a&gt;
  Random order
&lt;/h3&gt;

&lt;p&gt;Requests are distributed across the group of origin servers at random order.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#round-robin"&gt;
  &lt;/a&gt;
  Round Robin
&lt;/h3&gt;

&lt;p&gt;Requests are distributed across the group of origin servers sequentially.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#weighted-round-robin"&gt;
  &lt;/a&gt;
  Weighted Round Robin
&lt;/h3&gt;

&lt;p&gt;Weight (priority) is associated to each origin server based on some metric. &lt;br&gt;
Requests are distributed across the group of origin servers sequentially, respecting the priority of each.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#loadmetric-based"&gt;
  &lt;/a&gt;
  Load/Metric based
&lt;/h3&gt;

&lt;p&gt;Requests are distributed across the group of origin servers based on the load (e.g. affirmed by health check) of each origin server.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#ip-based"&gt;
  &lt;/a&gt;
  IP based
&lt;/h3&gt;

&lt;p&gt;The IP address of the client is used to determine which server receives the request.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#path-based"&gt;
  &lt;/a&gt;
  Path based
&lt;/h3&gt;

&lt;p&gt;Requests are distributed across the group of origin servers based on the path of the request. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#load-balancer-implementation"&gt;
  &lt;/a&gt;
  Load Balancer implementation &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#step-1-create-origin-server"&gt;
  &lt;/a&gt;
  Step 1: Create origin server &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;In order to test our load balancer, we first need to create and start a simple origin server. &lt;br&gt;
Origin server will be started &lt;strong&gt;twice&lt;/strong&gt; at port &lt;code&gt;8081&lt;/code&gt; and &lt;code&gt;8082&lt;/code&gt;, and it will return a string containing the value "origin server response : 8081 or 8082".&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"flag"&lt;/span&gt;
    &lt;span class="s"&gt;"fmt"&lt;/span&gt;
    &lt;span class="s"&gt;"log"&lt;/span&gt;
    &lt;span class="s"&gt;"net/http"&lt;/span&gt;
    &lt;span class="s"&gt;"time"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;portFlag&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"port"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;8081&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"listening port"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Parse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;port&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;":%d"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;portFlag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;originServerHandler&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HandlerFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rw&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"[origin server] received request: %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Now&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rw&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"origin server response %s"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ListenAndServe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;originServerHandler&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#step-1-test"&gt;
  &lt;/a&gt;
  Step 1 Test
&lt;/h4&gt;

&lt;p&gt;Start the server:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;go run main &lt;span class="nt"&gt;-port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;8081
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;go run main &lt;span class="nt"&gt;-port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;8082
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Use &lt;code&gt;curl&lt;/code&gt; command to validate origin servers (&lt;code&gt;8081&lt;/code&gt;, &lt;code&gt;8082&lt;/code&gt;) works as expected:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;% curl &lt;span class="nt"&gt;-i&lt;/span&gt; localhost:8081
HTTP/1.1 200 OK
Date: Wed, 08 Dec 2021 20:01:10 GMT
Content-Length: 28
Content-Type: text/plain&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;utf-8

origin server response :8081%
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;% curl &lt;span class="nt"&gt;-i&lt;/span&gt; localhost:8082
HTTP/1.1 200 OK
Date: Wed, 08 Dec 2021 20:01:12 GMT
Content-Length: 28
Content-Type: text/plain&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;utf-8

origin server response :8082
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-2-create-a-load-balancer-server"&gt;
  &lt;/a&gt;
  Step 2: Create a load balancer server &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"log"&lt;/span&gt;
    &lt;span class="s"&gt;"net/http"&lt;/span&gt;
    &lt;span class="s"&gt;"net/http/httputil"&lt;/span&gt;
    &lt;span class="s"&gt;"net/url"&lt;/span&gt;
    &lt;span class="s"&gt;"sync"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;nextServerIndex&lt;/span&gt; &lt;span class="kt"&gt;int32&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;mu&lt;/span&gt; &lt;span class="n"&gt;sync&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Mutex&lt;/span&gt;

    &lt;span class="c"&gt;// define origin server list to load balance the requests&lt;/span&gt;
    &lt;span class="n"&gt;originServerList&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;"http://localhost:8081"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"http://localhost:8082"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;loadBalancerHandler&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HandlerFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rw&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;// use mutex to prevent data race&lt;/span&gt;
        &lt;span class="n"&gt;mu&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Lock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="c"&gt;// get next server to send a request to&lt;/span&gt;
        &lt;span class="n"&gt;originServerURL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;originServerList&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;nextServerIndex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

        &lt;span class="c"&gt;// increment next server value&lt;/span&gt;
        &lt;span class="n"&gt;nextServerIndex&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;

        &lt;span class="n"&gt;mu&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Unlock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="c"&gt;// use existing reverse proxy from httputil to route&lt;/span&gt;
        &lt;span class="c"&gt;// a request to previously selected server url&lt;/span&gt;
        &lt;span class="n"&gt;reverseProxy&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;httputil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewSingleHostReverseProxy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;originServerURL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;reverseProxy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ServeHTTP&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rw&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ListenAndServe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;":8080"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;loadBalancerHandler&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#step-2-test"&gt;
  &lt;/a&gt;
  Step 2 Test
&lt;/h4&gt;

&lt;p&gt;Start the server:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;go run main
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Use &lt;code&gt;curl&lt;/code&gt; command to validate load balancer works as expected:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First request should be send to origin server &lt;code&gt;:8081&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;% curl &lt;span class="nt"&gt;-i&lt;/span&gt; localhost:8080
HTTP/1.1 200 OK
Content-Length: 28
Content-Type: text/plain&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;utf-8
Date: Wed, 08 Dec 2021 20:08:04 GMT

origin server response :8081%
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the terminal of the origin server you should see:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;origin server] received request: 2021-12-08 21:08:09.021995 +0100 CET &lt;span class="nv"&gt;m&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;+433.153383251
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Second request should be send to the origin server &lt;code&gt;:8082&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;% curl &lt;span class="nt"&gt;-i&lt;/span&gt; localhost:8080
HTTP/1.1 200 OK
Content-Length: 28
Content-Type: text/plain&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;utf-8
Date: Wed, 08 Dec 2021 20:08:09 GMT

origin server response :8082%
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the terminal of the origin server you should see:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;origin server] received request: 2021-12-08 21:08:09.402678 +0100 CET &lt;span class="nv"&gt;m&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;+423.670045543
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;In this article, load balancing explanation, its use cases and load balancing techniques were described. In addition, simple implementation of the load balancer server in Go was provided.&lt;/p&gt;

&lt;p&gt;Readers are encouraged to try improve this example by implementing another load balancing techniques, add health check of make a list of origin servers dynamic.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#additional-information"&gt;
  &lt;/a&gt;
  Additional information &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.citrix.com/solutions/app-delivery-and-security/load-balancing/what-is-load-balancing.html"&gt;Citrix: What is load balancing?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.nginx.com/resources/glossary/load-balancing/"&gt;NginX: What Is Load Balancing?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Load_balancing_(computing)"&gt;Wikipedia: Load balancing&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/azure/load-balancer/load-balancer-overview"&gt;MS Azure: Load balancer overview&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;[1] &lt;a href="https://docs.microsoft.com/en-us/azure/load-balancer/load-balancer-overview"&gt;https://docs.microsoft.com/en-us/azure/load-balancer/load-balancer-overview&lt;/a&gt;&lt;br&gt;
[2] &lt;a href="https://www.nginx.com/wp-content/uploads/2014/07/what-is-load-balancing-diagram-NGINX-640x324.png"&gt;https://www.nginx.com/wp-content/uploads/2014/07/what-is-load-balancing-diagram-NGINX-640x324.png&lt;/a&gt;&lt;br&gt;
[3] &lt;a href="https://www.nginx.com/resources/glossary/load-balancing/"&gt;https://www.nginx.com/resources/glossary/load-balancing/&lt;/a&gt;&lt;br&gt;
[cover image] Photo by Wilson Vitorino from Pexels&lt;/p&gt;

</description>
      <category>go</category>
      <category>nginx</category>
      <category>cloud</category>
    </item>
    <item>
      <title>Tackling Technical Debt: Founding OutSystems</title>
      <author>Conor Bronsdon</author>
      <pubDate>Wed, 08 Dec 2021 20:29:30 +0000</pubDate>
      <link>https://dev.to/linearb/tackling-technical-debt-founding-outsystems-1k5</link>
      <guid>https://dev.to/linearb/tackling-technical-debt-founding-outsystems-1k5</guid>
      <description>&lt;p&gt;&lt;em&gt;Recently on the Dev Interrupted Podcast, &lt;a href="https://www.outsystems.com/"&gt;OutSystems&lt;/a&gt; CEO and founder Paulo Rosado joined us to chat about his path to founding the company, advice for successful leaders, and the growing threat of technical debt for businesses around the world. The conversation below has been edited and summarized for length and clarity.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tell-us-about-outsystems-founding-story-what-inspired-you-to-start-the-company"&gt;
  &lt;/a&gt;
  Tell us about OutSystems' founding story. What inspired you to start the company?
&lt;/h3&gt;

&lt;p&gt;In February 2021, OutSystems was valued at $9.5 billion dollars - but it certainly didn‚Äôt start out that way. The idea behind OutSystems was decades in the making, and its mission stems from what I observed after moving to Silicon Valley back in the mid-nineties. &lt;/p&gt;

&lt;p&gt;My journey in technology began when I graduated with a degree in computer engineering from Universidade Nova de Lisboa in Lisbon, Portugal and moved to the US to get my Masters in Computer Science from Stanford. Afterward, while working in Silicon Valley, I began to understand just how much of a problem technical debt was. &lt;/p&gt;

&lt;p&gt;While working on a very large engineering team, we were faced with tackling a gigantic project in Java and I realized the issues of releasing and maintaining code sustainably. The lack of productivity in the software development process was appalling. Fixing this problem is ultimately what motivated me to found OutSystems. &lt;/p&gt;

&lt;p&gt;Before founding OutSystems, there was a small company I founded and later sold, which focused on internet and intranet projects. It wasn‚Äôt a bad company, but we kept failing. Projects were never delivered on time or on budget. &lt;/p&gt;

&lt;p&gt;We would think to ourselves, ‚ÄúWe‚Äôre smart. How is this possible?‚Äù Our inclination was to blame the requirements of the project, labeling the scope as incorrect and adjust from there. However, we began to realize that the companies hiring us for these projects wanted us to make changes as we were developing in response to rapidly changing environments. &lt;/p&gt;

&lt;p&gt;The issue we began to face was the continual accumulation of technical debt. We would reach first production and realize we had built something users didn‚Äôt want, requiring us to go back and rework the stuff we had just built. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;‚ÄúWe came up with this realization that the problem was not that the requirements up front were wrong. The problem was that the cost of changing wrong requirements, which are a fact of life, is very high.‚Äù - &lt;a href="https://devinterrupted.com/podcast/outsystems-the-journey-to-a-9-5b-valuation/"&gt;on the Dev Interrupted podcast at 6:03&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/1Upd99Drq75d6WQK62e73X"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;This phenomenon was occurring in 90% of projects at the time. Things were always over budget and always late. &lt;/p&gt;

&lt;p&gt;Today, it‚Äôs easy to take this for granted because concepts like Agile, DevOps, CI/CD are mainstream. But at the time, you had to build software the same way you build a bridge.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-is-technical-debt-a-challenge-for-companies-now-how-has-this-problem-changed"&gt;
  &lt;/a&gt;
  Why is technical debt a challenge for companies now? How has this problem changed?
&lt;/h3&gt;

&lt;p&gt;Technical debt has become a large problem for businesses, and one that only compounds with time. Tech debt doesn‚Äôt have a singular cause - it‚Äôs the accumulation of several factors. &lt;/p&gt;

&lt;p&gt;Over the course of my career, I‚Äôve seen first-hand the complexity brought about by the evolution of software development. For instance, we‚Äôve seen an explosion of languages, paradigms and frameworks that can all be used to achieve a solution. Often these languages are dispersed with no connections between them, so tracking these dependencies requires a great deal of sophistication. &lt;/p&gt;

&lt;p&gt;In addition to this, turnover within the development team is a critical problem that leads to technical debt. The moment a company loses a developer, the knowledge accrued by that developer also departs the company. The hole left behind is complex, including code,  frameworks and intent behind how their systems are structured. &lt;/p&gt;

&lt;p&gt;It‚Äôs been my experience that a lost team member can take as much as 20% to 30% of the fundamental knowledge of a system with them. Reverse engineering their work is both time-intensive and inefficient. &lt;/p&gt;

&lt;p&gt;Companies have tried to corral this problem by investing in coding standards. While these constraints can help mitigate the loss of a valued developer, our research indicates turnover remains a significant problem. &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Q7Pcsmt-KBQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#outsystems-recently-released-a-study-on-the-effects-of-technical-debt-what-were-its-findings"&gt;
  &lt;/a&gt;
  OutSystems recently released a study on the effects of technical debt. What were its findings?
&lt;/h3&gt;

&lt;p&gt;Recently, OutSystems &lt;a href="https://www.outsystems.com/stop-tech-debt/"&gt;surveyed 500 large companies around the world&lt;/a&gt; to examine the cost of technical debt facing businesses and uncover the challenges companies face as they confront its causes. The results from the companies surveyed were many of the same things I‚Äôve observed throughout my career. &lt;/p&gt;

&lt;p&gt;It‚Äôs important to note that while the causes of technical debt have largely remained the same, the pace at which technical debt occurs has grown substantially.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;‚ÄúAnd so it's a hack, right? What we call a hack at OutSystems, they did a hack to just release the software quickly. And those hacks compound into technical debt.‚Äù - &lt;a href="https://devinterrupted.com/podcast/outsystems-the-journey-to-a-9-5b-valuation/"&gt;on the Dev Interrupted podcast at 27:11&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The survey we conducted isolated three major causes of technical debt. They are as follows: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;The amount of developer frameworks.&lt;/strong&gt; An increase in frameworks leads to an increase in technical debt. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Developer erosion.&lt;/strong&gt; Employees leaving an organization and taking legacy knowledge with them. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Compromises in quality of architecture and code.&lt;/strong&gt; Often caused by a shortsighted view that what needs to be done now is more important than long-term stability of the codebase.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In the past, companies believed they could buy their way out of this problem, but that strategy has proven ineffective. The reality is, the most successful companies must build the software they require to meet their business needs. &lt;/p&gt;

&lt;p&gt;Simply purchasing what you need doesn‚Äôt solve your problems because even purchased systems must be cobbled together, requiring unique API‚Äôs, unique UI‚Äôs, unique portals, and unique mobile applications. &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/m2hZnWvqTPk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#does-outsystems-play-a-role-in-helping-companies-cut-tech-debt"&gt;
  &lt;/a&gt;
  Does OutSystems play a role in helping companies cut tech debt?
&lt;/h3&gt;

&lt;p&gt;The core of what we do at OutSystems is focused on tackling those three fundamental problems. We understand that technical debt amasses slowly over time, through a myriad of decisions that appear much smaller at their onset than their totality would suggest. Once these ‚Äútiny‚Äù decisions become a major problem, they inhibit investment in current operations and future innovations. &lt;/p&gt;

&lt;p&gt;The increasing pressures of today‚Äôs fast-paced business environment often push companies toward decisions that spiral into technical debt. The good news is that by creating a development process that marries short-term deadlines with long-term strategic goals, it‚Äôs possible to ‚Äúpay down‚Äù that debt. &lt;/p&gt;

&lt;p&gt;I believe that any company is capable of whittling away technical debt with the correct tools and processes, and I founded OutSystems because companies shouldn‚Äôt have to choose between building fast and building right. &lt;/p&gt;

&lt;p&gt;To learn more about technical debt, how to combat it, and what to expect in the future, you can download the &lt;a href="https://www.outsystems.com/stop-tech-debt/"&gt;2021 Technical Debt Report&lt;/a&gt; on our website.  &lt;/p&gt;




&lt;p&gt;&lt;em&gt;This article is based on an episode of &lt;a href="https://devinterrupted.com/podcasts/"&gt;Dev Interrupted.&lt;/a&gt; The only podcast made exclusively for dev team leaders, it features expert guests from around the world to explore strategy and day-to-day topics ranging from dev team metrics to accelerating delivery.&lt;/em&gt; &lt;/p&gt;

</description>
      <category>devops</category>
      <category>leadership</category>
      <category>operations</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Firm but flexible: a pattern for creating resilient design system components</title>
      <author>Hossein Talebi</author>
      <pubDate>Wed, 08 Dec 2021 20:29:20 +0000</pubDate>
      <link>https://dev.to/jobber/firm-but-flexible-a-pattern-for-creating-resilient-design-system-components-2fjm</link>
      <guid>https://dev.to/jobber/firm-but-flexible-a-pattern-for-creating-resilient-design-system-components-2fjm</guid>
      <description>&lt;p&gt;Co-authored by &lt;a class="mentioned-user" href="https://dev.to/thatchrismurray"&gt;@thatchrismurray&lt;/a&gt;
 &lt;/p&gt;

&lt;p&gt;Building reusable design system components is a great way for an engineering team to accelerate delivery, improve communication between designers and engineers, and provide a consistent experience for end-users. When your components act in service of a design system, which in turn acts in service of your product‚Äôs UX patterns, a cohesive product can be built even as the number of contributors to the product grows. &lt;/p&gt;

&lt;p&gt;As the product evolves and grows, new use cases will emerge that simply don‚Äôt exist right now. Your design team will inevitably identify opportunities to extend, enhance, and otherwise evolve the user experience, and so too must the component library evolve.&lt;/p&gt;

&lt;p&gt;When it comes to a component library, this constant change becomes challenging. A single component can be used across multiple products thus any change to that component can potentially result in regression in the system.&lt;/p&gt;

&lt;p&gt;So with all this in mind, how might we build components that are opinionated enough to drive cohesion in the product, yet flexible enough to adopt future changes without introducing breaking changes and regression?&lt;/p&gt;

&lt;p&gt;In this article we look at the &lt;a href="https://kentcdodds.com/blog/compound-components-with-react-hooks"&gt;Compound Components pattern&lt;/a&gt; as one of the patterns for solving this problem. We will show how &lt;a href="https://en.wikipedia.org/wiki/Separation_of_concerns"&gt;Separation of Concerns&lt;/a&gt; and the Compound Components pattern can help us build a firm, flexible, and resilient component library.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-saga-of-developing-a-list-component"&gt;
  &lt;/a&gt;
  The Saga of Developing a List Component
&lt;/h2&gt;

&lt;p&gt;We are going to demonstrate the Compound Component pattern and the problem that it solves using a contrived example of building a &lt;code&gt;List&lt;/code&gt; component. We will use React and TypeScript for building this example. Let's get started!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#initial-attempt-to-build-a-list-component"&gt;
  &lt;/a&gt;
  Initial Attempt to Build a List Component
&lt;/h3&gt;

&lt;p&gt;Our designer, Destin, and our Engineer, Enna are working together to build a component library. They have realized that there is a need for a &lt;code&gt;List&lt;/code&gt; component that can be used in different parts of the product.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Destin (the designer)&lt;/em&gt;&lt;/strong&gt;: Hey, we need to add a &lt;code&gt;List&lt;/code&gt; component to our component library. It's nothing fancy! We just need a list of items like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ya233ku2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/llq732myojqd610mgrii.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ya233ku2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/llq732myojqd610mgrii.jpg" alt="Initial List Component" width="880" height="556"&gt;&lt;/a&gt;&lt;br&gt;Initial List Component
  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Enna (the engineer)&lt;/em&gt;&lt;/strong&gt;: It looks simple. I'm on it!&lt;/p&gt;

&lt;p&gt;Enna considers that the &lt;code&gt;List&lt;/code&gt; component should be opinionated about how the items are rendered to ensure consistency across the product. She decides to make the &lt;code&gt;List&lt;/code&gt; component responsible for rendering the items. In her vision, the items are sent to the &lt;code&gt;List&lt;/code&gt; as a prop and the &lt;code&gt;List&lt;/code&gt; takes care of rendering them. She starts building the &lt;code&gt;List&lt;/code&gt; component with an interface like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;ListItem&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;ListProps&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ListItem&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After a bit of coding, she builds the &lt;code&gt;List&lt;/code&gt; component that can be used like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;item 1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;description for item 1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;item 2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;description for item 2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;item 3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;description for item 3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;List&lt;/span&gt;
  &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It looks elegant, easy to use, and ensures that wherever it's used, the items get rendered exactly the same.&lt;/p&gt;

&lt;p&gt;A couple of weeks pass and Destin comes back with a new request. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Destin:&lt;/em&gt;&lt;/strong&gt; Our research has shown that having an icon beside the list items will help people to distinguish between the items more easily. Can we make this happen?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Blddm5L5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h0uyitw9lfktug1c0exu.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Blddm5L5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h0uyitw9lfktug1c0exu.jpg" alt="List Component with Icons" width="880" height="556"&gt;&lt;/a&gt;&lt;br&gt;List Component with Icons
  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Enna:&lt;/em&gt;&lt;/strong&gt; It should be straightforward. I can üíØ% make that happen!&lt;/p&gt;

&lt;p&gt;She looks at the &lt;code&gt;List&lt;/code&gt; component and decides to add an icon property to each item:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;ListItem&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;IconName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;ListProps&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ListItem&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This new change now requires all the instances of the &lt;code&gt;List&lt;/code&gt; to receive an icon for each item. But that's not a big deal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;icon1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;item 1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;description for item 1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;icon2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;item 2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;description for item 2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;icon3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;item 3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;description for item 3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;List&lt;/span&gt;
  &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;List&lt;/code&gt; component is now in the wild and people are happily using it. But Destin is thinking of new use cases for the component.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Destin&lt;/em&gt;&lt;/strong&gt;: Hey, we have realized two new use cases for the &lt;code&gt;List&lt;/code&gt; component. There are some lists that we would like to have an action button for each item. In some other lists, we would like to have some extra details text in place of the button:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NfZCZl6y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cdbmawb2075mdnztcqem.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NfZCZl6y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cdbmawb2075mdnztcqem.jpg" alt="List Component with Action Buttons" width="880" height="556"&gt;&lt;/a&gt;&lt;br&gt;List Component with Action Buttons
  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rnUVRVMC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z7dvbf38c5st417gvodg.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rnUVRVMC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z7dvbf38c5st417gvodg.jpg" alt="List Component with Extra Details" width="880" height="556"&gt;&lt;/a&gt;&lt;br&gt;List Component with Extra Details
  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Enna&lt;/em&gt;&lt;/strong&gt;: Interesting... this is going to make the &lt;code&gt;List&lt;/code&gt; component complex but let me see what I can do.&lt;/p&gt;

&lt;p&gt;Enna realizes that now she has two different types of list items. Some of the properties are shared between the two types (like the &lt;code&gt;title&lt;/code&gt;) and some are unique to each item type. She decides to extract the shared properties into a new interface named &lt;code&gt;ListItemBase&lt;/code&gt; and define &lt;code&gt;ActionListItem&lt;/code&gt; and &lt;code&gt;ExtraDetailListItem&lt;/code&gt; that extend the &lt;code&gt;ListItemBase&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;ListItemBase&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;IconName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;ActionListItem&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;BaseListItem&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ListItemWithAction&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;action&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;event&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MouseEvent&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;HTMLButtonElement&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;ExtraDetailListItem&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;BaseListItem&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ListItemWithExtraDetail&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;extraDetail&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;items&lt;/code&gt; in the &lt;code&gt;ListProps&lt;/code&gt; now have a new type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;ListProps&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ActionListItem&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;ExtraDetailListItem&lt;/span&gt;&lt;span class="p"&gt;)[];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The interface looks okay-ish but now there should be a decision statement inside the &lt;code&gt;List&lt;/code&gt; component that decides whether to render an &lt;code&gt;ActionListItem&lt;/code&gt; or &lt;code&gt;ExtraDetailListItem&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;She decides that a single decision statement is not a big deal and she goes on with changing the &lt;code&gt;List&lt;/code&gt; component to support the two new types of list items.&lt;/p&gt;

&lt;p&gt;One day when Destin is working on designing a feature for communications, he realizes that the &lt;code&gt;List&lt;/code&gt; component can be used for rendering a list of messages. He presents the new use case to Enna.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Destin&lt;/em&gt;&lt;/strong&gt;: In this new use case we want to show an avatar instead of the icon. We also want to open the conversation when people click on the message item. I forgot to mention that we need to have a way to indicate if the message is unread. Can you make the &lt;code&gt;List&lt;/code&gt; component handle this?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W5Dul4aW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0bk8oty99g5xz2b3t0fz.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W5Dul4aW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0bk8oty99g5xz2b3t0fz.jpg" alt="List component for Conversation List" width="880" height="556"&gt;&lt;/a&gt;&lt;br&gt;List component for Conversation List
  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Enna&lt;/em&gt;&lt;/strong&gt;: Hmmm... we can change the &lt;code&gt;List&lt;/code&gt; component to handle this use case but it will add a lot of complexity to the component.&lt;/p&gt;

&lt;p&gt;There are going to be more and more use cases for new types of list items. Adding those use cases to the &lt;code&gt;List&lt;/code&gt; ensures there's a unified way of rendering items which will provide the consistency we would like to have across our products. But with every single change to the &lt;code&gt;List&lt;/code&gt;, we increase the chance of regression for all instances of the &lt;code&gt;List&lt;/code&gt;. No need to mention that we are also adding more and more complexity to the &lt;code&gt;List&lt;/code&gt; which makes its maintenance harder. So what can we do?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-did-we-end-up-here"&gt;
  &lt;/a&gt;
  How did we end up here?
&lt;/h3&gt;

&lt;p&gt;It all started with the initial &lt;code&gt;List&lt;/code&gt; component. In the initial version, the &lt;code&gt;List&lt;/code&gt; component had two separate responsibilities:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Rendering a list of items&lt;/li&gt;
&lt;li&gt;Managing how each item should be rendered&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Rendering a list of items is the actual responsibility of the &lt;code&gt;List&lt;/code&gt; component, but how each item gets rendered could have been extracted into its own set of components.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#separation-of-concerns-using-compound-components"&gt;
  &lt;/a&gt;
  Separation of Concerns Using Compound Components
&lt;/h3&gt;

&lt;p&gt;Separation of concerns is here to help. By separating every concern of our component into its own component, we can reduce the complexity and make it easier to embrace future changes.&lt;/p&gt;

&lt;p&gt;How do we figure out different concerns of the component? One easy way to think about concerns is to think about the reasons that each piece of software has for changing. Huh...? Let me explain more. Imagine the &lt;code&gt;List&lt;/code&gt; component. The list items can change depending on the feature we are building and the customer's needs. The requirement for the list itself would not generally change from feature to feature. So the list and list items have different reasons for changing. This means they are different concerns.&lt;/p&gt;

&lt;p&gt;Now that we figured out the two concerns of the &lt;code&gt;List&lt;/code&gt; component, how can we separate them? &lt;a href="https://kentcdodds.com/blog/compound-components-with-react-hooks"&gt;Compound Components&lt;/a&gt; are the way to accomplish this. The &lt;code&gt;List&lt;/code&gt; component can accept its items as children like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;description&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ListItem&lt;/span&gt; &lt;span class="p"&gt;{...{&lt;/span&gt; &lt;span class="nx"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;description&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt; &lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;  &lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are some immediate advantages to this approach:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The complexity is broken down into smaller components&lt;/li&gt;
&lt;li&gt;Changes in the &lt;code&gt;ListItem&lt;/code&gt; would not alter the code in the &lt;code&gt;List&lt;/code&gt; component. This helps with less regression over time&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let‚Äôs get back to the earlier request we had about rendering a list of Messages. Our first instinct might be to modify our &lt;code&gt;ListItem&lt;/code&gt; to be able to handle messages. But wait! Do message items have different reasons for changing than the generic &lt;code&gt;ListItem&lt;/code&gt;? Yes! They are representing two different types of information that can have different reasons for change. Hence our message item is a new concern. We can create a new component for the &lt;code&gt;MessageItem&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;messages&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;MessageItem&lt;/span&gt;
      &lt;span class="nx"&gt;thumbnail&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;messages&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;thumbnail&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nx"&gt;sender&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nx"&gt;sentAt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sentAt&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nx"&gt;hasBeenRead&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hasBeenRead&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;  &lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can extend the usage of the &lt;code&gt;List&lt;/code&gt; component to a variety of use cases without touching anything in the &lt;code&gt;List&lt;/code&gt; component!&lt;/p&gt;

&lt;p&gt;Separating the &lt;code&gt;List&lt;/code&gt; component concerns using the Compound Component pattern helps embracing future changes more easily without causing regression.&lt;/p&gt;

&lt;p&gt;So far we separated the concerns of the &lt;code&gt;List&lt;/code&gt; component into smaller components that can be passed as children for the &lt;code&gt;List&lt;/code&gt;. This made the component less complex, easier to maintain, and flexible to future changes. But now we created a new problem! Any component can be passed as children to the &lt;code&gt;List&lt;/code&gt; and we lost control over which types of items we render in the list.&lt;/p&gt;

&lt;p&gt;Since any component can be passed as children to the new &lt;code&gt;List&lt;/code&gt; component, this might feel like we can't enforce the design system's opinions on the &lt;code&gt;List&lt;/code&gt; component. In order to enforce those opinions, we can check the type of each child and ensure they are aligned with the opinion of our design system. Depending on how strict you want to be, you can show a warning message or even not render the items that are not accepted by the design system:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ACCEPTED_LIST_ITEMS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;ListItem&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;MessageListItem&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;List&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Children&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ACCEPTED_LIST_ITEMS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;child&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The List can't render this type of item&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;üéâ with this final touch we ensured that the &lt;code&gt;List&lt;/code&gt; component is firm in allowing only certain types of items.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Change is an inevitable part of any software and UI components are no different. When building UI components, it‚Äôs helpful to ask yourself about the possible future changes that the component could expect. This will help you understand different reasons that your component could change and will provide a good way to separate those concerns. The goal is not to build a component that covers all the expected/unexpected future needs, but rather to separate the concerns in a way that future changes can be applied with minimal impact on the whole system.&lt;/p&gt;

&lt;p&gt;The Compound Component pattern can be used to break down the concerns of a component into smaller components. This will help reduce the complexity and also decrease the chance of regression as we add new capabilities to the component. It also enables your design team to iterate and expand on the design system with confidence.&lt;/p&gt;

&lt;p&gt;What are other techniques you use for building scalable design systems? If you are interested in solving similar problems, we're hiring for remote positions across Canada at all software engineering levels! &lt;/p&gt;

&lt;p&gt;Our awesome Jobber technology teams span across Payments, Infrastructure, AI/ML, Business Workflows &amp;amp; Communications. We work on cutting edge &amp;amp; modern tech stacks using React, React Native, Ruby on Rails, &amp;amp; GraphQL. &lt;/p&gt;

&lt;p&gt;If you want to be a part of a collaborative work culture, help small home service businesses scale and create a positive impact on our communities, then visit our &lt;a href="https://getjobber.com/about/careers/?utm_source=devto&amp;amp;utm_medium=social&amp;amp;utm_campaign=eng_blog"&gt;career&lt;/a&gt; site to learn more!&lt;/p&gt;

</description>
      <category>component</category>
      <category>library</category>
      <category>design</category>
      <category>react</category>
    </item>
    <item>
      <title>Building an Express back-end for basic CRUD operations</title>
      <author>Dubymar Tollinchi</author>
      <pubDate>Wed, 08 Dec 2021 20:14:00 +0000</pubDate>
      <link>https://dev.to/dubymarjtr/building-an-express-back-end-for-basic-crud-operations-4m0n</link>
      <guid>https://dev.to/dubymarjtr/building-an-express-back-end-for-basic-crud-operations-4m0n</guid>
      <description>&lt;p&gt;When enrolling for college, I had to choose between Web Development and Web Design. This decision was quite easy because I thought "making a website look pretty is something that most developers can do (not saying it's easy tho!), but making a website be completely functional? That's more of a complex job, and that's a challenge I want to take". &lt;/p&gt;

&lt;p&gt;In my Web Technologies class, after learning the basics of JavaScript and working with front-end, it was time to swim into the deep waters of the back-end of a website. I was assigned to create RESTful routes that interact with a MongoDB database using Node.js and Express.js. It was very confusing at the beginning, but after building a few small projects applying the same steps, I feel more comfortable to share the knowledge I acquired with this community. &lt;/p&gt;

&lt;p&gt;So let's dive into it!!&lt;/p&gt;

&lt;p&gt;The first thing we need to know about is Node.js, and I already wrote a &lt;a href="https://dev.to/dubymarjtr/understanding-node-js-5n8"&gt;post&lt;/a&gt; about it, so go check that out so you understand why and how it is used. After installing Node, we will use the terminal to install the required dependencies, in this case are: &lt;code&gt;dotenv&lt;/code&gt;, &lt;code&gt;express&lt;/code&gt;, and &lt;code&gt;mongodb&lt;/code&gt;. Luckily, I used a template that already had all these installed, but if your project does not have any of these, just type &lt;code&gt;npm install express&lt;/code&gt; on the terminal, repeating the same syntax with the other packages. &lt;/p&gt;

&lt;p&gt;The second step is to create a &lt;code&gt;.env&lt;/code&gt; file, which will contain the database URL that will connect our application to MongoDB. This file will be untracked, since we do not want to include it in our commits. This is more of a security reason, because why will we want strangers accessing to our database, right?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;DB_CLIENT_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;databaseurl&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The third step is to go into our config.js file and declare the configurations for our project. In this case, I have the port, database URL, name, and collection name. Having this information here and not in other files will make our website easier to maintain, having to change it just here and not everywhere.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;db&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;clientURL&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DB_CLIENT_URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sample_airbnb&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;collectionName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;listingsAndReviews&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can notice, there is no way to see the actual database URL. For this project I used an Airbnb database sample from MongoDB, but in case I want to use another database, I can change the name and collection right there and that will be applied to the entire project.&lt;/p&gt;

&lt;p&gt;The fourth step is to create a db/conns (database connections) folder, and inside create a client.js file, that will contain a reusable Mongo client to connect to our application. Here is where we use that &lt;code&gt;mongodb&lt;/code&gt; package that we installed earlier. &lt;em&gt;Note&lt;/em&gt;: this is the only file inside of that folder, everything else from now on will continue to exist inside the server folder.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;MongoClient&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mongodb&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./config.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;MongoClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clientURL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;MongoDB Client üèÉüèæ‚Äç‚ôÇÔ∏è&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Error starting MongoDB Client&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// Exit process with failure&lt;/span&gt;
    &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;SIGINT&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;close&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;MongoDB Client disconnected&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once we have our Mongo Client successfully connecting to our database, we can proceed to create our routes in the router.js file. First, we will start with a test route to connect to our API. We need to import the content from config.js, client.js, and our &lt;code&gt;Router&lt;/code&gt; from &lt;code&gt;express&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Router&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./config.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./db/conns/client.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// create collection variable to reduce code duplication&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;collection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;collectionName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// localhost:3000/api&lt;/span&gt;
&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello from API router&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To utilize this router we need to import it to our index.js file, using express as the framework that will make our lives easier. Express gives developers all the tools they need to create HTTP servers, allowing to receive and send data as JSON.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./config.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./router.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// json middleware allows to send and receive JSON data&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello World&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/api&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To run our server we can type &lt;code&gt;npm start&lt;/code&gt; in our terminal, and then go to any explorer and type &lt;a href="http://localhost:3000/api"&gt;http://localhost:3000/api&lt;/a&gt; and that will show "Hello from API router". Now that our testing route is working, we can proceed to create the rest of our routes. In this project we are using basic CRUD operations, which are Create, Read, Update, and Delete. &lt;/p&gt;

&lt;p&gt;The first route will allow to read all listings.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// get all listings&lt;/span&gt;
&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/listings&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;listingsData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({}).&lt;/span&gt;&lt;span class="nx"&gt;toArray&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;listingsData&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The second one will take a listing id and delete that listing.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// delete a listing&lt;/span&gt;
&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/listings/:id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;deletedListing&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deleteOne&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;deletedListing&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The third one will take a listing id and update that listing. To test this route, we will need &lt;a href="https://insomnia.rest/"&gt;Insomnia&lt;/a&gt;, having in mind that we are not sending any JSON on the browser, just receiving. In the Insomnia body we can send the "payload", which is the updated data for our listing.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// update a listing&lt;/span&gt;
&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/listings/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;updatedListing&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updateOne&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;$set&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;updatedListing&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the fourth one to complete our CRUD operations is deleting a listing using its id.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// delete a listing&lt;/span&gt;
&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/listings/:id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;deletedListing&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deleteOne&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;deletedListing&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This project has more routes, such as reading an specific listing, getting all reviews from one listing, creating, updating and deleting a review from one listing. For your reference, this is the &lt;a href="https://github.com/dubymarjtr/airbnb-project"&gt;project repo&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;These basic routes allow us to perform CRUD operations in our database, and although it is just a server-side project, this gives you an idea on how to create a full-stack website, if you already know how to connect to the client-side. Node.js and Express.js made possible to create and work with the server without knowing any other server-side language, such as PHP. &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>mongodb</category>
      <category>express</category>
    </item>
    <item>
      <title>Are you a web developer and want to convert your site to Android app in a few minutes for free ,No coding , how! let me show you</title>
      <author>AmrElDessouki22</author>
      <pubDate>Wed, 08 Dec 2021 20:01:33 +0000</pubDate>
      <link>https://dev.to/amreldessouki/are-you-a-web-developer-and-want-to-convert-your-site-to-android-app-in-a-few-minutes-for-free-no-coding-how-let-me-show-you-1ime</link>
      <guid>https://dev.to/amreldessouki/are-you-a-web-developer-and-want-to-convert-your-site-to-android-app-in-a-few-minutes-for-free-no-coding-how-let-me-show-you-1ime</guid>
      <description>&lt;p&gt;Today we present &lt;a href="https://urlgapp.com"&gt;https://urlgapp.com&lt;/a&gt; - a tool designed to convert any responsive website into an Android app. üì≤&lt;/p&gt;

&lt;p&gt;You don't need to be a coder to use this solution to wrap your website into a professional android app! üéÅ&lt;br&gt;
Urlgapp is a webtool to convert your website to an android app with app bundle &amp;amp; apk with your own key store valid for 10,000 days on google play store&lt;/p&gt;

&lt;p&gt;Features that we provide&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Apk &amp;amp; App bundle&lt;/li&gt;
&lt;li&gt;Google play Key&lt;/li&gt;
&lt;li&gt;Firebase Notification&lt;/li&gt;
&lt;li&gt;Media permission&lt;/li&gt;
&lt;li&gt;Admob integration&lt;/li&gt;
&lt;li&gt;Dialog Ask to exit app&lt;/li&gt;
&lt;li&gt;Internet connection error . native page&lt;/li&gt;
&lt;li&gt;Android native spinner&lt;/li&gt;
&lt;li&gt;Ask to open link with different domain name out side the app&lt;/li&gt;
&lt;li&gt;Login by google is working&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Do you have any example for this tool in google play ‚ùì&lt;/strong&gt;&lt;br&gt;
yes we have you can download it from here&lt;br&gt;
&lt;a href="https://play.google.com/store/ap"&gt;https://play.google.com/store/ap&lt;/a&gt;...&lt;br&gt;
it‚Äôs very simple app&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;why you add a media permission ‚ùì&lt;/strong&gt;&lt;br&gt;
urlgapp doesn`t know what type of website it you but if your user upload or download any file without any permission google play will remove your app from store so, we have added it by default to make sure your app is safe on google play&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;No coding.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;**&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;you don't have a live website !! &lt;br&gt;
**&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;we have anther solution &lt;/p&gt;

&lt;p&gt;HTMLgApp is a website (web tool) to convert your HTML , CSS ,JS code to an android app with app bundle &amp;amp; apk with your own key store valid for 10,000 days on google play store&lt;/p&gt;

&lt;p&gt;üì£ **&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Your files will be deleted automatically after generate or fail&lt;br&gt;
**&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Features that we provide&lt;/p&gt;

&lt;p&gt;Apk &amp;amp; App bundle&lt;br&gt;
Google play Key&lt;br&gt;
Media permission&lt;br&gt;
Dialog Ask to exit app&lt;br&gt;
Internet connection error . native page&lt;br&gt;
Android native spinner&lt;br&gt;
Do you have any example for this tool in google play ‚ùì&lt;br&gt;
yes we have you can download it from here&lt;br&gt;
&lt;a href="https://play.google.com/store/apps/details?id=com.urlgapp.app1635406887441"&gt;https://play.google.com/store/apps/details?id=com.urlgapp.app1635406887441&lt;/a&gt;&lt;br&gt;
it‚Äôs very simple app&lt;/p&gt;

&lt;p&gt;why you add a media permission ‚ùì&lt;br&gt;
HTMLgApp doesn`t know what type of website it you but if your user upload or download any file without any permission google play will remove your app from store so, we have added it by default to make sure your app is safe on google play&lt;/p&gt;

&lt;p&gt;If you have any question, feel free to ask&lt;/p&gt;

&lt;p&gt;check it now&lt;br&gt;
&lt;a href="https://urlgapp.com/home/htmlgapp"&gt;https://urlgapp.com/home/htmlgapp&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What is your excuse now to start building your application and increase your web site users from Android users, create your release android app now and publish it on Google Play and let the world see your talent&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
