<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Reinventing myself</title>
      <author>Lea Rosema (she/her)</author>
      <pubDate>Fri, 23 Apr 2021 12:54:58 +0000</pubDate>
      <link>https://dev.to/terabaud/reinventing-myself-4oin</link>
      <guid>https://dev.to/terabaud/reinventing-myself-4oin</guid>
      <description>&lt;p&gt;So, it's time to reinvent myself and look for another challenge. But I don't know yet where my journey goes. &lt;/p&gt;

&lt;p&gt;My last employer took quite a big effort in supporting me shaping me into the developer I'm expected to be. They offer assistance and coaching, but nothing really seems to work for me.&lt;/p&gt;

&lt;p&gt;I need to take a step back and think about my next steps.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Help us democratize our open-source technology</title>
      <author>Emanuel Allely</author>
      <pubDate>Fri, 23 Apr 2021 12:52:55 +0000</pubDate>
      <link>https://dev.to/emanuel_allely/help-us-democratize-our-open-source-technology-32kc</link>
      <guid>https://dev.to/emanuel_allely/help-us-democratize-our-open-source-technology-32kc</guid>
      <description>&lt;p&gt;üôè Please help us democratize our open-source technology by starring our Github repository ‚≠ê Open source community is awesome üòç -&amp;gt; you can star our repo here: &lt;a href="https://github.com/Luos-io/Luos"&gt;https://github.com/Luos-io/Luos&lt;/a&gt; ‚ù§Ô∏è&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>help</category>
      <category>startup</category>
      <category>embedded</category>
    </item>
    <item>
      <title>Using Hotwire Turbo in Rails with legacy JavaScript</title>
      <author>Matou≈° Bor√°k</author>
      <pubDate>Fri, 23 Apr 2021 12:49:53 +0000</pubDate>
      <link>https://dev.to/nejremeslnici/using-hotwire-turbo-in-rails-with-legacy-javascript-17g1</link>
      <guid>https://dev.to/nejremeslnici/using-hotwire-turbo-in-rails-with-legacy-javascript-17g1</guid>
      <description>&lt;p&gt;When &lt;a href="https://turbo.hotwire.dev/"&gt;Hotwire Turbo&lt;/a&gt; got released around Christmas 2020, it was exciting news for many of us. One of its main appeals is that it helps you create highly reactive web pages in Rails while having to write &lt;a href="https://twitter.com/dhh/status/1266057500547141633"&gt;almost no custom JavaScript&lt;/a&gt;. Turbo also seems very easy to use, it just ‚Äùinvites‚Äú you to try and play with your pages. Let‚Äôs take a look if Turbo can be used in a long-developed project with a lot of old JavaScript code, too (spoiler: with a little tweak, it very much can!).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-road-to-legacy-javascript-in-a-longtime-rails-project"&gt;
  &lt;/a&gt;
  The road to legacy JavaScript in a long-time Rails project
&lt;/h2&gt;

&lt;p&gt;After all the years that we watched the JavaScript community boost its ecosystem to tremendous heights and after trying (and often failing) to keep up with the pace of language enhancements, new frameworks and build systems, this &lt;strong&gt;intended simplicity&lt;/strong&gt; of Turbo is a very welcome turnaround. To be clear, we &lt;em&gt;do&lt;/em&gt; like JavaScript, it‚Äôs a fine language, especially since ES6, but in our opinion its strengths stand out and are sustainable only if you have enough sufficiently specialized JavaScript devs in a team. In other words, for a small Rails team, long-term management of complex JavaScript can be very difficult. &lt;/p&gt;

&lt;p&gt;That‚Äôs why we have always been cautious about bringing too much JavaScript to the project, especially for things that could be done in other ways. Still, there's always been a kingdom where JavaScript absolutely ruled and that was &lt;strong&gt;page reactivity&lt;/strong&gt;. Most people love reactive pages and we do, too! So, in the end, still a lot of JavaScript managed to get into our codebase.&lt;/p&gt;

&lt;p&gt;Over the years, the ‚Äùofficial‚Äú support and default conventions for building reactive JavaScript-enabled pages in Rails took &lt;strong&gt;many different forms&lt;/strong&gt;. Let‚Äôs just run through some of the options for working with JavaScript that we had in our pretty much standard Rails project during the course of its existence, i.e. during the last ~12 years:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;there was the old and rusty inline vanilla JavaScript since forever,&lt;/li&gt;
&lt;li&gt;there was the &lt;a href="https://github.com/rails/prototype-rails"&gt;Prototype&lt;/a&gt; library since who knows when but it was &lt;a href="https://github.com/rails/prototype_legacy_helper"&gt;phased out&lt;/a&gt; gradually (~2010),&lt;/li&gt;
&lt;li&gt;and in Rails 3.1, it was &lt;a href="https://guides.rubyonrails.org/3_1_release_notes.html#default-js-library-is-now-jquery"&gt;replaced&lt;/a&gt; by &lt;a href="https://github.com/rails/jquery-rails"&gt;jQuery&lt;/a&gt; (~2011),&lt;/li&gt;
&lt;li&gt;Rails 3.1 also brought &lt;a href="https://github.com/rails/ruby-coffee-script"&gt;CoffeeScript&lt;/a&gt; as a new and encouraged way of ‚Äùwriting JavaScript‚Äú (~2011),&lt;/li&gt;
&lt;li&gt;there was &lt;a href="https://guides.rubyonrails.org/working_with_javascript_in_rails.html#unobtrusive-javascript"&gt;Unobtrusive JavaScript&lt;/a&gt; to replace the inline style; it was pushed further by the &lt;a href="https://github.com/rails/jquery-ujs"&gt;jquery-ujs library&lt;/a&gt; (~2010), later superseded by the &lt;a href="https://dev.to/nejremeslnici/migrating-from-jquery-ujs-to-rails-ujs-k9m"&gt;somewhat compatible&lt;/a&gt; &lt;a href="https://github.com/rails/rails/tree/main/actionview/app/assets/javascripts"&gt;Rails UJS&lt;/a&gt; (2016),&lt;/li&gt;
&lt;li&gt;there were &lt;a href="https://signalvnoise.com/posts/3697-server-generated-javascript-responses"&gt;Server-generated JavaScript Responses&lt;/a&gt; (SJR) allowing the server to update pages via JavaScript (~2011),&lt;/li&gt;
&lt;li&gt;since Rails 4, the &lt;a href="https://github.com/turbolinks/turbolinks"&gt;Turbolinks library&lt;/a&gt; has been included but had a &lt;a href="https://youtu.be/ktZLpjCanvg?t=2898"&gt;bunch of problems&lt;/a&gt; at that time (2013), so&lt;/li&gt;
&lt;li&gt;Rails 5 came with a major and largely incompatible rewrite of Turbolinks (Turbolinks 5), the previous versions of which were renamed to &lt;a href="https://github.com/turbolinks/turbolinks-classic"&gt;Turbolinks Classic&lt;/a&gt; (2016),&lt;/li&gt;
&lt;li&gt;Rails 5.1 &lt;a href="https://github.com/rails/webpacker"&gt;optionally adopted&lt;/a&gt; the &lt;a href="https://webpack.js.org/"&gt;webpack bundler&lt;/a&gt; and the &lt;a href="https://yarnpkg.com/"&gt;yarn package manager&lt;/a&gt; (2017), the two became the preferred way of handling JavaScript in Rails,&lt;/li&gt;
&lt;li&gt;Rails 5.1 also &lt;a href="https://github.com/rails/rails/pull/27113"&gt;removed jQuery&lt;/a&gt; from default dependencies (2017)&lt;/li&gt;
&lt;li&gt;the &lt;a href="https://m.signalvnoise.com/stimulus-1-0--a-modest-javascript-framework-for-the-html-you-already-have/"&gt;Stimulus JS&lt;/a&gt; framework was released (2018),&lt;/li&gt;
&lt;li&gt;CoffeeScript, although still soft-supported via &lt;a href="https://github.com/rails/ruby-coffee-script"&gt;a gem&lt;/a&gt;, is &lt;a href="https://github.com/rails/ruby-coffee-script/issues/22#issuecomment-355821741"&gt;discouraged&lt;/a&gt; in favor of vanilla ES6 JavaScript or Typescript compiled via webpack (~2018),&lt;/li&gt;
&lt;li&gt;after being in beta for 3 years, &lt;a href="https://github.com/rails/sprockets#upgrading-to-sprockets-4x"&gt;Sprockets 4&lt;/a&gt; was released, with support for ES6 and source maps in the asset pipeline (2019), to serve people still hesitant with webpack,&lt;/li&gt;
&lt;li&gt;and finally &lt;a href="https://turbo.hotwire.dev/"&gt;Turbo&lt;/a&gt; which should become a part of Rails 7 (late 2020),&lt;/li&gt;
&lt;li&gt;oh and by the way, DHH &lt;a href="https://twitter.com/dhh/status/1334428951180173313"&gt;nowadays explores&lt;/a&gt; native ES6 modules which could allow ditching webpacker and returning to Sprockets for handling JavaScript again.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What a ride! In retrospect, to us it really looks as if DHH and others struggled hard to make the JavaScript ecosystem and its goodies available in Rails but not until they were able to come up with a &lt;strong&gt;sufficiently elegant way&lt;/strong&gt; to do that (and if so, thanks for that üôè). Each iteration made sense and each newly adopted technique was a step forward but still, &lt;strong&gt;the overall churn of JavaScript styles has been tremendous&lt;/strong&gt;. While, in our experience, upgrading Rails itself &lt;a href="https://twitter.com/boramacz/status/1149590543485173760"&gt;got easier with each version&lt;/a&gt;, the same cannot be said about our JavaScript code. JavaScript in Rails from only a few years ago is &lt;em&gt;quite different&lt;/em&gt; from how it looks today.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#turbo-changes-everything"&gt;
  &lt;/a&gt;
  Turbo changes everything
&lt;/h2&gt;

&lt;p&gt;And here comes &lt;strong&gt;&lt;a href="https://turbo.hotwire.dev/"&gt;Hotwire Turbo&lt;/a&gt;&lt;/strong&gt; to change the situation again but this time with truly good promises. The reasoning for high hopes is simple: Turbo lets you create many of the reactive page patterns &lt;strong&gt;without having to write a single line of JavaScript&lt;/strong&gt;. JavaScript is now pushed behind the scenes and the main focus, even for describing reactive behavior, &lt;strong&gt;is on HTML&lt;/strong&gt; which is easy to author via Rails templates (or anything else). Custom JavaScript code, now preferably written as &lt;a href="https://stimulus.hotwire.dev/"&gt;Stimulus JS&lt;/a&gt; controllers, becomes just an icing on the cake if you need some more special interactions with a page.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The new Basecamp‚Äôs flagship ‚Äì the &lt;a href="https://hey.com/"&gt;HEY.com&lt;/a&gt; service ‚Äì currently uses a total of ~60kB of JavaScript (zipped) while, in terms of reactivity, it feels like a real SPA. In contrast, our web uses twice as much JavaScript while mostly being  an ordinary click-and-wait-for-the-whole-page web, oh well‚Ä¶&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So again, with Turbo, the problem with JavaScript code patterns becoming obsolete is &lt;strong&gt;effectively gone because in the future there will simply be no custom JavaScript code to upgrade&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;If it all looks that great, why were we hesitant so far about just adding the &lt;code&gt;turbo-rails&lt;/code&gt; gem and hitting the shiny new road? Before we actually tried to dive in, we had the following big concern: &lt;strong&gt;will Turbo work with Turbo Drive disabled?&lt;/strong&gt; &lt;a href="https://turbo.hotwire.dev/handbook/drive"&gt;Turbo Drive&lt;/a&gt;, the successor of Turbolinks, is a member of the Turbo family. This library is cool but &lt;strong&gt;&lt;a href="https://turbo.hotwire.dev/handbook/building"&gt;requires&lt;/a&gt; the JavaScript code to be structured in a certain way&lt;/strong&gt; which is often quite hard to achieve in an older project with a lot of legacy JavaScript. We haven‚Äôt really tried to bite the refactoring bullet yet, although we‚Äôre getting near. Until then, we need to be sure that our web will work OK without Turbo Drive.&lt;/p&gt;

&lt;p&gt;And we are happy to find out that the brief answer to this question is a &lt;strong&gt;big bold YES!&lt;/strong&gt; Read on if you‚Äôd like to know more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installing-turbo"&gt;
  &lt;/a&gt;
  Installing Turbo
&lt;/h2&gt;

&lt;p&gt;We won‚Äôt go into much detail here, the &lt;a href="https://turbo.hotwire.dev/handbook/installing"&gt;official procedure&lt;/a&gt; just worked for us. If you‚Äôre still using the Asset Pipeline for your JavaScript files, make sure it supports ES6 syntax (i.e., you‚Äôll need to upgrade to &lt;a href="https://github.com/rails/sprockets/blob/master/UPGRADING.md"&gt;Sprockets 4&lt;/a&gt;). You also need a recent-enough Rails version (Rails 6, it &lt;a href="https://github.com/hotwired/turbo-rails/blob/main/turbo-rails.gemspec#L13"&gt;seems&lt;/a&gt;). Otherwise, all should be good.&lt;/p&gt;

&lt;p&gt;One small catch though: if you have &lt;em&gt;both&lt;/em&gt; the Asset Pipeline &lt;em&gt;and&lt;/em&gt; webpack enabled (as we do) and if you only want Turbo to be included in the webpack-managed bundles, you‚Äôll notice that &lt;code&gt;turbo.js&lt;/code&gt; gets precompiled also in the Asset Pipeline if you use the &lt;a href="https://github.com/hotwired/turbo-rails"&gt;&lt;code&gt;turbo-rails&lt;/code&gt; gem&lt;/a&gt;. It turns out that the gem automatically adds this file into the pipeline upon initialization. To prevent this (and save a bit of hassle with enabling ES6 in Sprockets), you can remove it again during the start of your Rails app:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# config/application.rb&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Application&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Rails&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Application&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="c1"&gt;# remove Turbo from Asset Pipeline precompilation&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;after_initialize&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;assets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;precompile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"turbo"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#disabling-turbo-by-default"&gt;
  &lt;/a&gt;
  Disabling Turbo by default
&lt;/h2&gt;

&lt;p&gt;If you try browsing your site now, after some time you‚Äôll likely notice various glitches and unexpected behavior ‚Äì that‚Äôs Turbo Drive (Turbolinks) kicking our legacy JavaScript butt. What we need to do now is &lt;strong&gt;disable Turbo by default and enable it selectively&lt;/strong&gt; only in places where we‚Äôll use Turbo Frames or Streams.&lt;/p&gt;

&lt;p&gt;We‚Äôll do the disabling part in a little conditional way that will help us when we try to make our JavaScript code Turbo Drive-ready later. To disable Turbo completely in all pages in Rails, you can put the following instructions in your layout files:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;%# app/views/layouts/application.html.erb %&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="vi"&gt;@turbo&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"turbo-visit-control"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"reload"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"turbo-cache-control"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"no-cache"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
    ...
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&lt;/span&gt; &lt;span class="na"&gt;data-turbo=&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="vi"&gt;@turbo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;present?&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    ...
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The instructions here are all controlled by the &lt;strong&gt;&lt;code&gt;@turbo&lt;/code&gt; variable&lt;/strong&gt;. If you do nothing else, this variable will be equal to &lt;code&gt;nil&lt;/code&gt; and will render the page with Turbo disabled. If, some bright day later, you manage to get your JavaScript to a better shape on a group of pages, you can selectively switch on Turbo (and thus Turbo Drive) for them using &lt;code&gt;@turbo = true&lt;/code&gt; in the corresponding controllers. We are about to explore this migration path ourselves soon.&lt;/p&gt;

&lt;p&gt;In particular, what the instructions mean is this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The most important one is the &lt;strong&gt;&lt;code&gt;data-turbo="false"&lt;/code&gt;&lt;/strong&gt; attribute in the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; tag. It tells Turbo to &lt;strong&gt;&lt;a href="https://turbo.hotwire.dev/handbook/drive#disabling-turbo-drive-on-specific-links-or-forms"&gt;ignore&lt;/a&gt; all links and forms on the page&lt;/strong&gt; and leave them for standard processing by the browser. When Turbo decides whether it should handle a link click or form submit, it &lt;a href="https://github.com/hotwired/turbo/blob/22cbc4fca58ecf07e82d8a66e3afdd632dc45ab8/src/core/session.ts#L262"&gt;searches&lt;/a&gt; the target element and all its parents for the &lt;code&gt;data-turbo&lt;/code&gt; attribute and if it finds a &lt;code&gt;"false"&lt;/code&gt; value, it just backs off. This tree traversal is a great feature that will later allow us to selectively switch Turbo on, see below.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The other two meta tags are not strictly necessary, they serve as a kind of backup in case Turbo control ‚Äùleaks in‚Äú somewhere unexpectedly. The &lt;code&gt;turbo-visit-control&lt;/code&gt; meta tag &lt;a href="https://turbo.hotwire.dev/handbook/drive#ensuring-specific-pages-trigger-a-full-reload"&gt;forces&lt;/a&gt; Turbo to make a full page reload if it encounters an AJAX response (initiated outside of a Turbo Frame). Finally, the &lt;code&gt;turbo-cache-control&lt;/code&gt; meta tag &lt;a href="https://turbo.hotwire.dev/handbook/building#opting-out-of-caching"&gt;ensures&lt;/a&gt; that the page will never be stored in Turbo‚Äôs cache.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;OK, so when you browse your site &lt;em&gt;now&lt;/em&gt;, it should behave exactly the same as you‚Äôre used to.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-turbo-frames"&gt;
  &lt;/a&gt;
  Using Turbo Frames
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://turbo.hotwire.dev/handbook/frames"&gt;Turbo Frames&lt;/a&gt; act like self-replaceable blocks on a page: they capture link clicks and form submits, issue an AJAX request to the server and replace themselves with the same-named Turbo Frame extracted from the response. &lt;/p&gt;

&lt;p&gt;As we have Turbo globally disabled, we need to &lt;strong&gt;selectively enable it for each Turbo Frame&lt;/strong&gt;, again using a &lt;code&gt;data-turbo&lt;/code&gt; attribute, for example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;%# app/views/comments/show.html.erb %&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;turbo_frame_tag&lt;/span&gt; &lt;span class="vi"&gt;@comment&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;data: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;turbo: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="vi"&gt;@comment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;title&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="vi"&gt;@comment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;content&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;link_to&lt;/span&gt; &lt;span class="s2"&gt;"Edit"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;edit_comment_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@comment&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
...
&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;link_to&lt;/span&gt; &lt;span class="s2"&gt;"Homepage"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root_path&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Setting the &lt;code&gt;data-turbo&lt;/code&gt; attribute to &lt;code&gt;"true"&lt;/code&gt; will make Turbo process all links and forms inside the Turbo Frame block, &lt;strong&gt;while still ignoring them anywhere outside the frame&lt;/strong&gt;. So, in our example above, the "Edit" link will be handled by Turbo (and clicking on it will render an inline edit form), whereas the "Homepage" link will still be processed normally by the browser.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-turbo-streams-responses"&gt;
  &lt;/a&gt;
  Using Turbo Streams responses
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://turbo.hotwire.dev/handbook/streams"&gt;Turbo Streams&lt;/a&gt; allow the back-end to explicitly declare changes to be made on the client. Whenever the response from the server contains one or more &lt;code&gt;&amp;lt;turbo-stream&amp;gt;&lt;/code&gt; elements, Turbo automatically executes the actions within them, updating the given fragments of the page.&lt;/p&gt;

&lt;p&gt;Similarly to Turbo Frames, links or forms that expect a Turbo Stream response must be &lt;strong&gt;rendered in a Turbo-enabled context&lt;/strong&gt;, so again the only change needed to make Streams work is setting the &lt;code&gt;data-turbo&lt;/code&gt; attribute:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;%# app/views/comments/show.html.erb %&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;dom_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@comment&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt; &lt;span class="na"&gt;data-turbo=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="vi"&gt;@comment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;content&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;button_to&lt;/span&gt; &lt;span class="s2"&gt;"Approve"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;approve_comment_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@comment&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the server responds with a Turbo Stream response, e.g. via a &lt;code&gt;respond_to&lt;/code&gt; block, Turbo will execute the page update commands, as in this somewhat ugly example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/controllers/comments_controller.rb&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;approve&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="vi"&gt;@comment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;approve!&lt;/span&gt;

  &lt;span class="n"&gt;respond_to&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;turbo_stream&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="ss"&gt;turbo_stream: &lt;/span&gt;&lt;span class="n"&gt;turbo_stream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;prepend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dom_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@comment&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                                                &lt;span class="s2"&gt;"&amp;lt;p&amp;gt;approved!&amp;lt;p&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Clicking on the "Approve" link will trigger Turbo (because it is enabled in that context), Turbo will make an AJAX request to the server, the server will respond with a &lt;code&gt;&amp;lt;turbo-stream&amp;gt;&lt;/code&gt; element containing a "prepend" action with the target of the given comment. Turbo will intercept this response and execute the action, effectively prepending the "approved!" text inside the comment div.&lt;/p&gt;

&lt;p&gt;This is all just normal Turbo Streams handling, all we had to do above that is enable Turbo for the particular page fragment.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-turbo-streams-broadcasting"&gt;
  &lt;/a&gt;
  Using Turbo Streams broadcasting
&lt;/h2&gt;

&lt;p&gt;Turbo Streams don‚Äôt even need to respond to user interactions, they can also be used for broadcasting page updates asynchronously from the back-end.&lt;/p&gt;

&lt;p&gt;And, you know what? &lt;strong&gt;It just works, you don‚Äôt need to do anything special here.&lt;/strong&gt; For a simple example, add a broadcast command to your model:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/models/comment.rb&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Comment&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="n"&gt;after_create_commit&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;broadcast_prepend_to&lt;/span&gt; &lt;span class="s2"&gt;"comments"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;‚Ä¶and structure your index template accordingly and a newly created comment will be automatically prepended to a list of comments on the index page:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;%# app/views/comments/index.html.erb %&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;turbo_stream_from&lt;/span&gt; &lt;span class="s2"&gt;"comments"&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"comments"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="vi"&gt;@comments&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;How cool is that‚Ä¶?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mind-the-collision-with-rails-ujs"&gt;
  &lt;/a&gt;
  Mind the collision with Rails UJS
&lt;/h2&gt;

&lt;p&gt;If you used to render links with non-GET methods or ‚ÄùAJAXified‚Äú links with a &lt;code&gt;remote: true&lt;/code&gt; attribute, you need to know that these won‚Äôt work any more inside Turbo-enabled contexts. These functions are handled by &lt;a href="https://github.com/rails/rails/tree/main/actionview/app/assets/javascripts"&gt;Rails UJS&lt;/a&gt; and are &lt;a href="https://github.com/hotwired/turbo-rails#compatibility-with-rails-ujs"&gt;not compatible with Turbo&lt;/a&gt;. Non-GET links should be converted to inline forms using &lt;strong&gt;&lt;code&gt;button_to&lt;/code&gt;&lt;/strong&gt; and remote links should be refactored to normal links handled by Turbo.&lt;/p&gt;

&lt;p&gt;Other UJS features, such as disabling buttons or confirm dialogs continue to work normally.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;To sum this all up, Turbo seems to be perfectly usable even if your legacy JavaScript code does not allow you to switch on Turbo Drive (Turbolinks) right away. This is such a great news! Turbo enables us to &lt;strong&gt;gradually rewrite&lt;/strong&gt; (and effectively &lt;strong&gt;&lt;em&gt;remove&lt;/em&gt;&lt;/strong&gt;, for the most part) our old hand-written JavaScript. We can bring modern, highly reactive behavior to our newly built and updated pages without having to refactor all that rusty JavaScript prior to that.  &lt;/p&gt;

&lt;p&gt;Once the amount of JavaScript lowers substantially, we can take care of the remaining bits and switch on Turbo Drive globally to speed up the web experience even more.&lt;/p&gt;

&lt;p&gt;Overall we think this begins a new era in our front-end development and we are very excited about it! üíõ&lt;/p&gt;

</description>
      <category>rails</category>
      <category>javascript</category>
      <category>hotwire</category>
      <category>turbo</category>
    </item>
    <item>
      <title>Blank spaces : how to deal with nothing in API design</title>
      <author>craignicol</author>
      <pubDate>Fri, 23 Apr 2021 12:22:00 +0000</pubDate>
      <link>https://dev.to/craignicol/blank-spaces-how-to-deal-with-nothing-in-api-design-185n</link>
      <guid>https://dev.to/craignicol/blank-spaces-how-to-deal-with-nothing-in-api-design-185n</guid>
      <description>&lt;p&gt;Consider the following HTTP endpoint:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;GET /{user}/appointments&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;How do we deal with nothing?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nothingman"&gt;
  &lt;/a&gt;
  Nothingman
&lt;/h2&gt;

&lt;p&gt;üö´ If the user doesn‚Äôt currently exist, return 404 ‚Äì this informs the caller that nothing can be done with this resource until it is created or recreated.&lt;/p&gt;

&lt;p&gt;üôà  If the user exists, but we want to protect against username enumeration, return 404 ‚Äì this removes a route for malicious agents to identify actual users, perhaps prior to a password brute force. They may decide this endpoint is less likely to have the full protections afforded to the login endpoint. This endpoint should also avoid indirect enumeration, for example, returning immediately for ‚Äúuser doesn‚Äôt exist‚Äù and delayed for ‚Äúuser exists but we‚Äôre pretending because security‚Äù&lt;/p&gt;

&lt;p&gt;üîí If the user exists but the caller doesn‚Äôt have permission to see their appointments, return 403 ‚Äì the caller will have to log in or ask someone who has access.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#empty-time"&gt;
  &lt;/a&gt;
  Empty time
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Given&lt;/em&gt; the selected user exists&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;üîê If this user does not support appointments, return 404 ‚Äì these resources can‚Äôt be found.&lt;/p&gt;

&lt;p&gt;üóì If this user does support appointments, but there are none, return an empty list.&lt;/p&gt;

&lt;p&gt;_ &lt;strong&gt;note&lt;/strong&gt; : some APIs will return &lt;code&gt;204 No Content&lt;/code&gt; in this scenario. 204 should only be used for POST or PUT requests to indicate server action was a success, and there‚Äôs no data to send back_&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#empty-space"&gt;
  &lt;/a&gt;
  Empty space
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Given&lt;/em&gt; the selected user exists&lt;br&gt;&lt;br&gt;
&lt;em&gt;And&lt;/em&gt; they have at least 1 valid appointment (see the business rules for what ‚Äúvalid‚Äù means)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;üì∫ If the appointment has no location (because online conference links are saved elsewhere in the appointment body) then no location property should be returned&lt;/p&gt;

&lt;p&gt;‚ùî If the appointment has no location (because it is unknown) then the location property should be returned with no data (the empty string)&lt;/p&gt;

</description>
      <category>code</category>
      <category>development</category>
      <category>ux</category>
      <category>api</category>
    </item>
    <item>
      <title>TLDR - Basic search field with Ruby on Rails </title>
      <author>Yaroslav Shmarov</author>
      <pubDate>Fri, 23 Apr 2021 12:08:43 +0000</pubDate>
      <link>https://dev.to/yarotheslav/search-field-without-gems-2g94</link>
      <guid>https://dev.to/yarotheslav/search-field-without-gems-2g94</guid>
      <description>&lt;h3&gt;
  &lt;a href="#mission-field-to-search-for-user-email-that-contains-characters-example"&gt;
  &lt;/a&gt;
  MISSION: field to search for user email that &lt;strong&gt;contains&lt;/strong&gt; characters. Example:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y0Di9eN6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.corsego.com/assets/ruby-on-rails-search-field-without-gems/search-field.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y0Di9eN6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.corsego.com/assets/ruby-on-rails-search-field-without-gems/search-field.png" alt="search-field.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;users_controller.rb&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  def index
    if params[:email]
      @users = User.where('email ILIKE ?', "%#{params[:email]}%").order(created_at: :desc) #case-insensitive
    else
      @users = User.all.order(created_at: :desc)
    end
  end

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;any view (users/index.html.erb or in a &lt;strong&gt;bootstrap&lt;/strong&gt; navbar)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.form-inline.my-2.my-lg-0
  = form_tag(courses_path, method: :get) do
    .input-group
      = text_field_tag :title, params[:title], autocomplete: 'off', placeholder: "Find a course", class: 'form-control-sm'
      %span.input-group-append
        %button.btn.btn-primary.btn-sm{:type =&amp;gt; "submit"}
          %span.fa.fa-search{"aria-hidden" =&amp;gt; "true"}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;without bootstrap&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;%= form_tag(users_path, method: :get) do %&amp;gt;
  &amp;lt;%= text_field_tag :email, params[:email], autocomplete: 'off', placeholder: "user email" %&amp;gt;
  &amp;lt;%= submit_tag "Search" %&amp;gt;
&amp;lt;% end %&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it! Looks nice, doesn't it?&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
    </item>
    <item>
      <title>15+ Awesome Color Resources For Your Next Web Project</title>
      <author>Kiran Raj R</author>
      <pubDate>Fri, 23 Apr 2021 11:45:49 +0000</pubDate>
      <link>https://dev.to/kiranrajvjd/15-awesome-color-resources-for-your-next-web-project-48je</link>
      <guid>https://dev.to/kiranrajvjd/15-awesome-color-resources-for-your-next-web-project-48je</guid>
      <description>&lt;p&gt;When we design a website one of the most important element to consider is color scheme, we cannot remember all the colors or shades available, it will be helpful if we have a good resource about colors. I have listed some resources which will help you to get a good color scheme for your next project. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://colorpalettes.net/"&gt;ColorPalettes&lt;/a&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H4CRZQ9s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/br43olifwnuwjnzve97l.PNG" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://colorhunt.co/"&gt;ColorHunt&lt;/a&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6xdEKcjc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5hw4bzns5c4zl29a13af.PNG" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.0to255.com/"&gt;0 To 255&lt;/a&gt; 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PTc9t4wT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zbrxakifv963y296cqaf.PNG" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://color.hailpixel.com/"&gt;Hailpixel&lt;/a&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--58Xryula--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tnguvcbgetca1bh2wtw6.PNG" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://clrs.cc/"&gt;Clrs.cc&lt;/a&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N0twijhR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/atvloro88gdk6xroa4v4.PNG" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://htmlcolorcodes.com/"&gt;HTMLColorCodes&lt;/a&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5pLHVGW2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9nv0lmxxszsid620u53h.PNG" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://coolors.co/"&gt;Coolors&lt;/a&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LahqxWHM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/10dd21jgze3kb6zqrruu.PNG" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://colormind.io/"&gt;ColorMind&lt;/a&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sIYST-0o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bbe8cuc3nde2pfpsx2k4.PNG" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://colors.muz.li/"&gt;Muzil&lt;/a&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K5CUc3u6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j1197s087gifkol3e1m6.PNG" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.canva.com/colors/color-palette-generator/"&gt;Canva&lt;/a&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--41rCmzLL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3q1xp4c0nmq0l4t6icp0.PNG" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://mycolor.space/"&gt;Mycolor.space&lt;/a&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yApPUykH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z2d8jc3pvd9eujjmnhmc.PNG" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://color.adobe.com/create/color-wheel/"&gt;AdobeColorWheel&lt;/a&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vqL1OzTq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i677jzsog1mvofkd7xsf.PNG" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.huesnap.com/"&gt;Huesnap&lt;/a&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dxXpX3ru--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3yquscpm8nc9qjycbpao.PNG" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.materialpalette.com/"&gt;MaterialPalette&lt;/a&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qW7a1egT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5wk9d8bojvzwhdi6atlm.PNG" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://www.colorexplorer.com/colorpicker.aspx"&gt;ColorExplorer&lt;/a&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dFnsYjUn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j6v6e3otcdp0osilnzjs.PNG" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://paletton.com/#uid=14j0u0kllllaFw0g0qFqFg0w0aF"&gt;Paletton&lt;/a&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H3L_3J0k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6960n90xns9xpmeb79r4.PNG" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://www.colorsontheweb.com/Color-Tools/Color-Wizard"&gt;ColorsOnTheWeb&lt;/a&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Evk8A7nn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o486hdoszehf0r84qyb0.PNG" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you are interested you can check for some more resources here. &lt;br&gt;
1.&lt;a href="https://dev.to/kiranrajvjd/20-awesome-css-code-generators-27gp"&gt;20+ Awesome CSS Code Generator Resources&lt;/a&gt;&lt;br&gt;
2.&lt;a href="https://dev.to/kiranrajvjd/awesome-35-svg-resources-for-your-next-web-project-5c15"&gt;40+ Awesome SVG Resources for Web Developers&lt;/a&gt;&lt;br&gt;
3.&lt;a href="https://dev.to/kiranrajvjd/4-awesome-tools-that-help-you-to-manage-you-css-code-better-39b6"&gt;4 Awesome Tools that Help You To Manage Your CSS&lt;/a&gt;&lt;br&gt;
4.&lt;a href="https://dev.to/kiranrajvjd/10-awesome-css-resources-14mh"&gt;10 Awesome CSS Resorces&lt;/a&gt;&lt;br&gt;
5.&lt;a href="https://dev.to/kiranrajvjd/awesome-css-layout-resources-for-beginners-508a"&gt;Awesome CSS Layout Resources&lt;/a&gt;&lt;br&gt;
6.&lt;a href="https://dev.to/kiranrajvjd/15-awesome-css-animation-resources-4mhi"&gt;Awesome CSS Animation Resources&lt;/a&gt;&lt;br&gt;
7.&lt;a href="https://dev.to/kiranrajvjd/25-awesome-fonts-from-google-fonts-40im"&gt;25 Awesome Google Fonts For Your Website&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>productivity</category>
      <category>beginners</category>
    </item>
    <item>
      <title>üéâ It's my birthday üéÇ</title>
      <author>mrwolferinc</author>
      <pubDate>Fri, 23 Apr 2021 11:39:41 +0000</pubDate>
      <link>https://dev.to/mrwolferinc/it-s-my-birthday-gm5</link>
      <guid>https://dev.to/mrwolferinc/it-s-my-birthday-gm5</guid>
      <description>&lt;p&gt;So today is technically my birthday. Yes, I was born on the day that comes after Earth Day.&lt;/p&gt;

&lt;p&gt;I have planned to get 5 items on this special day, which were a 3D printer, some noise-canceling headphones, a &lt;a href="https://www.google.com/books/edition/_/f7wGeA71_eUC?hl=en"&gt;Python book&lt;/a&gt;, a new mousepad, and a new glasses case (I lost mine). I sent the list too late, so I will probably get some of the items after my birthday.&lt;/p&gt;

&lt;p&gt;I am also planning to go to Chili's for dinner. This is a family tradition, as we also do this on anniversaries. I usually get their classic bacon burger because I like bacon üòê&lt;/p&gt;




&lt;p&gt;Anyways, that's really much it for what I'll be doing today, none other than relaxing and having a good time.&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>birthday</category>
      <category>cakeday</category>
      <category>offtopic</category>
    </item>
    <item>
      <title>Same Time, Same Desk: Rails Conference and React Summit</title>
      <author>Jason Fleetwood-Boldt</author>
      <pubDate>Fri, 23 Apr 2021 11:25:19 +0000</pubDate>
      <link>https://dev.to/jasonfb/same-time-same-desk-rails-conference-and-react-summit-55c0</link>
      <guid>https://dev.to/jasonfb/same-time-same-desk-rails-conference-and-react-summit-55c0</guid>
      <description>&lt;p&gt;Last week in a virtual chat room at the React Summit Kent C. Dodds was asked an interesting question: What does he think of Rails? ‚ÄúI hesitate sometimes with frameworks that abstract a lot. It certainly worked out well for Rails. If you fit within the rails, pun intended, then everything‚Äôs gonna be fine. React has a totally different approach. We‚Äôre just gonna let you do this one thing really well and let you build around it.‚Äù Within that freedom greater innovation is born, he suggested. ‚ÄúI‚Äôve never used Rails,‚Äù he qualified his statement.&lt;/p&gt;

&lt;p&gt;It stands in contrast to the other industry cult-leader, David Heinemeier-Hanson (who goes by DHH), giving the keynote to the Rails Conference on the same week.&lt;/p&gt;

&lt;p&gt;DHH was on-brand: he delivered a fire-and-brimstone polemic railing against Big Tech monopolies. He begins by throwing a Molotov cocktail at the JavaScript industry: Gmail ships with 3.5MB of JavaScript, and that Hey.com (an email platform he launched last year) ships with a mere 40 KB. Translated to laymen-speak: Hey.com has shipped a product 14 years after Gmail was first introduced to the public in 2007 with dramatically less frontend code, it loads and operates faster on modern devices and on older devices, and is easier to maintain and ship.&lt;/p&gt;

&lt;p&gt;DHH claims that Rails 7 (the next version) will mean Rails ‚Äúnow has a grand unifying answer for front-end.‚Äù In one section of his talk, his anti-Node sentiments flew out like bats from a closet door one rarely opens: ‚ÄúIs there an opening here where developing modern web applications do not require transpiling or bundling?‚Äù He continued later, ‚ÄúI don‚Äôt want to F around with Node.‚Äù&lt;/p&gt;

&lt;p&gt;The implicit assertion by DHH is that the JavaScript world (and React) has become overly complex: its patterns create huge, unmaintainable intertwined codebases. JavaScript-heavy apps and apps written in React are unnecessarily weighed down with layers that, at best, turn off new entrants into programming, and at worst, help further the monopolistic practices of Big Tech.&lt;/p&gt;

&lt;p&gt;‚ÄúRuby had been such a bring light for me, such a revelation, such a different path‚Ä¶I took on a role‚Ää‚Äî‚Ääin a highly antagonistic fashion ([I‚Äôll] cop to it as it is)‚Ää‚Äî‚Ääto evangelize Ruby in a confrontational manner. Not just: Hey this is just another church you can join. No, I was like: Hey Java programmers, look at this sh*t! Look at this! It‚Äôs all this [little] code! And, like boom! Then it‚Äôs just this much code! Then what! Then what!‚Äù Although he proclaims this like a little kid, he does have the self-awareness of a man who has led Rails for nearly two decades, sheepishly admitting this attitude was a phase of his life he had to grow out of.&lt;/p&gt;

&lt;p&gt;On the React side of things‚Ää‚Äî‚ÄäI was attending both conferences concurrently at my desk‚Ää‚Äî‚Ääthings sounded quite a bit different. The ideology was less anti-capitalist, sponsored ads were broadcast on periodic schedules between talks, and the whole program seemed less focused on cult leaders. The React community moves fast. It‚Äôs more of a hodge-podge of competing ideas and everyone‚Ää‚Äî‚Äälike Gen Z itself‚Ää‚Äî‚Ääis enamored with the idea that democracy lifts up the winner among a field of competing technologies.&lt;/p&gt;

&lt;p&gt;Years ago class-based components were how React JavaScript was written, (we‚Äôre talking about object orientation, not capitalism), but last year the React world officially changed both its syntax, implementation details, and made a major shift away from object-oriented patterns towards functional programming (FP) using what is called the ‚Äúhooks pattern‚Äù or just ‚Äúhooks.‚Äù&lt;/p&gt;

&lt;p&gt;The React world sees ‚Äòclosed‚Äô ecosystems like Rails‚Ää‚Äî‚Ääperhaps even DHH himself‚Ää‚Äî‚Ääas the oligarchy precluding innovation. Ironically, DHH sees himself as the opposite: He is the David in David vs. the Goliath of the fight against tech monopolies. Apple, Google, and their corporate power to control who codes and who does not are the true enemy.&lt;/p&gt;

&lt;p&gt;View Post&lt;/p&gt;

&lt;p&gt;He said, ‚ÄúThis is the titanic fight of the century. The fight against concentrated power and money. The biggest companies, not just in the US but in the world, are tech monopolies. They are slowly squeezing the life out of people at the edges while still providing products that people enjoy. This is why this is not the same clear-cut case that you can imagine, like railroads or tobacco [were monopolies], but I think it‚Äôs going to be that.‚Äù&lt;/p&gt;

&lt;p&gt;For myself, my career advanced during the golden age of startups (2008‚Äì2014) but was dramatically usurped by age of platformization in tech. The eight years I spent building e-commerce were rendered no longer necessary by Shopify. In short, my career was replaced by a robot.&lt;/p&gt;

&lt;p&gt;As a 42-year-old seasoned developer on the job market, it‚Äôs challenging to make a switch. I generally think most hiring in React probably see me as too old to even be relevant. (Mr. Heinemeier-Hanson, whom I have never met but interacted with online, happens to be one month to the day older than me. Kent Dodds, whom I have also never met and only saw as an audience member at this virtual conference, is 10 years younger than DHH and I are.)&lt;/p&gt;

&lt;p&gt;The interviews I do get are all for Rails positions and have a common theme: A large team of mid-career devs in an organization with an old Rails codebase. The codebase shows years of slipped (or non-existent) testing practices, inconsistent patterns and design systems, and rushed code abstractions problems (or, as we say in the biz, ‚Äúcode smells‚Äù). People throw around terms like every developer reinvents the wheel. These teams speak to a larger pattern in the tech ecosystem: A very few select Rails apps from the golden age of startups survived, and all the others failed. (If your name is Github, Shopify, or Basecamp please stand up.)&lt;/p&gt;

&lt;p&gt;The ones that failed number in the thousands and thousands of Rails apps. They were tech startups that didn‚Äôt cross the chasm, or at least didn‚Äôt do so on Rails. This left Ruby on Rails as a paradoxically more specialized but smaller community, like the frontrunner everyone forgot about.&lt;/p&gt;

&lt;p&gt;(In his famous 1991 book Crossing the Chasm Geoffrey Moore asserted that in the technology adoption lifecycle, a tech company could probably get its friends and family to be innovators and early adopters.Then, the critical make-or-break period is when a tech company moves, like a tortoise, across a large chasm in a desert with predators [competitors] on all sides ready to take it down.)&lt;/p&gt;

&lt;p&gt;An experience gap in the industry has left a void: Quality standards aren‚Äôt what they should be.&lt;/p&gt;

&lt;p&gt;Unlike 2008, today there are tech-haves and tech-have-nots: working at an early-stage startup is now seen as risky, aberrant, and probably a place where soloism is fostered. For early career entrants into software today, it seems they are all hungry to get positions at late-stage tech company (like Google, Apple, Microsoft, Amazon, Facebook, Adobe, Paypal, Shopify, Spotify, etc). When I was in the tech bubble in San Francisco in 2008, if you didn‚Äôt in a Google, Apple, or Yahoo you could certainly be a founder of your own tech startup to gain similar cachet (I‚Äôm talking about prestige and admiration, not computer memory). Today nobody ‚Äògoes into‚Äô startups.&lt;/p&gt;

&lt;p&gt;Rails was born out of a rebellion against Java. ‚ÄúLook at how little code we can write, Java devs. Now what!‚Äù DHH proclaimed proudly. It was always an anti-corporate framework that helped startups get from the innovators to the early adopters. But did Rails apps survive crossing the chasm to early majority?&lt;/p&gt;

&lt;p&gt;People ask me what I predict will happen in the future of mobile, e-commerce, web development, and hardware tech. I haven‚Äôt the foggiest, I tell them, and if I knew I likely wouldn‚Äôt tell you. Keep testing and carry on.&lt;/p&gt;

&lt;p&gt;‚Äî&lt;/p&gt;

&lt;p&gt;Jason Fleetwood-Boldt is a senior developer looking for work. He runs the &lt;a href="https://www.linkedin.com/groups/12524236/"&gt;Rails‚ù§Ô∏èReact&lt;/a&gt; group on LinkedIn and the &lt;a href="https://www.meetup.com/brooklyn-javascripters/"&gt;Brooklyn JavaScripters Meetup&lt;/a&gt; where he evangelizes best practices, code testing, de-programming from cargo cults, and using Rails+React together.&lt;/p&gt;

&lt;p&gt;Cover art by &lt;a href="https://www.instagram.com/cosmic_travesty"&gt;IncrediblyBizzy&lt;/a&gt;&lt;/p&gt;

</description>
      <category>rails</category>
      <category>ruby</category>
      <category>react</category>
    </item>
    <item>
      <title>Top 10 Customer Relationship Management (CRM) Software in 2021
</title>
      <author>Rajesh Shirsagar</author>
      <pubDate>Fri, 23 Apr 2021 11:24:13 +0000</pubDate>
      <link>https://dev.to/invokker/top-10-customer-relationship-management-crm-software-in-2021-2d9k</link>
      <guid>https://dev.to/invokker/top-10-customer-relationship-management-crm-software-in-2021-2d9k</guid>
      <description>&lt;p&gt;Customer relationship management (CRM) software is crucial for every organization to enhance their relationships; with their clients. Additionally, this software also helps track, record, and manage every customer interaction on a central server.&lt;/p&gt;

&lt;p&gt;Every business might have a different requirement depending on their business process. As a reason, you need to choose the best CRM software that understands the business objectives and helps to achieve them. There are multiple CRM system vendors in the market, which is why it might be difficult to choose; the best one.   &lt;/p&gt;

&lt;p&gt;We are a software recommendation platform and made a list of the top ten CRM software in 2021, depending on their features. The following list of software is in alphabetical order: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Creatio CRM
Creatio CRM system is an all-inclusive platform to enhance marketing, sales, and customer service. It is an end-to-end platform that provides tools for all the departments and helps enrich the customer experience. One of the superpowers of this solution is that it has a BPM engine to change processes quickly. Additionally, it also provides a 14 days free trial so that you can understand how this CRM software adapts to your business.
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Features:&lt;br&gt;&lt;br&gt;
-Customer 360-degree view.&lt;br&gt;&lt;br&gt;
-Customer segmentation.&lt;br&gt;&lt;br&gt;
-Manage omnichannel marketing campaigns.&lt;br&gt;&lt;br&gt;
-Lead qualification.&lt;br&gt;&lt;br&gt;
-Lead engagement.&lt;br&gt;&lt;br&gt;
-Lead distribution.&lt;br&gt;&lt;br&gt;
-Lead analysis.&lt;br&gt;&lt;br&gt;
-Opportunity management.  &lt;/p&gt;

&lt;p&gt;Furthermore, there are multiple features this CRM solution can offer; which you can explore on their profile page.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Digital CRM
Digital CRM is an online CRM software that allows you to automate most aspects of the workflow process. This software solution allows; you to have an unlimited number of users and records with admin role management. Moreover, you can install this software on your webserver, localhost, or on-premises.  This CRM system allows you to customize the software according to your business needs. One of the best advantages of this solution is that it is affordable without any hidden charges.
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Features:&lt;br&gt;&lt;br&gt;
-Salesforce automation.&lt;br&gt;&lt;br&gt;
-CRM dashboard.&lt;br&gt;&lt;br&gt;
-Contact management.&lt;br&gt;&lt;br&gt;
-Lead management.&lt;br&gt;&lt;br&gt;
-Sales pipeline.&lt;br&gt;&lt;br&gt;
-Reports and analytics.&lt;br&gt;&lt;br&gt;
-Lead management.&lt;br&gt;&lt;br&gt;
-Role management.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Freshsales CRM
Freshsales CRM software has all the necessary tools to make your sales force better. This software solution integrates artificial intelligence to score lead, phone, email, and activity capture. Additionally, it acts as a central server for your team to access 360 degrees of your customer profile because it captures and gathers customer experience in a single platform. One of the top CRM systems that allow you to customize to fit your business needs. Furthermore, it increases the productivity of your team with the help of automation.
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Features:&lt;br&gt;&lt;br&gt;
-Workflow automation.&lt;br&gt;&lt;br&gt;
-Customer lifecycle.&lt;br&gt;&lt;br&gt;
-Sales analytics.&lt;br&gt;&lt;br&gt;
-Marketing analytics.&lt;br&gt;&lt;br&gt;
-Email campaigns.&lt;br&gt;&lt;br&gt;
-Conversion rate optimization.&lt;br&gt;&lt;br&gt;
-Deal management.&lt;br&gt;&lt;br&gt;
-Chat campaigns.&lt;br&gt;&lt;br&gt;
-Event tracking.&lt;br&gt;&lt;br&gt;
-Sales sequences.  &lt;/p&gt;

&lt;p&gt;These are the top features of this system you can explore more on their profile page. &lt;/p&gt;

&lt;p&gt;Want to view full list then please visit my lates CRM blog at-&amp;gt;&lt;a href="https://bit.ly/3x0s6jr"&gt;https://bit.ly/3x0s6jr&lt;/a&gt; &lt;/p&gt;

</description>
    </item>
    <item>
      <title>Las 8 mejores herramientas de autor de e-learning para usar en el 2021</title>
      <author>meydele</author>
      <pubDate>Fri, 23 Apr 2021 11:23:08 +0000</pubDate>
      <link>https://dev.to/feygele/las-8-mejores-herramientas-de-autor-de-e-learning-para-usar-en-el-2021-23cc</link>
      <guid>https://dev.to/feygele/las-8-mejores-herramientas-de-autor-de-e-learning-para-usar-en-el-2021-23cc</guid>
      <description>&lt;p&gt;Elegir una herramienta de autor de e-learning puede a veces tomar un esfuerzo parecido al de crear el curso. Hacer una comparaci√≥n de herramientas de autor no es tan f√°cil como parece ya que no solamente se trata del conjunto de funcionalidades t√©cnicas de una herramienta, sino tambi√©n de c√≥mo va a encajar en tu flujo de trabajo. Una herramienta ideal permite al dise√±ador instruccional enfocarse en desarrollar un buen contenido de aprendizaje sin tener que preocuparse sobre problemas t√©cnicos pero al mismo tiempo es lo suficientemente flexible como para hacer una visi√≥n realidad.&lt;/p&gt;

&lt;p&gt;En este art√≠culo, echaremos un vistazo de cerca a ocho populares herramientas de autor de desarrolladores l√≠deres, incluyendo iSpring, Articulate, Adobe, Elucidat, y Trivantis. Entonces, empecemos.&lt;/p&gt;

&lt;p&gt;Antes de adentrarnos en el tema, aqu√≠ presentamos una tabla de comparaci√≥n r√°pida si est√°s corto de tiempo.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1UmksW8D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/06mvmubpsaqbhxoqihx5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1UmksW8D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/06mvmubpsaqbhxoqihx5.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-ispring-suite"&gt;
  &lt;/a&gt;
  1. iSpring Suite
&lt;/h2&gt;

&lt;p&gt;Clasificaci√≥n: 4,6/5 ‚Äì 1,087 rese√±as &lt;a href="https://www.capterra.es/software/124358/ispring-suite"&gt;Capterra&lt;/a&gt;&lt;br&gt;
Plataforma: Windows&lt;br&gt;
Precio: 690 ‚Ç¨/ $ 770 por autor/a√±o&lt;br&gt;
Descuentos: Acad√©mico, sin fines de lucro&lt;br&gt;
Prueba: 14-dias muestra gratis &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0pG4Ai_g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ejjwhzni8qzn8ipdm7w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0pG4Ai_g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ejjwhzni8qzn8ipdm7w.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.ispring.es/ispring-suite"&gt;iSpring Suite&lt;/a&gt; es un conjunto de herramientas de autor de eLearning dise√±adas para crear r√°pidamente cursos en l√≠nea. Est√° integrado a PowerPoint, as√≠ que el contenido de las presentaciones puede ser f√°cilmente aprovechado y reutilizado. Puedes crear cursos de aspecto profesional que incluyan cuestionarios o evaluaciones y simulaciones de di√°logo sin la necesidad de programaci√≥n de c√≥digo t√©cnico o formaci√≥n extensa. Los cursos desarrollados pueden ser archivos de salida en todos los formatos populares de eLearning, incluyendo SCORM, xAPI, cmi5, y HTML5.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DW3x8rtX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lgr03eeas1yz6io92cws.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DW3x8rtX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lgr03eeas1yz6io92cws.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;M√°s adecuada para&lt;/strong&gt;&lt;br&gt;
iSpring Suite es una herramienta sencilla que te permitir√° crear cursos inmediatamente despu√©s de su compra. Si alguna vez has creado una presentaci√≥n de PowerPoint, entonces iSpring Suite ser√° intuitivo para ti. Ser√°s capaz de crear tu primer curso sin ninguna formaci√≥n previa.&lt;/p&gt;

&lt;p&gt;Es una buena herramienta para aquellos que quieren r√°pidamente lanzar su curso en l√≠nea. Esta herramienta te permitir√° enfocarte en dise√±ar contenido de aprendizaje r√°pidamente sin tener que lidiar con problemas t√©cnicos.&lt;/p&gt;

&lt;p&gt;Puedes &lt;a href="https://www.ispring.es/ispring-suite/download"&gt;probar iSpring Suite&lt;/a&gt; registr√°ndote para una prueba gratuita.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-adobe-captivate"&gt;
  &lt;/a&gt;
  2. Adobe Captivate
&lt;/h2&gt;

&lt;p&gt;Clasificaci√≥n: 4,6/5 ‚Äì 157 rese√±as &lt;a href="https://www.capterra.es/software/181977/adobe-captivate"&gt;Capterra&lt;/a&gt;&lt;br&gt;
Plataforma: Windows y iOS&lt;br&gt;
Precio: Suscripci√≥n mensual por $33,99 o 41,47 ‚Ç¨&lt;br&gt;
Descuentos: Estudiantes y maestros&lt;br&gt;
Prueba: Prueba gratuita de 30 d√≠as&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AP6OzFvD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c6lt54c2g06qw6erfn1l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AP6OzFvD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c6lt54c2g06qw6erfn1l.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.adobe.com/es/"&gt;Adobe Captivate&lt;/a&gt; es una herramienta a nivel profesional para desarrollar contenido eLearning y experiencias de aprendizaje compatibles con dispositivos m√≥viles. Es una herramienta de autor con funciones completas que te da un amplio control sobre todos los aspectos de tu curso y te permite personalizarlo a trav√©s de elementos programables tales como objetos, variables y eventos desencadenantes. &lt;/p&gt;

&lt;p&gt;Captivate puede presumir de un conjunto de funciones robustas; sin embargo, tiene un estilo de dise√±o lineal tradicional en comparaci√≥n con herramientas de autor m√°s modernas. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l45u_Wgq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/80t3fnk5spf7lrzcrk7v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l45u_Wgq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/80t3fnk5spf7lrzcrk7v.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;M√°s adecuada para&lt;/strong&gt;&lt;br&gt;
Este es un gran programa si quieres ofrecerle a tus estudiantes una extensa experiencia de aprendizaje m√≥vil, incorporar funciones de VR, o crear simulaciones de programas. Es la m√°s adecuada para desarrolladores de eLearning con experiencia que est√©n c√≥modos trabajando con variables y algo de c√≥digo para hacer realidad la magia. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-articulate-360"&gt;
  &lt;/a&gt;
  3. Articulate 360
&lt;/h2&gt;

&lt;p&gt;Clasificaci√≥n: 4,7/5 ‚Äì 364 rese√±as &lt;a href="https://www.capterra.es/software/156978/articulate-360"&gt;Capterra&lt;/a&gt;&lt;br&gt;
Plataforma: Windows&lt;br&gt;
Precio: $1,299 por usuario, anualmente&lt;br&gt;
Descuentos: Acad√©mico, licencias por equipos de trabajo&lt;br&gt;
Prueba: Prueba gratuita de 60 d√≠as&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qQi64lKk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/78fuq9cz99fyuzkj2fqg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qQi64lKk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/78fuq9cz99fyuzkj2fqg.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://articulate.com/360/"&gt;Articulate 360&lt;/a&gt; est√° posicionada como una herramienta integral para la creaci√≥n, revisi√≥n e implementaci√≥n de eLearning. El conjunto de herramientas 360 incluye nueve productos de Articulate:&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#storyline-360"&gt;
  &lt;/a&gt;
  Storyline 360
&lt;/h6&gt;

&lt;h6&gt;
  &lt;a href="#studio-360"&gt;
  &lt;/a&gt;
  Studio 360
&lt;/h6&gt;

&lt;h6&gt;
  &lt;a href="#replay-360"&gt;
  &lt;/a&gt;
  Replay 360
&lt;/h6&gt;

&lt;h6&gt;
  &lt;a href="#preso"&gt;
  &lt;/a&gt;
  Preso
&lt;/h6&gt;

&lt;h6&gt;
  &lt;a href="#peek"&gt;
  &lt;/a&gt;
  Peek
&lt;/h6&gt;

&lt;p&gt;Servicios Web Rise, Review, Content Library, y Articulate Live. &lt;br&gt;
Tres de estas herramientas est√°n dise√±adas principalmente para la creaci√≥n de cursos.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Articulate Studio 360&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Si eres nuevo en eLearning pero sabes c√≥mo trabajar con PowerPoint, ser√° f√°cil empezar con Articulate Studio 360, que es una adici√≥n a Powerpoint.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Articulate Rise&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Articulate Rise est√° 100% basado en la web y utiliza bloques para permitirte crear cursos lineales simples al incluir tu contenido.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Articulate Storyline 360&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Articulate Storyline 360 es la herramienta de autor independiente m√°s avanzada. Su interfaz es similar a PowerPoint, as√≠ que algunas opciones ser√°n intuitivas para usuarios novatos. Te permite crear cursos eLearning que incluyen la funci√≥n de narraci√≥n, v√≠deo, y animaci√≥n. Tambi√©n puedes crear cuestionarios para evaluar a los estudiantes, simulaciones, e interacciones de arrastrar y soltar.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vuSbjdL8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w0t0jtvwf4b38pkh14hv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vuSbjdL8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w0t0jtvwf4b38pkh14hv.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;M√°s adecuada para&lt;/strong&gt;&lt;br&gt;
Equipos de trabajo que har√°n uso de todos los componentes, de lo contrario pagar√°s de m√°s por la herramienta completa. El inconveniente es que la mayor√≠a de los desarrolladores individuales y las organizaciones de peque√±as a medianas no necesitar√°n todas estas herramientas, algunas de las cuales se duplican entre ellas mismas, pero todav√≠a tendr√°s que comprar el conjunto completo como parte de la licencia de suscripci√≥n. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-lectora-inspire"&gt;
  &lt;/a&gt;
  4. Lectora Inspire
&lt;/h2&gt;

&lt;p&gt;Clasificaci√≥n: 4,4/5 ‚Äì 61 rese√±as &lt;a href="https://www.capterra.es/software/205885/lectora"&gt;Capterra&lt;/a&gt;&lt;br&gt;
Plataforma: Windows&lt;br&gt;
Precio: $2,595 por una licencia de por vida&lt;br&gt;
Descuentos: Acad√©mico/Gobiernos: Precio solo con la solicitud&lt;br&gt;
Prueba: Prueba gratuita de 30 d√≠as&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aw_BOHJs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y32lmnylmfmmbfc354hu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aw_BOHJs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y32lmnylmfmmbfc354hu.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.trivantis.com/products/inspire-e-learning-software/"&gt;Lectora Inspire&lt;/a&gt; es un conjunto de herramientas dise√±adas para abordar las diferentes necesidades de los creadores de cursos, desde crear cursos b√°sicos basados en diapositivas hasta crear proyectos personalizados a profundidad. Se diferencia de otras herramientas porque incluye servicios externos como parte del paquete como las plantillas de eLearning Brothers templates, caracteres de avatar, y un creador de interacciones. Es m√°s f√°cil pensar en Lectora como la herramienta principal con muchas funciones adicionales incluidas que puedes usar para crear diferentes tipos de contenido.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ba-vNDAd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0u1rjqnfbswx76ta78m9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ba-vNDAd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0u1rjqnfbswx76ta78m9.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;M√°s adecuada para&lt;/strong&gt;&lt;br&gt;
Esta es una herramienta poderosa pero complicada. Permite personalizaciones extensas a trav√©s de la programaci√≥n de c√≥digo, librer√≠as externas, y scripts. Debido a esta extensibilidad, Lectora requiere que los desarrolladores est√©n bien entrenados. As√≠ que esta es una buena opci√≥n si eres un desarrollador experimentado con habilidades en programaci√≥n, tienes un dise√±ador en tu equipo, y creas cursos que est√°n principalmente basados en elementos interactivos complejos.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-elucidat"&gt;
  &lt;/a&gt;
  5. Elucidat
&lt;/h2&gt;

&lt;p&gt;Clasificaci√≥n: 4,7/5 ‚Äì 25 rese√±as &lt;a href="https://www.capterra.es/software/131388/elucidat"&gt;Elucidat&lt;/a&gt;&lt;br&gt;
Plataforma: SaaS&lt;br&gt;
Precio: Precio no indicado; debes contactar al vendedor&lt;br&gt;
Descuentos: No especificado&lt;br&gt;
Prueba: Prueba gratuita ofrecida solamente al final de la demostraci√≥n en vivo, la cual debe reservarse y programarse en l√≠nea&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Tj_JNoem--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7vqmj6g2gvbxpmwjd8vv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Tj_JNoem--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7vqmj6g2gvbxpmwjd8vv.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.elucidat.com/"&gt;Elucidat&lt;/a&gt; es una herramienta de autor de eLearning basada en la nube que te permite producir contenido compatible con HTML5 y SCORM. Permite a todo el equipo de trabajo contribuir a crear eLearning, revisarlo y tomar parte en el proceso de autor√≠a.&lt;/p&gt;

&lt;p&gt;Elucidat ofrece muchas funciones b√°sicas que se esperan de una herramienta de autor de HTML5, tales como crear evaluaciones y cuestionarios, gesti√≥n de audio y video, y llenar un curso con im√°genes y texto.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wQ45NEhz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nhex818gpv9qxtl24uol.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wQ45NEhz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nhex818gpv9qxtl24uol.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;M√°s adecuada para&lt;/strong&gt;&lt;br&gt;
Elucidat se adapta bien a organizaciones con equipos de formaci√≥n y desarrollo distribuidos y requisitos para impartir variaciones de curso seg√∫n la localidad, pero que no tienen la necesidad de crear cursos basados en diapositivas o altamente personalizados para ellos o sus clientes.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-dominknow"&gt;
  &lt;/a&gt;
  6. dominKnow
&lt;/h2&gt;

&lt;p&gt;Clasificaci√≥n: 4,7/5 ‚Äì 24 rese√±as &lt;a href="https://www.capterra.es/software/74537/dominknow-platform-flow-claro"&gt;Capterra&lt;/a&gt;&lt;br&gt;
Plataforma: Windows solamente&lt;br&gt;
Precio: Desde $997/a√±o por usuario √∫nico&lt;br&gt;
Descuentos: Organizaciones sin fines de lucro/Educativos:&lt;br&gt;
Precio solo con la solicitud&lt;br&gt;
Prueba: Prueba gratuita de 14 d√≠as &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dnn-JRky--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1o4v2p4ffw4dr9mzu7g9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dnn-JRky--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1o4v2p4ffw4dr9mzu7g9.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.dominknow.com/"&gt;dominKnow&lt;/a&gt; es una plataforma de autor basada en la nube dise√±ada para equipos y organizaciones grandes. Su objetivo es permitirte crear diferentes tipos de eLearning con plantillas, banco de recursos, una biblioteca central para compartir y reutilizar contenido en distintos proyectos, y colaboraci√≥n y revisi√≥n en tiempo real. &lt;/p&gt;

&lt;p&gt;dominKnow tiene realmente tres herramientas principales. Tiene un creador de cursos compatibles con dispositivos m√≥viles, un creador de cursos m√°s tradicional que te permite convertir presentaciones de PPT, y una herramienta para capturar y generar simulaciones de sistemas. Todo el contenido usado en cualquiera de las herramientas de autor se guarda como un objeto discreto que puede ser reutilizado y publicado en varios formatos, como Knowledge Base o Job Aid.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J-DDzGZY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/987wsg061z1bmkh9i92m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J-DDzGZY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/987wsg061z1bmkh9i92m.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;M√°s adecuada para&lt;/strong&gt;&lt;br&gt;
Aquellos que buscan una herramienta de autor de eLearning que produzca resultados de alta calidad a la vez que sea bastante f√°cil de aprender y usar, especialmente para las organizaciones que utilizan autores independientes que necesitan mantener el contenido gestionado y accesible para equipos grandes de trabajo. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-easygenerator"&gt;
  &lt;/a&gt;
  7. Easygenerator
&lt;/h2&gt;

&lt;p&gt;Clasificaci√≥n: 4,8/5 ‚Äì 71 rese√±as &lt;a href="https://www.capterra.es/software/129281/easygenerator"&gt;Capterra&lt;/a&gt;&lt;br&gt;
Plataforma: SaaS&lt;br&gt;
Precio: $99/mes/usuario&lt;br&gt;
Descuentos: Organizaciones sin fines de lucro/Educacionales: Precio solamente bajo aplicaci√≥n&lt;br&gt;
Prueba: Prueba gratuita de 14 d√≠as &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p_2sy3Lj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/agd4avmabqs59fqzov1w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p_2sy3Lj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/agd4avmabqs59fqzov1w.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.easygenerator.com/en/"&gt;Easygenerator&lt;/a&gt; es una herramienta de autor de eLearning para personas sin experiencia en desarrollo. Te permite crear cursos y cuestionarios para ser alojados en el entorno de nube integrado y as√≠ poder monitorear los resultados. Tambi√©n es posible subir los cursos a un sitio web o LMS.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lN4LO_DI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1zz5yq3n5ex0qa4ay6j5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lN4LO_DI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1zz5yq3n5ex0qa4ay6j5.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;M√°s adecuada para&lt;/strong&gt;&lt;br&gt;
Aquellos buscando una herramienta en l√≠nea para crear f√°cilmente cursos compatibles con dispositivos m√≥viles usando funciones de arrastrar y soltar como su principal requerimiento.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-adapt"&gt;
  &lt;/a&gt;
  8. Adapt
&lt;/h2&gt;

&lt;p&gt;Clasificaci√≥n: No tiene calificaciones&lt;br&gt;
Plataforma: SaaS&lt;br&gt;
Precio: Gratis&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5bjHGJ-C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m5psbycxnq523brovh0p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5bjHGJ-C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m5psbycxnq523brovh0p.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.adaptlearning.org/"&gt;Adapt&lt;/a&gt; es una herramienta HTML de c√≥digo abierto que est√° dise√±ada para permitirte crear un producto de aprendizaje que se adapta a m√∫ltiples dispositivos a trav√©s de su sitio Learning Pool Adapt Builder. As√≠ es como funciona. Introduces un tema haciendo clic en el bloque y despu√©s navegas hacia abajo en la p√°gina, trabajando en tu contenido, abriendo y cerrando pesta√±as en forma de acorde√≥n, secuencias narrativas, im√°genes con puntos de acceso, y otras herramientas interactivas.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KvjY7bBN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/41giuppwxjy76h16u0tj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KvjY7bBN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/41giuppwxjy76h16u0tj.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;M√°s adecuada para&lt;/strong&gt;&lt;br&gt;
Aquellos buscando una herramienta de autor de HTML5 flexible y gratuita y que no les importe adaptarse a los requerimientos de instalaci√≥n y ser autosuficientes.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#para-resumir"&gt;
  &lt;/a&gt;
  Para resumir
&lt;/h2&gt;

&lt;p&gt;Cualquiera de estas herramientas de autor te permitir√° crear cursos, pero ahora deber√≠as tener una idea m√°s clara sobre cu√°l herramienta es la mejor para tu situaci√≥n particular y el tipo de contenido que deseas crear. &lt;/p&gt;

&lt;p&gt;¬øUtilizas algunas de estas herramientas de autor de e-learning? Nos encantar√≠a saber m√°s de tus experiencias, buenas o malas, en los comentarios.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.ispring.es/blog/mejores-herramientas-de-autor-de-elearning-para-usar"&gt;Original source&lt;/a&gt;&lt;/p&gt;

</description>
      <category>elearning</category>
    </item>
    <item>
      <title>Grokking Traversable</title>
      <author>Matt Thornton</author>
      <pubDate>Fri, 23 Apr 2021 11:14:02 +0000</pubDate>
      <link>https://dev.to/choc13/grokking-traversable-bla</link>
      <guid>https://dev.to/choc13/grokking-traversable-bla</guid>
      <description>&lt;p&gt;Once you've grokked traversable's you'll wonder how you ever lived without them. Trying to gain intuition about them by staring at the type signature never brought me much joy. So in this post we'll take a different approach and invent them ourselves by solving a real problem. This will help us get to that "aha" moment where we finally understand how they work and when to use them.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-scenario"&gt;
  &lt;/a&gt;
  The scenario
&lt;/h1&gt;

&lt;p&gt;Imagine we're working for an e-commerce site where we sell one-time offers, such that when all the stock is sold we never have anymore. When a user places an order we must check the stock levels. If there is availability we temporarily reserve the amount they requested before letting them proceed to the checkout.&lt;/p&gt;

&lt;p&gt;Our specific task is to write a &lt;code&gt;createCheckout&lt;/code&gt; function that will take a &lt;code&gt;Basket&lt;/code&gt; and try to reserve the items in it. If they can be successfully reserved it will create a &lt;code&gt;Checkout&lt;/code&gt; which includes the total price of the items along with other metadata we might need to take the payment.&lt;/p&gt;

&lt;p&gt;Our domain model looks something like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;BasketItem&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; 
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nc"&gt;ItemId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;ItemId&lt;/span&gt;
      &lt;span class="nc"&gt;Quantity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;Basket&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; 
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nc"&gt;Id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;BasketId&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
      &lt;span class="nc"&gt;Items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;BasketItem&lt;/span&gt; &lt;span class="kt"&gt;list&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;ReservedBasketItem&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nc"&gt;ItemId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;ItemId&lt;/span&gt;
      &lt;span class="nc"&gt;Price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;Checkout&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; 
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nc"&gt;Id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;CheckoutId&lt;/span&gt;
      &lt;span class="nc"&gt;BasketId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;BasketId&lt;/span&gt;
      &lt;span class="nc"&gt;Price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;createCheckout&lt;/code&gt; function will return &lt;code&gt;Checkout option&lt;/code&gt;. It will return &lt;code&gt;Some&lt;/code&gt; if all of the items are available and &lt;code&gt;None&lt;/code&gt; if any of them aren't. &lt;em&gt;A better implementation would return &lt;code&gt;Result&lt;/code&gt; and detail the specific errors, but we'll use &lt;code&gt;option&lt;/code&gt; to keep the example simple.&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;createCheckout&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;basket&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Basket&lt;/span&gt;&lt;span class="o"&gt;):&lt;/span&gt; &lt;span class="nc"&gt;Checkout&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Fortunately for us, someone else has already written a function which can reserve a &lt;code&gt;BasketItem&lt;/code&gt; if it is in stock, which looks like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;reserveBasketItem&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;BasketItem&lt;/span&gt;&lt;span class="o"&gt;):&lt;/span&gt; &lt;span class="nc"&gt;ReservedBasketItem&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Again, this will return &lt;code&gt;None&lt;/code&gt; if there are not enough items in stock.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#our-first-implementation"&gt;
  &lt;/a&gt;
  Our first implementation
&lt;/h1&gt;

&lt;p&gt;So it seems that all we need to do is write a function that calls &lt;code&gt;reserveBasketItem&lt;/code&gt; for each item in the basket. If they all succeed then it calculates the total price in order to create the &lt;code&gt;Checkout&lt;/code&gt;. Let's try it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;createCheckout&lt;/span&gt; &lt;span class="n"&gt;basket&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;reservedItems&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="n"&gt;basket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Items&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;List&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="n"&gt;reserveBasketItem&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;totalPrice&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="n"&gt;reservedItems&lt;/span&gt;
        &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;List&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sumBy&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Price&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nc"&gt;Id&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;CheckoutId&lt;/span&gt; &lt;span class="s2"&gt;"some-checkout-id"&lt;/span&gt;
      &lt;span class="nc"&gt;BasketId&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;basket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Id&lt;/span&gt;
      &lt;span class="nc"&gt;Price&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;totalPrice&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we're just mapping over the items in the basket to reserve each one and then summing their individual prices to get the total basket price. Seems straight forward, except that's not going to compile, because it's not quite right.&lt;/p&gt;

&lt;p&gt;The problem is that &lt;code&gt;reservedItems&lt;/code&gt; has the type &lt;code&gt;list&amp;lt;option&amp;lt;ReservedBasketItem&amp;gt;&amp;gt;&lt;/code&gt; but we need it to be &lt;code&gt;option&amp;lt;list&amp;lt;ReservedBasketItem&amp;gt;&amp;gt;&lt;/code&gt;, where it is &lt;code&gt;None&lt;/code&gt; if any one of the reservations fail. That way we'd only be able to calculate the total price and create the &lt;code&gt;Checkout&lt;/code&gt; if all of the items are available. Let's imagine we've written such a function called &lt;code&gt;reserveItems&lt;/code&gt; that does return this type instead and updated &lt;code&gt;createCheckout&lt;/code&gt; to use it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;reserveItems&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;BasketItem&lt;/span&gt; &lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="o"&gt;):&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ReservedBasketItem&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;createCheckout&lt;/span&gt; &lt;span class="n"&gt;basket&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;reservedItems&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;basket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Items&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;reserveItems&lt;/span&gt;

    &lt;span class="n"&gt;reservedItems&lt;/span&gt;
    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Option&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nc"&gt;Id&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;CheckoutId&lt;/span&gt; &lt;span class="s2"&gt;"some-checkout-id"&lt;/span&gt;
              &lt;span class="nc"&gt;BasketId&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;basket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Id&lt;/span&gt;
              &lt;span class="nc"&gt;Price&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;List&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sumBy&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Price&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's better! Now if the items are all reserved and &lt;code&gt;reservedItems&lt;/code&gt; returns &lt;code&gt;Some&lt;/code&gt; then we can access the list of &lt;code&gt;ReservedBasketItem&lt;/code&gt; and use them to create the &lt;code&gt;Checkout&lt;/code&gt;. If any of the items can't be reserved then &lt;code&gt;reservedItems&lt;/code&gt; returns &lt;code&gt;None&lt;/code&gt; and the &lt;code&gt;Option.map&lt;/code&gt; just short circuits meaning &lt;code&gt;createCheckout&lt;/code&gt; will also return &lt;code&gt;None&lt;/code&gt;, as we wanted.&lt;/p&gt;

&lt;p&gt;So we've reduced the task to implementing &lt;code&gt;reserveItems&lt;/code&gt;. We've already seen that we can't just call &lt;code&gt;List.map reserveBasketItem&lt;/code&gt; because that gives us a &lt;code&gt;list&amp;lt;option&amp;lt;ReservedBasketItem&amp;gt;&amp;gt;&lt;/code&gt; and so the &lt;code&gt;list&lt;/code&gt; and the &lt;code&gt;option&lt;/code&gt; are the wrong way around. We need a way to invert them.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#an-invertor"&gt;
  &lt;/a&gt;
  An invertor üôÉ
&lt;/h1&gt;

&lt;p&gt;Let's invent a function called &lt;code&gt;invert&lt;/code&gt; that converts &lt;code&gt;list&amp;lt;option&amp;lt;ReservedBasketItem&amp;gt;&amp;gt;&lt;/code&gt; into &lt;code&gt;option&amp;lt;list&amp;lt;ReservedBasketItem&amp;gt;&amp;gt;&lt;/code&gt;. If we can do that then we can implement &lt;code&gt;reserveItems&lt;/code&gt; like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;invert&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reservedItems&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;option&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ReservedBasketItem&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ReservedBasketItem&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;reserveItems&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;BasketItem&lt;/span&gt; &lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ReservedBasketItem&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;items&lt;/span&gt; 
    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;List&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="n"&gt;reserveBasketItem&lt;/span&gt; 
    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;invert&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In order to implement &lt;code&gt;invert&lt;/code&gt; let's start off by pattern matching on the list.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;invert&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reservedItems&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;option&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ReservedBasketItem&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ReservedBasketItem&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;reservedItems&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;// do something when the list isn't empty&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="bp"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;// do something when the list is empty&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So we've got two cases to deal with, when the list has at least one item and when the list is empty. Let's start with the base case because it's trivial. If the list is empty then it doesn't contain any failures, so we should just return &lt;code&gt;Some []&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;In the non empty case then we've got to do something with &lt;code&gt;head&lt;/code&gt; which is a &lt;code&gt;ReservedBaskedItem option&lt;/code&gt; and &lt;code&gt;tail&lt;/code&gt; which is a &lt;code&gt;list&amp;lt;option&amp;lt;ReservedBasketItem&amp;gt;&amp;gt;&lt;/code&gt;. Well we know that our goal is to turn &lt;code&gt;list&amp;lt;option&amp;lt;ReservedBasketItem&amp;gt;&amp;gt;&lt;/code&gt; into &lt;code&gt;option&amp;lt;list&amp;lt;ReservedBaskedItem&amp;gt;&amp;gt;&lt;/code&gt;, so we can just recursively call &lt;code&gt;invert&lt;/code&gt; on the &lt;code&gt;tail&lt;/code&gt; to do this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;rec&lt;/span&gt; &lt;span class="n"&gt;invert&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reservedItems&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;option&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ReservedBasketItem&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ReservedBasketItem&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;reservedItems&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; 
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;invertedTail&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;invert&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt;
        &lt;span class="c1"&gt;// Need to recombine the head and the inverted tail&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="bp"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt; &lt;span class="bp"&gt;[]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we just need a way to combine a &lt;code&gt;ReservedBasketItem option&lt;/code&gt; with a &lt;code&gt;option&amp;lt;list&amp;lt;ReservedBasketItem&amp;gt;&amp;gt;&lt;/code&gt;. If neither of these were wrapped in an &lt;code&gt;option&lt;/code&gt; then we would just "cons" them using the &lt;code&gt;::&lt;/code&gt; operator, so let's write a &lt;code&gt;consOptions&lt;/code&gt; function which does this but for &lt;code&gt;option&lt;/code&gt; arguments.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;consOptions&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;):&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; 
    &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; 
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="p"&gt;_&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Nothing too complicated going on here. Simply check if both the &lt;code&gt;head&lt;/code&gt; and &lt;code&gt;tail&lt;/code&gt; are &lt;code&gt;Some&lt;/code&gt; and if so cons them with &lt;code&gt;::&lt;/code&gt; operator and wrap that in a &lt;code&gt;Some&lt;/code&gt;. Otherwise if either one is &lt;code&gt;None&lt;/code&gt; then return &lt;code&gt;None&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Putting it all together we can finally implement &lt;code&gt;invert&lt;/code&gt; like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;rec&lt;/span&gt; &lt;span class="n"&gt;invert&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reservedItems&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;option&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;reservedItems&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;consOptions&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;invert&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="bp"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt; &lt;span class="bp"&gt;[]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We've also been able to make it completely generic on the type inside the list as it doesn't depend on &lt;code&gt;ReservedBasketItem&lt;/code&gt; in any way.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#an-applicative-clean-up"&gt;
  &lt;/a&gt;
  An Applicative clean up üßΩ
&lt;/h1&gt;

&lt;p&gt;If you're familiar with applicatives, perhaps because you've followed this series and read &lt;a href="https://dev.to/choc13/grokking-applicative-validation-lh6"&gt;Grokking Applicatives&lt;/a&gt; then you might have spotted that &lt;code&gt;consOptions&lt;/code&gt; looks sort of like a specialised version of &lt;code&gt;apply&lt;/code&gt;. What &lt;code&gt;consOptions&lt;/code&gt; is trying to do is take some values that are wrapped in &lt;code&gt;options&lt;/code&gt; and apply them to a function, in this case cons. &lt;/p&gt;

&lt;p&gt;Let's make use of &lt;code&gt;apply&lt;/code&gt; and clean up &lt;code&gt;invert&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;rec&lt;/span&gt; &lt;span class="n"&gt;invert&lt;/span&gt; &lt;span class="kt"&gt;list&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="c1"&gt;// An alias for :: so we can pass it as a function below&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;cons&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt;

    &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="kt"&gt;list&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt; &lt;span class="n"&gt;cons&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;apply&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;apply&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sequence&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="bp"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt; &lt;span class="bp"&gt;[]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In fact, a proper &lt;code&gt;Applicative&lt;/code&gt; instance should also have a &lt;code&gt;pure&lt;/code&gt; function. All &lt;code&gt;pure&lt;/code&gt; does is create a default value for the &lt;code&gt;Applicative&lt;/code&gt;. In the case of &lt;code&gt;option&lt;/code&gt; &lt;code&gt;pure&lt;/code&gt; is just &lt;code&gt;Some&lt;/code&gt;. Let's use &lt;code&gt;pure&lt;/code&gt; to replace the &lt;code&gt;Some&lt;/code&gt; uses.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;rec&lt;/span&gt; &lt;span class="n"&gt;invert&lt;/span&gt; &lt;span class="kt"&gt;list&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;cons&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt;

    &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="kt"&gt;list&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;pure&lt;/span&gt; &lt;span class="n"&gt;cons&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;apply&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;apply&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;invert&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="bp"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;pure&lt;/span&gt; &lt;span class="bp"&gt;[]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This might not seem like much of a change, but what we've done is eliminate all direct dependencies on &lt;code&gt;option&lt;/code&gt;. In theory this could work with any applicative, such as &lt;code&gt;Result&lt;/code&gt; or &lt;code&gt;Validation&lt;/code&gt; and what it would do is go from &lt;code&gt;list&amp;lt;Applicative&amp;lt;_&amp;gt;&amp;gt;&lt;/code&gt; to &lt;code&gt;Applicative&amp;lt;list&amp;lt;_&amp;gt;&amp;gt;&lt;/code&gt;. In practice however F# doesn't &lt;em&gt;quite&lt;/em&gt; allow such an abstraction and so we have to create a version of &lt;code&gt;invert&lt;/code&gt; for each applicative type we want to use it with. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;You can technically get around this with &lt;a href="https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/generics/statically-resolved-type-parameters"&gt;statically resolved type parameters&lt;/a&gt;. I would recommend checking out &lt;a href="https://fsprojects.github.io/FSharpPlus/"&gt;FSharpPlus&lt;/a&gt; if you want this abstraction rather than rolling it yourself though.&lt;/em&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#you-just-discovered-raw-sequence-endraw-"&gt;
  &lt;/a&gt;
  You just discovered &lt;code&gt;sequence&lt;/code&gt; üëè
&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;invert&lt;/code&gt; is usually called &lt;code&gt;sequence&lt;/code&gt; and it's one of the functions that a &lt;code&gt;Traversable&lt;/code&gt; type gives us. As we can see &lt;code&gt;sequence&lt;/code&gt; takes a collection of wrapped values like an &lt;code&gt;option&lt;/code&gt; and turns it into wrapped collection instead. You can think of &lt;code&gt;sequence&lt;/code&gt; as flipping the two types over.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sequence&lt;/code&gt; works for all sorts of other type combinations too. For example you can take a &lt;code&gt;list&amp;lt;Result&amp;lt;'a&amp;gt;&amp;gt;&lt;/code&gt; and flip it into a &lt;code&gt;Result&amp;lt;list&amp;lt;'a&amp;gt;&amp;gt;&lt;/code&gt;. You can even use it with different collection types and some that don't even seem like typical collections, for instance you could go from &lt;code&gt;Result&amp;lt;option&amp;lt;'a&amp;gt;, 'e&amp;gt;&lt;/code&gt; to &lt;code&gt;option&amp;lt;Result&amp;lt;'a, 'e&amp;gt;&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#test-yourself-on-raw-sequence-endraw-"&gt;
  &lt;/a&gt;
  Test yourself on &lt;code&gt;sequence&lt;/code&gt; üßë‚Äçüè´
&lt;/h1&gt;

&lt;p&gt;See if you can implement &lt;code&gt;sequence&lt;/code&gt; for &lt;code&gt;list&amp;lt;Result&amp;lt;_&amp;gt;&amp;gt;&lt;/code&gt; to &lt;code&gt;Result&amp;lt;list&amp;lt;_&amp;gt;&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;
  Solution
  &lt;br&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nc"&gt;Result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;apply&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
        &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Ok&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Ok&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Ok&lt;/span&gt;
        &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Error&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Ok&lt;/span&gt; &lt;span class="p"&gt;_&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Error&lt;/span&gt;
        &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Ok&lt;/span&gt; &lt;span class="o"&gt;_,&lt;/span&gt; &lt;span class="nc"&gt;Error&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Error&lt;/span&gt;
        &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Error&lt;/span&gt; &lt;span class="n"&gt;e1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Error&lt;/span&gt; &lt;span class="p"&gt;_&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;e1&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Error&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;pure&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Ok&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;rec&lt;/span&gt; &lt;span class="n"&gt;sequence&lt;/span&gt; &lt;span class="kt"&gt;list&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;cons&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt;

    &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="kt"&gt;list&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pure&lt;/span&gt; &lt;span class="n"&gt;cons&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apply&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apply&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sequence&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="bp"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pure&lt;/span&gt; &lt;span class="bp"&gt;[]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;That's right, it's exactly the same as for the &lt;code&gt;list&amp;lt;option&amp;lt;_&amp;gt;&amp;gt;&lt;/code&gt; providing we use the applicative &lt;code&gt;Result.apply&lt;/code&gt; and &lt;code&gt;Result.pure&lt;/code&gt; functions for &lt;code&gt;Result&lt;/code&gt;. I've included their definitions too in a &lt;code&gt;Result&lt;/code&gt; module above.&lt;/p&gt;



&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#theres-still-more-land-to-discover-%F0%9F%8F%9E"&gt;
  &lt;/a&gt;
  There's still more land to discover üèû
&lt;/h1&gt;

&lt;p&gt;Let's go back to our original program and see how it looks with our new &lt;code&gt;sequence&lt;/code&gt; discovery.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;createCheckout&lt;/span&gt; &lt;span class="n"&gt;basket&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;reservedItems&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; 
        &lt;span class="n"&gt;basket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Items&lt;/span&gt; 
        &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;List&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="n"&gt;reserveBasketItem&lt;/span&gt; 
        &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sequence&lt;/span&gt;

    &lt;span class="n"&gt;reservedItems&lt;/span&gt;
    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Option&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nc"&gt;Id&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;CheckoutId&lt;/span&gt; &lt;span class="s2"&gt;"some-checkout-id"&lt;/span&gt;
              &lt;span class="nc"&gt;BasketId&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;basket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Id&lt;/span&gt;
              &lt;span class="nc"&gt;Price&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Seq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sumBy&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Price&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's pretty good, but we have to make two passes over the &lt;code&gt;basket.Items&lt;/code&gt; when creating &lt;code&gt;reservedItems&lt;/code&gt;. In the first pass we try and reserve each item and then in the second pass we combine all of those reservations together to determine whether the whole operation succeed or not. It would be nice if we could do that in one go.&lt;/p&gt;

&lt;p&gt;Let's see if we can do it all within &lt;code&gt;sequence&lt;/code&gt;. That means that we'll need to pass the &lt;code&gt;reserveBasketItem&lt;/code&gt; function to &lt;code&gt;sequence&lt;/code&gt; and we'll end up with the following signature.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;sequence&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="o"&gt;):&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So we start with a list and we want to apply the function &lt;code&gt;f&lt;/code&gt; to each element of it. Although, rather than just mapping over the list and returning &lt;code&gt;list&amp;lt;option&amp;lt;'b&amp;gt;&amp;gt;&lt;/code&gt; we want to accumulate all of the &lt;code&gt;option&lt;/code&gt; values into a single &lt;code&gt;option&amp;lt;list&amp;lt;'b&amp;gt;&amp;gt;&lt;/code&gt; where it is &lt;code&gt;None&lt;/code&gt; if for any element &lt;code&gt;f&lt;/code&gt; produces a &lt;code&gt;None&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;rec&lt;/span&gt; &lt;span class="n"&gt;sequence&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="kt"&gt;list&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;cons&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt;

    &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="kt"&gt;list&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt; &lt;span class="n"&gt;cons&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;apply&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;apply&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sequence&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="bp"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt; &lt;span class="bp"&gt;[]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is basically the same as before, except now we just apply &lt;code&gt;f&lt;/code&gt; to &lt;code&gt;head&lt;/code&gt; and pass it into the recursive call in order to also transform the &lt;code&gt;tail&lt;/code&gt; elements. All we've done is combine the operation that generates the &lt;code&gt;option&lt;/code&gt; values with the act of combining them together into a single &lt;code&gt;option&lt;/code&gt; of the list.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#you-just-discovered-raw-traverse-endraw-"&gt;
  &lt;/a&gt;
  You just discovered &lt;code&gt;traverse&lt;/code&gt; üôå
&lt;/h1&gt;

&lt;p&gt;It turns out we typically call the function &lt;code&gt;traverse&lt;/code&gt; when we combine both the sequencing and the mapping at the same time. So a &lt;code&gt;Traversable&lt;/code&gt; actually has two functions associated with it called &lt;code&gt;sequence&lt;/code&gt; and &lt;code&gt;traverse&lt;/code&gt;. In fact, &lt;code&gt;sequence&lt;/code&gt; is just a special case of &lt;code&gt;traverse&lt;/code&gt; where we supply the identity function, &lt;code&gt;id&lt;/code&gt;, for &lt;code&gt;f&lt;/code&gt;. So we could actually write it like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;sequence&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;traverse&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With &lt;code&gt;traverse&lt;/code&gt; in place we can finally finish off our task and write &lt;code&gt;checkoutBasket&lt;/code&gt; nicely like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;createCheckout&lt;/span&gt; &lt;span class="n"&gt;basket&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;basket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Items&lt;/span&gt; 
    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;traverse&lt;/span&gt; &lt;span class="n"&gt;reserveBasketItem&lt;/span&gt;
    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Option&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nc"&gt;Id&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;CheckoutId&lt;/span&gt; &lt;span class="s2"&gt;"some-checkout-id"&lt;/span&gt;
              &lt;span class="nc"&gt;BasketId&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;basket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Id&lt;/span&gt;
              &lt;span class="nc"&gt;Price&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Seq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sumBy&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Price&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#test-yourself-on-raw-traverse-endraw-"&gt;
  &lt;/a&gt;
  Test yourself on &lt;code&gt;traverse&lt;/code&gt; üßë‚Äçüè´
&lt;/h1&gt;

&lt;p&gt;See if you can implement &lt;code&gt;traverse&lt;/code&gt; when the input is &lt;code&gt;option&amp;lt;'a&amp;gt;&lt;/code&gt; and the function is &lt;code&gt;'a -&amp;gt; Result&amp;lt;'b, 'c&amp;gt;&lt;/code&gt;,  so that it returns a &lt;code&gt;Result&amp;lt;option&amp;lt;'b&amp;gt;, 'c&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;
  Solution
  &lt;br&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nc"&gt;Result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;apply&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
        &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Ok&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Ok&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Ok&lt;/span&gt;
        &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Error&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Ok&lt;/span&gt; &lt;span class="p"&gt;_&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Error&lt;/span&gt;
        &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Ok&lt;/span&gt; &lt;span class="o"&gt;_,&lt;/span&gt; &lt;span class="nc"&gt;Error&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Error&lt;/span&gt;
        &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Error&lt;/span&gt; &lt;span class="n"&gt;e1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Error&lt;/span&gt; &lt;span class="p"&gt;_&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;e1&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Error&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;pure&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Ok&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;traverse&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;opt&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;opt&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pure&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apply&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pure&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Here I've included the definitions of &lt;code&gt;apply&lt;/code&gt; and &lt;code&gt;pure&lt;/code&gt; for &lt;code&gt;Result&lt;/code&gt; and then implemented &lt;code&gt;traverse&lt;/code&gt; using those. Hopefully this makes it clearer which parts of the traverse operation relate to the outer &lt;code&gt;option&lt;/code&gt; type and which ones relate to the inner &lt;code&gt;Result&lt;/code&gt; type.&lt;/p&gt;

&lt;p&gt;One concrete use case for this transformation might be if we're trying to write a parser. The parser function might say parse &lt;code&gt;string&lt;/code&gt; into &lt;code&gt;Result&amp;lt;int, ParseError&amp;gt;&lt;/code&gt; but we have to hand a &lt;code&gt;string option&lt;/code&gt;. Of course we could pattern match on the &lt;code&gt;option&lt;/code&gt; ourselves and then only run the parser in the &lt;code&gt;Some&lt;/code&gt; case, but we could also write &lt;code&gt;myOptionalValue |&amp;gt; traverse parseInt&lt;/code&gt;.&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;Another interesting case is when we're dealing with a regular function, say &lt;code&gt;string&lt;/code&gt; which just converts the argument to a string. See if you can figure out what traverse should look like in this case. Specifically, if we want to write &lt;code&gt;[1; 2; 3] |&amp;gt; traverse string&lt;/code&gt; and have it output &lt;code&gt;["1"; "2"; "3"]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;
  Solution
  &lt;br&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nc"&gt;Identity&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; 
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;apply&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;pure&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;rec&lt;/span&gt; &lt;span class="n"&gt;traverse&lt;/span&gt; &lt;span class="kt"&gt;list&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;cons&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt;

    &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="kt"&gt;list&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Identity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pure&lt;/span&gt; &lt;span class="n"&gt;cons&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Identity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apply&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Identity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apply&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;traverse&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="bp"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Identity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pure&lt;/span&gt; &lt;span class="bp"&gt;[]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;I've written this in the same style as the others by extracting an &lt;code&gt;Identity&lt;/code&gt; functor/applicative. &lt;code&gt;Identity&lt;/code&gt; is actually the degenerate case for an applicative because all &lt;code&gt;apply&lt;/code&gt; does is call the function with the argument and all &lt;code&gt;pure&lt;/code&gt; does is return the function unaltered. So there is no wrapping going on like with the other applicatives. This is interesting though because &lt;code&gt;traverse&lt;/code&gt; now has the type &lt;code&gt;list&amp;lt;'a&amp;gt; -&amp;gt; ('a -&amp;gt; 'b) -&amp;gt; list&amp;lt;'b&amp;gt;&lt;/code&gt;, which you might recognise from &lt;a href="https://dev.to/choc13/grokking-functors-bla"&gt;Grokking Functors&lt;/a&gt; as &lt;code&gt;map&lt;/code&gt;. So &lt;code&gt;map&lt;/code&gt; is actually a special case of &lt;code&gt;traverse&lt;/code&gt; when the inner type is just the &lt;code&gt;Identity&lt;/code&gt; applicative.&lt;/p&gt;



&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#spotting-raw-traversable-endraw-in-the-wild"&gt;
  &lt;/a&gt;
  Spotting &lt;code&gt;Traversable&lt;/code&gt; in the wild üêæ
&lt;/h1&gt;

&lt;p&gt;Whenever you've got some collection of values wrapped in something like &lt;code&gt;option&lt;/code&gt; or &lt;code&gt;Result&lt;/code&gt; and what you actually need is an &lt;code&gt;option&amp;lt;list&amp;lt;'a&amp;gt;&amp;gt;&lt;/code&gt; or &lt;code&gt;Result&amp;lt;list&amp;lt;'a&amp;gt;, 'e&amp;gt;&lt;/code&gt; etc then &lt;code&gt;sequence&lt;/code&gt; is probably what you need to use. Similarly, if you have to run a computation over a collection that produces wrapped values then you can use &lt;code&gt;traverse&lt;/code&gt; and combine the mapping and flipping into one operation. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#warning-two-types-of-error-handling-ahead"&gt;
  &lt;/a&gt;
  Warning, two types of error handling ahead ‚ö†Ô∏è
&lt;/h1&gt;

&lt;p&gt;When we're sequencing a &lt;code&gt;list&amp;lt;option&amp;lt;_&amp;gt;&amp;gt;&lt;/code&gt; we only need to know that at least one of the elements is &lt;code&gt;None&lt;/code&gt; in order to return &lt;code&gt;None&lt;/code&gt;. However, when working with something like &lt;code&gt;list&amp;lt;Result&amp;lt;'a, 'e&amp;gt;&amp;gt;&lt;/code&gt; then we might actually care about gathering up all of the errors. As we pointed out in &lt;a href="https://dev.to/choc13/grokking-applicative-validation-lh6"&gt;Grokking Applicative Validation&lt;/a&gt; there can be applicative instances that either short circuit on the first error or accumulate all errors. The same applies here with &lt;code&gt;Traversable&lt;/code&gt;. Let's quickly run some experiments in the F# REPL with FSharpPlus to see how it handles things.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nc"&gt;Ok&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nc"&gt;Error&lt;/span&gt; &lt;span class="s2"&gt;"first error"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nc"&gt;Error&lt;/span&gt; &lt;span class="s2"&gt;"second error"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sequence&lt;/span&gt;&lt;span class="p"&gt;;;&lt;/span&gt;
&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Result&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Error&lt;/span&gt; &lt;span class="s2"&gt;"first error"&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nc"&gt;Success&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nc"&gt;Failure&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"first error"&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt; &lt;span class="nc"&gt;Failure&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"second error"&lt;/span&gt;&lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sequence&lt;/span&gt;&lt;span class="p"&gt;;;&lt;/span&gt;
&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Validation&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
  &lt;span class="nc"&gt;Failure&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"first error"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="s2"&gt;"second error"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the first case, when using &lt;code&gt;Result&lt;/code&gt; we see that it just returns the first error it encounters, while with &lt;code&gt;Validation&lt;/code&gt; it actually accumulates all the errors for us.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-did-we-learn"&gt;
  &lt;/a&gt;
  What did we learn üßë‚Äçüéì
&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;Traversable&lt;/code&gt; is more powerful version of &lt;code&gt;map&lt;/code&gt; that is particularly useful when we have a computation that either needs to be run (or has already been run) over a list of values and we want to treat it as a failure if any single one fails. We can also grok it by realising that it flips the two outer types over. We use &lt;code&gt;traverse&lt;/code&gt; when we still need to run the computation and &lt;code&gt;sequence&lt;/code&gt; when we've been given the list of computation results instead.&lt;/p&gt;

</description>
      <category>fsharp</category>
      <category>functional</category>
      <category>programming</category>
      <category>grokking</category>
    </item>
    <item>
      <title>Manage your Finances üí∞with this notion template</title>
      <author>Sarthak Sharma</author>
      <pubDate>Fri, 23 Apr 2021 11:05:58 +0000</pubDate>
      <link>https://dev.to/xenoxdev/manage-your-finances-with-this-notion-template-22k5</link>
      <guid>https://dev.to/xenoxdev/manage-your-finances-with-this-notion-template-22k5</guid>
      <description>&lt;p&gt;Hey folks üëãüèº.&lt;br&gt;
Just launched another Product on the Product hunt. It's a template that helps you manage your financesüí∏ &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#finance-manager-template"&gt;
  &lt;/a&gt;
  Finance Manager Template
&lt;/h3&gt;

&lt;p&gt;When we think about Finances, what comes to our mind are the earnings and the spendings. We aim to maximize our earnings and minimize irrational spending. But, to effectively change our spending pattern, we need to track it first. With this Finance Tracking template, you‚Äôll not only be able to keep track of exactly where each penny has been spent but also how much percentage of total funds it makes up for. &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Z6l84MgTZH0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Let‚Äôs take a look at this wonderous template that will change your spending habits for the better and make your savings skyrocket. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#expenses"&gt;
  &lt;/a&gt;
  Expenses
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eDNoCYnb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/badnk911nf9dvi75rv58.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eDNoCYnb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/badnk911nf9dvi75rv58.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Expenses are broken down into the following-&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Essentials&lt;/strong&gt; -The spending that can‚Äôt be skipped - eg. Utility bills, taxes, etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Debt and interest payments&lt;/strong&gt;- Noting down any change in the interest rates and calculating the monthly spending accordingly by making use of inbuilt - formulas&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Discretionary spending&lt;/strong&gt; For services that save your money in the long term but require payment upfront for eg. Amazon Prime, etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Subscriptions&lt;/strong&gt; Ongoing and canceled and finally - savings.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#income-distribution"&gt;
  &lt;/a&gt;
  Income distribution
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tprIhsnO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xe2o6l8nlt3i585cwl9p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tprIhsnO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xe2o6l8nlt3i585cwl9p.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
There‚Äôs a column for the Income distribution that gives you a birds-eye view so that you can manage and cut down or reallocate funds where priority is the greatest.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#keep-your-coupons-handy"&gt;
  &lt;/a&gt;
  Keep your coupons handy
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UkD6RGX_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1uo7kupml8krv1n6thu2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UkD6RGX_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1uo7kupml8krv1n6thu2.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
You can keep track of your coupons in a separate column so that you don‚Äôt forget about them and use them in your next payment and save some money. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#organize-your-receipts"&gt;
  &lt;/a&gt;
  Organize your receipts
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gmMczTqR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g4201ec7alb2u481hnfw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gmMczTqR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g4201ec7alb2u481hnfw.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Finally, you are also provided with a receipt section so that you can manage and keep your invoices which will later help you during your tax returns.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#views"&gt;
  &lt;/a&gt;
  Views
&lt;/h3&gt;

&lt;p&gt;You can choose a view of your choice so that you can keep track of your expenses and understand how and when they're taking place, by viewing your expense list in a view of your choice.&lt;/p&gt;

&lt;p&gt;All the lists and trackers in this template are available in - table, board, timeline, list, calendar, and gallery view. Now, you can choose to set lists or assign your expenses to boxes until you find the perfect match between aesthetic and function.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#want-one"&gt;
  &lt;/a&gt;
  Want One?
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/lqwL9uLaYrE6mYQrd3/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/lqwL9uLaYrE6mYQrd3/giphy.gif" alt=""&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;&lt;em&gt;Here is your link&lt;/em&gt;&lt;/strong&gt; üëâ &lt;a href="https://prototion.com/notion-for/finance-tracker"&gt;&lt;strong&gt;&lt;em&gt;Finance Tracker&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We are on Producthunt today. Please show some love here‚ù§&lt;br&gt;
&lt;a href="https://www.producthunt.com/posts/notion-finance-tracker"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j5G03bZ4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aq5sok4vy4xc1qb0oi01.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Thanks again ü§ü&lt;/p&gt;

</description>
    </item>
  </channel>
</rss>
