<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>HeatSat</title>
      <author>yvesnrb</author>
      <pubDate>Thu, 13 Jan 2022 20:58:29 +0000</pubDate>
      <link>https://dev.to/yvesnrb/heatsat-1nhm</link>
      <guid>https://dev.to/yvesnrb/heatsat-1nhm</guid>
      <description>&lt;h2&gt;
  &lt;a href="#heatsat"&gt;
  &lt;/a&gt;
  HEATSAT
&lt;/h2&gt;

&lt;p&gt;Checkout the application live here: &lt;a href="https://heatsat.vercel.app/"&gt;HEATSAT&lt;/a&gt;. The site is not ready for mobile yet, so please try to view it on a desktop.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#overview-of-my-submission"&gt;
  &lt;/a&gt;
  Overview of My Submission
&lt;/h3&gt;

&lt;p&gt;My submission is a web application that scrapes and parses heat satellite data from &lt;a href="https://queimadas.dgi.inpe.br/queimadas/dados-abertos/#"&gt;INPE&lt;/a&gt; and stores it in a time series database per region. A region can be any GeoJSON delimited block of land. Once a heat reading has been assigned to a region, it can be visualized on a map. You may also query a region to see how many heat readings it had this month, as well as if that is an increase from last month.&lt;/p&gt;

&lt;p&gt;New data comes in every 10 minutes - 24/7 and the application ingests about 200 to 300 heat readings each day! The MongoDB time series database feature was crucial in ensuring all of this data is queried quickly by timeframe and by region. This is because data is stored efficiently by region and by timestamp. You can learn more about time series databases &lt;a href="https://www.youtube.com/watch?v=xu2AkGVI37E"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here are a few feature demo gifs:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#browse-heat-data-on-a-map"&gt;
  &lt;/a&gt;
  Browse heat data on a map.
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5rhfWylf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ez60bk8dwrhp02eygbru.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5rhfWylf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ez60bk8dwrhp02eygbru.gif" alt="Brose heat data demo" width="880" height="528"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#list-regions"&gt;
  &lt;/a&gt;
  List regions.
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l0mQQuO9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n53x92bajp8c2vvhmg99.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l0mQQuO9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n53x92bajp8c2vvhmg99.gif" alt="List regions demo" width="880" height="528"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#view-a-region-on-a-map-as-well-as-its-stats"&gt;
  &lt;/a&gt;
  View a region on a map, as well as its stats.
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cmqJ-3Ka--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/slf4jgy0u5i8qnj8ef96.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cmqJ-3Ka--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/slf4jgy0u5i8qnj8ef96.gif" alt="View region demo" width="880" height="526"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h3&gt;

&lt;p&gt;This project is under the Prime Time category.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#link-to-code"&gt;
  &lt;/a&gt;
  Link to Code
&lt;/h3&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/yvesnrb"&gt;
        yvesnrb
      &lt;/a&gt; / &lt;a href="https://github.com/yvesnrb/heatsat"&gt;
        heatsat
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Track wildfire satellite data in South America. Atlas + Dev.to Hackaton 2021 project.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
HeatSat&lt;/h1&gt;
&lt;p&gt;More information soon.&lt;/p&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/yvesnrb/heatsat"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


&lt;h3&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h3&gt;

&lt;p&gt;Special thanks to:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://queimadas.dgi.inpe.br/queimadas/dados-abertos/#"&gt;INPE&lt;/a&gt;&lt;br&gt;
&lt;a href="https://tailwindcss.com/"&gt;TailwindCSS&lt;/a&gt;&lt;br&gt;
&lt;a href="https://nextjs.org/"&gt;NextJS&lt;/a&gt;&lt;br&gt;
&lt;a href="https://turfjs.org/"&gt;TurfJS&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/JustFly1984/react-google-maps-api"&gt;@react-google-maps/api&lt;/a&gt;&lt;/p&gt;

</description>
      <category>atlashackathon</category>
    </item>
    <item>
      <title>React Native- Responsive UI(2022)</title>
      <author>Karam Jammal</author>
      <pubDate>Thu, 13 Jan 2022 20:37:26 +0000</pubDate>
      <link>https://dev.to/kjatsx/react-native-responsive-ui2022-30ea</link>
      <guid>https://dev.to/kjatsx/react-native-responsive-ui2022-30ea</guid>
      <description>&lt;p&gt;After you've built the UI and functionality of your app and tested it on various devices, you'll notice that something is wrong or missing with the layouts you expected. This is a common developer issue that must be addressed from the start of the development process. &lt;/p&gt;

&lt;p&gt;In this article we will tackle the responsiveness issues that every developer face in mobile development and specifically in react native. This is part of a library feature that will be made soon as solution.&lt;/p&gt;

&lt;p&gt;You can also check the new theming library:&lt;br&gt;
&lt;a href="https://dev.to/kjatsx/react-native-theming-made-easy2022-479c"&gt;https://dev.to/kjatsx/react-native-theming-made-easy2022-479c&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#responsive-problems"&gt;
  &lt;/a&gt;
  Responsive Problems:
&lt;/h2&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Layouts:&lt;/strong&gt; &lt;em&gt;Making sure layouts are stable and adaptable in all screen sizes can be done with the following:&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Flex-box&lt;/em&gt;: Is designed to keep the proportions and consistency of the layout on different screen sizes. &lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Percentage&lt;/em&gt;: Using percentage for &lt;em&gt;width&lt;/em&gt; and &lt;em&gt;height&lt;/em&gt; will keep layouts responsive relative to their parent elements.&lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Aspect Ratio&lt;/em&gt;: If you know only one dimension of your element (&lt;em&gt;width&lt;/em&gt; or &lt;em&gt;height&lt;/em&gt;), this is where the Aspect Ratio comes into play, it helps keep proportions of your elements under control by keeping the second dimension in relation to the one you already know.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Images:&lt;/strong&gt; &lt;em&gt;Making sure images are stable and adaptable  in all screen sizes can be done with the following:&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Percentage&lt;/em&gt;: Images size can be scaled based on their parent container &lt;em&gt;height&lt;/em&gt; and &lt;em&gt;width&lt;/em&gt; with a percentage value.&lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;ImageArray&lt;/em&gt;: A very nice feature of react native Image component is that you can pass an array of sourceImage objects. This array of objects includes source, width, and height. The component will use the size of the container to pick the image from the list that is the best match.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;FontSize:&lt;/strong&gt; &lt;em&gt;Making sure fonts are stable and adaptable in all screen sizes can be done with the following:&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Screen window fontScale&lt;/em&gt;: Using the ratio of the screen size, fonts in the app can be scaled accordingly.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#responsive-solution"&gt;
  &lt;/a&gt;
  Responsive Solution:
&lt;/h2&gt;




&lt;blockquote&gt;
&lt;p&gt;The Power of &lt;strong&gt;mediaQuery&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Media query techniques allow different presentation and content to be served depending on the output device, helping ensure that your mobile app renders optimally on all devices and platforms.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#how-does-this-help-in-react-native-"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;How does this help in React Native ?&lt;/em&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Layouts&lt;/strong&gt; - &lt;em&gt;can be changed/scaled dynamically based on devices size.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;FontSize&lt;/strong&gt; - &lt;em&gt;can be scaled dynamically and differently based on devices size.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Images&lt;/strong&gt; - &lt;em&gt;can be scaled dynamically and differently based on devices size.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Portrait &amp;amp; Landscape&lt;/strong&gt; - &lt;em&gt;orientation changes style dynamically for Portrait &amp;amp; Landscape mode.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#what-dose-the-library-bring-"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;What dose the library bring ?&lt;/em&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;StyleSheet&lt;/strong&gt; &lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;This time you have an extra prop called mediaQuery where you can specify all your queries there.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;MediaQuery Types&lt;/strong&gt;:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;1) min_w_&lt;strong&gt;value&lt;/strong&gt; - &lt;em&gt;apply these styles in min width &lt;strong&gt;value&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;2) min_h_&lt;strong&gt;value&lt;/strong&gt; - &lt;em&gt;apply these styles in min height &lt;strong&gt;value&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;3) max_w_&lt;strong&gt;value&lt;/strong&gt; - &lt;em&gt;apply these styles in max width &lt;strong&gt;value&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;4) max_h_&lt;strong&gt;value&lt;/strong&gt; - &lt;em&gt;apply these styles in max height &lt;strong&gt;value&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;5) Bw_&lt;strong&gt;value1&lt;/strong&gt; _ &lt;strong&gt;value2&lt;/strong&gt; - &lt;em&gt;apply these styles when width between &lt;strong&gt;value1&lt;/strong&gt; and &lt;strong&gt;value2&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;6) Bh_&lt;strong&gt;value1&lt;/strong&gt; _ &lt;strong&gt;value2&lt;/strong&gt; - &lt;em&gt;apply these styles when height between &lt;strong&gt;value1&lt;/strong&gt; and &lt;strong&gt;value2&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;7) Pm - &lt;em&gt;apply these styles when device in portrait mode.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;8) Lm - &lt;em&gt;apply these styles when device in landscape mode.&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Dynamic styles&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;This means that whenever the phone is flipped and changes orientation the mediaQuery will apply the new styles automatically.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#how-things-will-look-like"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;How things will look like:&lt;/em&gt;&lt;/strong&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="c1"&gt;// Responsive Styles &lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;StyleSheet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;R&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;responsive-csx&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Components &lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;View&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-native&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;DemoComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;View&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CONTAINER&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Text&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;R&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;TEXT&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;I&lt;/span&gt; &lt;span class="nx"&gt;responsive&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Text&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Image&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;R&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;IMAGE&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt; &lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./assets/profile&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;

  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/View&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;


&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;StyleSheet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;CONTAINER&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="na"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="na"&gt;backgroundColor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;white&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="na"&gt;alignItems&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;center&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="na"&gt;justifyContent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;center&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="p"&gt;},&lt;/span&gt;
   &lt;span class="na"&gt;TEXT&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="na"&gt;fontWeight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bold&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="na"&gt;fontSize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;green&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="na"&gt;mediaQuery&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;
       &lt;span class="na"&gt;min_w_500&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;
        &lt;span class="na"&gt;fontSize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="p"&gt;}&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="p"&gt;},&lt;/span&gt;
   &lt;span class="na"&gt;IMAGE&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;
    &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;250&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;250&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="na"&gt;mediaQuery&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;
       &lt;span class="na"&gt;min_w_500&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;
        &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;120&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;120&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="p"&gt;}&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;This library is currently in &lt;strong&gt;progress&lt;/strong&gt; and will be available in few weeks. Anyone who wishes to contribute for the library, get in touch! &lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>reactnative</category>
      <category>responsive</category>
      <category>ui</category>
      <category>react</category>
    </item>
    <item>
      <title>How do i connect Ionic/Angular Admin(or any user role) panel(UI) to firestore to write collections.</title>
      <author>Whizfactor</author>
      <pubDate>Thu, 13 Jan 2022 19:11:24 +0000</pubDate>
      <link>https://dev.to/whizfactor/how-to-connect-ionicangularhtml-adminor-any-user-role-paneldashboard-ui-to-firestore-to-write-collections-1b0o</link>
      <guid>https://dev.to/whizfactor/how-to-connect-ionicangularhtml-adminor-any-user-role-paneldashboard-ui-to-firestore-to-write-collections-1b0o</guid>
      <description>&lt;p&gt;Guys please need help. Building an Angular-Ionic Eccommerce App, and i need to use a backend for data storage and user management etc. &lt;br&gt;
But i have some issues, i dont know to connect an admin panel/dashboard to firestore, django(python) makes that part very easy, but firestore has some cool features and its more closer to Angular than Django especially with AngularFire.&lt;/p&gt;

&lt;p&gt;Need help with how connecting a dashboard/admin-panel or any other panel/dashboard for other user roles can be done. Any help as soon as possible will save my day. Thanks and Happy New Year tho the year is few days old😂&lt;/p&gt;

</description>
      <category>firebase</category>
      <category>angular</category>
      <category>ionic</category>
    </item>
    <item>
      <title>Do you want to know *exactly* what a PM does?</title>
      <author>Davide Mauri</author>
      <pubDate>Thu, 13 Jan 2022 19:05:24 +0000</pubDate>
      <link>https://dev.to/azure/do-you-want-to-know-exactly-what-a-pm-does-37nn</link>
      <guid>https://dev.to/azure/do-you-want-to-know-exactly-what-a-pm-does-37nn</guid>
      <description>&lt;p&gt;Well, look no further, you have found the article with the final answer (at least to me).&lt;/p&gt;

&lt;p&gt;What's the role of a Program Manager in an enterprise like Microsoft? We get this question &lt;em&gt;many&lt;/em&gt; times. Luckly a friend of mine, &lt;a href="https://twitter.com/SQLAllFather"&gt;Matthew Roche&lt;/a&gt;, recorded a video where he explains in detail, and IMHO in the best way possible, what a PM &lt;em&gt;is&lt;/em&gt; and &lt;em&gt;does&lt;/em&gt; in Microsoft.&lt;/p&gt;

&lt;p&gt;So, if you are interested in learning more about the role, as you know we're always looking for talented people, you're probably interested in the website I built during the latest winter vacations.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HYfY8fS6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9400scui879thkpcvmv9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HYfY8fS6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9400scui879thkpcvmv9.png" alt="Website Screenshot" width="880" height="425"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I took the transcript of the recording and made it more accessible and easier to be discovered and consumed, so that everyone, e-v-e-r-y-o-n-e, can enjoy Matthew's work.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aka.ms/being-a-ms-pm"&gt;https://aka.ms/being-a-ms-pm&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enjoy (and share! :))&lt;/p&gt;

&lt;p&gt;PS&lt;br&gt;
In the meantime, I also enjoyed doing everything in a modern way, using GitHub as the source repo and GitHub Actions with Azure Static Web Apps to make it extremely easy to update the website. And I encourage you to help to make the site better if you find something you think can be improved. (And I'm sure there are a lot of things that can be improved...from the quality of the transcript to some better JavaScript effects or nicer look and feel)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/yorek/ms-pm"&gt;https://github.com/yorek/ms-pm&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>azure</category>
      <category>career</category>
      <category>management</category>
    </item>
    <item>
      <title>Listen to the DevNews Podcast Season 7 Premiere 🎤</title>
      <author>dev.to staff</author>
      <pubDate>Thu, 13 Jan 2022 19:00:21 +0000</pubDate>
      <link>https://dev.to/devteam/listen-to-the-devnews-podcast-season-7-premiere-l91</link>
      <guid>https://dev.to/devteam/listen-to-the-devnews-podcast-season-7-premiere-l91</guid>
      <description>&lt;p&gt;The DevNews podcast is back for a brand new season. Catch it right here or wherever you get your favorite podcasts&lt;/p&gt;


&lt;div class="podcastliquidtag"&gt;
  &lt;div class="podcastliquidtag__info"&gt;
    &lt;a href="/devnews/s7-e1-the-pudgy-penguins-nft-debacle-a-dev-intentionally-breaks-his-own-open-source-libraries-and-gen-z-s-distaste-for-green-text-bubbles"&gt;
      &lt;h1 class="podcastliquidtag__info__episodetitle"&gt;S7:E1 - The Pudgy Penguins NFT Debacle, a Dev Intentionally Breaks His Own Open Source Libraries, and Gen Z’s Distaste for Green Text Bubbles&lt;/h1&gt;
    &lt;/a&gt;
    &lt;a href="/devnews"&gt;
      &lt;h2 class="podcastliquidtag__info__podcasttitle"&gt;
        DevNews
      &lt;/h2&gt;
    &lt;/a&gt;
  &lt;/div&gt;
  &lt;div id="record-s7-e1-the-pudgy-penguins-nft-debacle-a-dev-intentionally-breaks-his-own-open-source-libraries-and-gen-z-s-distaste-for-green-text-bubbles" class="podcastliquidtag__record"&gt;
    &lt;img class="button play-butt" id="play-butt-s7-e1-the-pudgy-penguins-nft-debacle-a-dev-intentionally-breaks-his-own-open-source-libraries-and-gen-z-s-distaste-for-green-text-bubbles" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png" alt="play"&gt;
    &lt;img class="button pause-butt" id="pause-butt-s7-e1-the-pudgy-penguins-nft-debacle-a-dev-intentionally-breaks-his-own-open-source-libraries-and-gen-z-s-distaste-for-green-text-bubbles" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png" alt="pause"&gt;
    &lt;img class="podcastliquidtag__podcastimage" id="podcastimage-s7-e1-the-pudgy-penguins-nft-debacle-a-dev-intentionally-breaks-his-own-open-source-libraries-and-gen-z-s-distaste-for-green-text-bubbles" alt="DevNews" src="https://res.cloudinary.com/practicaldev/image/fetch/s--jJPvwj98--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--XOSCOlKI--/c_fill%2Cf_auto%2Cfl_progressive%2Cq_auto/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/346/5b0bd095-4a8c-4449-a43d-9e9b154b9d09.png"&gt;
  &lt;/div&gt;

  &lt;div class="hidden-audio" id="hidden-audio-s7-e1-the-pudgy-penguins-nft-debacle-a-dev-intentionally-breaks-his-own-open-source-libraries-and-gen-z-s-distaste-for-green-text-bubbles"&gt;
  
    
    Your browser does not support the audio element.
  
  &lt;div id="progressBar" class="audio-player-display"&gt;
    &lt;a href="/devnews/s7-e1-the-pudgy-penguins-nft-debacle-a-dev-intentionally-breaks-his-own-open-source-libraries-and-gen-z-s-distaste-for-green-text-bubbles"&gt;
      &lt;img id="episode-profile-image" alt="S7:E1 - The Pudgy Penguins NFT Debacle, a Dev Intentionally Breaks His Own Open Source Libraries, and Gen Z’s Distaste for Green Text Bubbles" width="420" height="420" src="https://res.cloudinary.com/practicaldev/image/fetch/s--84VpOv6S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--3GWkSFQs--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_420/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/346/5b0bd095-4a8c-4449-a43d-9e9b154b9d09.png"&gt;
      &lt;img id="animated-bars" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZzrPEFmt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev.to/assets/animated-bars-4e8c57c8b58285fcf7d123680ad8af034cd5cd43b4d9209fe3aab49d1e9d77b3.gif" alt="animated volume bars"&gt;
    &lt;/a&gt;
    &lt;span id="barPlayPause"&gt;
      &lt;img class="butt play-butt" alt="play" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png"&gt;
      &lt;img class="butt pause-butt" alt="pause" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png"&gt;
    &lt;/span&gt;
    &lt;span id="volume"&gt;
      &lt;span id="volumeindicator" class="volume-icon-wrapper showing"&gt;
        &lt;span id="volbutt"&gt;
          &lt;img alt="volume" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--vTou7JP3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-cd20707230ae3fc117b02de53c72af742cf7d666007e16e12f7ac11ebd8130a7.png"&gt;
        &lt;/span&gt;
        &lt;span class="range-wrapper"&gt;
          
        &lt;/span&gt;
      &lt;/span&gt;
      &lt;span id="mutebutt" class="volume-icon-wrapper hidden"&gt;
        &lt;img alt="volume-mute" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--OX5NjT0t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-mute-8f08ec668105565af8f8394eb18ab63acb386adbe0703afe3748eca8f2ecbf3b.png"&gt;
      &lt;/span&gt;
      &lt;span class="speed" id="speed"&gt;1x&lt;/span&gt;
    &lt;/span&gt;
    &lt;span class="buffer-wrapper" id="bufferwrapper"&gt;
      &lt;span id="buffer"&gt;&lt;/span&gt;
      &lt;span id="progress"&gt;&lt;/span&gt;
      &lt;span id="time"&gt;initializing...&lt;/span&gt;
      &lt;span id="closebutt"&gt;×&lt;/span&gt;
    &lt;/span&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;


&lt;p&gt;&lt;em&gt;As a refresher, DevNews is the news show for developers by developers. Each season, our hosts cover the latest in the world of tech, and speak with diverse guests from a variety of backgrounds to dig deep into meaty topics such as security, the pros and cons of outsourcing your authentication, and the latest bugs and hacks.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hosts:&lt;/strong&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a class="mentioned-user" href="https://dev.to/saronyitbarek"&gt;@saronyitbarek&lt;/a&gt; is the founder of Disco, founder of &lt;a href="https://community.codenewbie.org"&gt;CodeNewbie&lt;/a&gt; host of the &lt;a href="https://dev.to/codenewbie"&gt;CodeNewbie Podcast&lt;/a&gt;, and co-host of the &lt;a href="https://dev.to/basecspodcast"&gt;base.cs podcast&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a class="mentioned-user" href="https://dev.to/joshpuetz"&gt;@joshpuetz&lt;/a&gt; is the Principal Software Engineer at &lt;a href="https://forem.com"&gt;Forem&lt;/a&gt; — the open source community software that powers DEV, CodeNewbie and a growing number of other online communities.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Guest:&lt;/strong&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://twitter.com/mackabiecapital"&gt;Dr. Merav Ozair&lt;/a&gt; is a leading blockchain expert, a FinTech Professor, and the Editor-in-Chief of the World Scientific Series in FinTech. Her work focuses on decentralized finance (DeFi), non-fungible tokens (NFTs), decentralized autonomous organizations (DAOs) and the Metaverse, across different industries and business use cases. She is a member of the Academic Advisory Board at INATBA (International Association for Trusted Blockchain Applications) and holds a PhD from Stern Business School at NYU.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this episode, we talk about a developer who broke around 19-thousand projects by intentionally corrupting his own open source libraries, and how iMessage won in the smartphone battle for favor amongst Gen Z. Then we speak with Dr. Merav Ozair, Leading Blockchain expert and FinTech Professor at Rutgers Business School, about NFTs and the turbulent removal of the founders of the Pudgy Penguins project.&lt;/p&gt;




&lt;p&gt;&lt;em&gt;You can &lt;a href="//dev.to/devnews"&gt;follow DevNews&lt;/a&gt; to get episode notifications and listen right in your feed&lt;/em&gt; &lt;em&gt;— or subscribe on your platform of choice! Plus, if you leave us a review, we'll send you a free pack of thank-you stickers. Details &lt;a href="https://airtable.com/shr8oKAIMZgdYnBxx"&gt;here&lt;/a&gt;.&lt;/em&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quick-listening-links"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Quick Listening Links&lt;/strong&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://podcasts.apple.com/us/podcast/s7-e1-the-pudgy-penguins-nft-debacle-a/id1525581923?i=1000547762058"&gt;Apple Podcasts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://open.spotify.com/episode/78jRVgcG9PCZOicdPLipOh"&gt;Spotify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://podcasts.google.com/feed/aHR0cDovL2ZlZWRzLmNvZGVuZXdiaWUub3JnL2Rldm5ld3NfcG9kY2FzdC54bWw/episode/aHR0cHM6Ly9kZXZwb2RzLmRldi9wb2RjYXN0cy9kZXZuZXdzLzQ5?sa=X&amp;amp;ved=0CAQQkfYCahcKEwj4hK-KtK_1AhUAAAAAHQAAAAAQCg"&gt;Google&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.stitcher.com/show/devnews/episode/s7-e1-the-pudgy-penguins-nft-debacle-a-dev-intentionally-breaks-his-own-open-source-libraries-and-gen-zs-distaste-for-green-text-bubbles-89666831"&gt;Stitcher&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.listennotes.com/podcasts/devnews/s7e1-the-pudgy-penguins-nft-o9HuI_r2qgG/"&gt;Listen Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tunein.com/podcasts/Technology-Podcasts/DevNews-p1352512/?topicId=169004712"&gt;TuneIn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://feeds.codenewbie.org/devnews_podcast.xml"&gt;RSS Feed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devpods.herokuapp.com/podcasts/devnews/episodes/242"&gt;DEV Pods website&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#acknowledgements"&gt;
  &lt;/a&gt;
  &lt;em&gt;Acknowledgements&lt;/em&gt;
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;&lt;a class="mentioned-user" href="https://dev.to/levisharpe"&gt;@levisharpe&lt;/a&gt; for producing &amp;amp; mixing the show&lt;/em&gt; &lt;/li&gt;
&lt;li&gt;Our Season 7 Sponsor: &lt;a href="https://scoutapm.com/?utm_campaign=ad_q2_2021&amp;amp;utm_content=sponsored&amp;amp;utm_medium=podcast&amp;amp;utm_source=devnews"&gt;Scout APM&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We hope you enjoy this kickoff to a new season of DevNews 📰 &lt;/p&gt;

</description>
      <category>news</category>
      <category>podcast</category>
      <category>devnews</category>
    </item>
    <item>
      <title>Top 10 Most Useful VSCode Extensions for Web Developers</title>
      <author>Remi W.</author>
      <pubDate>Thu, 13 Jan 2022 18:59:15 +0000</pubDate>
      <link>https://dev.to/ixartz/top-10-most-useful-vscode-extensions-for-web-developers-1414</link>
      <guid>https://dev.to/ixartz/top-10-most-useful-vscode-extensions-for-web-developers-1414</guid>
      <description>&lt;p&gt;VSCode is the most widely used text editor because of its ecosystem of &lt;strong&gt;extensions&lt;/strong&gt;. Extensions in VSCode can make your text editor go from just being a text editor to serving as an IDE.&lt;/p&gt;

&lt;p&gt;These extensions help you in productivity, efficiency, and consistency. They provide unique features which can help you work faster with technologies like Next JS, React JS, Vue, Node JS, JavasScript.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code-runner"&gt;
  &lt;/a&gt;
  Code Runner
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.code-runner"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Iw43q8FZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/code-runner-vscode.png" alt="Code runner JavaScript VSCode" width="774" height="200"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.code-runner"&gt;Code runner&lt;/a&gt; can easily runs your code and produces the results in your VSCode Output (terminal window). This extension can run codes from over 41 popular languages including JavaScript, Python, and Rust.&lt;/p&gt;

&lt;p&gt;It can run all codes in a file as well as run a selected code. For example, you can select a function and run that function only. This can be very useful for debugging.&lt;/p&gt;

&lt;p&gt;When running a selected code, you should make sure that the selected code doesn't depend on an unselected code as this can lead to an error.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#github-pull-requests"&gt;
  &lt;/a&gt;
  GitHub Pull Requests
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-pull-request-github"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_VNetqTL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/github-pull-request-issues-vscode.png" alt="GitHub Pull Requests VSCode" width="774" height="158"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-pull-request-github"&gt;GitHub Pull Request extension&lt;/a&gt; helps you review and manage your GitHub pull requests and issues directly inside VSCode.&lt;/p&gt;

&lt;p&gt;With it, you can easily list issues and pull requests from GitHub. You can comment on issues, start working on issues, review and validate pull requests and so much more.&lt;/p&gt;

&lt;p&gt;No need to open GitHub's website to manage pull requests or resolve issues anymore, all can be done right in VSCode.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rest-client"&gt;
  &lt;/a&gt;
  REST Client
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=humao.rest-client"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g6iTjZl2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/rest-client-api-vscode.png" alt="REST Client API VSCode" width="774" height="158"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=humao.rest-client"&gt;REST Client&lt;/a&gt; allows you to make and manage HTTP requests and view the response directly in your editor.&lt;/p&gt;

&lt;p&gt;With this extension, you can easily organize similar HTTP requests (GET, POST, DELETE, PUT, etc), a cool feature for working with APIs. Response from your requests can be easily saved to your local disk.&lt;/p&gt;

&lt;p&gt;It also supports GraphQL as well as authentication. It is a great replacement for Postman, Insomnia, RapidAPI and it works right in VSCode, so no need to navigate between two apps.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#eslint"&gt;
  &lt;/a&gt;
  ESLint
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--thYRSIWO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/eslint-linter-vscode.png" alt="ESLint code linter VSCode" width="774" height="158"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint"&gt;ESLint&lt;/a&gt; is a popular JavaScript open-source library by OpenJS foundation. You can now integrate into VSCode with this extension. It detects errors and either automatically fixes them or provides options for manually fixing them.&lt;/p&gt;

&lt;p&gt;These errors are generated from syntax errors or violations of the style guide. Style guides are provided by different companies including Airbnb and Google.&lt;/p&gt;

&lt;p&gt;ESLint is easy to set up because of its documentation and it's also very customizable. It helps you customize your style guides and be consistent with them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prettier"&gt;
  &lt;/a&gt;
  Prettier
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wceBYDwi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/prettier-code-formatter-vscode.png" alt="Prettier code formatter" width="774" height="158"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Oftentimes the format of our code can quickly be messed up: we wrongly indent our JavaScript code, we write beyond 80 characters per line, and so on. All these can make our code look really ugly and hard to read, which means hard to maintain.&lt;/p&gt;

&lt;p&gt;But, this is where &lt;a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode"&gt;Prettier&lt;/a&gt; comes in, it formats our code to look good and readable. This formatting includes rightly indenting our code, breaking the code down if too long, being consistent with adding semicolons or not and so much more.&lt;/p&gt;

&lt;p&gt;You can easily set up a style guide for prettier right in VSCode. ESLint and Prettier can perfectly work together to help give your team a JavaScript style guide to be consistent with, very useful for maintainability.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tailwindcss"&gt;
  &lt;/a&gt;
  TailwindCSS
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=bradlc.vscode-tailwindcss"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yFD9saVG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/tailwind-css-vscode.png" alt="Tailwind CSS VSCode" width="774" height="158"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=bradlc.vscode-tailwindcss"&gt;TailwindCSS&lt;/a&gt; is an open-source extension that gives you interesting features for maximum productivity when using Tailwind CSS.&lt;/p&gt;

&lt;p&gt;As we know Tailwind is mostly about classes, this extension gives you a fast autocomplete of all class names in TailwindCSS. With this extension, you can view the style for a particular class name by hovering over it.&lt;/p&gt;

&lt;p&gt;Tailwind CSS also provides linting for errors in the stylesheet or markup. So if you wrongly use a class name it will let you know. Cool right?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#gitlens"&gt;
  &lt;/a&gt;
  GitLens
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CAQyFJ2S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/gitlens-git-vscode.png" alt="GitLens Git VSCode" width="774" height="200"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens"&gt;GitLens&lt;/a&gt; supercharges the Git capabilities built into VSCode. It gives you details of any git changes, author, and time of the changes at a glance.&lt;/p&gt;

&lt;p&gt;That means while coding you can see details of git changes by the side of the code. On hover, it provides you more git info and actions about that line of code.&lt;/p&gt;

&lt;p&gt;These actions include staging changes, committing changes, pushing commits, and much more. You really wouldn't need the Git CLI with this extension. Also, you can easily navigate and revise git history (backward and forwards) of any file.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#indent-rainbow"&gt;
  &lt;/a&gt;
  Indent Rainbow
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=oderwat.indent-rainbow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k_IEdS6---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/indent-rainbow-vscode.png" alt="Indent Rainbow VSCode" width="774" height="158"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=oderwat.indent-rainbow"&gt;Indent Rainbow&lt;/a&gt; colorizes the indentations before your code. This is very useful for languages like JavaScript and Python. With each level having different colors you can easily tell what level of indentation you are.&lt;/p&gt;

&lt;p&gt;This extension is customizable so you can easily change the colors for each level, and you can also extend it to have more colors beyond four.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dotenv"&gt;
  &lt;/a&gt;
  DotENV
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=mikestead.dotenv"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--spw9eVHM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/dotenv-vscode.png" alt="DotENV VSCode" width="774" height="158"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=mikestead.dotenv"&gt;DotENV extension&lt;/a&gt; highlights your &lt;code&gt;.env&lt;/code&gt; files to look good and easy to understand. As a Node developer, this will be very useful when setting up your environment variables in a &lt;code&gt;.env&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;This extension provides different colors for comments (it enables comments), strings, numbers, properties, keywords, and much more. This used to be all white in VSCode, but this extension changes that. It basically makes your &lt;code&gt;.env&lt;/code&gt; files look like another language file with syntax highlighting.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#vscodeicons"&gt;
  &lt;/a&gt;
  VSCode-Icons
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=vscode-icons-team.vscode-icons"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HPdVuEOz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/vscode-icons.png" alt="VSCode Icons" width="774" height="158"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=vscode-icons-team.vscode-icons"&gt;VSCode-Icons&lt;/a&gt; provides interactive and good-looking file/folder icons based on the name of the folder/file or based on the extension of the file.&lt;/p&gt;

&lt;p&gt;With different types of folders or files having different icons you can seamlessly navigate through your project without having to read the name of the folder or file all the time. And this entails easier and faster navigation, while making your editor's file list good-looking and approachable.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;As a ReactJS developer, an extension like ESLint, coupled with Error Lens, can help you see and fix warnings and errors. This saves time and keeps your coding going. Not just React, but JavaScript at large. Be sure each of these extensions will be of great help to you and your team of developers to code in the simplest and cleanest possible way without wasting unnecessary time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/ixartz"&gt;Follow me on my twitter&lt;/a&gt; and be notified when I'll update this list. I'll share more extensions!&lt;/p&gt;

&lt;p&gt;The perfect starter kit to launch your SaaS faster and better. Focus on your business, products and customers instead of losing your time to implement basic functionalities like authentication, Stripe subscription, prebuilt landing page, prebuilt dashboard page, form and error handling, CRUD operation, layered architecture, deployment, server maintenance, etc.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://nextlessjs.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c1qKLlCI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/nextless-react-saas-boilerplate.png" alt="Next JS SaaS Boilerplate Starter" width="720" height="482"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>vscode</category>
      <category>webdev</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Git Organized: A Better Git Flow</title>
      <author>Annie Sexton</author>
      <pubDate>Thu, 13 Jan 2022 18:58:36 +0000</pubDate>
      <link>https://dev.to/render/git-organized-a-better-git-flow-56go</link>
      <guid>https://dev.to/render/git-organized-a-better-git-flow-56go</guid>
      <description>&lt;p&gt;Imagine this: you've been paged to investigate a production incident, and after some digging, you identify the commit with the breaking code. You decide to revert the change:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git revert 1a2b3c
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Unfortunately, in doing so, a new bug is introduced! As it turns out, hidden in that old "broken" commit was some code that another part of the app depended upon, and when you reverted those lines, it left the site once again in a broken state. 🙃 Oh dear.&lt;/p&gt;

&lt;p&gt;How can situations like this be avoided? To answer this question, we first need to examine how these types of commits come to be.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-common-git-flow"&gt;
  &lt;/a&gt;
  A Common Git Flow
&lt;/h2&gt;

&lt;p&gt;Let's take a look at a common git flow when building a new feature:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a new branch off of &lt;code&gt;main&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Create commits as you go to save your work and fix bugs you find along the way.&lt;/li&gt;
&lt;li&gt;When the feature is complete, make a pull request.&lt;/li&gt;
&lt;li&gt;Merge branch into &lt;code&gt;main&lt;/code&gt; once PR is approved.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This flow might feel quite familiar to you, and that's fine. It's how many of us were taught to work with git. However, &lt;strong&gt;there are two problems with this approach.&lt;/strong&gt; The first problem we've already discussed is that some commits may contain incomplete work when you simply commit as you go. This makes reverting quite risky.&lt;/p&gt;

&lt;p&gt;The second problem is that &lt;strong&gt;it can make reviewing pull requests very tedious.&lt;/strong&gt; For example, what if you've been asked to review a recent PR in which the author states that, on top of adding a new feature, they fixed an unrelated bug as well. The PR consists of changes across &lt;em&gt;dozens&lt;/em&gt; of files. Looking at each commit individually does not illuminate which changes pertain to the bug fix and which are for the new feature. Additionally, you notice some changes that seem &lt;em&gt;unrelated to anything in the description of the PR&lt;/em&gt;. Clearly, this will not be a quick review.&lt;/p&gt;

&lt;p&gt;Now, as lovely as it would be for each commit to neatly relate to only &lt;em&gt;one&lt;/em&gt; change, that's a tall order to fill when you're in the midst of development. Tangents and rewrites are just part of the process. Our work is rarely so linear, and our git commits tend to reflect this.&lt;/p&gt;

&lt;p&gt;So how can we guarantee that our git history is tidy and easily reviewable while also accepting the somewhat tangential nature of development? By modifying this basic git flow just slightly, we can create a better process that accomplishes just this.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#an-improved-git-flow"&gt;
  &lt;/a&gt;
  An Improved Git Flow
&lt;/h2&gt;

&lt;p&gt;The following approach was inspired by my coworker, Dan Wendorf, whose git flow tends to revolve around one core principle: &lt;strong&gt;do the work first, clean up the commits later.&lt;/strong&gt; The benefit of this flow is that it separates the &lt;em&gt;engineering&lt;/em&gt;  &lt;em&gt;work&lt;/em&gt; from the &lt;em&gt;commit writing&lt;/em&gt;. In the end, we'll be left with a sequence of commits that are &lt;em&gt;logically grouped&lt;/em&gt;, each relating to one main change in the code, thus cleaning up our git history and paving the way for a quicker PR review.&lt;/p&gt;

&lt;p&gt;We can break it down into three steps, as follows.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-make-your-changes"&gt;
  &lt;/a&gt;
  Step 1: Make your changes
&lt;/h3&gt;

&lt;p&gt;The first step isn't too different than before. Start by creating a new branch and getting to work on making your changes. Don't worry too much about writing descriptive commit messages just yet, as these won't be included in your final PR. For now a simple, "work in progress" or "WIP" message will do, or something that will help you remember what was in that commit like "WIP: Started building new model". The purpose of these commits are to make sure you don't lose work and provide some general guideposts along the path of that work.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git checkout &lt;span class="nt"&gt;-b&lt;/span&gt; my-feature-branch

...make changes...

&lt;span class="nv"&gt;$ &lt;/span&gt;git commit &lt;span class="nt"&gt;-m&lt;/span&gt;&lt;span class="s2"&gt;"WIP"&lt;/span&gt;

...make more changes...

&lt;span class="nv"&gt;$ &lt;/span&gt;git commit &lt;span class="nt"&gt;-m&lt;/span&gt;&lt;span class="s2"&gt;"WIP"&lt;/span&gt;

...make even more changes...

&lt;span class="nv"&gt;$ &lt;/span&gt;git commit &lt;span class="nt"&gt;-m&lt;/span&gt;&lt;span class="s2"&gt;"WIP"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this step, it's &lt;em&gt;okay&lt;/em&gt; to leave the codebase in a broken state or to commit half-baked features. This will all get cleaned up later.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2-reset"&gt;
  &lt;/a&gt;
  Step 2: Reset
&lt;/h3&gt;

&lt;p&gt;Once you've finished making your changes, it's time to prepare your work for some "git clean up." To do this, we'll run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git reset origin/main
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Without any extra arguments, &lt;code&gt;git reset&lt;/code&gt; won't change the working tree, so your code won't change — all the work you've done will still be there. But because you've reset to an &lt;em&gt;older&lt;/em&gt; commit, &lt;code&gt;git status&lt;/code&gt; will show all the changes you've made since you started building your feature. It will look like you did all the work but never made any of those "WIP" commits earlier.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git reset origin/main
Unstaged changes after reset:
M       src/components/Footer/Footer.tsx
M       src/components/Nav/Nav.css
M       src/components/Nav/Nav.tsx
M       src/components/Posts/Post.tsx
M       src/components/Posts/PostList.tsx

&lt;span class="nv"&gt;$ &lt;/span&gt;git status
On branch feature-branch
Your branch is behind &lt;span class="s1"&gt;'origin/feature-branch'&lt;/span&gt; by 3 commits, and can be fast-forwarded.
  &lt;span class="o"&gt;(&lt;/span&gt;use &lt;span class="s2"&gt;"git pull"&lt;/span&gt; to update your &lt;span class="nb"&gt;local &lt;/span&gt;branch&lt;span class="o"&gt;)&lt;/span&gt;

Changes not staged &lt;span class="k"&gt;for &lt;/span&gt;commit:
  &lt;span class="o"&gt;(&lt;/span&gt;use &lt;span class="s2"&gt;"git add &amp;lt;file&amp;gt;..."&lt;/span&gt; to update what will be committed&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;(&lt;/span&gt;use &lt;span class="s2"&gt;"git restore &amp;lt;file&amp;gt;..."&lt;/span&gt; to discard changes &lt;span class="k"&gt;in &lt;/span&gt;working directory&lt;span class="o"&gt;)&lt;/span&gt;
        modified:   src/components/Footer/Footer.tsx
        modified:   src/components/Nav/Nav.css
        modified:   src/components/Nav/Nav.tsx
        modified:   src/components/Posts/Post.tsx
        modified:   src/components/Posts/PostList.tsx
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;In case you get in over your head here, don't worry&lt;/strong&gt; — you can always bring back your original commits! Every commit you make lives in your &lt;code&gt;.git&lt;/code&gt; folder, even after a &lt;code&gt;reset&lt;/code&gt;. Even though it might seem like they've disappeared, they're still there, hiding.&lt;/p&gt;

&lt;p&gt;If you want to go back to a commit where things weren't broken, &lt;code&gt;git reflog&lt;/code&gt; will show you a timeline of every commit you've referenced in your local repository, even across branches. Run &lt;code&gt;git reflog&lt;/code&gt; to find the commit you want to return to and then run &lt;code&gt;git reset &amp;lt;commit-sha&amp;gt;&lt;/code&gt;. This command will point the HEAD of your current branch to that commit, and you're back in business!&lt;/p&gt;

&lt;p&gt;From here, we're ready to start making our &lt;em&gt;new&lt;/em&gt; commits.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-3-create-new-logicallygrouped-commits"&gt;
  &lt;/a&gt;
  Step 3: Create new, logically-grouped commits
&lt;/h3&gt;

&lt;p&gt;Now, take a look at all the files you've changed. Are there any that you can logically group? For example, all the dependency updates or changes related to a particular model. There's no "right" way to group files, so use your best judgment here. Add these files to your staging area, and make a commit describing the changes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git add src/components/Nav/Nav.css
&lt;span class="nv"&gt;$ &lt;/span&gt;git add src/components/Nav/Nav.tsx
&lt;span class="nv"&gt;$ &lt;/span&gt;git commit &lt;span class="nt"&gt;-m&lt;/span&gt;&lt;span class="s2"&gt;"Added new styles to navigation"&lt;/span&gt;

&lt;span class="nv"&gt;$ &lt;/span&gt;git add src/components/Posts/Post.tsx
&lt;span class="nv"&gt;$ &lt;/span&gt;git add src/components/Posts/PostList.tsx
&lt;span class="nv"&gt;$ &lt;/span&gt;git commit &lt;span class="nt"&gt;-m&lt;/span&gt;&lt;span class="s2"&gt;"Updated author images on posts"&lt;/span&gt;

&lt;span class="nv"&gt;$ &lt;/span&gt;git add src/components/Footer/Footer.tsx
&lt;span class="nv"&gt;$ &lt;/span&gt;git commit &lt;span class="nt"&gt;-m&lt;/span&gt;&lt;span class="s2"&gt;"Fixed responsive bug in footer"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you haven't changed many files, you might not need more than one commit, but we can often make our pull requests much easier to review by splitting up our changes into human-readable, easy-to-follow commits.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What if the same file contains multiple changes that should be grouped separately?&lt;/strong&gt; It's possible to &lt;a href="https://nuclearsquid.com/writings/git-add/"&gt;stage &lt;em&gt;part&lt;/em&gt; of a file&lt;/a&gt; using &lt;code&gt;git add --patch&lt;/code&gt; (or &lt;code&gt;git add -p&lt;/code&gt;). Some code editors also provide a way to stage a &lt;em&gt;range&lt;/em&gt; of changes rather than a whole file.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Be mindful of not leaving your codebase in a broken state during this step.&lt;/strong&gt; Remember, a huge reason we're cleaning up our commits in the first place is so that nothing will break if we ever want to revert our changes. After making one of these new commits, you can &lt;code&gt;git stash&lt;/code&gt; the rest of the unstaged changes and test that everything's still in working order. If you realize you should have included another file in that commit, you can &lt;code&gt;git stash pop&lt;/code&gt; to bring back the other changes, &lt;code&gt;git add&lt;/code&gt; the missing file, and perform a &lt;code&gt;git commit --amend&lt;/code&gt; . This command will replace the last commit with a new one with the same description, including the old commit and the change you just made.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-final-result"&gt;
  &lt;/a&gt;
  The Final Result
&lt;/h3&gt;

&lt;p&gt;Once you've split your work into logically grouped commits, you're ready to create your pull request! The final result is a set of changes that your colleague can review one commit at a time in manageable chunks.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YMrdppkp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dn0zd76mhkfvtk0qrjzr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YMrdppkp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dn0zd76mhkfvtk0qrjzr.png" alt="Logically-organized commits in a PR" width="880" height="296"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The benefit of this git flow is that it allows for the fluidity of typical development while also providing some much-needed order to maintain the repository's history.&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>productivity</category>
      <category>git</category>
    </item>
    <item>
      <title>Using Materialize and Redpanda to Analyze Raspberry Pi Temperature Data</title>
      <author>Bobby Iliev</author>
      <pubDate>Thu, 13 Jan 2022 18:55:15 +0000</pubDate>
      <link>https://dev.to/bobbyiliev/using-materialize-and-redpanda-to-analyze-raspberry-pi-temperature-data-2lpe</link>
      <guid>https://dev.to/bobbyiliev/using-materialize-and-redpanda-to-analyze-raspberry-pi-temperature-data-2lpe</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;This is a self-contained demo using &lt;a href="https://materialize.com/"&gt;Materialize&lt;/a&gt; to process data IoT devices data directly from a PostgreSQL server.&lt;/p&gt;

&lt;p&gt;The demo builds up on the &lt;a href="https://devdojo.com/bobbyiliev/how-to-build-adonisjs-api-to-store-your-raspberry-pi-temperature"&gt;How to build AdonisJS API to store your Raspberry Pi Temperature tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The data is generated by a Raspberry Pi temperature mock service simulating 50 devices reporting to an AdonisJS API mock service.&lt;/p&gt;

&lt;p&gt;Finally, we will create a sink to let us stream the data out of Materialize to a &lt;a href="https://materialize.com/docs/third-party/redpanda/"&gt;Redpanda&lt;/a&gt; topic.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Pc5ybAMB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/21223421/143457800-6ad3b46a-8520-41ce-baf0-f6a1ea6c20e7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Pc5ybAMB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/21223421/143457800-6ad3b46a-8520-41ce-baf0-f6a1ea6c20e7.png" alt="mz-raspberry-pi-temperature diagram" width="880" height="449"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;Before you get started, you need to make sure that you have Docker and Docker Compose installed.&lt;/p&gt;

&lt;p&gt;You can follow the steps here on how to install Docker:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/get-docker/"&gt;Install Docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/compose/install/"&gt;Install Docker Compose&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#overview"&gt;
  &lt;/a&gt;
  Overview
&lt;/h2&gt;

&lt;p&gt;In this demo, we’ll look at monitoring the temperature of a set of Raspberry Pi devices and extracting some insights from them, and streaming the data out to an external source.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#raspberry-pi-mock"&gt;
  &lt;/a&gt;
  Raspberry Pi Mock
&lt;/h3&gt;

&lt;p&gt;The main source of data is a Raspberry Pi Mock service, that simulates 50 devices reporting their CPU temperature to a mock API service built with AdonisJS.&lt;/p&gt;

&lt;p&gt;The mock service generates about ~25 new requests to the mock API service every second.&lt;/p&gt;

&lt;p&gt;For more information on how the mock services works along with the AdonisJS API, you can follow the &lt;a href="https://devdojo.com/bobbyiliev/how-to-build-adonisjs-api-to-store-your-raspberry-pi-temperature"&gt;How to build AdonisJS API to store your Raspberry Pi Temperature tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#api-mock-service-and-postgresql"&gt;
  &lt;/a&gt;
  API Mock service and PostgreSQL
&lt;/h3&gt;

&lt;p&gt;The API mock service receives the data from the 50 simulated Raspberry Pi and stores the data from each request in a PostgreSQL instance.&lt;/p&gt;

&lt;p&gt;The data that is being received with each request is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The name of the Raspberry Pi device.&lt;/li&gt;
&lt;li&gt;The timestamp when the temperature was measured.&lt;/li&gt;
&lt;li&gt;The temperature of the device, in celsius.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Mock API will save all data in a table called &lt;code&gt;sensors&lt;/code&gt;. The columns of the &lt;code&gt;sensors&lt;/code&gt; table are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;timestamp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;temperature&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#materialize"&gt;
  &lt;/a&gt;
  Materialize
&lt;/h3&gt;

&lt;p&gt;Materialize presents an interface to ingest the temperature data from the PostgreSQL database.&lt;/p&gt;

&lt;p&gt;In this demo, we are going to use Materialize to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://materialize.com/docs/sql/create-source/postgres/"&gt;Create a PostgreSQL source&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Materialize the PostgreSQL data, which will be retained all in memory.&lt;/li&gt;
&lt;li&gt;Provide a SQL interface to query the temperature data. We will connect to Materialize through mzcli, which is our forked version of &lt;code&gt;pgcli&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Explore the Materialize data via Metabase.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#running-the-demo"&gt;
  &lt;/a&gt;
  Running the demo
&lt;/h2&gt;

&lt;p&gt;Clone the repository:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone https://github.com/bobbyiliev/mz-raspberry-pi-temperature.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Access the directory:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd mz-raspberry-pi-temperature
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Build the Raspberry Pi Mock images:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker-compose build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Start all of the services:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker-compose up -d
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#access-materialize"&gt;
  &lt;/a&gt;
  Access Materialize
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker-compose run mzcli
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#create-materialize-source"&gt;
  &lt;/a&gt;
  Create Materialize Source:
&lt;/h3&gt;

&lt;p&gt;To create a PostgreSQL Materialize Source execute the following statement:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="n"&gt;MATERIALIZED&lt;/span&gt; &lt;span class="k"&gt;SOURCE&lt;/span&gt; &lt;span class="nv"&gt;"mz_source"&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;POSTGRES&lt;/span&gt;
&lt;span class="k"&gt;CONNECTION&lt;/span&gt; &lt;span class="s1"&gt;'user=postgres port=5432 host=postgres dbname=postgres password=postgres'&lt;/span&gt;
&lt;span class="n"&gt;PUBLICATION&lt;/span&gt; &lt;span class="s1"&gt;'mz_source'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A quick rundown of the above statement:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;MATERIALIZED&lt;/code&gt;: Materializes the PostgreSQL source’s data. All of the data is retained in memory and makes sources directly selectable.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;mz_source&lt;/code&gt;: The name for the PostgreSQL source.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;CONNECTION&lt;/code&gt;: The PostgreSQL connection parameters.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;PUBLICATION&lt;/code&gt;: The PostgreSQL publication, containing the tables to be streamed to Materialize.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#create-a-view"&gt;
  &lt;/a&gt;
  Create a view:
&lt;/h3&gt;

&lt;p&gt;Once we've created the PostgreSQL source, in order to be able to query the PostgreSQL tables, we would need to create views that represent the upstream publication’s original tables. In our case, we only have one table called &lt;code&gt;sensors&lt;/code&gt; so the statement that we would need to execute is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="n"&gt;VIEWS&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="k"&gt;SOURCE&lt;/span&gt; &lt;span class="n"&gt;mz_source&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sensors&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To see the available views execute the following statement:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SHOW&lt;/span&gt; &lt;span class="k"&gt;FULL&lt;/span&gt; &lt;span class="n"&gt;VIEWS&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once that is done, you can query the new view directly:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;sensors&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, let's go ahead and create a few more views.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-more-materialized-views"&gt;
  &lt;/a&gt;
  Creating more materialized views
&lt;/h3&gt;

&lt;p&gt;If you wish you can enable timing so we could actually see how long it takes for each statement to be executed:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;timing&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Example 1: Create a materialized view to show the total number of sensors data:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="n"&gt;MATERIALIZED&lt;/span&gt; &lt;span class="k"&gt;VIEW&lt;/span&gt; &lt;span class="n"&gt;mz_count&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;sensors&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Querying the &lt;code&gt;mz_count&lt;/code&gt; view:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;mz_count&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt; &lt;span class="k"&gt;count&lt;/span&gt;
&lt;span class="c1"&gt;-------&lt;/span&gt;
 &lt;span class="mi"&gt;34565&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;row&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;299&lt;/span&gt; &lt;span class="n"&gt;ms&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Example 2: Create a view to show the average temperature of all sensors:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="n"&gt;MATERIALIZED&lt;/span&gt; &lt;span class="k"&gt;VIEW&lt;/span&gt; &lt;span class="n"&gt;mz_total_avg&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;avg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;temperature&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;sensors&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Query the &lt;code&gt;mz_total_avg&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;mz_total_avg&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;        &lt;span class="k"&gt;avg&lt;/span&gt;
&lt;span class="c1"&gt;-------------------&lt;/span&gt;
 &lt;span class="mi"&gt;59&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;02989081226408&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;row&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;984&lt;/span&gt; &lt;span class="n"&gt;ms&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Example 3: Create a view to show the average temperature of each separate sensor:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="n"&gt;MATERIALIZED&lt;/span&gt; &lt;span class="k"&gt;VIEW&lt;/span&gt; &lt;span class="n"&gt;average&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt;
    &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;avg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;temperature&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="k"&gt;temp&lt;/span&gt; 
    &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;sensors&lt;/span&gt;
    &lt;span class="k"&gt;GROUP&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's again query the &lt;code&gt;average&lt;/code&gt; view:&lt;br&gt;
                                                                &lt;code&gt;&lt;br&gt;
&lt;/code&gt;&lt;code&gt;sql&lt;br&gt;
SELECT * FROM average LIMIT 10;&lt;br&gt;
&lt;/code&gt;`&lt;/p&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`sql&lt;br&gt;
     name     |        temp&lt;br&gt;
--------------+--------------------&lt;br&gt;
 raspberry-1  |  58.60756530123859&lt;br&gt;
 raspberry-2  |  58.95694631912029&lt;br&gt;
 raspberry-3  | 58.628198038515066&lt;br&gt;
 raspberry-4  |  59.40673999174753&lt;br&gt;
 raspberry-5  | 59.079367226960734&lt;br&gt;
 raspberry-6  |  58.96244838239402&lt;br&gt;
 raspberry-7  |   58.4658871719401&lt;br&gt;
 raspberry-8  |   58.9830811196705&lt;br&gt;
 raspberry-9  | 59.398486896836936&lt;br&gt;
 raspberry-10 | 59.669463513068024&lt;br&gt;
(10 rows)&lt;/p&gt;

&lt;p&gt;Time: 2.353 ms&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Feel free to experiment by creating more materialized views.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-a-sink"&gt;
  &lt;/a&gt;
  Creating a Sink
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://materialize.com/docs/sql/create-sink/"&gt;Sinks&lt;/a&gt; let you send data from Materialize to an external source.&lt;/p&gt;

&lt;p&gt;For this demo, we will be using &lt;a href="https://materialize.com/docs/third-party/redpanda/"&gt;Redpanda&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Redpanda is a Kafka API-compatible and Materialize can process data from it just as it would process data from a Kafka source.&lt;/p&gt;

&lt;p&gt;Let's create a materialized view, that will hold all of the devices with an average temperature of more than 60 celsius:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;sql&lt;br&gt;
CREATE MATERIALIZED VIEW mz_high_temperature AS&lt;br&gt;
    SELECT * FROM average WHERE temp &amp;gt; 60;&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you were to do a &lt;code&gt;SELECT&lt;/code&gt; on this new materialized view, it would return only the devices with an average temperature of above 60 celsius:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;sql&lt;br&gt;
SELECT * FROM mz_high_temperature;&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Let's create a Sink where we will send the data of the above materialized view:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;sql&lt;br&gt;
CREATE SINK high_temperature_sink&lt;br&gt;
    FROM mz_high_temperature&lt;br&gt;
    INTO KAFKA BROKER 'redpanda:9092' TOPIC 'high-temperature-sink'&lt;br&gt;
    FORMAT AVRO USING&lt;br&gt;
    CONFLUENT SCHEMA REGISTRY 'http://redpanda:8081';&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now if you were to connect to the Redpanda container and use the &lt;code&gt;rpk topic consume&lt;/code&gt; command, you will be able to read the records from the topic.&lt;/p&gt;

&lt;p&gt;However, as of the time being, we won’t be able to preview the results with &lt;code&gt;rpk&lt;/code&gt; because it’s AVRO formatted. Redpanda would most likely implement this in the future, but for the moment, we can actually stream the topic back into Materialize to confirm the format.&lt;/p&gt;

&lt;p&gt;First, get the name of the topic that has been automatically generated:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;sql&lt;br&gt;
SELECT topic FROM mz_kafka_sinks;&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`sql&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#topic"&gt;
  &lt;/a&gt;
                                topic
&lt;/h2&gt;

&lt;p&gt;high-temperature-sink-u12-1637586945-13670686352905873426&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For more information on how the topic names are generated check out the documentation &lt;a href="https://materialize.com/docs/sql/create-sink/#kafka-sinks"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Then create a new Materialized Source from this Redpanda topic:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;sql&lt;br&gt;
CREATE MATERIALIZED SOURCE high_temp_test&lt;br&gt;
FROM KAFKA BROKER 'redpanda:9092' TOPIC 'high-temperature-sink-u12-1637586945-13670686352905873426'&lt;br&gt;
FORMAT AVRO USING CONFLUENT SCHEMA REGISTRY 'http://redpanda:8081';&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Make sure to change the topic name accordingly!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Finally, query this new materialized view:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;sql&lt;br&gt;
SELECT * FROM high_temp_test LIMIT 2;&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now that you have the data in the topic, you can have other services connect to it and consume it and then trigger emails or alerts for example.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#metabase"&gt;
  &lt;/a&gt;
  Metabase
&lt;/h2&gt;

&lt;p&gt;In order to access the &lt;a href="https://materialize.com/docs/third-party/metabase/"&gt;Metabase&lt;/a&gt; instance visit &lt;code&gt;http://localhost:3030&lt;/code&gt; if you are running the demo locally or &lt;code&gt;http://your_server_ip:3030&lt;/code&gt; if you are running the demo on a server. Then follow the steps to complete the Metabase setup.&lt;/p&gt;

&lt;p&gt;To connect to your Materialize database, specify the following connection properties:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
Field             | Value&lt;br&gt;
----------------- | ----------------&lt;br&gt;
Database          | PostgreSQL&lt;br&gt;
Name              | user_reviews&lt;br&gt;
Host              | materialized&lt;br&gt;
Port              | 6875&lt;br&gt;
Database name     | materialize&lt;br&gt;
Database username | materialize&lt;br&gt;
Database password | Leave empty&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Once ready you will be able to visualize your data just as you would with a standard PostgreSQL database.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_qV18Gjf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/21223421/142780602-043f36c7-f279-4dc7-8853-99ddb31b452f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_qV18Gjf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/21223421/142780602-043f36c7-f279-4dc7-8853-99ddb31b452f.png" alt="Metabase" width="880" height="282"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;This is a simple example of how to use the direct PostgreSQL connection with Materialize and stream data into a Kafka/Redpanda topic.&lt;/p&gt;

&lt;p&gt;In most cases, you would not store your IoT devices data in a PostgreSQL database, but in an S3 bucket or a Kafka topic. So the setup could be similar to the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;S3 Bucket example:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---GIn4QOB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/21223421/148973244-852f02c0-dcba-42bc-97e8-46e80cd4791b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---GIn4QOB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/21223421/148973244-852f02c0-dcba-42bc-97e8-46e80cd4791b.png" alt="IoT devices data with Materialize and S3" width="880" height="441"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Redpanda/Kafka example:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2H25_h3P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/21223421/148971425-05e68138-6d82-48bc-98cc-c7417baf5ef8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2H25_h3P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/21223421/148971425-05e68138-6d82-48bc-98cc-c7417baf5ef8.png" alt="IoT devices data with Materialize and Redpanda" width="880" height="494"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#stopping-the-demo"&gt;
  &lt;/a&gt;
  Stopping the Demo
&lt;/h2&gt;

&lt;p&gt;To stop all of the services run the following command:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
docker-compose down&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#helpful-resources"&gt;
  &lt;/a&gt;
  Helpful resources:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://materialize.com/docs/sql/create-source/postgres/"&gt;&lt;code&gt;CREATE SOURCE: PostgreSQL&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://materialize.com/docs/sql/create-source/"&gt;&lt;code&gt;CREATE SOURCE&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://materialize.com/docs/sql/create-views"&gt;&lt;code&gt;CREATE VIEWS&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://materialize.com/docs/sql/select"&gt;&lt;code&gt;SELECT&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>database</category>
      <category>sql</category>
      <category>materialize</category>
      <category>node</category>
    </item>
    <item>
      <title>Scroll spinner with cursor tracking eye</title>
      <author>Bartłomiej Krakowski</author>
      <pubDate>Thu, 13 Jan 2022 18:50:08 +0000</pubDate>
      <link>https://dev.to/bart_krakowski/scroll-spinner-with-cursor-tracking-eye-206l</link>
      <guid>https://dev.to/bart_krakowski/scroll-spinner-with-cursor-tracking-eye-206l</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;p&gt;If you don’t want to walk through the whole process step-by-step you can simply view the final version here:&lt;br&gt;
&lt;a href="https://codesandbox.io/s/react-scroll-spinner-final-sx0gp"&gt;CodeSandbox&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I’d like to share with you a simple scroll-based animation built with Framer along with React, TS, and Emotion.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step-0"&gt;
  &lt;/a&gt;
  Step 0
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://codesandbox.io/s/react-scroll-spinner-step-0-jvc02"&gt;CodeSandbox&lt;/a&gt;&lt;br&gt;
Let's start with the bootstrapping project. I chose to use the default stack, which contains React, Typescript, Framer, and Emotion.&lt;br&gt;
You can use create-react-app or just fork the sandbox. If you're not familiar with Typescript, don't worry, I'll mark up the places I'm using it and add a solution for it using plain JS&lt;/p&gt;

&lt;p&gt;First, we need to prepare an app where we have our main file called App.tsx (or App.jsx) and our component file called Spinner.tsx (Spinner.jsx).&lt;/p&gt;

&lt;p&gt;In the spinner’s file, we need to create a basic wrapper and paste SVG content into it (feel free to copy it from my sandbox).&lt;br&gt;
You'll probably see an eyelid covering the eye. Don't worry, we'll animate it in step 2.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step-1"&gt;
  &lt;/a&gt;
  Step 1
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://codesandbox.io/s/react-scroll-spinner-step-1-rotating-text-pt2ob"&gt;CodeSandbox&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first functionality is to animate the rotation of the text around the eye as the scrolling progresses.&lt;br&gt;
To do this, we'll use the built-in &lt;code&gt;useViewportScroll&lt;/code&gt; hook from Framer, which will give us values from 0 to 1, with 0 being the top of the page and 1 being the end of the page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EqyLZPap--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sy5k09m4g3csu0vn1ew1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EqyLZPap--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sy5k09m4g3csu0vn1ew1.png" alt="Image description" width="880" height="240"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can expect we need to multiply this value by 360 because we want to achieve the full turn. We’re using the &lt;code&gt;useTransform&lt;/code&gt; hook from Framer.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M00R53jM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dgabb30zxuxirfnltiog.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M00R53jM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dgabb30zxuxirfnltiog.png" alt="Image description" width="880" height="240"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However, we want to make our animation a bit more fluid. We will use the &lt;code&gt;useSpring&lt;/code&gt; hook for this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WIYiOSLX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gxgfi8bqqxsa2gfcxfae.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WIYiOSLX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gxgfi8bqqxsa2gfcxfae.png" alt="Image description" width="880" height="240"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can manipulate this event with &lt;code&gt;stiffness&lt;/code&gt; and &lt;code&gt;damping&lt;/code&gt; params.&lt;br&gt;
Feel free to experiment with these options.&lt;/p&gt;

&lt;p&gt;More info about how it’s working here: &lt;a href="https://www.framer.com/docs/motionvalue/###usespring"&gt;https://www.framer.com/docs/motionvalue/###usespring&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The only thing left for us to do is to use this value in the element we want to animate:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vMU7gNnE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fpucj4sccwjbrepfjbb5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vMU7gNnE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fpucj4sccwjbrepfjbb5.png" alt="Image description" width="880" height="369"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Remember that every element that we want to animate needs to be a motion element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;motion.path /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As an additional visual effect, let's apply a 20 degree rotation to the entire wrapper.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RNomFXtP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tm256o2n1oicez5fvkvp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RNomFXtP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tm256o2n1oicez5fvkvp.png" alt="Image description" width="880" height="369"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-2"&gt;
  &lt;/a&gt;
  Step 2
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://codesandbox.io/s/react-scroll-spinner-step-2-eye-blinking-q79pe"&gt;CodeSandbox&lt;/a&gt;&lt;br&gt;
As I mentioned before, let's make the eye blink.&lt;/p&gt;

&lt;p&gt;Let's find the eyelid and add the &lt;code&gt;style&lt;/code&gt; prop to it, determining the initial behaviour of it:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--imkGD3Ss--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7r2zjic5epp739e75dhe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--imkGD3Ss--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7r2zjic5epp739e75dhe.png" alt="Image description" width="880" height="283"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We'd like to have a little bit of movement to it! We're saying that we want to scale it from 0 to 1 on the Y-axis in 5 seconds after loading our page and every 17 seconds after the first iteration:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QCD9nINX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/razrb6lqjq03mpzrcm9q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QCD9nINX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/razrb6lqjq03mpzrcm9q.png" alt="Image description" width="880" height="455"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-3"&gt;
  &lt;/a&gt;
  Step 3
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://codesandbox.io/s/react-scroll-spinner-final-sx0gp"&gt;CodeSandbox&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The last and most challenging functionality is cursor tracking eye.&lt;br&gt;
Let’s start by plugging a reference to the SVG group of the eyeball.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XQZbf2IY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cjk95hc8epplwndikqht.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XQZbf2IY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cjk95hc8epplwndikqht.png" alt="Image description" width="880" height="240"&gt;&lt;/a&gt;&lt;br&gt;
and&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R5LZIUs6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sg1m363xkc0dt9bff8wt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R5LZIUs6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sg1m363xkc0dt9bff8wt.png" alt="Image description" width="880" height="283"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we can take care of storing the value of the position of the cursor.&lt;br&gt;
Let’s use a build-in &lt;code&gt;useMotionValue&lt;/code&gt; hook from Framer.&lt;br&gt;
It will give us confidence in storing up-to-date values without redundant re-renders.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AIPbbkXu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u07c0ervd7xyuj9haa38.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AIPbbkXu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u07c0ervd7xyuj9haa38.png" alt="Image description" width="880" height="261"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then we need to establish the range of moves of the iris on the Y and X axes.&lt;br&gt;
In this hook, we need to define the size of the eye element and the range. We want the iris to move from -40px to 40px at the center of the X-axis and from -15px to 15px on the Y-axis.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zkDv-IgE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9j45goc6weyhkxpb82yq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zkDv-IgE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9j45goc6weyhkxpb82yq.png" alt="Image description" width="880" height="261"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The next thing to do is combine and update this data with a mouse move event: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--joZqOapf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fe59x3b5fslqql524a79.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--joZqOapf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fe59x3b5fslqql524a79.png" alt="Image description" width="880" height="584"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The next step is to assign these values to SVG elements that represent them:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_gB1igEc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2m6zdg1brbqhq92s9r3e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_gB1igEc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2m6zdg1brbqhq92s9r3e.png" alt="Image description" width="880" height="347"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;And finally, there we have it! &lt;br&gt;
You can see the final results here: &lt;a href="https://codesandbox.io/s/react-scroll-spinner-final-sx0gp"&gt;CodeSandbox&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Feel free to experiment and have fun improving these effects and making new ones!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Uselful array methods for dealing with api data.</title>
      <author>Stephan Nijman</author>
      <pubDate>Thu, 13 Jan 2022 18:46:53 +0000</pubDate>
      <link>https://dev.to/vanaf1979/uselful-array-methods-for-dealing-with-api-data-1f4e</link>
      <guid>https://dev.to/vanaf1979/uselful-array-methods-for-dealing-with-api-data-1f4e</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/xkCu_5GJfsA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Follow me on &lt;a href="https://www.youtube.com/channel/UCeyqA3y26RlnfUSx3ufgFoA"&gt;Youtube&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-javascript-array-methods-with-api-data"&gt;
  &lt;/a&gt;
  Using JavaScript array methods with Api data
&lt;/h2&gt;

&lt;p&gt;In this video/article I want to share with you how I use some of the JavaScript Array methods to deal with Api data. There are many many more things you can do with these methods, but these are just some examples from my own use cases. There are also a lot more Array methods for you to explore in the &lt;a href="https://developer.mozilla.org/nl/docs/Web/JavaScript/Reference/Global_Objects/Array"&gt;MDN documentation&lt;/a&gt;..&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#arrayprototypefind"&gt;
  &lt;/a&gt;
  Array.prototype.find()
&lt;/h3&gt;

&lt;p&gt;The &lt;em&gt;&lt;a href="https://developer.mozilla.org/nl/docs/Web/JavaScript/Reference/Global_Objects/Array/find"&gt;find&lt;/a&gt;&lt;/em&gt; array method can be used to find a single entry in an Api response based on a certain criteria.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// MDN Docs: https://developer.mozilla.org/nl/docs/Web/JavaScript/Reference/Global_Objects/Array/find&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;friends&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;joey&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;How you doin?&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ross&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;We were on a break&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;phoebe&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;She’s your lobster&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;findFriendById&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;friends&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;friend&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;friend&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;findFriendById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// Object {id: 0, name: "joey", quote: "How you doin?"}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Live example in &lt;a href="https://codesandbox.io/s/api-find-7hq46?file=/src/index.js"&gt;CodeSandBox&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this example we have a fake Api response array with characters from my all time favourite Sit-Com Friends. To find a single character by it's id we create a new function called &lt;em&gt;findFriendById&lt;/em&gt; that excepts the &lt;em&gt;Id&lt;/em&gt; integer of the character we are looking for.&lt;/p&gt;

&lt;p&gt;Inside this new function we call the &lt;em&gt;find&lt;/em&gt; method on our &lt;em&gt;friends&lt;/em&gt; array, again passing it a callback function that excepts a single &lt;em&gt;friend&lt;/em&gt; at a time. This callback function has to return a &lt;em&gt;true&lt;/em&gt; value when we hit the friend we are looking for. So we simply compare the current &lt;em&gt;friend's id&lt;/em&gt; with the &lt;em&gt;id&lt;/em&gt; passed in to the &lt;em&gt;findFriendById&lt;/em&gt; function.&lt;/p&gt;

&lt;p&gt;In the example we call the &lt;em&gt;findFriendById&lt;/em&gt; with 0 as the &lt;em&gt;id&lt;/em&gt; giving us the object for Joey.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5w_bzHtX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://since1979.dev/wp-content/uploads/2020/06/tumblr_n7cxc7XPZd1smcbm7o1_500.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5w_bzHtX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://since1979.dev/wp-content/uploads/2020/06/tumblr_n7cxc7XPZd1smcbm7o1_500.gif" alt="Yoey saying How are you doing" width="500" height="281"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#arrayprototypefilter"&gt;
  &lt;/a&gt;
  Array.prototype.filter()
&lt;/h3&gt;

&lt;p&gt;The &lt;em&gt;&lt;a href="https://developer.mozilla.org/nl/docs/Web/JavaScript/Reference/Global_Objects/Array/filter"&gt;Filter&lt;/a&gt;&lt;/em&gt; method allows us to easily find Api entries from the response data based on a certain criteria like shown below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// MDN Docs: https://developer.mozilla.org/nl/docs/Web/JavaScript/Reference/Global_Objects/Array/filter&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;trekkies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Piccard&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;planet&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Earth&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Spock&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;planet&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Vulcan&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Kirk&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;planet&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Earth&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Worf&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;planet&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Gault&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;findTrekkiesByPlanet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;planet&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;trekkies&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;trekkie&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;trekkie&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;planet&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;planet&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;findTrekkiesByPlanet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Earth&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="c1"&gt;// [0: Object {id: 0 name: "Piccard" planet: "Earth"}&lt;/span&gt;
&lt;span class="c1"&gt;// 1: Object {id: 2 name: "Kirk" planet: "Earth"}]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Live example in &lt;a href="https://codesandbox.io/s/api-filter-u0xly"&gt;CodeSandBox&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this example we have a basic Api response array with StarTrek characters. To find all the character from a certain planet we create a new function called &lt;em&gt;findTrekkiesByPlanet&lt;/em&gt; that excepts a single parameter being the name of the planet we want the entries for.&lt;/p&gt;

&lt;p&gt;Within the &lt;em&gt;findTrekkiesByPlanet&lt;/em&gt; function we call the &lt;em&gt;filter&lt;/em&gt; method on the &lt;em&gt;trekkies&lt;/em&gt; array and we pass it a callback function that excepts a single &lt;em&gt;trakkie&lt;/em&gt; as a parameter. This callback function has to return a &lt;em&gt;true&lt;/em&gt; value if this &lt;em&gt;trekkie&lt;/em&gt; meets our criteria or &lt;em&gt;false&lt;/em&gt; if it doesn't. So we do a check if the current &lt;em&gt;trekkie.planet&lt;/em&gt; value is equal to the planet value passed into the &lt;em&gt;findTrekkiesByPlanet&lt;/em&gt; function.&lt;/p&gt;

&lt;p&gt;As you can see in the example, if we pass "Earth" as the planet we get a new array containing just Piccard and Kirk.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S_H5Cdds--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://since1979.dev/wp-content/uploads/2020/06/tenor.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S_H5Cdds--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://since1979.dev/wp-content/uploads/2020/06/tenor.gif" alt="Captain Picard being happy" width="344" height="272"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#arrayfrom"&gt;
  &lt;/a&gt;
  Array.from()
&lt;/h3&gt;

&lt;p&gt;The from array method's function is to create a new array from some arbitrary data. Here we are going to use it to conform Api response data to something we can pass to a React component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// MDN Docs: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;apiCategories&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;javascript&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;other&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;React&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;other&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;transformApiCategories&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;apiCategories&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;category&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;category&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;category&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;transformApiCategories&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="c1"&gt;// [0: Object {label: "javascript" value: 0}&lt;/span&gt;
&lt;span class="c1"&gt;// 1: Object {label: "React" value: 1}]&lt;/span&gt;

&lt;span class="c1"&gt;// Example use in a react select component.&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;SelectControl&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;transformApiCategories&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Live example in &lt;a href="https://codesandbox.io/s/api-from-91qmo"&gt;CodeSandBox&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this last example we have some random Api data containing programming languages along with some information about them. We want to use this data inside a select element/component that expects an array of objects containing a label and a value. &lt;a href="https://github.com/WordPress/gutenberg/tree/master/packages/components/src/select-control"&gt;Here is an example&lt;/a&gt; of such a component from the Gutenberg project.&lt;/p&gt;

&lt;p&gt;For this we create a function called &lt;em&gt;transformApiCategories&lt;/em&gt;. Inside this new function we use Array.find and we pass it our &lt;em&gt;apiCategories&lt;/em&gt; array and a callback function that excepts a single category on each iteration.&lt;/p&gt;

&lt;p&gt;Our callback function returns a new object from each category containing only the data we need in the correct format, making the &lt;em&gt;from&lt;/em&gt; method return an array of objects that we can safely pass to our select component.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;As you can see these array methods can be very powerful and I would encourage you to check out their documentation. Inside each example there is a comment with a link to that specific method's doc page. And you can check out all the array methods in the &lt;a href="https://developer.mozilla.org/nl/docs/Web/JavaScript/Reference/Global_Objects/Array"&gt;MDN documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#follow"&gt;
  &lt;/a&gt;
  Follow?
&lt;/h3&gt;

&lt;p&gt;Follow me on &lt;a href="https://www.youtube.com/channel/UCeyqA3y26RlnfUSx3ufgFoA"&gt;Youtube&lt;/a&gt; &lt;a href="https://twitter.com/Vanaf1979"&gt;Twitter&lt;/a&gt; or here on Dev.to &lt;a href="https://dev.to/vanaf1979"&gt;@Vanaf1979&lt;/a&gt; so i can notify you about new videos/articles.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thanks for reading, stay safe and stay the right kind of positive!&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>react</category>
    </item>
    <item>
      <title>Make your first contribution to a GitHub Action! </title>
      <author>Rizèl Scarlett</author>
      <pubDate>Thu, 13 Jan 2022 18:36:26 +0000</pubDate>
      <link>https://dev.to/github/how-to-edit-a-github-action-3j14</link>
      <guid>https://dev.to/github/how-to-edit-a-github-action-3j14</guid>
      <description>&lt;h2&gt;
  &lt;a href="#why-edit-a-github-action"&gt;
  &lt;/a&gt;
  Why edit a GitHub Action?
&lt;/h2&gt;

&lt;p&gt;There are many reasons to edit a GitHub Action. Perhaps, you found an Action suited to your use case. It's almost perfect, but there's just one minor feature missing. Maybe you noticed a bug or edge case, or you have an idea to take the Action to the next level. &lt;/p&gt;

&lt;p&gt;One solution is to recreate the Action, make it your own, and add all the improvements you desire. The second and my preferred solution is to make a pull request for the Action you are already using. The latter encourages you to treat the Action as an open source project. In return, the benefits include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Expanding your developer network - This is a potential opportunity to interact with the creator of the Action.
&lt;/li&gt;
&lt;li&gt;Technical Exposure - Editing an Action used by multiple developers means you have to think about how your edits will affect other users, which may expose you to new technological problems.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Caution:&lt;/strong&gt; &lt;em&gt;Make sure you get the author's approval to add changes to their Action. The easiest way to do this is by opening an issue and starting a discussion with the author and/or other contributors. You don't want to spend time opening a pull request that the author doesn't want, and will eventually reject.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#my-reason"&gt;
  &lt;/a&gt;
  My reason
&lt;/h3&gt;

&lt;p&gt;Not to sound too nerdy, but I feel a rush of excitement and anticipation when I pick up an open source issue. I probably feel that way because I'm still relatively new to open source, and I've transitioned from writing production code every day to not writing production code at all. &lt;/p&gt;

&lt;p&gt;I picked up an issue earlier this month, but I didn't work on it immediately because of the holidays. When I returned a week later, a contributor reassigned the issue to themselves and opened a pull request. &lt;/p&gt;

&lt;p&gt;While I was impressed by the contributor's eagerness, speed, and clever solution, I felt disappointed for a brief moment. Until a friend and frequent contributor, &lt;a class="mentioned-user" href="https://dev.to/mtfoley"&gt;@mtfoley&lt;/a&gt;, helped me realize the root cause of the problem: the Contributor Take Action had a minor bug. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The TLDR:&lt;/strong&gt; &lt;a href="https://dev.to/github/assigning-new-contributors-to-issues-using-github-actions-1d27"&gt;The Contributor Take Action&lt;/a&gt; allows contributors to self-assign issues by typing ".take" in a comment. However, if another contributor comments ".take" after the initial contributor self-assigns the issue, the Action will assign that issue to the subsequent contributor as well. &lt;/p&gt;

&lt;p&gt;Matthew helped me transform my disappointment into opportunity: I could fix the bug in Contributor Take Action. I will still get to push code, and I could reduce the chance of miscommunicated reassigned issues in open source projects that use this Action.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-test-and-edit"&gt;
  &lt;/a&gt;
  How to Test and Edit
&lt;/h2&gt;

&lt;p&gt;Contributing code to a GitHub Action is similar to contributing to any open source project. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-setup"&gt;
  &lt;/a&gt;
  The Setup
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Step 1&lt;/strong&gt;: Locate the Action on GitHub’s Marketplace&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9rbF0J71--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mvmyps5f47gfy3f3m65h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9rbF0J71--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mvmyps5f47gfy3f3m65h.png" alt="Image with screenshot of Action on GitHub Marketplace" width="880" height="780"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2:&lt;/strong&gt; Find the repository for the Action. The URL for the repository is underneath the "Links" section. Once you click that link, it should lead you to the repository.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GRNIwHJ9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a6itlb6txkuwzgzaxjlw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GRNIwHJ9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a6itlb6txkuwzgzaxjlw.png" alt="Links to the repository are shown in this image" width="880" height="780"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j4fBH0tu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sno34hqhpoflq7r9bl7p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j4fBH0tu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sno34hqhpoflq7r9bl7p.png" alt="Screenshot of the Action's repository" width="880" height="607"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3:&lt;/strong&gt; Fork the repository by pressing the fork button on the top right.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q2XuItEH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pakt07o1fj57eoqbl2hn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q2XuItEH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pakt07o1fj57eoqbl2hn.png" alt="Screenshot indicating where the fork button is" width="880" height="607"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 4:&lt;/strong&gt; Once the project is forked, you should have a copy of the repository. Head over to your copy and clone the repository or open it up in Codespaces.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ukd6edsF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d9ez74mnf38rem8xx1mc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ukd6edsF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d9ez74mnf38rem8xx1mc.png" alt="Screenshot of cloned repository" width="880" height="446"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 5:&lt;/strong&gt; Set up a repository for testing and follow the directions written in the Action’s ReadMe.&lt;/p&gt;

&lt;p&gt;In my case, I used a repository I made for sandboxing and playing around with actions called &lt;a href="https://github.com/blackgirlbytes/deploy-with-actions"&gt;deploy-with-actions&lt;/a&gt;. Inside of my deploy-with-actions repository, I created a .github/workflows directory. Inside that directory, I created a take.yml file, and I pasted the workflow written in YAML from the take-action repository's README into that file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;
&lt;span class="c1"&gt;# .github/workflows/take.yml &lt;/span&gt;

&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Assign issue to contributor&lt;/span&gt;

&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; 

  &lt;span class="na"&gt;issue_comment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;

  &lt;span class="na"&gt;assign&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;

    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Take an issue&lt;/span&gt;

    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;

    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;take the issue&lt;/span&gt;

      &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;bdougie/take-action@main&lt;/span&gt;

      &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;

        &lt;span class="na"&gt;GITHUB_TOKEN&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ github.token }}&lt;/span&gt;

      &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;

        &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Thanks for taking this issue! Let us know if you have any questions!&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 6:&lt;/strong&gt; Point the workflow to your forked Action. You can even point it to a different branch or commit. It should look like:  &lt;/p&gt;

&lt;p&gt;&lt;code&gt;uses: {username}/{repo_name}@{branch_name}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For instance, I changed&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;
 &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;bdougie/take-action@main&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;to&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;
 &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;blackgirlbytes/take-action@handle-if-assigned&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#actually-testing"&gt;
  &lt;/a&gt;
  Actually Testing
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Step 6:&lt;/strong&gt; First, let's check that the Action is working as expected by triggering the Action. After I committed and pushed all the files from the set up above, in my case, I opened up an issue and commented ".take" from a GitHub user account I created for testing. To be clear, I did this in my repository that is using the Action called deploy-with-actions, not the repository for the Action. As expected, I received a message that said, "Thanks for taking this on! If you have not already, join the conversation in our Discord."&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CTq6t8cI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sn576rf4qyy2pjrt4q4p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CTq6t8cI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sn576rf4qyy2pjrt4q4p.png" alt='Screenshot of fake user commenting and a GitHub bot responding "Thanks for taking this on"' width="880" height="274"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 7:&lt;/strong&gt; Time to debug! Try editing your Action and adding a few log statements. You can read the documentation &lt;a href="https://docs.github.com/en/actions/monitoring-and-troubleshooting-workflows/enabling-debug-logging"&gt;here&lt;/a&gt; to learn more about debugging logs. Here’s an example of some edits I made to blackgirlbytes/take-action/action.yml on the handle-if-assigned branch.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;
&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;contributor-takes-action&lt;/span&gt;

&lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;This is an action to assign yourself to an issue for a repo you are not a contributor to.&lt;/span&gt;

&lt;span class="na"&gt;author&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Brian Douglas&lt;/span&gt;

&lt;span class="na"&gt;branding&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;

  &lt;span class="na"&gt;icon&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;thumbs-up'&lt;/span&gt;

  &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;white'&lt;/span&gt;

&lt;span class="na"&gt;inputs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;

  &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;

    &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;Message&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;to&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;prospective&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;contributor'&lt;/span&gt;

    &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;

    &lt;span class="na"&gt;default&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;

&lt;span class="na"&gt;runs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;

  &lt;span class="na"&gt;using&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;composite"&lt;/span&gt;

  &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt;

      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;

        &lt;span class="s"&gt;BODY="$(jq '.comment.body' $GITHUB_EVENT_PATH)"&lt;/span&gt;

        &lt;span class="s"&gt;ISSUE_NUMBER="$(jq '.issue.number' $GITHUB_EVENT_PATH)"&lt;/span&gt;

        &lt;span class="s"&gt;LOGIN="$(jq '.comment.user.login' $GITHUB_EVENT_PATH | tr -d \")"&lt;/span&gt;

        &lt;span class="s"&gt;REPO="$(jq '.repository.full_name' $GITHUB_EVENT_PATH | tr -d \")"&lt;/span&gt;

        &lt;span class="s"&gt;ISSUE_JSON="$(jq '.issue' $GITHUB_EVENT_PATH)"&lt;/span&gt;

        &lt;span class="s"&gt;ISSUE_CURRENTLY_ASSIGNED=`echo $ISSUE_JSON | jq '.assignees | length == 0'`&lt;/span&gt;

        &lt;span class="s"&gt;if [[ $BODY == *".take"* ]]; then&lt;/span&gt;

          &lt;span class="s"&gt;if [[ "$ISSUE_CURRENTLY_ASSIGNED" == true ]]; then&lt;/span&gt;

            &lt;span class="s"&gt;echo "$ISSUE_CURRENTLY_ASSIGNED"&lt;/span&gt;

            &lt;span class="s"&gt;echo "Assigning issue $ISSUE_NUMBER to $LOGIN"&lt;/span&gt;

            &lt;span class="s"&gt;echo "Using the link: https://api.github.com/repos/$REPO/issues/$ISSUE_NUMBER/assignees"&lt;/span&gt;

            &lt;span class="s"&gt;curl -H "Authorization: token $GITHUB_TOKEN" -d '{"assignees":["'"$LOGIN"'"]}' https://api.github.com/repos/$REPO/issues/$ISSUE_NUMBER/assignees&lt;/span&gt;

            &lt;span class="s"&gt;if [[ ! -z $INPUT_MESSAGE ]]; then&lt;/span&gt;

              &lt;span class="s"&gt;jq -n -r --arg body "$INPUT_MESSAGE" '{body: $body}' &amp;gt; payload.json&lt;/span&gt;

              &lt;span class="s"&gt;curl -X POST -H "Authorization: token $GITHUB_TOKEN" --data @payload.json https://api.github.com/repos/$REPO/issues/$ISSUE_NUMBER/comments&lt;/span&gt;

            &lt;span class="s"&gt;fi&lt;/span&gt;

          &lt;span class="s"&gt;else&lt;/span&gt;

            &lt;span class="s"&gt;echo "This issue is currently assigned to a different user"&lt;/span&gt;

          &lt;span class="s"&gt;fi&lt;/span&gt;

        &lt;span class="s"&gt;fi&lt;/span&gt;

      &lt;span class="na"&gt;shell&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;bash&lt;/span&gt;

      &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;

        &lt;span class="na"&gt;INPUT_MESSAGE&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;${{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;inputs.message&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}"&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 8:&lt;/strong&gt; Check the results by reading the Actions logs and continue to modify the code until you get your desired results. I found my Actions logs by heading to the deploy-with-actions repository and clicking on the Actions tab. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bJ3bpUJn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zbv4m2hshnkwiw96lc81.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bJ3bpUJn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zbv4m2hshnkwiw96lc81.png" alt="Screenshot of Action logs" width="880" height="426"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 9:&lt;/strong&gt; Once you have a working solution, commit and push your changes, and create a pull request. Make a pull request comparing forks instead of branches.&lt;/p&gt;

&lt;p&gt;You can find my PR &lt;a href="https://github.com/bdougie/take-action/pull/6"&gt; here&lt;/a&gt;. In this PR, I made a pull request comparing my branch to the author’s branch. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3GMWWwTS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5xtogdljpng9yelxmwc3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3GMWWwTS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5xtogdljpng9yelxmwc3.png" alt="Screenshot of the pull request being compared" width="880" height="431"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Although this solution was successfully merged, I have more to add. My initial implementation doesn’t comment or assign the subsequent contributors, but now I’m working on adding a response or feedback for contributors to understand why they weren’t assigned if the issue was already assigned to another contributor. You can check out my work in progress pull request &lt;a href="https://github.com/bdougie/take-action/pull/8"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you like this content, give me a follow or comment below!&lt;/p&gt;

</description>
      <category>github</category>
      <category>githubactions</category>
      <category>devops</category>
      <category>opensource</category>
    </item>
    <item>
      <title>GENERATE PASSWORD on REACT!</title>
      <author>BigBitDev</author>
      <pubDate>Thu, 13 Jan 2022 18:33:53 +0000</pubDate>
      <link>https://dev.to/bigbitdev/generate-password-on-react-48gp</link>
      <guid>https://dev.to/bigbitdev/generate-password-on-react-48gp</guid>
      <description>&lt;p&gt;Hi! today's post its a little tutorial that show how to made a password generator on ReactJS with useState hook! enjoy it!😋&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#here-you-got-a-live-show-of-the-app-passgenerator"&gt;
  &lt;/a&gt;
  Here you got a live show of the app: &lt;a href="https://passssgeneratorreact.netlify.app/"&gt;PassGenerator&lt;/a&gt;
&lt;/h3&gt;



&lt;h3&gt;
  &lt;a href="#the-code"&gt;
  &lt;/a&gt;
  The Code:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Container&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-bootstrap&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./GeneratorForm.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;GeneratorForm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;characters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;abcdefghijklmnñopqrstuvwxyzABCDEFGHIJKLMNÑOPQURSTUVWXYZ0123456789@_.-&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;genPass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;result1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;characters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;substring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;result1&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;//Hooks&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;pass&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;setPass&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Container&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text-center container_bg_bg-gradient"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Generate You own Password&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;setPass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;genPass&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Generate Password&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'style_css'&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;pass&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Container&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

        &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;

    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;GeneratorForm&lt;/span&gt;



&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;br&gt;
👁️‍🗨️ I use react-boostrap library to made it responsive and the general styles.
&lt;h2&gt;
  &lt;a href="#explanation"&gt;
  &lt;/a&gt;
  Explanation:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Function:&lt;/li&gt;
&lt;li&gt;Set a variable that save all character in only one string&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a function use the following methods:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Math.random() (in order to generate an aleatory number) &lt;/li&gt;
&lt;li&gt;toString() to convert that number into a string, (the parameter is the length of the string).&lt;/li&gt;
&lt;li&gt;toSubstring() to generate the string(initial position, length)&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hook: &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use the Hook useState, and set it with the above-mentioned function. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can put the value wherever you want in my case I put it in a h2 tag.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Well I hope you find it helpful. If you have any questions please let me know in the comments and I'll be waiting for feedback.👋🖖&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>react</category>
    </item>
  </channel>
</rss>
