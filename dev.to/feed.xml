<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How To Deploy Meshery In Kind</title>
      <author>s1ntaxe770r</author>
      <pubDate>Sun, 03 Oct 2021 13:23:54 +0000</pubDate>
      <link>https://dev.to/s1ntaxe770r/how-to-deploy-meshery-in-kind-1d5j</link>
      <guid>https://dev.to/s1ntaxe770r/how-to-deploy-meshery-in-kind-1d5j</guid>
      <description>&lt;p&gt;In this post, I would be showing you how to  deploy &lt;a href="https://meshery.io/"&gt;Meshery&lt;/a&gt; on Kubernetes using  &lt;a href="//kind.sigs.k8s.io/"&gt;Kind&lt;/a&gt; but first…&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-the-heck-is-meshery"&gt;
  &lt;/a&gt;
  What the heck is Meshery?
&lt;/h2&gt;

&lt;p&gt;If you are reading this chances are you are already familiar with Meshery or you are looking to find out what it is. Well, you are in the right place.&lt;/p&gt;

&lt;p&gt;Meshery is an open-source Service Mesh management plane. In simpler terms Meshery allows you to orchestrate the installation and management of different Service Meshes, Meshery also allows you to evaluate the performance of Service Meshes using the &lt;a href="https://smp-spec.io"&gt;SMP specification&lt;/a&gt; These are just two of the features Meshery provides out of the box.  If I have gotten you a tiny bit interested in Meshery head over to &lt;a href="https://docs.meshery.io/functionality"&gt;https://docs.meshery.io/functionality&lt;/a&gt; for a list of additional features Meshery provides.&lt;/p&gt;

&lt;p&gt;Now that you’re familiar with what Meshery is let's get it installed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h2&gt;

&lt;p&gt;Before we get started be sure you have docker and go installed as both are requirements for installing Kind,  we'll also be needing &lt;a href="https://helm.sh/"&gt;helm&lt;/a&gt; to deploy Meshery &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installing-kind"&gt;
  &lt;/a&gt;
  Installing Kind
&lt;/h3&gt;

&lt;p&gt;to install Kind run the following command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;GO111MODULE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"on"&lt;/span&gt; go get sigs.k8s.io/kind@v0.11.1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;if you run into an error along the lines of :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;zsh: &lt;span class="nb"&gt;command &lt;/span&gt;not found: kind
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Try adding the following alias to your shell configuration&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;kind&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$GOBIN&lt;/span&gt;&lt;span class="s2"&gt;/kind"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#creating-a-cluster"&gt;
  &lt;/a&gt;
  Creating a cluster
&lt;/h2&gt;

&lt;p&gt;Next, we'll create a kind cluster with an Ingress enabled, this ingress will come in handy when we want to expose Meshery later on. &lt;/p&gt;

&lt;p&gt;Create a file called &lt;code&gt;cluster.yaml&lt;/code&gt; and populate the file with the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Cluster&lt;/span&gt;
&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kind.x-k8s.io/v1alpha4&lt;/span&gt;
&lt;span class="na"&gt;nodes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;role&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;control-plane&lt;/span&gt;
  &lt;span class="na"&gt;kubeadmConfigPatches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
    &lt;span class="s"&gt;kind: InitConfiguration&lt;/span&gt;
    &lt;span class="s"&gt;nodeRegistration:&lt;/span&gt;
      &lt;span class="s"&gt;kubeletExtraArgs:&lt;/span&gt;
        &lt;span class="s"&gt;node-labels: "ingress-ready=true"&lt;/span&gt;
  &lt;span class="na"&gt;extraPortMappings&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;containerPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80&lt;/span&gt;
    &lt;span class="na"&gt;hostPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80&lt;/span&gt;
    &lt;span class="na"&gt;protocol&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;TCP&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;containerPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;443&lt;/span&gt;
    &lt;span class="na"&gt;hostPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;443&lt;/span&gt;
    &lt;span class="na"&gt;protocol&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;TCP&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we the following command to create a cluster using the cluster configuration&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kind create cluster &lt;span class="nt"&gt;--name&lt;/span&gt; meshery &lt;span class="nt"&gt;--config&lt;/span&gt; cluster.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After a few minutes, you should have a Kubernetes cluster up and running.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installing-meshery"&gt;
  &lt;/a&gt;
  Installing Meshery
&lt;/h3&gt;

&lt;p&gt;hop into your terminal and run the following command to get Meshery installed&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt; &lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/layer5io/meshery.git&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;cd &lt;/span&gt;meshery
 &lt;span class="nv"&gt;$ &lt;/span&gt;kubectl create namespace meshery
 &lt;span class="nv"&gt;$ &lt;/span&gt;helm &lt;span class="nb"&gt;install &lt;/span&gt;meshery &lt;span class="nt"&gt;--namespace&lt;/span&gt; meshery &lt;span class="nb"&gt;install&lt;/span&gt;/kubernetes/helm/meshery
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#exposing-meshery"&gt;
  &lt;/a&gt;
  Exposing meshery
&lt;/h3&gt;

&lt;p&gt;As mentioned earlier on we would access Meshery by using Ingress, create a file called &lt;code&gt;meshery-ingress.yaml&lt;/code&gt;, and add the following configuration:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;networking.k8s.io/v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Ingress&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;meshery-ingress&lt;/span&gt;
  &lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;meshery-ingress&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;rules&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;host&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;meshery.local&lt;/span&gt;
    &lt;span class="na"&gt;http&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;paths&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;pathType&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Prefix&lt;/span&gt;
        &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;/"&lt;/span&gt;
        &lt;span class="na"&gt;backend&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;service&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;meshery&lt;/span&gt;
            &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; 
              &lt;span class="na"&gt;number&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;9081&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Apply the configuration using &lt;code&gt;kubectl apply -n meshery -f meshery-ingress.yaml&lt;/code&gt; .&lt;/p&gt;

&lt;p&gt;Now create the following entry in &lt;code&gt;/etc/hosts&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="s"&gt;127.0.0.1 meshery.local&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this point if you head over to &lt;a href="http://meshery.local"&gt;http://meshery.local&lt;/a&gt; in your browser you should be able to access Meshery's UI which looks something like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CcqdQ6L8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://file.coffee/u/4L_8Zc31sDWWF1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CcqdQ6L8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://file.coffee/u/4L_8Zc31sDWWF1.png" alt="Untitled"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#configuring-mesherys-commandline-client"&gt;
  &lt;/a&gt;
  Configuring Meshery's command-line client
&lt;/h3&gt;

&lt;p&gt;While you could interact with Meshery from the UI only, at some point you are going to want to use the command line client which is what mesheryctl is. So let's get that installed.&lt;/p&gt;

&lt;p&gt;Head over to &lt;a href="https://github.com/meshery/meshery/releases/"&gt;https://github.com/meshery/meshery/releases/&lt;/a&gt; and download the binary for your operating system. Next unzip the file and move it to your path&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;unzip mesheryctl_0.5.52_Darwin_x86_64.zip
&lt;span class="nb"&gt;mv &lt;/span&gt;mesheryctl /usr/local/bin/mesheryctl
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The version of the binary might differ depending on when you are reading this. &lt;/p&gt;

&lt;p&gt;Now that you have mesheryctl installed you should be able to run &lt;code&gt;mesheryctl version&lt;/code&gt; .On your first try you should see something like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;~
❯ mesheryctl version     
Missing Meshery config file.
Create default config now &lt;span class="o"&gt;[&lt;/span&gt;y/n]?
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;enter &lt;code&gt;y&lt;/code&gt; and mesheryctl would generate a config file which we would also be needing later on. &lt;/p&gt;

&lt;p&gt;if all went well you should be presented with this error message&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Default config file created at /Users/someguy/.meshery/config.yaml
        VERSION     GITSHA      
Client  v0.5.62     35e8d943    
Server  unavailable unavailable 

  Unable to communicate with Meshery: Get &lt;span class="s2"&gt;"http://localhost:9081/api/system/version"&lt;/span&gt;: dial tcp &lt;span class="o"&gt;[&lt;/span&gt;::1]:9081: connect: connection refused
  See https://docs.meshery.io &lt;span class="k"&gt;for &lt;/span&gt;&lt;span class="nb"&gt;help &lt;/span&gt;getting started with Meshery.

Checking &lt;span class="k"&gt;for &lt;/span&gt;latest version of mesheryctl...

  v0.5.62 is the latest release.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This happens because mesheryctl is trying to communicate with Meshery on the default address, in our case it's &lt;a href="http://meshery.local"&gt;http://meshery.local&lt;/a&gt;. Luckily we can change this using the config file  Meshery generated earlier.&lt;/p&gt;

&lt;p&gt;Open up the config file located at ~/.meshery/config.yaml&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;contexts&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;local&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;endpoint&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;http://localhost:9081&lt;/span&gt;
    &lt;span class="na"&gt;token&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Default&lt;/span&gt;
    &lt;span class="na"&gt;platform&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;docker&lt;/span&gt;
    &lt;span class="na"&gt;adapters&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;meshery-istio&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;meshery-linkerd&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;meshery-consul&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;meshery-nsm&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;meshery-kuma&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;meshery-cpx&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;meshery-osm&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;meshery-traefik-mesh&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;meshery-nginx-sm&lt;/span&gt;
    &lt;span class="na"&gt;channel&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;stable&lt;/span&gt;
    &lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;latest&lt;/span&gt;
&lt;span class="na"&gt;current-context&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;local&lt;/span&gt;
&lt;span class="na"&gt;tokens&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Default&lt;/span&gt;
  &lt;span class="na"&gt;location&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;auth.json&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Taking a closer look we see that the endpoint is set to &lt;code&gt;[localhost:9081](http://localhost:9081)&lt;/code&gt;, modify the file so it looks like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;contexts&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;local&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;endpoint&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;http://meshery.local&lt;/span&gt;
    &lt;span class="na"&gt;token&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Default&lt;/span&gt;
    &lt;span class="na"&gt;platform&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kubernetes&lt;/span&gt;
    &lt;span class="na"&gt;adapters&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;meshery-istio&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;meshery-linkerd&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;meshery-consul&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;meshery-nsm&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;meshery-kuma&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;meshery-cpx&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;meshery-osm&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;meshery-traefik-mesh&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;meshery-nginx-sm&lt;/span&gt;
    &lt;span class="na"&gt;channel&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;stable&lt;/span&gt;
    &lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;latest&lt;/span&gt;
&lt;span class="na"&gt;current-context&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;local&lt;/span&gt;
&lt;span class="na"&gt;tokens&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Default&lt;/span&gt;
  &lt;span class="na"&gt;location&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;auth.json&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here i changed the endpoint and platform to match our current configuration. Now run &lt;code&gt;mesheryctl version&lt;/code&gt; again and you should see the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;❯ mesheryctl version      
        VERSION GITSHA   
Client  v0.5.62 35e8d943    
Server  v0.5.62 35e8d943    

Checking &lt;span class="k"&gt;for &lt;/span&gt;latest version of mesheryctl...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And there you go, we successfully deployed Meshery in kind and configured the CLI to interact with Meshery. If you have any questions or want to contribute to the Meshery project feel free to join the slack workspace using the link &lt;a href="https://layer5io.slack.com"&gt;here&lt;/a&gt;. Now go forth and make a mesh of things&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>meshery</category>
      <category>cloudnative</category>
    </item>
    <item>
      <title>7 passos para construir uma P.o.C. LIKE A BOSS</title>
      <author>Víctor Fructuoso</author>
      <pubDate>Sun, 03 Oct 2021 13:09:14 +0000</pubDate>
      <link>https://dev.to/fructuoso/7-passos-para-construir-uma-p-o-c-like-a-boss-23lm</link>
      <guid>https://dev.to/fructuoso/7-passos-para-construir-uma-p-o-c-like-a-boss-23lm</guid>
      <description>&lt;h2&gt;
  &lt;a href="#7-passos-para-construir-uma-poc-like-a-boss"&gt;
  &lt;/a&gt;
  7 passos para construir uma P.o.C. LIKE A BOSS
&lt;/h2&gt;

&lt;p&gt;Todos nós já nos deparamos com situações em que precisamos desenvolver algo novo, ou que possui requisitos peculiares e não temos uma solução "pronta".&lt;/p&gt;

&lt;p&gt;Em alguns casos desenvolver, ou tentar desenvolver, a solução completa pode demandar tempo e/ou dinheiro (normalmente uma coisa leva a outra).&lt;/p&gt;

&lt;p&gt;Uma das alternativas para evitar um grande investimento quando não há um nível aceitável de segurança no caminho que está sendo seguido, é realizar pequenos experimentos. Afinal de contas se algo der errado, o prejuízo será muito menor e haverá tempo para pensar em outras alternativas.&lt;/p&gt;

&lt;p&gt;No desenvolvimento de software esses experimentos são chamados de POC (Proof Of Concept), ou "Prova de Conceito".&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-requisitos"&gt;
  &lt;/a&gt;
  1. Requisitos
&lt;/h3&gt;

&lt;p&gt;A primeira etapa do processo é entender quais são nossos requisitos e restrições, pois todo o trabalho será realizado com objetivo de validar o quão aderente a eles o experimento é.&lt;/p&gt;

&lt;p&gt;Nesta etapa vamos também dividir nossos requisitos em essenciais e desejáveis. Esta segregação ajudará em todo o processo. Pensem comigo:&lt;/p&gt;

&lt;p&gt;Faz sentido continuar investindo tempo e dinheiro em um estudo em que nós já sabemos que não atenderá nossos requisitos essenciais?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-estabele%C3%A7a-crit%C3%A9rios-m%C3%A9tricas"&gt;
  &lt;/a&gt;
  2. Estabeleça Critérios (métricas)
&lt;/h3&gt;

&lt;p&gt;Uma vez que os requisitos da prova de conceito estão claros é necessário estabelecer quais os critérios que serão utilizados para evidenciar se a solução desenvolvida atende ou não aos requisitos estabelecidos inicialmente, esses critérios devem ser tangíveis, ou seja, nossas respostas para estes critérios não podem ser subjetivas.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-delimite-o-escopo"&gt;
  &lt;/a&gt;
  3. Delimite o Escopo
&lt;/h3&gt;

&lt;p&gt;Nesta etapa será definido o que efetivamente será implementado na prova de conceito, lembrando sempre que o principal objetivo da prova de conceito é poupar tempo e dinheiro, logo, o esforço para a construção da mesma deve ser significantemente menor que o esforço para construir a solução definitiva.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-plano-de-a%C3%A7%C3%A3o"&gt;
  &lt;/a&gt;
  4. Plano de Ação
&lt;/h3&gt;

&lt;p&gt;Com o escopo estabelecido é preciso elaborar um plano de ação indicando como o escopo será atendido e quanto tempo será investido para validar a teoria, ou seja, precisamos identificar as etapas que precisam ser realizadas e o esforço estimado para a conclusão de cada uma delas.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-handson-implementa%C3%A7%C3%A3o"&gt;
  &lt;/a&gt;
  5. Hands-On (Implementação)
&lt;/h3&gt;

&lt;p&gt;Durante a implementação efetiva da POC precisamos ter em mente que:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Este código deve ser funcional, porém ele é apenas um experimento;&lt;/li&gt;
&lt;li&gt;Apesar de não possuir as mesmas restrições de qualidade que um código "normal", o código precisa estar legível para que possa ser analisado e potencialmente reutilizado em uma implementação definitiva;&lt;/li&gt;
&lt;li&gt;Seus esforços devem SEMPRE estar 100% direcionados para responder às perguntas estabelecidas anteriormente.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#6-documente"&gt;
  &lt;/a&gt;
  6. Documente
&lt;/h3&gt;

&lt;p&gt;Com a prova de conceito devidamente implementada é hora de voltar às métricas e validar o quanto a solução construída é aderente aos requisitos e restrições definidos no primeiro passo.&lt;/p&gt;

&lt;p&gt;Nesse momento os requisitos que já estavam divididos em (essenciais e desejáveis) agora passam a ser sub-divididos também em (simples e complexos) para implementar de forma definitiva.&lt;/p&gt;

&lt;p&gt;É recomendável documentar os resultados encontrados para apresentar aos stakeholders e manter o histórico do porque tal decisão foi tomada.&lt;/p&gt;

&lt;p&gt;&lt;u&gt;NOTA: Pode ser necessário testar outras abordagens e comparar os resultados até que se chegue em um resultado satisfatório.&lt;/u&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-road-map"&gt;
  &lt;/a&gt;
  7. Road Map
&lt;/h3&gt;

&lt;p&gt;Ao chegar nessa etapa temos nossa prova de conceito efetivamente pronta para ser desenvolvida para se tornar um entregável.&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>productivity</category>
      <category>development</category>
      <category>agile</category>
    </item>
    <item>
      <title>Accessibility Automated Tools - What to Expect</title>
      <author>Neha Sharma </author>
      <pubDate>Sun, 03 Oct 2021 12:53:26 +0000</pubDate>
      <link>https://dev.to/hellonehha/accessibility-automated-tools-what-to-expect-546m</link>
      <guid>https://dev.to/hellonehha/accessibility-automated-tools-what-to-expect-546m</guid>
      <description>&lt;p&gt;There are a few popular tools available for the accessibility testing such as Lighthouse, AXE Tool , and plugins.&lt;/p&gt;

&lt;p&gt;Developers and Testers expect that these tools magically help them cover 100% accessibility issues. However, accessibility tools cannot provide you 100% cover from the issues but it can help you to atleast report some % of issues and how to fix them. &lt;/p&gt;

&lt;p&gt;Today we are going to learn the issues automated took can and cannot report:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#common-tools"&gt;
  &lt;/a&gt;
  Common Tools
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developers.google.com/web/tools/lighthouse"&gt;Lighthouse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.deque.com/axe/devtools/"&gt;Axe tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://chrome.google.com/webstore/detail/nerdefocus/lpfiljldhgjecfepfljnbjnbjfhennpd"&gt;Keyboard focus Extension&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package/eslint-plugin-jsx-a11y"&gt;ESlint JSX A11y Plugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://coolors.co/contrast-checker/112a46-acc8e5"&gt;Color Contrast Analyser&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Can&lt;/th&gt;
&lt;th&gt;Can't&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;alt tags&lt;/td&gt;
&lt;td&gt;Can identify if alt tags are missing&lt;/td&gt;
&lt;td&gt;Can't identify if alt tags are meaningful&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Labels&lt;/td&gt;
&lt;td&gt;Can identify if labels are missing &amp;amp; order is incorrect&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Color contrast&lt;/td&gt;
&lt;td&gt;Can identify if color contrast is failing&lt;/td&gt;
&lt;td&gt;Can't identify if color contrast on images and gradient&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Focus&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;Can't identify if the focus order is correct&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Order of Headings&lt;/td&gt;
&lt;td&gt;Can identify if order of H1-H6 is correct&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ARIA&lt;/td&gt;
&lt;td&gt;Can identify if ARIA tag is missing&lt;/td&gt;
&lt;td&gt;Can't identify if the usage is correct&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Role &amp;amp; landmarks&lt;/td&gt;
&lt;td&gt;Can identify if ARIA role and landmarks is missing&lt;/td&gt;
&lt;td&gt;Can't identify if the usage is correct&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Semantic&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;Can't identify if the semantic tags are used or not&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Responsive&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;Tools cannot identify if app is not responsive&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Experience&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;Can't identify if the experience of assertive technologies is similar to non-assertive technologies&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;The above points are important to understand the scope of automated testing. While using the tools one should be aware 'what' the tools will be testing and do the manual testing of 'what cannot' be tested by tools.&lt;/p&gt;

&lt;p&gt;Happy Learning!!&lt;/p&gt;

</description>
      <category>a11y</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Pixel Art Editor using WebGL</title>
      <author>Valeria</author>
      <pubDate>Sun, 03 Oct 2021 12:19:24 +0000</pubDate>
      <link>https://dev.to/valeriavg/pixel-art-editor-using-webgl-3eih</link>
      <guid>https://dev.to/valeriavg/pixel-art-editor-using-webgl-3eih</guid>
      <description>&lt;h2&gt;
  &lt;a href="#foreword"&gt;
  &lt;/a&gt;
  Foreword
&lt;/h2&gt;

&lt;p&gt;I was looking for a fun project to do and came up with this editor (&lt;a href="https://pixel-vg-6ijid.ondigitalocean.app/"&gt;see in action&lt;/a&gt;):&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ValeriaVG"&gt;
        ValeriaVG
      &lt;/a&gt; / &lt;a href="https://github.com/ValeriaVG/pixel-vg"&gt;
        pixel-vg
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      WebGL Pixel Editor
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Pixel VG - WebGL Pixel Editor&lt;/h1&gt;
&lt;p&gt;Pixel (V)ector (G)raphics
Easy to use point &amp;amp; click pixel-art editor.&lt;/p&gt;
&lt;h2&gt;
Development&lt;/h2&gt;
&lt;p&gt;Install dependencies:&lt;/p&gt;
&lt;div class="snippet-clipboard-content position-relative overflow-auto"&gt;&lt;pre&gt;&lt;code&gt;npm ci
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Run in dev mode:&lt;/p&gt;
&lt;div class="snippet-clipboard-content position-relative overflow-auto"&gt;&lt;pre&gt;&lt;code&gt;npm run dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Preview build:&lt;/p&gt;
&lt;div class="snippet-clipboard-content position-relative overflow-auto"&gt;&lt;pre&gt;&lt;code&gt;npm run preview
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Build static version:&lt;/p&gt;
&lt;div class="snippet-clipboard-content position-relative overflow-auto"&gt;&lt;pre&gt;&lt;code&gt;npm run build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/ValeriaVG/pixel-vg"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


&lt;p&gt;As you can see it looks really simple and there is a lot of improvements that can be done of varying difficulty: from styling to dev-ops. &lt;/p&gt;

&lt;p&gt;The project is tagged with &lt;em&gt;#hacktoberfest&lt;/em&gt; and I'll do my best to review pull requests in a timely manner. Just grab one of the existing &lt;a href="https://github.com/ValeriaVG/pixel-vg/issues"&gt;issues&lt;/a&gt; or create a PR without one.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-the-editor-works"&gt;
  &lt;/a&gt;
  How the editor works
&lt;/h2&gt;

&lt;p&gt;WebGL is a technology that allows HTMLCanvas to talk to GPUs directly via a language called GLSL. To put it simply, you provide WebGL context with coordinates, colours and two functions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;vertex shader&lt;/em&gt;, that tells &lt;strong&gt;where&lt;/strong&gt; each vertex should be positioned&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;fragment shader&lt;/em&gt;, that tells &lt;strong&gt;what colour&lt;/strong&gt; should every vertex or point on the screen have&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you're looking for an in-depth introduction to WebGL, check &lt;a href="https://xem.github.io/articles/webgl-guide.html"&gt;this article by Maxime Euzière&lt;/a&gt;, it's very good.&lt;/p&gt;

&lt;p&gt;The editor I wrote uses two sets of shaders: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;first one draws the pixel points on the screen &lt;/li&gt;
&lt;li&gt;and the other draws a thin grid above it.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#drawing-grid-with-webgl"&gt;
  &lt;/a&gt;
  Drawing grid with WebGL
&lt;/h3&gt;

&lt;p&gt;Vertex shader for grid simply sets position to the exact value it's fed with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight glsl"&gt;&lt;code&gt;&lt;span class="k"&gt;attribute&lt;/span&gt; &lt;span class="kt"&gt;vec4&lt;/span&gt; &lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;gl_Position&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the fragment shader discards all the pixels, apart from a thin interval around coordinates that are dividable by cell size:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight glsl"&gt;&lt;code&gt;&lt;span class="k"&gt;precision&lt;/span&gt; &lt;span class="kt"&gt;mediump&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;uniform&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
   &lt;span class="n"&gt;mod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;gl_FragCoord&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
   &lt;span class="n"&gt;mod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;gl_FragCoord&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nb"&gt;gl_FragColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;vec4&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;discard&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;                      
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These shaders are compiled like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;canvas&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;canvas&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;gl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;webgl&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Compile vertex shader&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;vs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;gl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createShader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;VERTEX_SHADER&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;gl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shaderSource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;vs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;vertexShader&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;gl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;compileShader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;vs&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Compile fragment shader&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;gl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createShader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FRAGMENT_SHADER&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;gl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shaderSource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fragmentShader&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;gl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;compileShader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Create and launch the WebGL program&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;program&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;gl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createProgram&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;gl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attachShader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;program&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;vs&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;gl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attachShader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;program&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;gl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;linkProgram&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;program&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And can be used like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Clear the canvas&lt;/span&gt;
&lt;span class="nx"&gt;gl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;COLOR_BUFFER_BIT&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Activate grid shaders&lt;/span&gt;
&lt;span class="nx"&gt;gl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useProgram&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;program&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Set size value&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;gl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUniformLocation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;program&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;size&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;gl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;uniform1f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Cell Size&lt;/span&gt;

&lt;span class="c1"&gt;// Four vertices represent corners of the canvas&lt;/span&gt;
&lt;span class="c1"&gt;// Each row is x,y,z coordinate&lt;/span&gt;
&lt;span class="c1"&gt;// -1,-1 is left bottom, z is always zero, since we draw in 2d&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;vertices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Float32Array&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
 &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
 &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;
&lt;span class="p"&gt;]);&lt;/span&gt;

&lt;span class="c1"&gt;// Attach vertices to a buffer&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;buffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;gl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createBuffer&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;gl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bindBuffer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ARRAY_BUFFER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;gl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bufferData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ARRAY_BUFFER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;vertices&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;gl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;STATIC_DRAW&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Set position to point to buffer&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;position&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;gl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAttribLocation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;program&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;position&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;gl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;vertexAttribPointer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// target&lt;/span&gt;
    &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// x,y,z&lt;/span&gt;
    &lt;span class="nx"&gt;gl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FLOAT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// type&lt;/span&gt;
    &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// normalize&lt;/span&gt;
    &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// buffer offset&lt;/span&gt;
    &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="c1"&gt;// buffer offset&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;gl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;enableVertexAttribArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Finally draw our 4 vertices&lt;/span&gt;
&lt;span class="nx"&gt;gl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;drawArrays&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;TRIANGLE_STRIP&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's the result:&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/valeriavg/embed/bGpYGqZ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#drawing-pixels-on-the-grid"&gt;
  &lt;/a&gt;
  Drawing pixels on the grid
&lt;/h2&gt;

&lt;p&gt;To draw square pixels we will simply set vertices to the dots we want to draw and set their size to &lt;code&gt;32&lt;/code&gt;- to match the grid.&lt;/p&gt;

&lt;p&gt;Fragment shaders do not have access to the buffer itself, so in order to properly colour the points, we need to pass this colour information from the vertex shader:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight glsl"&gt;&lt;code&gt;&lt;span class="k"&gt;attribute&lt;/span&gt; &lt;span class="kt"&gt;vec4&lt;/span&gt; &lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;attribute&lt;/span&gt; &lt;span class="kt"&gt;vec4&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;varying&lt;/span&gt; &lt;span class="kt"&gt;vec4&lt;/span&gt; &lt;span class="n"&gt;v_color&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;uniform&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;gl_Position&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;v_color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nb"&gt;gl_PointSize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the fragment shader will look really simple now:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight glsl"&gt;&lt;code&gt;&lt;span class="k"&gt;precision&lt;/span&gt; &lt;span class="kt"&gt;mediump&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;varying&lt;/span&gt; &lt;span class="kt"&gt;vec4&lt;/span&gt; &lt;span class="n"&gt;v_color&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;gl_FragColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;v_color&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With a couple of math functions we can turn this array:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pixels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#ff0000&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#ffaa00&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#ffff00&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#00ff00&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#00ffaa&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#00ffff&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#0000ff&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#ff00aa&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#ff00ff&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Into this:&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/valeriavg/embed/XWgwmpj?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;And the rest of the editor is svelte's magic:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"ts"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;onMount&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;svelte&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;omMount&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/** compile shaders **/&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="cm"&gt;/** render stuff **/&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PIXEL_RATIO&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;devicePixelRatio&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;HTMLCanvasElement&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;gl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;WebGLRenderingContext&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;blockSize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// [x,y,color]&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;pixels&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#ff0000&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;recordPoint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;pixels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pixels&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(([&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;py&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;px&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;py&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Draw&lt;/span&gt;
    &lt;span class="nx"&gt;pixels&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(((&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clientX&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;canvasRect&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;blockSize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;PIXEL_RATIO&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(((&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clientY&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;canvasRect&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;top&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;blockSize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;PIXEL_RATIO&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;recordPoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nl"&gt;$&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;canvasRect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;getBoundingClientRect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;canvas&lt;/span&gt;
    &lt;span class="na"&gt;bind:this=&lt;/span&gt;&lt;span class="s"&gt;{canvas}&lt;/span&gt;
    &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;{size&lt;/span&gt; &lt;span class="na"&gt;*&lt;/span&gt; &lt;span class="na"&gt;blockSize&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;
    &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;{size&lt;/span&gt; &lt;span class="na"&gt;*&lt;/span&gt; &lt;span class="na"&gt;blockSize&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;
    &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;{`width:${(size&lt;/span&gt; &lt;span class="na"&gt;*&lt;/span&gt; &lt;span class="na"&gt;blockSize&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt; &lt;span class="err"&gt;/&lt;/span&gt; &lt;span class="na"&gt;PIXEL_RATIO&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="na"&gt;px&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt; &lt;span class="na"&gt;height:&lt;/span&gt;&lt;span class="err"&gt;${&lt;/span&gt;
        &lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="na"&gt;size&lt;/span&gt; &lt;span class="na"&gt;*&lt;/span&gt; &lt;span class="na"&gt;blockSize&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt; &lt;span class="err"&gt;/&lt;/span&gt; &lt;span class="na"&gt;PIXEL_RATIO&lt;/span&gt;
    &lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="na"&gt;px&lt;/span&gt;&lt;span class="err"&gt;;`}&lt;/span&gt;
    &lt;span class="na"&gt;on:click=&lt;/span&gt;&lt;span class="s"&gt;{onClick}&lt;/span&gt;
&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which boils down to this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;locate clicked cell coordinates&lt;/li&gt;
&lt;li&gt;add new pixel with selected colour and coordinates&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#why-webgl"&gt;
  &lt;/a&gt;
  Why WebGL
&lt;/h2&gt;

&lt;p&gt;Drawing static pictures with 2D canvas methods like &lt;code&gt;fillRect&lt;/code&gt; and &lt;code&gt;lineTo&lt;/code&gt; is quite easy, but is you need to redraw contents often it quickly becomes visibly slow.&lt;/p&gt;

&lt;p&gt;And besides, once you get a grip of WebGL it's not much harder to write shaders than operate old-school canvas.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#afterword"&gt;
  &lt;/a&gt;
  Afterword
&lt;/h2&gt;

&lt;p&gt;Thank you for your time and I hope you found this article useful.&lt;/p&gt;

&lt;p&gt;And don't be a stranger, join the development of the &lt;a href="https://github.com/ValeriaVG/pixel-vg"&gt;pixel-vg&lt;/a&gt; editor!&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>svelte</category>
      <category>webgl</category>
      <category>hacktoberfest</category>
    </item>
    <item>
      <title>So much better than the Oktoberfest - First steps in open-source!</title>
      <author>nbrownie</author>
      <pubDate>Sun, 03 Oct 2021 12:16:59 +0000</pubDate>
      <link>https://dev.to/nbrownie1990/so-much-better-than-the-oktoberfest-first-steps-in-open-source-2k2e</link>
      <guid>https://dev.to/nbrownie1990/so-much-better-than-the-oktoberfest-first-steps-in-open-source-2k2e</guid>
      <description>&lt;p&gt;As a German who has already been to the real Oktoberfest, I can definitely say: Hacktoberfest is so much better than the Oktoberfest! &lt;/p&gt;

&lt;p&gt;Instead of being stuck in a way too stuffy tent with too many drunk people, you learn a lot about collaborating with amazing people on open-source projects from all over the world. &lt;/p&gt;

&lt;h2&gt; What is Hacktoberfest? &lt;/h2&gt;

&lt;p&gt;Hacktoberfest takes place every year in October (the open-source month) and encourages participation in the open-source community, which grows bigger and bigger.&lt;/p&gt;

&lt;h2&gt; What is open source? &lt;/h2&gt;

&lt;p&gt;Open source is open to everyone. It's bubbling with creativity and collaboration. Everyone is trying to help different communities and projects, they add more features, and be a small part of something huge. &lt;/p&gt;

&lt;p&gt;Open source is so powerful because it lowers barriers to use and collaboration, allowing people to spread ideas faster and improve things faster. &lt;/p&gt;

&lt;h2&gt;How to start contributing to open-source projects? &lt;/h2&gt;

&lt;p&gt;As a beginner, I've been thinking about contributing to open-source projects for a long time, but have not dared so far. However, the inhibition threshold is quite high for a beginner ("What if the community don't like my implementation?","I don't want to crash something").&lt;br&gt;
But don't hesitate - Hacktoberfest comes to the rescue.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/3xz2BCe5jn2j4OM9ZS/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/3xz2BCe5jn2j4OM9ZS/giphy.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Which projects can I start with as a beginner? &lt;/h2&gt;

&lt;p&gt;Hacktoberfest is especially good if you want to make your first experiences with open-source. In this month the community is "extra-open" for beginners. You can search for labels with "hacktoberfest" and “Good First Issue". There is so much to contribute out there, even if you don't have much programming experience yet.&lt;/p&gt;

&lt;p&gt;In my case: The weekend started and there were no excuses! &lt;br&gt;
I was ready to contribute, but this year I don't do the "big projects" (start with something small, then go for bigger projects). For this time, I just trained to make pull requests and made small contributions to the following sample projects:&lt;/p&gt;

&lt;h3&gt; Getting Started with a little Exercise: &lt;/h3&gt;

&lt;p&gt;To practice your first pull-request and working with Git, a good start is to add your name and profile to a contributers.md file. Some projects are happy for you to submit yourself and your GitHub-profile when you join their community.&lt;/p&gt;

&lt;h3&gt;Add something to a Collection:&lt;/h3&gt;

&lt;p&gt;There are a couple of repositories on GitHub that compile a large collection of programming websites and links, that can be very helpful for staying informed and learning new things.&lt;br&gt;
I contributed to a repo with the "Best programming websites a programmer should visit" and added a few with a brief description.&lt;/p&gt;

&lt;h3&gt;Updating a Contribution Guide&lt;/h3&gt;

&lt;p&gt;Some projects have grown very fast and still lack of a written guide that describes how to contribute to the project and what rules to follow. The perfect little project to help this community is to rewrite/ update their contribution guide. But please avoid to completely rewriting their ideas - better ask and make suggestions.&lt;/p&gt;

&lt;h3&gt;Creating App-Ideas for other developers: &lt;/h3&gt;

&lt;p&gt;This is a helpful project for developers, who want to build something but don't have an idea what to do. In this repo I added an app-idea with a list of user stories, bonus-features, which should be implemented and some resources and links to help the devs.&lt;/p&gt;

&lt;h3&gt;Collection of Data structures &amp;amp; Algorithms - Insert a Priority Queue &lt;/h3&gt;

&lt;p&gt;There are many great repositories on GitHub, that collect various data structures and algorithms in different programming languages. My contribution was to implement a Priority Queue with an array in java.&lt;/p&gt;

&lt;h2&gt;That's it for this weekend - but October has only just begun 🎃&lt;/h2&gt;

&lt;p&gt;If your goal is to learn how to collaborate with others or how open source works and contribute to projects, you should definitely join!&lt;/p&gt;

&lt;p&gt;Join the hacktoberfest-community &lt;a href="https://hacktoberfest.digitalocean.com/"&gt; here.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Besides: Hacktoberfest is also better than Oktoberfest, because you won't get a hangover while participating. Instead, DigitalOcean is offering the traditional Hacktoberfest t-shirt prize or, even better, a &lt;a href="https://tree-nation.com/profile/digitalocean"&gt;plant-a-tree &lt;/a&gt; alternative {🌱 =&amp;gt; 🌳} !&lt;/p&gt;

&lt;h3&gt;Happy Hacktoberfest 2021 💻🍁 &lt;/h3&gt;
 

</description>
      <category>hacktoberfest</category>
      <category>codenewbie</category>
      <category>opensource</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Starting off as a UX/UI Designer.</title>
      <author>Nderitu</author>
      <pubDate>Sun, 03 Oct 2021 12:10:23 +0000</pubDate>
      <link>https://dev.to/nderitumwanu/starting-off-as-a-ui-ux-designer-8n</link>
      <guid>https://dev.to/nderitumwanu/starting-off-as-a-ui-ux-designer-8n</guid>
      <description>&lt;p&gt;Being a designer means you bring things to life, from a thought, into a concept that will actually be used by people you've never met. In this year alone I've seen more designers, most self-taught, confess that this is the best career choice they've made because they enjoy what they are doing. &lt;/p&gt;

&lt;p&gt;I have a developer background, precisely frontend development and in my time, I got introduced to &lt;a href="https://dribbble.com"&gt;Dribbble&lt;/a&gt;. What an inspirational site! I could see all the trends in design implemented. This is where every designer should start, from inspiration and beyond!. In line with this, here are a few easy steps on how to start off as a UX/UI Designer today.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1grow-your-passion-with-inspiration"&gt;
  &lt;/a&gt;
  1.GROW YOUR PASSION WITH INSPIRATION
&lt;/h3&gt;

&lt;p&gt;You need somewhere to conduct a study and view trends in the design world. You need motivation to start and competitors to match up to. Find all these on:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dribbble.com"&gt;Dribble&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pinterest.com"&gt;Pinterest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://behance.com"&gt;Behance&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#2enroll-in-a-design-course"&gt;
  &lt;/a&gt;
  2.ENROLL IN A DESIGN COURSE
&lt;/h3&gt;

&lt;p&gt;There are a number of sites/online institutions that offer Design courses at a fee or even for free. My personal favorite and recommendation is &lt;a href="https://app.uxcel.com/courses/"&gt;Uxcel&lt;/a&gt;. They have a great interface, easy to learn with, which means they teach and implement.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3start-off-with-a-design-tool"&gt;
  &lt;/a&gt;
  3.START OFF WITH A DESIGN TOOL
&lt;/h3&gt;

&lt;p&gt;Every designer has to choose their preferred design tool where they can implement their prototypes.Try &lt;a href="https://figma.com"&gt;Figma&lt;/a&gt;, &lt;a href="https://sketch.com"&gt;Sketch&lt;/a&gt;and &lt;a href="https://www.adobe.com/africa/products/xd.html"&gt;Adobe XD&lt;/a&gt;. These are the main tools, try each and find your favorite, as for me I love Figma(Very good in collaboration).  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4learn-practice-post"&gt;
  &lt;/a&gt;
  4.LEARN, PRACTICE, POST
&lt;/h3&gt;

&lt;p&gt;With the above tools and courses, visit &lt;a href="https://www.dailyui.co"&gt;dailyUI&lt;/a&gt;, signup, and you will receive daily design challenges to keep you on toes. Post your designs on Behance and Dribbble as much as you can to keep perfecting skills and concepts you've learnt.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5create-a-portfolio"&gt;
  &lt;/a&gt;
  5.CREATE A PORTFOLIO
&lt;/h3&gt;

&lt;p&gt;A portfolio is like an online resume. Its a webpage that showcases who you are, what tools you have used, processes, experience and previous designs that you have worked on. You can create your portfolio in two ways. One, code it all in HTML, CSS &amp;amp; Javascript or use sites like &lt;a href="http://webflow.com"&gt;Webflow&lt;/a&gt;,&lt;a href="http://quest.ai"&gt;Quest ai&lt;/a&gt; and &lt;a href="http://uxfol.io/"&gt;Uxfolio&lt;/a&gt; to do it with no code.&lt;/p&gt;

&lt;p&gt;With that, I believe you are on the right path to getting a role as a Designer, either in interface, experience or even product. Remember, keep on practicing and learning. To making more users happy🥂.&lt;/p&gt;

&lt;p&gt;Oh, some bonus sites for stuff you might need in between your journey:&lt;a href="https://www.evernote.design"&gt;Evernote&lt;/a&gt;, &lt;a href="https://www.ui8.net"&gt;ui8&lt;/a&gt;, &lt;a href="https://www.ls.graphics"&gt;lsgraphics&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Cheers friends!&lt;/p&gt;
&lt;/blockquote&gt;

</description>
    </item>
    <item>
      <title>Git Cheat Sheet</title>
      <author>Sriram Rajamani</author>
      <pubDate>Sun, 03 Oct 2021 11:59:30 +0000</pubDate>
      <link>https://dev.to/ramjisriram/git-cheat-sheet-57j</link>
      <guid>https://dev.to/ramjisriram/git-cheat-sheet-57j</guid>
      <description>&lt;p&gt;Git is an open source version control system that works locally to help developers work together on software projects that matter. This cheat sheet provides a quick reference to commands that are useful for working and collaborating in a Git repository (repo).&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#initializing"&gt;
  &lt;/a&gt;
  Initializing
&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Starting up Git within a project and getting it connected.&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Initializes (or starts) your current working directory (folder) as a Git repository (repo).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone https://www.github.com/username/repo-name
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Copies an existing Git repo hosted remotely.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git remote  (or)  git remote -v
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Shows your current Git directory's remote repo. Use the -v flag for more info.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git remote add upstream https://www.github.com/username/repo-name
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Adds the Git upstream to a URL.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#staging"&gt;
  &lt;/a&gt;
  Staging
&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Creating files staged after modifying a file and marking it ready to go in the next commit.&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git status
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Checks the status of your Git repo, including files added that are not staged.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git add  .   (or)   git add my_script.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Stages modified files. If you make changes that you want included in the next commit, you can run add again. Use "git add." for all files to be staged, or specify specific files by name.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git reset my_script.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Removes a file from staging while retaining changes within your working directory.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#committing"&gt;
  &lt;/a&gt;
  Committing
&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Recording changes made to the repo.&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git commit -m "Commit message"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Commits staged files with a meaningful commit message so that you and others can track commits.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git commit -am "Commit message"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Condenses all tracked files by committing them in one step.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git commit --amend -m "New commit message" 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Modifies your commit message.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#branching"&gt;
  &lt;/a&gt;
  Branching
&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Isolating work and managing feature development in one place.&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git branch
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lists all current branches. An asterisk (*) will appear next to your currently active branch.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git branch new-branch
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Creates a new branch. You will remain on your currently active branch until you switch to the new one.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git checkout another-branch
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Switches to any existing branch and checks it out into your current working directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git checkout -b new-branch
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Consolidates the creation and checkout of a new branch.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git branch -d branch-name
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Deletes a branch.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#collaborating-and-sharing"&gt;
  &lt;/a&gt;
  Collaborating and Sharing
&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Downloading changes from another repository or sharing changes with the larger codebase.&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git push origin main
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Pushes or sends your local branch commits to the remote repo. Note: some repos use master instead of main in their commands.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git pull
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Fetches and merges any commits from the tracking remote branch.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git merge upstream/main
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Merges the fetched commits.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#showing-changes"&gt;
  &lt;/a&gt;
  Showing Changes
&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;See changes between commits, branches, and more.&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git diff --staged
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Compares modified files that are in the staging area.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git diff a-branch..b-branch
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Displays the diff of what is in 'a-branch' but is not in 'b-branch'.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git diff 99abcde..1122gghh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Uses commit id to show the diff between two specific commits.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#log"&gt;
  &lt;/a&gt;
  Log
&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;The history of changes.&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git log
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Displays important information about our commit history, like the ID of the commits, the author, the date and where is the head.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git log --all --decorate --oneline --graph
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Draws a graphical representation in one line and it's very visual.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#download-git-cheatsheet"&gt;
  &lt;/a&gt;
  Download Git Cheatsheet
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HKt2DnH4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d29nlbojtknrgol13do8.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HKt2DnH4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d29nlbojtknrgol13do8.jpg" alt="Git Cheatsheet Single Page"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>git</category>
      <category>github</category>
      <category>cheatsheet</category>
      <category>cheat</category>
    </item>
    <item>
      <title>How can you embed a simple CODE EDITOR.</title>
      <author>Kavindu Santhusa</author>
      <pubDate>Sun, 03 Oct 2021 11:25:57 +0000</pubDate>
      <link>https://dev.to/ksengine/how-can-you-embed-a-simple-code-editor-1kni</link>
      <guid>https://dev.to/ksengine/how-can-you-embed-a-simple-code-editor-1kni</guid>
      <description>&lt;p&gt;Today we're going to embed an code editor in website.&lt;br&gt;
I found a code editor called codemirror. which is lighter than monaco.&lt;/p&gt;

&lt;blockquote&gt; See my last article -  
&lt;div class="ltag__link"&gt;
  &lt;a href="/ksengine" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qf9ueStI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--873xoY8Q--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/714827/d419ccd6-7e6f-4a23-b3c3-33fc69131069.png" alt="ksengine"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/ksengine/embed-vscode-single-file-editor-in-your-website-176j" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Embed VSCode single file editor in your website.&lt;/h2&gt;
      &lt;h3&gt;Kavindu Santhusa ・ Oct 2 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#vscode&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;

&lt;/blockquote&gt;

&lt;blockquote&gt; **CodeMirror** is a versatile text editor implemented in JavaScript for the browser. It is specialized for editing code, and comes with a number of language modes and addons that implement more advanced editing functionality.&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vFuVTx_a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/codemirror/CodeMirror/raw/master/doc/logo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vFuVTx_a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/codemirror/CodeMirror/raw/master/doc/logo.png" alt="Codemirror Logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For features visit &lt;a href="https://codemirror.net/#features"&gt;CodeMirror WebSite&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/ksenginew/embed/gORJpQv?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example-explained"&gt;
  &lt;/a&gt;
  Example Explained
&lt;/h2&gt;

&lt;p&gt;The easiest way to use CodeMirror is to simply load the script and style sheet , plus a mode script (Here I'm using Javascript mode script). For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.63.1/codemirror.min.css"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.63.1/codemirror.min.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.63.1/mode/javascript/javascript.min.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then Create a dummy text box for your Editor&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;textarea&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"editor"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  your code here...
&lt;span class="nt"&gt;&amp;lt;/textarea&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Having done this, an editor instance can be created like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;editor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;CodeMirror&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromTextArea&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;editor&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;javascript&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then enjoy it.&lt;br&gt;
I hope to write more articles with advanced use cases of embedded editor. &lt;br&gt;
Follow 🏃‍♂️ me for more articles.&lt;br&gt;
Ask🙏 any question on comments section.&lt;br&gt;
Star⭐ me if you love this article.&lt;/p&gt;

&lt;p&gt;&lt;sup&gt;cover image by &lt;a href="https://unsplash.com/photos/oXlXu2qukGE?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditShareLink"&gt;Unsplash&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Happy Coding 👩‍💻👩‍💻👩‍💻...&lt;br&gt;
Thanks. ❤️❤️❤️&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>html</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Deploy React Apps using Apache2, how and why?</title>
      <author>Amr Halim</author>
      <pubDate>Sun, 03 Oct 2021 11:23:12 +0000</pubDate>
      <link>https://dev.to/amrhalim/deploy-react-apps-using-apache2-how-and-why-2890</link>
      <guid>https://dev.to/amrhalim/deploy-react-apps-using-apache2-how-and-why-2890</guid>
      <description>&lt;p&gt;In this article we will together go through the process of deploying front end applications to production environments ( specifically &lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt; applications ).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-does-the-web-work"&gt;
  &lt;/a&gt;
  How does the web work?
&lt;/h3&gt;

&lt;p&gt;Before we dig into the actual steps needed to deploy React applications, let’s first think about how the web works in general.&lt;/p&gt;

&lt;p&gt;When you visit a URL like this: &lt;code&gt;http://my-domain.com/user/profile&lt;/code&gt;, you’re basically sending a request searching the web to find if there’s an &lt;a href="https://support.dnsimple.com/articles/a-record/"&gt;A record&lt;/a&gt; for this domain linked to any IP address, aka server, and if it finds one, it sends this request to that server. But for this server to be able to handle that request, there needs to be some kind of software, from now on let’s call it a &lt;a href="https://en.wikipedia.org/wiki/Web_server"&gt;web server&lt;/a&gt; to handle this request and get some response to send it back to you!&lt;/p&gt;

&lt;p&gt;There are many web servers out there that you can use. For this article, we’ll focus on the configurations for &lt;a href="https://httpd.apache.org/"&gt;Apache2&lt;/a&gt;. Another popular option that can be used is &lt;a href="https://www.nginx.com/"&gt;Nginx&lt;/a&gt;, but the idea is exactly the same.&lt;/p&gt;

&lt;p&gt;When this request reaches the web server, what happens is that the web server checks if this domain name ( in our case &lt;code&gt;http://my-domain.com&lt;/code&gt; ) is configured to any directory/folder in this server ( in case of Apache2, the default root directory is &lt;code&gt;/var/www/html&lt;/code&gt; ), and if so, it basically serves/displays the web application/hosted files on the path that you passed in the URL, &lt;code&gt;/user/profile&lt;/code&gt;. Which means that this request will go to the files ( by default an index.html file ) in the &lt;code&gt;/var/www/html/user/profile&lt;/code&gt; directory.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#virtual-hosts"&gt;
  &lt;/a&gt;
  Virtual Hosts
&lt;/h3&gt;

&lt;p&gt;The way you configure the domain-names/directories mapping in Apache2 is by configuring what we call a &lt;a href="https://httpd.apache.org/docs/2.4/vhosts/"&gt;virtual host&lt;/a&gt; in this path &lt;code&gt;/etc/apache2/sites-available/default&lt;/code&gt;, which basically allows you to host multiple web applications on the same machine, each in a separate directory.&lt;/p&gt;

&lt;p&gt;A basic Virtual Host will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;VirtualHost YOUR_IP_ADDRESS:80&amp;gt;
  ServerName www.my-domain.com
  ServerAlias my-domain.com
  DocumentRoot "/var/www/html"
  AllowOverride All
&amp;lt;/VirtualHost&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This configurations basically mean that any incoming request to &lt;code&gt;YOUR_IP_ADDRESS&lt;/code&gt;, on PORT &lt;code&gt;80&lt;/code&gt; ( which is the default port for Apache2 ), will serve the files stored in the &lt;code&gt;/var/www/html&lt;/code&gt; directory, following the URL that the user requested, from now on let's call it &lt;code&gt;Route&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Note that we had to add &lt;code&gt;AllowOverride All&lt;/code&gt;, and that's necessary because we'll need to add an &lt;a href="#htaccess-file"&gt;.htaccess&lt;/a&gt; file later on and this needs to be there for it work.&lt;/li&gt;
&lt;li&gt;You might find this property in your default configurations with &lt;code&gt;AllowOverride None&lt;/code&gt;, you just need to change it to &lt;code&gt;All&lt;/code&gt;, and remember to restart your Apache2 configurations by running this command &lt;code&gt;sudo systemctl apache2 restart&lt;/code&gt;, or an equivalent command for your webserver, to restart your configurations.&lt;/li&gt;
&lt;/ul&gt;

&lt;h6&gt;
  &lt;a href="#https-configurations"&gt;
  &lt;/a&gt;
  HTTPs Configurations
&lt;/h6&gt;

&lt;p&gt;If you want your application to run on https, you will also need to have another configuration files to handle your incoming secured requests, but that's out of the scope of this article.&lt;/p&gt;

&lt;p&gt;I might post another article later on how you can create and maintain a self signed certificate using &lt;a href="https://letsencrypt.org/"&gt;let's encrypt&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For the sake of this article, we'll assume that your application is going to be hosted on the root folder of the server, aka the default configurations.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hosting-files"&gt;
  &lt;/a&gt;
  Hosting Files
&lt;/h3&gt;

&lt;p&gt;Once you configure your domain to point to your server and add your virtual hosts, then you can basically host any file of any extension on this server to be served using this domain.&lt;/p&gt;

&lt;p&gt;One way to respond to a user who is sending the &lt;code&gt;/user/profile&lt;/code&gt; request is to create a directory &lt;code&gt;/user/profile&lt;/code&gt; in the root directory of this domain, and then create an &lt;code&gt;index.html&lt;/code&gt; file in this directory. In this case, the content of this file will be served to the user.&lt;/p&gt;

&lt;p&gt;But that's not why we're here! So let's talk about React deployment flow.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#react-deployment-flow"&gt;
  &lt;/a&gt;
  React Deployment Flow
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#build-your-app"&gt;
  &lt;/a&gt;
  Build your app
&lt;/h4&gt;

&lt;p&gt;To deploy a react application you'll first need to build your application, this might differ according to the way you structured your application. But regardless of how your app is configured, you should be able to run a similar command to &lt;code&gt;npm run build&lt;/code&gt; command to build your app, which will give you the final build files in a folder called &lt;code&gt;build&lt;/code&gt;, and those are the files that we need to deploy/upload to the web application path on the server ( in our case &lt;code&gt;/var/www/html/&lt;/code&gt; ).&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#two-important-points-to-notice-here"&gt;
  &lt;/a&gt;
  Two important points to notice here:
&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;in the &lt;code&gt;root&lt;/code&gt; folder of your build folder you'll find an &lt;code&gt;index.html&lt;/code&gt; file;&lt;/li&gt;
&lt;li&gt;if you open this file, you'll find in the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; section one or more &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags that point to your React application code, including how you're handling your routes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="#hosting-files"&gt;Remember&lt;/a&gt; how we talked about hosting static files, specifically &lt;code&gt;index.html&lt;/code&gt; files to the server? Keep that in mind for now.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#deploy-your-files"&gt;
  &lt;/a&gt;
  Deploy your files
&lt;/h4&gt;

&lt;p&gt;One of the ways you can use to upload your files to the server is using FTP ( File Transfer Protocol ) softwares, I usually use &lt;a href="https://filezilla-project.org/"&gt;FileZilla&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You might also be using docker or git to host your build files, and all you have to do at this point is to fetch the latest updates to your folder or re-run your docker image/container with the latest updates.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#htaccess-file"&gt;
  &lt;/a&gt;
  .htaccess file
&lt;/h4&gt;

&lt;p&gt;Before we talk about this file and give an example of the minimal content you need to have for your app to work on Apache2 web server, let's first quickly remember the incoming request that we're trying to send to our server.&lt;/p&gt;

&lt;p&gt;I'm assuming at the moment that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;/var/www/html/&lt;/code&gt; folder is empty;&lt;/li&gt;
&lt;li&gt;you have a route in your React app that's called &lt;code&gt;/user/profile&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;the incoming request is trying to reach the &lt;code&gt;/user/profile/&lt;/code&gt; route.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But in fact, there's no directory path in our server that matches this route, so what will happen now if we don't have any instructions to our web server ( Apache2 ) to handle this incoming request, you'll definitely get a 404 Not Found error page!&lt;/p&gt;

&lt;p&gt;That's why we need to add the &lt;a href="https://httpd.apache.org/docs/current/howto/htaccess.html"&gt;.htaccess file&lt;/a&gt; to instruct Apache2 to basically redirect all the incoming requests to this folder to the index.html file, &lt;a href="#two-important-points-to-notice-here"&gt;which will know how to handle your request&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Finally, let's have a look on how the &lt;code&gt;.htaccess&lt;/code&gt; file should look like at the minimal shape for your React application to work ( this piece of code is stolen from the official &lt;a href="https://create-react-app.dev/docs/deployment/"&gt;React deployment page&lt;/a&gt;, don't tell anyone! ):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    Options -MultiViews
    RewriteEngine On
    RewriteCond %{REQUEST_FILENAME} !-f
    RewriteRule ^ index.html [QSA,L]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By default, Apache2 will ignore all the &lt;code&gt;.htaccess&lt;/code&gt; files. You will need to install &lt;a href="http://httpd.apache.org/docs/current/mod/mod_rewrite.html"&gt;a module&lt;/a&gt; to tell Apache2 to enable overriding the directories configurations using .htaccess files. To do that, you just need to run this command &lt;code&gt;sudo a2enmod rewrite&lt;/code&gt;. Don't forget to restart Apache2 for this configuration to take place. Simply run &lt;code&gt;sudo systemctl apache2 restart&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And that's it! Now you have your application up and running on production.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>devops</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Getting Started: Git and Github for beginners with Hacktoberfest 2021</title>
      <author>Muddhit Baid</author>
      <pubDate>Sun, 03 Oct 2021 11:18:40 +0000</pubDate>
      <link>https://dev.to/mukulbaid63/getting-started-git-and-github-for-beginners-with-hacktoberfest-2021-3b51</link>
      <guid>https://dev.to/mukulbaid63/getting-started-git-and-github-for-beginners-with-hacktoberfest-2021-3b51</guid>
      <description>&lt;p&gt;&lt;strong&gt;At the stroke of the midnight hour, when the world sleeps, Programmers will awake to celebrate Hacktoberfest. A moment comes, which comes but once in a year, when we step in the Open Source Planet— when PR’s rain, when the swags wait for you&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Beginning of the October, marks the beginning of Open source journey of a developer and the &lt;a href="https://hacktoberfest.digitalocean.com/"&gt;Hacktoberfest🎉&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For all the aspiring developers, this article is for you to start the contribution. We will be having look towards overview on Git &amp;amp; Github and also the steps to make you first PR.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;P.S: PR → Pull request.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Git is a version control system used for collaboration and tracking software in the development process. It’s largely used from solo programmers to big tech giants.&lt;/p&gt;

&lt;p&gt;Github, along with being a software for version control, feature tracking, hosting &amp;amp; lot more functionalities, its also a gigantic community for developers.&lt;/p&gt;

&lt;p&gt;To get started:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Create a Github account by signing up here.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After signing up, you will land up to you account dashboard. After it, create a new Repository by navigating in the repositories tab, and click on the Create New button.&lt;br&gt;
&lt;a href="https://ibb.co/VT4PbFd"&gt;New Repo Demo&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now Download and install the latest version of git from &lt;a href="https://git-scm.com/downloads"&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After the installation is done, open the Terminal or Command Prompt and execute the following commands to configure your git setup.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;git config --global user.name "&amp;lt;Enter your github username&amp;gt;"&lt;/code&gt;&lt;br&gt;
&lt;code&gt;git config --global user.email "&amp;lt;Enter your github email&amp;gt;"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You have successfully setup you git and github!! Yay🎉.&lt;br&gt;
Now heading towards the PR.&lt;/p&gt;

&lt;p&gt;First select the repository &lt;em&gt;(Newbies don’t worry, i have handpicked some top repos for you at the end)&lt;/em&gt; which you want to work on and then open it. Finding good repositories might require some effort but whenever you’re looking a repo, Please firstly check if the Opened Issues(in Issues tab) can be solved by you or not. You can then comment inside a issue, asking the repository maintainers to assign it to you. After its assigned to you, Fork the repository by clicking on the fork button on the top right corner, this will fork and create a copy of original repo in your account.&lt;br&gt;
&lt;a href="https://ibb.co/4FPsnQH"&gt;Fork Demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click in the Code button and copy the url. I have taken one of my repository for the demo, you can also commit here.&lt;/p&gt;

&lt;p&gt;Now execute the following command in your terminal( GIT BASH will be preferred, this comes along with the git) along with the copied URL.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git clone &amp;lt;COPIED_URL&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Eg: &lt;code&gt;git clone https://github.com/Mukulbaid63/Hack-with-JavaScript&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://ibb.co/qDcQKv1"&gt;Successful clone message&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Above command clones the repository in the your local system.&lt;/p&gt;

&lt;p&gt;Exexcute this command to go inside your repo.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cd &amp;lt;REPO_NAME&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;At this point our commits will be going to the master branch but it’s advised to not commit in master branch, because the reviewers may review and then merge it , if it passes all the checks. So to create a new branch , execute the command below:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git checkout -b &amp;lt;NEW_BRANCH_NAME&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Let’s decode the above command &lt;code&gt;-b&lt;/code&gt; creates a new branch and checkout switches the branch.&lt;/p&gt;

&lt;p&gt;Now open the cloned folder in VS code(you can use any other code editors also). Now open the file which requires the changes. Complete all the requirements given in it and then save all the files.&lt;/p&gt;

&lt;p&gt;After the issue is resolved and working on your local system, now its time to push it in the original repository.&lt;br&gt;
Open Terminal and Follow the steps:&lt;/p&gt;

&lt;p&gt;Execute the command to add all your changes to STAGING area.&lt;br&gt;
&lt;code&gt;git add .&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you want to commit only some files, then add the filename instead instead of .&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Now to commit the changes from STAGING area, execute the command below:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;git commit -am "&amp;lt;COMMIT_MESSAGE&amp;gt;"&lt;/code&gt;&lt;br&gt;
&lt;code&gt;-m&lt;/code&gt;: Sets the commit message.&lt;br&gt;
&lt;code&gt;-a&lt;/code&gt; or &lt;code&gt;— all&lt;/code&gt;: Commits all modified or deleted files.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The last step will be to push the commits to the branch which you created initally.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;git push origin &amp;lt;YOUR_BRANCH_NAME&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://ibb.co/542q5pv"&gt;Successful Push&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After successful push, you will see similar message as the above one. Now head towards the forked repo in Github. You will find some change there.&lt;br&gt;
&lt;a href="https://ibb.co/KNLY7qg"&gt;Pull request in Github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Similar row will appear after successful push, to create a PR , click on Compare &amp;amp; pull request . It will land you to the page shown below.&lt;br&gt;
&lt;a href="https://ibb.co/4FPsnQH"&gt;PR creation Page&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By adding proper commit name and comments which can help your changes be clear to anyone other who opens your PR, you can now click on Create pull request. This creates the PR😀🎉. You can check the status on the Pull requests tab.&lt;br&gt;
&lt;a href="https://ibb.co/gJNTs2f"&gt;PR created&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And that’s it. &lt;strong&gt;You have successfully created your first PR&lt;/strong&gt;. Now , sit back and enjoy a cup of tea, as now your PR will be merged by the maintainer if it fulfills all the requirements. After its merged here, you can see the changes in the original repo also.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Get 4 PR’s merged in a month and here comes the Hacktoberfest swags for you!!!👏&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you’re struggling to find a Repository to work on, here are some top and handpicked repos by me, especially for beginners.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/praveenscience/FinalYear-Project-Ideas"&gt;https://github.com/praveenscience/FinalYear-Project-Ideas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/vinitshahdeo/Hacktoberfest2021"&gt;https://github.com/vinitshahdeo/Hacktoberfest2021&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/HarshCasper/Rotten-Scripts"&gt;https://github.com/HarshCasper/Rotten-Scripts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/AshuKulu/HacktoberFest2021"&gt;https://github.com/AshuKulu/HacktoberFest2021&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Sushreesatarupa/DSA-cpp-Hacktoberfest2021"&gt;https://github.com/Sushreesatarupa/DSA-cpp-Hacktoberfest2021&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/aritraroy24/HACKTOBERFEST2021_PATTERN"&gt;https://github.com/aritraroy24/HACKTOBERFEST2021_PATTERN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/designerSaha/status/1443455576852217858"&gt;https://twitter.com/designerSaha/status/1443455576852217858&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Resources:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://hf.praveen.science/"&gt;https://hf.praveen.science/&lt;/a&gt; 👈🏻 Must check this🤩&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://learngitbranching.js.org/(for"&gt;https://learngitbranching.js.org/(for&lt;/a&gt; better visualization)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Connect with me: &lt;strong&gt;&lt;a href="https://www.linkedin.com/in/mukulbaid63/"&gt;Linkedin&lt;/a&gt;&lt;/strong&gt; | &lt;strong&gt;&lt;a href="https://twitter.com/MuddhitCodes"&gt;Twitter&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>hacktoberfest</category>
      <category>opensource</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Archive Manager in Python with simple GUI</title>
      <author>Abel Ayalew</author>
      <pubDate>Sun, 03 Oct 2021 11:12:40 +0000</pubDate>
      <link>https://dev.to/nabroleonx/extracting-zip-files-with-python-1jdc</link>
      <guid>https://dev.to/nabroleonx/extracting-zip-files-with-python-1jdc</guid>
      <description>&lt;p&gt;How many of us use archiver extractor tools to extract &lt;strong&gt;zip&lt;/strong&gt; files. On top of that some tools are not user-friendly, so we have hard time utilizing them how we want to. However, with python extracting files has always been easier. Let's look at some common examples.&lt;/p&gt;

&lt;p&gt;For the task we will use python's built-in module &lt;code&gt;zipfile&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;From the various functionalities that this module provides, we are going to see how to:-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Extract all files in a zip file.&lt;/li&gt;
&lt;li&gt;Extract a single file.&lt;/li&gt;
&lt;li&gt;Extract specific files using certain conditions.&lt;/li&gt;
&lt;li&gt;Extracting password protected files.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's talk about them in a bit more detail. We are going to use a common snippet for all of them and change only the required lines.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;zipfile&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ZipFile&lt;/span&gt;

&lt;span class="n"&gt;path_of_zip_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Enter path of the zip file &amp;gt; "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;path_to_extract_to&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Enter the path you want to extract to &amp;gt; "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;ZipFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path_of_zip_file&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# here is where the codes are gonna go
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#1-extract-all-files-in-a-zip-file"&gt;
  &lt;/a&gt;
  1. Extract all files in a zip file.
&lt;/h4&gt;

&lt;p&gt;For this we will just use the &lt;code&gt;extractall()&lt;/code&gt; method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extractall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;directory_to_extract_to&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#2-extract-a-single-file"&gt;
  &lt;/a&gt;
  2. Extract a single file.
&lt;/h4&gt;

&lt;p&gt;To extract a single file we are going to use &lt;code&gt;read()&lt;/code&gt; method of &lt;code&gt;ZipFile&lt;/code&gt; objects. The &lt;code&gt;read()&lt;/code&gt; method returns the bytes of the file name in the archive, so we are gonna take that and create the file with it. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;ZipFile.read(name, pwd=None)&lt;/code&gt; method takes two parameters &lt;em&gt;Name&lt;/em&gt; and &lt;em&gt;Password&lt;/em&gt;. If you are working with encrypted file, don't forget to add your password. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Now, we are going create a variable for our file name below the paths we declared on the common code snippet, but you can pass the file name directly too. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We are going to import &lt;code&gt;os&lt;/code&gt; module, to write our file in the path we chose.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;file_name= os.path.join(directory_to_extract_to, file_to_extract)&lt;br&gt;
&lt;/code&gt;&lt;br&gt;
Now we can create our file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'wb'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#3-extract-specific-files-using-certain-conditions"&gt;
  &lt;/a&gt;
  3. Extract specific files using certain conditions.
&lt;/h4&gt;

&lt;p&gt;Sometimes we may not want to extract everything in a zip file. For example we may want to extract &lt;strong&gt;.py&lt;/strong&gt; files only. We can so this very easily using conditions. Our condition doesn't have to be file extension, but to easily demonstrate we will be using that here.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;namelist&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;".py"&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#4-extracting-password-protected-files"&gt;
  &lt;/a&gt;
  4. Extracting password protected files.
&lt;/h4&gt;

&lt;p&gt;This is pretty straightforward like we mentioned earlier. Just create a variable for your password and pass it in or you can just pass it in as it is too.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extractall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;directory_to_extract_to&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pwd&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s"&gt;'password'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#note"&gt;
  &lt;/a&gt;
  ❗NOTE:
&lt;/h4&gt;

&lt;p&gt;Decryption is extremely slow as it is implemented in native Python rather than C.&lt;/p&gt;

&lt;p&gt;I wanted to show how we can give our console app a user-friendly GUI using the &lt;a href="https://github.com/chriskiehl/Gooey"&gt;&lt;code&gt;Gooey module&lt;/code&gt;&lt;/a&gt;, but I didn't want the post to be longer than it is. However, you can check the implementation in my &lt;a href="https://github.com/nabroleonx/Archive-Manager"&gt;Github&lt;/a&gt;. It is a very basic implementation, so read the documentation of gooey and you can add many features to it. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don't forget to leave a star if you like it😉.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you like what you read, follow for more.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://twitter.com/nabroleonx"&gt;Twitter&lt;/a&gt; |  &lt;a href="https://linkedin.com/in/abel-ayalew-a564b7210/"&gt;Linkedin&lt;/a&gt; |  &lt;a href="https://github.com/nabroleonx"&gt;Github&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>productivity</category>
      <category>beginners</category>
    </item>
    <item>
      <title>VIM - Beginners Guide</title>
      <author>Vishwa Mittar</author>
      <pubDate>Sun, 03 Oct 2021 10:58:54 +0000</pubDate>
      <link>https://dev.to/vishwasluhana/vim-beginners-guide-274m</link>
      <guid>https://dev.to/vishwasluhana/vim-beginners-guide-274m</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;VIM is a text editor for writing code, where you navigate around the screen with the &lt;strong&gt;Keyboard&lt;/strong&gt; instead of a &lt;strong&gt;Mouse&lt;/strong&gt;.&lt;br&gt;
It is based on original UNIX text editor named &lt;strong&gt;VI&lt;/strong&gt; which came about in 1976 by &lt;em&gt;Bill Joy&lt;/em&gt;. It was later improved by &lt;em&gt;Bram Mooleenar&lt;/em&gt; in 1991 with bunch of improvements and named &lt;strong&gt;VIM&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-vim"&gt;
  &lt;/a&gt;
  Why VIM?
&lt;/h2&gt;

&lt;p&gt;Why would you use VIM when we have modern IDEs? The answer is, when you write code, your fingers should be bound to keyboard all the time. Every time you touch mouse your work rate is interrupted.&lt;br&gt;
Learning to code with VIM is same as learning something new from scratch, it will be painful at first but that pain will lead you to more precise and productive code editing in the future.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Linux&lt;/strong&gt;/&lt;strong&gt;MacOS&lt;/strong&gt;: VIM comes preinstalled.&lt;br&gt;
&lt;strong&gt;Windows&lt;/strong&gt;: &lt;a href="https://www.vim.org/download.php"&gt;Download VIM&lt;/a&gt;, Download the installer and install it. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-use"&gt;
  &lt;/a&gt;
  How to use
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Linux&lt;/strong&gt;/&lt;strong&gt;MacOS&lt;/strong&gt;: Type "vim filename.txt" in terminal (without quotations)&lt;br&gt;
&lt;strong&gt;Windows&lt;/strong&gt;: Open "gVim8.1" from desktop or search in start menu.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#vim-modes-press-esc-to-switch-between-modes"&gt;
  &lt;/a&gt;
  Vim Modes (Press &lt;strong&gt;Esc&lt;/strong&gt; to switch between modes)
&lt;/h2&gt;

&lt;p&gt;VIM has many modes, but these four are commonly used:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#normal-mode"&gt;
  &lt;/a&gt;
  Normal mode
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;If you see cursor thicker or little wide, means you're in normal mode.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Normal mode is Vim's default mode and you'll be using it most of the time. When you are in normal mode you can navigate and perform operations throughout the file.&lt;/p&gt;

&lt;p&gt;You can move cursor between characters, words, lines, sentences, paragraphs. code blocks and more.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#characters"&gt;
  &lt;/a&gt;
  Characters
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;"h"&lt;/strong&gt; (move left to character)&lt;br&gt;
&lt;strong&gt;"l"&lt;/strong&gt; (move right to character)&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#words"&gt;
  &lt;/a&gt;
  Words
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;"w"&lt;/strong&gt; (move to next word)&lt;br&gt;
&lt;strong&gt;"e"&lt;/strong&gt; (move the end of current word)&lt;br&gt;
&lt;strong&gt;"b"&lt;/strong&gt; (move back to the previous word)&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#lines"&gt;
  &lt;/a&gt;
  Lines
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;"j"&lt;/strong&gt; (previous line)&lt;br&gt;
&lt;strong&gt;"k"&lt;/strong&gt; (next line)&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#sentences"&gt;
  &lt;/a&gt;
  Sentences
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;"("&lt;/strong&gt; (previous sentence)&lt;br&gt;
&lt;strong&gt;")"&lt;/strong&gt; (next sentence)&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#paragraphs"&gt;
  &lt;/a&gt;
  Paragraphs
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;"{"&lt;/strong&gt; (previous Paragraph)&lt;br&gt;
&lt;strong&gt;"}"&lt;/strong&gt; (next Paragraph)&lt;/p&gt;

&lt;p&gt;For simplification:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8f4IeCto--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o2g9sh1mf3rotebof7yo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8f4IeCto--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o2g9sh1mf3rotebof7yo.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;k&lt;/strong&gt; (up)&lt;br&gt;
&lt;strong&gt;j&lt;/strong&gt; (down)&lt;br&gt;
&lt;strong&gt;h&lt;/strong&gt; (left)&lt;br&gt;
&lt;strong&gt;l&lt;/strong&gt; (right)&lt;br&gt;
You can also use arrow keys to navigate but for best practice you must use (k,j,h,l).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#insert-mode"&gt;
  &lt;/a&gt;
  Insert mode
&lt;/h3&gt;

&lt;p&gt;Press &lt;strong&gt;i&lt;/strong&gt; key in the normal mode to get into &lt;strong&gt;insert&lt;/strong&gt; mode. &lt;em&gt;The word INSERT will appear at the bottom of the screen.&lt;/em&gt;&lt;br&gt;
You can think of it like &lt;em&gt;edit&lt;/em&gt; mode, because now you can write/delete inside the file.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#keys-to-get-into-insert-mode"&gt;
  &lt;/a&gt;
  Keys to get into &lt;em&gt;insert&lt;/em&gt; mode:
&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;Make sure you're in normal mode then press,&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;i&lt;/strong&gt; (insert from the right of the character)&lt;br&gt;
&lt;strong&gt;a&lt;/strong&gt; (insert from the left of the character)&lt;br&gt;
&lt;strong&gt;I&lt;/strong&gt; (insert from the start of the line)&lt;br&gt;
&lt;strong&gt;A&lt;/strong&gt; (insert from the end of the line)&lt;/p&gt;

&lt;p&gt;Once you are done with editing your file, press &lt;strong&gt;Esc&lt;/strong&gt; key to go back to the normal mode.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#command-mode"&gt;
  &lt;/a&gt;
  Command mode
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Commands can only be typed in **Normal&lt;/em&gt;* mode.*&lt;br&gt;
When you're in normal mode, you can write commands. Every command starts with &lt;strong&gt;":"&lt;/strong&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#basic-commands"&gt;
  &lt;/a&gt;
  Basic commands:
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;:w&lt;/strong&gt; (save file)&lt;br&gt;
&lt;strong&gt;:q&lt;/strong&gt; (quit file. &lt;em&gt;but the file must be saved first&lt;/em&gt;)&lt;br&gt;
&lt;strong&gt;:wq&lt;/strong&gt; (save and quit)&lt;br&gt;
&lt;strong&gt;:q!&lt;/strong&gt; (quit without saving)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;There are many more commands, but these are the common and you'll need these all the time.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#visual-mode"&gt;
  &lt;/a&gt;
  Visual mode
&lt;/h3&gt;

&lt;p&gt;When editing text with Vim, visual mode can be extremely useful for identifying chunks of text to be manipulated.&lt;/p&gt;

&lt;p&gt;Press the &lt;strong&gt;v&lt;/strong&gt; key to enter &lt;strong&gt;visual&lt;/strong&gt; mode. &lt;em&gt;The word VISUAL will appear at the bottom of the screen.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Use the Arrow keys to highlight the desired text. You can use other navigation commands, such as &lt;strong&gt;w&lt;/strong&gt; to highlight to the beginning of the next word or &lt;strong&gt;$&lt;/strong&gt; to include the rest of the line.&lt;br&gt;
Once the text is highlighted, press the &lt;strong&gt;d&lt;/strong&gt; key to delete/cut the text.&lt;br&gt;
If you deleted too much or not enough, press &lt;strong&gt;u&lt;/strong&gt; to undo and start again.&lt;br&gt;
Move your cursor to the new location and press &lt;strong&gt;p&lt;/strong&gt; to paste the text.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tips-and-tricks"&gt;
  &lt;/a&gt;
  Tips and tricks
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;To go forward 3 words, instead of &lt;strong&gt;www&lt;/strong&gt;, we can do &lt;strong&gt;3w&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;To go down 10 lines, instead of &lt;strong&gt;jjjjjjjjjj&lt;/strong&gt;, we can do &lt;em&gt;10j&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;dw&lt;/strong&gt; to delete a word.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;dd&lt;/strong&gt; to delete a word in a line.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;x&lt;/strong&gt; to delete a character.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;r&lt;/strong&gt; followed by new character to replace a character.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There's still a lot to learn. Keep exploring. Happy coding.&lt;/p&gt;

&lt;p&gt;If you learnt something from this article, please like, comment and share.&lt;/p&gt;

&lt;p&gt;Follow me on &lt;a href="https://www.instagram.com/vishwas_luhana"&gt;Instagram&lt;/a&gt;.&lt;br&gt;
Follow me on &lt;a href="https://www.facebook.com/luhanavishwas"&gt;Facebook&lt;/a&gt;.&lt;br&gt;
Follow me on &lt;a href="https://twitter.com/vixvos"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>vim</category>
      <category>programming</category>
      <category>linux</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
