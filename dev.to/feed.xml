<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Four tricky JavaScript concepts in one line of code</title>
      <author>Per Enström</author>
      <pubDate>Fri, 10 Dec 2021 14:09:35 +0000</pubDate>
      <link>https://dev.to/perenstrom/four-tricky-javascript-concepts-in-one-line-of-code-3i3p</link>
      <guid>https://dev.to/perenstrom/four-tricky-javascript-concepts-in-one-line-of-code-3i3p</guid>
      <description>&lt;p&gt;My colleague approached me the other day with a line of JavaScript code he had found on &lt;a href="https://stackoverflow.com/a/39333479/563926"&gt;Stack Overflow&lt;/a&gt;, and asked how it worked. And I thought it was such a good example of four mid to advanced concepts in JavaScript so I decided to write down my explanation here as well.&lt;/p&gt;

&lt;p&gt;The line in question is this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; 
  &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="p"&gt;}))({&lt;/span&gt; &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;d&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Before reading on, give it a think and see if you can work it out by yourself.&lt;/p&gt;

&lt;p&gt;Ready to go on? Let’s go.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#object-destructuring"&gt;
  &lt;/a&gt;
  Object destructuring
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment"&gt;Documentation at MDN&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Object destructuring is the concept of picking properties from an object in batch instead of manually accessing each property and assigning them to a variable. Say you have an object coming in as a parameter in some function, and you want to do stuff with only a few of the properties of that object. Object destructuring makes that possible.&lt;/p&gt;

&lt;p&gt;Instead of doing&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;myObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;myObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;doStuff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;we can shorten it to&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;myObject&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;doStuff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;which does the same thing. This makes the code much smaller, especially when we do stuff to multiple properties of an object. This saves us writing the full property path every time.&lt;/p&gt;

&lt;p&gt;The fancy stuff here is that this sort of destructuring works anywhere we have an object. Even when assigning input parameters for a function. So&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myFunction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myObject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;can be written as&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myFunction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#object-shorthand-form"&gt;
  &lt;/a&gt;
  Object shorthand form
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer#new_notations_in_ecmascript_2015"&gt;Documentation at MDN&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When composing objects, we often have incoming parameters from somewhere, and transform them and then return a new object. This can often look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;someDescriptiveName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;doStuff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;someOtherDescriptiveName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;doOtherStufF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;someDescriptiveName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;someDescriptiveName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;someOtherDescriptiveName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;someOtherDescriptiveName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, this feels very repetitive. We're assigning the property with the key of a certain name with the contents of a variable with the &lt;em&gt;same name&lt;/em&gt;. Luckily there is a shorter way of writing this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;someDescriptiveName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;doStuff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;someOtherDescriptiveName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;doOtherStufF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;someDescriptiveName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;someOtherDescriptiveName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can just put the variable name once, and JavaScript will understand that we want a property of the same name as the variable whose value we're using.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implicit-return-in-arrow-functions"&gt;
  &lt;/a&gt;
  Implicit return in arrow functions
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions"&gt;Documentation at MDN&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When an arrow method only has a return statement, it can be shortened to an implicit form. Quite often we write methods that only return a ternary, or a promise, or the result of a simple calculation. In this case, we don't need a full code block around the function content.&lt;/p&gt;

&lt;p&gt;Instead of doing&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;multiplyByTwo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;inputNumber&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;inputNumber&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;we can remove the &lt;code&gt;return&lt;/code&gt; keyword and remove the curly braces (or replace them with parentheses if returning an object literal).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;multiplyByTwo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;inputNumber&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;inputNumber&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Tip: In Visual Studio Code, you can put the text cursor in the middle of the arrow part of the arrow function and press &lt;code&gt;cmd + .&lt;/code&gt; to bring up the Quick fix menu, where you can quickly add or remove the braces from the function.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#calling-an-anonymous-function-directly"&gt;
  &lt;/a&gt;
  Calling an anonymous function directly
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions#basic_usage"&gt;Documentation at MDN&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is the least used of these four concepts. And possibly also the most confusing. It lets us invoke an arrow function immediately, without assigning it to a variable.&lt;/p&gt;

&lt;p&gt;Instead of doing&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myLog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nx"&gt;myLog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;world&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;we can call it directly without assigning it first&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;world&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is very rarely useful, but can be nice in some situations where you need to call an asynchronous method in a context that isn't marked as &lt;code&gt;async&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#back-to-our-confusing-line"&gt;
  &lt;/a&gt;
  Back to our confusing line
&lt;/h2&gt;

&lt;p&gt;With these four parts, we can now start deconstructing the confusing line into something that makes sense. If you've already forgotten, that's alright, here it is again:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; 
  &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="p"&gt;}))({&lt;/span&gt; &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;d&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We start from the back, and see that this is an array function that's being called immediately. Let's assign the function to a variable and call that instead.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myFunction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;myfunction&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;d&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's also move the input object to a variable to make it a bit cleaner&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myFunction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;d&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;myfunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myObject&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is already much more readable. But let's keep going. We now direct our focus to the array function, where we see that we can start by adding back the curly braces and return keyword.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myFunction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;d&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;myfunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myObject&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The next step is to remove the destructuring in the function input parameters.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myFunction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;inputObject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;inputObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;inputObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;d&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;myfunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myObject&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the final step is to remove the shorthand form of the object returned from our function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myFunction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;inputObject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;inputObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;inputObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;newObject&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;d&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;myfunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myObject&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So there we have it. We have now removed the four magic JavaScript concepts and have something that requires only basic knowledge.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when-is-complex-too-complex"&gt;
  &lt;/a&gt;
  When is complex too complex?
&lt;/h2&gt;

&lt;p&gt;As with most of these kinds of questions, it will vary greatly between different developers and teams. But as a developer your code should always be readable without too much work. But at the same time, we cannot &lt;em&gt;not&lt;/em&gt; use the concepts available to us in the language, we just have to know when to use them.&lt;/p&gt;

&lt;p&gt;I would write this line as&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pickAC&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;d&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pickAC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myObject&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This makes it much more readable than the one-liner, while at the same time keeping it short and concise. Calling an anonymous function immediately is a concept so rarely used that – in my opinion – it should only be used when absolutely necessary. But, to each their own, just make sure you agree amongst the team.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Why did I decided to be a developer?</title>
      <author>Manu Martinez</author>
      <pubDate>Fri, 10 Dec 2021 13:48:31 +0000</pubDate>
      <link>https://dev.to/whitehatdevv/why-did-i-decided-to-be-a-developer-4n89</link>
      <guid>https://dev.to/whitehatdevv/why-did-i-decided-to-be-a-developer-4n89</guid>
      <description>&lt;p&gt;Yeah, I know It should be really &lt;strong&gt;interesting&lt;/strong&gt; 😙, one day my life change &lt;strong&gt;entirely&lt;/strong&gt;,. It can sound really strange but it's the &lt;em&gt;truth&lt;/em&gt; 🤝.&lt;/p&gt;

&lt;p&gt;Being a &lt;strong&gt;developer&lt;/strong&gt; 👨🏼‍💻 has just given me some opportunities which I had never thought, working with really amazing people who make whatever they want until being able to grow daily as &lt;strong&gt;professional&lt;/strong&gt;, it means to be best that yesterday, I'm crazy, I &lt;em&gt;know&lt;/em&gt; 😅, nevertheless working in a highly intensive workspace should bring you a &lt;strong&gt;logarithm learning curve&lt;/strong&gt;. If you have already worked, as a developer, for a &lt;strong&gt;company&lt;/strong&gt; where you have thousands of partners (only in development team) you understand &lt;em&gt;what does it mean&lt;/em&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-did-i-decided-to-become-a-software-engineer"&gt;
  &lt;/a&gt;
  Why did I decided to become a software engineer?
&lt;/h2&gt;

&lt;p&gt;I always liked computer sciences and all data staff related with that field, I remember when I was developing some small algorithms in &lt;code&gt;C&lt;/code&gt; to make &lt;strong&gt;my Arduino&lt;/strong&gt; 🤔 came across my room without crashes using a &lt;code&gt;Car&lt;/code&gt;. I know, I'm really &lt;strong&gt;vicious&lt;/strong&gt; 🤧. Try to become a &lt;strong&gt;developer&lt;/strong&gt; I have had a lot of failures (it cannot be counted using my two hands), but It doesn't &lt;strong&gt;care&lt;/strong&gt; right?&lt;/p&gt;

&lt;p&gt;Everyone always forget what means &lt;strong&gt;success&lt;/strong&gt;, it really means to have thousand of failure to achieve a little little little (ten little later 🤓) small success but everyone only sees the success and think it's synonymous of &lt;strong&gt;luck&lt;/strong&gt;, but &lt;strong&gt;DEAR FRIEND&lt;/strong&gt; it isn't luck, it's only &lt;strong&gt;hard work&lt;/strong&gt;. Yeah, I know it's only &lt;strong&gt;jealousy&lt;/strong&gt; 😇.&lt;/p&gt;

&lt;p&gt;The only key to success as a &lt;em&gt;software engineer&lt;/em&gt; is to have enough nuts to focus on your work and forget every external comment you can receive 😵‍💫. Yes, it can sounds really confuse but if you are thinking what they say to you, you won't be focused on your target which is &lt;em&gt;being the best software engineer 👨🏼‍💻&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;I strongly recommend you to &lt;strong&gt;become&lt;/strong&gt; a software engineer, but no anyone, only the best software engineer you can 👻. Only keep in mind the following points: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Looking for a programming language that fit best according to what you want to develop 🤑. &lt;br&gt;
There are too many languages but you need to focus on becoming a master in one of those languages, so you can grow making your knowledge as a sharp Speer. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Please don't mind to be a developer only thinking in money, I know that developers have a great salary range, upon 150K yearly 😇. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Focusing on understanding what are you doing not in spiting code 🎃. Understanding everything will allow you to grow professionally and focusing your career to the best possible approach. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are the things I always try to &lt;strong&gt;keep in mind&lt;/strong&gt; 🤝, making my professional career more focused and more efficient.&lt;br&gt;
I'm here to give you a real &lt;strong&gt;perspective&lt;/strong&gt; of what are living as a software engineer, this series is only focusing on giving you a clear perspective from someone 😶‍🌫️ who has learnt alone. &lt;/p&gt;

&lt;p&gt;Really, if you like this post please share with your friends, I write this blog in my free time with a clear purpose: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Bringing to the world the best software engineers.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>programming</category>
      <category>beginners</category>
      <category>productivity</category>
      <category>learning</category>
    </item>
    <item>
      <title>What is new in Flutter 2.8?</title>
      <author>Kuldeep Tarapara</author>
      <pubDate>Fri, 10 Dec 2021 13:26:47 +0000</pubDate>
      <link>https://dev.to/kuldeeptarapara/what-is-new-in-flutter-28-hlk</link>
      <guid>https://dev.to/kuldeeptarapara/what-is-new-in-flutter-28-hlk</guid>
      <description>&lt;p&gt;Google announced a new version of Flutter with new features and improvements. So, in this article, we will see what is new in Flutter 2.8. Flutter is one step closer to stable desktop support with its new features and improvements.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is new in Flutter 2.8?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Flutter supports mobile, web, and desktop development in a single SDK. This allows developers to focus on what to build. It eliminates the dilemma of choosing the platform for app development. Flutter offers a high-performance, high-productivity framework. With the help of a single codebase, developers can target multiple platforms for app development.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. New features and improvements&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The main focus of Flutter version 2.8 is mobile performance. Also, the latest update made it easier to connect apps to back-end services, such as Firebase and Google Cloud. The new release added major upgrades to the camera and web plugins. The new release also includes the version Dart 2.15, which made some major improvements to concurrency.&lt;/p&gt;

&lt;p&gt;One more thing that Google focused on in this release is improving developer productivity. Various features such as hot reload are extremely useful for developers. There is a sign-in widget in this release that uses Firebase to handle authentication. With the help of this widget, you don’t have to worry about two-factor authentication or reset password user flows. Due to features like this, there is a possibility of changing how developers build apps.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Game development using Flame&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Most developers think that Flutter is just for app development. However, many developers are working towards game development using Flutter. Developers from different communities are taking advantage of the hardware-accelerated graphics support provided by Flutter.&lt;/p&gt;

&lt;p&gt;Flutter announced the release of Flame 1.0 – a 2D game engine. Flame gives you everything you need to create your game quickly, and it also includes a component system, animated sprites and images, collision detection, world camera, and many more features.&lt;/p&gt;

&lt;p&gt;Developers can extend Flame with other packages by integrating with other libraries. For example, you can merge Flame with packages such as Rive, Forge2D, Fire Atlas etc. Combining Flame with other systems will provide a service for 2D game development. If you are interested in game development, you should check Flame.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Flutter DevTools&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This release adds an “Enhance Tracing” feature to address debugging issues. It will help developers to solve UI stemming. When any tracing features are enabled, it will include new events for widgets built, render objects laid out, and render objects painted, as appropriate.&lt;/p&gt;

&lt;p&gt;Also, the new release of DevTools adds support to profile your app’s performance. This profile contains CPU samples from DartVM initialization to render the first flutter frame. When you press the “App Start Profile” button to load the app start profile, you will see that the “AppStartUp” user tag is selected for the profile. You can also select this user tag filter from the list of available user tags to load your app’s launch profile if available. If you select this day, the profile data will be displayed at the time of launching the app.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Web platform views&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The new release also improved the performance of platform views for Flutter web. Platform views allow developers to host UI components, and Flutter web implements this with the help of the HtmlElementView widget. This widget allows you to host HTML elements inside your Flutter web app. Users are using platform views by default if they use the web versions of the google_maps_flutter plugin or the video_player plugin.&lt;/p&gt;

&lt;p&gt;In the previous version, a new canvas gets created as soon as you embed the platform view. Also, another canvas will be added each time you add the platform view. These extra canvases are expensive to create because each canvas is the size of an entire window. This release reuses canvases created for earlier platform views. So, instead of suffering the cost 60x per second, you suffer the cost just once in the entire lifetime of the app. This means that your web app can contain multiple HtmlElementView instances without impacting performance.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. GA of Flutter Ads&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The other is the general availability of the Google Mobile SDK for Flutter in November. This release supports five ad formats, and it will integrate support for both AdMob and Ad Manager. In addition, it includes a beta version of a new mediation feature that helps optimize ad performance. You can find out more about Google Ads and Flutter app integration and other monetization options on the official website.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. Removing the Dev channel&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Flutter’s “channels” determine how quickly the Flutter framework and engine change on your development machine. The stable version represents the smallest churn, and the master represents the largest churn. Due to resource constraints, developers have recently stopped updating the development channel. Less than 3% of Flutter developers use development channels. &lt;/p&gt;

&lt;p&gt;Therefore, developers decided to start the process of officially discontinuing the development channel. This is because Flutter engineers spend a lot of time and effort to maintain it. Dropping the channel allows the Flutter team to spend time and energy on other things. Developers can decide which channel they would like to use the Flutter channel command:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Stable&lt;/strong&gt; channels represent the highest quality builds. They are (approximately) published quarterly and treated as fixes for critical issues in the meantime.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Beta&lt;/strong&gt; channel is an option to stable channels. This is for users who prefer faster cadence. It is currently released monthly and is stable before the release. This is a “fast” channel.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Master channel&lt;/strong&gt; is the active development channel. This channel is for contributors or advanced users who are comfortable with unstable builds.&lt;br&gt;
As Flutter engineers decommission the dev channel in the coming months, you can consider the beta or master channels. It will depend on users which channel they want to select.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;7. Improvements in DartPad&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There are also improvements in DartPad. The improvement is the support for a huge number of packages. There are 23 packages available for import, and the list includes packages such as bloc, characters, collection, google_fonts, etc. The DartPad team will continue to add new packages.&lt;/p&gt;

&lt;p&gt;There’s one more DartPad feature that’s pretty good. So far, the latest stable version is always running on DartPad. In this version, you can use the New Channel menu in the status bar to select the latest beta channel release and the previous stable version (called the “old channel”).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8. Firebase with DartPad&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;With the initialization of FlutterFire, developers can use Firebase from within DartPad. DartPad’s Firebase support includes the core API, authentication, and Firestore. You can expect more Firebase services to appear on DartPad soon. Another thing FlutterFire support makes possible with DartPad is that you can use embedded instances of DartPad directly in your documents.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;9. Firestore Object/Document Mapping&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Last but not least, the alpha version of Firestore Object / DocumentMapper, a new feature you should know about the integration of Firebase and Flutter. Firestore ODM is designed to increase the productivity of Flutter developers by simplifying the use of Firestore through familiar type-safe and structured objects and methods. With code generation, Firestore ODM improves the syntax for working with documents and collections, and it will allow users to model data in a type-safe way. The ODM also supports strongly typed subcollections, with built-in options for optimizing widget rebuilds using select features.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Thanks for remaining till the end of the article. I hope you have enjoyed reading this article. To summarize, in this article, we have discussed what is new in Flutter 2.8. Do let us know your feedback/comments on the same.&lt;/p&gt;

&lt;p&gt;Flutter agency is the &lt;a href="https://flutteragency.com/"&gt;best Flutter App development company&lt;/a&gt; with a highly experienced team of Flutter developers. We promise to deliver the best application developed in Flutter, which will excel in the market. Also, Flutter Agency is a portal full of excellent resources like Flutter Widget Guide, Flutter Projects, Code libs, etc. So, contact us for your next project.&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>version</category>
      <category>update</category>
    </item>
    <item>
      <title>Create a responsive web page with CSS Grid - Big Lebowski style</title>
      <author>Ewald van Veen</author>
      <pubDate>Fri, 10 Dec 2021 13:26:30 +0000</pubDate>
      <link>https://dev.to/ewaldvanveen/create-a-responsive-web-page-with-css-grid-big-lebowski-style-4040</link>
      <guid>https://dev.to/ewaldvanveen/create-a-responsive-web-page-with-css-grid-big-lebowski-style-4040</guid>
      <description>&lt;p&gt;I’m a big fan of layout systems like CSS Grid and Flexbox. Whether you choose Grid to build a web page from scratch or Flexbox or both at the same time, either one of them can get the job done for you. Add a few media queries and you can build a responsive layout for multiple devices and screen sizes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3kf5lr7m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://64.media.tumblr.com/e80383f2d623dffbb52fe859694592f2/fc32ec58472c1d74-4b/s400x600/95172b805de7289bd0a6a12a87891293b4907131.gifv" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3kf5lr7m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://64.media.tumblr.com/e80383f2d623dffbb52fe859694592f2/fc32ec58472c1d74-4b/s400x600/95172b805de7289bd0a6a12a87891293b4907131.gifv" alt="animated gif of the example web page going from small to large page size" width="320" height="240"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this example (link to Codepen below) I have built a web page using only CSS Grid. Maybe for some specific styles in the example Flexbox might have been a more suitable choice, but CSS Grid will definitely get the job done.&lt;/p&gt;

&lt;p&gt;Because I’m also a big fan of the Coen Brothers movies, I gave the web page example a &lt;a href="https://www.imdb.com/title/tt0118715/?ref_=nv_sr_srsg_3"&gt;Big Lebowski&lt;/a&gt; movie theme. Hopefully you’ll enjoy it and if you’ve got any feedback please feel free to respond.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/ewaldvanveen/pen/qBPOEQp"&gt;Here is the link to the example on Codepen.&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>css</category>
      <category>grid</category>
      <category>codepen</category>
    </item>
    <item>
      <title>What are Pure Functions and Side Effects in JavaScript?</title>
      <author>Tapas Adhikary</author>
      <pubDate>Fri, 10 Dec 2021 13:24:20 +0000</pubDate>
      <link>https://dev.to/atapas/what-are-pure-functions-and-side-effects-in-javascript-429k</link>
      <guid>https://dev.to/atapas/what-are-pure-functions-and-side-effects-in-javascript-429k</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction-to-javascript-functions"&gt;
  &lt;/a&gt;
  Introduction to JavaScript Functions
&lt;/h2&gt;

&lt;p&gt;A function allows us to place code logically to execute a task. &lt;code&gt;Functions&lt;/code&gt; are first-class citizens in the JavaScript programming language. You can create, modify a function, use it as an argument to another function, or return from a function. You can also assign a function as a value to a variable. In a nutshell, you will hardly use or write any useful JavaScript code without using functions.&lt;/p&gt;

&lt;p&gt;In this article, we will learn about &lt;code&gt;Pure Function&lt;/code&gt;, its advantages. We will also take a look into &lt;code&gt;Side Effects&lt;/code&gt; and their impacts.&lt;/p&gt;

&lt;p&gt;If you like to learn from video content as well, this article is also available as a video tutorial here: 🙂&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/vxfVNXJyeHk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Please feel free to &lt;a href="https://www.youtube.com/tapasadhikary?sub_confirmation=1"&gt;subscribe&lt;/a&gt; for the future content&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A function may take zero or more inputs and produce an output. You may explicitly return output from a function, or it just returns an &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A function returning a value explicitly,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Define the function&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;testMe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Returns a string value&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`testing &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Invoke the function&lt;/span&gt;
&lt;span class="nx"&gt;testMe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// returns 'testing 123'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A function not returning a value explicitly,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Define the function&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;testMe&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="c1"&gt;// Do not return anything&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Invoke the function&lt;/span&gt;
&lt;span class="nx"&gt;testMe&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// returns undefined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, as we understand the basic usages, let us look into today's &lt;code&gt;Pure Function&lt;/code&gt; topic. We will also understand the concept, &lt;code&gt;Side Effects&lt;/code&gt; and its impact on the pure functions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pure-functions-and-side-effects-with-examples"&gt;
  &lt;/a&gt;
  Pure Functions and Side Effects with Examples
&lt;/h2&gt;

&lt;p&gt;As a software programmer/developer, you write source code to produce an output based on the inputs. Usually, you write &lt;code&gt;functions&lt;/code&gt; to perform the tasks based on inputs and produce an output. We need to make sure these functions are,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Predictable&lt;/strong&gt;: It produces a predictable output for the same inputs.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Readable&lt;/strong&gt;: Anyone reading the function as a standalone unit can understand its purpose completely.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Reusable&lt;/strong&gt;: Can reuse the function at multiple places of the source code without altering its and the caller's behavior.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Testable&lt;/strong&gt;: We can test it as an independent unit.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A &lt;code&gt;Pure Function&lt;/code&gt; has all the above characteristics. It is a function that produces the same output for the same input. It means it returns the same result when you pass the same arguments. A pure function shouldn't have any &lt;code&gt;side effects&lt;/code&gt; to change the expected output.&lt;/p&gt;

&lt;p&gt;The function &lt;code&gt;sayGreeting()&lt;/code&gt; below is a pure function. Can you please guess why?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sayGreeting&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`Hello &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is a pure function because you always get a &lt;code&gt;Hello &amp;lt;name&amp;gt;&lt;/code&gt; as output for the &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt; pass as an input. Now, let us see the same function with a bit of change.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;greeting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sayGreeting&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Is it a pure function? Well, No. The function's output now depends on an outer state called &lt;code&gt;greeting&lt;/code&gt;. What if someone changes the value of the &lt;code&gt;greeting&lt;/code&gt; variable to &lt;code&gt;Hola&lt;/code&gt;? It will change the output of the &lt;code&gt;sayGreeting()&lt;/code&gt; function even when you pass the same input.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// When greeting is "Hello"&lt;/span&gt;
&lt;span class="nx"&gt;sayGreeting&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Alex&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Returns, "Hello Alex"&lt;/span&gt;

&lt;span class="c1"&gt;// When greeting is "Hola"&lt;/span&gt;
&lt;span class="nx"&gt;sayGreeting&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Alex&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Returns, "Hola Alex"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, here we have seen the side-effect of depending on an outer state value that may change without the function being aware of it. &lt;/p&gt;

&lt;p&gt;A few more classic cases of the side effects are, &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Mutating(changing) the input itself.&lt;/li&gt;
&lt;li&gt;Querying/Updating DOM&lt;/li&gt;
&lt;li&gt;Logging(even in the console)&lt;/li&gt;
&lt;li&gt;Making an XHR/fetch call.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Any operation that is not directly related to the final output of the function is called a &lt;code&gt;Side Effect&lt;/code&gt;. Now let us see an &lt;code&gt;impure&lt;/code&gt; function where we mutate the input and do something that we are not supposed to in a pure function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;findUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reversedUsers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;found&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;reversedUsers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;user-found&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;found&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above function takes two arguments, a collection of users(an array) and an item to find in the array. It finds the item from the end of the array by reversing it. Once the item is found in the array, it set that value as a text to an HTML element using DOM methods.&lt;/p&gt;

&lt;p&gt;Here we are breaking two essential principles of the &lt;code&gt;pure function&lt;/code&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We are mutating the input.&lt;/li&gt;
&lt;li&gt;We are querying and manipulating the DOM&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So, what kind of problem we can anticipate? Let's see. A caller will invoke the &lt;code&gt;findUser()&lt;/code&gt; function in the following way,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Tapas&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Alex&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Maria&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;findUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Maria&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this stage, the caller may not know that the function is making a DOM operation unless the caller reads the findUser() function code. So, &lt;code&gt;readability&lt;/code&gt; is compromised. The function's output is performing an operation that is not related to the final output.&lt;/p&gt;

&lt;p&gt;Also, we have mutated the input array. Ideally, we should have cloned the input and then mutated (reverse) the copy for the find operation. Let us now make it a pure function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;findUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Create the clone of users array and then reverse&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reversedUsers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="c1"&gt;// Find the element in the cloned array&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;found&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;reversedUsers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="c1"&gt;// Return the found element&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;found&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Tapas&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Alex&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Maria&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;found&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;findUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Maria&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now the &lt;code&gt;findUser()&lt;/code&gt; function is a pure function. We have removed the side effects of mutating the input, and it returns the intended output. Hence the function is readable, testable as a unit, reusable, and predictable.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pure-function-and-related-jargon"&gt;
  &lt;/a&gt;
  Pure Function and Related Jargon
&lt;/h2&gt;

&lt;p&gt;Pure function and side effects are the concepts of &lt;code&gt;functional programming&lt;/code&gt;. You may hit a couple of jargon that needs a friendly clarification.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Referential Transparency&lt;/strong&gt;: It means we should be able to replace a function call(or invocation) with its output value without changing the program's behavior. As you see, it is possible only if the function is a &lt;code&gt;pure function&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's take a simple pure function,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;multipication&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, now in this expression, we can replace the function call with its output value with an assurance of no &lt;code&gt;side effect&lt;/code&gt;,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;  10 + &lt;span class="o"&gt;(&lt;/span&gt;multiplication&lt;span class="o"&gt;(&lt;/span&gt;6, 3&lt;span class="o"&gt;)&lt;/span&gt; ^ 2&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;to,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;  10 + &lt;span class="o"&gt;(&lt;/span&gt;18 ^ 2&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Parallel Code&lt;/strong&gt;: Pure functions help in parallel code execution. However, in JavaScript, code runs sequentially by default.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#so-can-i-make-all-functions-raw-pure-functions-endraw-"&gt;
  &lt;/a&gt;
  So, Can I make all functions &lt;code&gt;Pure Functions&lt;/code&gt;?
&lt;/h2&gt;

&lt;p&gt;Yes, technically, you can. But the application with only pure functions may not do much. &lt;/p&gt;

&lt;p&gt;Your application program will have side effects like HTTP calls, logging to console, IO operations, and many more. Please use pure functions in as many places as you find possible. Isolate impure functions(side effects) as much as possible. It will improve your program's readability, debuggability, and testability a lot.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Embracing functional programming concepts like a pure function, reducing side effects will make your code better to manage and maintain. It means lesser bugs, quick identification of issues, isolating problems, increased reusability and testability.&lt;/p&gt;

&lt;p&gt;If you want to explore this topic further and get deeper into functional programming, please pick up this book &lt;a href="https://github.com/getify/Functional-Light-JS"&gt;Functional-Light JavaScript&lt;/a&gt; by Kyle Simpson. It's worth reading.&lt;/p&gt;

&lt;p&gt;Let's connect. I share my learnings on JavaScript, Web Development, and Blogging on these platforms as well,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/tapasadhikary"&gt;Follow me on Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/tapasadhikary?sub_confirmation=1"&gt;Subscribe to my YouTube Channel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/atapas"&gt;Side projects on GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Como subir alterações sem derrubar a aplicação (Elixir Hot Code Swapping)</title>
      <author>DAVID ALENCAR</author>
      <pubDate>Fri, 10 Dec 2021 13:22:33 +0000</pubDate>
      <link>https://dev.to/davidalencarignacio/como-subir-alteracoes-sem-derrubar-a-aplicacao-elixir-hot-code-swapping-44bi</link>
      <guid>https://dev.to/davidalencarignacio/como-subir-alteracoes-sem-derrubar-a-aplicacao-elixir-hot-code-swapping-44bi</guid>
      <description>&lt;p&gt;Imagine você poder fazer o deploy deploy em produção sem necessidade de reiniciar a aplicação. Isso é o que mostramos nesse vídeo: Como usar hot upgrade (hot swapping, hot swap) quando trabalhamos com elixir.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/HrUG2ngtnJg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Código fonte:&lt;br&gt;
&lt;a href="https://github.com/ellyacademy/videos/tree/main/hotswap"&gt;https://github.com/ellyacademy/videos/tree/main/hotswap&lt;/a&gt;&lt;/p&gt;

</description>
      <category>elixir</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Build a WhatsApp CRM app with low-code</title>
      <author>Shubhendra Singh Chauhan</author>
      <pubDate>Fri, 10 Dec 2021 13:13:24 +0000</pubDate>
      <link>https://dev.to/tooljet/build-a-whatsapp-crm-app-with-low-code-1h5</link>
      <guid>https://dev.to/tooljet/build-a-whatsapp-crm-app-with-low-code-1h5</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;In this article, you’ll learn how to create an app that lets you send WhatsApp messages to the contacts stored in a Google Sheet.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-crm"&gt;
  &lt;/a&gt;
  What is a CRM?
&lt;/h2&gt;

&lt;p&gt;A CRM app is designed to gather all the customer information in the central place to provide a 360º view of all your customer data. Details like the customer's name, email, phone number, and communication preferences, etc, are made available to help teams to reach out to customers for the right reasons and through the right channels. A lot of companies and businesses store their customers' or employees' data in Google Sheets, and this app can be utilized to send personalized WhatsApp messages in no time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#overview"&gt;
  &lt;/a&gt;
  Overview
&lt;/h2&gt;

&lt;p&gt;Let's start with a high-level view of this app. We already have a Google Sheet with mock data resembling the typical customer data: Id, names, emails, phone number, etc.&lt;/p&gt;

&lt;p&gt;On ToolJet, we will add the Google Sheet as the datasource and then create a query that will allow us to pull the Google sheet data into our ToolJet app. We can then start adding additional functionality for taking action on the selected row in the table. This will allow for quickly composing the message from the text box and sending the message via a “Send Message” button that will link to WhatsApp's click to chat API. The API lets you open a chat on Whatsapp web directly with 1-click.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Google Sheet: Use this &lt;a href="https://docs.google.com/spreadsheets/d/1gIfeXMmgJAKrWmm_MtivOj68zZM_H9D8qR5mzVvzo6c/edit?usp=sharing"&gt;mock data&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;ToolJet: It is a free and &lt;a href="https://github.com/ToolJet/ToolJet"&gt;open-source&lt;/a&gt;, low-code platform that allows you to quickly build tools. &lt;a href="https://tooljet.com/"&gt;Sign-in here&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;WhatsApp's click to chat API endpoint: &lt;code&gt;https://api.whatsapp.com/send?phone=phonenumber&amp;amp;text=message&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#building-the-ui"&gt;
  &lt;/a&gt;
  Building the UI
&lt;/h2&gt;

&lt;p&gt;Let's start with building the app UI first. Log in to ToolJet and then from the dashboard click on the &lt;strong&gt;Create new application&lt;/strong&gt; button to create a new app. From there, you will be redirected to the visual app editor once the app has been created. The name of the app can be changed by clicking on the app name from the top left of the app builder. &lt;/p&gt;

&lt;p&gt;On the right sidebar, you'll find a &lt;strong&gt;&lt;a href="https://docs.tooljet.com/docs/tutorial/adding-widget"&gt;Widget manager&lt;/a&gt;&lt;/strong&gt; that has a list of built-in widgets and components. You can drag and drop to start laying out your user interface. On the left sidebar, you'll see the &lt;a href="https://docs.tooljet.com/docs/tutorial/adding-a-datasource"&gt;&lt;strong&gt;Datasource manager&lt;/strong&gt;&lt;/a&gt;. From here, you can add a new datasource or edit an existing datasource. At the bottom of the page, you'll find &lt;strong&gt;Query Editor&lt;/strong&gt; that will be used to build the query for the datasource that we will connect. For this app, we will be using Google Sheet as our datasource and will be building a query for it—but we’ll get to that further down in the post.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DJxrNY3G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f0ivmhsi155g08dt661w.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DJxrNY3G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f0ivmhsi155g08dt661w.gif" alt="Create new app" width="880" height="416"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let's start building the UI by:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Using the &lt;strong&gt;Text&lt;/strong&gt; component from the widget manager to give our app a Title. Drag the component to the canvas and click on it to open the inspect panel on the right sidebar. From inspect panel, you can edit the properties of the component like Text, component name and also style it by changing its color.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Tip: You can also use the image component instead of the Text component as the Title of our app.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B8N2J5UP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ju5rquwy8zgnbsr3ady8.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B8N2J5UP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ju5rquwy8zgnbsr3ady8.gif" alt="Text component" width="880" height="431"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Using the &lt;strong&gt;Table&lt;/strong&gt; component for our customer data. The table component comes pre-placed and pre-populated with mock data. We will drag and drop the table component from the widget manager to the canvas and then click on it to edit its properties from the inspect panel. From inspect panel, let's add columns like Id, Name, Email, Phone Number, country, etc.
For every column, we need to specify:

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Column type:&lt;/strong&gt; You need to select the data type for every column. By default, it's set to &lt;code&gt;default&lt;/code&gt; but we will be choosing &lt;code&gt;string&lt;/code&gt; for every column since most of our data from Google Sheet is a string.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Column name:&lt;/strong&gt; This is the name of the column that we want to display in UI, so we can name it accordingly.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Key:&lt;/strong&gt; Key property is the accessor key used to get data from a single element of the table of objects. Here you can think of it as the name of the column that is there in the Google Sheet.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example: Suppose we have created a new column in the table for the Name of customers then we will set its &lt;strong&gt;column type&lt;/strong&gt; as &lt;code&gt;string&lt;/code&gt;, &lt;strong&gt;column name&lt;/strong&gt; as &lt;code&gt;Customer Name&lt;/code&gt;, and &lt;strong&gt;Key&lt;/strong&gt; as &lt;code&gt;Name&lt;/code&gt;. The Key should be the same as the column name in Google Sheet.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Kz-lflcA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/myk4wxx7u981jbfyf9ip.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kz-lflcA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/myk4wxx7u981jbfyf9ip.png" alt="Add columns" width="880" height="444"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Creating a &lt;strong&gt;Compose Message&lt;/strong&gt; area by using the &lt;strong&gt;Container&lt;/strong&gt; component. We will be putting &lt;strong&gt;Text Area&lt;/strong&gt; and &lt;strong&gt;Button&lt;/strong&gt; components inside this container. Text Area component will be used for message body and Button component will use WhatsApp's click to chat API to open Chat in a new window.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AA0hmHT6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eujt1wvygv7ifljouswc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AA0hmHT6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eujt1wvygv7ifljouswc.png" alt="Messagebox" width="880" height="444"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that we have finished the UI, let’s connect the datasource and build the query to retrieve the data in the table.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-the-datasource"&gt;
  &lt;/a&gt;
  Adding the Datasource
&lt;/h2&gt;

&lt;p&gt;ToolJet supports several datasources including Airtable, Elasticsearch, Cloud Firestore, REST API, GRaphQL, and many more. For WhatsApp CRM we will be using Google Sheet as the datasource. So, let's see how to do it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;On the left sidebar, click on the add or edit datasources button and then click on &lt;strong&gt;add datasource&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;From the dialog window, choose &lt;strong&gt;Google Sheets&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;The next dialog box will ask you to authorize Google Sheets to grant either &lt;code&gt;Read-only&lt;/code&gt; or &lt;code&gt;Read and write&lt;/code&gt; permission; Choose &lt;code&gt;Read-only&lt;/code&gt; since we are only going to retrieve the data and will not update any data on Google Sheet, then click on &lt;strong&gt;Connect to Google Sheet&lt;/strong&gt; button&lt;/li&gt;
&lt;li&gt;It will open up a new window where you'll need to sign in to your Google account to authorize the ToolJet app&lt;/li&gt;
&lt;li&gt;Once authorized, you'll see a message &lt;code&gt;Auth successful, you can close this tab now.&lt;/code&gt; - close the tab and then click on the &lt;strong&gt;Save datasource&lt;/strong&gt; button in the dialog box&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sB1A7hQu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zeulxidw91ffwg4f4ceh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sB1A7hQu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zeulxidw91ffwg4f4ceh.png" alt="Datasources" width="880" height="444"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, now that we have connected the datasource to our app, let's see how we can build a query to and update the data on the table.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#building-the-query"&gt;
  &lt;/a&gt;
  Building the query
&lt;/h3&gt;

&lt;p&gt;A query is a request for data or information from the datasource. We will build a query that will request the data from Google Sheets. Let's build a query for this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Go to the &lt;strong&gt;Query Editor&lt;/strong&gt;, and click on the &lt;code&gt;+&lt;/code&gt; icon to create a new query&lt;/li&gt;
&lt;li&gt;Select the datasource as Google Sheets from the dropdown.&lt;/li&gt;
&lt;li&gt;From the &lt;strong&gt;Operation&lt;/strong&gt; dropdown, select &lt;strong&gt;Read data from the spreadsheet&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Enter the &lt;strong&gt;Spreadsheet ID&lt;/strong&gt; and the cells &lt;strong&gt;Range&lt;/strong&gt; from the Google Sheet&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;💡 You'll find the Spreadsheet ID in the URL of your Google Sheet. &lt;br&gt;
Let say the URL of Google Sheet is:&lt;br&gt;
&lt;code&gt;https://docs.google.com/spreadsheets/d/1gIfeXMmgJAKrWmm_MtivOj68zZM_H9D8qR5mzVvzo6c/edit?usp=sharing&lt;/code&gt; &lt;br&gt;
In this URL, &lt;code&gt;1gIfeXMmgJAKrWmm_MtivOj68zZM_H9D8qR5mzVvzo6c&lt;/code&gt; is the Spreadsheet ID&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Click on the &lt;strong&gt;Preview&lt;/strong&gt; button at the top right of the Query Editor and It'll fetch all the data from the sheet in JSON format&lt;/li&gt;
&lt;li&gt;Click on Create button to save and create the query&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HtFARW5y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f8y9j9bzjlbglv4s10l6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HtFARW5y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f8y9j9bzjlbglv4s10l6.png" alt="Query" width="880" height="444"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#linking-the-google-sheets-data-to-the-table"&gt;
  &lt;/a&gt;
  Linking the Google Sheets data to the table
&lt;/h2&gt;

&lt;p&gt;Now that we have built a query that retrieves the data from the Google Sheets, let's start referencing it in the table.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Our columns are already added so as soon as we enter the property in the &lt;strong&gt;Table data&lt;/strong&gt; box the data in the table will be automatically updated.&lt;/li&gt;
&lt;li&gt;Click on the &lt;strong&gt;Table&lt;/strong&gt; to open the inspect panel on the right sidebar.&lt;/li&gt;
&lt;li&gt;We will want the table to reference the data fetched from the query, so in the &lt;strong&gt;Table data&lt;/strong&gt; property, we will enter &lt;code&gt;{{queries.googlesheets1.data}}&lt;/code&gt; - here &lt;code&gt;googlesheets1&lt;/code&gt; is the query that we built, and the data objects fetched is stored in &lt;code&gt;data&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Next, we will add a &lt;strong&gt;Loading state&lt;/strong&gt; for the table. Loading state shows a loading skeleton for the table. &lt;code&gt;isLoading&lt;/code&gt; property to get the status of the query, so we'll enter &lt;code&gt;{{queries.googlesheets1.isLoading}}&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;💡 ToolJet will auto-suggest your queries and let you simply select the one you want.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HFhFH63V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hlj90ezeubitqycyyvgr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HFhFH63V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hlj90ezeubitqycyyvgr.png" alt="referencing data" width="880" height="443"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sending-message"&gt;
  &lt;/a&gt;
  Sending Message
&lt;/h2&gt;

&lt;p&gt;Now, all we need to do is to get the &lt;strong&gt;message&lt;/strong&gt; from the Text area and the &lt;strong&gt;Phone Number&lt;/strong&gt; of the selected customer in the table. We'll be using these two properties in &lt;strong&gt;WhatsApp's click to chat API&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://api.whatsapp.com/send?phone=**phonenumberfromtable**&amp;amp;text=**messagefromtextarea**
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Click on the Send Message button to open the inspect panel on the right sidebar.&lt;/li&gt;
&lt;li&gt;On Inspect Panel, go to the Events section and add a new &lt;strong&gt;On-click event handler&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Click on the On-click event handler and change its &lt;strong&gt;Action&lt;/strong&gt; property to Open webpage.&lt;/li&gt;
&lt;li&gt;In the URL field, Enter WhatsApp's API and replace &lt;strong&gt;phonenumberfromtable&lt;/strong&gt; with &lt;code&gt;{{components.customerInfo.selectedRow['Phone Number']}}&lt;/code&gt; and &lt;strong&gt;messagefromtextarea&lt;/strong&gt; with &lt;code&gt;{{components.textarea.value}}&lt;/code&gt; . The final URL should look like:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://api.whatsapp.com/send?phone={{components.customerInfo.selectedRow['Phone Number']}}&amp;amp;text={{components.textarea.value}}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6-kGHYSW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sb1ab38pkk1rilhmxfnt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6-kGHYSW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sb1ab38pkk1rilhmxfnt.png" alt="Send message" width="880" height="445"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#making-app-live"&gt;
  &lt;/a&gt;
  Making app live
&lt;/h2&gt;

&lt;p&gt;Now we have reached the final step that is making our app live and shareable. To do this just click on the &lt;strong&gt;Deploy&lt;/strong&gt; button on the top-right corner. On the dialog box:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Click on the &lt;strong&gt;+Version&lt;/strong&gt; button to create a version of the app&lt;/li&gt;
&lt;li&gt;Click on the &lt;strong&gt;Save&lt;/strong&gt; button to save the progress and then click on the &lt;strong&gt;Deploy&lt;/strong&gt; button to deploy on the server&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w72s6Le9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jcdvqcn631ojdt6m8s27.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w72s6Le9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jcdvqcn631ojdt6m8s27.png" alt="Deploy" width="880" height="444"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Making app shareable:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Click on the Share button on the top-right&lt;/li&gt;
&lt;li&gt;In the dialog box, click on the toggle switch to &lt;strong&gt;make the application public&lt;/strong&gt; and &lt;strong&gt;shareable&lt;/strong&gt; through the link in the box&lt;/li&gt;
&lt;li&gt;You can also edit the URL according to your choice
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IoVzmD1G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a8cyu7aikbh3ragcyxgt.png" alt="Image description" width="880" height="443"&gt;
Voila — You just built a WhatsApp CRM app. You can now go ahead and beautify it with ToolJet's built-in component styling properties. 🎉 &lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>opensource</category>
      <category>showdev</category>
    </item>
    <item>
      <title>C VS C++</title>
      <author>cloudytech147</author>
      <pubDate>Fri, 10 Dec 2021 13:03:20 +0000</pubDate>
      <link>https://dev.to/cloudytech147/c-vs-c-110d</link>
      <guid>https://dev.to/cloudytech147/c-vs-c-110d</guid>
      <description>&lt;p&gt;Every beginner has the question that what should be the right choice to start the programming with? Also, many newcomers aren’t aware of the differences between C and C++. Here in this article, we will cover all the &lt;a href="https://www.techgeekbuzz.com/c-vs-cpp/"&gt;differences between C and C++&lt;/a&gt; (C vs C++) and also discuss what language you should choose between the two.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--COJShyHb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7c2rfcrygl1iy1iurj0q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--COJShyHb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7c2rfcrygl1iy1iurj0q.png" alt="Image description" width="654" height="262"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;C++ Programing&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;C++ is a high-level programming language, which is created by Bjarne Stroustrup at Bell Labs. It is the updated adaptation of C. In contrast to C, C++ ditches the procedural programming worldview and clings to the article arranged programming worldview, which assists a great deal with tackling ongoing issues.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;C Programming Language&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Designed by Dennis Ritchie at Bell Labs, C is a high-level programming language that first appeared in 1972. C follows the procedure-oriented (procedural) programming approach that makes it different from the other languages that came into existence after the C language.&lt;/p&gt;

&lt;p&gt;It, however, has limited keywords, which is not enough to solve real-time problems.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1j1GUhuV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5cc91a7i4fc5l4u8gkjs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1j1GUhuV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5cc91a7i4fc5l4u8gkjs.png" alt="c vs c++" width="677" height="591"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9YPRrZqH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3g5bnefga9scb93biqrw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9YPRrZqH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3g5bnefga9scb93biqrw.png" alt="c vs c++" width="673" height="421"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;C vs C++ is a topic of eternal debate. Although C++ is more popular than C, both are among the most popular programming languages. Starting with C++ is good to easily understand the concepts related to programming.&lt;/p&gt;

</description>
      <category>c</category>
      <category>cpp</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How To Start A Website From Scratch Using HTML</title>
      <author>Grant McNamara</author>
      <pubDate>Fri, 10 Dec 2021 13:03:00 +0000</pubDate>
      <link>https://dev.to/grantrocks/how-to-start-a-website-from-scratch-using-html-2pj7</link>
      <guid>https://dev.to/grantrocks/how-to-start-a-website-from-scratch-using-html-2pj7</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;A simple follow is where it begins&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;No really please follow otherwise you might be missing some great content. Also, follow me on &lt;a href="https://theoverpoweredpc.medium.com"&gt;medium&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's 2021 and the world is still under attack from the corona-virus. Most of us have picked up a new hobby and interest. Maybe one of them might have been making websites or even making one to have an extra source of income. But either way, you still should know how to use HTML to make yourself a site.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-basic-understanding"&gt;
  &lt;/a&gt;
  A Basic Understanding
&lt;/h2&gt;

&lt;p&gt;Html is a very simple and easy-to-understand programming language that makes up most of the content of the internet these days. Everyone can simply look up some tutorials or guides on how to use HTML. Heck even you just did otherwise why would you find this. Everybody also has the capability to understand how HTML and its elements work. You open an element and then you have to close the element. For example, when you open the fridge you should shut it because if you don't shut it everything inside of it will go bad. Just like HTML if you open a tag but don't close it, the element won't appear or may break your site. But you don't just yet know what an element is so that may have sounded a bit confusing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#simple-facts"&gt;
  &lt;/a&gt;
  Simple Facts
&lt;/h2&gt;

&lt;p&gt;When you look at a site you see text and text that is bold or underlined, text that has a link attached to it, text that is big and or small, you see images and graphics to help you understand. All of those “elements” require some kind of tag. Text or paragraphs require the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tag so that the site or server knows that that text is a paragraph because it is inside of a &lt;code&gt;&amp;lt;p&lt;/code&gt;&amp;gt; tag. The site will know when to stop reading the text as a paragraph when the user adds a &lt;code&gt;&amp;lt;/p&amp;gt;&lt;/code&gt; to the end of the paragraph tag. The reason that you use a &lt;code&gt;&amp;lt;/p&amp;gt;&lt;/code&gt; is that that is what closes the element and if you don't what is described above will happen to your site. So take the time after every element you use to close it. To close elements whatever tag you use add a &amp;lt;/(element you used)&amp;gt; to the end of it to close it. Also as mentioned above I said tags, not tags so that brings us into the rest of the tags.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tags"&gt;
  &lt;/a&gt;
  Tags
&lt;/h2&gt;

&lt;p&gt;There are many different tags that you can use on your website. One for an image, one for a paragraph, one for a video, one to underline, one to make text bold, one to improve your site SEO, one to add tables and lists. These are some of the most popular tags across the internet.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#header-1"&gt;
  &lt;/a&gt;
  Header 1
&lt;/h2&gt;

&lt;p&gt;This is the tag that will make text large like the name of this paragraph. You use an h1 tag wherever you would like some text, usually, the name of an article or site, to stand out. &lt;code&gt;&amp;lt;h1&amp;gt;&amp;lt;/h1&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#header-2"&gt;
  &lt;/a&gt;
  Header 2
&lt;/h2&gt;

&lt;p&gt;These tags usually are used under an h1 tag for a slogan or some kind of text that is also important but not important as the h1 tag. Most people do actually use this tag for their slogan.&lt;code&gt;&amp;lt;h2&amp;gt;&amp;lt;/h2&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#header-3"&gt;
  &lt;/a&gt;
  Header 3
&lt;/h2&gt;

&lt;p&gt;This is the most common type of tag. Added for each paragraph of an article or just some kind of name for something. Most people use this kind of tag for article sections or names of articles on a homepage since it's SEO friendly.&lt;br&gt;
Those are some of the most common header tags used on different websites that people use. When making a website, they are actually important if you plan for your website to be popular or just be discovered in general. They mark the content and usually contain keywords.&lt;code&gt;&amp;lt;h3&amp;gt;&amp;lt;/h3&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#image"&gt;
  &lt;/a&gt;
  Image
&lt;/h2&gt;

&lt;p&gt;This tag is used to add an image to a website to help people understand your site or just to keep people interested in your site. Most users of a website will be more likely to leave if there aren't any kind of images or visuals. Using this tag is a bit different though than what you are used to. Before you close up the &lt;a href="" class="article-body-image-wrapper"&gt;&lt;img&gt;&lt;/a&gt; you need to add an src=”” to add the img file. Do so by using the following and using your own img and directory. The closing tag is not needed.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;img src=”/path/to/your/file.jpg”&amp;gt;&lt;br&gt;
&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#links"&gt;
  &lt;/a&gt;
  Links
&lt;/h2&gt;

&lt;p&gt;Now this tag, in a way, is like the img tag. To use it you need to use a special string inside of it to add a link to the text. It's very easy to use and most search engines love it when you add links to your content but not too many links. You can add a &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag to your site using the following.&lt;br&gt;
&lt;code&gt;&amp;lt;a href=”https://example.com”&amp;gt;links text here&amp;lt;/a&amp;gt;&lt;br&gt;
&lt;/code&gt;&lt;br&gt;
&lt;code&gt;&amp;lt;a href=”/path/to/a/html/file/in/your/site.html”&amp;gt;link text here&amp;lt;/a&amp;gt;&lt;br&gt;
&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#bold"&gt;
  &lt;/a&gt;
  Bold
&lt;/h2&gt;

&lt;p&gt;If you would like to make some text on your site bold you need to use the &lt;code&gt;&amp;lt;strong&amp;gt;&lt;/code&gt; tag. It's very simple and easy to use. Find the text that you would like to make bold and put it between the &lt;code&gt;&amp;lt;strong&amp;gt;&amp;lt;/strong&amp;gt;&lt;/code&gt; tags.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#meta"&gt;
  &lt;/a&gt;
  Meta
&lt;/h2&gt;

&lt;p&gt;This is a very important tag to use if you would like your site to be on google. Basically, the meta tags are what add keywords and a description, and more to your site. Users of your site cant see the content from these tags since they are in the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; of your site. Search engines such as Google, use these tags to rank your site and search it.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#title"&gt;
  &lt;/a&gt;
  Title
&lt;/h2&gt;

&lt;p&gt;Another very important tag for your website. It makes the current page that you are on and makes the tab name look nice and neat instead of an ugly file and directory. Required by most search engines.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#head"&gt;
  &lt;/a&gt;
  Head
&lt;/h2&gt;

&lt;p&gt;Any SEO tags such as the meta and title tag go here. The content inside of this element will not be shown to users of your site. It contains the content for search engines such as the site description and SEO data.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FsLrmkqi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8msenvahalihc1b89jiw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FsLrmkqi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8msenvahalihc1b89jiw.png" alt="Image description" width="627" height="158"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#body"&gt;
  &lt;/a&gt;
  Body
&lt;/h2&gt;

&lt;p&gt;The site's content that you will show to your users will be inside this element. It's needed as the content won't really be shown if you don't use this tag.&lt;br&gt;
Now that you know some of HTML’s most important tags, it's time to actually make a site with HTML. It might seem a bit confusing at first but it's very simple to understand once you know.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#making-the-site"&gt;
  &lt;/a&gt;
  Making The Site
&lt;/h2&gt;

&lt;p&gt;To make an HTML site you need a simple layout first to make sure you have the right tags. Using the following snippet you will see the document type, HTML tags to declare the HTML content and then the head and body tags.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE HTML&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;TOP Tutorial&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;Hello World!&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;site content here&amp;lt;/p&amp;gt;
&amp;lt;img src="https://theoverpoweredpc.tk/images/raspberry-pi.jpg"&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then you want to add the title inside the head tag and then some content inside of the body tag. Once you have that in there you are good to go. Congrats you just made a simple HTML site. Now go ahead learn CSS and js and make some amazing stuff. Learn more about HTML to expand your site.&lt;/p&gt;

&lt;p&gt;See the full source code here: &lt;a href="https://github.com/Grantrocks/htmltutorial/blob/main/index.html"&gt;https://github.com/Grantrocks/htmltutorial/blob/main/index.html&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>html</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Parameterizing Ansible roles, Part II</title>
      <author>XLAB</author>
      <pubDate>Fri, 10 Dec 2021 13:01:17 +0000</pubDate>
      <link>https://dev.to/xlab_si/parameterizing-ansible-roles-part-ii-3629</link>
      <guid>https://dev.to/xlab_si/parameterizing-ansible-roles-part-ii-3629</guid>
      <description>&lt;p&gt;In &lt;a href="https://dev.to/xlab_si/parameterizing-ansible-roles-4f9o"&gt;the previous Tips&amp;amp;Tricks&lt;/a&gt; we explained how to parametrize Ansible roles. For all of you who thought "well, documenting variables sucks compared to documenting module parameters", we have some exciting news! Ansible Core features argument specification support for Ansible roles. In practical terms, this means that: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Developers gained a structured way of documenting Ansible role variables/parameters. &lt;/li&gt;
&lt;li&gt;End-users are able to use &lt;code&gt;ansible-doc&lt;/code&gt; to display the role documentation. &lt;/li&gt;
&lt;li&gt;Ansible also validates the variable values before including the role. &lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>automation</category>
      <category>ansible</category>
      <category>ansiblecollections</category>
      <category>ansibleroles</category>
    </item>
    <item>
      <title>Search Criteria no Magento 2</title>
      <author>Lucas Teixeira dos Santos Santana</author>
      <pubDate>Fri, 10 Dec 2021 12:57:07 +0000</pubDate>
      <link>https://dev.to/santanaluc94/search-criteria-no-magento-2-2m4</link>
      <guid>https://dev.to/santanaluc94/search-criteria-no-magento-2-2m4</guid>
      <description>&lt;h2&gt;
  &lt;a href="#contextualizando"&gt;
  &lt;/a&gt;
  Contextualizando
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#o-que-%C3%A9-search-criteria"&gt;
  &lt;/a&gt;
  O que é Search Criteria?
&lt;/h3&gt;

&lt;p&gt;O &lt;em&gt;Search Criteria&lt;/em&gt; (critério de pesquisa) é literalmente um critério para pesquisar e/ou filtrar o resultado de um repositório desejado. É possível realizar um critério de pesquisa implementando uma interface para construir requisições personalizadas com diferentes condições que retornarão um vetor com os itens correspondentes a pesquisa.&lt;/p&gt;

&lt;p&gt;Saiba como criar repositórios personalizados no post "&lt;a href="https://dev.to/santanaluc94/como-criar-um-repositorio-personalizado-no-magento-2926"&gt;Como criar um Repositório personalizado no Magento&lt;/a&gt;".&lt;/p&gt;

&lt;p&gt;Saiba como criar APIs personalizados no post "&lt;a href="https://dev.to/santanaluc94/como-criar-apis-personalizadas-no-magento-2-2hon"&gt;Como criar APIs personalizadas no Magento 2&lt;/a&gt;".&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#c%C3%B3digo-para-criar-o-search-criteria"&gt;
  &lt;/a&gt;
  Código para criar o Search Criteria
&lt;/h2&gt;

&lt;p&gt;Para utilizar o &lt;em&gt;Search Criteria&lt;/em&gt; em uma entidade personalizada é necessário criar uma interface de repositório e implementar o seguinte código da interface em uma classe.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#api-do-reposit%C3%B3rio"&gt;
  &lt;/a&gt;
  API do Repositório
&lt;/h3&gt;

&lt;p&gt;O &lt;em&gt;Search Criteria&lt;/em&gt; (critério de pesquisa) deve ser criado dentro da classe de repositório da entidade com um método que implemente a classe &lt;code&gt;\Magento\Framework\Api\SearchCriteriaInterface&lt;/code&gt;, que permite criar solicitações personalizadas com condições diferentes para executar filtros, ordenações, etc. &lt;/p&gt;

&lt;p&gt;A classe obriga a implementação do método &lt;code&gt;getList(\Magento\Framework\Api\SearchCriteriaInterface $searchCriteria)&lt;/code&gt;, que define que o repositório deve retornar um objeto do resultado da pesquisa, através da coleção da entidade pesquisada. O objeto desta entidade deve implementar a interface &lt;code&gt;\Magento\Framework\Api\SearchResultsInterface&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="n"&gt;namespace&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;Vendor&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;Module&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nc"&gt;Api&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;Vendor&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;Module&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nc"&gt;Api\Data&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;EntityName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="nc"&gt;Interface&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Magento\Framework\Api\SearchCriteriaInterface&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;interface&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;EntityName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="nc"&gt;RepositoryInterface&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Other repository methods&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;getList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;SearchCriteriaInterface&lt;/span&gt; &lt;span class="nv"&gt;$searchCriteria&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;EntityName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="nc"&gt;Interface&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#api-dos-resultados-da-pesquisa"&gt;
  &lt;/a&gt;
  API dos Resultados da Pesquisa
&lt;/h3&gt;

&lt;p&gt;O objeto desta entidade deve estender a interface &lt;code&gt;\Magento\Framework\Api\SearchResultsInterface&lt;/code&gt;. Esta interface implementará os métodos &lt;code&gt;getItems()&lt;/code&gt;, que retorna um array com os items correspondentes ao critério de busca do repositório, e o método &lt;code&gt;setItems(array $items)&lt;/code&gt;, que deve receber um &lt;em&gt;array&lt;/em&gt; com os itens a serem definidos para o critério de busca.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="n"&gt;namespace&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;Vendor&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;Module&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nc"&gt;Api\Data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Magento\Framework\Api\SearchResultsInterface&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;interface&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;EntityName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="nc"&gt;SearchResultsInterface&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;SearchResultsInterface&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;getItems&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;array&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;setItems&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;array&lt;/span&gt; &lt;span class="nv"&gt;$items&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;self&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#dixml"&gt;
  &lt;/a&gt;
  di.xml
&lt;/h3&gt;

&lt;p&gt;Após a criação da interface do repositório é necessário a sobrescrição através do arquivo &lt;code&gt;di.xml&lt;/code&gt;, para que o arquivo fique devidamente implementado e possa descrever em como os métodos serão executados.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;preference&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"{Vendor}\{Module}\Api\Data\{EntityName}SearchResultsInterface"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"{Vendor}\{Module}\Model\{EntityName}SearchResults"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#resultados-da-pesquisa"&gt;
  &lt;/a&gt;
  Resultados da Pesquisa
&lt;/h3&gt;

&lt;p&gt;Esta classe deverá estender a classe &lt;code&gt;\Magento\Framework\Api\SearchResults&lt;/code&gt; que implementará os métodos &lt;code&gt;getItems()&lt;/code&gt; e &lt;code&gt;setItems(array $items)&lt;/code&gt; da api personalizada dos resultados da pesquisa.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="n"&gt;namespace&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;Vendor&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;Module&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nc"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Magento\Framework\Api\SearchResults&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;Vendor&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;Module&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nc"&gt;Api\Data&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;EntityName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="nc"&gt;SearchResultsInterface&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;EntityName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="nc"&gt;SearchResults&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;SearchResults&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;EntityName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="nc"&gt;SearchResultsInterface&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#reposit%C3%B3rio"&gt;
  &lt;/a&gt;
  Repositório
&lt;/h3&gt;

&lt;p&gt;No repositório será implementado o método &lt;code&gt;getList(SearchCriteriaInterface $searchCriteria)&lt;/code&gt; que retornará um objeto da entitdade da &lt;code&gt;\{Vendor}\{Module}\Api\Data\{EntityName}SearchResultsInterface&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="n"&gt;namespace&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;Vendor&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;Module&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nc"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;Vendor&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;Module&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nc"&gt;Api&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;EntityName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="nc"&gt;RepositoryInterface&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;Vendor&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;Module&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nc"&gt;Model\ResourceModel&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;EntityName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nc"&gt;CollectionFactory&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;Vendor&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;Module&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nc"&gt;Model&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;EntityName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="nc"&gt;SearchResultsFactory&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Magento\Framework\Api\SearchCriteria\CollectionProcessorInterface&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Magento\Framework\Api\SearchCriteriaInterface&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;Vendor&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;Module&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nc"&gt;Model\ResourceModel&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;EntityName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nc"&gt;Collection&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;Vendor&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;Module&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nc"&gt;Api\Data&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;EntityName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="nc"&gt;SearchResultsInterface&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;EntityName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="nc"&gt;Repository&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;EntityName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="nc"&gt;RepositoryInterface&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;CollectionFactory&lt;/span&gt; &lt;span class="nv"&gt;$collectionFactory&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;EntityName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="nc"&gt;SearchResultsFactory&lt;/span&gt; &lt;span class="nv"&gt;$entityNameSearchResultsFactory&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;CollectionProcessorInterface&lt;/span&gt; &lt;span class="nv"&gt;$collectionProcessor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="c1"&gt;// Other classes for dependency injection&lt;/span&gt;
        &lt;span class="kt"&gt;CollectionFactory&lt;/span&gt; &lt;span class="nv"&gt;$collectionFactory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;EntityName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="nc"&gt;SearchResultsFactory&lt;/span&gt; &lt;span class="nv"&gt;$entityNameSearchResultsFactory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nc"&gt;CollectionProcessorInterface&lt;/span&gt; &lt;span class="nv"&gt;$collectionProcessor&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;collectionFactory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$collectionFactory&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;entityNameSearchResultsFactory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$entityNameSearchResultsFactory&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;collectionProcessor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$collectionProcessor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// Implementation of other repository methods&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;getList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;SearchCriteriaInterface&lt;/span&gt; &lt;span class="nv"&gt;$searchCriteria&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;EntityName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="nc"&gt;SearchResultsInterface&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="cd"&gt;/** @var Collection $collection */&lt;/span&gt;
        &lt;span class="nv"&gt;$collection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;collectionFactory&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;collectionProcessor&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$searchCriteria&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$collection&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="cd"&gt;/** @var {EntityName}SearchResultsInterface $searchResults */&lt;/span&gt;
        &lt;span class="nv"&gt;$searchResults&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;entityNameSearchResultsFactory&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nv"&gt;$searchResults&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;setSearchCriteria&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$searchCriteria&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$searchResults&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;setItems&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$collection&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getItems&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$searchResults&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Os objetos do resultado da pesquisa contêm o objeto de critério de pesquisa (que são as entidades retornadas) e as informações sobre a contagem total das entidades encontradas, independentemente de quaisquer limitações definidas nos critérios.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#crit%C3%A9rios-de-busca-nas-apis"&gt;
  &lt;/a&gt;
  Critérios de Busca nas APIs
&lt;/h2&gt;

&lt;p&gt;Para pesquisas através de APIs que invocam a chamada do método &lt;code&gt;{EntityName}Repository::getList(SearchCriteriaInterface $searchCriteria)&lt;/code&gt;. Os critérios de busca devem ser especificados na URL da requisição em APIs do método POST. O padrão básico para especificar o critério de busca deve seguir o modelo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;searchCriteria[filter_groups][{index}][filters][{index}][field]={field_name}
searchCriteria[filter_groups][{index}][filters][{index}][value]={search_value}
searchCriteria[filter_groups][{index}][filters][{index}][condition_type]={operator}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;field&lt;/strong&gt;: é o nome do atributo pesquisado;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;value&lt;/strong&gt;: valor especificado para pesquisa;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;condition_type&lt;/strong&gt;: é a condição para busca. Caso o &lt;code&gt;condition_type&lt;/code&gt; não seja especificado, eles assumirá o valor de &lt;code&gt;eq&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;O &lt;em&gt;index&lt;/em&gt; &lt;code&gt;filter_groups&lt;/code&gt; no &lt;em&gt;array&lt;/em&gt; define um ou mais &lt;code&gt;filters&lt;/code&gt;. Cada filtro define um termo de busca e o &lt;code&gt;field&lt;/code&gt;, &lt;code&gt;value&lt;/code&gt; e &lt;code&gt;condition_type&lt;/code&gt; de cada termo de busca deve estar atribuído ao mesmo número do &lt;code&gt;index&lt;/code&gt;, iniciando em &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#condi%C3%A7%C3%A3o-da-busca-para-search-criteria"&gt;
  &lt;/a&gt;
  Condição da Busca para Search Criteria
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Tipo&lt;/th&gt;
&lt;th&gt;Descrição&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;eq&lt;/td&gt;
&lt;td&gt;Igual ao valor passado&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;finset&lt;/td&gt;
&lt;td&gt;O valor passado dentro de um conjunto&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;from&lt;/td&gt;
&lt;td&gt;O início de um intervalo. Deve ser usado com a condição to&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;gt&lt;/td&gt;
&lt;td&gt;Maior que o valor passado&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;gteq&lt;/td&gt;
&lt;td&gt;Maior ou igual ao valor passado&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;in&lt;/td&gt;
&lt;td&gt;O valor passado pode ser separados por vírgula e estar dentro&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;like&lt;/td&gt;
&lt;td&gt;O valor passado pode ter os caracteres especiais SQL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;lt&lt;/td&gt;
&lt;td&gt;Menor que o valor passado&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;lteq&lt;/td&gt;
&lt;td&gt;Menor ou igual ao valor passado&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;moreq&lt;/td&gt;
&lt;td&gt;Mais ou igual ao valor passado&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;neq&lt;/td&gt;
&lt;td&gt;Não igual ao valor passado&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;nfinset&lt;/td&gt;
&lt;td&gt;O valor passado não está dentro de um conjunto&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;nin&lt;/td&gt;
&lt;td&gt;O valor passado pode ser separados por vírgula e não estar dentro&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;notnull&lt;/td&gt;
&lt;td&gt;O valor passado não pode ser null&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;null&lt;/td&gt;
&lt;td&gt;O valor passado for null&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;to&lt;/td&gt;
&lt;td&gt;O fim de um intervalo. Deve ser usado com a condição from&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Para utilizar a pesquisa com uma condicional &lt;em&gt;OR&lt;/em&gt; (ou), deve especificar múltiplos &lt;code&gt;filters&lt;/code&gt; dentro do &lt;code&gt;filter_groups&lt;/code&gt;. Condicionais do tipo &lt;em&gt;OR&lt;/em&gt; não podem utilizar diferentes &lt;code&gt;filter_groups&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Para utilizar a pesquisa com uma condicional &lt;em&gt;AND&lt;/em&gt; (e), deve especificar múltiplos &lt;code&gt;filter_groups&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Outros critérios de busca:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;searchCriteria[sortOrders][{index}][field]={field-name}&lt;/code&gt;: especifica o campo que será ordenado. Por padrão, os resultados desta busca são retornados em ordem decrescente. É possível ordenar múltiplos campos especificando o valor com &lt;code&gt;ASC&lt;/code&gt; ou &lt;code&gt;DESC&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;searchCriteria[pageSize]&lt;/code&gt;: especifica o número máximo de itens para retornar. O valor deve ser um inteiro. Caso o valor não for passado, o sistema irá retornar todas os valores;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;searchCriteria[currentPage]&lt;/code&gt;: retorna a página atual da busca.&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#finalizando"&gt;
  &lt;/a&gt;
  Finalizando
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Valores entre chaves (&lt;code&gt;{test}&lt;/code&gt;) devem ser alterados na implementação do código.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#habilitando-as-altera%C3%A7%C3%B5es"&gt;
  &lt;/a&gt;
  Habilitando as alterações
&lt;/h3&gt;

&lt;p&gt;Apague os arquivos que são gerados na compilação do Magento e execute o comando PHP para gerar a configuração das injeções de dependência e todas as classes ausentes que precisam ser geradas (&lt;em&gt;proxys&lt;/em&gt;, &lt;em&gt;interceptors&lt;/em&gt;, etc) e para limpar todos os caches de armazenamento em cache do processos.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;rm&lt;/span&gt; &lt;span class="nt"&gt;-rf&lt;/span&gt; var/generation/
&lt;span class="nb"&gt;rm&lt;/span&gt; &lt;span class="nt"&gt;-rf&lt;/span&gt; generated/
php bin/magento setup:di:compile
php bin/magento cache:clean
php bin/magento flush
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#diret%C3%B3rios-e-arquivos"&gt;
  &lt;/a&gt;
  Diretórios e Arquivos
&lt;/h3&gt;

&lt;p&gt;Segue a a lista de diretórios e arquivos que devem ser criados.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- app/
  - code/
    - {Vendor}/
        - {Module}/
          - Api/
            - {EntityName}RepositoryInterface.php
            - Data/
              - {EntityName}SearchResultsInterface.php
          - etc/
            - module.xml
            - {area}/
              - di.xml
          - Model/
            - {EntityName}Repository.php
            - {EntityName}SearchResults.php
          - registration.php
          - composer.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>php</category>
      <category>magento2</category>
      <category>tutorial</category>
      <category>braziliandevs</category>
    </item>
    <item>
      <title>Day 86/100 Font Weight</title>
      <author>Rio Cantre</author>
      <pubDate>Fri, 10 Dec 2021 12:56:23 +0000</pubDate>
      <link>https://dev.to/riocantre/day-86100-font-weight-50jp</link>
      <guid>https://dev.to/riocantre/day-86100-font-weight-50jp</guid>
      <description>&lt;p&gt;Finding the right balance on details needed to accomplish the ideal design must value the hierarchy of context and establish possible outcomes to solidify the final result.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c-NrnbVs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uzwjfj5m2zljw3x4ehbt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c-NrnbVs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uzwjfj5m2zljw3x4ehbt.png" alt="banner" width="726" height="249"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The font-weight property can take any one of these keyword values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;bold&lt;/code&gt;: Bold font weight.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;normal&lt;/code&gt;: Normal font weight. This is the default value.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;lighter&lt;/code&gt;: One font weight lighter than the element’s parent value.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;bolder&lt;/code&gt;: One font weight bolder than the element’s parent value&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Numerical values can range from 1 (lightest) to 1000 (boldest), but it&lt;br&gt;
is common practice to use increments of 100. A font weight of 400 is equal to the keyword value normal, and a font weight of 700 is equal to bold.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code-snippets"&gt;
  &lt;/a&gt;
  Code Snippets
&lt;/h2&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
 

&lt;h2&gt;
  &lt;a href="#a11y-myths"&gt;
  &lt;/a&gt;
  a11y myths
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Web accessibility is just a developer's job&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It's a team effort. Designers create accessible UIs, developers build it, QA engineers do the accessibility testing, PMs make sure that accessibility is included in the team processes, legal team checks if a product is risk free from an accessibility perspective, content managers adjust content to be compliant. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://accessibility.digital.gov/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4MI-BnCh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ra3ljfdusxyizbyp6y6y.png" alt="resource" width="726" height="78"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>javascript</category>
      <category>programming</category>
      <category>motivation</category>
    </item>
  </channel>
</rss>
