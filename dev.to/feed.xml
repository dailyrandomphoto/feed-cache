<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Get to MDN faster: mdn.io</title>
      <author>Siddharth</author>
      <pubDate>Tue, 27 Apr 2021 10:14:19 +0000</pubDate>
      <link>https://dev.to/siddharthshyniben/get-to-mdn-faster-mdn-io-4ep0</link>
      <guid>https://dev.to/siddharthshyniben/get-to-mdn-faster-mdn-io-4ep0</guid>
      <description>&lt;p&gt;Today I discovered this gem of a site: &lt;a href="//mdn.io"&gt;mdn.io&lt;/a&gt;, &lt;a href="https://github.com/lazd/mdn.io#user-content-deployment:~:text=The%20%22I'm%20feeling%20lucky%22%20URL%20shortener,-mdn.io"&gt;The "I'm feeling lucky" URL Shortener&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Mozilla Developer Network is an awesome JavaScript resource. When looking for JavaScript references on something like Function.apply, you might use a search engine with "apply site:developer.mozilla.org" and click the first result.&lt;/p&gt;

&lt;p&gt;mdn.io does that for you.&lt;/p&gt;

&lt;p&gt;You can try out a bunch of urls. Try visiting&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="//mdn.io/bind"&gt;mdn.io/bind&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="//mdn.io/closure"&gt;mdn.io/closure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="//mdn.io/cross%20origin%20sharing"&gt;mdn.io/cross origin sharing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On it's &lt;a href="https://github.com/lazd/mdn.io"&gt;repo&lt;/a&gt;, It says that mdn.io uses DuckDuckGo's Bang! functionality to redirect you to the first search result.&lt;/p&gt;

&lt;p&gt;It's really nice someone has made this.&lt;/p&gt;

</description>
      <category>todayilearned</category>
    </item>
    <item>
      <title>SQL &amp; database monthly wrap up - April 2021</title>
      <author>Helen Anderson</author>
      <pubDate>Tue, 27 Apr 2021 09:59:50 +0000</pubDate>
      <link>https://dev.to/helenanders26/sql-database-monthly-wrap-up-april-2021-2288</link>
      <guid>https://dev.to/helenanders26/sql-database-monthly-wrap-up-april-2021-2288</guid>
      <description>&lt;p&gt;Hi! I'm Helen, one of your friendly mods looking after the #sql, #postgres, #mysql, and #database tags. &lt;/p&gt;

&lt;p&gt;At the end of each month, I'll be showcasing some of the great posts, projects, and insights from the data community. &lt;/p&gt;




&lt;p&gt;To get us started we have &lt;a href="https://dev.to/seattledataguy"&gt;SeattleDataGuy&lt;/a&gt; with a post and a tool to assist you as a new data engineer. This pyramid can be thought of as a hierarchy of skill set needs to build a solid foundation as you move onto more specific skills.&lt;/p&gt;





&lt;div class="ltag__link"&gt;
  &lt;a href="/seattledataguy" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--67hnf1V4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--gLF4qTmT--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/177966/0f8eb580-5b46-4ba7-8390-18d85b04c7be.jpg" alt="seattledataguy image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/seattledataguy/what-skills-do-data-engineers-need-the-data-engineering-skill-pyramid-8hk" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;What Skills Do Data Engineers Need - The Data Engineering Skill Pyramid&lt;/h2&gt;
      &lt;h3&gt;SeattleDataGuy „Éª Apr 16 „Éª 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#database&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#datascience&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#analytics&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;p&gt;Next, we have &lt;a href="https://dev.to/nehalahmadkhan"&gt;Nehal&lt;/a&gt; with a project showing how to model many-to-many relationships where categories can have multiple products, and products can be in multiple categories. Check it out to see if it could be useful for a future project.&lt;/p&gt;





&lt;div class="ltag__link"&gt;
  &lt;a href="/nehalahmadkhan" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fhcWGDcW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--SltFeIGc--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/587755/dbf4dd6f-adbe-470e-a8ce-7392a1c7a601.png" alt="nehalahmadkhan image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/nehalahmadkhan/many-to-many-relationship-in-mongodb-nodejs-express-mongoose-4djm" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Many-to-Many relationship in MongoDB . Nodejs | Express | Mongoose&lt;/h2&gt;
      &lt;h3&gt;Nehal Ahmad „Éª Apr  3 „Éª 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#mongodb&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#node&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#database&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;p&gt;&lt;a href="https://dev.to/thepolyglotprogrammer"&gt;Jo√£o Henrique&lt;/a&gt; then shares part three in the "Writing a SQLite clone from scratch in Rust" series. In this post, you'll define the limitations of some data structures, break down the problem into smaller pieces, and learn how to deal with tables and indexes.&lt;/p&gt;





&lt;div class="ltag__link"&gt;
  &lt;a href="/thepolyglotprogrammer" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wWkY7Ojz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--2lfRTKeY--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/188861/6e9a0d7b-d05d-4845-b440-1dc579e76e28.JPG" alt="thepolyglotprogrammer image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/thepolyglotprogrammer/what-would-sqlite-look-like-if-written-in-rust-part-3-ool" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;What would SQLite look like if written in Rust? ‚Äî Part 3&lt;/h2&gt;
      &lt;h3&gt;Jo√£o Henrique Machado Silva „Éª Apr  7 „Éª 12 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#database&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#rust&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#computerscience&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;p&gt;Moving on to &lt;a href="https://dev.to/ineeader"&gt;Inee&lt;/a&gt; and a post with some learnings on LIKE. Check it out for tips on how to get started with wildcards and some great examples.&lt;/p&gt;





&lt;div class="ltag__link"&gt;
  &lt;a href="/ineeader" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--asAuXB1s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--TfMchJZt--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/493736/0698eadb-2da7-4548-a80f-1473e5ec6e02.jpeg" alt="ineeader image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/ineeader/like-so-confused-j1j" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Like, so confused...&lt;/h2&gt;
      &lt;h3&gt;Inee Ader üêå „Éª Apr  5 „Éª 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#sql&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#operator&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#like&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#sqlite&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;p&gt;Next, we have &lt;a href="https://dev.to/cassidycodes"&gt;Cassidy&lt;/a&gt; and the story of performance challenges, the EXPLAIN plan, slow indexes, and some experimentation. Give it a read for a great data story.&lt;/p&gt;





&lt;div class="ltag__link"&gt;
  &lt;a href="/cassidycodes" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lz7L0drF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--62pMcmkY--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/293850/db5bf988-b467-4070-8f68-dbbda167446b.jpeg" alt="cassidycodes image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/cassidycodes/one-weird-trick-for-speeding-up-order-by-that-you-probably-shouldn-t-use-4pk5" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;One WEIRD Trick for Speeding Up ORDER BY That You Probably Shouldn't Use&lt;/h2&gt;
      &lt;h3&gt;Cassidy K (she/her) „Éª Apr  9 „Éª 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#postgres&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#sql&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#performance&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;p&gt;Our last post is from Joe and the &lt;a href="https://dev.to/onesignal"&gt;OneSignal&lt;/a&gt; team. This post is packed full of lessons learned from five years of scaling PostgreSQL. In this article, you'll read about the challenges the team has dealt with and the solutions they've put in place by figuring it out the hard way. Read the whole post from the top, or jump in at any point to learn something new.&lt;/p&gt;





&lt;div class="ltag__link"&gt;
  &lt;a href="/jwilm" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i65OUmsk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--bE8F7tR0--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/617459/d134cc26-ac70-4fb0-9066-d2202c5807f2.jpeg" alt="jwilm image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/onesignal/lessons-learned-from-5-years-of-scaling-postgresql-4fed" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Lessons Learned From 5 Years of Scaling PostgreSQL&lt;/h2&gt;
      &lt;h3&gt;Joe Wilm „Éª Apr 19 „Éª 18 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#engineering&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#architecture&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#database&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#postgres&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;








&lt;p&gt;That's all for this month! For more from the data community check out the #sql, #postgres, #mysql, and #database tags, and follow &lt;a href="https://twitter.com/TheDatabaseDev"&gt;@TheDatabaseDev on Twitter&lt;/a&gt;.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jJnjqEMK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6m19oidtq78smktb9haq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jJnjqEMK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6m19oidtq78smktb9haq.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




</description>
      <category>sql</category>
      <category>database</category>
      <category>bestofdev</category>
    </item>
    <item>
      <title>Ultimate Tips for Choosing Top Mobile App Development Agency</title>
      <author>Best Digital Trendz</author>
      <pubDate>Tue, 27 Apr 2021 09:50:29 +0000</pubDate>
      <link>https://dev.to/best_digital_trendz/ultimate-tips-for-choosing-top-mobile-app-development-agency-1ndk</link>
      <guid>https://dev.to/best_digital_trendz/ultimate-tips-for-choosing-top-mobile-app-development-agency-1ndk</guid>
      <description>&lt;p&gt;It is difficult to choose the right mobile app development agency. Because there are so many companies in the market. The best web and mobile development company provides essential services for building mobile app development intended for mobile devices. As such, working with the right development company is vital to the success of every client project.&lt;/p&gt;

&lt;p&gt;This is a very typical Question to choose the right development agency for your dream project. We describe some Top 5 points for choosing a Top Mobile App Development Agency for your Startup mobile app Project.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Choose an Experience Development Agency&lt;/strong&gt;&lt;br&gt;
Maximum clients search for the best experience and professional agencies before gives any project to the agency. Most of the time, clients have high expectations of the project development. For full filled with client need, Agencies and companies have own experienced and professional of their development.&lt;/p&gt;

&lt;p&gt;Read More- &lt;a href="https://bestdigitaltrendz.com/2021/03/15/most-important-reasons-why-choose-magento-for-ecommerce-website-development/"&gt;Why Choose Magento for e-Commerce Website Development&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Agency Portfolio&lt;/strong&gt;&lt;br&gt;
An expert and knowledgeable programmer and developers must possess perfect UI/UX skills. While closely looking at their company testimonials and portfolio. This portfolio shows the company's work with clients and others customers. UI creates a major role in any application development and increases the rate of user interaction.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. On-Time Project Delivery&lt;/strong&gt;&lt;br&gt;
Project timeline is the most important part of any project development process. Because clients required on-time delivery for their creative development project. You can choose small and large agencies for mobile and app development projects. Their teams are already in place, so you don‚Äôt have to go to look for some other company and freelancers to complete a team. Therefore, no time is lost.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Go for client references&lt;/strong&gt;&lt;br&gt;
Client references show the major role of the development company and agency. The client is looking for a client reference, checking it, and then calling the agency and giving a project for work.&lt;/p&gt;

&lt;p&gt;Read Now- &lt;a href="https://bestdigitaltrendz.com/2021/03/05/top-7-amazing-benefits-of-blockchain-technology-for-businesses/"&gt;Top advantages of Blockchain Technology&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Budget Calculation&lt;/strong&gt;&lt;br&gt;
How much money can you afford to spend on the project? This is an important Question for each client. To start a project, the budget is a significant element before making big investments to make a creative brand. If your budget is $5,000, it is not enough for large software development and IT company then you can choose the best small IT agency. and If your budget is less than $1,000, then you can hire the best freelancer for project development.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;br&gt;
In the end, choosing the best app development agency for your business or startup depends on your project. Freelancers are affordable but they do not work with one employer. Small web app development agencies are the best option for your next project. because they have dedicated teams with different expertise and professional experience. &lt;br&gt;
If you like this blog then you can submit any feedback and suggestion in the comment box.&lt;/p&gt;

</description>
      <category>howtochooseappagency</category>
      <category>choosemobileapp</category>
      <category>tips</category>
      <category>mobileappagency</category>
    </item>
    <item>
      <title>JS interview in 2 minutes / Static vs Dynamic typing</title>
      <author>Nikita Kozlov</author>
      <pubDate>Tue, 27 Apr 2021 09:49:44 +0000</pubDate>
      <link>https://dev.to/kozlovzxc/js-interview-in-2-minutes-static-vs-dynamic-typing-2d5k</link>
      <guid>https://dev.to/kozlovzxc/js-interview-in-2-minutes-static-vs-dynamic-typing-2d5k</guid>
      <description>&lt;p&gt;&lt;strong&gt;Question:&lt;/strong&gt;&lt;br&gt;
Is JavaScript a statically or a dynamically typed language?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Quick answer:&lt;/strong&gt;&lt;br&gt;
JavaScript is a dynamically typed language, but TypeScript is a statically typed language.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Longer answer:&lt;/strong&gt;&lt;br&gt;
In dynamically typed languages all type checks are performed in a runtime, only when your program is executing. So this means you can just assign anything you want to the variable and it will work.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;
&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 0&lt;/span&gt;
&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello world&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Hello world&lt;/span&gt;
&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;key&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;value&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// {key:'value'}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we take a look at Typescript, it is a statically typed language, so all checks will be performed during compile/build run before we actually execute our program.&lt;/p&gt;

&lt;p&gt;So the previous code with added variable &lt;code&gt;a&lt;/code&gt; type won't work. Even from the JavaScript standpoint it is valid (except types) and will run without any errors.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Fc9hMdWp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wugrp9jyagvmw2fy4dt9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Fc9hMdWp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wugrp9jyagvmw2fy4dt9.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In TypeScript, you can specify variable type manually or it may be calculated automatically. In the following example, notice that there are no type definitions, but TypeScript still knows that &lt;code&gt;a&lt;/code&gt; is a numeric variable.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ufNx4UvE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oo8mtv13tq02hb23uwt4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ufNx4UvE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oo8mtv13tq02hb23uwt4.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Real-life applications:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this section, we are stepping into a middle ground zone, because debates about what is better or worse are still around.&lt;/p&gt;

&lt;p&gt;// Personal opinion start&lt;/p&gt;

&lt;p&gt;Both statically and dynamically typed languages have their own advantages.&lt;/p&gt;

&lt;p&gt;JavaScript (dynamic typing):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Faster prototyping, because you don't care about types.&lt;/li&gt;
&lt;li&gt;Easier learning curve, because you need to learn fewer things.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;TypeScript (static typing):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Richer code completion, because you know all methods for all variables right away.&lt;/li&gt;
&lt;li&gt;Better maintainability, you only need a type definition to understand what something is doing, e.g. API response type definition, function params, and return type, ...&lt;/li&gt;
&lt;li&gt;Easier to catch &lt;strong&gt;simple&lt;/strong&gt; errors like mistypes (users vs usrs).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;// If you add other pros in the comments, I will add them here.&lt;/p&gt;

&lt;p&gt;Btw nor JavaScript, nor TypeScript won't allow you to not write tests. Even TypeScript with its type system won't let you catch all the errors during build time, only simple ones.&lt;/p&gt;

&lt;p&gt;// Personal opinion end&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resources:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://en.wikipedia.org/wiki/JavaScript"&gt;Wiki/JavaScript&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Other posts:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/kozlovzxc/js-interview-in-2-minutes-higher-order-functions-38kb"&gt;JS interview in 2 minutes / Higher Order Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/kozlovzxc/js-interview-in-2-minutes-value-vs-reference-5a8k"&gt;JS interview in 2 minutes / value vs reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to/kozlovzxc/js-interview-in-2-minutes-vs-1f58"&gt;JS interview in 2 minutes / == vs ===&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Btw, I will post more fun stuff here and on &lt;a href="https://twitter.com/kozlovzxc"&gt;Twitter&lt;/a&gt;. Let's be friends üëã&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>beginners</category>
      <category>career</category>
    </item>
    <item>
      <title>Free Tailwind dashboard template</title>
      <author>Pasquale Vitiello</author>
      <pubDate>Tue, 27 Apr 2021 09:46:11 +0000</pubDate>
      <link>https://dev.to/pacovitiello/free-tailwind-dashboard-template-31m5</link>
      <guid>https://dev.to/pacovitiello/free-tailwind-dashboard-template-31m5</guid>
      <description>&lt;p&gt;Hey guys,&lt;/p&gt;

&lt;p&gt;As the title says, I made a free dashboard template using Tailwind CSS + React!&lt;/p&gt;

&lt;p&gt;It comes with several pre-coded charts/graphs that I developed using the awesome Chart.js 3 library!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Live demo: &lt;a href="https://mosaic.cruip.com/"&gt;https://mosaic.cruip.com/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Download on Github: &lt;a href="https://github.com/cruip/tailwind-dashboard-template"&gt;https://github.com/cruip/tailwind-dashboard-template&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Use it for whatever you want, and feel free to share your comments and feedback below üôÇ &lt;/p&gt;

</description>
      <category>showdev</category>
      <category>react</category>
      <category>tailwindcss</category>
      <category>webdev</category>
    </item>
    <item>
      <title>AWS monthly wrap up - April 2021</title>
      <author>Helen Anderson</author>
      <pubDate>Tue, 27 Apr 2021 09:13:29 +0000</pubDate>
      <link>https://dev.to/aws-heroes/aws-monthly-wrap-up-april-2021-3kfg</link>
      <guid>https://dev.to/aws-heroes/aws-monthly-wrap-up-april-2021-3kfg</guid>
      <description>&lt;p&gt;Hi! I'm Helen, one of your AWS Heroes! At the end of each month, I'll be showcasing some of the great posts, projects, and insights from the AWS community right here on Dev.to. &lt;/p&gt;




&lt;p&gt;To get us started we have &lt;a href="https://dev.to/sowmenappd"&gt;Sowmen&lt;/a&gt; with a deep dive into Docker, NGINX, and load balancing with AWS ELB. Check out the post for how to build a highly available system that is able to withstand spiky and heavy traffic over prolonged durations of operation.&lt;/p&gt;





&lt;div class="ltag__link"&gt;
  &lt;a href="/sowmenappd" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zrC_nzxw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--rvyahjUU--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/394556/89714ff4-10ba-4d3c-bc04-8647d94c4d50.jpeg" alt="sowmenappd image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/sowmenappd/build-a-highly-available-node-js-application-using-docker-nginx-and-aws-elb-3cjp" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Build a highly available Node.js application using Docker, NGINX and AWS ELB&lt;/h2&gt;
      &lt;h3&gt;Sowmen Rahman „Éª Apr 15 „Éª 7 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#aws&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#devops&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#docker&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#nginx&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;p&gt;Next, we have &lt;a href="https://dev.to/rinkiyakedad"&gt;Arsh&lt;/a&gt; with an introduction to Terraform. Arsh will be writing more about Terraform in the coming weeks so check out this post, and stay tuned for more.&lt;/p&gt;





&lt;div class="ltag__link"&gt;
  &lt;a href="/rinkiyakedad" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MXli1qCF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--b2nfmkP3--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/488212/3af8842e-6458-4746-afc9-43ce6a9659d0.jpeg" alt="rinkiyakedad image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/rinkiyakedad/introduction-to-terraform-545n" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Introduction To Terraform &lt;/h2&gt;
      &lt;h3&gt;Arsh Sharma „Éª Apr  4 „Éª 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#terraform&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#devops&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#kubernetes&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#aws&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;p&gt;AWS Community Builder &lt;a href="https://dev.to/aditmodi"&gt;Adit&lt;/a&gt; then shares how to get started with containers on AWS. If you've ever been curious about Elastic Kubernetes Service (EKS), Elastic Container Service (ECS), and Elastic Beanstalk this is a great place to start.&lt;/p&gt;





&lt;div class="ltag__link"&gt;
  &lt;a href="/aditmodi" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FYJrtrA_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--mUzXbt1U--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/497987/edde8513-7308-4a4d-9592-2be160d074d2.png" alt="aditmodi image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/aws-builders/introduction-to-containers-with-aws-og4" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Introduction to Containers with AWS&lt;/h2&gt;
      &lt;h3&gt;Adit Modi „Éª Apr 16 „Éª 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#aws&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#cloud&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#devops&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;p&gt;Moving on to our next post from &lt;a href="https://dev.to/dabit3"&gt;Nader&lt;/a&gt; and a walkthrough of how to build a Neptune-backed AppSync GraphQL API with AWS CDK, AWS AppSync, and AWS Lambda. Check it out for a great tutorial, plus a video as well.&lt;/p&gt;





&lt;div class="ltag__link"&gt;
  &lt;a href="/dabit3" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9gYALFAE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--YawV5F9h--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/126437/41231eb2-054b-4417-bc35-814e491a2d5d.jpeg" alt="dabit3 image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/dabit3/building-a-graphql-api-on-aws-with-amazon-neptune-graph-database-and-cdk-428a" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Building a GraphQL API on AWS with Amazon Neptune Graph Database and CDK&lt;/h2&gt;
      &lt;h3&gt;Nader Dabit „Éª Apr  1 „Éª 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#graphql&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#aws&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#fullstack&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;p&gt;This next post by &lt;a href="https://dev.to/aspittel"&gt;Ali&lt;/a&gt; from the AWS Amplify team showcases Amplify DataStore with an offline note editor tutorial. Having a performant offline app is important for global accessibility and leads to a better experience for users in areas with spotty internet and mobile connection. &lt;/p&gt;





&lt;div class="ltag__link"&gt;
  &lt;a href="/aspittel" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lsknEIX6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--stJcpewb--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/38627/77a2a5e7-603e-41b4-afcc-f7aff468ae2f.jpg" alt="aspittel image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/aws/building-an-offline-ready-form-with-vanilla-javascript-3nhd" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Building an Offline-Ready Form With Vanilla JavaScript&lt;/h2&gt;
      &lt;h3&gt;Ali Spittel „Éª Apr 19 „Éª 9 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#aws&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;p&gt;Next, we have AWS Community Builder &lt;a href="https://dev.to/allenheltondev"&gt;Allen&lt;/a&gt; with another excellent article on architecture, this time with serverless focus. Check it out for more on the core pillars of the Well-Architected model through a serverless application lens.&lt;/p&gt;





&lt;div class="ltag__link"&gt;
  &lt;a href="/allenheltondev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--18SGl2wG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Kc2FhiE1--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/153157/a3f68892-e297-4ebe-8084-96d7b28f3c6b.jpg" alt="allenheltondev image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/aws-builders/solutions-architect-tips-decoding-the-aws-serverless-design-princples-413n" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Solutions Architect Tips - Decoding the AWS Serverless Design Principles&lt;/h2&gt;
      &lt;h3&gt;Allen Helton „Éª Mar 30 „Éª 7 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#serverless&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#aws&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;p&gt;Our last post is from &lt;a href="https://dev.to/taylorreece"&gt;Taylor&lt;/a&gt; from Prismatic with a post on how their infrastructure has evolved over time. Taylor goes into what went well in Lambda, and why they made the decision to migrate some services to AWS Elastic Container Service (ECS).&lt;/p&gt;

&lt;p&gt;--&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/taylorreece" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8XMk17tW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--9QMfuOT7--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/501945/d325f92d-44ed-447b-96fe-e9de3588969c.jpeg" alt="taylorreece image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/prismatic/why-we-moved-from-lambda-to-ecs-4m96" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Why We Moved From Lambda to ECS&lt;/h2&gt;
      &lt;h3&gt;Taylor Reece „Éª Apr 21 „Éª 7 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#aws&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#devops&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#serverless&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#cloud&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;p&gt;Don't forget to check out &lt;a href="https://www.theelastic.guru/teamelasticguru/200-of-free-aws-credits-up-for-grabs-5hka"&gt;The Elastic Guru&lt;/a&gt;, a community created to help young people and students get started with AWS.&lt;/p&gt;

&lt;p&gt;As part of that mission, they are giving away $200 of free AWS credits. To be in to win all you need to do is introduce yourself in the welcome thread on The Elastic Guru forum by 31/5/2021.&lt;/p&gt;

&lt;p&gt;Good luck!&lt;/p&gt;





&lt;div class="ltag__link"&gt;
  &lt;a href="/leewynne" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nvpmw0U8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--OQxO631L--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/19958/2d274278-fcb9-491b-87ec-5b62714bb501.JPG" alt="leewynne image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/leewynne/200-of-free-aws-credits-up-for-grabs-4pj7" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Just a heads up. Our Forem powered community (focused on AWS) is giving away free AWS credits&lt;/h2&gt;
      &lt;h3&gt;lee „Éª Apr 15 „Éª 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#aws&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#awsheroes&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





</description>
      <category>aws</category>
      <category>bestofdev</category>
    </item>
    <item>
      <title>Hoisting in Javascript</title>
      <author>Moni</author>
      <pubDate>Tue, 27 Apr 2021 08:53:05 +0000</pubDate>
      <link>https://dev.to/moni_coder/hoisting-in-javascript-4f2b</link>
      <guid>https://dev.to/moni_coder/hoisting-in-javascript-4f2b</guid>
      <description>&lt;p&gt;&lt;strong&gt;Definition&lt;/strong&gt;¬†&lt;br&gt;
In JavaScript is a behavior in which a function or a variable can be used before declaration.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Types of Hoisting&lt;/strong&gt;  &lt;/p&gt;

&lt;p&gt;Variable Hoisting : Only variable declared with var is hoisted (not let and const)&lt;/p&gt;

&lt;p&gt;Function Hoisting :  Only Simple functions is hoisted (not function expressions)&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/nsxnGWQcZWA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
    </item>
    <item>
      <title>TellDontAsk and CQRS - Object Design Guide Summary 2</title>
      <author>MiguelDevelopez</author>
      <pubDate>Tue, 27 Apr 2021 08:47:31 +0000</pubDate>
      <link>https://dev.to/migueldevelopez/telldontask-and-cqrs-object-design-guide-summary-2-1ffl</link>
      <guid>https://dev.to/migueldevelopez/telldontask-and-cqrs-object-design-guide-summary-2-1ffl</guid>
      <description>&lt;p&gt;Welcome back to the second part of the Summary of Object design style guide by Matthias Noback, where I will try to synthesize the differences between query and command methods, CQS, TellDontAsk principle, and more things from the book.&lt;br&gt;
And as for the first post, I highly recommend you to read the full book to find more examples in detail.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J9OY34qM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/93cshg5jq3qxwl906hsx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J9OY34qM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/93cshg5jq3qxwl906hsx.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let‚Äôs start!&lt;br&gt;
There are two kinds of methods in an object, these are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Retrieve a piece of information: getters, format, calc, ‚Äúselect‚Äù from the DB...&lt;/li&gt;
&lt;li&gt;Perform tasks: sending an email, ‚Äúupdate‚Äù or ‚Äúdelete‚Äù from the DB‚Ä¶
You may know about the Command Query Responsibility Segregation (CQRS) principle, this principle is to define exactly what I was talking about (do not mix with the Command from CQRS with the &lt;a href="https://refactoring.guru/design-patterns/command"&gt;Command Pattern&lt;/a&gt; ). &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#1%C2%BA-retrieving-information-with-query-methods"&gt;
  &lt;/a&gt;
  1¬∫ Retrieving information with query methods
&lt;/h2&gt;

&lt;p&gt;To name these methods just call them what they are going to return or as the action, they are going to perform getting the information. Examples: itemCount, discountPercentage, calculateNetAmount, exchangeRateFor...&lt;br&gt;
Query methods should have a single return type. You may still return null, but make sure to look for alternatives, like a   &lt;a href="https://refactoring.guru/introduce-null-object"&gt;null object&lt;/a&gt;, an empty list if your method will return an array, or throw an exception instead.&lt;br&gt;
Here some examples:&lt;br&gt;
&lt;em&gt;BAD WAY&lt;/em&gt;, imagine what will be the code that receives this response.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cd"&gt;/**
* @return string|bool
*/&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;isValid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$emailAddress&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="cm"&gt;/* ... */&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'Invalid email address'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are many better ways to deal with it, but all of them have considerations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Return a type or null.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;findOneBy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$type&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;?Page&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nv"&gt;$page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;findOneBy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$type&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nc"&gt;Page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// page is a Page object and can be used as such.&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// page is null, and we have to decide what to do with it.&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Throw an exception and capture it in the client.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;getById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$id&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;User&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nv"&gt;$user&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="nc"&gt;UserNotFound&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;withId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$user&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now the author talks about the good practice of not showing the internal functionality to the client, which reminds me of the principle Tell-Don‚Äôt-Ask, this principle encourages us to move behavior inside of an object, here an example:&lt;br&gt;
&lt;em&gt;BAD WAY&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Product&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;shouldDiscountPercentageBeApplied&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
     &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;discountPercentage&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;Percentage&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
     &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;discountAmount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;?Percentage&lt;/span&gt; &lt;span class="nv"&gt;$percentage&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;Money&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

     &lt;span class="c1"&gt;// Apply the logic and calculations in the client is not the best practice&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// # main.php or Client.php or whatever&lt;/span&gt;
&lt;span class="nv"&gt;$product&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;...&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$product&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;shouldDiscountPercentageBeApplied&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$percentage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$product&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;discountPercentage&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nv"&gt;$money&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$product&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;discountAmount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$percentage&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$money&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$product&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;discountAmount&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;$money&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;BETTER WAY&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Product&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;calculateFinalAmount&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;Money&lt;/span&gt;
     &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// use here the logic of the private methods, instead use them in the client&lt;/span&gt;
        &lt;span class="c1"&gt;// Let query methods expose as little of an object‚Äôs internals as possible.&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;
     &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;shouldDiscountPercentageBeApplied&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
     &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;discountPercentage&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;Percentage&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
     &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;discountAmount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;?Percentage&lt;/span&gt; &lt;span class="nv"&gt;$percentage&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;Money&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// # main.php or Client.php or whatever&lt;/span&gt;
&lt;span class="nv"&gt;$product&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;...&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$money&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$product&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;calculateFinalAmount&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nv"&gt;$money&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the bad way, the client has to use all the public methods to calculate the final amount of the product, so the client needs to know how to use the public methods, and that‚Äôs not the best solution.&lt;br&gt;
With the better way, the client just has to call the calculateFinalAmount and it will execute all the logic, making this easier, decoupled, and centralized. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WsXeoObm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vm42x95iemduua9344t1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WsXeoObm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vm42x95iemduua9344t1.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;These recommendations should not become a rule that you can‚Äôt deviate from. In fact, no programming rule should ever be like that.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Query methods shouldn‚Äôt use command methods inside them to avoid having side effects. There are some exceptions, for example in a method of a controller, imagine a method that creates a user and returns it to the front, or some specific methods, for example, a method named nextId(), if two clients called this method at the same time it will return the same ID, so this method should make a side effect to avoid this potential error.&lt;/p&gt;

&lt;p&gt;There are more tips related to the inversion dependencies and how to test with fakes or stubs, but I would like to deal with it in another different and specific post related to tests and the advantages of this practice.&lt;br&gt;
Basically, when a query method needs to cross the system‚Äôs boundary (using DB, API call...) use an abstraction with an interface to be able to change and test it easily in the future.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#2%C2%BA-performing-tasks-with-command-methods"&gt;
  &lt;/a&gt;
  2¬∫ Performing tasks with command methods
&lt;/h2&gt;

&lt;p&gt;To name this kind of method the author recommends in the imperative form, for example, sendReminderEmail, saveRecord‚Ä¶ and the command methods are easy to recognize because they always should return null.&lt;br&gt;
But what happens if a command has to do more than one thing? Something like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;changeUserPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="kt"&gt;UserId&lt;/span&gt; &lt;span class="nv"&gt;$userId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$plainTextPassword&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;repository&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$userId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nv"&gt;$hashedPassword&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;passwordHasher&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$plainTextPassword&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nv"&gt;$user&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;changePassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$hashedPassword&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;repository&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;mailer&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;sendPasswordChangedEmail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First of all, as you can see there is no problem using a query method in a command method, and on the other hand, the changeUserPassword hides the fact that this method sends an email when a user changes the password, how can we deal with it properly? The best solution would be to dispatch an event, which allows us to have an object more decoupled, handle some effects in the background‚Ä¶ but we have to take care and dispatch it explicitly to not lose track of where it is dispatched.&lt;br&gt;
&lt;code&gt;$this-&amp;gt;eventDispatcher-&amp;gt;dispatch(new UserPasswordChanged($userId));&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;As we do in the query methods, throwing an exception if something goes wrong is the best approach. You may be tempted to return a string in command, but remember that command must return null.&lt;/p&gt;

&lt;p&gt;What should we do if a command needs to cross a system boundary (commands that reach out to some remote service, database, etc)? It‚Äôs the same as I mentioned in the queries, abstracting with interfaces. This will allow us to test command methods easily using a mock or a spy to test calls to these methods, avoiding sending emails or using the DB when the test runs. You can use a mocking tool for this or write your own spies.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#3%C2%BA-dividing-responsibilities"&gt;
  &lt;/a&gt;
  3¬∫ Dividing responsibilities
&lt;/h2&gt;

&lt;p&gt;In this chapter, the book talked about CQRS, the benefits, and why we should apply it. Personally, I think the CQRS will be overkill if your application won‚Äôt need to be maintained in a very long-term period (scalability matters), if the size is small or medium, simple user interface e.g. CRUD style, simple business logic‚Ä¶&lt;br&gt;
In summary, CQRS allows you to separate the load from writes and reads allowing you to scale independently, for example, we‚Äôll split a class like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PurchaseOrder&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nv"&gt;$purchaseOrderId&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="nv"&gt;$wasReceived&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nv"&gt;$productId&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nv"&gt;$orderedQuantity&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;purchaseOrderId&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;purchaseOrderId&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;markAsReceived&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;wasReceived&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In a class for reading methods and another class for saving methods.&lt;br&gt;
The class with command methods:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PurchaseOrder&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nv"&gt;$purchaseOrderId&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="nv"&gt;$wasReceived&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nv"&gt;$productId&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nv"&gt;$orderedQuantity&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;markAsReceived&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;wasReceived&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And to extract the query methods there are several ways to do that, for example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Specific to a use case.&lt;/li&gt;
&lt;li&gt;Directly from their data source.&lt;/li&gt;
&lt;li&gt;Domain events.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some advantages are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Avoid exposing more behavior to a client than it needs.&lt;/li&gt;
&lt;li&gt;Allow the read and write workloads to scale independently, and may result in fewer lock contentions.&lt;/li&gt;
&lt;li&gt;The read side can use a schema that is optimized for queries, while the write side uses a schema that is optimized for updates&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#4%C2%BA-changing-the-behavior-of-services"&gt;
  &lt;/a&gt;
  4¬∫ Changing the behavior of services
&lt;/h2&gt;

&lt;p&gt;Some suggestions and recommendations about how to refactor a service. Some of these suggestions were covered before like, for example, use event listener for additional behavior, compose with abstractions (interfaces) to achieve more complex and easy to configure behavior because you will be able to replace instead of modifying the current one, introduce constructor arguments to make behavior configurable‚Ä¶&lt;br&gt;
And something that I wanted to talk about in the first part‚Ä¶ composition over inheritance.&lt;br&gt;
The main reason for it is because with the inheritance you lose the flexibility and reconfigurability that brings to you the composition with interfaces. If you try to change the behavior of an existing object comes with many downsides:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Subclass and parent class become tied together, making your code more coupled, maybe with methods that you won‚Äôt use at all. Example: the typical BaseController.&lt;/li&gt;
&lt;li&gt;Subclasses can override protected but also public methods, so a lot of the internals of the object are now exposed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A better approach, according to the author, to reusing code is a trait. A trait is plain code reuse of a compiler-level copy/paste of code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;RecordsEvents&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;releaseEvents&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;array&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;clearEvents&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;trait&lt;/span&gt; &lt;span class="nc"&gt;EventRecordingCapabilities&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;array&lt;/span&gt; &lt;span class="nv"&gt;$events&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;recordThat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="nv"&gt;$event&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;events&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$event&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;releaseEvents&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;array&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;events&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;clearEvents&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;events&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Product&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;RecordsEvents&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;EventRecordingCapabilities&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Don‚Äôt forget to close all your classes down for inheritance:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Mark them as final and make all properties&lt;/li&gt;
&lt;li&gt;Methods private, unless they are part of the public interface of the class&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And that‚Äôs all, I hope you enjoy it and the last part of this series will be published soon! &lt;/p&gt;

&lt;p&gt;Sources and more info&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://amzn.to/38wURcK"&gt;The book&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://matthiasnoback.nl/"&gt;Blog of the book author&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://martinfowler.com/bliki/CQRS.html"&gt;CQRS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jesusvalerareales.medium.com/testing-with-test-doubles-7c3abb9eb3f2"&gt;Testing with doubles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/49002/prefer-composition-over-inheritance?page=1&amp;amp;tab=votes#tab-top"&gt;Composition over inheritance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://refactoring.guru/introduce-null-object"&gt;Null object&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://refactoring.guru/design-patterns/command"&gt;Command Pattern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.martinfowler.com/bliki/TellDontAsk.html"&gt;TellDontAsk&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>php</category>
      <category>java</category>
      <category>architecture</category>
      <category>oop</category>
    </item>
    <item>
      <title>What is Virtual DOM? How Virtual DOM works ? What is Reconciliation ? What is diffing algorithm? What makes React so fast ?</title>
      <author>Kishan Sheth</author>
      <pubDate>Tue, 27 Apr 2021 08:44:53 +0000</pubDate>
      <link>https://dev.to/koolkishan/what-is-virtual-dom-how-virtual-dom-works-what-is-reconciliation-what-is-diffing-algorithm-what-makes-react-so-fast-327a</link>
      <guid>https://dev.to/koolkishan/what-is-virtual-dom-how-virtual-dom-works-what-is-reconciliation-what-is-diffing-algorithm-what-makes-react-so-fast-327a</guid>
      <description>&lt;h1&gt;
  &lt;a href="#you-can-also-refer-to-my-youtube-video-for-understanding-with-animations-about-the-virtual-dom-which-is-attached-at-the-end-of-the-post"&gt;
  &lt;/a&gt;
  You can also refer to my YouTube video for understanding with animations about the Virtual DOM which is attached at the end of the post.
&lt;/h1&gt;

&lt;p&gt;To learn virtual DOM you should also have some basic idea about the DOM.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-dom"&gt;
  &lt;/a&gt;
  What is DOM?
&lt;/h2&gt;

&lt;p&gt;DOM stands for Document Object Model. It is the hierarchical representation of your web page(UI). For Example you have a blog website, so the hierarchical representation of the website would be as follows.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DnUxxBK9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lzh7dyokhm5c1zhb0ypv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DnUxxBK9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lzh7dyokhm5c1zhb0ypv.png" alt="Blogging Website DOM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is how the browser renders your web page. This is called DOM.&lt;/p&gt;

&lt;p&gt;If there was already DOM then why was the concept of virtual DOM implemented? &lt;br&gt;
Because DOM manipulation is very slower. Consider the blogging website example and in any of the blog post if a user modifies a comment then the whole DOM (UI) needs to be repainted because of that one little change. This change is very expensive in terms of time complexity.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#to-solve-this-problem-here-comes-our-hero-virtual-dom"&gt;
  &lt;/a&gt;
  To solve this problem here comes our hero Virtual DOM.
&lt;/h4&gt;
&lt;h2&gt;
  &lt;a href="#what-is-virtual-dom-"&gt;
  &lt;/a&gt;
  What is Virtual DOM ?
&lt;/h2&gt;

&lt;p&gt;In simple words, virtual DOM is just a copy of the original DOM kept in the memory and synced with the real DOM by libraries such as ReactDOM. This process is called Reconciliation.&lt;/p&gt;

&lt;p&gt;Virtual DOM has the same properties that of the Real DOM, but it lacks the power to directly change the content of the screen.&lt;/p&gt;

&lt;p&gt;Think of Virtual DOM as the blueprint of a machine, changes made to the blueprint doesn't reflects on the machine itself.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-virtual-dom-works-"&gt;
  &lt;/a&gt;
  How Virtual DOM works ?
&lt;/h2&gt;

&lt;p&gt;So when there is a update in the virtual DOM, react compares the virtual DOM with a snapshot of the virtual DOM taken right before the update of the virtual DOM.&lt;/p&gt;

&lt;p&gt;With the help of this comparison React figures out which components in the UI needs to be updated. This process is called diffing. The algorithm that is used for the diffing process is called as the diffing algorithm.&lt;/p&gt;

&lt;p&gt;Once React knows which components has been updated, then it replaces the original DOM nodes with the updated DOM node.&lt;/p&gt;

&lt;p&gt;Let's understand this with a Example.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#initial-dom"&gt;
  &lt;/a&gt;
  Initial DOM
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;section&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
         &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
               &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;         &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;         &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
               &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;         &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/section&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#updated-dom"&gt;
  &lt;/a&gt;
  Updated DOM
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;section&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
         &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
               &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;         &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;         &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
               &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;         &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/section&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now here when there is update in the UI then react compares the new virtual DOM with the pre-updated virtual DOM and points out that in the second &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; the content has been changed so it only updates the content of the second div in the real DOM.&lt;/p&gt;

&lt;p&gt;This process is fast as only a single node had to change as opposed the whole repainting of the UI.&lt;/p&gt;

&lt;p&gt;But wait what if the DOM elements are added ?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;section&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
         &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
               &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;         &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;         &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
               &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;               &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
         &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/section&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this scenario only a node has been added to the second div so React just adds it to the real DOM.&lt;/p&gt;

&lt;p&gt;But wait here the element was added at the end of the div element.&lt;/p&gt;

&lt;p&gt;What if we add an element at the top ?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;section&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
         &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
               &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;         &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;         &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
               &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
               &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;         &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/section&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;here the virtual DOM would repaint the whole second div as when it tries to compares it with the pre-updated virtual DOM then in second div the first child was h1 and now it is h2 so it doesn't just add the new element instead it replaces the whole div element.&lt;/p&gt;

&lt;p&gt;Imagine that instead of just the two elements inside the second div tag we have 1000's of hierarchical components. It will re-render those 1000's of components which didn't changed.&lt;/p&gt;

&lt;p&gt;To solve this issue React supports a key attribute. When the children of the React components have keys, React uses the keys to match children in the pre-updated virtual DOM.&lt;/p&gt;

&lt;p&gt;Let's use these keys in our example above and see how it solves our problem.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;section&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
         &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
               &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;as231&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;         &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;         &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
               &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h2&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;12dsa&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
               &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;asddda&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;         &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/section&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here now react diffing algorithm matches the component with previous key &lt;code&gt;asdda&lt;/code&gt; in the second div and a new element with key &lt;code&gt;12dsa&lt;/code&gt;. So in this scenario react just marks the new element and it is added to the real DOM. This solves our problem of unnecessary re-rendering of unchanged components.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#make-sure-the-following-points-when-using-keys-"&gt;
  &lt;/a&gt;
  Make sure the following points when using keys :
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;React keys should be different in sibling components, not 
globally.&lt;/li&gt;
&lt;li&gt;You can also pass the array index as the key.&lt;/li&gt;
&lt;li&gt;You can also pass the id received from the database.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now you know what makes React so fast ? It's the use of virtual DOM which keeps the re-painting of the DOM as less as possible.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#recap"&gt;
  &lt;/a&gt;
  RECAP
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Frequent DOM manipulations are expensive.&lt;/li&gt;
&lt;li&gt;Virtual DOM is a virtual representation of DOM in memory.&lt;/li&gt;
&lt;li&gt;Virtual DOM is synced with real DOM with ReactDOM library. 
This process is called Reconciliation.&lt;/li&gt;
&lt;li&gt;React compares the Virtual DOM and pre-updated Virtual DOM 
and only marks the sub-tree of components that are updated. 
This process is called diffing.&lt;/li&gt;
&lt;li&gt;The algorithm behind diffing is called Diffing algorithm.&lt;/li&gt;
&lt;li&gt;React uses keys to avoid unnecessary re-renders.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#watch-my-youtube-video-for-more-detailed-explanation"&gt;
  &lt;/a&gt;
  Watch my Youtube Video for More Detailed Explanation.
&lt;/h1&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/QZ-QWUnTBiI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>node</category>
      <category>webdev</category>
    </item>
    <item>
      <title>üíª 5 Useful VS Code extensions to help you with Javascript, React and Git</title>
      <author>Giorgio Grassini</author>
      <pubDate>Tue, 27 Apr 2021 08:35:38 +0000</pubDate>
      <link>https://dev.to/girgetto/5-useful-vs-code-extensions-to-help-you-with-javascript-react-and-git-51kk</link>
      <guid>https://dev.to/girgetto/5-useful-vs-code-extensions-to-help-you-with-javascript-react-and-git-51kk</guid>
      <description>&lt;p&gt;This is a list of 5 extensions and themes for VS Code that I often use and find useful.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=dsznajder.es7-react-js-snippets"&gt;&lt;strong&gt;ES7 React/Redux/GraphQL/React-Native snippets&lt;/strong&gt;&lt;/a&gt; ‚úÇÔ∏è&lt;br&gt;
This extension gives use a great number of code snippets to create components or imports faster. The first I do after create a new React component file is to use this extension, which autocomplete the initial part of a new component by just typing &lt;code&gt;rafc + enter&lt;/code&gt; ü§Ø&lt;br&gt;
üëâ &lt;a href="https://github.com/dsznajder/vscode-es7-javascript-react-snippets#basic-methods"&gt;Here the list of snippets&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/dsznajder"&gt;
        dsznajder
      &lt;/a&gt; / &lt;a href="https://github.com/dsznajder/vscode-es7-javascript-react-snippets"&gt;
        vscode-es7-javascript-react-snippets
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Extension for Javascript/React snippets with search supporting ES7 and babel features
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1NiIccaA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t6grmc6notjkmilusy8z.gif" alt="snippet"&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=streetsidesoftware.code-spell-checker"&gt;&lt;strong&gt;Code Spell Checker&lt;/strong&gt;&lt;/a&gt; üá¨üáß&lt;br&gt;
This is a &lt;em&gt;grammar checker for VS Code&lt;/em&gt;, I lost the count of how many times this extension saved me from typos. When you misspell an English word as variable or string, the extension will print a blue underline, and you can fix it with right click and see if in the suggested words there is the one needed&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/streetsidesoftware"&gt;
        streetsidesoftware
      &lt;/a&gt; / &lt;a href="https://github.com/streetsidesoftware/vscode-spell-checker"&gt;
        vscode-spell-checker
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A simple source code spell checker for code
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CBH31qc1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dorfje2qng8wudvrgp7a.gif" alt="spell-checker"&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=jpoissonnier.vscode-styled-components"&gt;&lt;strong&gt;vscode-styled-components&lt;/strong&gt;&lt;/a&gt; üåà&lt;br&gt;
I use a lot styled-component and thanks to this extension CSS remains colored has normal otherwise it will be considered as a string, and it would be just green text&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/styled-components"&gt;
        styled-components
      &lt;/a&gt; / &lt;a href="https://github.com/styled-components/vscode-styled-components"&gt;
        vscode-styled-components
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Syntax highlighting for styled-components
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bd3JmeDu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7xeu79zo1vaa6zl09vvh.gif" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=ngryman.codesandbox-theme"&gt;&lt;strong&gt;CodeSandbox Theme&lt;/strong&gt;&lt;/a&gt; üé®&lt;br&gt;
I often code in CodeSandbox, and then I use that code in my project, I prefer to maintain a theme consistence, that's why I use it&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ngryman"&gt;
        ngryman
      &lt;/a&gt; / &lt;a href="https://github.com/ngryman/codesandbox-theme"&gt;
        codesandbox-theme
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Codesandbox theme for VSCode.
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c0bu3XBc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/ngryman/codesandbox-theme/master/screenshot.png" alt="code-sandbox"&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=mhutchie.git-graph"&gt;&lt;strong&gt;Git Graph&lt;/strong&gt;&lt;/a&gt; üå≥&lt;br&gt;
Git Graph gives you a really nice view of your branches&lt;br&gt;
also, can perform Git Actions, View commit details and file changes, compare any two commits by clicking on a commit, Code Review, etc...&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/mhutchie"&gt;
        mhutchie
      &lt;/a&gt; / &lt;a href="https://github.com/mhutchie/vscode-git-graph"&gt;
        vscode-git-graph
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      View a Git Graph of your repository in Visual Studio Code, and easily perform Git actions from the graph.
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VmG4eVhs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bnz2uox8slagsxjou9tn.gif" alt="git-graph"&gt;
&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>vscode</category>
      <category>javascript</category>
      <category>react</category>
      <category>git</category>
    </item>
    <item>
      <title>Best Bitcoin mixers in 2021</title>
      <author>igor4btc</author>
      <pubDate>Tue, 27 Apr 2021 08:29:59 +0000</pubDate>
      <link>https://dev.to/igor4btc/best-bitcoin-mixers-in-2021-55d0</link>
      <guid>https://dev.to/igor4btc/best-bitcoin-mixers-in-2021-55d0</guid>
      <description>&lt;h3&gt;
  &lt;a href="#anonymity-of-bitcoin"&gt;
  &lt;/a&gt;
  Anonymity of Bitcoin
&lt;/h3&gt;

&lt;p&gt;If you think Bitcoin is an anonymous cryptocurrency‚Ä¶ you are totally wrong. Despite the high level of anonymity of Bitcoin, you should understand that thanks to the blockchain technology, the use of crypto currency is also fairly transparent. Knowing where you expect the payment, or from which address you make it, outsiders can easily track the movement of your funds. &lt;br&gt;
Many e-currency exchange points and crypto-exchange exchanges often require the verification of your identity, which will ultimately make your personal data public in varying degrees. Some people using Bitcoin are looking to get a real privacy and this is where bitcoin mixing service websites are useful.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-bitcoin-mixing"&gt;
  &lt;/a&gt;
  What is Bitcoin Mixing?
&lt;/h3&gt;

&lt;p&gt;Bitcoin tumbling, also referred to as Bitcoin mixing or Bitcoin laundering, is the process of using a third party service to break the connection between a Bitcoin sending address and the receiving address(es).&lt;br&gt;
In other words, coin mixing services take your cash and give you new cash to your secret identity so that it remains secret.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h3&gt;

&lt;p&gt;It‚Äôs important that they be trusted. There‚Äôs no authority or government you can complain to if they run off with your coins. So if you like privacy and also want to protect your cryptocurrency from government tracking or tracing, Bitcoin mixer services are a good option.&lt;br&gt;
Let‚Äôs look at the best services of Bitcoin mixing:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://blender.io/"&gt;Blender&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bitmixer.technology/"&gt;BitMixer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ultramixer.net/"&gt;UltraMixer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.foxmixer.com/"&gt;FoxMixer&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y5iEMo0w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y2vg12hd9or7ng6km5yg.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y5iEMo0w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y2vg12hd9or7ng6km5yg.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#blender"&gt;
  &lt;/a&gt;
  &lt;a href="https://blender.io/"&gt;Blender&lt;/a&gt;
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Good platforms, especially for beginners or those who don‚Äôt have enough technical knowledge in Bitcoin mixing. Aside from the fact that the website and platform itself is very user-friendly, it also allows users to determine the amount of service fee they are willing to pay. However, the only problem with the platform is that it doesn‚Äôt have a native support system and requires users to send them an email when a problem with their transactions arise.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Minimum Transaction: 0.001 BTC&lt;/li&gt;
&lt;li&gt;Fees: 0.5% - 2.5% and 0.0003 BTC per output address&lt;/li&gt;
&lt;li&gt;Log Policy: No logs are collected &lt;/li&gt;
&lt;li&gt;Time Delay: Yes, User Controlled &lt;/li&gt;
&lt;li&gt;Letter of Guarantee: Yes&lt;/li&gt;
&lt;li&gt;Tor &lt;a href="http://blenderiocpxfema.onion/"&gt;mirror&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rGMOINFt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l3caj5n8q5qptxx76kpx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rGMOINFt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l3caj5n8q5qptxx76kpx.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bitmixer"&gt;
  &lt;/a&gt;
  &lt;a href="https://bitmixer.technology/"&gt;BitMixer&lt;/a&gt;
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;One of the oldest and most reliable services. BitMixer offers a unique service with a high degree of confidentiality, which will ensure the anonymity of your payments. This service is designed to be as intuitive as possible. The whole process of bitcoin anonymization should not take more than a few minutes. They also have a welcoming minimum deposit limit making it easy for those who want to experiment with the service to start mixing.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Minimum Transaction: 0.001 BTC&lt;/li&gt;
&lt;li&gt;Fees: 0.5% and 0.0005 BTC per output address&lt;/li&gt;
&lt;li&gt;Log Policy: No logs are collected &lt;/li&gt;
&lt;li&gt;Time Delay: Yes, User Controlled &lt;/li&gt;
&lt;li&gt;Letter of Guarantee: Yes&lt;/li&gt;
&lt;li&gt;Tor &lt;a href="http://y2tupzeplfgulg7l.onion/"&gt;mirror&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--59m1kge8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9xc7r8iaqgaxirdo4tne.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--59m1kge8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9xc7r8iaqgaxirdo4tne.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ultramixer"&gt;
  &lt;/a&gt;
  &lt;a href="https://ultramixer.net/"&gt;UltraMixer&lt;/a&gt;
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;UltraMixer offers a unique service with a high degree of confidentiality, which will ensure the anonymity of your payments, by using the mixing of multiple Bitcoin addresses. Our system works quickly, reliably and with a small commission ‚Äì only after the transfer and receipt of funds to the final address. Of course, all of the data about your transaction will be irretrievably deleted.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Minimum Transaction: 0.001 BTC&lt;/li&gt;
&lt;li&gt;Fees: 0.5% - 3%  and 0.0002 BTC per output address&lt;/li&gt;
&lt;li&gt;Log Policy: No logs are collected &lt;/li&gt;
&lt;li&gt;Time Delay: Yes, User Controlled &lt;/li&gt;
&lt;li&gt;Letter of Guarantee: Yes&lt;/li&gt;
&lt;li&gt;Tor mirror: No&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3RlPKi6y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/olxx4hxl94ayvhllyi2d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3RlPKi6y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/olxx4hxl94ayvhllyi2d.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#foxmixer"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.foxmixer.com/"&gt;FoxMixer&lt;/a&gt;
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Out of all the cryptocurrency mixing platforms out their, FoxMixer is one of the best there is. Aside from the fact that it performs the usual function of a Bitcoin mixer, it has other features that improve the Anonymity of their users in the Blockchain network. They even have the option to anonymized the IP address of the transaction originator and they also monitor the blockchain to prevent a transaction from gaining unnecessary attention. The only problem with FoxMixer is that it charges a fixed rate of 1% which is relatively higher than the flexible fees offered by other platforms.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Minimum Transaction: 0.002 BTC&lt;/li&gt;
&lt;li&gt;Fees: 1% and 0.0007 BTC per output address&lt;/li&gt;
&lt;li&gt;Log Policy: No logs are collected &lt;/li&gt;
&lt;li&gt;Time Delay: Yes, User Controlled &lt;/li&gt;
&lt;li&gt;Letter of Guarantee: No&lt;/li&gt;
&lt;li&gt;Tor &lt;a href="http://foxmixer4dw2zluv7gy4pgqrpp2ab6p323s5clcyt7i5csbpk2pzezid.onion/"&gt;mirror&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>bitcoin</category>
      <category>mixer</category>
      <category>blockchain</category>
    </item>
    <item>
      <title>Grep cheatsheet</title>
      <author>Vishnu Chilamakuru</author>
      <pubDate>Tue, 27 Apr 2021 08:21:55 +0000</pubDate>
      <link>https://dev.to/vishnuchilamakuru/grep-cheatsheet-16n8</link>
      <guid>https://dev.to/vishnuchilamakuru/grep-cheatsheet-16n8</guid>
      <description>&lt;p&gt;The &lt;strong&gt;grep&lt;/strong&gt; utility searches any given input files, selecting lines that match one or more patterns.  By default, a pattern matches an input line if the regular expression (RE) in the pattern matches the input line without its trailing new line.  An empty expression matches every line.  Each input line that matches at least one of the patterns are written to the standard output.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;grep&lt;/strong&gt; is used for simple patterns and basic regular expressions (BREs). Below are the frequent use cases which will be handy for developers in their day to day activity.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#index"&gt;
  &lt;/a&gt;
  Index
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#case-insensitive-search"&gt;Case insensitive Search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#get-context"&gt;Get Context&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#invert-match"&gt;Invert Match&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#show-filenames"&gt;Show Filenames&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#recursive-search"&gt;Recursive Search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#print-matching-part"&gt;Print Matching Part&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#regular-expressions"&gt;Regular Expressions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#search-binaries"&gt;Search Binaries&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;h2&gt;
  &lt;a href="#case-insensitive-search"&gt;
  &lt;/a&gt;
  Case insensitive Search
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;grep -i&lt;/strong&gt; : Output of both commands below will be same as &lt;strong&gt;-i&lt;/strong&gt; option does the case insensitive search.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;grep -i hello file.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;grep -i HELLO file.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#get-context"&gt;
  &lt;/a&gt;
  Get Context
&lt;/h2&gt;

&lt;p&gt;To get the context of your search use the below commands.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;grep -A &lt;/strong&gt; :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;grep -A 3 hello file.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will show 3 lines of context after your match i.e &lt;em&gt;"hello"&lt;/em&gt; word in this case.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;grep -B &lt;/strong&gt; :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;grep -B 3 hello file.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will show 3 lines of context before your match i.e &lt;em&gt;"hello"&lt;/em&gt; word in this case.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;grep -C &lt;/strong&gt; :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;grep -C 3 hello file.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will show 3 lines of context before and after your match i.e &lt;em&gt;"hello"&lt;/em&gt; word in this case.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#invert-match"&gt;
  &lt;/a&gt;
  Invert Match
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;grep -v&lt;/strong&gt;: Find all lines that don't match the given pattern.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;grep -v hello file.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#show-filenames"&gt;
  &lt;/a&gt;
  Show Filenames
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;grep -l&lt;/strong&gt;: Show only the filenames of the files that matched&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;grep -l hello *.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Above command lists all &lt;em&gt;.txt&lt;/em&gt; files which has &lt;em&gt;"hello"&lt;/em&gt; word in the current directory.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#recursive-search"&gt;
  &lt;/a&gt;
  Recursive Search
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;grep -r&lt;/strong&gt;: Search all the files in a directory&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;grep -r hello */*.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Above command lists all &lt;em&gt;.txt&lt;/em&gt; files inside nested directory which has &lt;em&gt;"hello"&lt;/em&gt; word in it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#print-matching-part"&gt;
  &lt;/a&gt;
  Print Matching Part
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;grep -o hello file.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Above command prints only matching part of the line (not the complete line).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#regular-expressions"&gt;
  &lt;/a&gt;
  Regular Expressions
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;grep -E&lt;/strong&gt;: This option is used for matching Regular Expressions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;grep -E 'hel*' file.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Above command searches for all the lines which have words starting with &lt;strong&gt;hel&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;grep -E 'hel*|wo*' file.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Above command searches for all the lines which have words starting with &lt;strong&gt;hel OR wo&lt;/strong&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#search-binaries"&gt;
  &lt;/a&gt;
  Search Binaries
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;grep -a&lt;/strong&gt;: Treat binary data like its text instead of ignoring it.&lt;/p&gt;

&lt;p&gt;Treat all files as ASCII text.  Normally grep will simply print &lt;code&gt;Binary file ... matches&lt;/code&gt; if files contain binary characters.  Use of this option forces &lt;strong&gt;grep&lt;/strong&gt; to output lines matching the specified pattern.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;grep -a &amp;lt;pattern&amp;gt; &amp;lt;binary-file&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h2&gt;
  &lt;a href="#thank-you-for-reading"&gt;
  &lt;/a&gt;
  Thank you for reading
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#if-you-like-what-you-read-and-want-to-see-more-about-system-design-microservices-and-other-technologyrelated-stuff-you-can-follow-me-on-twitter-here"&gt;
  &lt;/a&gt;
  If you like what you read and want to see more about system design, microservices and other technology-related stuff... You can follow me on &lt;a href="https://twitter.com/vishnuchi"&gt;Twitter here&lt;/a&gt;.
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/vishnuchi"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>discuss</category>
    </item>
  </channel>
</rss>
