<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Complete Roadmap for C++🔥🔥</title>
      <author>Ashish Yadav</author>
      <pubDate>Sat, 24 Apr 2021 10:28:34 +0000</pubDate>
      <link>https://dev.to/expoashish/complete-roadmap-for-c-3bef</link>
      <guid>https://dev.to/expoashish/complete-roadmap-for-c-3bef</guid>
      <description>&lt;p&gt;&lt;em&gt;In this tutorial, you will see roadmap for C++ programming from basic to advance.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#visit-my-blogsgt"&gt;
  &lt;/a&gt;
  &lt;a href="https://expoashish.blogspot.com/2021/04/complete-roadmap-for-c.html"&gt;Visit My Blogs--&amp;gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#step-1introducation"&gt;
  &lt;/a&gt;
  Step 1.Introducation
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://youtu.be/MPvz3c0roVI"&gt;Introduction to C++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/MPvz3c0roVI"&gt;History of C++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Installation and Setup of C++&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/MPvz3c0roVI"&gt;Application and Features of C++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/97QA614U1CI"&gt;C vs C++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;C++ vs Java&lt;/li&gt;
&lt;li&gt;C++ vs C#&lt;/li&gt;
&lt;li&gt;C++ vs Python&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/wJ3IoaV46Ag"&gt;Basic Structure of C++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/wJ3IoaV46Ag"&gt;First Program of C++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Compilers vs Interpreters&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/Pn6phbNJ5Yg"&gt;Comments and New Line in C++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/kgSLSEP-k-4"&gt;cin and cout in C++&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#visit-my-blogsgt"&gt;
  &lt;/a&gt;
  &lt;a href="http://expoashish.blogspot.com/"&gt;Visit My Blogs--&amp;gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#step-2basic-concept"&gt;
  &lt;/a&gt;
  Step 2.Basic Concept
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://youtu.be/c2cVLrv_xoc"&gt;Data Types in C++&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Built-in Data Type&lt;br&gt;
User-defined Data Type&lt;br&gt;
Derived Data Type&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tokens and its type&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/t0WPOGwUZb0"&gt;Keywords&lt;/a&gt;&lt;br&gt;
  &lt;a href="https://youtu.be/Y6592n50zHk"&gt;Identifiers&lt;/a&gt;&lt;br&gt;
  &lt;a href="https://youtu.be/Y6592n50zHk"&gt;Constants&lt;/a&gt;&lt;br&gt;
  &lt;a href="https://youtu.be/PBl46KCTNMc"&gt;String&lt;/a&gt;&lt;br&gt;
  &lt;a href="https://youtu.be/zvJAnWF-Dug"&gt;Special Characters&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Storage Classes in C++&lt;/p&gt;

&lt;p&gt;Automatic&lt;br&gt;
External&lt;br&gt;
Static&lt;br&gt;
Register&lt;br&gt;
Mutable&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#visit-my-blogsgt"&gt;
  &lt;/a&gt;
  &lt;a href="http://expoashish.blogspot.com/"&gt;Visit My Blogs--&amp;gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#step-3operators-in-c"&gt;
  &lt;/a&gt;
  Step &lt;a href="https://youtu.be/zvJAnWF-Dug"&gt;3.Operators in C++&lt;/a&gt;
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Arithmetic Operators&lt;br&gt;
Relational Operators&lt;br&gt;
Logical Operators&lt;br&gt;
Bitwise Operators&lt;br&gt;
Assignment Operators&lt;br&gt;
Misc Operators&lt;br&gt;
Scope Resolution Operator&lt;br&gt;
Memory Management Operators&lt;br&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
&lt;br&gt;
  &lt;a href="#visit-my-blogsgt"&gt;&lt;br&gt;
  &lt;/a&gt;&lt;br&gt;
  &lt;a href="http://expoashish.blogspot.com/"&gt;Visit My Blogs--&amp;gt;&lt;/a&gt;&lt;br&gt;
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#step-4derived-concept"&gt;
  &lt;/a&gt;
  Step 4.Derived Concept
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://youtu.be/VcZXVn4KrTc"&gt;Reference and Dereference in C++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/fGu2jyrZ4TU"&gt;Type Conversion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/fGu2jyrZ4TU"&gt;Implicit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/fGu2jyrZ4TU"&gt;Explicit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Type Casting&lt;/li&gt;
&lt;li&gt;Array in C++&lt;/li&gt;
&lt;li&gt;Pointer in C++&lt;/li&gt;
&lt;li&gt;Pointers vs References in C++&lt;/li&gt;
&lt;li&gt;Namespaces in C++&lt;/li&gt;
&lt;li&gt;Wild Pointers in C++&lt;/li&gt;
&lt;li&gt;Strings in C++&lt;/li&gt;
&lt;li&gt;Structure in C++&lt;/li&gt;
&lt;li&gt;Union in C++&lt;/li&gt;
&lt;li&gt;Enumeration in C++&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#visit-my-blogsgt"&gt;
  &lt;/a&gt;
  &lt;a href="http://expoashish.blogspot.com/"&gt;Visit My Blogs--&amp;gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#step-5control-structure"&gt;
  &lt;/a&gt;
  Step 5.Control Structure
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Sequence structure (straight line paths)&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Selection structure (one or many branches)&lt;/p&gt;

&lt;p&gt;If&lt;br&gt;
If Else&lt;br&gt;
Switch Statements&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Loop structure (repetition of a set of activities)&lt;/p&gt;

&lt;p&gt;For loop&lt;br&gt;
While loop&lt;br&gt;
Do-while loop&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Continue Statement&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Break Statement&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Goto Statement&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#visit-my-blogsgt"&gt;
  &lt;/a&gt;
  &lt;a href="http://expoashish.blogspot.com/"&gt;Visit My Blogs--&amp;gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#step-6function-in-c"&gt;
  &lt;/a&gt;
  Step 6.Function in C++
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Types of Function:&lt;/p&gt;

&lt;p&gt;Built-in Function&lt;br&gt;
User-defined Function&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The Main Function&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Call by value&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Call by reference&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Recursion&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Inline Function&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Formal and Actual Parameters&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#visit-my-blogsgt"&gt;
  &lt;/a&gt;
  &lt;a href="http://expoashish.blogspot.com/"&gt;Visit My Blogs--&amp;gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#step-7oops-concept-in-c"&gt;
  &lt;/a&gt;
  Step 7.OOPs Concept in C++
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Classes and Objects&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Access Specifiers:&lt;/p&gt;

&lt;p&gt;Public&lt;br&gt;
Protected&lt;br&gt;
Private&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Constructors in C++:&lt;/p&gt;

&lt;p&gt;Default Constructors&lt;br&gt;
Parameterized Constructors&lt;br&gt;
Copy Constructors&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Destructors in C++&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Inheritance in C++:&lt;/p&gt;

&lt;p&gt;Single Inheritance&lt;br&gt;
Multiple Inheritance&lt;br&gt;
Multilevel Inheritance&lt;br&gt;
Hierarchical Inheritance&lt;br&gt;
Hybrid Inheritance&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Polymorphism in C++&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Function Overloading in C++&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Operator Overloading in C++&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Unary and Binary Operator Overloading&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Function overriding in C++&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Friend Function in C++&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Virtual Function in C++&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Pure Virtual Function in C++&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Pointers to Derived Classes&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Abstraction in C++&lt;/p&gt;

&lt;p&gt;Abstract Class&lt;br&gt;
Interfaces&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#visit-my-blogsgt"&gt;
  &lt;/a&gt;
  &lt;a href="http://expoashish.blogspot.com/"&gt;Visit My Blogs--&amp;gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#step-8file-handling"&gt;
  &lt;/a&gt;
  Step 8.File Handling
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Files and Streams in C++&lt;/li&gt;
&lt;li&gt;Formatted and Unformatted I/O Operation&lt;/li&gt;
&lt;li&gt;Dynamic Memory Allocation in C++&lt;/li&gt;
&lt;li&gt;malloc() vs new in C++&lt;/li&gt;
&lt;li&gt;Opening and Closing a File&lt;/li&gt;
&lt;li&gt;Templates in C++&lt;/li&gt;
&lt;li&gt;Class Templates&lt;/li&gt;
&lt;li&gt;Function Templates&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#visit-my-blogsgt"&gt;
  &lt;/a&gt;
  &lt;a href="http://expoashish.blogspot.com/"&gt;Visit My Blogs--&amp;gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#step-9exception-handling-amp-multithreading"&gt;
  &lt;/a&gt;
  Step 9.Exception Handling &amp;amp; Multithreading
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Exception Handling in C++&lt;/li&gt;
&lt;li&gt;Signal Handling in C++&lt;/li&gt;
&lt;li&gt;Try/catch&lt;/li&gt;
&lt;li&gt;Throwing Mechanism&lt;/li&gt;
&lt;li&gt;Catching Mechanism&lt;/li&gt;
&lt;li&gt;Stack Unwinding&lt;/li&gt;
&lt;li&gt;Multithreading in C++&lt;/li&gt;
&lt;li&gt;POSIX Threads&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#visit-my-blogsgt"&gt;
  &lt;/a&gt;
  &lt;a href="http://expoashish.blogspot.com/"&gt;Visit My Blogs--&amp;gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#step-10advance-concept-in-c"&gt;
  &lt;/a&gt;
  Step 10.Advance Concept in C++
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;C++ STL&lt;/li&gt;
&lt;li&gt;Containers in C++&lt;/li&gt;
&lt;li&gt;Vectors in C++&lt;/li&gt;
&lt;li&gt;List&lt;/li&gt;
&lt;li&gt;Stack&lt;/li&gt;
&lt;li&gt;Queue&lt;/li&gt;
&lt;li&gt;Map&lt;/li&gt;
&lt;li&gt;Multimap&lt;/li&gt;
&lt;li&gt;Bitset&lt;/li&gt;
&lt;li&gt;Algorithm&lt;/li&gt;
&lt;li&gt;C++ Iterators&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#visit-my-blogsgt"&gt;
  &lt;/a&gt;
  &lt;a href="http://expoashish.blogspot.com/"&gt;Visit My Blogs--&amp;gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#step-11top-header-files"&gt;
  &lt;/a&gt;
  Step &lt;a href="https://youtu.be/8mtTk4z-qpQ"&gt;11.Top Header Files&lt;/a&gt;
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;include&amp;lt;iostream.h&amp;gt;&lt;br&gt;
include&amp;lt;conio.h&amp;gt;&lt;br&gt;
include&amp;lt;string.h&amp;gt;&lt;br&gt;
include&amp;lt;math.h&amp;gt;&lt;br&gt;
include&amp;lt;stdio.h&amp;gt;&lt;br&gt;
include&amp;lt;iomanip.h&amp;gt;&lt;br&gt;
include&amp;lt;signal.h&amp;gt;&lt;br&gt;
include&amp;lt;errno.h&amp;gt;&lt;br&gt;
include&amp;lt;fstream.h&amp;gt;&lt;br&gt;
include&amp;lt;time.h&amp;gt;&lt;br&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
&lt;br&gt;
  &lt;a href="#visit-my-blogsgt"&gt;&lt;br&gt;
  &lt;/a&gt;&lt;br&gt;
  &lt;a href="http://expoashish.blogspot.com/"&gt;Visit My Blogs--&amp;gt;&lt;/a&gt;&lt;br&gt;
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#step-12c-projects-for-beginners"&gt;
  &lt;/a&gt;
  Step 12.C++ Projects for Beginners
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1.Student Management System in C++&lt;br&gt;
2.Contact Management System in C++&lt;br&gt;
3.Bank Management System in C++&lt;br&gt;
4.Bookshop Management System in C++&lt;br&gt;
5.Bus Reservation System in C++&lt;br&gt;
6.Payroll Management System in C++&lt;br&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h4&gt;
&lt;br&gt;
  &lt;a href="#and-subscribe-to-our-youtube-channel-bestcodecreator"&gt;&lt;br&gt;
  &lt;/a&gt;&lt;br&gt;
  🎥💡🔥AND Subscribe to Our YouTube Channel &lt;a href="https://www.youtube.com/bestcodecreator"&gt;bestcodecreator&lt;/a&gt;&lt;br&gt;
&lt;/h4&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion:
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Thank you for reading this blog. I wish you the best in your journey in learning and mastering in C++ Programming.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>cpp</category>
      <category>programming</category>
      <category>computerscience</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>CDK8S Example</title>
      <author>Vu Dao</author>
      <pubDate>Sat, 24 Apr 2021 10:09:42 +0000</pubDate>
      <link>https://dev.to/vumdao/cdk8s-example-2glk</link>
      <guid>https://dev.to/vumdao/cdk8s-example-2glk</guid>
      <description>&lt;p&gt;&lt;strong&gt;CDK8s is a software development framework for defining Kubernetes applications and reusable abstractions using familiar programming languages and rich object-oriented APIs. CDK8s generates pure Kubernetes YAML - you can use CDK8s to define applications for any Kubernetes cluster running anywhere.&lt;/strong&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;br&gt;
  &lt;img alt="CDK8S Example" src="https://res.cloudinary.com/practicaldev/image/fetch/s--Pfi067k5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/cdk8s-example/blob/master/flow.png%3Fraw%3Dtrue" width="500"&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;This post provides you some examples of cdk8s python code to create k8s deployments, services, readiness and livness probes, statefulset, persitent volume and cronjob&lt;/strong&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;br&gt;
  &lt;img alt="CDK8S Example" src="https://res.cloudinary.com/practicaldev/image/fetch/s--vtXqgKL7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/cdk8s-example/blob/master/logo.png%3Fraw%3Dtrue" width="200"&gt;
&lt;/h1&gt;




&lt;h2&gt;
  &lt;a href="#whats-in-this-document"&gt;
  &lt;/a&gt;
  What’s In This Document
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#-Getting-Started-With-cdk8s"&gt;Getting Started With cdk8s&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-Create-cluster-IP-deployment-and-target-port-service"&gt;Create cluster IP deployment and target port service&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-Create-deployment-app-with-readiness-and-liveness-probes"&gt;Create deployment app with readiness and liveness probes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-Create-statefulset-with-persisten-volume"&gt;Create statefulset with persisten volume&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-Create-secret-attach-to-deployment"&gt;Create secret attach to deployment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-Create-cronjob-with-persistent-volume-claim"&gt;Create cronjob with persistent volume claim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-Conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#getting-started-with-cdk8s"&gt;
  &lt;/a&gt;
  🚀 &lt;strong&gt;&lt;a href="#-Getting-Started-With-cdk8s"&gt;Getting Started With cdk8s&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://cdk8s.io/docs/v1.0.0-beta.11/getting-started/"&gt;Getting Started&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Prerequisites&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;Python &amp;gt;= 3.7.7&lt;/li&gt;
&lt;li&gt;pipenv version 2018.11.26 or above.&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;New Project
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ mkdir hello
$ cd hello
$ cdk8s init python-app
Initializing a project from the python-app template
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#create-cluster-ip-deployment-and-target-port-service"&gt;
  &lt;/a&gt;
  🚀 &lt;strong&gt;&lt;a href="#-Create-cluster-IP-deployment-and-target-port-service"&gt;Create cluster IP deployment and target port service&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/vumdao/cdk8s-example/blob/master/clusterip.py"&gt;https://github.com/vumdao/cdk8s-example/blob/master/clusterip.py&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from constructs import Construct
from imports import k8s


class ClusterIp(Construct):
    def __init__(self, scope: Construct, id: str):
        super().__init__(scope, id)

        app_name = 'wappip'
        label = {'app': app_name}
        k8s.KubeDeployment(
            self, "ClusterIpDeployment",
            metadata=k8s.ObjectMeta(name=app_name),
            spec=k8s.DeploymentSpec(
                replicas=2,
                selector=k8s.LabelSelector(match_labels=label),
                template=k8s.PodTemplateSpec(
                    metadata=k8s.ObjectMeta(labels=label, name=app_name),
                    spec=k8s.PodSpec(
                        containers=[k8s.Container(
                            name=app_name,
                            image="katacoda/docker-http-server:latest",
                            ports=[k8s.ContainerPort(container_port=80)]
                        )]
                    )
                )
            )
        )

        k8s.KubeService(
            self, 'ClusterIpService',
            metadata=k8s.ObjectMeta(name=app_name),
            spec=k8s.ServiceSpec(
                type='NodePort',
                ports=[k8s.ServicePort(port=80, node_port=30080, name="80")],
                selector=label
            )
        )

        k8s.KubeService(
            self, 'ClusterIpTargetPortService',
            metadata=k8s.ObjectMeta(name=f"{app_name}-targetport"),
            spec=k8s.ServiceSpec(
                ports=[k8s.ServicePort(port=8080, target_port=k8s.IntOrString.from_number(80), name="8080")],
                selector=label
            )
        )
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/vumdao/cdk8s-example/blob/master/main.py"&gt;https://github.com/vumdao/cdk8s-example/blob/master/main.py&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/usr/bin/env python
from constructs import Construct
from cdk8s import App, Chart
from clusterip import ClusterIp


class MyChart(Chart):
    def __init__(self, scope: Construct, id: str):
        super().__init__(scope, id)
        ClusterIp(self, 'clusterip')


app = App()
MyChart(app, "clusterip")

app.synth()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Run
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;⚡ $ cdk8s synth
dist/clusterip.k8s.yaml

⚡ $ cat dist/clusterip.k8s.yaml 
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wappip
spec:
  replicas: 2
  selector:
    matchLabels:
      app: wappip
  template:
    metadata:
      labels:
        app: wappip
      name: wappip
    spec:
      containers:
        - image: katacoda/docker-http-server:latest
          name: wappip
          ports:
            - containerPort: 80
--------
apiVersion: v1
kind: Service
metadata:
  name: wappip
spec:
  ports:
    - name: "80"
      nodePort: 30080
      port: 80
  selector:
    app: wappip
  type: NodePort
--------
apiVersion: v1
kind: Service
metadata:
  name: wappip-targetport
spec:
  ports:
    - name: "8080"
      port: 8080
      targetPort: 80
  selector:
    app: wappip
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#create-deployment-app-with-readiness-and-liveness-probes"&gt;
  &lt;/a&gt;
  🚀 &lt;strong&gt;&lt;a href="#-Create-deployment-app-with-readiness-and-liveness-probes"&gt;Create deployment app with readiness and liveness probes&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from constructs import Construct
from imports import k8s
import re


class ReadinessLivenesProbes(Construct):
    def __init__(self, scope: Construct, id: str):
        super().__init__(scope, id)

        for _name in ['frontend', 'bad-frontend']:
            if re.search('bad', _name):
                image_tag = 'unhealthy'
                toleration = k8s.Toleration()
                affinity = k8s.Affinity()
            else:
                image_tag = 'health'
                toleration = k8s.Toleration(
                    effect='NoSchedule', key='fe', operator='Equal', value='healthy'
                )
                affinity = k8s.Affinity(
                    node_affinity=k8s.NodeAffinity(
                        required_during_scheduling_ignored_during_execution=k8s.NodeSelector(
                            node_selector_terms=[
                                k8s.NodeSelectorTerm(
                                    match_expressions=[
                                        k8s.NodeSelectorRequirement(
                                            key='kubernetes.io/hostname', operator='In', values=['kube1']
                                        )
                                    ]
                                )
                            ]
                        )
                    )
                )
            label = {'app': _name}
            k8s.KubeDeployment(
                self, f"FrontendHealthy{_name}",
                metadata=k8s.ObjectMeta(labels=label, name=_name),
                spec=k8s.DeploymentSpec(
                    replicas=1,
                    selector=k8s.LabelSelector(match_labels=label),
                    template=k8s.PodTemplateSpec(
                        metadata=k8s.ObjectMeta(labels=label),
                        spec=k8s.PodSpec(
                            containers=[
                                k8s.Container(
                                    name=_name,
                                    image=f"katacoda/docker-http-server:{image_tag}",
                                    ports=[k8s.ContainerPort(container_port=80)],
                                    resources=k8s.ResourceRequirements(
                                        limits={"memory": k8s.Quantity.from_string('3000Mi'),
                                                "cpu": k8s.Quantity.from_string('1000m')},
                                        requests={"memory": k8s.Quantity.from_string('300Mi'),
                                                  "cpu": k8s.Quantity.from_string('200m')}
                                    ),
                                    readiness_probe=k8s.Probe(
                                        http_get=k8s.HttpGetAction(port=k8s.IntOrString.from_number(80), path='/'),
                                        initial_delay_seconds=1, timeout_seconds=1
                                    ),
                                    liveness_probe=k8s.Probe(
                                        http_get=k8s.HttpGetAction(port=k8s.IntOrString.from_number(80), path='/'),
                                        initial_delay_seconds=1, failure_threshold=3, timeout_seconds=1
                                    )
                                )
                            ],
                            tolerations=[toleration],
                            affinity=affinity
                        )
                    )
                )
            )
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#create-statefulset-with-persisten-volume"&gt;
  &lt;/a&gt;
  🚀 &lt;strong&gt;&lt;a href="#-Create-statefulset-with-persisten-volume"&gt;Create statefulset with persisten volume&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from constructs import Construct, Node
from imports import k8s


class StateFulSet(Construct):
    def __init__(self, scope: Construct, id: str):
        super().__init__(scope, id)

        msql_name = 'msql'
        msql_label = {'ss': msql_name}
        k8s.KubeStatefulSet(
            self, "MsqlStatefulSet",
            metadata=k8s.ObjectMeta(name=msql_name),
            spec=k8s.StatefulSetSpec(
                replicas=1,
                selector=k8s.LabelSelector(match_labels=msql_label),
                service_name=msql_name,
                template=k8s.PodTemplateSpec(
                    metadata=k8s.ObjectMeta(labels=msql_label, name=msql_name),
                    spec=k8s.PodSpec(
                        containers=[k8s.Container(
                            name=msql_name,
                            image="openshift/mysql-55-centos7",
                            ports=[k8s.ContainerPort(container_port=3306)],
                            env=[
                                k8s.EnvVar(name='MYSQL_ROOT_PASSWORD', value='yourpassword'),
                                k8s.EnvVar(name='MYSQL_USER', value='wp_user'),
                                k8s.EnvVar(name='MYSQL_PASSWORD', value='wp_pass'),
                                k8s.EnvVar(name='MYSQL_DATABASE', value='wp_db'),
                            ],
                            volume_mounts=[k8s.VolumeMount(mount_path='/var/lib/mysql/data',
                                                           name='mysql-persistent-storage')]
                        )]
                    )
                ),
                volume_claim_templates=[
                    k8s.KubePersistentVolumeClaimProps(
                        metadata=k8s.ObjectMeta(name="mysql-persistent-storage"),
                        spec=k8s.PersistentVolumeClaimSpec(
                            access_modes=["ReadWriteOnce"],
                            resources=k8s.ResourceRequirements(requests={"storage": k8s.Quantity.from_string("2Gi")})
                        )
                    )
                ]
            )
        )

        k8s.KubePersistentVolume(
            self, "STSPersistentVolume1",
            metadata=k8s.ObjectMeta(name='nfs-0001'),
            spec=k8s.PersistentVolumeSpec(
                access_modes=['ReadWriteOnce', 'ReadWriteMany'],
                capacity={'storage': k8s.Quantity.from_string('2Gi')},
                nfs=k8s.NfsVolumeSource(path='/exports/data-0001', server='192.168.121.210'),
                persistent_volume_reclaim_policy='Retain'
            )
        )

        k8s.KubePersistentVolume(
            self, "STSPersistentVolume2",
            metadata=k8s.ObjectMeta(name='nfs-0002'),
            spec=k8s.PersistentVolumeSpec(
                access_modes=['ReadWriteOnce', 'ReadWriteMany'],
                capacity={'storage': k8s.Quantity.from_string('5Gi')},
                nfs=k8s.NfsVolumeSource(path='/exports/data-0002', server='192.168.121.210'),
                persistent_volume_reclaim_policy='Retain'
            )
        )
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#create-secret-attach-to-deployment"&gt;
  &lt;/a&gt;
  🚀 &lt;strong&gt;&lt;a href="#-Create-secret-attach-to-deployment"&gt;Create secret attach to deployment&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from constructs import Construct, Node
from imports import k8s


class Secrete(Construct):
    def __init__(self, scope: Construct, id: str):
        super().__init__(scope, id)

        app_name = 'myscecret'
        label = {'app': app_name}
        k8s.KubeDeployment(
            self, "SecreteDeployment",
            metadata=k8s.ObjectMeta(name=app_name),
            spec=k8s.DeploymentSpec(
                replicas=1,
                selector=k8s.LabelSelector(match_labels=label),
                template=k8s.PodTemplateSpec(
                    metadata=k8s.ObjectMeta(labels=label, name=app_name),
                    spec=k8s.PodSpec(
                        containers=[
                            k8s.Container(
                                name=app_name,
                                image="alpine:latest",
                                ports=[k8s.ContainerPort(container_port=80)],
                                command=['sleep', '9999'],
                                env=[
                                    k8s.EnvVar(
                                        name='SECRET_USERNAME',
                                        value_from=k8s.EnvVarSource(
                                            secret_key_ref=k8s.SecretKeySelector(key='username', name='test-secret')
                                        )
                                    ),
                                    k8s.EnvVar(
                                        name='SECRET_PASSWORD',
                                        value_from=k8s.EnvVarSource(
                                            secret_key_ref=k8s.SecretKeySelector(key='password', name='test-secret')
                                        )
                                    )
                                ]
                            )
                        ]
                    )
                )
            )
        )

        k8s.KubeSecret(
            self, 'Secrete',
            metadata=k8s.ObjectMeta(name='test-secret'),
            type='Opaque',
            data={"username": "YWRtaW4=", "password": "YTYyZmpiZDM3OTQyZGNz"}
        )
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#create-cronjob-with-persistent-volume-claim"&gt;
  &lt;/a&gt;
  🚀 &lt;strong&gt;&lt;a href="#-Create-cronjob-with-persistent-volume-claim"&gt;Create cronjob with persistent volume claim&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from constructs import Construct, Node
from imports import k8s


class DocCronjob(Construct):
    def __init__(self, scope: Construct, id: str):
        super().__init__(scope, id)

        app_name = 'doc-clean'
        label = {'app': app_name}
        k8s.KubeCronJobV1Beta1(
            self, "DocCronjob",
            metadata=k8s.ObjectMeta(name=app_name, labels=label),
            spec=k8s.CronJobSpec(
                job_template=k8s.JobTemplateSpec(
                    metadata=k8s.ObjectMeta(name=app_name),
                    spec=k8s.JobSpec(
                        template=k8s.PodTemplateSpec(
                            metadata=k8s.ObjectMeta(name=app_name),
                            spec=k8s.PodSpec(
                                containers=[
                                    k8s.Container(
                                        name=app_name,
                                        image="busybox",
                                        volume_mounts=[k8s.VolumeMount(mount_path='/opt/Documents', name='efs')],
                                        args=['/bin/sh', '-c',
                                              'find /opt/Documents/Viewer/cache -type d -mtime +6 -exec rm -r {} \;; find /opt/Documents/Viewer -type f -mtime +6 -exec rm {} \;'
                                              ]
                                    ),
                                ],
                                restart_policy='OnFailure',
                                volumes=[
                                    k8s.Volume(
                                        name='efs',
                                        persistent_volume_claim=k8s.PersistentVolumeClaimVolumeSource(
                                            claim_name='efs-pvc'
                                        )
                                    )
                                ]
                            )
                        )
                    )
                ),
                schedule='0 1 * * SAT'
            )
        )
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  🚀 &lt;strong&gt;&lt;a href="#-Conclusion"&gt;Conclusion&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;cdk8s is just being in beta version, you should consider to use it for production until it reaches a certain level of maturity (probably the first major version)&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="https://dev.to/vumdao"&gt;🌠 Blog&lt;/a&gt;
  &lt;span&gt; · &lt;/span&gt;
  &lt;a href="https://github.com/vumdao/cdk8s-example"&gt;Github&lt;/a&gt;
  &lt;span&gt; · &lt;/span&gt;
  &lt;a href="https://stackoverflow.com/users/11430272/vumdao"&gt;stackoverflow&lt;/a&gt;
  &lt;span&gt; · &lt;/span&gt;
  &lt;a href="https://www.linkedin.com/in/vu-dao-9280ab43/"&gt;Linkedin&lt;/a&gt;
  &lt;span&gt; · &lt;/span&gt;
  &lt;a href="https://www.linkedin.com/groups/12488649/"&gt;Group&lt;/a&gt;
  &lt;span&gt; · &lt;/span&gt;
  &lt;a href="https://www.facebook.com/CloudOpz-104917804863956"&gt;Page&lt;/a&gt;
  &lt;span&gt; · &lt;/span&gt;
  &lt;a href="https://twitter.com/VuDao81124667"&gt;Twitter 🌠&lt;/a&gt;
&lt;/h3&gt;

</description>
      <category>cdk8s</category>
      <category>cloudopz</category>
      <category>devops</category>
      <category>k8s</category>
    </item>
    <item>
      <title>Say something from the terminal</title>
      <author>Siddharth</author>
      <pubDate>Sat, 24 Apr 2021 08:57:29 +0000</pubDate>
      <link>https://dev.to/siddharthshyniben/say-something-from-the-terminal-117g</link>
      <guid>https://dev.to/siddharthshyniben/say-something-from-the-terminal-117g</guid>
      <description>&lt;p&gt;Today I learned about the &lt;code&gt;say&lt;/code&gt; command in macos. You use it like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;say something
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It may not seem useful, but I use it when I have long scripts to run...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run build &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; say &lt;span class="s2"&gt;"build done"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;...and It can also be used to do fun things...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;say abcdefghijklmnopqrstuvwxyz &lt;span class="c"&gt;# The impossible is possible&lt;/span&gt;
say dskfjkhadsfhjkasjhkfgjdasgfj 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>todayilearned</category>
      <category>speaking</category>
    </item>
    <item>
      <title>build a social media website with Next JS and Firebase</title>
      <author>Naman vyas</author>
      <pubDate>Sat, 24 Apr 2021 08:14:37 +0000</pubDate>
      <link>https://dev.to/namanvyas/build-a-social-media-website-with-next-js-and-firebase-3i3k</link>
      <guid>https://dev.to/namanvyas/build-a-social-media-website-with-next-js-and-firebase-3i3k</guid>
      <description>&lt;p&gt;Hello Everyone,&lt;/p&gt;

&lt;p&gt;As the title say I created a social media website with Next JS framework and Firebase. Its a basic and simple social media just for learning new stuff about Next JS and Firebase.&lt;/p&gt;

&lt;p&gt;Website Link : &lt;a href="http://emote.vercel.app/"&gt;http://emote.vercel.app/&lt;/a&gt;&lt;br&gt;
Github Link : &lt;a href="https://github.com/NV404/Emote"&gt;https://github.com/NV404/Emote&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This website is still in development.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-i-am-going-to-add"&gt;
  &lt;/a&gt;
  What I am Going To Add
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;All post by user on profile&lt;/li&gt;
&lt;li&gt;Like and comment system&lt;/li&gt;
&lt;li&gt;Suggestions system&lt;/li&gt;
&lt;li&gt;Follow System
++ And many more stuff&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Tell me what you think about it.&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Feel free to contribute.&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Star the Repo If you like&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>javascript</category>
      <category>nextjs</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Implement login user API that returns PASETO or JWT access token in Go</title>
      <author>TECH SCHOOL</author>
      <pubDate>Sat, 24 Apr 2021 08:13:04 +0000</pubDate>
      <link>https://dev.to/techschoolguru/implement-login-user-api-that-returns-paseto-or-jwt-access-token-in-go-5b1p</link>
      <guid>https://dev.to/techschoolguru/implement-login-user-api-that-returns-paseto-or-jwt-access-token-in-go-5b1p</guid>
      <description>&lt;p&gt;Hello everyone! Welcome back to the backend master class!&lt;/p&gt;

&lt;p&gt;In the &lt;a href="https://dev.to/techschoolguru/how-to-create-and-verify-jwt-paseto-token-in-golang-1l5j"&gt;previous lecture&lt;/a&gt;, we’ve implemented the token maker interface using JWT and PASETO. It provides 2 methods to create and verify tokens.&lt;/p&gt;

&lt;p&gt;So today we’re gonna learn how to use it to implement the login API, where the username and password are provided by the client, and the server will return an access token if those credentials are correct.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/lnHbZ9GOGAs"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Here's:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Link to the &lt;a href="https://bit.ly/backendmaster"&gt;full series playlist on Youtube&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;And its &lt;a href="https://github.com/techschool/simplebank"&gt;Github repository&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;OK let’s start!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#add-token-maker-to-the-server"&gt;
  &lt;/a&gt;
  Add token Maker to the Server
&lt;/h2&gt;

&lt;p&gt;The first step is to add the token maker to our API server. So let’s open &lt;code&gt;api/server.go&lt;/code&gt; file!&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;Server&lt;/code&gt; struct, I’m gonna add a &lt;code&gt;tokenMaker&lt;/code&gt; field of type &lt;code&gt;token.Maker&lt;/code&gt; interface.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;Server&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;store&lt;/span&gt;      &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Store&lt;/span&gt;
    &lt;span class="n"&gt;tokenMaker&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Maker&lt;/span&gt;
    &lt;span class="n"&gt;router&lt;/span&gt;     &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;gin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Engine&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then let’s initialize this field inside the &lt;code&gt;NewServer()&lt;/code&gt; function! First we have to create a new token maker object. We can choose to use either &lt;code&gt;JWT&lt;/code&gt; or &lt;code&gt;PASETO&lt;/code&gt;, they both implement the same &lt;code&gt;token.Maker&lt;/code&gt; interface.&lt;/p&gt;

&lt;p&gt;I think PASETO is better, so let’s call &lt;code&gt;token.NewPasetoMaker()&lt;/code&gt;. It requires a symmetric key string, so we will need to load this from environment variable. For now, let’s just put an empty string here as a placeholder.&lt;/p&gt;

&lt;p&gt;If the returned error is not &lt;code&gt;nil&lt;/code&gt;, we return a &lt;code&gt;nil&lt;/code&gt; server, and an error saying "cannot create token maker". The &lt;code&gt;%w&lt;/code&gt; is used to wrap the original error.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;NewServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;store&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;tokenMaker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewPasetoMaker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Errorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"cannot create token maker: %w"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;      &lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;tokenMaker&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;tokenMaker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="o"&gt;...&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;OK, so now we have to change the return type of the &lt;code&gt;NewServer()&lt;/code&gt; function to include an &lt;code&gt;error&lt;/code&gt; as well. Then in the statement to create a &lt;code&gt;Server&lt;/code&gt; object, we add the &lt;code&gt;tokenMaker&lt;/code&gt; object that we’ve just created.&lt;/p&gt;

&lt;p&gt;Alright, now let’s come back to the symmetric key parameter. I’m gonna add a new environment variable to the &lt;code&gt;app.env&lt;/code&gt; file. Let’s call it &lt;code&gt;TOKEN_SYMMETRIC_KEY&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And as we’re using PASETO version 2, which uses ChachaPoly algorithm, the size of this symmetric key should be exactly 32 bytes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;TOKEN_SYMMETRIC_KEY=12345678901234567890123456789012
ACCESS_TOKEN_DURATION=15m
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We should also add 1 more variable to store the valid duration of the access token. It’s a best practice to set this to a very short duration, let’s say, just 15 minutes for example.&lt;/p&gt;

&lt;p&gt;OK, now we have to update our config struct to include the 2 new variables that we’ve just added.&lt;/p&gt;

&lt;p&gt;First, the &lt;code&gt;TokenSymmetricKey&lt;/code&gt; of type &lt;code&gt;string&lt;/code&gt;. We have to specify the &lt;code&gt;mapstructure&lt;/code&gt; tag for it because &lt;a href="https://github.com/spf13/viper"&gt;viper&lt;/a&gt; uses &lt;a href="https://github.com/mitchellh/mapstructure"&gt;mapstructure&lt;/a&gt; package to parse the config data. Please refer to the &lt;a href="https://dev.to/techschoolguru/load-config-from-file-environment-variables-in-golang-with-viper-2j2d"&gt;lecture 12 of the course&lt;/a&gt; if you don’t know how to use viper.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;Config&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="n"&gt;TokenSymmetricKey&lt;/span&gt;   &lt;span class="kt"&gt;string&lt;/span&gt;        &lt;span class="s"&gt;`mapstructure:"TOKEN_SYMMETRIC_KEY"`&lt;/span&gt;
    &lt;span class="n"&gt;AccessTokenDuration&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Duration&lt;/span&gt; &lt;span class="s"&gt;`mapstructure:"ACCESS_TOKEN_DURATION"`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The next field is &lt;code&gt;AccessTokenDuration&lt;/code&gt; of type &lt;code&gt;time.Duration&lt;/code&gt;. And its &lt;code&gt;mapstructure&lt;/code&gt; tag should be this environment variable’s name: &lt;code&gt;ACCESS_TOKEN_DURATION&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As you can see, when the type of a config field is &lt;code&gt;time.Duration&lt;/code&gt;, we can specify the value in a human readable format like this: &lt;code&gt;15m&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;OK so now we’ve loaded the secret key and token duration into the config, let’s go back to the server and use them. We have to add a &lt;code&gt;config&lt;/code&gt; parameter to the &lt;code&gt;NewServer()&lt;/code&gt; function. Then in the &lt;code&gt;token.NewPasetoMaker()&lt;/code&gt; call, we pass in &lt;code&gt;config.TokenSymmetricKey&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We should also add a config field to the &lt;code&gt;Server&lt;/code&gt; struct, and store it here when initialize the &lt;code&gt;Server&lt;/code&gt; object. We will use the &lt;code&gt;TokenDuration&lt;/code&gt; in this &lt;code&gt;config&lt;/code&gt; object later when creating the tokens.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;Server&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;config&lt;/span&gt;     &lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Config&lt;/span&gt;
    &lt;span class="n"&gt;store&lt;/span&gt;      &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Store&lt;/span&gt;
    &lt;span class="n"&gt;tokenMaker&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Maker&lt;/span&gt;
    &lt;span class="n"&gt;router&lt;/span&gt;     &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;gin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Engine&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;NewServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;store&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;tokenMaker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewPasetoMaker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TokenSymmetricKey&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Errorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"cannot create token maker: %w"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;     &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;      &lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;tokenMaker&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;tokenMaker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;binding&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Validator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Engine&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;validator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Validate&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RegisterValidation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"currency"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;validCurrency&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setupRouter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At the end of this function, we should return a nil error. And that will be it!&lt;/p&gt;

&lt;p&gt;However, as we added a new config parameter to the &lt;code&gt;NewServer()&lt;/code&gt; function, some unit tests that we wrote before are broken. So let’s fix them!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fix-broken-unit-tests"&gt;
  &lt;/a&gt;
  Fix broken unit tests
&lt;/h2&gt;

&lt;p&gt;In the &lt;code&gt;api/main_test.go&lt;/code&gt; file, I’m gonna define a function &lt;code&gt;newTestServer()&lt;/code&gt;  that will create a new server for test. It takes a &lt;code&gt;testing.T&lt;/code&gt; object and a &lt;code&gt;db.Store&lt;/code&gt; interface as input. And it will return a &lt;code&gt;Server&lt;/code&gt; object as output.&lt;/p&gt;

&lt;p&gt;In this function, let’s create a new &lt;code&gt;config&lt;/code&gt; object, with &lt;code&gt;TokenSymmetricKey&lt;/code&gt; is &lt;code&gt;util.RandomString&lt;/code&gt; of 32 characters, and &lt;code&gt;AccessTokenDuration&lt;/code&gt; is 1 minute.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;newTestServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;testing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;store&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;TokenSymmetricKey&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;   &lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RandomString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;32&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;AccessTokenDuration&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Minute&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;NewServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;require&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NoError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we create a new server with that &lt;code&gt;config&lt;/code&gt; object and the input &lt;code&gt;store&lt;/code&gt; interface. Require no errors, and finally return the created &lt;code&gt;server&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now get back to the &lt;code&gt;api/transfer_test.go&lt;/code&gt; file. Here, instead of &lt;code&gt;NewServer()&lt;/code&gt;, we will call &lt;code&gt;newTestServer&lt;/code&gt;, and pass in the &lt;code&gt;testing.T&lt;/code&gt; object and the mock store.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;TestTransferAPI&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;testing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;testCases&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;tc&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;testCases&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

        &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;testing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="o"&gt;...&lt;/span&gt;

            &lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;newTestServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;recorder&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;httptest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewRecorder&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

            &lt;span class="o"&gt;...&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We do the same for the &lt;code&gt;server&lt;/code&gt; inside &lt;code&gt;api/user_test.go&lt;/code&gt; file and &lt;code&gt;api/account_test.go&lt;/code&gt; file as well. There are several calls of &lt;code&gt;NewServer()&lt;/code&gt; in these files, so we have to change all of them to &lt;code&gt;newTestServer()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Alright, now everything is updated. Let’s run the whole api package tests!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L0ilTBXA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nj5xykkfqwc2bm2gmus3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L0ilTBXA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nj5xykkfqwc2bm2gmus3.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All passed! Excellent! So the tests are now working well with the new &lt;code&gt;Server&lt;/code&gt; struct.&lt;/p&gt;

&lt;p&gt;But there’s one more place we need to update, that’s the main entry point of our server: &lt;code&gt;main.go&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LoadConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"cannot load config:"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DBDriver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DBSource&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"cannot connect to db:"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;store&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewStore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"cannot create server:"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ServerAddress&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"cannot start server:"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, in this &lt;code&gt;main()&lt;/code&gt; function, we have to add config to the &lt;code&gt;api.NewServer()&lt;/code&gt; call. And this call will return a &lt;code&gt;server&lt;/code&gt; and an &lt;code&gt;error&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If &lt;code&gt;error&lt;/code&gt; is not &lt;code&gt;nil&lt;/code&gt;, we just write a fatal log, saying "cannot create server". Just like that, and we’re done!&lt;/p&gt;

&lt;p&gt;Now it’s time to build the login user API!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implement-login-user-handler"&gt;
  &lt;/a&gt;
  Implement login user handler
&lt;/h2&gt;

&lt;p&gt;Let’s open the &lt;code&gt;api/user.go&lt;/code&gt; file!&lt;/p&gt;

&lt;p&gt;The login API’s request payload must contain the &lt;code&gt;username&lt;/code&gt; and &lt;code&gt;password&lt;/code&gt;, which is very similar to the &lt;code&gt;createUserRequest&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;createUserRequest&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Username&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"username" binding:"required,alphanum"`&lt;/span&gt;
    &lt;span class="n"&gt;Password&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"password" binding:"required,min=6"`&lt;/span&gt;
    &lt;span class="n"&gt;FullName&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"full_name" binding:"required"`&lt;/span&gt;
    &lt;span class="n"&gt;Email&lt;/span&gt;    &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"email" binding:"required,email"`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So I’m gonna copy this struct, and paste it to the end of this file. Then let’s change the struct name to &lt;code&gt;loginUserRequest&lt;/code&gt; and remove the &lt;code&gt;FullName&lt;/code&gt; and &lt;code&gt;Email&lt;/code&gt; fields, just keep the &lt;code&gt;Username&lt;/code&gt; and &lt;code&gt;Password&lt;/code&gt; fields.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;loginUserRequest&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Username&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"username" binding:"required,alphanum"`&lt;/span&gt;
    &lt;span class="n"&gt;Password&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"password" binding:"required,min=6"`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, let’s define the &lt;code&gt;loginUserResponse&lt;/code&gt; struct. The most important field that should be returned to the client is &lt;code&gt;AccessToken&lt;/code&gt; string. This is the token that we will create using the token maker interface.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;loginUserResponse&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;AccessToken&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;       &lt;span class="s"&gt;`json:"access_token"`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Beside the access token, we might also want to return some information of the logged in user, just like the one we returned in the create user API:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;createUserResponse&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Username&lt;/span&gt;          &lt;span class="kt"&gt;string&lt;/span&gt;    &lt;span class="s"&gt;`json:"username"`&lt;/span&gt;
    &lt;span class="n"&gt;FullName&lt;/span&gt;          &lt;span class="kt"&gt;string&lt;/span&gt;    &lt;span class="s"&gt;`json:"full_name"`&lt;/span&gt;
    &lt;span class="n"&gt;Email&lt;/span&gt;             &lt;span class="kt"&gt;string&lt;/span&gt;    &lt;span class="s"&gt;`json:"email"`&lt;/span&gt;
    &lt;span class="n"&gt;PasswordChangedAt&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Time&lt;/span&gt; &lt;span class="s"&gt;`json:"password_changed_at"`&lt;/span&gt;
    &lt;span class="n"&gt;CreatedAt&lt;/span&gt;         &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Time&lt;/span&gt; &lt;span class="s"&gt;`json:"created_at"`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So to make this struct reusable, I’m gonna change its name to just &lt;code&gt;userResponse&lt;/code&gt;. It will be the type of the &lt;code&gt;User&lt;/code&gt; field in this &lt;code&gt;loginUserResponse&lt;/code&gt; struct:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;userResponse&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Username&lt;/span&gt;          &lt;span class="kt"&gt;string&lt;/span&gt;    &lt;span class="s"&gt;`json:"username"`&lt;/span&gt;
    &lt;span class="n"&gt;FullName&lt;/span&gt;          &lt;span class="kt"&gt;string&lt;/span&gt;    &lt;span class="s"&gt;`json:"full_name"`&lt;/span&gt;
    &lt;span class="n"&gt;Email&lt;/span&gt;             &lt;span class="kt"&gt;string&lt;/span&gt;    &lt;span class="s"&gt;`json:"email"`&lt;/span&gt;
    &lt;span class="n"&gt;PasswordChangedAt&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Time&lt;/span&gt; &lt;span class="s"&gt;`json:"password_changed_at"`&lt;/span&gt;
    &lt;span class="n"&gt;CreatedAt&lt;/span&gt;         &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Time&lt;/span&gt; &lt;span class="s"&gt;`json:"created_at"`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;loginUserResponse&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;AccessToken&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;       &lt;span class="s"&gt;`json:"access_token"`&lt;/span&gt;
    &lt;span class="n"&gt;User&lt;/span&gt;        &lt;span class="n"&gt;userResponse&lt;/span&gt; &lt;span class="s"&gt;`json:"user"`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then let’s copy the &lt;code&gt;userResponse&lt;/code&gt; object from the &lt;code&gt;createUser()&lt;/code&gt; handler, and define a &lt;code&gt;newUserResponse()&lt;/code&gt; function at the top.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;newUserResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;userResponse&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;userResponse&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Username&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;          &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;FullName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;          &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FullName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;Email&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;             &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;PasswordChangedAt&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PasswordChangedAt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;CreatedAt&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;         &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreatedAt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The role of this function is to convert the input &lt;code&gt;db.User&lt;/code&gt; object into &lt;code&gt;userResponse&lt;/code&gt;. The reason we do that is because there’s a sensitive data inside the &lt;code&gt;db.User&lt;/code&gt; struct, which is the &lt;code&gt;hashed_password&lt;/code&gt;, that we don’t want to expose to the client.&lt;/p&gt;

&lt;p&gt;OK, so now in the &lt;code&gt;createUser()&lt;/code&gt; handler, we can just call the &lt;code&gt;newUserResponse()&lt;/code&gt; function to create the response object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;createUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;gin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;

    &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;

    &lt;span class="n"&gt;rsp&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;newUserResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusOK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rsp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;newUserResponse()&lt;/code&gt; function will be useful for our new &lt;code&gt;loginUser()&lt;/code&gt; handler as well.&lt;/p&gt;

&lt;p&gt;Alright, now let’s add a new method to the server struct: &lt;code&gt;loginUser()&lt;/code&gt;. Similar as in other API handlers, this function will take a &lt;code&gt;gin.Context&lt;/code&gt; object as input.&lt;/p&gt;

&lt;p&gt;Inside, we declare a &lt;code&gt;request&lt;/code&gt; object of type &lt;code&gt;loginUserRequest&lt;/code&gt;, and we call the &lt;code&gt;ctx.ShouldBindJSON()&lt;/code&gt; function with a pointer to that &lt;code&gt;request&lt;/code&gt; object. This will bind all the input parameters of the API into the &lt;code&gt;request&lt;/code&gt; object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;loginUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;gin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt; &lt;span class="n"&gt;loginUserRequest&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ShouldBindJSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusBadRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;errorResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If &lt;code&gt;error&lt;/code&gt; is not &lt;code&gt;nil&lt;/code&gt;, we send a response with status &lt;code&gt;400 Bad Request&lt;/code&gt; to the client, together with the &lt;code&gt;errorResponse()&lt;/code&gt; body to explain why it failed.&lt;/p&gt;

&lt;p&gt;If there’s no error, we will find the user from the database by calling &lt;code&gt;server.store.GetUser()&lt;/code&gt; with the context &lt;code&gt;ctx&lt;/code&gt; and &lt;code&gt;req.Username&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;loginUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;gin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;

    &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Username&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ErrNoRows&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusNotFound&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;errorResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusInternalServerError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;errorResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the error returned by this call is not &lt;code&gt;nil&lt;/code&gt;, then there are 2 possible cases:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The first case is when the &lt;code&gt;username&lt;/code&gt; doesn’t exist, which means &lt;code&gt;error&lt;/code&gt; equals to &lt;code&gt;sql.ErrNoRows&lt;/code&gt;. In this case, we send a response with status &lt;code&gt;404 Not Found&lt;/code&gt; to the client, and return immediately.&lt;/li&gt;
&lt;li&gt;The second case is an unexpected error occurs when talking to the database. In this case, we send a &lt;code&gt;500 Internal Server Error&lt;/code&gt; status to the client, and also return right away.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If everything goes well, and no errors occur, we will have to check if the password provided by the client is correct or not. So we call &lt;code&gt;util.CheckPassword()&lt;/code&gt; with the input &lt;code&gt;req.Password&lt;/code&gt; and &lt;code&gt;user.HashedPassword&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;loginUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;gin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;

    &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CheckPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HashedPassword&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusUnauthorized&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;errorResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If this function returns a not &lt;code&gt;nil&lt;/code&gt; error, then it means the provided password is incorrect. We will send a response with status &lt;code&gt;401 Unauthorized&lt;/code&gt; to the client, and return.&lt;/p&gt;

&lt;p&gt;Only when the password is correct, then we will create a new access token for this user.&lt;/p&gt;

&lt;p&gt;Let’s call &lt;code&gt;server.tokenMaker.CreateToken()&lt;/code&gt;, pass in &lt;code&gt;user.Username&lt;/code&gt;, and &lt;code&gt;server.config.AccessTokenDuration&lt;/code&gt; as input arguments.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;loginUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;gin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;

    &lt;span class="n"&gt;accessToken&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tokenMaker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateToken&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AccessTokenDuration&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusInternalServerError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;errorResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;rsp&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;loginUserResponse&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;AccessToken&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;accessToken&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;        &lt;span class="n"&gt;newUserResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusOK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rsp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If an unexpected error occurs, we just return &lt;code&gt;500 Internal Server Error&lt;/code&gt; status code.&lt;/p&gt;

&lt;p&gt;Otherwise, we will build the &lt;code&gt;loginUserResponse&lt;/code&gt; object, where &lt;code&gt;AccessToken&lt;/code&gt; is the created access token, and &lt;code&gt;User&lt;/code&gt; is &lt;code&gt;newUserResponse(user)&lt;/code&gt;. We then send this response to the client with a &lt;code&gt;200 OK&lt;/code&gt; status code.&lt;/p&gt;

&lt;p&gt;And that’s basically it! The &lt;code&gt;loginUser()&lt;/code&gt; handler function is completed:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;loginUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;gin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt; &lt;span class="n"&gt;loginUserRequest&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ShouldBindJSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusBadRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;errorResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Username&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ErrNoRows&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusNotFound&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;errorResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusInternalServerError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;errorResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CheckPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HashedPassword&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusUnauthorized&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;errorResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;accessToken&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tokenMaker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateToken&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AccessTokenDuration&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusInternalServerError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;errorResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;rsp&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;loginUserResponse&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;AccessToken&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;accessToken&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;        &lt;span class="n"&gt;newUserResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusOK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rsp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#add-login-api-route-to-the-server"&gt;
  &lt;/a&gt;
  Add login API route to the server
&lt;/h2&gt;

&lt;p&gt;The next step is to add a new API endpoint to the server that will route the login request to the &lt;code&gt;loginUser()&lt;/code&gt; handler.&lt;/p&gt;

&lt;p&gt;I’m gonna put it next to the create user route. So &lt;code&gt;router.POST()&lt;/code&gt;, the path should be &lt;code&gt;/users/login&lt;/code&gt;, and the handler function is &lt;code&gt;server.loginUser()&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;NewServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;store&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;

    &lt;span class="n"&gt;router&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;gin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Default&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;router&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/users"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;createUser&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;router&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/users/login"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loginUser&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And we’re done!&lt;/p&gt;

&lt;p&gt;However, this &lt;code&gt;NewServer()&lt;/code&gt; function is getting quite long now, which makes it harder to read.&lt;/p&gt;

&lt;p&gt;So I’m gonna split the routing part into a separate method of the &lt;code&gt;server&lt;/code&gt; struct. Let’s call it &lt;code&gt;setupRouter()&lt;/code&gt;. Then paste in all the routing codes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;setupRouter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;router&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;gin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Default&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;router&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/users"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;createUser&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;router&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/users/login"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loginUser&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;router&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/accounts"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;createAccount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;router&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/accounts/:id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getAccount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;router&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/accounts"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listAccounts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;router&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/transfers"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;createTransfer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;router&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We should move the gin router variable here as well. And at the end, we should save this router to the &lt;code&gt;server.router&lt;/code&gt; field.&lt;/p&gt;

&lt;p&gt;Then all we have to do in the &lt;code&gt;NewServer()&lt;/code&gt; function is to call &lt;code&gt;server.setupRouter()&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;NewServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;store&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;tokenMaker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewPasetoMaker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TokenSymmetricKey&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Errorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"cannot create token maker: %w"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;     &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;      &lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;tokenMaker&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;tokenMaker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;binding&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Validator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Engine&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;validator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Validate&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RegisterValidation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"currency"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;validCurrency&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setupRouter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now we’ve really completed the login user API’s implementation. It’s pretty easy and straightforward, isn’t it?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#run-the-server-and-send-login-user-request"&gt;
  &lt;/a&gt;
  Run the server and send login user request
&lt;/h2&gt;

&lt;p&gt;Let’s run the server and send some requests to see how it goes!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;❯ make server
go run main.go
&lt;span class="o"&gt;[&lt;/span&gt;GIN-debug] &lt;span class="o"&gt;[&lt;/span&gt;WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

&lt;span class="o"&gt;[&lt;/span&gt;GIN-debug] &lt;span class="o"&gt;[&lt;/span&gt;WARNING] Running &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="s2"&gt;"debug"&lt;/span&gt; mode. Switch to &lt;span class="s2"&gt;"release"&lt;/span&gt; mode &lt;span class="k"&gt;in &lt;/span&gt;production.
 - using &lt;span class="nb"&gt;env&lt;/span&gt;:   &lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;GIN_MODE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;release
 - using code:  gin.SetMode&lt;span class="o"&gt;(&lt;/span&gt;gin.ReleaseMode&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;GIN-debug] POST   /users                    &lt;span class="nt"&gt;--&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; github.com/techschool/simplebank/api.&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;*&lt;/span&gt;Server&lt;span class="o"&gt;)&lt;/span&gt;.createUser-fm &lt;span class="o"&gt;(&lt;/span&gt;3 handlers&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;GIN-debug] POST   /users/login              &lt;span class="nt"&gt;--&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; github.com/techschool/simplebank/api.&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;*&lt;/span&gt;Server&lt;span class="o"&gt;)&lt;/span&gt;.loginUser-fm &lt;span class="o"&gt;(&lt;/span&gt;3 handlers&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;GIN-debug] POST   /accounts                 &lt;span class="nt"&gt;--&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; github.com/techschool/simplebank/api.&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;*&lt;/span&gt;Server&lt;span class="o"&gt;)&lt;/span&gt;.createAccount-fm &lt;span class="o"&gt;(&lt;/span&gt;4 handlers&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;GIN-debug] GET    /accounts/:id             &lt;span class="nt"&gt;--&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; github.com/techschool/simplebank/api.&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;*&lt;/span&gt;Server&lt;span class="o"&gt;)&lt;/span&gt;.getAccount-fm &lt;span class="o"&gt;(&lt;/span&gt;4 handlers&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;GIN-debug] GET    /accounts                 &lt;span class="nt"&gt;--&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; github.com/techschool/simplebank/api.&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;*&lt;/span&gt;Server&lt;span class="o"&gt;)&lt;/span&gt;.listAccounts-fm &lt;span class="o"&gt;(&lt;/span&gt;4 handlers&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;GIN-debug] POST   /transfers                &lt;span class="nt"&gt;--&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; github.com/techschool/simplebank/api.&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;*&lt;/span&gt;Server&lt;span class="o"&gt;)&lt;/span&gt;.createTransfer-fm &lt;span class="o"&gt;(&lt;/span&gt;4 handlers&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;GIN-debug] Listening and serving HTTP on 0.0.0.0:8080
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see here, the login user API is up and running.&lt;/p&gt;

&lt;p&gt;Now I’m gonna open &lt;a href="https://www.postman.com/"&gt;Postman&lt;/a&gt;, create a new request and set it method to &lt;code&gt;POST&lt;/code&gt;. The URL should be &lt;a href="http://localhost:8080/users/login"&gt;http://localhost:8080/users/login&lt;/a&gt;, then select body, raw, and JSON format.&lt;/p&gt;

&lt;p&gt;The JSON body will have 2 fields: &lt;code&gt;username&lt;/code&gt; and &lt;code&gt;password&lt;/code&gt;. In the database, there are 4 users that we already created in previous lectures. So I’m gonna use the first user with username &lt;code&gt;quang1&lt;/code&gt; and the password is &lt;code&gt;secret&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;OK let’s send this request:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B9Pqia7W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vwyei97ur9h1d1njvxsp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B9Pqia7W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vwyei97ur9h1d1njvxsp.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Voilà! It's successful!&lt;/p&gt;

&lt;p&gt;We’ve got the PASETO v2 local access token here. And all the information of the logged in user in this object. So it worked!&lt;/p&gt;

&lt;p&gt;Let’s try login with an invalid password: &lt;code&gt;xyz&lt;/code&gt;. Send the request.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pGfvekDI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d4nvc3rurrsflbwxda5j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pGfvekDI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d4nvc3rurrsflbwxda5j.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we’ve got &lt;code&gt;400 Bad Request&lt;/code&gt; because the password we sent was too short. That's because we have a validation rule for the password field to have at least 6 characters:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;loginUserRequest&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="n"&gt;Password&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"password" binding:"required,min=6"`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So let’s change this value to &lt;code&gt;xyz123&lt;/code&gt;. And send the request again.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2xDKMy7I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v1i2t9o4wahc6euo9w0v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2xDKMy7I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v1i2t9o4wahc6euo9w0v.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This time we’ve got &lt;code&gt;401 Unauthorized&lt;/code&gt; status code, and the error is: "hashed password is not the hash of the given password", or in other words, the provided password is incorrect.&lt;/p&gt;

&lt;p&gt;Now let’s try the case when username doesn’t exist. I’m gonna change the &lt;code&gt;username&lt;/code&gt; to &lt;code&gt;quang10&lt;/code&gt;, and send the request again.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LLgdGAF1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/613iweotcvnxahc0pvu5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LLgdGAF1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/613iweotcvnxahc0pvu5.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This time, we’ve got &lt;code&gt;404 Not Found&lt;/code&gt; status code. That’s exactly what we expected! So the login user API is working very well.&lt;/p&gt;

&lt;p&gt;Before we finish, I’m gonna show you how easy it is to change the token types.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#change-the-token-type"&gt;
  &lt;/a&gt;
  Change the token type
&lt;/h2&gt;

&lt;p&gt;Right now, we’re using &lt;code&gt;PASETO&lt;/code&gt;, but since it implements the same token maker interface with JWT, it will be super easy if we want to switch to &lt;code&gt;JWT&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;All we have to do is just change the &lt;code&gt;token.NewPasetoMaker()&lt;/code&gt; call to &lt;code&gt;token.NewJWTMaker()&lt;/code&gt; in the &lt;code&gt;api/server.go&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;NewServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;store&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;tokenMaker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewJWTMaker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TokenSymmetricKey&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Errorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"cannot create token maker: %w"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That’s it! Let’s restart the server, then go back to Postman and send the login request one more time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4_-a5wCK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x85z3ngc9foi1scy3jrc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4_-a5wCK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x85z3ngc9foi1scy3jrc.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, the request is successful. And now the access token looks different because it’s a JWT token, not a PASETO token as before.&lt;/p&gt;

&lt;p&gt;OK, now as we’ve confirmed that it worked, I’m gonna revert the token type to PASETO because it’s better than JWT in my opinion.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;NewServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;store&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;tokenMaker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewPasetoMaker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TokenSymmetricKey&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Errorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"cannot create token maker: %w"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that wraps up this lecture about implementing login user API in Go.&lt;/p&gt;

&lt;p&gt;I hope you find it useful. Thanks a lot for reading, and see you soon in the next one!&lt;/p&gt;




&lt;p&gt;If you like the article, please subscribe to our &lt;a href="http://bit.ly/techschoolguru"&gt;Youtube channel&lt;/a&gt; and follow us on &lt;a href="https://twitter.com/techschoolguru"&gt;Twitter&lt;/a&gt; or &lt;a href="https://www.facebook.com/techschool.guru"&gt;Facebook&lt;/a&gt; for more tutorials in the future.&lt;/p&gt;

</description>
      <category>go</category>
      <category>tutorial</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Medipol Global Summit 2021</title>
      <author>Vusal Ismayilov</author>
      <pubDate>Sat, 24 Apr 2021 07:46:40 +0000</pubDate>
      <link>https://dev.to/woosal/medipol-global-summit-2021-140l</link>
      <guid>https://dev.to/woosal/medipol-global-summit-2021-140l</guid>
      <description>&lt;p&gt;Medipol Global Summit 2021 is an event targeted for the enthusiasts in the field of Artificial Intelligence, Machine Learning, Cyber Security, Web and Mobile development, Blockchain and so many others! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KYp1j6Yv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/om9t9txwnrgqpnsn34ky.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KYp1j6Yv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/om9t9txwnrgqpnsn34ky.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The hosts, in other words, the presenters have 2 most important characteristics in common, which is they are all Experts in their respective fields and all are officially verified Google Developer Experts. Throughout the event while having applied and introductory projects welcome you by the GDE’s, you will have a general understanding of specific topics related to each field in your mind. If you are especially so confused about which field to choose and continue over, or already have chosen your path, however, need suggestions how to continue, this is literally a perfect opportunity for you all to ask your questions to the Experts with decades of experience.&lt;/p&gt;

&lt;p&gt;Feel free to visit the official Medipol Summit 2021 website by clicking the link below to stay more informed about the event:&lt;br&gt;
&lt;a href="https://medipolsummit.org"&gt;https://medipolsummit.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vCaNPMV0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x8c6r4y7ud835z2xv96h.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vCaNPMV0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x8c6r4y7ud835z2xv96h.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Down below, you can find the schedule of the event, and through the website (&lt;a href="https://medipolsummit.org"&gt;https://medipolsummit.org&lt;/a&gt;) you can register to the event for completely free while adding the special calendar made by us to your own Google calendar schedule with one click away in order to stay updated and notified to the case and not to miss any event!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Friday May 7
- Introduction to Machine Learning
- Neural Networks
- Artificial Intelligence

Saturday May 8
- Cyber Security Power between the Past and the Future
- Cyber Security
- Blockchain
- Blockchain

Sunday May 9
- Frontend Web Development
- Backend Web Development
- Flutter
- Jetpack Compose For Android
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make sure to sign-up to the event and add to your calendar through the website &lt;a href="https://medipolsummit.org"&gt;https://medipolsummit.org&lt;/a&gt; &lt;/p&gt;

</description>
      <category>summit</category>
      <category>tech</category>
      <category>event</category>
      <category>medipol</category>
    </item>
    <item>
      <title>10-things-you-can-do-today-to-reduce-aws-costs</title>
      <author>Adit Modi</author>
      <pubDate>Sat, 24 Apr 2021 06:58:18 +0000</pubDate>
      <link>https://dev.to/aws-builders/10-things-you-can-do-today-to-reduce-aws-costs-54fk</link>
      <guid>https://dev.to/aws-builders/10-things-you-can-do-today-to-reduce-aws-costs-54fk</guid>
      <description>&lt;p&gt;Users of Amazon Web Services are likely familiar with some AWS cost optimization best practices, but probably not all of them. Consequently, I have compiled a list of the ten best practices to optimize AWS costs, and also suggest a solution that ensures the costs of using Amazon Web Services remain optimized.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0zASrpqM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/no58z5audrsr2tr768go.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0zASrpqM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/no58z5audrsr2tr768go.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;My Background: I am Cloud , DevOps &amp;amp; Big Data Enthusiast | 4x AWS Certified | 3x OCI Certified | 3x Azure Certified .&lt;/em&gt;  &lt;/p&gt;

&lt;p&gt;It’s not unusual to read headlines claiming businesses are overspending in the cloud, that a double-figure percentage of money is being wasted on unused services, or that millions of businesses provision resources with more capacity than they need. The most common “solutions” to the reported issues are rightsizing, scheduling, and purchasing Reserved Instances/Savings Plans for predictable workloads.&lt;/p&gt;

&lt;p&gt;These three “solutions” are probably the AWS cost optimization best practices most AWS users are familiar with, but they’re not necessarily the “best” best practices. Sometimes they don’t save a fraction of the cost that it's claimed they will, while plenty of other, often overlooked, AWS cost optimization best practices can save a lot more. This is an issue we aim to address below.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-10-aws-cost-optimization-best-practices"&gt;
  &lt;/a&gt;
  The 10 AWS cost optimization best practices
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#1-rightsizing-ec2-instances"&gt;
  &lt;/a&gt;
  1. Rightsizing EC2 Instances
&lt;/h4&gt;

&lt;p&gt;As I have already mentioned rightsizing, scheduling, and Reserved Instances/Savings Plans, let’s start with these three AWS cost optimization best practices. The purpose of rightsizing is to match instance sizes to their workloads. Unfortunately, it doesn’t quite work like that because of the way in which instances double in capacity for each increase in size.&lt;/p&gt;

&lt;p&gt;If you double the capacity when you go up one size, then you also half the capacity when you go down one size. Therefore, rightsizing is only a worthwhile best practice if there are instances whose peak utilization does not exceed ~45%. It’s still worth analyzing utilization metrics to find opportunities to move workloads to different families (other than “General Purpose”) that better suit their needs.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#2-scheduling-onoff-times"&gt;
  &lt;/a&gt;
  2. Scheduling on/off times
&lt;/h4&gt;

&lt;p&gt;It’s worth scheduling on/off times for non-production instances such as those used for developing, staging, testing, and QA, as you will save around 65% of running these instances if you apply an “on” schedule of 8.00 a.m. to 8.00 p.m. Monday to Friday. However, it’s possible to save a lot more—especially if development teams work in irregular patterns or at irregular hours. &lt;/p&gt;

&lt;p&gt;You can apply more aggressive schedules by analyzing utilization metrics to determine when the instances are most frequently used, or apply an always stopped schedule which can be interrupted when access to the instances is required. It’s worth pointing out that while instances are scheduled to be off, you’re still being charged for EBS volumes and other components attached to them.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#3-purchasing-reserved-instances-and-savings-plans"&gt;
  &lt;/a&gt;
  3. Purchasing Reserved Instances and Savings Plans
&lt;/h4&gt;

&lt;p&gt;Purchasing Reserved Instances is an easy way to reduce AWS costs. It can also be an easy way to increase AWS costs if you don’t utilize the Reserved Instance as much as you expected to, purchase the wrong type of Reserved Instance, or purchase a “standard” Reserved Instance only to find AWS prices fall over the term of your reservation by more than the reservation “saves”.&lt;/p&gt;

&lt;p&gt;Therefore, rather than suggest that purchasing Reserved Instances is one of the best practices for AWS cost optimization, we’re going to recommend the effective management of Reserved Instances as an AWS cost optimization best practice—effective management consisting of weighing up all the variables before making a purchase and then monitoring utilization throughout the reservation’s lifecycle.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#4-delete-unattached-ebs-volumes"&gt;
  &lt;/a&gt;
  4. Delete unattached EBS volumes
&lt;/h4&gt;

&lt;p&gt;Returning to Elastic Block Storage (EBS), when you launch an EC2 instance, an EBS volume is attached to the instance to act as its local block storage. When you terminate the EC2 instance, the EBS volume is only deleted if you checked the “delete on termination” box when the instance was launched. If the box wasn’t checked, the EBS volume still exists and is contributing toward the monthly AWS bill.&lt;/p&gt;

&lt;p&gt;Depending on how long your business has been operating in the cloud and the number of instances launched without the delete box being checked, there could be thousands of unattached EBS volumes in your AWS Cloud. It’s certainly one of our AWS cost optimization best practices to consider, even if your business is relatively new to the AWS Cloud.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#5-delete-obsolete-snapshots"&gt;
  &lt;/a&gt;
  5. Delete obsolete snapshots
&lt;/h4&gt;

&lt;p&gt;Snapshots are an efficient way to back up data on an EBS volume to an S3 storage bucket because they only back up data that’s changed since the last snapshot to prevent duplications in the S3 bucket. Consequently, each snapshot contains all of the information needed to restore your data (from the moment when the snapshot was taken) to a new EBS volume.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VtIoX4hT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/djyy5a038x9jkmm0zlfz.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VtIoX4hT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/djyy5a038x9jkmm0zlfz.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Usually, you’re only going to need the most recent snapshot to restore data if something goes wrong (although it’s advisable to keep snapshots for a couple of weeks depending on the frequency with which they’re taken), and although snapshots don’t cost very much individually, you could save thousands of dollars by deleting those you no longer need.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#6-release-unattached-elastic-ip-addresses"&gt;
  &lt;/a&gt;
  6. Release unattached Elastic IP addresses
&lt;/h4&gt;

&lt;p&gt;Elastic IP addresses are public IPv4 addresses from Amazon’s pool of IP addresses that are allocated to an instance so it can be reached via the Internet. Businesses are allowed a maximum of five Elastic IP addresses per account because Amazon doesn´t have an unlimited pool of IP addresses. However, they are free of change when attached to running service. &lt;/p&gt;

&lt;p&gt;Exceptions to the free of charge rule occur if you remap an IP address more than 100 times a month, or if you hang on to unattached Elastic IP address once you have terminated the instances to which they were attached. The charge for unattached Elastic IP addresses may only be $0.01 per hour, but if there are fifty AWS accounts each holding back two IP addresses, that amounts to $8,760 of waste per year.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#7-upgrade-instances-to-the-latest-generation"&gt;
  &lt;/a&gt;
  7. Upgrade instances to the latest generation
&lt;/h4&gt;

&lt;p&gt;Due to Amazon Web Services’ wide array of products and services, there are frequent announcements about how products have been upgraded or features introduced to support specific services. With regards to AWS cost optimization best practices, the announcements to look out for are those relating to latest generation instances.&lt;/p&gt;

&lt;p&gt;When Amazon Web Services releases a new generation of instances, they tend to have improved performance and functionality compared to their predecessors. This means you can either upgrade existing instances to the latest generation, or downsize existing instances with borderline utilization metrics in order to benefit from the same level of performance at lower cost.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#8-purchase-reserved-nodes-for-redshift-and-elasticache-services"&gt;
  &lt;/a&gt;
  8. Purchase reserved nodes for Redshift and ElastiCache Services
&lt;/h4&gt;

&lt;p&gt;One recent AWS announcement detailed how the discount program for Amazon Redshift and ElastiCache had changed. Previously, businesses could purchase advanced-payment “Heavy Utilization” discounts, but these have now changed to (almost) mirror Reserved Instance purchases for EC2 and RDS instances.&lt;/p&gt;

&lt;p&gt;Reserved Nodes can be purchased for Redshift, ElasticCache, Redis, and Memcached Services for 1-year or 3-year terms, with the option of paying the full amount upfront or partially upfront, or paying monthly. One important note is that in order to take advantage of reservations on the ElastiCache Service, you must first upgrade Nodes to the latest generation. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#9-terminate-zombie-assets"&gt;
  &lt;/a&gt;
  9. Terminate zombie assets
&lt;/h4&gt;

&lt;p&gt;The term “zombie assets” is most often used to describe any unused asset contributing to the cost of operating in the AWS Cloud—many typical zombie assets have already been mentioned (unattached EBS volumes, obsolete snapshots, etc.). Other assets that fall into this category include components of instances that were activated when an instance failed to launch and unused Elastic Load Balancers.&lt;/p&gt;

&lt;p&gt;A problem businesses often encounter when trying to implement AWS cost optimization best practices is that some unused assets are difficult to find. For example, unattached IP addresses are notoriously difficult to locate in AWS System Manager or AWS Console.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#10-move-infrequentlyaccessed-data-to-lower-cost-tiers"&gt;
  &lt;/a&gt;
  10. Move infrequently-accessed data to lower cost tiers
&lt;/h4&gt;

&lt;p&gt;Amazon Web Services currently offers six tiers of storage at different price points. Determining which storage tier is most suitable for data will depend on factors such as how often data is accessed (as retrieval fees apply to the lower tiers) and how quickly a business would need to retrieve data in the event of a disaster (as it may take hours to retrieve from a lower tier).&lt;/p&gt;

&lt;p&gt;The savings from storing infrequently accessed, non-critical data in a lower cost tier can be substantial. The cost per month of storing up to 50TB of data in a standard S3 storage bucket is $0.023 per GB (US East Region), whereas storing the same data in S3 Glacier Deep Archive storage is $0.00099 per GB per month. The six tiers of storage are:&lt;/p&gt;

&lt;p&gt;S3 Standard&lt;br&gt;
S3 Intelligent Tiering&lt;br&gt;
S3 Infrequent Access&lt;br&gt;
S3 Infrequent Access (Single Zone)&lt;br&gt;
S3 Glacier&lt;br&gt;
S3 Deep Archive Glacier&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#aws-cost-optimization-is-an-ongoing-process"&gt;
  &lt;/a&gt;
  AWS cost optimization is an ongoing process
&lt;/h4&gt;

&lt;p&gt;Applying AWS cost optimization best practices is an ongoing process. Your AWS Cloud needs to be monitored at all times to identify when assets are being under-utilized (or not utilized at all) and when opportunities exist to reduce costs by deleting/terminating/releasing zombie assets. It’s also important to stay on top of Reserved Instances to ensure they’re being fully utilized.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--65DZ9Hvx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ytfdy8su5nsiucxmfqdy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--65DZ9Hvx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ytfdy8su5nsiucxmfqdy.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hope this guide helps you understand the things you can do today to reduce aws costs, feel free to connect with me on &lt;a href="https://www.linkedin.com/in/adit-modi-2a4362191/"&gt;LinkedIn.&lt;/a&gt;&lt;br&gt;
You can view my badges &lt;a href="https://www.youracclaim.com/users/adit-modi/badges"&gt;here.&lt;/a&gt;&lt;br&gt;
If you are interested in learning more about AWS then follow me on &lt;a href="https://github.com/AditModi"&gt;github.&lt;/a&gt;&lt;br&gt;
If you liked this content then do clap and share it . Thank You .&lt;/p&gt;

</description>
      <category>cloud</category>
      <category>beginners</category>
      <category>aws</category>
    </item>
    <item>
      <title>7 self-taught coders who work full time as software developers</title>
      <author>Tech Stuff</author>
      <pubDate>Sat, 24 Apr 2021 06:50:00 +0000</pubDate>
      <link>https://dev.to/techstu14224960/7-self-taught-coders-who-work-full-time-as-software-developers-2oeg</link>
      <guid>https://dev.to/techstu14224960/7-self-taught-coders-who-work-full-time-as-software-developers-2oeg</guid>
      <description>&lt;p&gt;Studying web development is a path with many ups and downs.It’s often hard to see the light at the end of the tunnel. But when you’re in those tough, dark spots, try to find the motivation to hang in there.&lt;/p&gt;

&lt;p&gt;You might have one day where you figure out a tough problem and feel absolutely amazing. But then the very next day, you get stuck on a seemingly easy problem for hours. You end up feeling completely defeated.You can also find encouragement from others who are in the same boat as you. Knowing that there are people who struggle with the same issues can be hugely encouraging.&lt;/p&gt;

&lt;p&gt;It’s about being part of a community where other people have the same dreams and goals as you.To that end, I’ve gathered a collection of stories from here on freeCodeCamp. The authors are people like you, who’ve fought their way to their ultimate goal — finding a web development job.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;How I went from selling food in the street to working for top firms in tech&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Alvaro Videla taught himself PHP via the local internet cafe and some books sent to him by a relative. After endless nights studying and practicing, he landed a job with a tech company.&lt;/p&gt;

&lt;p&gt;If you read just one story from this list, choose this one. It’s a well-written narrative of what’s possible when you really put your mind to something.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;How I Landed My First Job as a Web Developer by Gwendolyn Faraday&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Gwendolyn Faraday was working full-time at a restaurant and helping her grandmother. In 2015, after dabbling casually in coding tutorials, she decided to go all-in.&lt;/p&gt;

&lt;p&gt;She enrolled in Treehouse and became a regular in the freeCodeCamp community. She was constantly learning and putting herself out there. And one of the keys that helped her land a job was expanding her in-person and online network.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;My journey to becoming a web developer from scratch without a CS degree by Sergei Garcia&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Sergei Garcia wrote a very in-depth account of how he began learning web development and got a full-time job.&lt;/p&gt;

&lt;p&gt;He wrote not only about his journey, but wrote about what resources he found most helpful on his journey. And he shared his experiences at his first job and the lessons he learned.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;How to Go From Hobbyist to Professional Developer by Ken Rogers&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Ken Rogers’ story is both inspiring and practical. He taught himself web development while working a full-time job in landscaping. After requesting an informational interview at a web dev shop, he was offered a full-time job.&lt;/p&gt;

&lt;p&gt;Ken shared his story and also wrote out a roadmap for how to become a professional web developer.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;How I went from programming with a feature phone to working for an MIT Startup by Elvis Chidera&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Elvis Chidera learned that continuous practice helped him in improving his reading and writing in school. He applied that same idea to learning programming and built his own real-world app projects.&lt;/p&gt;

&lt;p&gt;All as a teenager without a laptop! As the title indicated, Elvis is now working for an MIT startup.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;How I convinced an employer to take a chance on me and pay me to learn to code by Rick West&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;While working as a plumber, Rick West started learning web development on his own. He later considered enrolling in a bootcamp, but realized after running the numbers that it wasn’t economically feasible for him and his family.&lt;/p&gt;

&lt;p&gt;So he used some ingenuity. He emailed some companies for informational interviews, and ended up getting hired by one of them!&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;How I landed a React developer job during my 
Danny Huang had always wanted to learn coding. He started on the freeCodeCamp track and did the 100 days of code challenge.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;He practiced 2–4 hours per day and invested in making his GitHub profile appealing to employers. On Day 97, Danny got his first job offer.&lt;/p&gt;

&lt;p&gt;What makes Danny’s story stand out is that he kept track of his progress and accomplishments.&lt;/p&gt;

</description>
      <category>php</category>
      <category>programming</category>
      <category>webdev</category>
      <category>design</category>
    </item>
    <item>
      <title>Best Google Chrome Extensions for Web Designers And Developers in 2021</title>
      <author>Animesh Dhamku</author>
      <pubDate>Sat, 24 Apr 2021 06:27:59 +0000</pubDate>
      <link>https://dev.to/animeshdhamku/8-best-google-chrome-extensions-for-web-designers-and-developers-in-2021-4a02</link>
      <guid>https://dev.to/animeshdhamku/8-best-google-chrome-extensions-for-web-designers-and-developers-in-2021-4a02</guid>
      <description>&lt;p&gt;As a designer/developer we use google chrome in daily life. That's why I brought the top 10 google extensions to make your work easy, We have a modern browser that is always upgraded by developers. I have brought 10 browser extensions today that will help you in coding.&lt;/p&gt;

&lt;p&gt;Best Google Chrome Extensions for Web Designers and Developers:&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#whatfont"&gt;
  &lt;/a&gt;
  WhatFont
&lt;/h1&gt;

&lt;p&gt;The easiest thanks to identify fonts on sites&lt;/p&gt;

&lt;p&gt;What is the simplest thanks to determine the fonts utilized in a webpage? Firebug and Webkit Inspector are easy enough to use for developers. However, for others, this could not be necessary. With this extension, you'll inspect web fonts by just hovering on them. it's that straightforward and stylish .&lt;/p&gt;

&lt;p&gt;It also detects the services used for serving the online fonts. Supports Typekit and Google Font API.&lt;/p&gt;

&lt;p&gt;To embrace the new web font era, WhatFont also detects services used for serving the font. Now supports Typekit and Google Font API.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#ruul-screen-ruler"&gt;
  &lt;/a&gt;
  ruul. Screen ruler
&lt;/h1&gt;

&lt;p&gt;A fantastically simple on-screen ruler for lining up and measuring type, line height, strokes and almost anything on the online .&lt;/p&gt;

&lt;p&gt;Get pixel perfect with: horizontal and vertical draggable rulers; pixel, picas and sort measurements, line height guides and stroke widths. Move ruul with arrow keys, one pixel at a time, and use multiple ruul together. Ruul have 4 different coloured ruul, steel and wooden ruul included.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#screen-capture-by-google"&gt;
  &lt;/a&gt;
  Screen Capture By Google
&lt;/h1&gt;

&lt;p&gt;Capture visible content of a tab, a neighborhood of an internet page, or the entire page as a PNG image. Support horizontal and vertical scroll…&lt;/p&gt;

&lt;p&gt;It's easy to use this extension to capture visible content of a tab, a neighborhood of an internet page, or the entire page as a PNG image.&lt;/p&gt;

&lt;p&gt;You can also edit your captured image before saving it as a PNG image. Highlighting, redacting and adding text are supported.&lt;/p&gt;

&lt;p&gt;What set this extension apart are: Super fast when capturing page image, esp. for giant pages; Support horizontal scroll for giant pages that don't slot in one tab screen horizontally; Intelligently detect floating objects on a page and avoid repeating capture of an equivalent floating objects if whole page capture requires scrolling; Works on Windows, Linux and Mac&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#image-downloader"&gt;
  &lt;/a&gt;
  Image Downloader
&lt;/h1&gt;

&lt;p&gt;See all images shown or linked on an internet page and download them.&lt;/p&gt;

&lt;p&gt;If you would like to bulk download images from an internet page, with this extension you can: See images that the page contains and links to, Filter or sort them by URL; also supports wildcards and regular expressions, Optionally show only images from links, Select images for download by either using the checkboxes or directly clicking on the image, Dedicated buttons to download or open in new tab individual images, Customize display width, border size, style and color, Hide filters, buttons and notifications you do not need&lt;/p&gt;

&lt;p&gt;When you press the "Download" button, all selected images are saved to the default download directory of Chrome. If you do not have one, you'll need to manually choose the save location for every image.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#evernote-web-clipper"&gt;
  &lt;/a&gt;
  Evernote Web Clipper
&lt;/h1&gt;

&lt;p&gt;Save all the content you discover interesting round the web in your account.&lt;/p&gt;

&lt;p&gt;From interests to research, save anything you see online—including text, links and images—into your Evernote account with one click. With one click, clip part or all of any webpage, including text, images, and links. Collect everything that inspires you online. Have it forever, albeit the first goes away.&lt;/p&gt;

&lt;p&gt;RescueTime for Google Chrome™&lt;/p&gt;

&lt;p&gt;RescueTime may be a personal-analytics service that helps you understand how you spend some time .&lt;/p&gt;

&lt;p&gt;RescueTime may be a personal-analytics service that helps you understand how you spend time on your computer, smartphone and tablet. there's no manual data-entry required. The web-application works hand-in-hand with the installable client available for OS X, Windows, Linux, Android devices, and ChromeOS.&lt;/p&gt;

&lt;p&gt;Pinterest for Google Chrome&lt;/p&gt;

&lt;p&gt;Discover, collect, and share inspiration&lt;/p&gt;

&lt;p&gt;Pinterest may be a tool to seek out your inspiration and share it with others. Use it to gather belongings you love, organize and plan important projects, and more.&lt;/p&gt;

&lt;p&gt;The official Pinterest extension for Google Chrome adds a button to your browser that allows you to pin from any website, quickly and simply&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cmsinstallation.blogspot.com/2021/04/10-best-google-chrome-extensions-for.html"&gt;Get Some From HERE&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>php</category>
      <category>programming</category>
      <category>devops</category>
    </item>
    <item>
      <title>What are your favourite learning resources?</title>
      <author>Suraj Vishwakarma</author>
      <pubDate>Sat, 24 Apr 2021 06:24:26 +0000</pubDate>
      <link>https://dev.to/basecampxd/what-are-your-favourite-learning-resources-3mgk</link>
      <guid>https://dev.to/basecampxd/what-are-your-favourite-learning-resources-3mgk</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;Every day we come across a lot of new &amp;amp; amazing things, some technical and some not. And if we find something which matches our vibe then we dive deep into it. Now here the real problem starts, if something is very popular then definitely there are a lot of resources out there to learn it but out of all those resources, which ones worth your precious time?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--11xy3zUb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2rtdj2p9yhu7gv3ujmok.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--11xy3zUb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2rtdj2p9yhu7gv3ujmok.gif" alt="2Confused"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So we created this blog post to help you share all your favourite learning resources. It could be anything, a platform, some software, an app, a website or any of your favourite creators out there.&lt;/p&gt;

&lt;p&gt;Let's get started.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-way"&gt;
  &lt;/a&gt;
  My Way
&lt;/h2&gt;

&lt;p&gt;This is the specific sequence, I usually like to follow to learn new stuff.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;I read blogs on the topic - An introduction, its uses, problems it overcomes, pros &amp;amp; cons. I usually do a google search to find these blogs 📝.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If the topic seems interesting, then I have a look on &lt;a href="https://www.youtube.com/channel/UC8butISFwT-Wl7EV0hUK0BQ"&gt;freeCodeCamp&lt;/a&gt;'s YouTube Channel to see if there's a course available on the topic I am interested in 👨‍💻.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If freeCodeCamp doesn't have a course on it or it seems to be outdated then I look for another good course on YouTube▶️.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.udemy.com/"&gt;Udemy&lt;/a&gt; is also a great place to find some really cool courses🏫.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;That's pretty much how I like to find learning resources for myself 📚.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#discussion"&gt;
  &lt;/a&gt;
  Discussion
&lt;/h1&gt;

&lt;p&gt;Let's start the discussion on:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;What are your favourite resources to learn something new?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How do you utilize those resources to make the most of them?&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>watercooler</category>
      <category>discuss</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>How to clone object except for one or some keys</title>
      <author>Heru Hartanto</author>
      <pubDate>Sat, 24 Apr 2021 06:06:55 +0000</pubDate>
      <link>https://dev.to/elukuro/how-to-clone-object-except-for-one-or-some-keys-623</link>
      <guid>https://dev.to/elukuro/how-to-clone-object-except-for-one-or-some-keys-623</guid>
      <description>&lt;p&gt;Let say you have an object that you want to use it as payload to make a request&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;username&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mark&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hash&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;8fafasdf8afadsf&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;redirectUrl&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;but you want to exclude &lt;code&gt;redirectUrl&lt;/code&gt; from your object before make request, and you don't want to delete this key, hmmm it is easy doesn't it, just destructuring the object and rearrange it to a new variable&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;Hash&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newPayload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;Hash&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;but wait, what if your object is actually updated and now look like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;username&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mark&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hash&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;8fafasdf8afadsf&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;redirectUrl&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;firstname&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mark&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lastname&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;brown&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;birthdate&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;01/12/2000&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;gender&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;MALE&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;address&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;planet earth&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;seems like destructuring and rearrange is kind of hardwork to do.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#put-rest-to-the-last-technique-to-the-rescue"&gt;
  &lt;/a&gt;
  "Put rest to the last" technique to the rescue
&lt;/h4&gt;

&lt;p&gt;simply put keys that you don't want to use and put the rest of it in the last&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;username&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mark&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hash&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;8fafasdf8afadsf&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;redirectUrl&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;firstname&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mark&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lastname&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;brown&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;birthdate&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;01/12/2000&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;gender&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;MALE&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;address&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;planet earth&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;redirectUrl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;newPayload&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt;
&lt;span class="nx"&gt;newPayload&lt;/span&gt;
&lt;span class="cm"&gt;/*
    {
        'username': 'Mark',
        'Hash' :'8fafasdf8afadsf',
        'firstname':'mark',
        'lastname':'brown',
        'birthdate':'01/12/2000',
        'gender':'MALE',
        'address':'planet earth'
    }
*/&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want to add another key to exclude just simply put keys name after &lt;code&gt;redirectUrl&lt;/code&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Laravel One to Many Eloquent Relationship Tutorial</title>
      <author>Dharmik Tank</author>
      <pubDate>Sat, 24 Apr 2021 06:03:58 +0000</pubDate>
      <link>https://dev.to/dharmik_tank/laravel-one-to-many-eloquent-relationship-tutorial-4i0j</link>
      <guid>https://dev.to/dharmik_tank/laravel-one-to-many-eloquent-relationship-tutorial-4i0j</guid>
      <description>&lt;p&gt;In this tutorial, I Will explain you how to create laravel one to Many eloquent relationship. We will create one to many relationship in laravel. We will learn how we can create migration with foreign key schema, retrieve records, insert new records, update records etc. I will show you laravel hasMany relationship example.&lt;br&gt;
more..&lt;br&gt;
&lt;a href="https://itwebtuts.blogspot.com/2021/04/laravel-one-to-many-eloquent.html"&gt;https://itwebtuts.blogspot.com/2021/04/laravel-one-to-many-eloquent.html&lt;/a&gt;&lt;/p&gt;

</description>
      <category>laravel</category>
      <category>programming</category>
      <category>tutorial</category>
      <category>php</category>
    </item>
  </channel>
</rss>
