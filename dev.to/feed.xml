<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Webpack Academy #3: HTML </title>
      <author>CodeOzz</author>
      <pubDate>Wed, 18 Aug 2021 21:22:41 +0000</pubDate>
      <link>https://dev.to/codeozz/webpack-academy-3-html-475l</link>
      <guid>https://dev.to/codeozz/webpack-academy-3-html-475l</guid>
      <description>&lt;p&gt;So now we have some basics in &lt;strong&gt;webpack&lt;/strong&gt; knowledge!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-lazy-issue"&gt;
  &lt;/a&gt;
  A lazy issue
&lt;/h3&gt;

&lt;p&gt;If you check the HTML file and the webpack config you should see something wrong, no?&lt;/p&gt;

&lt;p&gt;Whenever we need to change the name of the output, for example from &lt;code&gt;bundle.js&lt;/code&gt; to &lt;code&gt;output.js&lt;/code&gt;, we need to change it in our HTML file. Same issue if we want to add another output file like CSS file before!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-fix-this-issue"&gt;
  &lt;/a&gt;
  How to fix this issue
&lt;/h3&gt;

&lt;p&gt;A plugin will be used to &lt;strong&gt;save us&lt;/strong&gt; &lt;code&gt;HtmlWebpackPlugin&lt;/code&gt;! &lt;/p&gt;

&lt;p&gt;It will inject our output file directly in our HTML ! It will be very helpful when we will use a &lt;code&gt;hash&lt;/code&gt; name (waiting for the next webpack academy to check this 😇) ! &lt;/p&gt;

&lt;p&gt;So we can remove the import in our HTML file&lt;/p&gt;

&lt;p&gt;From this 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"dist/styles.css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"toto"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;My First Heading&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;My first paragraph.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"dist/bundle.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To this 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"toto"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;My First Heading&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;My first paragraph.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can put the HTML in our &lt;code&gt;/src&lt;/code&gt; since it will be used in compilation.&lt;/p&gt;

&lt;p&gt;Let's take a look at the config plugin!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;HtmlWebpackPlugin&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
   &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./src/index.html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="na"&gt;inject&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;body&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="na"&gt;minify&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;removeComments&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;collapseWhitespace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
   &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We put the path to our &lt;strong&gt;HTML file&lt;/strong&gt;, the &lt;code&gt;inject&lt;/code&gt; options will indicate to plugins where to put &lt;code&gt;script output file&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;If we don't use this option, the &lt;code&gt;bundle&lt;/code&gt; file we are put in &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;, and it can be problematic since the html body will be load after loading the script file! It can lead to some issue (for example, the loading of the page when users come into our application)&lt;/p&gt;

&lt;p&gt;We use minify property to remove comments, we can also remove whitespace!&lt;/p&gt;

&lt;p&gt;✅ And finally we got this as &lt;strong&gt;output&lt;/strong&gt; 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"style.css"&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"toto"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;My First Heading&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;My first paragraph.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;defer=&lt;/span&gt;&lt;span class="s"&gt;"defer"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"bundle.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#other-options"&gt;
  &lt;/a&gt;
  Other options!
&lt;/h3&gt;

&lt;p&gt;We will check fastly some interesting options about the plugin!&lt;/p&gt;

&lt;p&gt;You can use &lt;code&gt;metadata&lt;/code&gt; from webpack config and use it in &lt;code&gt;HTML&lt;/code&gt;, for example, you can use &lt;code&gt;title&lt;/code&gt; for page title, use CDN option to load CDN (we will check this in the next academy &lt;br&gt;
!).&lt;/p&gt;

&lt;p&gt;Use &lt;code&gt;title&lt;/code&gt; metadata 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;HtmlWebpackPlugin&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
   &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Webpack academy title&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./src/index.html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="na"&gt;inject&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;body&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="na"&gt;minify&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;removeComments&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;collapseWhitespace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
   &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And get it in our &lt;strong&gt;HTML&lt;/strong&gt; 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;%=&lt;/span&gt; &lt;span class="na"&gt;htmlWebpackPlugin.options.title&lt;/span&gt; &lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt; Webpack academy title &lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Tadam! ✅&lt;/p&gt;

&lt;p&gt;You can see the power of this plugin! Use metadata in our webpack config is more &lt;strong&gt;efficient&lt;/strong&gt; than putting data in HTML, since the &lt;code&gt;webpack config&lt;/code&gt; have the current context, HTML should only be a template, not getting any context!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Webpack HTML template plugin is very powerful!&lt;/p&gt;

&lt;p&gt;It can carry all injections of &lt;strong&gt;output&lt;/strong&gt; without handling the name of any output file!&lt;/p&gt;

&lt;p&gt;We can also inject some &lt;code&gt;metadata&lt;/code&gt;! Like &lt;strong&gt;title page name&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can check the code used in this article 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/Code-Oz/webpack-academy/tree/ca917a089029d5fe509d3eb85b832f745443e4f0"&gt;https://github.com/Code-Oz/webpack-academy/tree/ca917a089029d5fe509d3eb85b832f745443e4f0&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to have a nice article to read about web dev, you can subscribe to my FREE newsletter at this url -&amp;gt; &lt;a href="https://codeoz.substack.com/welcome"&gt;https://codeoz.substack.com/welcome&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And you can follow me on :&lt;/p&gt;

&lt;p&gt;Twitter : &lt;a href="https://twitter.com/code__oz"&gt;https://twitter.com/code__oz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Github: &lt;a href="https://github.com/Code-Oz"&gt;https://github.com/Code-Oz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And if you want to buy me a coffee :D -&amp;gt; &lt;a href="https://www.buymeacoffee.com/CodeoZ"&gt;https://www.buymeacoffee.com/CodeoZ&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webpack</category>
      <category>javascript</category>
      <category>css</category>
      <category>webdev</category>
    </item>
    <item>
      <title>TotalCross: A Powerful Cross-Platform Development Technology</title>
      <author>Oderlan Freire</author>
      <pubDate>Wed, 18 Aug 2021 21:08:22 +0000</pubDate>
      <link>https://dev.to/oderlanfreire/totalcross-a-powerful-cross-platform-development-technology-1nbd</link>
      <guid>https://dev.to/oderlanfreire/totalcross-a-powerful-cross-platform-development-technology-1nbd</guid>
      <description>&lt;p&gt;I decided to make this article based on my first few contacts with &lt;a href="https://totalcross.com"&gt;TotalCross&lt;/a&gt; technology. It was something totally new and exciting for me, as I believe it is for all developers, to be able to manipulate a new, robust and powerful technology. In this article I will talk about what &lt;a href="https://totalcross.com"&gt;TotalCross&lt;/a&gt; is, how it works and about &lt;a href="https://totalcross.com"&gt;TotalCross&lt;/a&gt; in VS Code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-totalcross"&gt;
  &lt;/a&gt;
  What is TotalCross?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://totalcross.com"&gt;TotalCross&lt;/a&gt; is a Java based cross-platform SDK technology, aiming to make life easier for the developer or even the common user.It has a very low footprint, taking up a small amount of space on your device, less than 5MB in fact. Being cross-platform, the developer only needs to worry about learning the basics of Java and the &lt;a href="https://totalcross.com"&gt;TotalCross&lt;/a&gt; library to be able to run the program on embedded systems, Windows, Linux, Mac, IOS and Android. It has the same performance with all systems, and doesn't risk changes to the program or how it will behave regardless of the platform.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-it%C2%A0works"&gt;
  &lt;/a&gt;
  How it works?
&lt;/h2&gt;

&lt;p&gt;The developer uses the Java language to develop the program code and compile it to generate the Java bytecode. TCVM converts this Java bytecode to TC bytecode, therefore giving a performance boost that is characteristic of &lt;a href="https://totalcross.com"&gt;TotalCross&lt;/a&gt;, thus packaging and distributing it to the desired platform.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#totalcross-on%C2%A0vscode"&gt;
  &lt;/a&gt;
  TotalCross on VSCode
&lt;/h2&gt;

&lt;p&gt;Starting to developing TotalCross on VSCode is quite simple, just install the &lt;a href="https://marketplace.visualstudio.com/items?itemName=totalcross.vscode-totalcross"&gt;TotalCross plugin&lt;/a&gt; from VSCode's own marketplace. It is important to know that for the plugin to run well, it is necessary to have &lt;a href="https://jdk.java.net/11/"&gt;JDK11&lt;/a&gt; and &lt;a href="https://maven.apache.org/"&gt;Maven&lt;/a&gt; installed on your machine.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-a%C2%A0project"&gt;
  &lt;/a&gt;
  Creating a project:
&lt;/h2&gt;

&lt;p&gt;After installing &lt;a href="https://jdk.java.net/11/"&gt;JDK11&lt;/a&gt;, &lt;a href="https://maven.apache.org/"&gt;Maven&lt;/a&gt; and the &lt;a href="https://marketplace.visualstudio.com/items?itemName=totalcross.vscode-totalcross"&gt;plugin&lt;/a&gt;, it's time to start the first project.&lt;br&gt;
Open your VSCode, when the welcome screen appears, press "Ctrl + Shift + P" to open the command palette, type TotalCross and 4 options will appear to you, click Create New Project.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iJTUwDdH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xb2fh2xxpmgfl578one5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iJTUwDdH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xb2fh2xxpmgfl578one5.png" alt="Create Project"&gt;&lt;/a&gt;&lt;br&gt;
When the file explorer opens, select or create the folder where you want to store the project. You can use a folder in any location, however, I would recommend creating it in the "Documents" directory for better organization.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XTt5tVZI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tbgik6cp38o3gzfw5awu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XTt5tVZI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tbgik6cp38o3gzfw5awu.png" alt="Folder Selection"&gt;&lt;/a&gt;&lt;br&gt;
When you select the folder, the VScode will ask you to enter the GroupId, which is basically the company or user ID. The following format should be used, ".com.company_name/user". For example com.totalcross.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xkSLa0KT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8kda2ukslevmhcitbb45.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xkSLa0KT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8kda2ukslevmhcitbb45.png" alt="Project ID"&gt;&lt;/a&gt;&lt;br&gt;
Right after that, it will ask the user to give the program a name:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yr45z1Su--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n5lr2sbt04pba3fzja90.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yr45z1Su--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n5lr2sbt04pba3fzja90.png" alt="Project Name"&gt;&lt;/a&gt;&lt;br&gt;
The next step is to choose the version of the TotalCross SDK, I recommend choosing the most recent one.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5Qa6bHbi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wmstt8qu6hh1bgxp22sh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5Qa6bHbi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wmstt8qu6hh1bgxp22sh.png" alt="versao TC"&gt;&lt;/a&gt;&lt;br&gt;
Select which platform you want to develop the code for, then press enter or click OK:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--esYzCp82--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nmlsyibmodpld4f9676e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--esYzCp82--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nmlsyibmodpld4f9676e.png" alt="Devices"&gt;&lt;/a&gt;&lt;br&gt;
Next, VSCode will automatically download a HelloWorld template for you to modify and start developing your program.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S2VO-rSc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/773iygbc1jss1cxmi0g1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S2VO-rSc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/773iygbc1jss1cxmi0g1.png" alt="Hello World  Example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-run-the%C2%A0code"&gt;
  &lt;/a&gt;
  How to run the code:
&lt;/h2&gt;

&lt;p&gt;Right-click on the file named RunApplication.java and click on the option Run Java.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P4aFGZrx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6eb4ax8y1vv4u8mo9vge.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P4aFGZrx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6eb4ax8y1vv4u8mo9vge.png" alt="Run"&gt;&lt;/a&gt;&lt;br&gt;
VSCode will import, compile and run the Java project, creating the application window:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZnUK4wPs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/67jheq6hb8pkza5rbzzy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZnUK4wPs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/67jheq6hb8pkza5rbzzy.png" alt="App"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion:
&lt;/h2&gt;

&lt;p&gt;I hope you enjoyed this article about TotalCross. After my first contact with this technology, I can say that I recommend it. If you are looking for a new, powerful, accessible and quality technology to develop your program, whether it is cross-platform or not, I strongly recommend &lt;a href="https://totalcross.com"&gt;TotalCross&lt;/a&gt;. This is due to the facilities that the technology offers with its library, easy installation, small footprint, agility, performance increase due to TCVM, and the fact that it has a large community that is on the rise. The &lt;a href="https://totalcross.com"&gt;TotalCross&lt;/a&gt; community is always open to help you learn, exchanging experiences and answering any questions.&lt;/p&gt;

&lt;p&gt;You can join the &lt;a href="https://totalcross.com"&gt;TotalCross&lt;/a&gt; community through the official website, &lt;a href="https://github.com/TotalCross/totalcross"&gt;GitHub&lt;/a&gt; and &lt;a href="https://discord.gg/dwRhV4yY"&gt;Discord&lt;/a&gt;. It will be a great experience and you are sure to learn a lot of great things! Look forward to seeing you there!&lt;/p&gt;

&lt;p&gt;I am Oderlan Freire from Ocara, Ceará. I started working at TotalCross as an intern in 2021, student of Information Systems at the Federal University of Ceará, and I participated in the SharinAgro project, one of the top projects selected for the Microsoft contest IA for Earth.&lt;/p&gt;

</description>
      <category>totalcross</category>
      <category>install</category>
      <category>tutorial</category>
      <category>firstpost</category>
    </item>
    <item>
      <title>Calculations with booleans</title>
      <author>Cornelia</author>
      <pubDate>Wed, 18 Aug 2021 21:00:15 +0000</pubDate>
      <link>https://dev.to/soliloquizin/calculations-with-booleans-1i1p</link>
      <guid>https://dev.to/soliloquizin/calculations-with-booleans-1i1p</guid>
      <description>&lt;p&gt;Sometimes I like to take a look at the quirkiness of the language I code in and compare it to other languages. This time, I thought I'd share my findings with you, in case you also find them entertaining and interesting. On this occasion I looked at a quirk featured in &lt;a href="https://github.com/denysdovhan/wtfjs#math-with-true-and-false"&gt;WTFJS&lt;/a&gt;, namely doing Math with booleans. Let's dive in.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#true-true-"&gt;
  &lt;/a&gt;
  true + true = ?
&lt;/h2&gt;

&lt;p&gt;In Javascript, we use the + operator to concatenate strings as well as to add up numbers, but what happens when we through some booleans into the mix? Let's try!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hi&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="c1"&gt;// output: "Hitrue"&lt;/span&gt;
&lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hi&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="c1"&gt;// output: "trueHi"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Okay, so far, so good, Javascript notices that we use a string with a + operator and treats the boolean like a String and concatenates the two. Now, let's take a look at the numbers.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="c1"&gt;// output: 6&lt;/span&gt;
&lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="c1"&gt;// output: 6&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Wait, what? Let's take a closer look at what's happening here.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-numberfunction"&gt;
  &lt;/a&gt;
  the Number-function
&lt;/h3&gt;

&lt;p&gt;The boolean value is passed to the &lt;code&gt;Number&lt;/code&gt;-function, which converts it to a Number; &lt;code&gt;true&lt;/code&gt; is converted to 1 and &lt;code&gt;false&lt;/code&gt; to 0.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#note"&gt;
  &lt;/a&gt;
  Note
&lt;/h4&gt;

&lt;p&gt;The Javascript Number type has limits to what it can store and also limits on how high the numbers stored in can be. All Numbers are stored as floating-point values.&lt;/p&gt;




&lt;p&gt;If it fails to convert the value into a number, it will return NaN. It can convert true, false, null, as well as a decimal and hexadecimal number (in strings).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;        &lt;span class="c1"&gt;// output: 1&lt;/span&gt;
&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;       &lt;span class="c1"&gt;// output: 0&lt;/span&gt;
&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;        &lt;span class="c1"&gt;// output: 0&lt;/span&gt;
&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;   &lt;span class="c1"&gt;// output: NaN&lt;/span&gt;
&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0x7E5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;       &lt;span class="c1"&gt;// output: 2021&lt;/span&gt;
&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0x7E5&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;     &lt;span class="c1"&gt;// output: 2021&lt;/span&gt;
&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;12.5&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;      &lt;span class="c1"&gt;// output: 12.5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#calculation-with-booleans-only"&gt;
  &lt;/a&gt;
  calculation with booleans only
&lt;/h3&gt;

&lt;p&gt;When we only add boolean operands, Javascript will still try and convert them into Numbers, rather than interpreting both as being strings.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;     &lt;span class="c1"&gt;// output: 2&lt;/span&gt;
&lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="c1"&gt;// output: 1&lt;/span&gt;
&lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   &lt;span class="c1"&gt;// output: 0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#beyond-the-addition"&gt;
  &lt;/a&gt;
  Beyond the addition
&lt;/h2&gt;

&lt;p&gt;The same effect, of course, happens with subtractions, multiplications and divisions, as well as when using unary operators (positive and negative - although NaN will not be signed).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;       &lt;span class="c1"&gt;// output: 1&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;      &lt;span class="c1"&gt;// output: 0&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;       &lt;span class="c1"&gt;// output: 0&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="kc"&gt;undefined&lt;/span&gt;  &lt;span class="c1"&gt;// output: NaN&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mh"&gt;0x75E&lt;/span&gt;      &lt;span class="c1"&gt;// output: 2021&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0x75E&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;    &lt;span class="c1"&gt;// output: 2021&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;12.5&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;     &lt;span class="c1"&gt;// output: 12.5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#is-it-just-js"&gt;
  &lt;/a&gt;
  Is it just JS
&lt;/h2&gt;

&lt;p&gt;You might know all of this already, so let's compare it to a few other languages.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PHP&lt;/strong&gt; and &lt;strong&gt;Python&lt;/strong&gt; will also allow calculations with booleans. They both also convert &lt;code&gt;true&lt;/code&gt; to 1 and &lt;code&gt;false&lt;/code&gt; to 0.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Java&lt;/strong&gt; and &lt;strong&gt;Rust&lt;/strong&gt; on the other hand, will both refuse calculations with boolean values and throw an error during compilation.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;error: bad operand types for binary operator '+'&lt;br&gt;
&lt;em&gt;Java&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;error [E0277]: cannot add &lt;code&gt;bool&lt;/code&gt; to &lt;code&gt;{integer}&lt;/code&gt;&lt;br&gt;
&lt;em&gt;Rust&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;I hope you had fun reading about calculations with booleans. Thanks for reading!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>quirks</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Livewire – Revolução no desenvolvimento front-end Laravel?</title>
      <author>agatha-vieira</author>
      <pubDate>Wed, 18 Aug 2021 20:46:51 +0000</pubDate>
      <link>https://dev.to/fireworkweb/livewire-revolucao-no-desenvolvimento-front-end-laravel-2jf8</link>
      <guid>https://dev.to/fireworkweb/livewire-revolucao-no-desenvolvimento-front-end-laravel-2jf8</guid>
      <description>&lt;p&gt;Quem nunca teve problemas na hora de fazer o desenvolvimento do seu front-end? Quem nunca queria usar Vue, mas por não saber usar muito bem, sofreu para conseguir um resultado igual ele? Pois bem, a recém-nascida lib do Laravel chamada Livewire promete resolver esses problemas! Entenda melhor a ferramenta neste post 😉&lt;/p&gt;

&lt;p&gt;AFINAL, O QUE É LIVEWIRE?&lt;br&gt;
O Livewire é uma biblioteca que foi adicionada em 2019 pelo famosíssimo framework Laravel. &lt;/p&gt;

&lt;p&gt;A proposta dela é criar interfaces dinâmicas (similares ao Vue) com os códigos do blade e do próprio Laravel. Sim! Exatamente! Você, programador Back-end, poderá criar um front-end bem desenvolvido com o Livewire!&lt;/p&gt;

&lt;p&gt;Indo direto ao ponto, o Livewire funciona de um jeito beeem peculiar. Qualquer interação que acontecer com ele, se faz uma requisição AJAX e o HTML é renderizado do lado do servidor e depois retornado ao cliente. Esse fluxo permite que ele seja reativo, porém, um pouco mais lento. Ele tem algo parecido com um DOM virtual, onde ele compara as alterações com o DOM renderizado e então aplica as modificações.&lt;/p&gt;

&lt;p&gt;VANTAGENS E DESVANTAGENS DO LIVEWIRE&lt;br&gt;
Os principais pontos positivos do Livewire são:&lt;/p&gt;

&lt;p&gt;A facilidade de trabalho, pois é simples de entender para quem já usa o Laravel. &lt;br&gt;
O nível profissional dele permite uma avalanche de possibilidades com simples comandos, todos com um resultado bem próximo de um Vue. &lt;/p&gt;

&lt;p&gt;Porém, nem tudo são flores. Apesar de parecer um paraíso, o Livewire possui pontos negativos também. O primeiro deles, é que, por ser uma ferramenta muito recente, o suporte e dúvidas tiradas são poucas, até nos fóruns mais conhecidos dos desenvolvedores, como o Stack Overflow. &lt;/p&gt;

&lt;p&gt;Outro ponto, é que, por ter a proposta de não usar uma linguagem diferente, no caso, o JavaScript. Porém, esse problema pode ser resolvido usando a micro framework AlpineJS como adicional, menor e sem ser tão pesada quanto um Angular, por exemplo.&lt;/p&gt;

&lt;p&gt;Durante o trabalho com Livewire, podemos usar comandos do Laravel para criar os componentes, como “php artisan make:livewire Teste”. A lib trabalha com dois arquivos separados: a view e o arquivo que comanda a view. No caso, um deles tem a extensão .blade.php, o qual estamos acostumados a criar os estilos da tela e tudo que aparecerá para o cliente. No outro, o qual possui o mesmo nome da blade, é o controlador, onde terão as funções chamadas por métodos e eventos da blade e onde são declaradas as variáveis presentes na tela.&lt;/p&gt;

&lt;p&gt;Exemplificando, criando um componente para ser um contador e mostrar em tempo real o número sendo adicionado na tela em cada clique do botão, usaremos o comando “php artisan make:livewire contador”. Dois arquivos são criados, o “Contador.php” e o “contador.blade.php”. Este último, temos o botão e a variável do número que será adicionado. O primeiro, por sua vez, terá toda a lógica por trás da funcionalidade, como a função de incrementar número e a variável número.&lt;/p&gt;

&lt;p&gt;Em resumo, a biblioteca Livewire é uma ferramenta muito interessante e essencial para quem não se adaptou ou não conhece o Vue.  Entretanto, como trata-se de uma lib muito recente (lançada em julho de 2019), seu suporte é limitado e ela é pouco abordada em fóruns da internet. É perfeito para aqueles que já estão acostumados com Laravel e querem criar interfaces de forma prática. Esclarecidos esses pontos, é necessário uma análise dos prós e contras para optar pelo uso desse recurso, que é muito promissor e acrescenta demais ao programador front-end.&lt;/p&gt;




&lt;p&gt;Aprenda mais nos nossos canais digitais!&lt;br&gt;
Site: &lt;a href="https://fireworkweb.com.br"&gt;https://fireworkweb.com.br&lt;/a&gt; &lt;br&gt;
Youtube:&lt;a href="https://bit.ly/2GwqNU1"&gt;https://bit.ly/2GwqNU1&lt;/a&gt; &lt;br&gt;
Insta: @fireworkweb&lt;br&gt;
Face: @fireworkweb&lt;br&gt;
Linkedin: Firework Web &amp;amp; Mobile&lt;/p&gt;

</description>
      <category>basecs</category>
      <category>laravel</category>
      <category>braziliandevs</category>
    </item>
    <item>
      <title>react-color-palette: &lt;ColorPicker /&gt; component for your React project.</title>
      <author>Wondermarin</author>
      <pubDate>Wed, 18 Aug 2021 20:29:56 +0000</pubDate>
      <link>https://dev.to/wondermarin/react-color-palette-colorpicker-component-for-your-react-project-29ng</link>
      <guid>https://dev.to/wondermarin/react-color-palette-colorpicker-component-for-your-react-project-29ng</guid>
      <description>&lt;h2&gt;
  &lt;a href="#hello-everyone"&gt;
  &lt;/a&gt;
  Hello everyone!
&lt;/h2&gt;

&lt;p&gt;I would like to introduce you to my &amp;lt;ColorPicker /&amp;gt; component.&lt;br&gt;
I will be glad of any feedback, have a nice day!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/Wondermarin/react-color-palette"&gt;GitHub Repo&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;&lt;a href="https://rcp.wondermarin.space"&gt;Online Demo&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;🚀 Lightweight&lt;/li&gt;
&lt;li&gt;💨 No dependencies&lt;/li&gt;
&lt;li&gt;🛡️ Strict&lt;/li&gt;
&lt;/ul&gt;



&lt;h3&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#npm"&gt;
  &lt;/a&gt;
  npm
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;react-color-palette
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#yarn"&gt;
  &lt;/a&gt;
  yarn
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add react-color-palette
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ColorPicker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useColor&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-color-palette&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-color-palette/lib/css/styles.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setColor&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hex&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#121212&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ColorPicker&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;456&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;228&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;setColor&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;hideHSV&lt;/span&gt; &lt;span class="nx"&gt;dark&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>webdev</category>
      <category>react</category>
      <category>typescript</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Interview Prep Questions</title>
      <author>Molly Struve (she/her)</author>
      <pubDate>Wed, 18 Aug 2021 20:12:12 +0000</pubDate>
      <link>https://dev.to/molly/interview-prep-questions-5dha</link>
      <guid>https://dev.to/molly/interview-prep-questions-5dha</guid>
      <description>&lt;p&gt;&lt;em&gt;Followup post for &lt;a href="https://dev.to/molly/setting-yourself-up-for-interview-success-15b7"&gt;Setting Yourself Up for Interview Success&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Below is a list of questions that I found extremely helpful when preparing for my interviews. Most of them came directly from the interviews I had and some were general ones I found online. &lt;/p&gt;

&lt;p&gt;When I used these to prep I put them on flash cards. I wrote the question on one side and my answer (or answers) on the other. Then I would go through them at the beginning of each week I was interviewing to prepare for my interviews. &lt;/p&gt;

&lt;p&gt;For reference, I was interviewing for Senior, Staff, and Engineering Manager positions with a focus on SRE (Site Reliability Engineering) and Reliability roles. I broke up the questions into categories to make them easier to sort through. They are in no particular order. I only numbered them to make them easy to reference. Using my answers to these questions I was able to answer every question that was thrown at me during my interviews. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#general-questions"&gt;
  &lt;/a&gt;
  General Questions
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;What do you want out of your next role?&lt;/li&gt;
&lt;li&gt;Tell me about a time you disagreed with someone. How did you handle it? What was the outcome?

&lt;ul&gt;
&lt;li&gt;The follow up questions might not get asked but get in the habit of answering those even when giving the initial answer. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What are your greatest strengths?&lt;/li&gt;
&lt;li&gt;What are your greatest weaknesses?

&lt;ul&gt;
&lt;li&gt;You likely will not directly get asked the above questions, but if you are aware of what your strengths are then you can work them into your answers for other questions. If you know what your weaknesses are you can also mention those and how you are working to improve them. The key is to not have any blindspots.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What is a time when something took a lot out of you and what did you learn? &lt;/li&gt;
&lt;li&gt;List the major achievements you are most proud of at your current job. &lt;/li&gt;
&lt;li&gt;Tell me about someone you look up to and why?&lt;/li&gt;
&lt;li&gt;Tell me about a time you made a mistake.&lt;/li&gt;
&lt;li&gt;What was a piece of feedback that was hard to hear but helped you improve?&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#srstaff-level-ic-questions"&gt;
  &lt;/a&gt;
  Sr./Staff Level IC Questions
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Tell me about a complex system you designed.&lt;/li&gt;
&lt;li&gt;Tell me about a large project you had to get buy in for. What was it and how did you get the buy in you needed?&lt;/li&gt;
&lt;li&gt;Tell me about a time you failed and what you learned from it.

&lt;ul&gt;
&lt;li&gt;Even if they don't ask for what you learned you always include that. It shows that you are humble and have the ability to grow. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What do you value highly when working with software? (technical values)

&lt;ul&gt;
&lt;li&gt;Example answer: "I highly value simplicity bc I have found it leads to more reliable software. I also value automation bc humans doing things manually usually increases the chances of error." Expand more on your answer, but that gives you an idea of the kinds of answers you would give. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Tell me about a time you had to make a decision that involved short-term sacrifices for long-term gains.&lt;/li&gt;
&lt;li&gt;Tell me about a time when you solved a complex problem and how you went about it.

&lt;ul&gt;
&lt;li&gt;Note this is different than #1 which asks about designing a complex system. I choose a &lt;a href="https://dev.to/molly/10-tips-for-debugging-in-production-ko1"&gt;story about a gnarly bug&lt;/a&gt; I had to fix. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What is the most challenging part of being in an engineering leader for you?&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#srereliability-ic-questions"&gt;
  &lt;/a&gt;
  SRE/Reliability IC Questions
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Tell me about an incident that you ran?&lt;/li&gt;
&lt;li&gt;How do you define observability? How have you improved observability on past systems you have worked with? &lt;/li&gt;
&lt;li&gt;What tools have you built that were able to aid developers and/or fellow SREs?&lt;/li&gt;
&lt;li&gt;Give me an example of a time you made something more efficient.&lt;/li&gt;
&lt;li&gt;Give me an example of a time you improved a process. (could be team process or technical process) 

&lt;ul&gt;
&lt;li&gt;I talked about improving an on-call rotation for these types of questions.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What does reliability mean to you? &lt;/li&gt;
&lt;li&gt;What is your preferred testing strategy?

&lt;ul&gt;
&lt;li&gt;Here you want to talk high level like unit vs end-to-end, smoke tests, canary deployments, etc. Give examples of what has worked well or not for you in the past. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Give me an example of a calculated risk that you took where speed was critical.&lt;/li&gt;
&lt;li&gt;What is your definition of SRE?&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#manager-questions"&gt;
  &lt;/a&gt;
  Manager Questions
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;What is your management style?&lt;/li&gt;
&lt;li&gt;Tell me about the person you are most proud of empowering and growing. &lt;/li&gt;
&lt;li&gt;Tell me about a time when you had to give someone hard feedback.&lt;/li&gt;
&lt;li&gt;How do you deal with competing priorities?

&lt;ul&gt;
&lt;li&gt;When you get "how do you..." questions, answering with your strategy is good, but having a quick story to follow it up as an example is even better. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How do you gain trust from your team?&lt;/li&gt;
&lt;li&gt;What do you look for when you are hiring?&lt;/li&gt;
&lt;li&gt;How do you determine if someone is technically competent for a job?&lt;/li&gt;
&lt;li&gt;How do you keep the jerks out?&lt;/li&gt;
&lt;li&gt;Have you ever had a large project killed?&lt;/li&gt;
&lt;li&gt;How do you broach the topic of technical debt when having to explain it to leadership and other stakeholders?&lt;/li&gt;
&lt;li&gt;What does the diversity of your current team look like?&lt;/li&gt;
&lt;li&gt;Tell me about a time you missed a deadline and how you handled it.&lt;/li&gt;
&lt;li&gt;When was a time you failed as a manager and how did you handle it and make it right?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Depending on your experience, you may not have an answer for all of the "Tell me about a time..." questions. That is OK! Be truthful about it and then explain how you would handle the situation if you found yourself faced with it. For example, I never have had a large project killed but I talked about how I would be objective and make sure my team fully understood why it had happened.&lt;/p&gt;

&lt;p&gt;If you have any other questions you would like to add to this list, feel free to drop them in the comments below 👇 &lt;/p&gt;

</description>
      <category>interviewing</category>
      <category>job</category>
      <category>career</category>
    </item>
    <item>
      <title>Setting Yourself Up for Interview Success </title>
      <author>Molly Struve (she/her)</author>
      <pubDate>Wed, 18 Aug 2021 20:11:53 +0000</pubDate>
      <link>https://dev.to/molly/setting-yourself-up-for-interview-success-15b7</link>
      <guid>https://dev.to/molly/setting-yourself-up-for-interview-success-15b7</guid>
      <description>&lt;p&gt;When it comes to interviewing, everyone has their own style and way they like to approach it. When I started looking for my next opportunity, I was not quite sure what to expect. I read a few blog posts to prep myself. These were incredibly helpful, but I found a few things even beyond their recommendations that helped me to succeed and that is what I want to share with you all. My approach may not be ideal for everyone but it worked very well for myself and using it I was able to land five job offers. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#interview-often"&gt;
  &lt;/a&gt;
  Interview Often
&lt;/h2&gt;

&lt;p&gt;Many folks will tell you that interviewing is a skill and you should make sure to get in some practice rounds before aiming towards a company you really want. I 100% found this to be the case. The first couple of phone screens I did I had to pause and think about the answers to the questions. As things went along, I was asked similar questions over and over and it got much easier. &lt;/p&gt;

&lt;p&gt;However, even with a couple of practice rounds, I still felt a bit stressed and anxious going into interviews. Then, as my interviewing frequency picked up, I noticed my anxiety nearly went away. When I had an interview scheduled almost every day my anxiety was almost non-existent because it felt like just one more meeting on my schedule. &lt;/p&gt;

&lt;p&gt;Once I had this realization I started to schedule interviews on a consistent cadence each week. This not only lowered my anxiety, but did wonders for my ability to solve the technical problems. Instead of getting nervous before a technical session, I would get focused. Interviewing on a consistent basis got me into a nice groove when it came to tackling technical interviews such as coding or systems design problems. &lt;/p&gt;

&lt;p&gt;I even went so far as to schedule a set of interviews with a company solely for the reason of getting me in the groove and prepped for one of the final companies I interviewed with. Not only did that extra company help prep me, but it turned out to be a fabulous interview and I got an offer that I seriously considered in the end.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#flash-cards"&gt;
  &lt;/a&gt;
  Flash Cards
&lt;/h2&gt;

&lt;p&gt;The first couple of roles I did hiring screens for determined I was not a great fit. One of the roles I actually thought I was a great fit for but realized I had not presented my skills as well as I could have during the phone screen.&lt;/p&gt;

&lt;p&gt;Immediately after those phone screens I decided it was time to get organized and take interviewing more seriously. I sat down and wrote out the questions they asked that, at the time, I didn't think I gave good answers to. Then I took time to come up with much better answers. I combed through my mind to find examples that would better highlight my skillset. In addition to writing down answers to the questions I was asked in the phone screens, I collected some more generic technical interview questions from various websites and wrote down answers for those as well. &lt;/p&gt;

&lt;p&gt;I initially put all of this into a Google doc. The Google doc was great for getting my thoughts written down, but I wanted something that I could use repeatedly to prep. To achieve this I went back to my college days and used the tried and true study method of flash cards! I made flash cards with the questions on one side and my answers on the other. Then, like in school, I would run through the flash cards at the beginning of each week to make sure I had a quick recall of all the stories and highlights of my career. &lt;/p&gt;

&lt;p&gt;Even though the interview questions didn't always exactly match those on my flash cards, the flash cards helped remind me about the key points throughout my career. Those key points and experiences were easily transferable to many types of questions. For folks that are interested, I wrote a second post listing out all of the questions I used to prepare. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/molly" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xMrAIHhS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--qARnw-JH--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/119473/4fe2a414-c5d4-4cfe-b9da-8b9da90fb5e6.jpg" alt="molly"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/molly/interview-prep-questions-5dha" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Interview Prep Questions&lt;/h2&gt;
      &lt;h3&gt;Molly Struve (she/her) ・ Aug 18 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#interviewing&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#job&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#professional-interview-prep"&gt;
  &lt;/a&gt;
  Professional Interview Prep
&lt;/h2&gt;

&lt;p&gt;Before starting this process I looked into companies and websites that I could use for interview prep. I felt pretty confident in my coding ability, but wanted to learn more about the systems design portion that many interviews have. To fill this void I signed up for &lt;a href="https://www.tryexponent.com/"&gt;Exponent&lt;/a&gt;. Exponent is a bit pricey, but it was completely worth it for me. One nice aspect is that they have some free content available so you can see if it is right for you and what you want to accomplish. I only ended up subscribing to it for two months. &lt;/p&gt;

&lt;p&gt;I found their guide to SWE interviewing to have a lot of great information in it. One part that was crucial in helping me was the systems design section. I had never done a systems design interview before so I had no clue about how to approach one.&lt;/p&gt;

&lt;p&gt;Exponent had many examples of folks answering system design questions which gave me an idea of what a good answer included. They also had lots of literature about how to break down the system design questions and what to cover when answering them. Once again, I ended up making flash cards around system design question elements and ran through those periodically to keep myself sharp on that front. &lt;/p&gt;

&lt;p&gt;For more details on how to I tackled my system design interviews stay tuned for a follow up blog post. 😎  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#take-notes"&gt;
  &lt;/a&gt;
  Take Notes
&lt;/h2&gt;

&lt;p&gt;During your interviews take notes! Especially if you are interviewing at multiple companies, it can be very hard to keep them all straight. I have Google docs for each company I interviewed with that have extensive notes from each process. &lt;/p&gt;

&lt;p&gt;These docs contain everything from the questions I asked, to the background of each interviewer, to any feelings I felt during the interview. These notes were invaluable at the end of the process when it came to decision time. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#give-yourself-30-min-before-each-interview"&gt;
  &lt;/a&gt;
  Give yourself 30 min before each interview
&lt;/h2&gt;

&lt;p&gt;Scheduling interviews around work can be challenging, but one thing I found is that scheduling in downtime right before is crucial to get yourself in the mental state to interview. My routine involved the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Gather up my notes already compiled for the company and write down questions I wanted to ask&lt;/li&gt;
&lt;li&gt;Research the interviewers if I had their names&lt;/li&gt;
&lt;li&gt;Turn off all notifications and close Slack&lt;/li&gt;
&lt;li&gt;Open any necessary tools (code editor, whiteboard tool, etc)&lt;/li&gt;
&lt;li&gt;Go to the bathroom and grab some water &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://blog.ted.com/10-examples-of-how-power-posing-can-work-to-boost-your-confidence/"&gt;Power pose&lt;/a&gt; for a min and then have a quick dance party to get rid of any last min nerves and pump myself up.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That last point is not for everyone, but for me, listening to some pump up music while dancing makes me feel really good about myself and gets me in a good headspace. I also listen to music before I compete with my horses to get in the zone which may be why it worked well in this scenario. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#enjoy-it"&gt;
  &lt;/a&gt;
  Enjoy it!
&lt;/h2&gt;

&lt;p&gt;Once I got into that interview groove I started to really enjoy them. I got to meet some incredible engineers and people while solving some fun and interesting problems. A lot of the code interviews I did felt like I was working with colleagues. Yes, I was responsible for coming up with the solution, but during the process I shared so many good laughs with interviewers as we commiserated over a typo or trying to put together a regex. &lt;/p&gt;

&lt;p&gt;Maybe I got incredibly lucky and the 30+ people I met from the 6 companies I considered were all just really nice. Or, maybe some of it had to do with the mindset I went into these interviews with. &lt;/p&gt;

&lt;p&gt;Once I had settled into interviewing, I approached each interview with a collaborative mindset. I was there to learn about the company as much as they wanted to learn about me. This made me much more relaxed and open during the interview and I think my interviewers ended up mirroring that feeling. If you go into an interview like you are heading into battle, then it likely will be a battle for both sides. &lt;/p&gt;

&lt;p&gt;Even though I had to say no to many companies, they are still places I would have loved to work. I would recommend them to others in a heartbeat because of how much I enjoyed their interview process. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#good-luck"&gt;
  &lt;/a&gt;
  Good Luck!
&lt;/h2&gt;

&lt;p&gt;Interviewing is not easy. It is a full on side hustle when you decide to take it on. But it is worth it in the end! Your perfect next opportunity is out there, now you just have to find it.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Anything else you all want to know about my interviewing process? Drop any additional questions you may have in the comments 👇&lt;/em&gt;&lt;/p&gt;

</description>
      <category>interviewing</category>
      <category>job</category>
      <category>career</category>
    </item>
    <item>
      <title>Day 6: 100 days of code</title>
      <author>Gaurav-Shekhawat</author>
      <pubDate>Wed, 18 Aug 2021 20:08:23 +0000</pubDate>
      <link>https://dev.to/gauravshekhawat/day-6-100-days-of-code-4fob</link>
      <guid>https://dev.to/gauravshekhawat/day-6-100-days-of-code-4fob</guid>
      <description>&lt;p&gt;There will be less content today as I am busy with academics.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dont-forget-to-use-the-raw-flexwrapwrap-endraw-"&gt;
  &lt;/a&gt;
  Don't forget to use the &lt;code&gt;flex-wrap:wrap&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;In my last some of the projects, I have to change almost the entire code in media queries so that my website look good on an mobile device. This can be avoided to a great extent by using:-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;flex-wrap: wrap;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, use it wisely whenever needed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bootstrap-basics"&gt;
  &lt;/a&gt;
  Bootstrap Basics
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Bootstrap is a css library, which consists of code written by someone-else, taking care of all the styles and responsive web design. To use it in our projects, go to &lt;a href="https://getbootstrap.com/"&gt;Bootstrap&lt;/a&gt; and copy the css link inside of your html file.
&lt;/li&gt;
&lt;li&gt;To use any-functionality of bootstrap, just link bootstrap with your html, and then just specify in the class of your html tag, what you want to do with that element, among some classes given in bootstrap website.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example, if you want to design a warning button:-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;button class = "btn btn-warning"&amp;gt;  Warning  &amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now practice and get your hands dirty ..&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bootstrap-column-model"&gt;
  &lt;/a&gt;
  Bootstrap column model
&lt;/h3&gt;

&lt;p&gt;This is a bootstrap way to make sure that our web-pages are mobile responsive. In this model, bootstrap divides its page into 12 distinct columns. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YhpBe_Ui--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/heo7r87e6dw0pqj802m2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YhpBe_Ui--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/heo7r87e6dw0pqj802m2.png" alt="Bootstrap column model in action"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Large screen:-&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hMzqjZXS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qb3ll9herhmmke7yk1h9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hMzqjZXS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qb3ll9herhmmke7yk1h9.png" alt="ON large scrren"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;as we shrink the size of the screen down.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XYcdnGmD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/efxefvi4fjtqbziahyae.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XYcdnGmD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/efxefvi4fjtqbziahyae.png" alt="On small screen"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Bootstrap also let us specify how many columns should an div take, depending on the size of the screen as small or large. Here is the example:-&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5sdyQfor--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xbc288dn811nezjt39s6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5sdyQfor--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xbc288dn811nezjt39s6.png" alt="IMage"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This behaves as 4 div in 1 row on a large screen, and 2 div's in each row on a small screen.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bzZDD2DP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lgmtf31aky2kedqthd0w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bzZDD2DP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lgmtf31aky2kedqthd0w.png" alt="large screen"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GTL1EdTW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o21v8rvsfkjl65w1479v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GTL1EdTW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o21v8rvsfkjl65w1479v.png" alt="small screen"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sass-inheritance"&gt;
  &lt;/a&gt;
  SASS inheritance
&lt;/h2&gt;

&lt;p&gt;Let's suppose we are designing 3 alert messages as below:-&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XGm6M1SS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m2hy2qn2vgm1jphwe0dl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XGm6M1SS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m2hy2qn2vgm1jphwe0dl.png" alt="alert pic"&gt;&lt;/a&gt;&lt;br&gt;
If we write it using nesting in sass, then in the output css, the code will be copyed in the css styling of all the alert, this will increase the size of our css to a large extent in long term. To solve this problem, we use inheritance. &lt;/p&gt;

&lt;p&gt;Hence, the better solution of the above problem will be :-&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wJ49nifm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9xtplroh1k051hsf4k8t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wJ49nifm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9xtplroh1k051hsf4k8t.png" alt="better code using inheritance"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>bootstrap</category>
    </item>
    <item>
      <title>Getting Started with Cypress</title>
      <author>Hajar | هاجر</author>
      <pubDate>Wed, 18 Aug 2021 20:07:44 +0000</pubDate>
      <link>https://dev.to/hajarnasr/getting-started-with-cypress-109b</link>
      <guid>https://dev.to/hajarnasr/getting-started-with-cypress-109b</guid>
      <description>&lt;p&gt;&lt;strong&gt;What's Cypress?&lt;/strong&gt;&lt;br&gt;
Cypress is a JavaScript-based front-end testing tool. It helps you test the journey that users take from once they visit your website till they leave. You can use Cypress to test what users will see when they visit the website for the first time. Or where they should be redirected to when they click some link or another. Or if cookies get saved when they signup or login. And so many other things. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;br&gt;
To run Cypress, you need to install it as a &lt;code&gt;dev&lt;/code&gt; dependency into your project and then run &lt;code&gt;yarn run cypress open&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;yarn&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="nx"&gt;cypress&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;dev&lt;/span&gt;
&lt;span class="nx"&gt;yarn&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt; &lt;span class="nx"&gt;cypress&lt;/span&gt; &lt;span class="nx"&gt;open&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;small&gt;&lt;strong&gt;Note&lt;/strong&gt;: You can also download it from &lt;a href="https://www.cypress.io/"&gt;Cypress.io&lt;/a&gt;, double click &lt;code&gt;Cypess.exe&lt;/code&gt; and then select your project.&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;Once you add Cypress to your project, &lt;code&gt;cypress&lt;/code&gt; folder and other sup-directories will be added to the root of your project.&lt;br&gt;
What we care about in these sub-directories is integration. You can delete all the files created under that directory and create a new file called first_test.spec.js. This is where we're going to add our first test.&lt;/p&gt;

&lt;p&gt;Let's write a test for a function that returns random numbers between 0-90.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// 1&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getRandomNum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// 2&lt;/span&gt;
&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;test getRandomNum&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// 3 &lt;/span&gt;
  &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;should be less than 100&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// 4&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;getRandomNum&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="nx"&gt;lessThan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;1- So, we have a function somewhere that returns a number between 0-9.&lt;br&gt;
2- We first write a &lt;code&gt;describe&lt;/code&gt; block to group all the tests related to &lt;code&gt;getRandomNum&lt;/code&gt; and name it &lt;code&gt;test getRandomNum&lt;/code&gt;.&lt;br&gt;
3- Then, we write the &lt;code&gt;it&lt;/code&gt; block in which we write our test.&lt;br&gt;
4- Finally, we run a for loop to test our function. We should &lt;code&gt;expect&lt;/code&gt; a number &lt;code&gt;lessThan&lt;/code&gt; 100 every time we call &lt;code&gt;getRandomNum()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If everything goes well, the test should pass.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b7FPPgeh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/3WCtCc0/success.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b7FPPgeh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/3WCtCc0/success.png" alt="the test successed"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, what if we refactored our code and accidentally made a tiny mistake.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getRandomNum&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 100 was added to the number by mistake&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we run the test again, it should fail. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lXB0OPAI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/RgcHYn0/fail.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lXB0OPAI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/RgcHYn0/fail.png" alt="a red failed test"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The cool part is that Cypress tells you exactly where the test fails and why it fails. Here in our test, we told Cypress to &lt;code&gt;expect&lt;/code&gt; &lt;code&gt;getRandomNum()&lt;/code&gt; to return a number &lt;code&gt;lessThan&lt;/code&gt; 100, but instead we got 190. So Cypress complained about it to let us know that something went wrong after we refactored the code.  &lt;/p&gt;

&lt;p&gt;Cypress is much more powerful than just testing a function that generates random numbers, especially for applications built in React -- for example. It provides you with tools that help you mount your components and test their behavior. It's exactly like simulating how a user uses your website.&lt;/p&gt;

&lt;p&gt;Let's pretend that we have a website and that we want to test that the &lt;code&gt;Contact&lt;/code&gt; link gets redirected to the contact page &lt;code&gt;onClick&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// 1&lt;/span&gt;
&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;only&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;test contact link&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// 2&lt;/span&gt;
  &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;should be redirected to a contact page&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// 3&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;visit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http://localhost:3000&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// 4&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Contact&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="c1"&gt;// 5&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;should&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;include&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/contact&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;1- Add a &lt;code&gt;describe&lt;/code&gt; block, and since we &lt;code&gt;only&lt;/code&gt; care about testing the contact link right now, run that test only.&lt;br&gt;
2- Start the &lt;code&gt;it&lt;/code&gt; block.&lt;br&gt;
3- First, ask Cypress (cy) to visit/go to the application.&lt;br&gt;
4*- Then we tell it to find the first element that has the text &lt;code&gt;Contact&lt;/code&gt; and clicks it.&lt;br&gt;
5- Finally, Cypress tests if the the current &lt;code&gt;url&lt;/code&gt; contains &lt;code&gt;/contact&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;*: &lt;code&gt;contains&lt;/code&gt; is case sensitive. If the text is "Contact" but you write "contact"(lower case), the link won't be found and you'll have &lt;code&gt;a Timed out error&lt;/code&gt;. You can override that behavior by passing &lt;code&gt;{ matchCase: false }&lt;/code&gt; as an option to &lt;code&gt;contains&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Contact&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;matchCase&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also, note that &lt;code&gt;contains&lt;/code&gt; finds the first element that has the text "Contact", so if you have two "Contact" links on the page you'll need to use &lt;code&gt;get&lt;/code&gt; with &lt;code&gt;contains&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;nav&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Contact&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// to get the link in the nav&lt;/span&gt;
&lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;footer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Contact&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// to get the link in the footer&lt;/span&gt;
&lt;span class="c1"&gt;//Or&lt;/span&gt;
&lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;nav&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Contact&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;footer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Contact&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What if we have a login page where people can login or see an error message if the login fails... let's test that.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Login&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// we write the code we want to run before each test in a beforeEach block&lt;/span&gt;
  &lt;span class="nx"&gt;beforeEach&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;visit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http://localhost:3000/login&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;should succeed with correct credentials &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// find the element (input) with id:username and type hajarNasr&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#username&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hajarNasr&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// find the element (input) with id:password and type uniquePassword&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;uniquePassword&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// find the element (button) with id:submit-btn and click it&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#submit-btn&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="c1"&gt;// those two lines confirm that the user has logged successfully in and got redirected to homepage&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Welcome hajarNasr&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;should&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;include&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/home&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// To test that an error msg gets displayed when user enters wrong data.&lt;/span&gt;

  &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;should fail with wrong credentials &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#username&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fakeUser&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fakePassword&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#submit-btn&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="c1"&gt;// this line confirms that user has not logged in because the page doen't contain a welcome message&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;should&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;not.contain&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Welcome fakeUser&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// and this should confirm that we're still in the login page&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;should&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;include&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/login&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// and that an element with a className error is displayed in red.&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.error&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;should&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;have.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;color&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;rgb(255, 0, 0)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://docs.cypress.io/guides/overview/why-cypress"&gt;docs.cypress&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Using Uniform CSS to build modern UI</title>
      <author>Matt Angelosanto</author>
      <pubDate>Wed, 18 Aug 2021 19:58:37 +0000</pubDate>
      <link>https://dev.to/logrocket/using-uniform-css-to-build-modern-ui-2ghe</link>
      <guid>https://dev.to/logrocket/using-uniform-css-to-build-modern-ui-2ghe</guid>
      <description>&lt;p&gt;&lt;strong&gt;Written by &lt;a href="https://blog.logrocket.com/author/nelsonmichael/"&gt;Nelson Michael&lt;/a&gt;&lt;/strong&gt; ✏️&lt;/p&gt;

&lt;p&gt;Frontend web development is an ever-changing field, and the tools we use, such as frameworks and libraries, to make our development process more effective and exciting also continually evolve.&lt;/p&gt;

&lt;p&gt;CSS frameworks are an important aspect of frontend development. They assist us in creating modern user interfaces (UI) quickly and consistently, as well as provide a level of abstraction through a set of CSS classes that execute specific tasks.&lt;/p&gt;

&lt;p&gt;In this article, we will cover &lt;a href="https://uniformcss.com/"&gt;Uniform CSS&lt;/a&gt;, a configurable utility class generator and CSS framework developed entirely in &lt;a href="https://blog.logrocket.com/how-to-write-reusable-css-with-sass/"&gt;Synthetically awesome style sheet (Sass)&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-uniform-css"&gt;
  &lt;/a&gt;
  What is Uniform CSS?
&lt;/h2&gt;

&lt;p&gt;According to the team behind it, Uniform CSS is "a fully configurable utility generator and CSS framework built entirely in Sass, so you gain the power of utility-first workflow without losing the productiveness of Sass.”&lt;/p&gt;

&lt;p&gt;Uniform CSS uses a workflow similar to &lt;a href="https://blog.logrocket.com/building-a-pricing-component-with-tailwind-css/"&gt;Tailwind CSS&lt;/a&gt; or &lt;a href="https://github.com/wearelighthouse/stemCSS"&gt;StemCSS&lt;/a&gt;, where developers design stunning UI using predefined CSS classes provided by the framework. Uniform CSS is unique in that it is built entirely with Sass and is completely configurable with functional CSS.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#uniform-css-vs-tailwind-css"&gt;
  &lt;/a&gt;
  Uniform CSS vs. Tailwind CSS
&lt;/h2&gt;

&lt;p&gt;So, what makes Uniform CSS different than other CSS frameworks, such as Tailwind CSS? First of all, it’s fully configurable because it allows developers to customize everything within the framework. They can customize prefixes and delimiters, remove and extend colors, and even modify the syntax and add or remove properties.&lt;/p&gt;

&lt;p&gt;Here's what I mean:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sass"&gt;&lt;code&gt;&lt;span class="c1"&gt;// All configs are done in the scss file &lt;/span&gt;
&lt;span class="c1"&gt;// main.scss &lt;/span&gt;
&lt;span class="k"&gt;@use&lt;/span&gt; &lt;span class="s2"&gt;"uniform"&lt;/span&gt; &lt;span class="nt"&gt;as&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nt"&gt;with&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;
&lt;span class="c1"&gt;// add configurations here... &lt;/span&gt;
 &lt;span class="c1"&gt;$config : (&lt;/span&gt;
   &lt;span class="c1"&gt;important : true,&lt;/span&gt;
   &lt;span class="c1"&gt;prefix : example,&lt;/span&gt;
   &lt;span class="c1"&gt;delimiter : "-",&lt;/span&gt;
   &lt;span class="c1"&gt;colors: (&lt;/span&gt;
      &lt;span class="c1"&gt;green-color : green,&lt;/span&gt;
      &lt;span class="c1"&gt;yellow-color : yellow&lt;/span&gt;
  &lt;span class="c1"&gt;), &lt;/span&gt;
   &lt;span class="c1"&gt;exclude : (&lt;/span&gt;
      &lt;span class="c1"&gt;padding,&lt;/span&gt;
      &lt;span class="c1"&gt;color,&lt;/span&gt;
      &lt;span class="c1"&gt;margin,&lt;/span&gt;
  &lt;span class="c1"&gt;),&lt;/span&gt;
  &lt;span class="c1"&gt;include : (&lt;/span&gt;
      &lt;span class="c1"&gt;all &lt;/span&gt;
      &lt;span class="c1"&gt;// includes all properties.&lt;/span&gt;
  &lt;span class="c1"&gt;)&lt;/span&gt;
 &lt;span class="c1"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The code above would output to our CSS file, where we have access to the classes, like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sass"&gt;&lt;code&gt;&lt;span class="c1"&gt;// main.css &lt;/span&gt;
&lt;span class="nc"&gt;.example-bg-green-color&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
   &lt;span class="nl"&gt;background-color&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;green&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;important&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt; 
&lt;span class="err"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.example-bg-yellow-color&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
   &lt;span class="nl"&gt;background-color&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;yellow&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;important&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt; 
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can use these utilities in our HTML code.&lt;/p&gt;

&lt;p&gt;Because Uniform CSS is built on Sass, it compiles down to regular CSS. But it also provides the advantages that usually come with working in Sass, such as vendor prefixes for CSS properties, mixins, functions, and more.&lt;/p&gt;

&lt;p&gt;And, if those perks aren’t enough, when you use Uniform CSS, you don’t need to wait for it to get access to new CSS properties — you can simply add your own properties directly into your Sass config.&lt;/p&gt;

&lt;p&gt;Here's an example from &lt;a href="https://uniformcss.com/docs/overview/#how-uniform-is-different"&gt;Uniform&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sass"&gt;&lt;code&gt;&lt;span class="c1"&gt;// main.scss&lt;/span&gt;
&lt;span class="k"&gt;@use&lt;/span&gt; &lt;span class="s2"&gt;"uniform"&lt;/span&gt; &lt;span class="nt"&gt;as&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nt"&gt;with&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;
  &lt;span class="nv"&gt;$config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="na"&gt;utilities&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="na"&gt;leading-trim&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="na"&gt;responsive&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;true&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;shorthand&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;leading&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;leading-trim&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;variants&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="na"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;both&lt;/span&gt;
        &lt;span class="o"&gt;)&lt;/span&gt;
      &lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="na"&gt;text-edge&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="na"&gt;shorthand&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text-edge&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;variants&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="na"&gt;cap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cap&lt;/span&gt; &lt;span class="n"&gt;alphabetic&lt;/span&gt;
        &lt;span class="o"&gt;)&lt;/span&gt;
      &lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This compiles to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sass"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* main.css */
&lt;/span&gt;&lt;span class="nc"&gt;.leading-trim&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
       &lt;span class="na"&gt;leading-trim&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;both&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
 &lt;span class="err"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.text-cap&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
       &lt;span class="na"&gt;text-edge&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cap&lt;/span&gt; &lt;span class="n"&gt;alphabetic&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
 &lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#installing-uniform-css"&gt;
  &lt;/a&gt;
  Installing Uniform CSS
&lt;/h2&gt;

&lt;p&gt;Uniform is quite simple to set up. There are three ways to use Uniform CSS in our project. Let's have a look at each one.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cloning-the-github-repository"&gt;
  &lt;/a&gt;
  Cloning the GitHub repository
&lt;/h3&gt;

&lt;p&gt;Simply clone the GitHub repository into your project folder:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="na"&gt;git&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="na"&gt;clone&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="na"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ThinkUniform&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;uniformcss&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we need to add Uniform to our &lt;code&gt;.scss&lt;/code&gt; file, compile it, and watch for changes. Here's how to do it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// add this to your .scss file&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;use&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;uniform&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// now we compile using one of the build scripts made available to us or just do it using a sass build process of your choice&lt;/span&gt;

&lt;span class="nx"&gt;yarn&lt;/span&gt; &lt;span class="nx"&gt;uniform&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Installing it this way enables us to completely configure Uniform to meet our needs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installing-via-npm"&gt;
  &lt;/a&gt;
  Installing via npm
&lt;/h3&gt;

&lt;p&gt;If you have Node.js installed, then simply use this command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;uniformcss
// add this to your .scss file
@use &lt;span class="s2"&gt;"uniform"&lt;/span&gt; as &lt;span class="k"&gt;*&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can compile and watch for changes using a preferred Sass build process, such as the &lt;code&gt;watch Sass&lt;/code&gt; extension in &lt;a href="https://code.visualstudio.com/"&gt;Visual Studio Code&lt;/a&gt;. Installing Uniform this way also enables us to fully configure it to suit our needs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installing-from-a-cdn"&gt;
  &lt;/a&gt;
  Installing from a CDN
&lt;/h3&gt;

&lt;p&gt;For a quick way to get up and running with Uniform, just add the CDN link into the head tag of your HTML document:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://cdn.jsdelivr.net/npm/uniformcss@1.0.0/dist/uniform.min.css
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this option, you’ll only be able to make basic adjustments if you use the pre-compiled version, so you won’t have access to more extensive customization options.&lt;/p&gt;

&lt;p&gt;To configure Uniform when working with the CDN option, simply define CSS variables as overrides in a &lt;code&gt;:root&lt;/code&gt; pseudo-element, like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;:root&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--font-sans&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'Poppins'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;--primary-700&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;224&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;249&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you can use those variables in your HTML document:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"font-sans color-primary-700"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Hi there!&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#using-uniform-css-in-your-project"&gt;
  &lt;/a&gt;
  Using Uniform CSS in your project
&lt;/h2&gt;

&lt;p&gt;Now let's build a simple card component using Uniform utility classes.&lt;/p&gt;

&lt;p&gt;Because this is a small project, we'll first install Uniform using a CDN. But, if you want additional configuration options, you should install via npm because the CDN option doesn't provide us with much flexibility.&lt;/p&gt;

&lt;p&gt;Go ahead and add the following CDN link to the head tag of your HTML file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://cdn.jsdelivr.net/npm/uniformcss@1.0.0/dist/uniform.min.css
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can now apply all of the Uniform CSS utility classes to our HTML card component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;flex justify-content-center relative top-80 font-serif&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;flex flex-col justify-content-between shadow-lg w-448 radius-lg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://images.unsplash.com/photo-1593990965215-075c1f918806?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;amp;ixlib=rb-1.2.1&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=634&amp;amp;q=80&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;A black man with dark shades on&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;h-288 object-cover object-center radius-lg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text-center p-12&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h2&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ultrabold text-2xl p-10&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Nelson&lt;/span&gt; &lt;span class="nx"&gt;Michael&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h2&amp;gt;       &lt;/span&gt;&lt;span class="err"&gt; 
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text-sm&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;thatsnotreallymyface&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;gmail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;com&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;flex justify-content-between m-auto w-320 p-20 text-center&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h3&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;extrabold text-xl&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h3&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text-sm&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Posts&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h3&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;extrabold text-xl&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;350&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h3&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text-sm&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Following&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h3&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;extrabold text-xl&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mf"&gt;1.5&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h3&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text-sm&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Followers&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/main&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here’s an &lt;a href="https://uniformcss.com/api-reference/"&gt;API reference&lt;/a&gt; that shows all of the classes available to you, and this is what our final build would look like:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/D_kingnelson/embed/MWmmZJg?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;We were able to create this simple card component without touching our CSS file by simply adding a few classes.&lt;/p&gt;

&lt;p&gt;Here’s another example:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/D_kingnelson/embed/ExmevMK?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
 &lt;/p&gt;

&lt;p&gt;The example above demonstrates how simple it is to create reusable components with Uniform. We accomplished this without touching our CSS file, except for when we needed to adjust the configuration.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#browser-support-for-uniform-css"&gt;
  &lt;/a&gt;
  Browser support for Uniform CSS
&lt;/h2&gt;

&lt;p&gt;Uniform CSS currently supports stable versions of Chrome, Firefox, Edge, and Safari. It does not work with any version of Internet Explorer, including Internet Explorer 11.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Uniform CSS is a great frontend development tool because it offers many predefined classes while allowing for customization and the ability to add and remove classes at will. I hope you found this tutorial helpful.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#is-your-frontend-hogging-your-users-cpu"&gt;
  &lt;/a&gt;
  Is your frontend hogging your users' CPU?
&lt;/h2&gt;

&lt;p&gt;As web frontends get increasingly complex, resource-greedy features demand more and more from the browser. If you’re interested in monitoring and tracking client-side CPU usage, memory usage, and more for all of your users in production, &lt;a href="https://logrocket.com/signup/"&gt;try LogRocket&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://logrocket.com/signup/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IQurLkEZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2019/12/cpu-memory-usage.png" alt="LogRocket Dashboard Free Trial Banner"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://logrocket.com/signup/"&gt;LogRocket&lt;/a&gt; is like a DVR for web apps, recording everything that happens in your web app or site. Instead of guessing why problems happen, you can aggregate and report on key frontend performance metrics, replay user sessions along with application state, log network requests, and automatically surface all errors.&lt;/p&gt;

&lt;p&gt;Modernize how you debug web apps — &lt;a href="https://logrocket.com/signup/"&gt;Start monitoring for free&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Impressions of Polywork</title>
      <author>Nick Taylor (he/him)</author>
      <pubDate>Wed, 18 Aug 2021 19:58:35 +0000</pubDate>
      <link>https://dev.to/nickytonline/impressions-of-polywork-3pbp</link>
      <guid>https://dev.to/nickytonline/impressions-of-polywork-3pbp</guid>
      <description>&lt;p&gt;Polywork is a new professional platform that has been getting a lot of attention lately. I can't remember exactly where I came across it initially on Twitter. I think &lt;a class="mentioned-user" href="https://dev.to/aspittel"&gt;@aspittel&lt;/a&gt;
 (Ali Spittel) may have Tweeted about it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-access-to-polywork"&gt;
  &lt;/a&gt;
  Getting Access to Polywork
&lt;/h2&gt;

&lt;p&gt;I &lt;a href="https://www.polywork.com/users/sign_up"&gt;signed up for the waiting list&lt;/a&gt;, gave their &lt;a href="https://twitter.com/PolyworkHQ"&gt;Twitter account&lt;/a&gt; a follow, and one Sunday afternoon, the Twitter account tweeted out an invite code to bypass the waitlist. I was in! 😎&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Hint: They give out invite codes pretty frequently or retweet folks who have invite codes to give, so I highly recommend following their Twitter account.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#onboarding"&gt;
  &lt;/a&gt;
  Onboarding
&lt;/h2&gt;

&lt;p&gt;I secured my handle, &lt;em&gt;nickytonline&lt;/em&gt;, because &lt;a href="https://www.iamdeveloper.com/pages/social/"&gt;that's me everywhere on the Internet&lt;/a&gt;. It's been a couple of months, so I don't remember most of the onboarding process, but I remember choosing your assistant as part of the onboarding—a fun touch.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9OjZ4MEI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hoaz3ladpk05d9endst0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9OjZ4MEI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hoaz3ladpk05d9endst0.png" alt="Polywork assitant"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: If you've onboarded recently, let me know what aspects I've missed.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The first thing I enjoyed about Polywork was the minimal design (like Zen mode in your editor for all the devs out there).&lt;/p&gt;

&lt;p&gt;I completed the intro section and added some initial badges to my profile. Badges in the context of Polywork are interests and skills you have. I work in open source, and I snowboard, so I added two badges to my profile.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N52zyS4t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bwyf96wnsevx9juwoe7a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N52zyS4t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bwyf96wnsevx9juwoe7a.png" alt="Polywork badges section"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#positions"&gt;
  &lt;/a&gt;
  Positions
&lt;/h2&gt;

&lt;p&gt;Like other professional networks, you can add the positions you've held.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V4O__IbQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wmqggolywg2d1sm3ubu5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V4O__IbQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wmqggolywg2d1sm3ubu5.png" alt="Polywork positions section"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One exciting feature that rolled out after I had signed up was Highlights for starting and leaving positions generated automatically.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dcCjBs5r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k3994nynfjawd5cwl5iw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dcCjBs5r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k3994nynfjawd5cwl5iw.png" alt="Polywork ended and started a new role highlights"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#timeline"&gt;
  &lt;/a&gt;
  Timeline
&lt;/h3&gt;

&lt;p&gt;The main area of prominence on your profile page is the timeline.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZVPTzXNQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p27njvml14ijk8zkmcmz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZVPTzXNQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p27njvml14ijk8zkmcmz.png" alt="Polywork timeline"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's where you'll spend most of your time filling out your profile. It took me a while to add my work here, but mainly because I was backfilling many things I've done. Filling out the timeline was nostalgic, and I realized how much I've accomplished once I saw it all in chronological order.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-a-highlight"&gt;
  &lt;/a&gt;
  Creating a Highlight
&lt;/h3&gt;

&lt;p&gt;To add to the timeline, click on the &lt;em&gt;Highlight&lt;/em&gt; button at the top of your Polywork profile. It will open a modal where you can fill in the work or activity you want to record.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s5FWRYPC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1v4e0m9pa4y1or766tcy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s5FWRYPC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1v4e0m9pa4y1or766tcy.png" alt="Creating a Polywork highlight"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#tags"&gt;
  &lt;/a&gt;
  Tags
&lt;/h4&gt;

&lt;p&gt;Aside from the content of the highlight, you can add one or more tags like &lt;em&gt;Contributed to Open Source&lt;/em&gt;. Tags you've recently used are available to you right in the initial highlight editor view. If you want to add a new one, click on the &lt;strong&gt;Add Activity Tags&lt;/strong&gt; button to search for tags.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JefgEdvp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bdbbeyyzc4csct3re9db.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JefgEdvp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bdbbeyyzc4csct3re9db.png" alt="Polywork add a tag"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If a tag does not exist, you can create it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UJujKfPB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wo8bormdpemvme4ctchx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UJujKfPB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wo8bormdpemvme4ctchx.png" alt="Polywork create new tag"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#adding-collaborators"&gt;
  &lt;/a&gt;
  Adding Collaborators
&lt;/h4&gt;

&lt;p&gt;If you've collaborated on something, you can add collaborators to a highlight by clicking on the two-person icon at the bottom of the highlight editor.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qGrSwZOo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1dd0mrd7z9bjh352ptdr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qGrSwZOo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1dd0mrd7z9bjh352ptdr.png" alt="Polywork adding a collaborator button"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can add as many collaborators as you want. I'm sure there is a limit; I just haven't reached it yet. 😎&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_Lxf56ax--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s5oeoq25fgta8b70qo49.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_Lxf56ax--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s5oeoq25fgta8b70qo49.png" alt="Polywork add collaborators"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One thing to note about collaborators is they have to confirm they collaborated with you. It prevents people from being needlessly tagged on highlights and adds more authenticity to a piece of collaborative work.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reposting-someones-highlight"&gt;
  &lt;/a&gt;
  Reposting Someone's Highlight
&lt;/h3&gt;

&lt;p&gt;At first glance, this looks like retweeting on Twitter, but it's a bit different. For one thing, you cannot repost anyone's highlight. As far as I’m aware, the only way you can repost is if someone collaborated with you. Once you confirm that you collaborated with someone, you will be able to repost their highlight.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FRSk1lEB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/17rxhti3wp0zp2l2915e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FRSk1lEB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/17rxhti3wp0zp2l2915e.png" alt="A Polywork reposted highlight"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#filtering"&gt;
  &lt;/a&gt;
  Filtering
&lt;/h3&gt;

&lt;p&gt;A newer feature that dropped recently is anyone, including yourself, can filter your timeline based on one or more badges you have associated with your profile.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--15BZPWNt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3odk7f4cmxm45bcq2np7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--15BZPWNt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3odk7f4cmxm45bcq2np7.png" alt="Polywork, filtering your timeline"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is an excellent way for folks to surface certain kinds of work you've done. For example, here's my timeline filtered on the &lt;em&gt;Twitch Streamer&lt;/em&gt; badge.&lt;/p&gt;

&lt;p&gt;Note that it also filters reposts on your timeline associated with the badge you filtered on.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oKkvX5Yw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/weeqa2jg82w1mha7jxe2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oKkvX5Yw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/weeqa2jg82w1mha7jxe2.png" alt="Polywork, filtering timeline with badge"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-a-custom-domain"&gt;
  &lt;/a&gt;
  Setting up a Custom Domain
&lt;/h2&gt;

&lt;p&gt;Another great feature about your profile is you can use a custom domain. Setting a custom domain is available from your profile settings.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ymxVgmVb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2cttxmz8boembroh3ypb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ymxVgmVb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2cttxmz8boembroh3ypb.png" alt="Polywork, set up a custom domain"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The steps are pretty straightforward. When I initially set things up, I ran into some issues, but improvements to using a custom domain rolled out the following week and then it was smooth sailing setting things up &lt;a href="https://timeline.iamdeveloper.com"&gt;timeline.iamdeveloper.com&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#contact-preferences"&gt;
  &lt;/a&gt;
  Contact Preferences
&lt;/h2&gt;

&lt;p&gt;Like other professional and social media applications, you can also contact someone on Polywork. To contact them, you need to specify a reason from the available options they’ve provided.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IPWZtHQ1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xhltgezs5akylwspnvyi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IPWZtHQ1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xhltgezs5akylwspnvyi.png" alt="Polywork contact preferences modal"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For example, my coworker &lt;a href="https://www.polywork.com/cgorton"&gt;Christina&lt;/a&gt; is open to being contacted about speaking at events. Will this stop useless messages like "hi"? Perhaps. If anything, it will give someone pause before contacting an individual on Polywork.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#multiverse"&gt;
  &lt;/a&gt;
  Multiverse
&lt;/h2&gt;

&lt;p&gt;Think of the Mulitiverse (MV) as a one-stop shop for searching for members of Polywork and work-related highlights associated with badges.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--41Eiqhxg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dmvsd3klg67x8ty5rj3w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--41Eiqhxg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dmvsd3klg67x8ty5rj3w.png" alt="Polywork multiverse page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are several sections in the MV: featured members, trending badges, folks who have recently joined, what's everyone doing, and possibilities.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;It’s unclear to me what the Possibilities section is. Maybe it’s for like-minded folks or folks that you may find interesting based on some algorithm?&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#space-station"&gt;
  &lt;/a&gt;
  Space Station
&lt;/h2&gt;

&lt;p&gt;As mentioned in the Contact Preferences section above, folks can be open to collaborating on specific topics, e.g. People available for live streaming. BTW, I am available for &lt;a href="https://www.iamdeveloper.com/pages/live-coding/"&gt;live streaming&lt;/a&gt;. 😎&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ml23sFcJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/prvxn4um6ka0pfs3owmg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ml23sFcJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/prvxn4um6ka0pfs3owmg.png" alt="Polywork space station page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Instead of searching for someone then contacting them to see what they're available to collaborate on, Space Station groups folks by the topics they're open to collaborating on to make it easier for you to contact someone for a specific topic.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#improvements"&gt;
  &lt;/a&gt;
  Improvements
&lt;/h2&gt;

&lt;p&gt;The Polywork team is constantly rolling out improvements. If you find a bug or have a suggestion for a feature or improvement, submit an issue. It is available from your profile menu.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LFM3unxK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lj7r7de2xg0s4z7eesf4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LFM3unxK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lj7r7de2xg0s4z7eesf4.png" alt="Submit an issue to Polywork"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;I've already submitted some suggestions and improvements myself.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Polywork makes so much sense to me&lt;/strong&gt; for exhibiting my work. I &lt;a href="https://www.polywork.com/nickytonline?badges%5B%5D=Open+Source"&gt;work in and contribute to open source&lt;/a&gt;, I &lt;a href="https://www.polywork.com/nickytonline/highlights/af1934a2-8130-457c-9734-3cc6c5e446b3"&gt;stream on Twitch&lt;/a&gt;, have &lt;a href="https://www.polywork.com/nickytonline/highlights/2c5da615-0aef-4494-bc63-f76da0ac3402"&gt;given talks&lt;/a&gt;, been on podcasts, &lt;a href="https://www.polywork.com/nickytonline/highlights/a6be8320-1f80-4184-a38f-3dc9cba1eca0"&gt;built a skating rink&lt;/a&gt;, all the things! &lt;/p&gt;

&lt;p&gt;It's early days for Polywork, but the future is bright. &lt;strong&gt;If you're looking to showcase your work, consider Polywork.&lt;/strong&gt; ✨  Once you get access, give me a follow at &lt;a href="https://timeline.iamdeveloper.com"&gt;timeline.iamdeveloper.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I don't have an infinite supply, but if you need an invite code, &lt;a href="https://twitter.com/nickytonline"&gt;drop me a DM on Twitter&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>review</category>
      <category>career</category>
      <category>polywork</category>
    </item>
    <item>
      <title>Gotchas when converting strings to arrays in JS</title>
      <author>lionel-rowe</author>
      <pubDate>Wed, 18 Aug 2021 19:44:47 +0000</pubDate>
      <link>https://dev.to/lionelrowe/gotchas-when-converting-strings-to-arrays-in-js-1n31</link>
      <guid>https://dev.to/lionelrowe/gotchas-when-converting-strings-to-arrays-in-js-1n31</guid>
      <description>&lt;p&gt;This is a response to &lt;a class="mentioned-user" href="https://dev.to/antoomartini"&gt;@antoomartini&lt;/a&gt;
 's awesome article here, where she describes 4 ways to turn a string into an array:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/antoomartini" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YhYfMRpb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--6o4nJsbe--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/581836/90503238-0843-4393-bc4e-fb2e0cbca6d1.jpg" alt="antoomartini"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/antoomartini/4-ways-to-convert-a-string-to-an-array-in-javascript-i97" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;4 ways to convert a string to an array in Javascript &lt;/h2&gt;
      &lt;h3&gt;Maria Antonella 🦋 ・ Aug 18 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;However, not all of the 4 ways work in the same way. We can see this when we try to use a string such as &lt;code&gt;'💩'&lt;/code&gt;, rather than a Latin-alphabet string:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;💩&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// ["\ud83d", "\udca9"]&lt;/span&gt;

&lt;span class="p"&gt;;[...&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;// ["💩"]&lt;/span&gt;

&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// ["💩"]&lt;/span&gt;

&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;([],&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// ["\ud83d", "\udca9"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#why-the-difference"&gt;
  &lt;/a&gt;
  Why the difference?
&lt;/h2&gt;

&lt;p&gt;To understand the difference, let's take a look at how each way works in turn.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#stringsplit"&gt;
  &lt;/a&gt;
  String#split
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;String#split&lt;/code&gt; matches and splits on &lt;em&gt;16-bit units&lt;/em&gt;, as encoded in UTF-16, the internal string representation that JavaScript uses.&lt;/p&gt;

&lt;p&gt;You can find what these units are by using string index notation, and you can count them using &lt;code&gt;String#length&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ab&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;// "a"&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ab&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;// "b"&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ab&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="c1"&gt;// 2&lt;/span&gt;

&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;💩&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;// "\ud83d"&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;💩&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;// "\udca9"&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;💩&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="c1"&gt;// 2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, something weird is going here. That's because emojis, and various other characters, take up &lt;em&gt;two&lt;/em&gt; 16-bit units (for a total of 32 bits) instead of just one.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#objectassign"&gt;
  &lt;/a&gt;
  Object.assign
&lt;/h3&gt;

&lt;p&gt;How does &lt;code&gt;Object.assign&lt;/code&gt; work?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The &lt;strong&gt;&lt;code&gt;Object.assign()&lt;/code&gt;&lt;/strong&gt; method copies all &lt;a href="/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable"&gt;enumerable&lt;/a&gt; &lt;a href="/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty"&gt;own properties&lt;/a&gt; from one or more &lt;em&gt;source objects&lt;/em&gt; to a &lt;em&gt;target object&lt;/em&gt;. It returns the modified target object. (Source: &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign"&gt;MDN&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this case, &lt;code&gt;source&lt;/code&gt; is &lt;code&gt;'💩'&lt;/code&gt;, and &lt;code&gt;target&lt;/code&gt; is &lt;code&gt;[]&lt;/code&gt;. &lt;code&gt;Object.assign&lt;/code&gt; therefore assigns &lt;code&gt;'💩'&lt;/code&gt;'s property &lt;code&gt;0&lt;/code&gt; to the array's property &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;'💩'&lt;/code&gt;'s property &lt;code&gt;1&lt;/code&gt; to the array's property &lt;code&gt;1&lt;/code&gt;. As a result, we get the same result as with &lt;code&gt;String#split&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#spread"&gt;
  &lt;/a&gt;
  [...spread]
&lt;/h3&gt;

&lt;p&gt;The spread operator (&lt;code&gt;...&lt;/code&gt;) was introduced in ES6. With the introduction of ES6 features, JavaScript started getting smarter with its Unicode handling.&lt;/p&gt;

&lt;p&gt;Instead of assigning properties, the spread operator instead &lt;em&gt;iterates&lt;/em&gt; over its operand — in this case, our string. String iteration is done based on Unicode codepoints, rather than individual 16-bit units. Our friendly poop emoji is only a single Unicode codepoint, so we get the result we want.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#arrayfrom"&gt;
  &lt;/a&gt;
  Array.from
&lt;/h3&gt;

&lt;p&gt;As with spread notation, &lt;code&gt;Array.from&lt;/code&gt; was introduced in ES6. It iterates over the argument passed to it, so again, we get the expected result.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#caveats"&gt;
  &lt;/a&gt;
  Caveats
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Array.from&lt;/code&gt; and spread notation work great for Unicode codepoints, but they still won't cover every situation. Sometimes, what &lt;em&gt;looks&lt;/em&gt; like a single glyph is actually multiple Unicode codepoints. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;str1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lǜ&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;str2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;str1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;normalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;NFD&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// "lǜ", looks exactly the same, but composed with combining diacritics&lt;/span&gt;

&lt;span class="p"&gt;;[...&lt;/span&gt;&lt;span class="nx"&gt;str1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;// ["l", "ǜ"]&lt;/span&gt;
&lt;span class="p"&gt;;[...&lt;/span&gt;&lt;span class="nx"&gt;str2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;// ["l", "u", "̈", "̀"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or, for another emoji-based example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;emoji&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;👩🏿‍💻&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="p"&gt;;[...&lt;/span&gt;&lt;span class="nx"&gt;emoji&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;// ["👩", "🏿", "‍", "💻"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, it's because the emoji is actually composed of 4 Unicode codepoints, representing &lt;code&gt;woman&lt;/code&gt;, &lt;code&gt;skin tone 6&lt;/code&gt;, &lt;code&gt;zero-width joiner&lt;/code&gt;, and &lt;code&gt;computer&lt;/code&gt; respectively.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#further-reading"&gt;
  &lt;/a&gt;
  Further reading
&lt;/h2&gt;

&lt;p&gt;For a much deeper dive, I highly recommend Matthias Bynens's excellent article &lt;em&gt;&lt;a href="https://mathiasbynens.be/notes/javascript-unicode"&gt;JavaScript has a Unicode problem&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;




&lt;p&gt;Thanks for reading! What are your favorite Unicode tips and tricks or JavaScript Unicode gotchas?&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>unicode</category>
    </item>
  </channel>
</rss>
