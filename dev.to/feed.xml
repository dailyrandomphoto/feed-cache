<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Sin Estres Next Single Cover Art</title>
      <author>Omar Dejesu Orrantia</author>
      <pubDate>Sun, 09 May 2021 00:13:00 +0000</pubDate>
      <link>https://dev.to/sinestres/sin-estres-next-single-cover-art-1349</link>
      <guid>https://dev.to/sinestres/sin-estres-next-single-cover-art-1349</guid>
      <description>&lt;p&gt;Expirementing as an Indie artist self learning and motivated singer working on allot of projects but the one that's more complex is all this coding stuff because I only got to a short grade as far as an education. Since the age of 14 I had no parents anymore to give the warm feeling of love that every child needs to have a real sense of direction and focus maintaining a disciplined form of doing best to stay away from harm's way for loved ones sake. Strezless Musick Productionz is my music label name that I chose cause of the Spanish stage name as I chose to say forget this for good one day after a heartbreak I experienced and allot of prior nerve-wracked chain of events God had strengthen me to outlive and I realized that some things no matter how hard I tried to prevent are beyond my control like for example death which I one day shall join the ones I loved whom have already crossed to the place of eternal no return to this world. Fretting doesn't solve nothing but shorten our already short life span and I don'twant to go before my time does indicating faith which Jesus actually instructed his disciples on such topic commanding them not to worry as each day has its own worries and wee shall address each as they come fixing one problem of them at a time.  Anyways half the time I don't understand what exactly I'm doing so bear with me. Github makes allot more sense to ne than it did when I first created my accounts and being a person who is hands on learner this wether foolish looking, conceited, or whatever negative options maybe received is worth the embarrassment if it goes there. I apologize for any appearance of promotional content this may seem as. I am hoping that once I finally understand this well enough to build an organized structure with my coding data I can build a software that will benefit this music industry as I know how complex it is to actually administer this business/ creative career few have the confidence to pursue and much fewer reach that recognition of success from the world. There's so much for an artist to do in order to grow his career and it's close to impossible go finish all the projects at hand alone if we plan a certain date to have an album produced and ready to be distributed for the public's consumption and influence lives for the better. There's all sorts of things I knew nothing of such as ipi's to publishing royalties, to producing and ultimately balancing a normal living without getting ill because I haven't ate or slept to will due to other things I'm negligent as well as this learning music and creating as best I can. So please bear with me  as I thank you for taking your time to read through this post and understanding who I am and my reason for doing what I do online. There's these problems of life I know are mysterious and sha-256 breaking of modern slavery is hard stealing it for other people's dreams. Be safe,  God bless everyone. &lt;/p&gt;

</description>
      <category>strezlessmusickproductionz</category>
      <category>sinestres</category>
      <category>omardejesuorrantia</category>
      <category>indieartist</category>
    </item>
    <item>
      <title>Looking for Open-Source Contributors?</title>
      <author>Shubhendra Singh Chauhan</author>
      <pubDate>Sat, 08 May 2021 23:02:53 +0000</pubDate>
      <link>https://dev.to/withshubh/looking-for-open-source-contributors-175g</link>
      <guid>https://dev.to/withshubh/looking-for-open-source-contributors-175g</guid>
      <description>&lt;p&gt;If you're a project owner/maintainer looking for more contributors to your project, you can gain more contributors by listing your repository on &lt;a href="https://goodfirstissue.dev/"&gt;Goodfirstissue.dev&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-goodfirstissuedev"&gt;
  &lt;/a&gt;
  What is Goodfirstissue.dev?
&lt;/h2&gt;

&lt;p&gt;It is a platform that has a list of popular Open-Source project repositories with "Open" Good First Issues. So whether you're making your first contribution or want to take up some beginner-friendly issues, you will find a project repository there.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-can-i-list-my-project"&gt;
  &lt;/a&gt;
  How can I list my project?
&lt;/h2&gt;

&lt;p&gt;You can list your repository by making a pull request here: &lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/deepsourcelabs"&gt;
        deepsourcelabs
      &lt;/a&gt; / &lt;a href="https://github.com/deepsourcelabs/good-first-issue"&gt;
        good-first-issue
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Make your first open-source contribution.
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;To maintain the quality of projects in Good First Issue, there are criteria for listing a repository:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;At least three open issues with the &lt;code&gt;good first issue&lt;/code&gt; label&lt;/li&gt;
&lt;li&gt;Detailed setup instructions for the project&lt;/li&gt;
&lt;li&gt;CONTRIBUTING.md&lt;/li&gt;
&lt;li&gt;Actively maintained&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Don't forget README.md is your friend.&lt;/p&gt;

&lt;p&gt;If you create a pull request, drop a ‚ÄòHi‚Äô in the &lt;code&gt;#good-first-issue&lt;/code&gt; channel on our &lt;a href="https://join.slack.com/t/deepsourceusers/shared_invite/zt-gfe1t4oi-DFaFfjLMXwxaz7iz3eLLzg"&gt;slack workspace&lt;/a&gt;. &lt;/p&gt;

</description>
      <category>opensource</category>
      <category>discuss</category>
      <category>contributorswanted</category>
      <category>goodfirstissue</category>
    </item>
    <item>
      <title>Take Control of Your VSCode Workspaces üõ†Ô∏è</title>
      <author>sirfuzzalot</author>
      <pubDate>Sat, 08 May 2021 23:02:51 +0000</pubDate>
      <link>https://dev.to/sirfuzzalot/take-control-of-your-vscode-workspaces-1f4k</link>
      <guid>https://dev.to/sirfuzzalot/take-control-of-your-vscode-workspaces-1f4k</guid>
      <description>&lt;p&gt;I work on a lot of different projects. You probably do too.&lt;/p&gt;

&lt;p&gt;Back in 2018, I created an extension for VSCode to help solve the problem of managing many different projects, using many different workspaces. It's called &lt;a href="https://marketplace.visualstudio.com/items?itemName=tomsaunders-code.workspace-explorer"&gt;&lt;strong&gt;Workspace Explorer&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FtSDllh2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0nrkbeiwkpbn89f76ij7.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FtSDllh2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0nrkbeiwkpbn89f76ij7.gif" alt="Opening a Workspace"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Workspace Explorer&lt;/strong&gt; provides a file-browser-like experience for your workspaces. Some of the things you can do:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Workspaces

&lt;ul&gt;
&lt;li&gt;Create Workspaces&lt;/li&gt;
&lt;li&gt;Delete Workspaces&lt;/li&gt;
&lt;li&gt;Rename Workspaces&lt;/li&gt;
&lt;li&gt;Open a Workspace in Another Window&lt;/li&gt;
&lt;li&gt;Open a Workspace in the Same Window&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Sub-Folders

&lt;ul&gt;
&lt;li&gt;Organize Workspaces in Sub-folders&lt;/li&gt;
&lt;li&gt;Delete Sub-folders&lt;/li&gt;
&lt;li&gt;Rename Sub-Folders&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Custom Icons

&lt;ul&gt;
&lt;li&gt;Set Custom Icons for Workspaces and Sub-folders&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#workspace-explorer-200"&gt;
  &lt;/a&gt;
  Workspace Explorer 2.0.0
&lt;/h2&gt;

&lt;p&gt;Today I'm releasing version &lt;code&gt;2.0.0&lt;/code&gt; of &lt;strong&gt;Workspace Explorer&lt;/strong&gt;. This release brings support for &lt;code&gt;jpg&lt;/code&gt; icons, environment variables in config paths, and patches several bugs. I've incremented the major version as support for SVG icons has been removed, due to an issue in VSCode.&lt;/p&gt;

&lt;p&gt;Icon Format Support&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;del&gt;svg&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;png&lt;/li&gt;
&lt;li&gt;jpg (new)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Environment Variable Support&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;${env:NAME_OF_ENV_VAR}/remainder/of/your/path

/root/of/my/path/${env:NAME_OF_ENV_VAR}/remainder/of/your/path

${env:USERPROFILE}\my\windows\path
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oLCybvap--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fzmi40v4eypicwxym4u1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oLCybvap--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fzmi40v4eypicwxym4u1.png" alt="Workspace Explorer"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Workspace Explorer&lt;/strong&gt; is developed open source on GitLab. Special thanks to all the contributors and issue reporters over the years.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://gitlab.com/tomsaunders-tools/vscode-workspace-explorer"&gt;https://gitlab.com/tomsaunders-tools/vscode-workspace-explorer&lt;/a&gt;&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>news</category>
      <category>showdev</category>
      <category>productivity</category>
    </item>
    <item>
      <title>SQL Joins</title>
      <author>Danyson</author>
      <pubDate>Sat, 08 May 2021 22:28:45 +0000</pubDate>
      <link>https://dev.to/danyson/sql-joins-o3m</link>
      <guid>https://dev.to/danyson/sql-joins-o3m</guid>
      <description>&lt;h1&gt;
  &lt;a href="#inner-join"&gt;
  &lt;/a&gt;
  Inner Join
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7o5VtIGj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fdtwiofcfor43bpsub7l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7o5VtIGj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fdtwiofcfor43bpsub7l.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SQL Query :&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT * FROM A INNER JOIN B ON A.KEY = B.KEY
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Definition :&lt;/strong&gt; &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Select tables A &amp;amp; B and compare key values of table A and table B and return records which only have the identical key values in both tables of A &amp;amp; B. This is similar to the Set theory operation &lt;strong&gt;&lt;code&gt;Intersection&lt;/code&gt;&lt;/strong&gt; which is denoted by A ‚à© B, the set containing all elements of A that also belong to B.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#left-join"&gt;
  &lt;/a&gt;
  Left Join
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5equ4g3X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wh6lg2ps6kxlsbwu2r1l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5equ4g3X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wh6lg2ps6kxlsbwu2r1l.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SQL Query :&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT * FROM A LEFT JOIN B ON A.KEY = B.KEY
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Definition :&lt;/strong&gt; &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Select tables A &amp;amp; B and compare key values of table A and table B and return all records of A which is in the left side of the sql query but in case of B which is in right side of sql query, only returns records that have the same key values of table A.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#right-join"&gt;
  &lt;/a&gt;
  Right Join
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oqXDCiVc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/27s6kaq3y84zilo959cx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oqXDCiVc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/27s6kaq3y84zilo959cx.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SQL Query :&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT * FROM A RIGHT JOIN B ON A.KEY = B.KEY
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Definition :&lt;/strong&gt; &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Select tables A &amp;amp; B and compare key values of table A and table B and return all records of B which is in the right side of the sql query but in case of A which is in left side of sql query, only returns records that have the same key values of table B.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Note :&lt;/strong&gt; &lt;br&gt;
&lt;em&gt;1. &lt;strong&gt;&lt;code&gt;ON&lt;/code&gt;&lt;/strong&gt; clause is the more general than &lt;strong&gt;&lt;code&gt;USING&lt;/code&gt;&lt;/strong&gt; clause. One can join tables on a column, a set of columns and even a condition. For example:&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT * FROM city JOIN country ON city.country_code = country.country_code
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;2. &lt;strong&gt;&lt;code&gt;USING&lt;/code&gt;&lt;/strong&gt; is useful when both tables share a column of the exact same name on which they join. For example:&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT city.name, city_id FROM city JOIN country USING city_id
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#full-outer-join"&gt;
  &lt;/a&gt;
  Full Outer Join
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hvOKcN2_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vq4b9zot1bu8fgawecqg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hvOKcN2_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vq4b9zot1bu8fgawecqg.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SQL Query :&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT * FROM A FULL OUTER JOIN B ON A.KEY = B.KEY
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Definition :&lt;/strong&gt; &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Select tables A &amp;amp; B and compare key values of table A and table B and return all records of both A &amp;amp; B and fill in NULL for missing matches on either side. This is similar to the set theory operation &lt;strong&gt;&lt;code&gt;Union&lt;/code&gt;&lt;/strong&gt; of the sets A and B, where A ‚à™ B, is the set of distinct elements that belong to set A or set B, or both.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#left-outer-join"&gt;
  &lt;/a&gt;
  Left Outer Join
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K1OZYd07--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6bz6x0gxm6cts3bsa2kv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K1OZYd07--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6bz6x0gxm6cts3bsa2kv.png" alt="image"&gt;&lt;/a&gt; &lt;br&gt;
&lt;strong&gt;SQL Query :&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT * FROM A LEFT OUTER JOIN B ON A.KEY = B.KEY WHERE B.KEY IS NULL
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;Definition :&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Left outer join returns set of records from A, with the matching records in B (which are available). If there is no match, the right side will have null. This is similar to the set theory operation &lt;strong&gt;&lt;code&gt;Set Difference&lt;/code&gt;&lt;/strong&gt; ‚ÄòA ‚Äì B‚Äô, which is the set containing elements that are in A but not in B. For example : all elements of A except the elements of B.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#right-outer-join"&gt;
  &lt;/a&gt;
  Right Outer Join
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wi3o-Ixu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vyhnh7pgapjgcin2ghl6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wi3o-Ixu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vyhnh7pgapjgcin2ghl6.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;SQL Query :&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT * FROM A RIGHT OUTER JOIN B ON A.KEY = B.KEY WHERE A.KEY IS NULL
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;Definition :&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Right outer join returns set of records from B, with the matching records in A (which are available). If there is no match, the left side will have null. This is similar to the set theory operation &lt;strong&gt;&lt;code&gt;Set Difference&lt;/code&gt;&lt;/strong&gt; ‚ÄòB ‚Äì A‚Äô, which is the set containing elements that are in B but not in A. For example : all elements of B except the elements of A.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#full-outer-join-without-intersection"&gt;
  &lt;/a&gt;
  Full Outer Join without Intersection
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--apma3k58--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mvybx6nn3zo5ax2gbpsj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--apma3k58--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mvybx6nn3zo5ax2gbpsj.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT * FROM A FULL OUTER JOIN B ON A.KEY = B.KEY WHERE A.KEY IS NULL OR B.KEY IS NULL
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;Definition :&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Full outer join without intersection returns the set of records only in table A, but not in table B or the set of records only in table B, but not in table A, we perform the same left outer join or right outer join, then exclude the records we don't want from the right side or left side via a where clause. Which is similar to the set operation &lt;code&gt;A ‚Äì B ‚à™ B ‚Äì A&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;My Personal Blog :&lt;/strong&gt; &lt;a href="https://danyson.github.io/"&gt;https://danyson.github.io/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>sql</category>
      <category>database</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Use an XState Machine with React</title>
      <author>Josh Branchaud</author>
      <pubDate>Sat, 08 May 2021 22:21:21 +0000</pubDate>
      <link>https://dev.to/jbranchaud/use-an-xstate-machine-with-react-326i</link>
      <guid>https://dev.to/jbranchaud/use-an-xstate-machine-with-react-326i</guid>
      <description>&lt;p&gt;XState gives you the tools to take control over the state of your UI. When you've got it under control, you can build interfaces that provide a predictable and delightful user experience.&lt;/p&gt;

&lt;p&gt;Let's look at how to integrate XState into a React app.&lt;/p&gt;

&lt;p&gt;There are a bunch of well-constructed XState machines available to directly copy into your project from &lt;a href="https://xstate-catalogue.com/"&gt;XState Catalogue&lt;/a&gt;. For instance, I can interact with and then grab the &lt;a href="https://xstate-catalogue.com/machines/confirmation-dialog"&gt;Confirmation Dialog machine&lt;/a&gt; with the 'Copy' button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UAel4V16--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/itjuhgoymw1ezln3ei4y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UAel4V16--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/itjuhgoymw1ezln3ei4y.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'll then paste that machine definition into something like &lt;code&gt;confirmMachine.js&lt;/code&gt;. XState is framework agnostic, so there is nothing about this machine, on its own, that has anything to do with React or Vue or Svelte or whatever. I do want to use this within a React app, so I then need to grab &lt;a href="https://xstate.js.org/docs/packages/xstate-react/"&gt;&lt;code&gt;@xstate/react&lt;/code&gt;&lt;/a&gt;. XState's React "bindings" come with a &lt;code&gt;useMachine&lt;/code&gt; hook.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#an-example"&gt;
  &lt;/a&gt;
  An Example
&lt;/h2&gt;

&lt;p&gt;Here is what that will look like.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useMachine&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@xstate/react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;confirmMachine&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./confirmMachine&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Dialog&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./dialog&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMachine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;confirmMachine&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Dialog&lt;/span&gt;
        &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Are you sure you want to delete something?&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* other props ... */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* other stuff */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;useMachine&lt;/code&gt; call both interprets and starts up the machine service. This hook gives you two values as an array. The &lt;code&gt;current&lt;/code&gt; value is everything about the &lt;em&gt;current&lt;/em&gt; state of the machine. The &lt;code&gt;send&lt;/code&gt; is a function for dispatching transitions between machine states.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-current-state-of-the-machine"&gt;
  &lt;/a&gt;
  The Current State of the Machine
&lt;/h2&gt;

&lt;p&gt;With &lt;code&gt;current&lt;/code&gt; I can figure out the &lt;em&gt;current&lt;/em&gt; state of the machine to determine whether or not I should be showing the dialog. &lt;code&gt;current.value&lt;/code&gt; will tell me what state the machine is in.&lt;/p&gt;

&lt;p&gt;I can also get access to any error message that comes from the machine.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useMachine&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@xstate/react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;confirmMachine&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./confirmMachine&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Dialog&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./dialog&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMachine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;confirmMachine&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;showDialog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;closed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Dialog&lt;/span&gt;
        &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Are you sure you want to delete something?&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="nx"&gt;showDialog&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;showDialog&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;errorMessage&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;errorMessage&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* other stuff */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice I check &lt;code&gt;current.value !== "closed"&lt;/code&gt; to determine whether or not the dialog should be showing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#moving-between-states-with-send"&gt;
  &lt;/a&gt;
  Moving Between States with Send
&lt;/h2&gt;

&lt;p&gt;I can now incorporate the &lt;code&gt;send&lt;/code&gt; function into some handlers so that users can interact with the dialog. I'll create a handler for opening, closing, and confirming the dialog.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useMachine&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@xstate/react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;confirmMachine&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./confirmMachine&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Dialog&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./dialog&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMachine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;confirmMachine&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;deleteAction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="cm"&gt;/* ... */&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;showDialog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;closed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;open&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;OPEN_DIALOG&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;action&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;deleteAction&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;close&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;CANCEL&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;confirm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;CONFIRM&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Dialog&lt;/span&gt;
        &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Are you sure you want to delete something?&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="nx"&gt;handleConfirm&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;confirm&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;handleClose&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;close&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;showDialog&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;showDialog&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;errorMessage&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;errorMessage&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* other stuff */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Delete&lt;/span&gt; &lt;span class="nx"&gt;Something&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;open&lt;/code&gt; handler when called will transition the machine to &lt;code&gt;open.idle&lt;/code&gt; using the &lt;code&gt;OPEN_DIALOG&lt;/code&gt; event. It also includes an &lt;code&gt;action&lt;/code&gt; which will be called if the dialog is &lt;em&gt;confirmed&lt;/em&gt;. When triggered, this will cause the &lt;code&gt;showDialog&lt;/code&gt; value to evaluate to true. This handler is wired up to some element outside of the dialog, in this case a button.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;close&lt;/code&gt; handler is passed to the dialog. When called this sends the &lt;code&gt;CANCEL&lt;/code&gt; event to the machine. That will transition the machine back into the &lt;code&gt;closed&lt;/code&gt; state. This change will cause the &lt;code&gt;showDialog&lt;/code&gt; value to evaluate back to false. Any user action that should dismiss the dialog will trigger this handler.&lt;/p&gt;

&lt;p&gt;Once the dialog is open, the user can &lt;em&gt;confirm&lt;/em&gt; the dialog's prompt by clicking a 'Confirm' button. This will call the &lt;code&gt;confirm&lt;/code&gt; handler which will send the &lt;code&gt;CONFIRM&lt;/code&gt; event to the machine. When the machine receives this event it will trigger the &lt;code&gt;action&lt;/code&gt; given on &lt;code&gt;OPEN_DIALOG&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h2&gt;

&lt;p&gt;There are more details to this specific machine. Depending on whether the action's promise resolves or rejects, the machine will take a different course of action. That's an exercise for the reader or the subject of another post.&lt;/p&gt;

&lt;p&gt;At this point, we have explored the enough of XState in a React context that you can start using the two together. If you'd like you can start by interacting with and remixing &lt;a href="https://codesandbox.io/s/happy-ellis-e9j6s?file=/src/App.tsx"&gt;the codesandbox example I used for this post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are a lot of moving parts when getting started with XState, so if you have questions about what was covered here, feel free to drop me a note on &lt;a href="https://twitter.com/jbrancha"&gt;twitter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you enjoy my writing, consider &lt;a href="https://crafty-builder-6996.ck.page/e169c61186"&gt;joining my newsletter&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;&lt;em&gt;Cover photo by &lt;a href="https://unsplash.com/@ballparkbrand?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Ball Park Brand&lt;/a&gt; on &lt;a href="https://unsplash.com/?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>xstate</category>
      <category>javascript</category>
      <category>ux</category>
    </item>
    <item>
      <title>20 JavaScript One-Liners That Will Help You Code Like a Pro</title>
      <author>Muhammad Ovi</author>
      <pubDate>Sat, 08 May 2021 21:02:29 +0000</pubDate>
      <link>https://dev.to/ovi/20-javascript-one-liners-that-will-help-you-code-like-a-pro-4ddc</link>
      <guid>https://dev.to/ovi/20-javascript-one-liners-that-will-help-you-code-like-a-pro-4ddc</guid>
      <description>&lt;p&gt;JavaScript keeps growing and growing, opening doors for new&lt;br&gt;
"to be tech geeks" in the market as it's one of the easiest languages to start. (is it really?)&lt;/p&gt;

&lt;p&gt;It's true that JavaScript can do a lot of blazing things! and there is just so much to learn.&lt;/p&gt;

&lt;p&gt;And whether you‚Äôre new to JavaScript or more of a professional developer it‚Äôs always good to learn something new.&lt;/p&gt;

&lt;p&gt;I'm gonna go over some really helpful one-liners (20 + Bonus) that can help you boost your productivity and can help in debugging code.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#what-is-a-oneliner-actually"&gt;
  &lt;/a&gt;
  What is a one-liner actually?
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;A one-liner is a code practice in which we perform some function in just one line of code.&lt;/p&gt;
&lt;/blockquote&gt;


&lt;h3&gt;
  &lt;a href="#01-get-a-random-boolean"&gt;
  &lt;/a&gt;
  01 - Get a random boolean
&lt;/h3&gt;

&lt;p&gt;This function will return a boolean (true or false) using Math.random() method.&lt;br&gt;
Math.random creates a random number between 0 and 1, after which we check if it is higher or lower than 0.5.&lt;br&gt;
That means it's a 50/50 chance to get either true or false.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getRandomBoolean&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;getRandomBoolean&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="c1"&gt;// a 50/50 chance of returning true or false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#02-check-if-the-date-is-weekend"&gt;
  &lt;/a&gt;
  02 - Check if the date is Weekend
&lt;/h3&gt;

&lt;p&gt;By this function, you'll be able to check if the date that is provided is either a weekday or weekend.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isWeekend&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getDay&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isWeekend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2021&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
&lt;span class="c1"&gt;// false (Friday)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isWeekend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2021&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
&lt;span class="c1"&gt;// true (Saturday)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#03-check-if-a-number-is-even-or-odd"&gt;
  &lt;/a&gt;
  03 - Check if a number is even or odd
&lt;/h3&gt;

&lt;p&gt;Simple utility function to check if a number is even or odd.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isEven&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isEven&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isEven&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#04-get-the-unique-values-in-an-array"&gt;
  &lt;/a&gt;
  04 - Get the unique values in an array
&lt;/h3&gt;

&lt;p&gt;A very simple method to remove all duplicate values from an array. This function converts our array to a Set and then back to an array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;uniqueArr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)];&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;uniqueArr&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]));&lt;/span&gt;
&lt;span class="c1"&gt;// [1, 2, 3, 4, 5]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#05-check-if-a-variable-is-an-array"&gt;
  &lt;/a&gt;
  05 - Check if a variable is an array
&lt;/h3&gt;

&lt;p&gt;A clean and easy way to check if a variable is an array. &lt;br&gt;&lt;br&gt;
Well, there can be other ways too üòâ&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isArray&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]));&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isArray&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Ovi&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;
&lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello World&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#06-generate-a-random-number-between-two-numbers"&gt;
  &lt;/a&gt;
  06 - Generate a random number between two numbers
&lt;/h3&gt;

&lt;p&gt;This will take two numbers as params and will generate a random number between those two numbers!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;random&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;min&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="c1"&gt;// could be anything from 1 - 50&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#07-generate-a-random-string-unique-id"&gt;
  &lt;/a&gt;
  07 - Generate a random string (unique id?)
&lt;/h3&gt;

&lt;p&gt;Maybe you need to create a temporary unique id for something, here's a trick you can use to generate a random string on the go.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;randomString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;randomString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="c1"&gt;// could be anything!!!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#08-scroll-to-the-top-of-the-page"&gt;
  &lt;/a&gt;
  08 - Scroll to the top of the page
&lt;/h3&gt;

&lt;p&gt;The &lt;em&gt;window.scrollTo()&lt;/em&gt; method takes an &lt;em&gt;x&lt;/em&gt; and &lt;em&gt;y&lt;/em&gt; coordinate to scroll to.&lt;br&gt;
If we set these to zero and zero, we‚Äôll scroll to the top of the page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;scrollToTop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scrollTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;scrollToTop&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#09-toggle-boolean"&gt;
  &lt;/a&gt;
  09 - Toggle boolean
&lt;/h3&gt;

&lt;p&gt;Toggling a boolean value is one of the very basic programming problems, that can be solved in a lot of different ways.&lt;br&gt;
Instead of using if-statements to determine what value to set the boolean to, you could instead use the function to flip the current value using the &lt;em&gt;!&lt;/em&gt; "not" operator.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toggleBool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#10-swapping-two-variables"&gt;
  &lt;/a&gt;
  10 - Swapping Two Variables
&lt;/h3&gt;

&lt;p&gt;The below code is one of the simpler ways to swap two variables without using a third variable and with just one line of code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#11-calculate-number-of-days-between-two-dates"&gt;
  &lt;/a&gt;
  11 - Calculate number of days between two dates
&lt;/h3&gt;

&lt;p&gt;To calculate the days between two dates,&lt;br&gt;
we first find the absolute between two dates and then divide it with 86400000 which is equal to milliseconds in a single day, and at the end, we round the result and return it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;daysDiff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;date2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ceil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;date2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;86400000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;daysDiff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2021-05-10&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2021-11-25&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
&lt;span class="c1"&gt;// 199&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#12-copy-text-to-clipboard"&gt;
  &lt;/a&gt;
  12 - Copy text to clipboard
&lt;/h3&gt;

&lt;p&gt;PS: You might need to add a check to see if &lt;em&gt;navigator.clipboard.writeText&lt;/em&gt; exists&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;copyTextToClipboard&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clipboard&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#13-different-ways-of-merging-multiple-arrays"&gt;
  &lt;/a&gt;
  13 - Different ways of merging multiple arrays
&lt;/h3&gt;

&lt;p&gt;There are a couple of ways to merge arrays. One of them is using the "concat" method. Another one is using the spread operator ("‚Ä¶").&lt;/p&gt;

&lt;p&gt;PS: We can also any duplicates from the final array using the "Set" object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Merge but don't remove the duplications&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;merge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Or&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;merge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;// Merge and remove the duplications&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;merge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;))];&lt;/span&gt;
&lt;span class="c1"&gt;// Or&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;merge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;([...&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;])];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#14-get-the-actual-type-of-javascript-primitives"&gt;
  &lt;/a&gt;
  14 - Get the actual type of javascript primitives
&lt;/h3&gt;

&lt;p&gt;People sometimes use libraries to find the actual type of something in JavaScript, this small trick can save your time (and code size).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;trueTypeOf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;trueTypeOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="c1"&gt;// string&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;trueTypeOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="c1"&gt;// number&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;trueTypeOf&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="c1"&gt;// undefined&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;trueTypeOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="c1"&gt;// null&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;trueTypeOf&lt;/span&gt;&lt;span class="p"&gt;({}));&lt;/span&gt;
&lt;span class="c1"&gt;// object&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;trueTypeOf&lt;/span&gt;&lt;span class="p"&gt;([]));&lt;/span&gt;
&lt;span class="c1"&gt;// array&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;trueTypeOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="c1"&gt;// number&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;trueTypeOf&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{}));&lt;/span&gt;
&lt;span class="c1"&gt;// function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#15-truncate-string-at-the-end"&gt;
  &lt;/a&gt;
  15 - Truncate string at the end
&lt;/h3&gt;

&lt;p&gt;Need to truncate string from the end, not a problem!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;truncateString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;...`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;truncateString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hi, I should be truncated because I am too loooong!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Hi, I should be truncated because...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#16-truncate-string-from-the-middle"&gt;
  &lt;/a&gt;
  16 - Truncate string from the middle
&lt;/h3&gt;

&lt;p&gt;How about truncating the string from the middle? &lt;br&gt;&lt;br&gt;
This function will take a string as the first param, then the size of string we need as 2nd argument, then how many chars we need from the start and end in 3rd and 4th param.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;truncateStringMiddle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;...&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;truncateStringMiddle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;A long store goes here but then eventually ends!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// string&lt;/span&gt;
    &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// total size needed&lt;/span&gt;
    &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// chars to keep from start&lt;/span&gt;
    &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// chars to keep from end&lt;/span&gt;
  &lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// A long store ... eventually ends!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#17-capitalizing-a-string"&gt;
  &lt;/a&gt;
  17 - Capitalizing a string
&lt;/h3&gt;

&lt;p&gt;Well, unfortunately, JavaScript does not have a built-in function to capitalize string, but this workaround can help you obtain the goal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;capitalize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;charAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;capitalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello world&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="c1"&gt;// Hello world&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#18-check-if-the-current-tab-is-in-viewfocus"&gt;
  &lt;/a&gt;
  18 - Check if the current tab is in view/focus
&lt;/h3&gt;

&lt;p&gt;This simple helper method returns true or false depending on if a tab is in view/focus&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isTabInView&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;isTabInView&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// true/false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#19-check-if-the-user-is-on-an-apple-device"&gt;
  &lt;/a&gt;
  19 - Check if the user is on an Apple device
&lt;/h3&gt;

&lt;p&gt;This will return true if the user is on an Apple device&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isAppleDevice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/Mac|iPod|iPhone|iPad/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;platform&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isAppleDevice&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// true/false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#20-the-ternary-operator"&gt;
  &lt;/a&gt;
  20 - The Ternary Operator
&lt;/h3&gt;

&lt;p&gt;This is a great code saver when you want to write an &lt;em&gt;if..else&lt;/em&gt; statement in just one line.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Longhand&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;greetings&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;greetings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;You are not old enough&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;greetings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;You are young!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Shorthand&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;greetings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;You are not old enough&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;You are young!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#bonus-shortcircuit-evaluation-shorthand"&gt;
  &lt;/a&gt;
  Bonus - Short-circuit Evaluation Shorthand
&lt;/h3&gt;

&lt;p&gt;When assigning a variable value to another variable, you may want to ensure that the source variable is not null, undefined, or empty.&lt;br&gt;
You can either write a long &lt;em&gt;if&lt;/em&gt; statement with multiple conditionals, or use a short-circuit evaluation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Longhand&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;fullName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Shorthand&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fullName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;buddy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;That's all folks! Hope you found this helpful, do not forget to add your email to the mailing list on my &lt;a href="https://muhammadovi.com"&gt;website&lt;/a&gt; üòâ&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
    </item>
    <item>
      <title>Scheduling API Roadblocks</title>
      <author>Spurwing</author>
      <pubDate>Sat, 08 May 2021 20:53:57 +0000</pubDate>
      <link>https://dev.to/spurwing/scheduling-api-roadblocks-4mc0</link>
      <guid>https://dev.to/spurwing/scheduling-api-roadblocks-4mc0</guid>
      <description>&lt;p&gt;At first blush, implementing scheduling functionality in your application or website looks like it would be the simplest thing in the world to pull off. After all, the actual process for using most &lt;strong&gt;scheduling solutions&lt;/strong&gt; is pretty much as ‚Äúpoint and click‚Äù as it gets ‚Äì with new appointments and events scheduled in about 15 seconds or less.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#common-scheduling-api-roadblocks-developers-need-to-overcome"&gt;
  &lt;/a&gt;
  Common Scheduling API Roadblocks Developers Need to Overcome
&lt;/h3&gt;

&lt;p&gt;Beneath the surface of that super &lt;strong&gt;user-friendly&lt;/strong&gt; experience, however, is something far more complex.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--koxogtSg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gnk4vodghzgu7aoprqr9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--koxogtSg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gnk4vodghzgu7aoprqr9.png" alt="scheduling api roadblocks"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So complex, in fact, that a lot of developers learn (relatively early on in the development process) that it makes a lot more sense to use &lt;strong&gt;scheduling API&lt;/strong&gt; services to overcome common obstacles than trying to build something from scratch ‚Äì reinventing the wheel along the way.&lt;/p&gt;

&lt;p&gt;Below we highlight some of the biggest obstacles developers come across when working with scheduling systems and why it makes so much sense to lean on scheduling API services to shortcut &lt;strong&gt;development time&lt;/strong&gt; and improve results.&lt;/p&gt;

&lt;p&gt;Let‚Äôs take right in!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#incorporating-multiple-scheduling-apis"&gt;
  &lt;/a&gt;
  Incorporating Multiple Scheduling APIs
&lt;/h3&gt;

&lt;p&gt;While almost all popular calendar platforms operate similarly as far as functionality is concerned, the code, API, and ‚Äúhooks‚Äù running under the hood couldn‚Äôt be more unique.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wdDOzdmi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2dmlv3odpah6ak85dohc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wdDOzdmi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2dmlv3odpah6ak85dohc.png" alt="multiple scheduling api systems"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Google, Outlook, Exchange, and the Office 365 calendar systems all have their own unique API that makes integration possible. But integrating all of those APIs together with outside APIs as well can become a real spaghetti situation in a hurry.&lt;/p&gt;

&lt;p&gt;Everything starts to ‚Äútangle‚Äù pretty quickly and before you know it it‚Äôs almost impossible to keep your scheduling solution tight, organized, and well optimized.&lt;/p&gt;

&lt;p&gt;By using API scheduling services that act as a single point of contact for multiple calendar APIs, however, you‚Äôre able to smooth things out and streamline your app or service significantly.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#scheduling-across-multiple-calendars"&gt;
  &lt;/a&gt;
  Scheduling Across Multiple Calendars
&lt;/h3&gt;

&lt;p&gt;If you combine the unique complexity of multiple calendar applications with the fact that they treat event/appointment creation directives as second-class objects it‚Äôs not hard to see how things can spiral out of control when you have unified scheduling across multiple calendars.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m0-F9XMy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8uyh39a3wzqyx9cdwg5k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m0-F9XMy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8uyh39a3wzqyx9cdwg5k.png" alt="multi scheduling api"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By using a single API service to manage all second-class objects (even transforming them into first-class objects) across multiple calendar platforms everything smooths out significantly.&lt;/p&gt;

&lt;p&gt;Less resources are used, event creation requests are handled much faster, and at the end of the day managing events across multiple different calendar platforms becomes almost effortless.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#scheduling-across-multiple-timezones"&gt;
  &lt;/a&gt;
  Scheduling Across Multiple Timezones
&lt;/h3&gt;

&lt;p&gt;Dealing with scheduling across multiple time zones is one of those things that often goes overlooked by new developers working with calendar and scheduling APIs for the first time ‚Äì at least until everything breaks under real-world testing, anyway!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yJH94g0_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/txsio69uwo2c8qp5f0cc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yJH94g0_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/txsio69uwo2c8qp5f0cc.png" alt="timezone api scheduling"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Any applications that are going to be responsible for managing events that span across multiple regions and multiple time zones need to be engineered to ‚Äúnormalize‚Äù time.&lt;/p&gt;

&lt;p&gt;With scheduling API services, time isn‚Äôt just normalized on the user end of things ‚Äì always displaying the right time for each user depending on their specific time zone while keeping things &lt;strong&gt;synchronized&lt;/strong&gt;. But they also make it easy to manage, update, and instance the timing of events across multiple time zones on the backend, too.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#synchronized-scheduling-with-multiuser-availabilities"&gt;
  &lt;/a&gt;
  Synchronized Scheduling with Multi-User Availabilities
&lt;/h3&gt;

&lt;p&gt;One of the core functionalities that a scheduling solution needs to include is the ability to find schedule availability across multiple users, allowing end-users to schedule appointments and events in ‚Äúopen space‚Äù shared by everyone using that calendar specifically.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SDQLCULW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/svziepxlrw9r1pl36y4k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SDQLCULW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/svziepxlrw9r1pl36y4k.png" alt="multi user scheduling api"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Standard calendar API solutions take advantage of ‚Äúfree/busy resources‚Äù to handle this on their own. And while that does a solid job for single users on one calendar application, things break down pretty quickly when you‚Äôre trying to manage multiple calendars and multiple users at once ‚Äì all with their own unique schedules.&lt;/p&gt;

&lt;p&gt;Top-of-the-line scheduling API services eliminate this obstacle by synchronizing schedules in real time across multiple user and multiple calendar instances. This keeps everyone on the exact same page with limited potential for &lt;strong&gt;overbooking&lt;/strong&gt; or mismatched schedules to pop up later down the line.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;At the end of the day, scheduling API services &lt;strong&gt;shortcut development time&lt;/strong&gt; significantly, overcome the obstacles highlighted above (and more) and should be leveraged at every opportunity rather than trying to &lt;strong&gt;reinvent the wheel&lt;/strong&gt; and building this functionality from scratch.&lt;/p&gt;

&lt;p&gt;Learn how Spurwing's API can help your project or business succeed:&lt;/p&gt;

&lt;p&gt;Website: &lt;a href="https://www.spurwing.io/"&gt;https://www.spurwing.io/&lt;/a&gt;&lt;br&gt;
Blog: &lt;a href="https://dev.to/spurwing"&gt;https://dev.to/spurwing&lt;/a&gt;&lt;br&gt;
Marketplace: &lt;a href="https://github.com/Spurwing"&gt;https://github.com/Spurwing&lt;/a&gt;&lt;/p&gt;

</description>
      <category>writing</category>
      <category>productivity</category>
      <category>programming</category>
      <category>startup</category>
    </item>
    <item>
      <title>No Need Postman, Your VSCode is Enough for Testing Your API üòé‚ö°</title>
      <author>Dzun N</author>
      <pubDate>Sat, 08 May 2021 20:12:56 +0000</pubDate>
      <link>https://dev.to/dzun_n/no-need-postman-your-vscode-is-enough-for-testing-your-api-2khg</link>
      <guid>https://dev.to/dzun_n/no-need-postman-your-vscode-is-enough-for-testing-your-api-2khg</guid>
      <description>&lt;p&gt;hey you allüëã&lt;/p&gt;

&lt;p&gt;A couple week ago I've found Lightweight ‚ö° and simple üòã tools for testing my API. That's Thunder Client.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#thunder-client"&gt;
  &lt;/a&gt;
  Thunder Client
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TZqdTxw1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tizuy1k1jeez7uzogpym.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TZqdTxw1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tizuy1k1jeez7uzogpym.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AATBq_jZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/rangav/thunder-client-support/blob/master/images/thunder-client.gif%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AATBq_jZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/rangav/thunder-client-support/blob/master/images/thunder-client.gif%3Fraw%3Dtrue" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thunder Client is Rest API Client Extension for Visual Studio Code, with simple and clean design. The extension makes api testing very easy with Scriptless GUI based testing. and created by &lt;a href="https://twitter.com/ranga_vadhineni"&gt;Ranga Vadhineni&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thunder Client has many Main Features such as :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;List item&lt;/li&gt;
&lt;li&gt;Lightweight API Client&lt;/li&gt;
&lt;li&gt;Simple &amp;amp; Clean UI&lt;/li&gt;
&lt;li&gt;Collection &amp;amp; Environment Variables&lt;/li&gt;
&lt;li&gt;Scriptless Testing&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-to-install-it-"&gt;
  &lt;/a&gt;
  üíª How to install it ?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;It'a easy, just go to Extension menu in sidebar VSCode, and install it:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s-tlUku6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o9fzrrb32wzisc17ptjv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s-tlUku6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o9fzrrb32wzisc17ptjv.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;And you'll see the thunder client icon in sidebar&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wiYlDons--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v383nyhy1xaahlhixbrn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wiYlDons--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v383nyhy1xaahlhixbrn.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#lets-try-test-thunder-client"&gt;
  &lt;/a&gt;
  Let's try test Thunder Client
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;For testing API, I use a dummy api that's &lt;a href="https://swapi.dev/"&gt;SWAPI&lt;/a&gt;(The Star Wars API).&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://swapi.dev/"&gt;https://swapi.dev/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;h3&gt;
  &lt;a href="#get-request"&gt;
  &lt;/a&gt;
  Get request
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DFKecTaY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jbim7792zhhwk57w4w42.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DFKecTaY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jbim7792zhhwk57w4w42.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3&gt;
  &lt;a href="#set-environment"&gt;
  &lt;/a&gt;
  Set Environment
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RhThPJHz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3mqoexo2ptuujjkqford.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RhThPJHz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3mqoexo2ptuujjkqford.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now you can try more by your self üôåüôå, have nice try.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Thunder Client is Rest API Client Extension for Visual Studio Code, with simple and clean design. The extension makes api testing very easy with Scriptless GUI based testing. and created by &lt;a href="https://twitter.com/ranga_vadhineni"&gt;Ranga Vadhineni&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NB&lt;/strong&gt;: It does'nt means Thunder Client is better then postman, not. Postman still has more feature than Thunder client. Thunder Client made for own use and simple API testing&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>postman</category>
      <category>api</category>
      <category>extensions</category>
    </item>
    <item>
      <title>Tailwind CSS might not be for you</title>
      <author>Beno√Æt Rouleau</author>
      <pubDate>Sat, 08 May 2021 20:03:20 +0000</pubDate>
      <link>https://dev.to/benface/tailwind-css-might-not-be-for-you-jk0</link>
      <guid>https://dev.to/benface/tailwind-css-might-not-be-for-you-jk0</guid>
      <description>&lt;p&gt;&lt;em&gt;Disclaimer: This article is my version of &lt;a href="https://dev.to/brianboyko/tailwindcss-adds-complexity-does-nothing-3hpn"&gt;Tailwind CSS: Adds complexity, does nothing&lt;/a&gt;. I respect the original author‚Äôs opinions, but I think there‚Äôs a better way to criticize Tailwind CSS. Here goes.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you work in the front-end, you‚Äôve probably heard a lot about Tailwind CSS, a CSS framework, much like Bootstrap. Much unlike Bootstrap, however, Tailwind takes a different approach ‚Äì it is almost exclusively ‚Äúutility classes‚Äù.&lt;/p&gt;

&lt;p&gt;And it might not be for everyone.&lt;/p&gt;

&lt;p&gt;Before we start, let me try to explain what a utility class is. Let‚Äôs say that you have many components, and many of them need to have the CSS declaration &lt;code&gt;display: flex;&lt;/code&gt;. Instead of writing that over and over in your CSS, you create a class called &lt;code&gt;flex&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.flex&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, in every component that needs to be flexed, you add that &lt;code&gt;flex&lt;/code&gt; class.&lt;/p&gt;

&lt;p&gt;This is not a bad thing. I have written and used utility classes a great deal myself, especially when I‚Äôm writing CSS without the aid of CSS-in-JS solutions or a preprocessor like Sass/SCSS.&lt;/p&gt;

&lt;p&gt;What Tailwind does is take that concept to the extreme, with the idea being that you almost never have to write CSS, you just add different classes to your HTML based on what styles you need to apply.&lt;/p&gt;

&lt;p&gt;Which is an interesting choice, because...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#this-is-embracing-inline-styles"&gt;
  &lt;/a&gt;
  This is embracing inline styles
&lt;/h2&gt;

&lt;p&gt;Back before stylesheets were a thing, HTML had elements such as &lt;code&gt;&amp;lt;font&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;center&amp;gt;&lt;/code&gt; to apply some basic styles directly in the markup, much like the &lt;code&gt;style&lt;/code&gt; attribute that came along with CSS. But while inline styles are still a thing nowadays, we know better than to use them since we have stylesheets now, which let us ‚Äúseparate concerns‚Äù: HTML is for content and structure, CSS is for presentation.&lt;/p&gt;

&lt;p&gt;However, Tailwind doesn‚Äôt adhere to that idea, and goes back to the 90‚Äôs way of mixing content and presentation in the same file. So why not just use inline styles then? Writing &lt;code&gt;&amp;lt;div class="flex"&amp;gt;foo&amp;lt;/div&amp;gt;&lt;/code&gt; has the same exact effect as writing &lt;code&gt;&amp;lt;div style="display: flex;"&amp;gt;foo&amp;lt;/div&amp;gt;&lt;/code&gt;. Well, turns out there are a couple reasons, &lt;a href="https://tailwindcss.com/docs/utility-first#why-not-just-use-inline-styles"&gt;as outlined in the Tailwind documentation&lt;/a&gt;. Notably, inline styles don‚Äôt support media queries or pseudo-class selectors such as &lt;code&gt;:hover&lt;/code&gt; or &lt;code&gt;:focus&lt;/code&gt;, so you can‚Äôt have responsive or dynamic styles with them. Building a whole app or website with inline styles would be impossible for that reason alone, unless you decide to pretend that mobile devices don‚Äôt exist. If that‚Äôs not reason enough, Tailwind makes a strong argument for ‚Äúdesigning with constraints‚Äù:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Using inline styles, every value is a magic number. With utilities, you're choosing styles from a predefined design system, which makes it much easier to build visually consistent UIs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Indeed, Tailwind‚Äôs &lt;a href="https://tailwindcss.com/docs/theme"&gt;theme configuration&lt;/a&gt; is one of its greatest strengths. It prevents your stylesheet from containing &lt;a href="https://cssstats.com/stats/?url=https://www.publicissapient.com"&gt;69 unique font sizes and some background colors that are different but so similar that they should clearly be the same (e.g. &lt;code&gt;#ffe42e&lt;/code&gt; and &lt;code&gt;#ffe322&lt;/code&gt;)&lt;/a&gt;. It also helps developers design faster and be more confident that they‚Äôre not introducing visual inconsistencies.&lt;/p&gt;

&lt;p&gt;But even though Tailwind improves a lot on inline styles, it still embraces their philosophy and suggests that it‚Äôs totally fine ‚Äì even desirable ‚Äì to mingle presentation with content. Consequently, some of the arguments that you could make against using inline styles are also arguments against using Tailwind. I know it seems a bit lazy to rehash other users‚Äô criticisms of inline styles to explain why Tailwind might not be for you, but let‚Äôs do it anyway:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#its-wet-not-dry"&gt;
  &lt;/a&gt;
  It‚Äôs WET, not DRY
&lt;/h2&gt;

&lt;p&gt;When you want to change your site‚Äôs styling in a major way, if you‚Äôve used utility classes, you need to go through each use of those utility classes ‚Äì that is, every component ‚Äì and visually determine what needs to be updated. For example, let‚Äôs say that your company‚Äôs primary color is blue. You‚Äôll have lots of blue stuff in your website, marked with classes like &lt;code&gt;text-blue-700&lt;/code&gt; or &lt;code&gt;bg-blue-500&lt;/code&gt;, which represent different shades of blue. And that‚Äôs fine until your company decides to rebrand, and all of the buttons on the site ‚Äì but only the buttons ‚Äì need to be red.&lt;/p&gt;

&lt;p&gt;If you were using regular old CSS, you would probably have a class called &lt;code&gt;button&lt;/code&gt;. You would just go into that class in your CSS and change a single line: &lt;code&gt;background-color: red;&lt;/code&gt;. Any element that uses that class definition would now be red.&lt;/p&gt;

&lt;p&gt;Instead, with Tailwind, you have to go through each component and manually change &lt;code&gt;bg-blue-500&lt;/code&gt; to &lt;code&gt;bg-red-500&lt;/code&gt;. And with 1000 edits comes 1000 opportunities to introduce a bug. It is almost a textbook definition of why the DRY principle is in place.&lt;/p&gt;

&lt;p&gt;That is, unless you bring back the abstraction that you lost by replacing &lt;code&gt;button&lt;/code&gt; with a bunch of utility classes in your HTML. In my experience, Tailwind works best if anything that used to be a ‚ÄúCSS component‚Äù (like the &lt;code&gt;button&lt;/code&gt; class) is made a ‚Äútemplate component‚Äù (a reusable file that includes both the markup and the styling). That makes sense when you think about it, and you end up removing even more duplication: not just the Tailwind classes which now live in a single file instead of 1000, but any attribute (think ARIA) or child element of the component (think &lt;code&gt;button__icon&lt;/code&gt;). Turns out your code‚Äôs DRYness is up to you, not up to Tailwind!&lt;/p&gt;

&lt;p&gt;The above assumes that you‚Äôre using some kind of component library (e.g. React, Vue, Svelte, etc.) or templating language that supports partials (Twig, Blade, PHP, etc.). If you‚Äôre not, or if you find that it would be cumbersome to create a component or partial for a simple button, that‚Äôs totally fine. You don‚Äôt have to change your abstraction model, you can still use CSS itself as your ‚Äúcomponent layer‚Äù. That‚Äôs where Tailwind‚Äôs &lt;code&gt;@apply&lt;/code&gt; feature comes in handy: you keep your &lt;code&gt;button&lt;/code&gt; class, but instead of writing &lt;code&gt;background-color: red;&lt;/code&gt;, you write &lt;code&gt;@apply bg-red;&lt;/code&gt;. That way, you‚Äôre still using the theme configuration instead of a hard-coded (magic) value. This is similar to what you can do with preprocessors or CSS variables, but using the Tailwind API.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#html-is-traditionally-concerned-with-structure-not-styling"&gt;
  &lt;/a&gt;
  HTML is traditionally concerned with &lt;em&gt;structure&lt;/em&gt;, not &lt;em&gt;styling&lt;/em&gt;
&lt;/h2&gt;

&lt;p&gt;People talk about separation of concerns a lot in development. CSS Modules (and especially &lt;code&gt;.vue&lt;/code&gt; files) have done a lot to dispel the notion that you need to segregate structure, behavior, and style of each building block of your site in separate folders, but there is something to be said for separating concerns. That is, each part of your code should be ‚Äúloosely coupled and highly cohesive.‚Äù&lt;/p&gt;

&lt;p&gt;In other words, your HTML (structure syntax) shouldn‚Äôt have information about what the styles should be; it should only contain information about the structure of the page. Indeed, the ultimate reason for the invention of CSS, the whole point of the entire enterprise of CSS... was specifically so that you could separate content from presentation.&lt;/p&gt;

&lt;p&gt;And yet, Tailwind embraces the idea of inline styles, which goes against that whole concept. Why is that? Adam Wathan, the author of Tailwind, has written &lt;a href="https://adamwathan.me/css-utility-classes-and-separation-of-concerns/"&gt;an article&lt;/a&gt; about how separation of concerns is ‚Äúa straw man‚Äù and we should instead think of it in terms of ‚Äúdependency direction‚Äù. It‚Äôs a long read, but it‚Äôs worth it to understand where Tailwind comes from.&lt;/p&gt;

&lt;p&gt;Tailwind, like most CSS frameworks, is targeted towards developers who prefer writing HTML that depends on CSS, over CSS that depends on HTML. Adam mentions that both approaches are perfectly valid, and it comes down to ‚Äúwhat‚Äôs more important to you in a specific context‚Äù. Tailwind takes the first approach, and goes as far as it can with it. As a result, developers can build custom UIs right in the HTML because the CSS provides all the necessary building blocks.&lt;/p&gt;

&lt;p&gt;When we write code, we write it for two audiences: the first is the computer itself, which doesn‚Äôt care how the code looks so long as it runs, and the other is our fellow programmers. The easier it is for them to quickly identify what parts of your program are and how they interrelate, the more quickly they can fix bugs, add features, and bring value to the organization. Tailwind makes it easy not only to build UIs without switching context, but also to &lt;em&gt;understand&lt;/em&gt; what each element looks like at a glance, since the styles are right there in the same file.&lt;/p&gt;

&lt;p&gt;The flip side of losing ‚Äúsemantic‚Äù class names in favor of utility classes is that it becomes not as obvious what a given piece of HTML represents in terms of content. Thankfully, that is easily mitigated by using well-named components, or adding comments or even classes that do nothing but describe what an element is (as the first class, so it‚Äôs not lost in the sea of utilities, obviously).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#its-hard-to-read-at-first"&gt;
  &lt;/a&gt;
  It‚Äôs hard to read at first
&lt;/h2&gt;

&lt;p&gt;If you look at some HTML with Tailwind in it, you might say to yourself that the HTML looks ‚Äúbusy‚Äù or even ‚Äúugly.‚Äù That's true, but some say you get used to it.&lt;/p&gt;

&lt;p&gt;The real catch is that you have to learn all these classes before you can be productive with it, even if you know CSS really well. Tailwind is full of semantically obscure abbreviations such as &lt;code&gt;w&lt;/code&gt; for &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;h&lt;/code&gt; for &lt;code&gt;height&lt;/code&gt;. The framework tries to find a balance between terseness and expressiveness, but it can definitely feel cryptic at first.&lt;/p&gt;

&lt;p&gt;Here's an example from Aleksandr Hovhannisyan.&lt;/p&gt;

&lt;p&gt;This Tailwind code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"w-4 h-4 rounded text-white bg-black py-1 px-2 m-1 text-sm md:w-8 md:h-8 md:rounded-md md:text-base lg:w-12 lg:h-12 lg:rounded-lg lg:text-lg"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  Yikes.
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;could be expressed as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
  &lt;span class="nc"&gt;.thing&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.25rem&lt;/span&gt; &lt;span class="m"&gt;0.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.25rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.25rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.875rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;line-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.25rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="n"&gt;screen&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;768px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;.thing&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.375rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;line-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="n"&gt;screen&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1024px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;.thing&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.125rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;line-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.75rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"thing"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Yikes.&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, there are pros and cons to each approach. The second example is much more expressive (especially if you don‚Äôt know Tailwind), but it‚Äôs a lot more code, and the styles are separate from the element they are affecting. The Tailwind code, on the other hand, is short and you don‚Äôt need to open another file to understand how it‚Äôs styled. You may find it cryptic, but after just a couple days of using it, you should be able to decipher it pretty easily.&lt;/p&gt;

&lt;p&gt;It‚Äôs worth noting that Tailwind classes are arranged horizontally, while the CSS is written vertically. The wider text is, the harder it is for a reader‚Äôs eyes to jump to the next line, and the harder it is to find the one particular word you‚Äôre looking for in a wall of horizontal text. That‚Äôs part of the reason why Tailwind classes are terse (in addition to typing speed and file size). Note that there are different ways to mitigate lines getting too long (enabling wrapping in your IDE, adding line breaks, using &lt;code&gt;@apply&lt;/code&gt; selectively, etc.), but it is a potential issue to be aware of.&lt;/p&gt;

&lt;p&gt;Again, this is a matter of preference. Tailwind might be for you, or it might not, but it‚Äôs hard to know without giving it a real try.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#you-lose-a-lot-of-the-features-built-into-standard-css"&gt;
  &lt;/a&gt;
  You lose a lot of the features built into standard CSS
&lt;/h2&gt;

&lt;p&gt;...if you insist on not using &lt;em&gt;any&lt;/em&gt; custom CSS. But realistically, most Tailwind projects have &lt;em&gt;some&lt;/em&gt; custom CSS, which is totally fine ‚Äì Tailwind itself is a PostCSS plugin, meaning it runs on CSS source files, not instead of.&lt;/p&gt;

&lt;p&gt;So if you want some specific styling rules, for instance to add some margin between &lt;code&gt;p&lt;/code&gt; tags inside a &lt;code&gt;description&lt;/code&gt; class, you‚Äôll have to write custom CSS, though nothing prevents you from using &lt;code&gt;@apply&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.description&lt;/span&gt; &lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;@apply&lt;/span&gt; &lt;span class="err"&gt;mt-4;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that there are also lots of &lt;a href="https://tailwindcss.com/docs/plugins"&gt;plugins&lt;/a&gt;, including some official ones such as &lt;a href="https://tailwindcss.com/docs/plugins#typography"&gt;Typography&lt;/a&gt; and &lt;a href="https://tailwindcss.com/docs/plugins#forms"&gt;Forms&lt;/a&gt;, for extending Tailwind‚Äôs core functionality.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#it-solves-a-problem-that-you-may-not-have-encountered"&gt;
  &lt;/a&gt;
  It solves a problem that you may not have encountered
&lt;/h2&gt;

&lt;p&gt;We‚Äôre all different. We work on different projects, have different methodologies, use different tools. One tool cannot claim to solve a problem that &lt;em&gt;everyone&lt;/em&gt; is having. The best it can do is exist for the people who are experiencing the specific problem it was built to solve, and provide great documentation and other resources to learn about how it can make your work, or your life, easier.&lt;/p&gt;

&lt;p&gt;Tailwind does just that. It‚Äôs not for everyone. If you‚Äôve read Adam Wathan‚Äôs &lt;em&gt;CSS Utility Classes and "Separation of Concerns"&lt;/em&gt; article and couldn‚Äôt relate, I‚Äôm happy to tell you that Tailwind is probably not for you. If you love writing custom CSS, or need to apply different stylesheets to the same HTML to radically change how it looks, Tailwind is not for you. That‚Äôs OK! Go build great things with your favorite tools.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nothing-is-perfect"&gt;
  &lt;/a&gt;
  Nothing is perfect
&lt;/h2&gt;

&lt;p&gt;Something else will come along eventually, solving some of Tailwind‚Äôs problems, and maybe it will introduce new problems that we can‚Äôt even imagine. Maybe it will be a core web technology, who knows. But in the meantime, if you decide that Tailwind is for you or your team, it‚Äôs going to provide a great developer experience with some of the best documentation I‚Äôve ever seen in an open source project, your CSS is going to be as small as ever, and after a while, you might just wonder how you ever did CSS any other way.&lt;/p&gt;

</description>
      <category>tailwindcss</category>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Responsive Admin Panel or Dashboard - Flutter UI</title>
      <author>Meow404</author>
      <pubDate>Sat, 08 May 2021 19:55:04 +0000</pubDate>
      <link>https://dev.to/penucuricode/responsive-admin-panel-or-dashboard-flutter-ui-2pl9</link>
      <guid>https://dev.to/penucuricode/responsive-admin-panel-or-dashboard-flutter-ui-2pl9</guid>
      <description>&lt;p&gt;Live Preview : &lt;a href="https://abuanwar072.github.io/Flutter-Responsive-Admin-Panel-or-Dashboard/#/"&gt;https://abuanwar072.github.io/Flutter-Responsive-Admin-Panel-or-Dashboard/#/&lt;/a&gt;&lt;br&gt;
Packages we are using:&lt;/p&gt;

&lt;p&gt;flutter_svg: &lt;a href="https://pub.dev/packages/flutter_svg"&gt;https://pub.dev/packages/flutter_svg&lt;/a&gt;&lt;br&gt;
google_fonts: &lt;a href="https://pub.dev/packages/google_fonts"&gt;https://pub.dev/packages/google_fonts&lt;/a&gt;&lt;br&gt;
provider: &lt;a href="https://pub.dev/packages/provider"&gt;https://pub.dev/packages/provider&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fonts&lt;br&gt;
Poppins: &lt;a href="https://fonts.google.com/specimen/Poppins"&gt;https://fonts.google.com/specimen/Poppins&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On Flutter V2.* web officially supported on a stable branch. Today I share an Admin panel or you can call it dashboard UI build with flutter. Now you can build your app dashboard using flutter. This dashboard contains almost everything that you need like a chart, table, nice small card for showing info. It works perfectly on the Web, macOS app, Tablet also on both Android and iOS phones. It's time to code once run everywhere. Yeah, Flutter web is not SEO friendly but we don't need SEO for the admin panel.&lt;/p&gt;

</description>
      <category>html</category>
      <category>ruby</category>
      <category>dart</category>
      <category>swift</category>
    </item>
    <item>
      <title>Zero to Kubernetes in 5 Mins</title>
      <author>Ahmed Nader Mohamed</author>
      <pubDate>Sat, 08 May 2021 19:43:44 +0000</pubDate>
      <link>https://dev.to/ahmednader10/zero-to-kubernetes-in-5-mins-2hbp</link>
      <guid>https://dev.to/ahmednader10/zero-to-kubernetes-in-5-mins-2hbp</guid>
      <description>&lt;p&gt;Kubernetes(k8s) has become the de facto standard for not only container orchestration but also for cloud-native development. Being the flagship product for CNCF (Cloud Native Computing Foundation), Kubernetes has managed to establish an ecosystem of opensource projects around it, from service mesh to monitoring, observability, storage, policy driven controls and many more. It is remarkable how fast k8s matured and became enterprise ready with impressive &lt;a href="https://kubernetes.io/case-studies/"&gt;success stories&lt;/a&gt;.&lt;br&gt;
VMware &lt;a href="https://medium.com/better-programming/kubernetes-in-layman-terms-d9c307d2ef1d"&gt;calls&lt;/a&gt; Kubernetes ‚Äúthe new Java‚Äù, after the programming language invented in 1996 and used in just about everything today. That is how big and pervasive they think this technology will become.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l07bMT-T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/89z8zk5gny7w7gza2cel.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l07bMT-T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/89z8zk5gny7w7gza2cel.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#everyone-is-talking-about-kubernetes-but-what-the-heck-it-really-is"&gt;
  &lt;/a&gt;
  Everyone is talking about Kubernetes, but what the heck it really is?
&lt;/h2&gt;

&lt;p&gt;Kubernetes is a containers deployment and orchestration platform. It helps you deploy, monitor, scale, upgrade, rollback containers and many more seamlessly.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#but-why-would-i-need-an-extra-software-to-manage-my-containers"&gt;
  &lt;/a&gt;
  But why would I need an extra software to manage my containers?
&lt;/h4&gt;

&lt;p&gt;With the rise of microservices architecture, more and more organizations move to adopt it heavily, ending in many cases with hundreds and in some cases thousands of microservices in a single project. Each microservice of these would most probably be wrapped in a container on its own. Imagine having to manage hundred containers manually. Imagine having to deploy, upgrade, monitor and scale all of these containers. You probably got a sense by now how difficult/impossible it is to handle these operations using only a containerization platform like docker. A layer on top of docker is indeed needed to orchestrate and manage the containers, this layer is Kubernetes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://enterprisersproject.com/article/2017/10/how-explain-kubernetes-plain-english"&gt;Here&lt;/a&gt; is an analogy to help you have a better understanding: You can think of a container orchestrator (like Kubernetes ) as a conductor for an orchestra, says Dave Egts, chief technologist, North America Public Sector, &lt;a href="https://www.redhat.com/en?intcmp=701f2000000tjyaAAA"&gt;Red Hat&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;‚ÄúIn the same way a conductor would say how many trumpets are needed, which ones play first trumpet, and how loud each should play, a container orchestrator would say how many web server front end containers are needed, what they serve, and how many resources are to be dedicated to each one.‚Äù Egts explains&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AJQAFgj5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zjlm9jwe4e6ul0et6ayd.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AJQAFgj5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zjlm9jwe4e6ul0et6ayd.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#k8s-in-practice"&gt;
  &lt;/a&gt;
  K8s in practice
&lt;/h2&gt;

&lt;p&gt;Now that we have a good understanding of what Kubernetes is, let‚Äôs see it in practice.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#in-this-tutorial-we-will"&gt;
  &lt;/a&gt;
  In this tutorial, we will:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Create a simple http server with &lt;a href="https://golang.org/"&gt;golang&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Deploy a k8s cluster, we will use &lt;a href="https://k3s.io/"&gt;K3s&lt;/a&gt; (a lightweight Kubernetes distribution)&lt;/li&gt;
&lt;li&gt;Deploy the golang server on top of K8s&lt;/li&gt;
&lt;li&gt;Expose the server to the outer world to be able to access it over the internet.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Linux based machine (Ubuntu or Centos)- For Windows you can use &lt;a href="https://minikube.sigs.k8s.io/docs/start/"&gt;MiniKube&lt;/a&gt; or &lt;a href="https://kind.sigs.k8s.io/docs/user/quick-start/"&gt;Kind&lt;/a&gt; instead of K3s and almost everything else should remain the same.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.docker.com/"&gt;Docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Golang (this tutorial assumes version 1.15.3 but older versions should work as well)&lt;/li&gt;
&lt;li&gt;A docker registry account (you can create an account for free on &lt;a href="https://hub.docker.com/"&gt;dockerhub&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now let‚Äôs get our hands dirty!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Install golang following the steps mentioned &lt;a href="https://golang.org/doc/install"&gt;here&lt;/a&gt;. Then create a folder in any location of your choice. In this tutorial I will be using the following path as the root folder to my project &lt;code&gt;/root/tutorial/&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Create a simple http go server. Use the following code block and save it in &lt;code&gt;/root/tutorial&lt;/code&gt; under any name. I will refer to it as &lt;code&gt;server.go&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package main

import (
"fmt"
"log"
"net/http"
)

func helloHandler(w http.ResponseWriter, r *http.Request) {
    if r.URL.Path != "/hello" {
        http.Error(w, "404 not found.", http.StatusNotFound)
        return
    }
    if r.Method != "GET" {
        http.Error(w, "Method is not supported.", http.StatusNotFound)
        return
    }
    fmt.Fprintf(w, "Hello!")
}

func main() {
    http.HandleFunc("/hello", helloHandler) // Update this line of code
    fmt.Printf("Starting server at port 8080\n")
    if err := http.ListenAndServe(":8080", nil); err != nil {
        log.Fatal(err)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Make sure everything is setup correctly and the files runs correctly by running the following command &lt;code&gt;$ go run server.go&lt;/code&gt; You should be able to see &lt;strong&gt;‚ÄúStarting server at port 8080‚Äù&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Next step is to build our go project into an executable. Run the following command at the root directory of the project(where server.go occurs)
&lt;code&gt;$ GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build .&lt;/code&gt; You should be able to see a newly created file with no extension.&lt;/li&gt;
&lt;li&gt;To complete the next steps we‚Äôll need to create a &lt;a href="http://dockerhub.com/"&gt;dockerhub&lt;/a&gt; account. You can signup on it for free. We will need an account on dockerhub on any registry to push the docker image that we will create.&lt;/li&gt;
&lt;li&gt;Then we need to containerize our server to run it inside a container. First we will need to install docker. After installing docker successfully, we can then build a docker image for our server. To do that, copy the following code block into a file named &lt;code&gt;Dockerfile&lt;/code&gt; inside &lt;code&gt;/root/tutorial&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;FROM alpine

WORKDIR /home/

ADD tutorial /home/

CMD ./tutorial
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Afterwards run the following command&lt;br&gt;
&lt;code&gt;$ docker build . -t &amp;lt;dockerhub-username&amp;gt;/tutorial&lt;/code&gt; where you should replace &lt;code&gt;&amp;lt;dockerhub-username&amp;gt;&lt;/code&gt; with your username on dockerhub.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Login using docker cli command &lt;code&gt;$ docker login -u &amp;lt;dockerhub-username&amp;gt;&lt;/code&gt; Then push the created image to dockerhub &lt;code&gt;$ docker push &amp;lt;dockerhub-username&amp;gt;/tutorial&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Now that our docker image is ready, we can use K8s to deploy and manage for us container(s) from that image. To do that, let‚Äôs install &lt;a href="https://k3s.io/"&gt;K3s&lt;/a&gt; first. I am using K3s for this tutorial as I find it a great reliable and lightweight distribution for K8s, perfect for development and edge (environments with limited resources) deployments. To install it you just need to run &lt;code&gt;$ curl -sfL https://get.k3s.io | sh -&lt;/code&gt; That‚Äôs it! That is all what you need to do in order to have a functional Kubernetes cluster.&lt;/li&gt;
&lt;li&gt;Next we want to create a k8s deployment file for our image. Copy and paste the following code block on your machine.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;apiVersion: apps/v1
kind: Deployment
metadata:
  name: go-server-deployment
  labels:
    app: go-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: go-server
  template:
    metadata:
      labels:
        app: go-server
    spec:
      containers: 
      - name: go-server
        image: &amp;lt;dockerhub-username&amp;gt;/tutorial #replace the variable with your username on dockerhub
        ports:
        - containerPort: 8080 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Now we want to instruct k8s to create that deployment for us. To do that we need to run &lt;code&gt;$ kubectl create -f tutorial-deployment.yaml&lt;/code&gt; To validate the deployment was created successfully, we should run &lt;code&gt;$ kubectl get pods&lt;/code&gt; and we should be able to see something similar to
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;NAME                        READY   STATUS    RESTARTS   AGE
go-server-deployment-xxxx   1/1     Running   0          65m
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;We are almost there, we have everything set by now and K8s is currently managing our container for us. The only missing step is to expose our pod to the outer world in order to be able to access it over the internet. To achieve that we just need to run the following command
&lt;code&gt;$ kubectl expose deployment go-server-deployment --type=NodePort&lt;/code&gt;
This command will expose our deployment to the outer world on a random port. To identify that random port, we need to run &lt;code&gt;$ kubectl get svc&lt;/code&gt; we should be able to see a service that got created for us
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;NAME         TYPE        CLUSTER-IP    EXTERNAL-IP   PORT(S)     AGE
kubernetes  ClusterIP     x.x.x.x       &amp;lt;none&amp;gt;      443/TCP      87m
go-xxx       NodePort     x.x.x.x       &amp;lt;none&amp;gt;    8080:31628/TCP 37m
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Under PORT(s) column we should be able to find &lt;code&gt;8080:&amp;lt;external-random-port&amp;gt;&lt;/code&gt; We can then use our machine IP and that external port that k8s assigned for our service in order to access our server. This can be tested from any browser by visiting &lt;code&gt;http://&amp;lt;machine-ip&amp;gt;:&amp;lt;external-port&amp;gt;/hello&lt;/code&gt; We should be able to see &lt;code&gt;Hello!&lt;/code&gt; in the browser.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IVQPcRhq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/515dbi4qufk5lyc8z5pz.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IVQPcRhq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/515dbi4qufk5lyc8z5pz.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That‚Äôs all folks üéâ&lt;/p&gt;

&lt;p&gt;A quick recap of what we have accomplished here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Implemented a simple http server using golang&lt;/li&gt;
&lt;li&gt;Dockerized our server and pushed the image on Dockerhub&lt;/li&gt;
&lt;li&gt;Installed and Deployed a functional single node k8s cluster&lt;/li&gt;
&lt;li&gt;Used k8s to deploy and manage the http server container for us&lt;/li&gt;
&lt;li&gt;Exposed our server to the outer world through k8s&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Disclaimer: all code files used are not meant for production use, they just show the functionality. You will need to introduce some changes to make them production ready&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>kubernetes</category>
      <category>cloudnative</category>
      <category>go</category>
      <category>docker</category>
    </item>
    <item>
      <title>How To Use Web Worker</title>
      <author>Bibek</author>
      <pubDate>Sat, 08 May 2021 19:41:58 +0000</pubDate>
      <link>https://dev.to/bibekkakati/how-to-use-web-worker-27gi</link>
      <guid>https://dev.to/bibekkakati/how-to-use-web-worker-27gi</guid>
      <description>&lt;p&gt;Hello everyoneüëã&lt;/p&gt;

&lt;p&gt;In this article, we will see how can we use Web Worker API on our website to avoid blocking thread while doing CPU intensive task.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#web-worker"&gt;
  &lt;/a&gt;
  Web Worker
&lt;/h3&gt;

&lt;p&gt;A web worker is a JavaScript that runs in the background, independently of other scripts, without affecting the performance of the page.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-does-that-mean"&gt;
  &lt;/a&gt;
  What does that mean?
&lt;/h4&gt;

&lt;p&gt;As we all know, JavaScript is a single-threaded language so when executing scripts the site becomes unresponsive until the scripts are finished. &lt;/p&gt;

&lt;p&gt;To avoid blocking the interaction of the site we can spawn a worker that will execute the scripts in the background. Thus, we can improve the performance of our website.&lt;/p&gt;

&lt;p&gt;Web Workers uses a background thread separate from the main execution thread of a web application.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  Implementation
&lt;/h3&gt;

&lt;p&gt;Let's explore the Web Worker API.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#check-for-browser-support"&gt;
  &lt;/a&gt;
  Check For Browser Support
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Worker&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;undefined&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// It support&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will understand the implementation with a basic example. The parent script will pass a number to the worker script and it will calculate the square root of that number and return to the parent script.&lt;/p&gt;

&lt;p&gt;Worker object and worker script have some event listeners with the help of which we can communicate and handle errors.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u6JEqVkR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0cs1dlgfoisdlx6znjk1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u6JEqVkR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0cs1dlgfoisdlx6znjk1.jpg" alt="web-workers.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#parent-script"&gt;
  &lt;/a&gt;
  Parent Script
&lt;/h3&gt;

&lt;p&gt;This javascript file will be running in the main thread.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#create-worker"&gt;
  &lt;/a&gt;
  Create Worker
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Creates a new worker object&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;worker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Worker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./worker.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#receive-data"&gt;
  &lt;/a&gt;
  Receive Data
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Listen for data from the worker script&lt;/span&gt;
&lt;span class="nx"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onmessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Access the data from event object&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#on-error"&gt;
  &lt;/a&gt;
  On Error
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Listen for error&lt;/span&gt;
&lt;span class="nx"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onerror&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Access the message from error object&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#send-data"&gt;
  &lt;/a&gt;
  Send Data
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Send data to the worker script&lt;/span&gt;
&lt;span class="nx"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;postMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#terminate-worker"&gt;
  &lt;/a&gt;
  Terminate Worker
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Immediately terminates the worker&lt;/span&gt;
&lt;span class="nx"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;terminate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#worker-script"&gt;
  &lt;/a&gt;
  Worker Script
&lt;/h3&gt;

&lt;p&gt;Now we will create the javascript file &lt;code&gt;worker.js&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Listen for data from the parent script&lt;/span&gt;
&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onmessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Access the data from event object&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// Sending data to the parent script&lt;/span&gt;
  &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;postMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// It fires when message can't be deserialized&lt;/span&gt;
&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onmessageerror&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#web-worker-access"&gt;
  &lt;/a&gt;
  Web Worker Access
&lt;/h3&gt;

&lt;p&gt;Web Workers do not have access to the following JavaScript objects.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;window&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;document&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;parent&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Web Workers are used for more CPU intensive or heavy task like encryption, compression, long-polling etc.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example‚ú®
&lt;/h3&gt;

&lt;p&gt;Check out the &lt;a href="https://github.com/bibekkakati/blogs-projects/tree/main/web/web-worker-api"&gt;GitHub repo&lt;/a&gt; for sample code.&lt;/p&gt;

&lt;p&gt;Try it out &lt;a href="https://bibekkakati.github.io/blogs-projects/web/web-worker-api/index.html"&gt;here&lt;/a&gt;.&lt;/p&gt;




&lt;p&gt;Enjoyed? Give it a thumbs-up üëç&lt;/p&gt;

&lt;p&gt;Thank you for reading | Feel free to &lt;a href="https://bibekkakati.me"&gt;connect&lt;/a&gt; üëã&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Originally published on &lt;a href="https://blog.bibekkakati.me/how-to-use-web-worker"&gt;blog.bibekkakati.me&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/bibekkakati"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7pOmeWpX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.buymeacoffee.com/button-api/%3Ftext%3DBuy%2520me%2520a%2520coffee%26emoji%3D%26slug%3Dbibekkakati%26button_colour%3DFFDD00%26font_colour%3D000000%26font_family%3DCookie%26outline_colour%3D000000%26coffee_colour%3Dffffff"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>webdev</category>
      <category>webperf</category>
    </item>
  </channel>
</rss>
