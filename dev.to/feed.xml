<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Why Has React Js Become So Popular Among Specialists?</title>
      <author>Hitesh Chauhan</author>
      <pubDate>Thu, 18 Nov 2021 13:08:29 +0000</pubDate>
      <link>https://dev.to/hiteshtbi/why-has-react-js-become-so-popular-among-specialists-3ni7</link>
      <guid>https://dev.to/hiteshtbi/why-has-react-js-become-so-popular-among-specialists-3ni7</guid>
      <description>&lt;p&gt;React Js is a popular open-source JavaScript library that allows you to create stunning web apps with little effort and coding. React Js' main goal is to create engaging User Interfaces (UI) while also increasing the speed of apps.   A Facebook giant of social media has discovered the  React Js programming language for the developer to make the tasks easy. Furthermore, React Js can use Node to render on the server. Developers can also use React Native to create native apps. So, to develop your web application, get in touch with the React Js web development company who will help you in the growth of your business.&lt;/p&gt;

&lt;p&gt;The flexibility of the React Js comes from the fact that it uses single components, allowing the developer to break down complex UI components into smaller pieces. React Js is honored to be affiliated with top-tier companies such as Yahoo, BBC, Instagram, Netflix, PayPal, and many more. Perhaps to build similar web applications for your brand, you will need to &lt;a href="https://www.brihaspatitech.com/hire-react-js-developer"&gt;hire React js developer&lt;/a&gt; who is expertise in the specific industry.&lt;/p&gt;

&lt;h3&gt;Boon of React Js for the Web Development Process&lt;/h3&gt;

&lt;p&gt;According to the statistics, the United States is the most prevalent use of React js followed by other developed countries like Russia, China, the United Kingdom, and Japan. It depicts that most people are using React Js for their websites. React Js is a feasible option for professionals who are trying to find a simple programming language beyond Angular.  &lt;/p&gt;

&lt;p&gt;When the specialists were working with the other frameworks, they were obliged to do a lot of sophisticated coding when creating individual comments. React Js has fixed a lot of this problem, thanks to Facebook. The developers also have the option of reusing the code that speeds up the project execution. However, we have mentioned the traits of the React Js.&lt;/p&gt;

&lt;h3&gt;Easier to make adaptive Web applications with React Js&lt;/h3&gt;

&lt;p&gt;With the help of the React js web development company, you can get your dynamic online application. In fact, we know that it is awkward to develop an app with HTML strings and a difficult task that necessitates extensive coding. So, with React Js the problem is solved. React Js uses JSX syntax that further allows HTML quotes and HTML tag syntax to render the subcomponents. Moreover, it allows the mixing of the various components into a single time variable file.&lt;/p&gt;

&lt;h3&gt;Professionals can reuse the components&lt;/h3&gt;

&lt;p&gt;Reusing the components is a significant asset for web application development developers. The developer can repurpose the elements used to create other applications with the same functionality. Otherwise, you can hire react js developer to build an application with all the functionalities. It will not only save the efforts but also the time consumption to complete the project.&lt;/p&gt;

&lt;p&gt;However, the react js involves less coding so, there are fewer chances of getting errors. Furthermore, it will enhance the speed of the application and will get more customer retention.&lt;/p&gt;

&lt;h3&gt;Easy to learn&lt;/h3&gt;

&lt;p&gt;With the inception of the React Js, it is definitely a plus point for the developers. If you are new to this field and want to learn about the development process, then we think React Js is the one that is very easy to grasp as compared to the other frameworks. Once you start using the React Js, you will become familiar with the features and easily develop web applications. Otherwise, you can approach React Js web development company to get your web application developed in the ReactJs framework.&lt;/p&gt;

&lt;p&gt;However, it is not full-featured but, it is an open-source javascript script library with which you can easily execute every task. With the help of reactjs, you can easily build a high-responsive web application in a short period.&lt;/p&gt;

&lt;h3&gt;Growth of Community&lt;/h3&gt;

&lt;p&gt;Over time, the community of React js has grown widely and making it easier for novice developers to find a library for any task. The developer does not have to build on their own. Moreover, if you want to develop apps with React js and find problems, You can get extended support from Facebook.&lt;/p&gt;

&lt;h3&gt;Use of Practical Tools&lt;/h3&gt;

&lt;p&gt;Although, react js has earned a great reputation for having a useful collection of tools that makes the job of the developers easier. However, you will find React developer tools as a chrome developer add-on. You can easily examine the reactive component hierarchies along with the components of the present state and props.&lt;/p&gt;

&lt;h3&gt;Wind-Up&lt;/h3&gt;

&lt;p&gt;React Js has become so popular that it allows developers to create extremely engaging web apps and user interfaces in a short period. Also, it enables the specialist to reuse the components and build SPA with less coding. Hence, you can contact &lt;a href="https://www.brihaspatitech.com/react-js-development-company"&gt;React js web development company&lt;/a&gt; to create large-scale web apps. By collaborating with a leading agency, you can hire Reactjs developers to establish your full-featured web application at a very cost-effective price.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>discuss</category>
      <category>codequality</category>
    </item>
    <item>
      <title>What is QA Audit?</title>
      <author>OKQA</author>
      <pubDate>Thu, 18 Nov 2021 12:51:10 +0000</pubDate>
      <link>https://dev.to/okqa/what-is-qa-audit-2701</link>
      <guid>https://dev.to/okqa/what-is-qa-audit-2701</guid>
      <description>&lt;p&gt;QA audit is a great opportunity to supercharge your product. You get comprehensive testing along with unbiased feedback from an independent team of QA engineers on the product quality.&lt;/p&gt;

&lt;p&gt;QA audit includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Deep QA analysis&lt;/li&gt;
&lt;li&gt;Identification of software vulnerabilities&lt;/li&gt;
&lt;li&gt;Recommendations and guidance for product quality improvement.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Interested? Let's discuss and start a new project together.&lt;br&gt;
&lt;a href="https://ok-qa.com/"&gt;https://ok-qa.com/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>testing</category>
      <category>okqa</category>
      <category>qa</category>
    </item>
    <item>
      <title>Top signs that you need a QA audit</title>
      <author>OKQA</author>
      <pubDate>Thu, 18 Nov 2021 12:50:17 +0000</pubDate>
      <link>https://dev.to/okqa/top-signs-that-you-need-a-qa-audit-1jb8</link>
      <guid>https://dev.to/okqa/top-signs-that-you-need-a-qa-audit-1jb8</guid>
      <description>&lt;p&gt;=&amp;gt; If you have hold-ups in time-to-market due to hot last-minute bug fixes.&lt;br&gt;
=&amp;gt; If you do not have a clear understanding of the product quality or its bottlenecks.&lt;br&gt;
=&amp;gt; If you want to get independent and unbiased feedback on the developed product quality and its compliance with stated business requirements.&lt;br&gt;
=&amp;gt; If the current QA processes do not allow to scale or keep up with the workload increase.&lt;/p&gt;

&lt;p&gt;One of the following situations sounds familiar? Let's see how a comprehensive QA audit can help.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://ok-qa.com/"&gt;https://ok-qa.com/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>testing</category>
      <category>qa</category>
      <category>okqa</category>
    </item>
    <item>
      <title>Async, refactoring and fewer bugs: Rust block expressions to the rescue</title>
      <author>Igor Petruk</author>
      <pubDate>Thu, 18 Nov 2021 12:48:54 +0000</pubDate>
      <link>https://dev.to/igorpetruk/async-refactoring-and-fewer-bugs-rust-block-expressions-to-the-rescue-ef0</link>
      <guid>https://dev.to/igorpetruk/async-refactoring-and-fewer-bugs-rust-block-expressions-to-the-rescue-ef0</guid>
      <description>&lt;p&gt;One of the pretty neat features of Rust I'd like to talk about is block expressions. This subtle feature does not receive enough justice as everyone is focused on more prominent language features. They help sealing unnecessary variables, cleaning up scope and have many other advantages. I’d like to go over a few examples. &lt;/p&gt;

&lt;p&gt;First of all, a little intro.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;func1&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;func2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;func3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nf"&gt;func4&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nf"&gt;func5&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here the code could be divided into two blocks. The first declares multiple variables that are ultimately used to produce &lt;code&gt;c&lt;/code&gt; and then &lt;code&gt;c&lt;/code&gt; is used later in the code. This pattern is not fully artificial, it can be found in many relatively long functions. &lt;/p&gt;

&lt;p&gt;In Rust, blocks that are delimited by &lt;code&gt;{...}&lt;/code&gt; are expressions and are evaluated to a value. There is a way to rewrite this code using block expressions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;func1&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;func2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nf"&gt;func3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nf"&gt;func4&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nf"&gt;func5&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This code has some subtle differences to the first example. Blocks limit the scope of variables. &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are internal to the block so they are not visible in the outer scope and &lt;code&gt;drop&lt;/code&gt; is applied to them at the block closing line. As simple as that. Using block expressions is a matter of code style that can be applied to suitable code. &lt;/p&gt;

&lt;p&gt;When applied, blocks bring some advantages that are not immediately obvious. Let's take a look.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#refactoring"&gt;
  &lt;/a&gt;
  Refactoring
&lt;/h2&gt;

&lt;p&gt;Block expressions offer a good ground in preparation for future refactoring. When a block expression is used you can guarantee that internal variables are not used anywhere else in the outer function. This makes the code in the block ready to be easily turned into a standalone function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="c"&gt;// Make b&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;func1&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;func2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c"&gt;// Well, let's imagine it is a lot of code to get here.&lt;/span&gt;
&lt;span class="c"&gt;// Use b&lt;/span&gt;
&lt;span class="nf"&gt;func3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yay, let’s move that to a function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;compute_b&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;u32&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;func1&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
   &lt;span class="nf"&gt;func2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;compute_b&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nf"&gt;func3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="c"&gt;// 100 lines below:&lt;/span&gt;
&lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Btw, important to know, a={}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c"&gt;/// Compilation error, uff!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Easy to fix probably, but it makes refactoring unpleasant, it does not satisfyingly click. Was it really important to use that a far below? Maybe yes, but often it does not matter and this code is a result of having scope hygiene as an afterthought. Block expressions help us limit the scope to just the right amount.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#no-boilerplate-variables-in-the-top-scope"&gt;
  &lt;/a&gt;
  No boilerplate variables in the top scope
&lt;/h2&gt;

&lt;p&gt;Let's up the game and see a &lt;a href="https://tokio.rs/"&gt;Tokio&lt;/a&gt; example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;String&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello World"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;a_clone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="nf"&gt;.clone&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;  &lt;span class="c"&gt;//  I feel pain each time seeing this.&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;tokio&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;spawn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;move&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;a_clone&lt;/span&gt;&lt;span class="nf"&gt;.to_uppercase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;tokio&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;spawn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;move&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="nf"&gt;.to_lowercase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"upper={:?}, lower={:?}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;a_clone&lt;/code&gt; variable is ugly, but we need it. Two closures need to own their own copies of &lt;code&gt;String&lt;/code&gt; (using &lt;code&gt;Arc&lt;/code&gt; does not fix it), so &lt;code&gt;a_clone&lt;/code&gt; is moved to the first closure, and original &lt;code&gt;a&lt;/code&gt; ends up in the second closure. Let’s attempt a block expression style:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;String&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello World"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="nf"&gt;.clone&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nn"&gt;tokio&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;spawn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;move&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="nf"&gt;.to_uppercase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;tokio&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;spawn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;move&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="nf"&gt;.to_lowercase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"upper={:?}, lower={:?}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This does not look simpler than what we had before at a first glance, but this code has a few benefits. a can remain a and does not need a new name. The outer scope remains clean so you can easily distinguish top variables by the indentation of their &lt;code&gt;let&lt;/code&gt; and hide boilerplate variables to the second level of indentation. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#no-unnecessary-mut-variables-in-the-top-scope"&gt;
  &lt;/a&gt;
  No unnecessary mut variables in the top scope
&lt;/h2&gt;

&lt;p&gt;Here is another example. PathBuf. PathBuf::push only works on mutable instances.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;sub_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dir&lt;/span&gt;&lt;span class="nf"&gt;.ok_or_else&lt;/span&gt;&lt;span class="p"&gt;(||&lt;/span&gt; &lt;span class="nd"&gt;format_err!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Cannot get dir"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;sub_dir&lt;/span&gt;&lt;span class="nf"&gt;.push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"sub"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;


&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;sub_dir&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt; &lt;span class="n"&gt;remains&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;rest&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;scope&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;we&lt;/span&gt; &lt;span class="n"&gt;don&lt;/span&gt;&lt;span class="nv"&gt;'t&lt;/span&gt; &lt;span class="n"&gt;like&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Rust&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="n"&gt;we&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;sub_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dir&lt;/span&gt;&lt;span class="nf"&gt;.ok_or_else&lt;/span&gt;&lt;span class="p"&gt;(||&lt;/span&gt; &lt;span class="nd"&gt;format_err!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Cannot get dir"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="nf"&gt;.push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"sub"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="n"&gt;d&lt;/span&gt;
   &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The mutability of the variable is confined inside the initialization block.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fewer-bugs"&gt;
  &lt;/a&gt;
  Fewer bugs
&lt;/h2&gt;

&lt;p&gt;Now let’s use some Tokio channels.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;#[tokio::main]&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nb"&gt;Box&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;dyn&lt;/span&gt; &lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;rx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;tokio&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;sync&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;mpsc&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;sender&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;tx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tx&lt;/span&gt;&lt;span class="nf"&gt;.clone&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nn"&gt;tokio&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;spawn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;move&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;tx&lt;/span&gt;&lt;span class="nf"&gt;.send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Sent {} from sender {}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nf"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rx&lt;/span&gt;&lt;span class="nf"&gt;.recv&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Received {}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(())&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let’s check the output.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Sent 0 from sender 0
Sent 0 from sender 1
Sent 1 from sender 0
Received 0
Received 0
Received 1
Sent 2 from sender 0
Sent 3 from sender 0
Sent 1 from sender 1
Received 2
Received 3
Received 1
Sent 2 from sender 1
Sent 3 from sender 1
Sent 4 from sender 0
Received 2
Received 4
Received 3
Sent 4 from sender 1
Received 4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Looks correct… Nope, I’ve tricked you here. The text output is correct but the program does not exit! Can you spot the issue?&lt;/p&gt;

&lt;p&gt;&lt;code&gt;tx&lt;/code&gt; is being cloned in the loop, so each async co-routine has its own channel &lt;code&gt;Sender&lt;/code&gt;. The problem is that the original &lt;code&gt;tx&lt;/code&gt; remains existing until the end of the &lt;code&gt;main&lt;/code&gt; function, but listening on &lt;code&gt;rx&lt;/code&gt; is expected to only finish when all &lt;code&gt;tx&lt;/code&gt; are dropped.&lt;/p&gt;

&lt;p&gt;Indeed, &lt;code&gt;drop&lt;/code&gt; fixes the issue and the program successfully terminates.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;    &lt;span class="k"&gt;drop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nf"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rx&lt;/span&gt;&lt;span class="nf"&gt;.recv&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yuck, this is like calling &lt;code&gt;free()&lt;/code&gt; from C, otherwise it leaks. In my Rust. The Earl of Lemongrab screams “Unacceptable!”. &lt;/p&gt;

&lt;p&gt;Since this article is about block expressions (a.k.a. “a hammer”), every problem is a nail. Let’s try. Thankfully block expressions are about things not leaking in scope further than needed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;#[tokio::main]&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nb"&gt;Box&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;dyn&lt;/span&gt; &lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;rx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;tokio&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;sync&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;mpsc&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;sender&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;tx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tx&lt;/span&gt;&lt;span class="nf"&gt;.clone&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="nn"&gt;tokio&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;spawn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;move&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;tx&lt;/span&gt;&lt;span class="nf"&gt;.send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                    &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Sent {} from sender {}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;rx&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nf"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rx&lt;/span&gt;&lt;span class="nf"&gt;.recv&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Received {}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(())&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It works and terminates! It does not need a &lt;code&gt;drop&lt;/code&gt; call. Wait, but we have been promised that refactoring is easy with block expressions, let’s try that.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;spawn_senders&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Receiver&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;u32&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;tokio&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;sync&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;mpsc&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;sender&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;tx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tx&lt;/span&gt;&lt;span class="nf"&gt;.clone&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nn"&gt;tokio&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;spawn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;move&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;tx&lt;/span&gt;&lt;span class="nf"&gt;.send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Sent {} from sender {}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;rx&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nd"&gt;#[tokio::main]&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nb"&gt;Box&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;dyn&lt;/span&gt; &lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;rx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;spawn_senders&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nf"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rx&lt;/span&gt;&lt;span class="nf"&gt;.recv&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Received {}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(())&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yes, it was. The block content is unchanged. We prepared for potential refactoring ahead of time and avoided a leak.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#performance"&gt;
  &lt;/a&gt;
  Performance
&lt;/h2&gt;

&lt;p&gt;Longevity of objects can impact performance. I will show the most prominent example: lock guards.&lt;/p&gt;

&lt;p&gt;Let’s say we need to process data from two &lt;code&gt;RwLocks&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;slowly_process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;i32&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nn"&gt;tokio&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;time&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;Duration&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from_millis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;process_data_from_two_locks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Arc&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;RwLock&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;i32&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Arc&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;RwLock&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;i32&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;i32&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="nf"&gt;.read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="nf"&gt;.read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nf"&gt;slowly_process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nd"&gt;#[tokio::main]&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nb"&gt;Box&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;dyn&lt;/span&gt; &lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Arc&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;RwLock&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Arc&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;RwLock&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;writer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="nf"&gt;.clone&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nn"&gt;tokio&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;spawn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;move&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Instant&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;now&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="nn"&gt;tokio&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;time&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;Duration&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from_millis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="c"&gt;// A bit late to be first to the lock...&lt;/span&gt;
            &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="nf"&gt;.write&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="s"&gt;"Writing took 100ms! Wait... It took: {:?}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nn"&gt;Instant&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;
            &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;process_data_from_two_locks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Result: {}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(())&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We run our program and it prints&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Result: 3
Writing took 100ms! Wait... It took: 1.000505585s
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our writer was delayed a bit, processing took over and apparently locks were held for 1 second. The issue is caused by the fact that &lt;code&gt;slowly_process()&lt;/code&gt; runs with both read locks held. The read locks are implicit scope guarded locks and they are only dropped at the end of the function, when the references go out of scope.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;process_data_from_two_locks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Arc&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;RwLock&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;i32&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Arc&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;RwLock&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;i32&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;i32&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="nf"&gt;.read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="nf"&gt;.read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nf"&gt;slow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is a relatively well known pitfall with scope guarded locks, whether it is &lt;code&gt;defer&lt;/code&gt; from Go or &lt;code&gt;std::lock_guard&lt;/code&gt; from C++. If scope is used to lock and unlock the data, that scope must be minimal.&lt;/p&gt;

&lt;p&gt;I am not going to say “Let’s fix it with Rust block expressions”. Instead I will say “If we used blocked expressions from the beginning, this would not have happened”. Or simply “I told you so”.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;process_data_from_two_locks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Arc&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;RwLock&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;i32&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Arc&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;RwLock&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;i32&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;i32&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="nf"&gt;.read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="nf"&gt;.read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="nf"&gt;slow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As a result:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Writing took 100ms! Wait... It took: 101.377406ms
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This example has a shortcut. It was smooth because &lt;code&gt;i32&lt;/code&gt; is a &lt;code&gt;Copy&lt;/code&gt; type. Read locks in general only allow you to borrow the data inside while you hold the lock. To release it earlier you need to copy the data you need out of the block. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="nf"&gt;.read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="py"&gt;.field&lt;/span&gt;&lt;span class="nf"&gt;.clone&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Trade-off is yours to consider.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I’ve shown benefits that such a shy Rust feature as block expressions can bring to your code. It should help you to keep your scope clean and can positively impact your programs at runtime.&lt;/p&gt;

&lt;p&gt;Goes without saying, every tool must be used sparingly. The cost of block expressions is the depth of indentation and if overused it can make your programs unreadable. Let’s apply our best judgment.&lt;/p&gt;

&lt;p&gt;I hope this was helpful. This is my first shot at writing articles at dev.to. I hope to keep this up.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br&gt;
Igor.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Unless otherwise noted, the code on this site is made available to you under the Apache 2.0 license. Copyright 2021 Google LLC.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>rust</category>
      <category>codequality</category>
      <category>programming</category>
    </item>
    <item>
      <title>Why is it important to run an independent QA?</title>
      <author>OKQA</author>
      <pubDate>Thu, 18 Nov 2021 12:48:51 +0000</pubDate>
      <link>https://dev.to/okqa/why-is-it-important-to-run-an-independent-qa-191l</link>
      <guid>https://dev.to/okqa/why-is-it-important-to-run-an-independent-qa-191l</guid>
      <description>&lt;ul&gt;
&lt;li&gt;It enhances the quality of the final product with unbiased feedback aimed to meet customers' requirements, needs, and expectations.&lt;/li&gt;
&lt;li&gt;It provides a clear and objective report on critical vulnerabilities, the quality of the developed software, its compliance with expected performance metrics, and business goals.&lt;/li&gt;
&lt;li&gt;It gives you access to the necessary skills and expertise, on-demand QA resources well-versed with the latest tech trends.&lt;/li&gt;
&lt;li&gt;It helps to detect flaws and glitches the team that created the product might have missed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Get independent and unbiased feedback on your product quality. A comprehensive QA audit is just a message away. &lt;a href="https://ok-qa.com/"&gt;https://ok-qa.com/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>testing</category>
      <category>qa</category>
      <category>okqa</category>
    </item>
    <item>
      <title>Introducing IPNS-Link</title>
      <author>Somajit Dey</author>
      <pubDate>Thu, 18 Nov 2021 12:41:31 +0000</pubDate>
      <link>https://dev.to/somajitdey/introducing-ipns-link-3bp2</link>
      <guid>https://dev.to/somajitdey/introducing-ipns-link-3bp2</guid>
      <description>&lt;p&gt;You have just built your first website or web-app, from the ground up. You configure and launch a local server - Apache, Nginx or Caddy - and point your browser to &lt;code&gt;http://localhost&lt;/code&gt;. And, IT WORKS! Your dream is right in front of you, a concept realized - a special moment that would remain with you forever! Awesome. &lt;/p&gt;

&lt;p&gt;Now, what's next? Of course, you want to share it with everybody out there, and you want it to last. So, first of all, you'd need a machine that would stay online round the clock. Your Raspberry Pi is perfect for the job. Great. Now, you'd need ... whoops, first roadblock: your ISP doesn't assign you a public IP address, i.e. your server is not reachable from the internet. No problem, you'd just use any free service such as &lt;a href="https://ngrok.com"&gt;ngrok&lt;/a&gt;, &lt;a href="https://localhost.run"&gt;localhost.run&lt;/a&gt; or &lt;a href="https://getuplink.de"&gt;uplink&lt;/a&gt;. These services expose your site to the internet and provide an https-URL to access it. Everything works! Congrats.&lt;/p&gt;

&lt;p&gt;After your initial joy settles down, you realize the catch with these free plans. From time to time, you have to restart the exposure process and every time you do that the URL changes, the old URL becoming invalid. Your website has an ever-changing address on the internet. What good is that? Even if you were to pay them for a static URL, what would happen if and when the service shuts down?&lt;/p&gt;

&lt;p&gt;But, what other options do you have? You're a student, web-dev has just been an adventure and you can't really afford to get into all the hassles and costs involved in conventional web-hosting with your meagre pocket money and limited time. Are you really going to purchase a public IP or move your site to a premium hosting service? Are you prepared to spend on a domain name year after year and manage SSL setup for https?&lt;/p&gt;

&lt;p&gt;Despair not. &lt;a href="https://github.com/ipns-link/specs"&gt;IPNS-Link&lt;/a&gt; gives you the following alternative.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--st3p9oOS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dlrbxxfsyt7u3kidp8mp.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--st3p9oOS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dlrbxxfsyt7u3kidp8mp.jpg" alt="Illustration" width="880" height="417"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;IPNS-Link: Bob and Grace access Alice's localhost and a blocked website using a private and public gateway respectively.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;Install and run a free and open-source app on your local server (the Pi in your case), following &lt;a href="https://github.com/ipns-link/ipns-link/blob/main/tutorials/QuickStart.md"&gt;this&lt;/a&gt; easy tutorial.&lt;/li&gt;
&lt;li&gt;The app would give you a long &lt;a href="https://en.wikipedia.org/wiki/Universally_unique_identifier"&gt;UUID&lt;/a&gt;. You can make a &lt;a href="https://www.the-qrcode-generator.com/"&gt;QR code&lt;/a&gt; out of it for convenience.&lt;/li&gt;
&lt;li&gt;Send the UUID or QR code to all your friends and community.&lt;/li&gt;
&lt;li&gt;To access your site anytime, all they need to do is go to &lt;em&gt;any&lt;/em&gt; public IPNS-Link-Gateway, such as &lt;a href="https://www.ipns.live"&gt;ipns.live&lt;/a&gt; and put your UUID in there. Or, better yet, they can &lt;a href="https://github.com/ipns-link/ipns-link-gateway#self-hosting"&gt;run their own private gateway locally on their computer&lt;/a&gt;, and access your site directly, without any middle-man.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;That's it!&lt;/strong&gt; You distribute that UUID to your audience once and for all, and you're set. Even if you later port your site to a VPS or cloud hosting provider (e.g. AWS EC2 free-tier), your site can still be accessed using the same UUID. Even if you later get a domain name for your site and make it accessible from the main-stream web, the IPNS-Link exposure would continue to provide your users with decentralized routes to your site. This helps in case your domain is ever &lt;a href="https://ipns-link.medium.com/introducing-ipns-link-36a14c87a4aa"&gt;taken down or blocked&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;IPNS-Link uses the InterPlanetary File System (IPFS) network behind the scenes. &lt;a href="https://docs.ipfs.io/concepts/ipns/"&gt;IPNS&lt;/a&gt;, or Interplanetary Name System, is a subsystem built atop IPFS. Curious? Start &lt;a href="https://ipfs.io"&gt;here&lt;/a&gt; and work your way up to the &lt;a href="https://github.com/ipns-link/specs"&gt;IPNS-Link specs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Like what IPNS-Link's doing? Spread the word (&lt;a href="https://ipns-link.medium.com/"&gt;here&lt;/a&gt;'s another blog). Usher in a micro-hosting movement for the decentralized web to learn, experiment, tinker, showcase and grow, worry-free. &lt;a href="https://github.com/ipns-link/contribute#join-the-community"&gt;Join the community&lt;/a&gt; and be a part. &lt;a href="https://github.com/ipns-link/contribute"&gt;Contribute&lt;/a&gt; any way you can.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Happy Hosting!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>webhosting</category>
      <category>ipfs</category>
      <category>domainless</category>
      <category>uncensorable</category>
    </item>
    <item>
      <title>From my point of Vue: Headless components</title>
      <author>Jesus Guerrero</author>
      <pubDate>Thu, 18 Nov 2021 12:40:59 +0000</pubDate>
      <link>https://dev.to/jesusantguerrero/from-my-point-of-vue-headless-components-2403</link>
      <guid>https://dev.to/jesusantguerrero/from-my-point-of-vue-headless-components-2403</guid>
      <description>&lt;p&gt;Hello there. This is the second article of the series "From my point of Vue", where we are going to discuss, explore, learn about some interesting topics from a Vue.js perspective.&lt;/p&gt;

&lt;p&gt;Today we are going to explore Headless components I would consider this a middle/advanced topic, so previous knowledge of Vue.js will be required to better grasp the examples, the concept though, is global and you can take advantage of this on any other framework.&lt;/p&gt;

&lt;p&gt;Without more delay, let's start.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;While creating applications you will find yourself either doing the same components with the same logic many times with different User Interface(UI) or installing packages with an opinionated design that have a very different look from the design of your app. It shouldn't be so hard to customize simple components like inputs, labels, buttons but when it comes to complex components like Selects, Tabs, Step Wizards things might be a little harder if the component wasn't created with UI flexibility in mind, and here is where &lt;strong&gt;Headless components&lt;/strong&gt; come to the rescue.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-headless-components"&gt;
  &lt;/a&gt;
  What are headless components?
&lt;/h2&gt;

&lt;p&gt;In plain words, headless components are the ones that handle the logic and behavior separated from the UI, giving the responsibility of how the component looks to the developer.&lt;/p&gt;

&lt;p&gt;The headless component can expose values and functions (state and controls) that will allow a child component to control certain parts of it and make UI decisions based on a state value. In other words, they are not attached to the UI but serves as support. &lt;/p&gt;

&lt;p&gt;This gives a huge advantage to share components across projects where their design are very different or to add variations of the same component: an upload component that the upload files as a list or carousel of images for example.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#background"&gt;
  &lt;/a&gt;
  Background
&lt;/h2&gt;

&lt;p&gt;The concept is not new, it's been discussed and implemented for a couple of years, I first heard of it when &lt;a href="https://twitter.com/adamwathan"&gt;Adam Watham&lt;/a&gt;, creator of Tailwind CSS, and its team launched  &lt;a href="https://headlessui.dev/"&gt;Headless UI&lt;/a&gt; libraries like &lt;a href="https://github.com/downshift-js/downshift"&gt;downshift&lt;/a&gt; by &lt;a href="https://kentcdodds.com/"&gt;Kent Dodds&lt;/a&gt; also used this pattern, just to mention a couple of cases.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-a-headless-component"&gt;
  &lt;/a&gt;
  Building a headless component
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#requirements-and-approach"&gt;
  &lt;/a&gt;
  Requirements and approach
&lt;/h3&gt;

&lt;p&gt;To illustrate let's build a headless Rate component with the following requirements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The user can specify the &lt;code&gt;count&lt;/code&gt; of how many stars should display.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Should expose the selected state.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Should expose the covered state.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To build this component we are going to use Tailwind CSS for styling, Vue 3 (&lt;a href="https://dev.to/jesusantguerrero/from-my-point-of-vue-composition-api-18de"&gt;the composition API&lt;/a&gt;) and codepen as a online editor.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-code"&gt;
  &lt;/a&gt;
  The code
&lt;/h3&gt;

&lt;p&gt;Here is how we defined our main component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;defineComponent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;createApp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;computed&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Vue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Rate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;defineComponent&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rate&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&amp;lt;div&amp;gt;
        &amp;lt;slot 
            v-for="current in range" 
            :key="current" 
            :current="current+1"
            :selected="isSelected(current+1)"
            :covered="isCovered(current+1)"
            :set-hovered="setHovered"
        &amp;gt;
            {{ current }}
        &amp;lt;/slot&amp;gt;
    &amp;lt;/div&amp;gt;
  `&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;modelValue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;count&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// state&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hoveredIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;range&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;computed&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;()];&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isCovered&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;modelValue&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;hoveredIndex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isSelected&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;modelValue&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// state functions&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;setHovered&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;hoveredIndex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;range&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;isSelected&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;isCovered&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;setHovered&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's explain what is happening here we have three main blocks&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The state&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;range&lt;/code&gt;: which is an array from 0 to the value we pass count for this case &lt;code&gt;[0, 1, 2, 3, 4]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;hoveredIndex&lt;/code&gt;: to store the last star we set the mouse over.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;isSelected&lt;/code&gt;: will return true if the value passed is the current rate.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;isCovered&lt;/code&gt;: will return true if the value passed is less than the current rate&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The controls&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;setHovered&lt;/code&gt;: will set the index of the start we put the mouse on.&lt;/p&gt;

&lt;p&gt;And &lt;strong&gt;the template&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;slot&lt;/span&gt; 
          &lt;span class="na"&gt;v-for=&lt;/span&gt;&lt;span class="s"&gt;"current in range"&lt;/span&gt; 
          &lt;span class="na"&gt;:key=&lt;/span&gt;&lt;span class="s"&gt;"current"&lt;/span&gt; 
          &lt;span class="na"&gt;:current=&lt;/span&gt;&lt;span class="s"&gt;"current+1"&lt;/span&gt;
          &lt;span class="na"&gt;:selected=&lt;/span&gt;&lt;span class="s"&gt;"isSelected(current+1)"&lt;/span&gt;
          &lt;span class="na"&gt;:covered=&lt;/span&gt;&lt;span class="s"&gt;"isCovered(current+1)"&lt;/span&gt;
          &lt;span class="na"&gt;:set-hovered=&lt;/span&gt;&lt;span class="s"&gt;"setHovered"&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          {{ current }}
      &lt;span class="nt"&gt;&amp;lt;/slot&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we are telling to this component: hey, render &lt;code&gt;n&lt;/code&gt; times whatever element I pass to you as a child and expose the current value, if is selected, if is covered and the function to set the hover.&lt;/p&gt;

&lt;p&gt;And this is exactly what we are going to do next.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-our-component"&gt;
  &lt;/a&gt;
  Using our component
&lt;/h3&gt;

&lt;p&gt;Now we'll use our component to render 5 stars and gives some style with Tailwind gray text for the color of the stars but yellow when is covered or selected and changing the value when we click and the hoverIndex with the mouseover and mouseout.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;...
  &lt;span class="nt"&gt;&amp;lt;h4&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"mt-4 mb-1 font-bold text-blue-900"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;How useful was the post?&lt;span class="nt"&gt;&amp;lt;/h4&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;Rate&lt;/span&gt; &lt;span class="na"&gt;v-model=&lt;/span&gt;&lt;span class="s"&gt;"rating"&lt;/span&gt; &lt;span class="na"&gt;:count=&lt;/span&gt;&lt;span class="s"&gt;"5"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"space-x-2 cursor-pointer"&lt;/span&gt; &lt;span class="na"&gt;v-slot:default=&lt;/span&gt;&lt;span class="s"&gt;"{ selected, covered, current, setHovered }"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; 
          &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;click=&lt;/span&gt;&lt;span class="s"&gt;"rating=current"&lt;/span&gt; 
          &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;mouseover=&lt;/span&gt;&lt;span class="s"&gt;"setHovered(current)"&lt;/span&gt;
          &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;mouseout=&lt;/span&gt;&lt;span class="s"&gt;"setHovered(0)"&lt;/span&gt;
          &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"font-bold text-gray-400 transition transform cursor-pointer hover:text-yellow-400 hover:scale-110"&lt;/span&gt; 
          &lt;span class="na"&gt;:class=&lt;/span&gt;&lt;span class="s"&gt;"[(selected || covered) ? 'text-yellow-500': 'text-gray-400']"&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; 
       &lt;span class="nt"&gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fa fa-star"&lt;/span&gt; &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/i&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;/Rate&amp;gt;&lt;/span&gt;
....
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lrA0CBTs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628779541636/tfi2G5RmG.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lrA0CBTs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628779541636/tfi2G5RmG.png" alt="image.png" width="249" height="95"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#changing-the-ui"&gt;
  &lt;/a&gt;
  Changing the UI
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#scale-rate"&gt;
  &lt;/a&gt;
  Scale rate
&lt;/h4&gt;

&lt;p&gt;To change to a scale rate for example we just need to change the UI without touching the logic anymore.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;  &lt;span class="c"&gt;&amp;lt;!-- Scale Rate --&amp;gt;&lt;/span&gt;
...
  &lt;span class="nt"&gt;&amp;lt;Rate&lt;/span&gt; &lt;span class="na"&gt;v-model=&lt;/span&gt;&lt;span class="s"&gt;"scale"&lt;/span&gt; &lt;span class="na"&gt;:count=&lt;/span&gt;&lt;span class="s"&gt;"10"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"space-x-2 cursor-pointer"&lt;/span&gt; &lt;span class="na"&gt;v-slot:default=&lt;/span&gt;&lt;span class="s"&gt;"{ current, selected }"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; 
        &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;click=&lt;/span&gt;&lt;span class="s"&gt;"scale=current"&lt;/span&gt; 
         &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"px-3 py-0.5 font-bold border border-gray-400 transition transform rounded-lg cursor-pointer hover:text-blue-400"&lt;/span&gt; 
         &lt;span class="na"&gt;:class=&lt;/span&gt;&lt;span class="s"&gt;"{'text-blue-500 border-blue-500 shadow-md ring ring-blue-200': selected}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; 
      {{ current }}
     &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;/Rate&amp;gt;&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rEKKHcLy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628779699348/GbS-fP1KVX.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rEKKHcLy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628779699348/GbS-fP1KVX.png" alt="image.png" width="482" height="87"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#single-choice-list"&gt;
  &lt;/a&gt;
  Single choice list
&lt;/h4&gt;

&lt;p&gt;Another change this time with a vertical 3 choice list.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;    &lt;span class="c"&gt;&amp;lt;!-- Single Choice List --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h4&lt;/span&gt;  &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"mt-4 mb-1 font-bold text-blue-900 mt-5"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;How often do this case happens to you?&lt;span class="nt"&gt;&amp;lt;/h4&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;Rate&lt;/span&gt; &lt;span class="na"&gt;v-model=&lt;/span&gt;&lt;span class="s"&gt;"choice"&lt;/span&gt; &lt;span class="na"&gt;:count=&lt;/span&gt;&lt;span class="s"&gt;"3"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"flex flex-col space-y-2 cursor-pointer w-full"&lt;/span&gt; &lt;span class="na"&gt;v-slot:default=&lt;/span&gt;&lt;span class="s"&gt;"{ current, selected }"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; 
        &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;click=&lt;/span&gt;&lt;span class="s"&gt;"choice=current"&lt;/span&gt; 
         &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"block w-44 text-left px-3 py-0.5 font-bold border border-gray-400 transition transform rounded-lg cursor-pointer hover:text-gray-400"&lt;/span&gt; 
         &lt;span class="na"&gt;:class=&lt;/span&gt;&lt;span class="s"&gt;"{'text-gray-500 border-gray-500 shadow-md ring ring-gray-200': selected}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; 
          &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"bg-gray-900 text-white px-1.5 rounded-md py-0.5"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            {{ letters[current - 1] }}
          &lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
          {{ choices[current - 1] }}
     &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;/Rate&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Iv3rnSXG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628779808838/ULqpRxD-d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Iv3rnSXG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628779808838/ULqpRxD-d.png" alt="image.png" width="391" height="191"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's what I call maximum flexibility 👌✨. As a last improvement, we could add a wrapper component to support those three use cases and pass a prop like &lt;code&gt;mode&lt;/code&gt; that accepts &lt;code&gt;rate&lt;/code&gt;, &lt;code&gt;scale&lt;/code&gt;, and &lt;code&gt;choices&lt;/code&gt; once we have our look defined and write less code in the actual pages. I will let it to you, for practice.&lt;/p&gt;

&lt;p&gt;You can see the example code running in &lt;a href="https://codepen.io/freesgen/full/BaRGmYa"&gt;Codepen&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Headless components provide a way to reuse the logic of components but with the flexibility of customizing the UI.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;They are good for sharing complex components across projects.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It probably requires wrapper components to use your customized UI across the app in contrast to a traditional component. That will be the cost of flexibility&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hope you find it useful, let me know about any questions you have here or on &lt;a href="https://twitter.com/JesusntGuerrero"&gt;Twitter&lt;/a&gt;. thanks for reading and have a nice day.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://headlessui.dev/"&gt;Headlessui&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://codesandbox.io/s/headless-rate-1erzy?file=/src/App.vue"&gt;A more advanced implementation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>vue</category>
      <category>javascript</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>When to use Conda and when to use Poetry?</title>
      <author>Oo Pai</author>
      <pubDate>Thu, 18 Nov 2021 12:36:57 +0000</pubDate>
      <link>https://dev.to/oo_pai_7a4947410fc4a570ec/when-to-use-conda-and-when-to-use-poetry-3gce</link>
      <guid>https://dev.to/oo_pai_7a4947410fc4a570ec/when-to-use-conda-and-when-to-use-poetry-3gce</guid>
      <description>&lt;p&gt;Hi.&lt;/p&gt;

&lt;p&gt;I've been fairly extensively using conda for a while now, ditching the old pip + virtualenv habbit of mine, since I'm collaborating with people on a common source code instead of freelancing by myself like the old days, and therefore this question has come to my mind and gone every few weeks.&lt;/p&gt;

&lt;p&gt;Have I chosen the correct dependency manager?&lt;/p&gt;

&lt;p&gt;A little background: Miniconda + conda environments (yml files) have been a good fit so far. Our projects are products focusing on datascience solutions, and we develop the data science microservice of the product. But we're still in the heavy exploration phase, and have not really stabilized the "MLOps" loop.&lt;/p&gt;

&lt;p&gt;So back to the question.&lt;/p&gt;

&lt;p&gt;I see many have advocated for the use of Poetry. Can someone explain to me the pros and cons of each approach? Why poetry seems so loved by many&lt;a href="https://bit.ly/3CtQDyL"&gt;,&lt;/a&gt; and when should someone consider switching from conda to poetry?&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>python</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Caesar Cipher: A Simple Encryption System in PicoLisp</title>
      <author>Mia</author>
      <pubDate>Thu, 18 Nov 2021 12:30:49 +0000</pubDate>
      <link>https://dev.to/miatemma/caesar-cipher-a-simple-encryption-system-in-picolisp-37gd</link>
      <guid>https://dev.to/miatemma/caesar-cipher-a-simple-encryption-system-in-picolisp-37gd</guid>
      <description>&lt;p&gt;Welcome to the "Classic Algorithms" series. Here we will discuss code examples from the &lt;a href="//wwwo.rosettacode.org"&gt;Rosetta Code Project&lt;/a&gt; and explain step by step how the implementation works. Our first task will be the &lt;a href="https://rosettacode.org/wiki/Caesar_cipher#PicoLisp"&gt;"Caesar Cipher"&lt;/a&gt;.  &lt;/p&gt;

&lt;p&gt;In this post, we will meet many of the &lt;a href="https://picolisp-blog.hashnode.dev/60-picolisp-functions-you-should-know-6-lists-and-strings"&gt;"List and Strings" functions&lt;/a&gt; that we know from the Beginner's-series.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#the-task"&gt;
  &lt;/a&gt;
  The Task
&lt;/h3&gt;

&lt;p&gt;If you want to try by yourself first, here is the task description:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Implement a Caesar cipher, both encoding and decoding. The key is an integer from 1 to 25. This cipher rotates (either towards left or right) the letters of the alphabet (A to Z). The encoding replaces each letter with the 1st to 25th next letter in the alphabet (wrapping Z to A). So key 2 encrypts "HI" to "JK", but key 20 encrypts "HI" to "BC". &lt;/p&gt;
&lt;/blockquote&gt;




&lt;h3&gt;
  &lt;a href="#how-the-caesar-cipher-encryption-works"&gt;
  &lt;/a&gt;
  How the Caesar Cipher encryption works
&lt;/h3&gt;

&lt;p&gt;If you ever studied cryptographic algorithms, you will probably have come across the Caesar Cipher as it is easy to understand (and easy to break, too). &lt;/p&gt;

&lt;p&gt;It is named after the Roman emperor Julius Caesar as there is some evidence that he used this encryption system to transport secret messages. For more historical background, &lt;a href="https://en.wikipedia.org/wiki/Caesar_cipher"&gt;see here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yT0sEo0F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629990963793/YfFe0Lo0X.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yT0sEo0F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629990963793/YfFe0Lo0X.jpeg" alt="caesarstatue.jpg" width="880" height="713"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The idea is that every letter in the alphabet is shifted by a fixed number of steps, which is the "encoding key". For example, if the key is 2, then you write "C" for "A", "D" for "B", "E" for "C" and so on. At the end of the alphabet, "Y" becomes "A" and "Z" becomes "B". Obviously it is not a very safe encryption because it's easy to crack using statistical methods, or by checking all possible shifts.&lt;/p&gt;

&lt;p&gt;Nevertheless, the implementation of the Caesar Cipher in PicoLisp is a nice example to start our Rosetta code series. It illustrates some interesting concepts such as &lt;strong&gt;circular lists&lt;/strong&gt;, &lt;strong&gt;mapping&lt;/strong&gt;, and &lt;strong&gt;anonymous functions&lt;/strong&gt;. Many of the functions were already introduced in the "PicoLisp for Beginners" series, and the code is elegant and short.&lt;/p&gt;

&lt;p&gt;Let's go!&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#an-intuitive-approach-to-the-algorithm"&gt;
  &lt;/a&gt;
  An intuitive approach to the algorithm
&lt;/h3&gt;

&lt;p&gt;How should we implement this algorithm? It is clear that the &lt;strong&gt;order&lt;/strong&gt; of the letters is very important, and it needs to be &lt;strong&gt;circular&lt;/strong&gt; since the end of the alphabet should be mapped to its beginning. The picture from the cover sheet illustrates the principle very well:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B1uTopI2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629977609118/H7XmVUcKg.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B1uTopI2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629977609118/H7XmVUcKg.jpeg" alt="caesar.jpg" width="800" height="800"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The inner circle is the plain character, the outer circle is the encryption. Let's try to implement this in PicoLisp now.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-creating-the-alphabet-list"&gt;
  &lt;/a&gt;
  Step 1 - Creating the alphabet list
&lt;/h3&gt;

&lt;p&gt;The first thing we need is the list of all alphabet characters. One main idea is to make the list "circular", i. e. after "Z" comes "A" (like the tool on the pic above). In PicoLisp, this can be done by the &lt;code&gt;.&lt;/code&gt; symbol, for example &lt;code&gt;(1 2 3 .)&lt;/code&gt; or using the &lt;code&gt;circ&lt;/code&gt; function. Let's form the list:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The straightforward way&lt;/strong&gt;: Of course, we can just type each letter by hand.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(setq *Letters '("A" "B" "C" ... "Z" .))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;The elegent way&lt;/strong&gt;: The solution above is quite error-prone. A better way would be to use &lt;a href="https://en.wikipedia.org/wiki/ASCII"&gt;ASCII encoding&lt;/a&gt; to create this list. Uppercase letters are encoded by the numbers 65 to 90. So let's do the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;create a list from 65 to 90 using &lt;code&gt;(range 65 90)&lt;/code&gt; &lt;strong&gt;--&amp;gt; (65 66 67 ... 90)&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Numbers can be converted to characters by &lt;code&gt;char&lt;/code&gt;, for example (char 65) = A. Let's apply the &lt;code&gt;char&lt;/code&gt; function to our list with &lt;code&gt;(mapcar char (range 65 90))&lt;/code&gt;. &lt;strong&gt;--&amp;gt; ("A" "B" "C" ... "Z").&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Now make the list circular by applying the &lt;code&gt;circ&lt;/code&gt; function to each letter. &lt;code&gt;(apply circ (mapcar char(...)))&lt;/code&gt;
&lt;strong&gt;--&amp;gt; ("A" "B" "C" ... "Z" .)&lt;/strong&gt;, where &lt;code&gt;.&lt;/code&gt; shows that after "Z" comes "A" again.&lt;/li&gt;
&lt;li&gt;Set this list to the global variable &lt;code&gt;*Letters&lt;/code&gt; (with uppercase and asterisk according to naming convention).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We get:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:(setq *Letters (apply circ (mapcar char (range 65 90))))
-&amp;gt; ("A" "B" "C" "D" "E" "F" "G" "H" "I" "J" "K" "L" "M" "N" "O" "P" "Q" "R" "S" "T" "U" "V" "W" "X" "Y" "Z" .)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#step-2-encoding-a-single-character"&gt;
  &lt;/a&gt;
  Step 2 - Encoding a single character
&lt;/h3&gt;

&lt;p&gt;Let's try to get the string we want to encode. As first step, let's convert all letters to uppercase  with &lt;code&gt;uppc&lt;/code&gt; and use the &lt;code&gt;chop&lt;/code&gt; function to transform the string into a list of characters:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:(chop (uppc "in vino veritas")) 
-&amp;gt;("I" "N" " " "V" "I" "N" "O" " " "V" "E" "R" "I" "T" "A" "S")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now to encode these letters, we need to create a function that takes &lt;strong&gt;any character and returns the encoded one&lt;/strong&gt;. Let's go through it step by step.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;First we check if the character is within the &lt;code&gt;*Letters&lt;/code&gt; list by using the &lt;code&gt;member&lt;/code&gt; function, which returns the list &lt;strong&gt;starting from that character&lt;/strong&gt; if it exists, otherwise &lt;code&gt;NIL&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;: (member "U" *Letters)                                   
-&amp;gt; ("U" "V" "W" "X" "Y" "Z" "A" "B" "C" "D" "E" "F" "G" "H" "I" "J" "K" "L" "M" "N" "O" "P" "Q" "R" "S" "T" .)
: (member "D" *Letters)
-&amp;gt; ("D" "E" "F" "G" "H" "I" "J" "K" "L" "M" "N" "O" "P" "Q" "R" "S" "T" "U" "V" "W" "X" "Y" "Z" "A" "B" "C" .)
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;As you can see, the &lt;code&gt;member&lt;/code&gt; function returns the &lt;code&gt;*Letters&lt;/code&gt; list starting at the respective letter. Now we want to get the &lt;strong&gt;encoded letter&lt;/strong&gt;, which is &lt;strong&gt;shifted in position by the encryption code &lt;code&gt;key&lt;/code&gt;&lt;/strong&gt;. In order to shift the list, we use the &lt;code&gt;nth&lt;/code&gt; function, which takes a list and integer value and returns the tail of the list starting from that value:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:(nth (member "U" *Letters) 2))
-&amp;gt; ("V" "W" "X" "Y" "Z" "A" "B" "C" "D" "E" "F" "G" "H" "I" "J" "K" "L" "M" "N" "O" "P" "Q" "R" "S" "T" "U" .)
:(nth (member "D" *Letters) 6)
-&amp;gt; ("I" "J" "K" "L" "M" "N" "O" "P" "Q" "R" "S" "T" "U" "V" "W" "X" "Y" "Z" "A" "B" "C" "D" "E" "F" "G" "H" .)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;It's getting close, but when we check the list returned by &lt;code&gt;nth&lt;/code&gt;, we actually want the &lt;strong&gt;second item in the shifted list&lt;/strong&gt;, because the &lt;code&gt;nth&lt;/code&gt; function is only shifting by &lt;code&gt;(key -1)&lt;/code&gt; positions. To get this second item, we use &lt;code&gt;cadr&lt;/code&gt;, which is short for &lt;code&gt;cdr&lt;/code&gt; and &lt;code&gt;car&lt;/code&gt;. (Re-read &lt;a href="https://picolisp-blog.hashnode.dev/60-picolisp-functions-you-should-know-6-lists-and-strings"&gt;this post&lt;/a&gt; if you're not sure what &lt;code&gt;car&lt;/code&gt; and &lt;code&gt;cdr&lt;/code&gt; mean).
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;: (cadr (nth (member "U" *Letters) 2)))
-&amp;gt; "W"
: (cadr (nth (member "D" *Letters) 6))
-&amp;gt; "J"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#step-3-bringing-it-together"&gt;
  &lt;/a&gt;
  Step 3 - Bringing it together
&lt;/h3&gt;

&lt;p&gt;In Step 1 we &lt;strong&gt;chopped up the input string to a list&lt;/strong&gt;, and in Step 2 we managed to &lt;strong&gt;encode each of these letters separately&lt;/strong&gt;. Now let's bring it together.&lt;/p&gt;

&lt;p&gt;We want to take each letter of the input string and &lt;strong&gt;apply our encoding function on each single element&lt;/strong&gt;, which is a typical application for &lt;code&gt;mapcar&lt;/code&gt;. &lt;code&gt;mapcar&lt;/code&gt; takes a function and a list as arguments. But what is our function? Obviously, we could define it like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(de encodeChar (C)
    (cadr (nth (member C *Letters) Key))) )
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and hand it over to &lt;code&gt;mapcar&lt;/code&gt;. But actually we need the encoding function only once, so it might be a better option (in terms of structure and readability) to define it as &lt;strong&gt;anonymous function&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;As we might remember from the beginner's tutorial, the syntax for anonymous functions is " '((args) ( function )) ", so we can define it as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:'((C) (cadr (nth (member C *Letters) Key)))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;where &lt;code&gt;C&lt;/code&gt; is the character to be encoded.&lt;/p&gt;




&lt;p&gt;Now let's create and test our &lt;code&gt;mapcar&lt;/code&gt; anonymous function call on the chopped list, with &lt;code&gt;key = 3&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;: (setq TestStr (chop (uppc "in vino veritas")))
-&amp;gt; ("I" "N" " " "V" "I" "N" "O" " " "V" "E" "R" "I" "T" "A" "S")
: (mapcar '((C) (cadr (nth (member C *Letters) 3))) TestStr)
-&amp;gt; ("L" "Q" NIL "Y" "L" "Q" "R" NIL "Y" "H" "U" "L" "W" "D" "V")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This already looks quite promising: at least the character shifting looks correct now. &lt;/p&gt;

&lt;p&gt;Now as last step, we need to convert these single letters back to a string, which we can do by using the &lt;code&gt;pack&lt;/code&gt; function. We wrap it around our &lt;code&gt;mapcar&lt;/code&gt; function and get:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;: (pack (mapcar '((C) (cadr (nth (member C *Letters) 3))) TestStr))
-&amp;gt; "WKLVLVDWHVW"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, we "automatically" also got rid of all the &lt;code&gt;NIL&lt;/code&gt; values that were created by whitespaces and punctuations.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#step-4-finishing-the-script"&gt;
  &lt;/a&gt;
  Step 4 - Finishing the script
&lt;/h3&gt;

&lt;p&gt;Let's now wrap it up in a small script. We want to call it using the following syntax: &lt;code&gt;./caesar-cipher.l &amp;lt;plain-string&amp;gt; &amp;lt;key&amp;gt;&lt;/code&gt;, for example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./caesar-cipher.l "In vino veritas" 7
PUCPUVCLYPAHZ
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As we learned in the &lt;a href="https://picolisp-blog.hashnode.dev/a-very-first-picolisp-program"&gt;"A very first PicoLisp Program"&lt;/a&gt;-post, we can retrieve the two parameters &lt;code&gt;&amp;lt;plain-string&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;key&amp;gt;&lt;/code&gt; using &lt;code&gt;opt&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Note that &lt;code&gt;opt&lt;/code&gt; converts to &lt;strong&gt;string&lt;/strong&gt;, so we need to use the function &lt;code&gt;format&lt;/code&gt; to &lt;strong&gt;convert the key from string to integer&lt;/strong&gt;, and store both in the global variables &lt;code&gt;*PlainStr&lt;/code&gt; and &lt;code&gt;*Key&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#! /usr/bin/picolisp /usr/lib/picolisp/lib.l

# first command line parameter: plain string
(setq *PlainStr (opt))

# second command line parameter: key (integer)
(setq *Key (format (opt)))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also we need to define the global &lt;code&gt;*Letters&lt;/code&gt; list and f course our encoding function &lt;code&gt;caesar&lt;/code&gt; that takes a string and a key as parameters and returns the encoded string.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(setq *Letters (apply circ (mapcar char (range 65 90))))

(de caesar (Str Key)
   (pack
      (mapcar '((C) (cadr (nth (member C *Letters) Key)))
         (chop (uppc Str)) ) ) )
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then finally, we call the &lt;code&gt;caesar&lt;/code&gt; function with the command line parameters and print out the result.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(prinl (caesar *PlainStr *Key))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that we exit the interpreter with &lt;code&gt;bye&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Finished!&lt;/p&gt;




&lt;p&gt;The final script can be downloaded from &lt;a href="https://gitlab.com/picolisp-blog/single-plage-scripts/-/blob/main/rosetta/caesar-cipher.l"&gt;here&lt;/a&gt;. Steps: Download the script, for example using curl:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ curl https://gitlab.com/picolisp-blog/single-plage-scripts/-/raw/main/rosetta/caesar-cipher.l -o caesar-cipher.l
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make it executable:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ chmod +x caesar-cipher.l
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./caesar-cipher.l "In vino veritas" 7
PUCPUVCLYPAHZ
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;This was the first part of the "Rosetta code" series, I hope you liked it. &lt;/p&gt;

&lt;p&gt;Tomorrow we will have a look a closer look at the &lt;code&gt;set&lt;/code&gt; function in PicoLisp, as preparation for the &lt;a href="https://rosettacode.org/wiki/100_doors"&gt;"100 Doors Task"&lt;/a&gt; from the Rosetta Code.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#sources"&gt;
  &lt;/a&gt;
  Sources
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Cover: &lt;a href="https://upload.wikimedia.org/wikipedia/commons/thumb/b/b5/CipherDisk2000.jpg/800px-CipherDisk2000.jpg"&gt;https://upload.wikimedia.org/wikipedia/commons/thumb/b/b5/CipherDisk2000.jpg/800px-CipherDisk2000.jpg&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://rosettacode.org/wiki/Caesar_cipher#PicoLisp"&gt;https://rosettacode.org/wiki/Caesar_cipher#PicoLisp&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://software-lab.de/doc/index.html"&gt;https://software-lab.de/doc/index.html&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>picolisp</category>
      <category>lisp</category>
      <category>cryptography</category>
      <category>functional</category>
    </item>
    <item>
      <title>Everything about super tokens - an open source alternative to Auth0, Firebase Auth, and AWS Cognito.</title>
      <author>Ankur Tyagi</author>
      <pubDate>Thu, 18 Nov 2021 12:18:31 +0000</pubDate>
      <link>https://dev.to/tyaga001/everything-about-super-tokens-an-open-source-alternative-to-auth0-firebase-auth-and-aws-cognito-27k6</link>
      <guid>https://dev.to/tyaga001/everything-about-super-tokens-an-open-source-alternative-to-auth0-firebase-auth-and-aws-cognito-27k6</guid>
      <description>&lt;p&gt;Authentication and Authorization are costly affairs for organizations when it comes to their security budget and it is the main concern for every company or individual developer, and if you're a developer/founder you spend a lot of time making a perfect security system for your apps.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;*&lt;em&gt;You spend days creating a Login and Sign Up page for the product. *&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And after that, your work is still not done.&lt;/p&gt;

&lt;p&gt;You need:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Social logins&lt;/li&gt;
&lt;li&gt;Forgot password flow&lt;/li&gt;
&lt;li&gt;Session management&lt;/li&gt;
&lt;li&gt;Email verification&lt;/li&gt;
&lt;li&gt;User management&lt;/li&gt;
&lt;li&gt;Two Factor Authentication and some business features.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All this needs to be done before even launching your product, and it looks easy but it's not always. &lt;/p&gt;

&lt;p&gt;You will spend a good amount of time &amp;amp; planning to set up for your application. &lt;/p&gt;

&lt;p&gt;So, what if I tell you I found an awesome open-source platform to rescue i.e  &lt;a href="https://supertokens.io/"&gt;SUPERTOKENS&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bWoP9BJD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636967400144/IT-dKQ45N.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bWoP9BJD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636967400144/IT-dKQ45N.jpeg" alt="blog1.JPG" width="880" height="352"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;blockquote&gt;
&lt;p&gt;I used "Supertokens" last week for a side project, I must say it's a great open-source "user auth" quick to implement &amp;amp; easy to customize.⬇&lt;br&gt;&lt;br&gt;- Sign-in/Sign-up with email ID &amp;amp; password&lt;br&gt;- Secure session management&lt;br&gt;- Email verification&lt;br&gt;- Social logins&lt;br&gt;&lt;br&gt;Which user auth you're using? &lt;a href="https://t.co/g355g9GuXN"&gt;pic.twitter.com/g355g9GuXN&lt;/a&gt;&lt;/p&gt;— Ankur💻🎧💪 (@TheAnkurTyagi) &lt;a href="https://twitter.com/TheAnkurTyagi/status/1458054589136113666?ref_src=twsrc%5Etfw"&gt;November 9, 2021&lt;/a&gt;
&lt;/blockquote&gt;  
&lt;h2&gt;
  &lt;a href="#supertokens-is-good-for-many-reasons"&gt;
  &lt;/a&gt;
  "SuperTokens" is good for many reasons:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Easy to set up.&lt;/li&gt;
&lt;li&gt;It was quick to implement auth And I am loving it! &lt;/li&gt;
&lt;li&gt;It uses Cookies that contain an access token that expires and must be refreshed with a refresh token.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;**SuperTokens **also provides a more end-to-end solution that allows you to easily implement features like syncing session data across many devices, or restricting how many devices a user can be logged in with. &lt;/p&gt;

&lt;p&gt;It enables you to keep your users logged in for a time long in the most secure way possible.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-simple-to-set-up-auth-quickly-in-your-app"&gt;
  &lt;/a&gt;
  1- Simple to set up auth quickly in your app:
&lt;/h2&gt;

&lt;p&gt;Implement social and email password login using SuperTokens.&lt;/p&gt;

&lt;p&gt;A tutorial to implement Supertokens in ReactJS and NodeJS app. 👇&lt;/p&gt;

&lt;p&gt;🔗 &lt;a href="https://youtu.be/l_hRs1KY9mI"&gt;Implement social and email password login using SuperTokens&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;In this demo you will learn: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Showing the login UI&lt;/li&gt;
&lt;li&gt;Routing&lt;/li&gt;
&lt;li&gt;Protecting a website route&lt;/li&gt;
&lt;li&gt;Fetching user information on the frontend&lt;/li&gt;
&lt;li&gt;Session management and signout.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#2-it-is-open-source"&gt;
  &lt;/a&gt;
  2- It is open source.
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Open source: SuperTokens can be used for free, forever, with no limits on the number of users.&lt;/li&gt;
&lt;li&gt;An on-premises deployment so that you control 100% of your user data, using your own database.&lt;/li&gt;
&lt;li&gt;An end-to-end solution with login, sign-ups, user and session management, without all the complexities of OAuth protocols.&lt;/li&gt;
&lt;li&gt;Ease of implementation and higher security.&lt;/li&gt;
&lt;li&gt;Extensibility: Anyone can contribute and make SuperTokens better!&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Check out the  &lt;a href="https://github.com/supertokens/supertokens-core"&gt;GITHUB &lt;/a&gt; repo. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#3-getting-started-recipes"&gt;
  &lt;/a&gt;
  3- Getting Started / Recipes:
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;1-  ThirdPartyEmailPassword&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sign-up / Sign-in with email ID and password&lt;/li&gt;
&lt;li&gt;Sign-up / Sign-in with third-party providers (For e.g: Google, Facebook)&lt;/li&gt;
&lt;li&gt;Forgot password flow using email&lt;/li&gt;
&lt;li&gt;Secure session management&lt;/li&gt;
&lt;li&gt;Email verification&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can have a look at the demo app created for this recipe &amp;gt;  &lt;a href="https://thirdpartyemailpassword.demo.supertokens.io/auth?rid=thirdpartyemailpassword&amp;amp;redirectToPath="&gt;Link &lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/supertokens/supertokens-auth-react/tree/master/examples/with-thirdpartyemailpassword"&gt;Check out the source code for the demo app&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2- OnlyEmailPassword:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sign-up / Sign-in with email ID and password&lt;/li&gt;
&lt;li&gt;Forgot password flow using email&lt;/li&gt;
&lt;li&gt;Secure session management&lt;/li&gt;
&lt;li&gt;Email verification&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can have a look at the demo app created for this recipe &amp;gt;  &lt;a href="https://emailpassword.demo.supertokens.io/auth?rid=emailpassword&amp;amp;redirectToPath="&gt;Link &lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/supertokens/supertokens-auth-react/tree/master/examples/with-emailpassword"&gt;Checkout the source code for the demo app&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3- OnlySocialLogin:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sign-up / Sign-in with third-party providers &lt;/li&gt;
&lt;li&gt;Secure session management&lt;/li&gt;
&lt;li&gt;Email verification&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can have a look at the demo app created for this recipe &amp;gt;  &lt;a href="https://thirdparty.demo.supertokens.io/auth?rid=thirdparty&amp;amp;redirectToPath="&gt;Link &lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/supertokens/supertokens-auth-react/tree/master/examples/with-thirdparty"&gt;Check out the source code for the demo app&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-supported-technology-stack"&gt;
  &lt;/a&gt;
  4- Supported Technology Stack:
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Backend Implementation:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;NodeJS&lt;/li&gt;
&lt;li&gt;GoLang&lt;/li&gt;
&lt;li&gt;Python (FastAPI, Django, Flask)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;*&lt;em&gt;Frontend Implementation: *&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ReactJS: They support all current functionality (signup, manage auth tokens, social login, etc).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Partial support - Vanilla JS, Angular, Vue and React Native: They provide session management only and you would have to build the frontend UI for login.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#5-three-components-of-supertokens"&gt;
  &lt;/a&gt;
  5- Three components of SuperTokens:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Frontend SDK: Responsible for rendering the login UI widgets and managing session tokens automatically.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Backend SDK: Provides APIs for sign-up, sign-in, signout, session refreshing, etc. Your front end will talk to these APIs.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SuperTokens Core: This is an HTTP service that contains the core logic for auth. It's responsible for interfacing with the database and is used by our backend SDK for operations that require the DB.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fnLM-dlk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637075539345/3vTrMQU-o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fnLM-dlk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637075539345/3vTrMQU-o.png" alt="self_hosted_generic.png" width="880" height="462"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#for-example-sign-in-sign-out-flow"&gt;
  &lt;/a&gt;
  For example: Sign in / Sign out flow:
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;You can see how the three components interact for sign in and sign outflow (with email and password):&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ouWVg5qE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637075628061/0Z2lDmBPP.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ouWVg5qE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637075628061/0Z2lDmBPP.png" alt="self_hosted.png" width="880" height="1025"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That was it for this blog. &lt;/p&gt;

&lt;p&gt;I hope you learned something new today. If you did, please like/share so that it reaches others as well.&lt;/p&gt;

&lt;blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you’re a regular reader, thank you, you’re a big part of the reason I’ve been able to share my life/career experiences with you.&lt;/p&gt;

&lt;p&gt;Let me know how you will use  &lt;a href="https://supertokens.io/"&gt;SuperTokens &lt;/a&gt; to create your next project.&lt;/p&gt;

&lt;p&gt;And if you have any questions you can join us at our  &lt;a href="https://discord.gg/hk5VnDsF"&gt;Discord server&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Follow  &lt;a href="https://twitter.com/supertokensio"&gt;SuperTokens &lt;/a&gt; on Twitter for the latest updates. &lt;/p&gt;

&lt;p&gt;*&lt;em&gt;Connect with me on &lt;a href="https://twitter.com/TheAnkurTyagi"&gt;Twitter &lt;/a&gt; *&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you like this. I encourage you all to sign up for my newsletter.&lt;/p&gt;

&lt;p&gt;It's free. You can ask me your questions via email.&lt;/p&gt;

&lt;p&gt;Check out old editions here:  &lt;a href="https://www.getrevue.co/profile/AnkurTyagi"&gt;The 2-1-1 Developer Growth Newsletter by Ankur&lt;/a&gt;  &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Why Does Every Startup need a CTO - Chief Technology Officer?</title>
      <author>Metricoid Technology Solutions</author>
      <pubDate>Thu, 18 Nov 2021 12:06:42 +0000</pubDate>
      <link>https://dev.to/metricoid_technology/why-does-every-startup-need-a-cto-chief-technology-officer-5a9h</link>
      <guid>https://dev.to/metricoid_technology/why-does-every-startup-need-a-cto-chief-technology-officer-5a9h</guid>
      <description>&lt;p&gt;(&lt;a href="https://metricoidtech.com/why-does-every-startup-require-a-cto/"&gt;https://metricoidtech.com/why-does-every-startup-require-a-cto/&lt;/a&gt;)&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Hire CakePHP Programmer</title>
      <author>Glitz Technology Pvt. Ltd</author>
      <pubDate>Thu, 18 Nov 2021 11:59:07 +0000</pubDate>
      <link>https://dev.to/glitztechnology/hire-cakephp-programmer-1oca</link>
      <guid>https://dev.to/glitztechnology/hire-cakephp-programmer-1oca</guid>
      <description>&lt;p&gt;Glitz Technology provide the high grade development services for business, php developers creates the design and impliments the web based products using programming languages like php, javascript, Glitz Technology is one place where you can take top remote PHP Developers in India,We are providing customized php web development services at affordable prices.&lt;/p&gt;

&lt;p&gt;Our developers highly trained and experienced in php integration and php apps,we offering high quality php based CMS development services, we are providing costant support and dependable php cloud solution, Glitz Technology provides unmatched CakePHP development services of the highest quality. Additionally, our CakePHP programmers are skilled at building the best apps as quickly as possible and guarantee timely delivery. Hire CakePHP Programmer from Glitz technology.&lt;br&gt;
Read more at: &lt;a href="https://www.glitztechnology.com/cakephp/"&gt;https://www.glitztechnology.com/cakephp/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>cakephp</category>
      <category>cakephpdevelopers</category>
      <category>cakephpdevelopment</category>
    </item>
  </channel>
</rss>
