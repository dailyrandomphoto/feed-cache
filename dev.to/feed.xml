<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Proof of Stake is a Precondition to Blockchain Adoption</title>
      <author>Saji Wang</author>
      <pubDate>Tue, 22 Jun 2021 14:18:03 +0000</pubDate>
      <link>https://dev.to/codesphere/proof-of-stake-is-a-precondition-to-blockchain-adoption-4f4d</link>
      <guid>https://dev.to/codesphere/proof-of-stake-is-a-precondition-to-blockchain-adoption-4f4d</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;It was unfortunately admitted earlier this month that Ethereum 2.0 is taking much longer than was initially expected. Among the many changes that Eth2 will include is the transition from a Proof of Work(PoW) to a Proof of Stake(PoS) consensus mechanism.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The world is increasingly eyeing this transition after the sustainability issues of Bitcoin and Ethereum mining made headlines over the past couple of weeks. Ethereum mining alone consumes 52.2 Terawatt-hours a year and has an annual carbon footprint comparable to the entire country of Jordan.&lt;br&gt;
Digiconomist &lt;a href="https://digiconomist.net/ethereum-energy-consumption/"&gt;https://digiconomist.net/ethereum-energy-consumption/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QPJdSDgk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uwbvddqduqups2wjvyik.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QPJdSDgk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uwbvddqduqups2wjvyik.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The transition to Proof of Stake, in contrast, is expected to allow the Ethereum network to consume around 99.95% less energy. To understand how we're going to take a deeper dive into the technology and economics behind consensus models.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#consensus-models-and-proof-of%C2%A0work"&gt;
  &lt;/a&gt;
  Consensus Models and Proof of Work
&lt;/h3&gt;

&lt;p&gt;In order to prevent people from adding fraudulent transactions to the blockchain, every new block has to be validated in a process called mining. The logistics of mining that a cryptocurrency employs are known as its consensus model. In order to incentivize people to validate these new transactions, transaction fees and block rewards are usually given to the miner.&lt;/p&gt;

&lt;p&gt;Proof of Work (PoW) is the consensus model used by Bitcoin, and currently used by Ethereum. PoW essentially has miners race against each other to verify the new block in order to claim the reward. The more computational power that one has, the more attempts they can make at validating the block, and therefore the higher chance they have at receiving the reward.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-proof-of-work-created-a-mining%C2%A0hell"&gt;
  &lt;/a&gt;
  How Proof of Work Created a Mining Hell
&lt;/h3&gt;

&lt;p&gt;In order to keep the verification time near-constant, however, Bitcoin and Ethereum automatically scale the difficulty of mining as more people join the mining race. This means that for all the investment in crypto mining and all the new hardware, the efficiency of mining will always remain constant.&lt;/p&gt;

&lt;p&gt;What this has created is an endless arms race in crypto mines that don't actually make the blockchains themselves any more efficient or secure. The amount of energy necessary to have a chance at earning the block reward has skyrocketed as this mining difficulty has increased. The more worrisome part is that as Crypto adoption increases, the detrimental energy effects of Proof of Work are only going to get worse and worse.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-proof-of-stake-creates-sustainable-cryptocurrency-validation"&gt;
  &lt;/a&gt;
  How Proof of Stake Creates Sustainable Cryptocurrency Validation
&lt;/h3&gt;

&lt;p&gt;Instead of having miners race to validate the new block, Proof of Stake assigns the task of validation at random. Each potential validator stakes a certain amount of currency that they are willing to lose if they fraudulently validate the block. Their odds of being assigned the new block are then a function of how much they are willing to stake.&lt;/p&gt;

&lt;p&gt;While people will still have to consume energy to validate the new blocks, there won't be the same arms race for who can attain the most computing power, and will therefore prevent mining from becoming more expensive than it needs to be.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wont-pos-give-an-advantage-to-the%C2%A0rich"&gt;
  &lt;/a&gt;
  Won't PoS give an advantage to the rich?
&lt;/h3&gt;

&lt;p&gt;While this is certainly a valid criticism of PoS, it's important to note that it is still much more equitable than PoW. With PoS, your chance of being chosen as the validator is a linear function of your staked money.&lt;/p&gt;

&lt;p&gt;In contrast, since your chances of receiving the reward in PoW are a function of your computing power, there is also an advantage given to wealthier miners. This advantage, however, increases the richer you are because of economies of scale, or the increased efficiency of mining rigs as you spend more on your computing infrastructure.&lt;/p&gt;

&lt;p&gt;In other words, in PoS, the person who spends $100 has a 10x advantage over the person who spends $10. With PoW, economies of scale can give the person who spends $100 significantly more than a 10x advantage. While we can hope for a consensus mechanism to arise in the future that is more equitable than PoS, it is still nevertheless a step in the right direction when it comes to equity.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;In summation, while it may not be the final solution, Proof of Stake can assuage the sustainability concerns that current Bitcoin and Ethereum mining has sparked. Until we move towards PoS, people that care about climate issues simply cannot adopt Bitcoin or Ethereum with a clear conscience. By eliminating the gargantuan externalities produced by PoW, we can remove one of the most significant hurdles to blockchain adoption.&lt;/p&gt;

&lt;p&gt;Thanks for reading! What do you think? Should we avoid cryptocurrencies that are using Proof of Work?&lt;/p&gt;

&lt;p&gt;Happy coding from your good friends at &lt;a href="https://link.codesphere.com/AG"&gt;Codesphere&lt;/a&gt;, the next generation cloud provider.&lt;/p&gt;

</description>
      <category>ethereum</category>
      <category>proofofstake</category>
      <category>blockchain</category>
      <category>cryptocurrency</category>
    </item>
    <item>
      <title>4 tools all developers should use</title>
      <author>Seth</author>
      <pubDate>Tue, 22 Jun 2021 13:53:47 +0000</pubDate>
      <link>https://dev.to/saluki/4-tools-all-developers-should-use-212g</link>
      <guid>https://dev.to/saluki/4-tools-all-developers-should-use-212g</guid>
      <description>&lt;p&gt;Developers are always looking for simpler ways to do more advanced things in less time, and one of the many ways that they can achieve this is by using a selection of tools to supplement their workflow. The aim of this article is to cover some of the major tools that people use, and to give you an insight into what they can do to make your life easier.&lt;/p&gt;

&lt;p&gt;And to seal the deal, all the tools I’ll be mentioning are completely free to use, which is an incredible price for what you’re getting from them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Git / Version Control&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Git is the most well-known version control tool out there. It allows you to store your code on a server (thereby reducing data-loss risks), collaborate with other developers and share your code online. Another huge plus to Git is that it allows you to go and look at other people’s public repositories, and see how they solved certain problems. This can then help you solve the problem in your application, and it can save you lots of time and effort.&lt;/p&gt;

&lt;p&gt;Git is open-source itself and it comes with a huge selection of extensions that allow you to modify the functionality of the system in a huge range of different ways.&lt;/p&gt;

&lt;p&gt;The fact that Git allows you to go back and review previous versions of your code, see how it’s changed and keep track of issues as well as provide you with lots of automation tools makes it quite clear that Git, or a Git alternative is a must-have for nearly every project.&lt;/p&gt;

&lt;p&gt;Whilst you could install a system like Gitea on a VPS and then run your own Git server, there is a selection of different services out there that provide Git repository hosting as a service. These services often come with lots of extras too, and usually a very generous free tier. The most notable Git host out there is definitely GitHub, but it is closely rivalled by GitLab among other solutions.&lt;/p&gt;

&lt;p&gt;Want to read more? You can find the full article on my blog: &lt;a href="https://www.saluki.tech/2021/06/18/4-tools-all-developers-should-use/"&gt;https://www.saluki.tech/2021/06/18/4-tools-all-developers-should-use/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>linux</category>
      <category>git</category>
      <category>github</category>
    </item>
    <item>
      <title>Want to Host Your Website for free ?</title>
      <author>KUMAR HARSH</author>
      <pubDate>Tue, 22 Jun 2021 13:43:47 +0000</pubDate>
      <link>https://dev.to/cenacr007_harsh/want-to-host-your-website-for-free-18eg</link>
      <guid>https://dev.to/cenacr007_harsh/want-to-host-your-website-for-free-18eg</guid>
      <description>&lt;p&gt;When you create a website, you essentially create a bunch of different files. These files need to be stored somewhere in order to be accessible on the Internet. Reliable and high-performing web hosting is a crucial part of any successful website.&lt;/p&gt;

&lt;p&gt;Lets suppose you've just started making basic projects and you want to showcase your work with others but you can't afford to pay for a hosting service. In such case what you're supposed to do then ?&lt;/p&gt;

&lt;p&gt;No need to worry there are quite few &lt;strong&gt;FREE&lt;/strong&gt; web hosting services out there.&lt;/p&gt;

&lt;p&gt;In this article we'll come across some of them !&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#github-pages"&gt;
  &lt;/a&gt;
  1️⃣ &lt;a href="https://pages.github.com/"&gt;GitHub Pages&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;GitHub, Inc. is a provider of Internet hosting for software development and version control using Git.&lt;/p&gt;

&lt;p&gt;Host your website directly from your GitHub repository. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Just edit, push, and your changes are live.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;GitHub Pages is not only good but the easiest way to host your website because you are probably pushing your project to GitHub anyways (if not then start doing it), and after pushing your files to the GitHub repository with a few clicks you can go &lt;strong&gt;LIVE&lt;/strong&gt; with your projects and share it with everyone.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cZn1RtJC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b9up7e812am1oq9icmzz.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cZn1RtJC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b9up7e812am1oq9icmzz.jpg" alt="github"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#netlify"&gt;
  &lt;/a&gt;
  2️⃣ &lt;a href="https://www.netlify.com/"&gt;Netlify&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Netlify is an intuitive Git-based workflow and powerful serverless platform to build, deploy, and collaborate on web apps.&lt;/p&gt;

&lt;p&gt;Create amazing experiences for the web in record time—without thinking once about servers or devops.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DDTchTnA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cthykpv76ait4c6jwswo.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DDTchTnA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cthykpv76ait4c6jwswo.jpg" alt="netlify"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#vercel"&gt;
  &lt;/a&gt;
  3️⃣ &lt;a href="https://vercel.com/"&gt;Vercel&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Deploy web projects with the best frontend developer experience and highest end-user performance.&lt;/p&gt;

&lt;p&gt;Vercel is a cloud platform for static sites and Serverless Functions that fits perfectly with your workflow.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8zwxRX32--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1gkc5y5r07k1jyckkg61.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8zwxRX32--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1gkc5y5r07k1jyckkg61.jpg" alt="vercel"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#heroku"&gt;
  &lt;/a&gt;
  4️⃣ &lt;a href="https://www.heroku.com/"&gt;Heroku&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Heroku is a platform that enables developers to build, run, and operate applications entirely in the cloud.&lt;/p&gt;

&lt;p&gt;Whether you're building a simple prototype or a business-critical product, Heroku's fully-managed platform gives you the simplest path to delivering apps quickly.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M175a2w_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5l9lv9ramtygug98oicq.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M175a2w_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5l9lv9ramtygug98oicq.jpg" alt="heroku"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#firebase"&gt;
  &lt;/a&gt;
  5️⃣ &lt;a href="https://firebase.google.com/"&gt;Firebase&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Firebase is a platform developed by Google for creating mobile and web applications.&lt;/p&gt;

&lt;p&gt;With a single command, you can quickly deploy web apps and serve both static and dynamic content to a global CDN (content delivery network).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SAE0WZFX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/02qf1y0gqqngn5nm9ikg.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SAE0WZFX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/02qf1y0gqqngn5nm9ikg.jpg" alt="firebase"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#free-hosting-is-good-for-anyone-looking-to-create-their-first-website"&gt;
  &lt;/a&gt;
  Free hosting is good for anyone looking to create their first website.
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#the-end"&gt;
  &lt;/a&gt;
  The End!
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;This article was inspired by &lt;a href="https://twitter.com/Insharamin"&gt;Insha&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Follow her for more amazing content.&lt;/p&gt;

&lt;p&gt;I hope you found this article valuable. If yes do let me know in the comments 😊&lt;/p&gt;

&lt;p&gt;Also if you got any question feel free to ping me on &lt;a href="https://twitter.com/cenacr007_harsh"&gt;Twitter&lt;/a&gt; or &lt;a href="https://www.linkedin.com/in/kumarharsh22/"&gt;Linkedin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DEV Profile&lt;/strong&gt;&lt;/p&gt;


&lt;div class="ltag__user ltag__user__id__641726"&gt;
  
    .ltag__user__id__641726 .follow-action-button {
      background-color: #000000 !important;
      color: #000000 !important;
      border-color: #000000 !important;
    }
  
    &lt;a href="/cenacr007_harsh" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kOSLbihe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s---UOoV_Rg--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/641726/db02e77a-1c1c-423b-8d31-85eca73347ae.jpg" alt="cenacr007_harsh image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/cenacr007_harsh"&gt;KUMAR HARSH&lt;/a&gt;
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/cenacr007_harsh"&gt;B.Tech (CSE) | Competitive Programming Enthusiast | Front End Web Developer | Cloud Computing (GCP) | Blogger&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#thank-you"&gt;
  &lt;/a&gt;
  Thank You!
&lt;/h2&gt;

</description>
      <category>productivity</category>
      <category>webdev</category>
    </item>
    <item>
      <title>"So...Hm...Yeah" - 6 Simple and Well-tested Hints for Developer Presentations (from a Developer)</title>
      <author>Pius Richter</author>
      <pubDate>Tue, 22 Jun 2021 13:31:31 +0000</pubDate>
      <link>https://dev.to/combit/so-hm-yeah-6-simple-and-well-tested-hints-for-developer-presentations-from-a-developer-37kh</link>
      <guid>https://dev.to/combit/so-hm-yeah-6-simple-and-well-tested-hints-for-developer-presentations-from-a-developer-37kh</guid>
      <description>&lt;p&gt;Our pub quiz-loving head of development, &lt;a href="https://twitter.com/jbartlau"&gt;Jochen Bartlau&lt;/a&gt;, usually gets around (when Corona isn't paralyzing the world). He tours the area for our reporting component List &amp;amp; Label and its user community and he visits dev events. From his numerous presentations he has especially learned six important things he wants to share with you.&lt;/p&gt;

&lt;p&gt;"One of the nice parts of my job is getting around quite often. Through the years, I've held some hundred presentations. At developer conferences, user group meetings and our own roadshows. &lt;/p&gt;

&lt;p&gt;Presenting is a great way to engage with people who are actually using your software or are interested in doing so. To make the most out of it for you and your audience, here's my list with my top 6 hints for you:&lt;/p&gt;

&lt;p&gt;(1) &lt;strong&gt;Know your stuff&lt;/strong&gt;. This is the number one hint I have to share. Sit down. Make a plan. Don't let anybody else do that for you. You don't want to play powerpoint karaoke at the event. I prefer to do the slides myself as well, although our marketing team does a great job in taking my content and making it look professional. However, the content should be yours. Practice often, practice hard. It's at least impolite to present something you don't really know or care deeply about. Your audience is taking the time to listen to you – so you should take the time to prepare. Even worse, you'll probably end up being nervous. An audience will recognize that immediately and it doesn't serve your purpose well&lt;/p&gt;

&lt;p&gt;(2) &lt;strong&gt;Let the slides accompany your words&lt;/strong&gt; – don't read your presentation from the slides. I prefer to have as few words on my slides as possible. If you absolutely have to use text, make sure to use really huge fonts so the folks in the last row can still read your stuff. Rather use images to support your messages. There are loads of &lt;a href="https://en.wikipedia.org/wiki/Wikipedia:Public_domain_image_resources"&gt;free stock images out there&lt;/a&gt;. Read the fantastic &lt;a href="https://www.presentationzen.com/"&gt;Presentation Zen&lt;/a&gt; by Garr Reynolds (this is not an affiliate link ;)). Watch a couple of &lt;a href="https://www.ted.com/"&gt;TED presentations&lt;/a&gt; for inspirations on how to create really great presentations.&lt;/p&gt;

&lt;p&gt;(3) &lt;strong&gt;If you do live coding, practice even harder&lt;/strong&gt;. Beware of bad WIFI networks at the venue and have a plan B. If possible, &lt;strong&gt;prefer offline/local stuff&lt;/strong&gt;. Prepare a finished version of your samples, so if anything goes wrong during the demo you don't have to start from scratch but can rather say "this is what it would have looked, I'll spare you the repetition". If your demo is long, prepare some steps in between.&lt;/p&gt;

&lt;p&gt;(4) &lt;strong&gt;Use Visual Studio's presenter mode&lt;/strong&gt;. Install the Productivity Power Tools and hit Ctrl+Q. This will make sure to enlarge all fonts, again this is for our friends in the last row. While you're at tweaking Visual Studio, you can use Alt+Shift+Enter in any code window to get into full screen mode, using as much screen real estate as possible.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sAm2UuMo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9rra9bgr8jmcoaxihn5d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sAm2UuMo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9rra9bgr8jmcoaxihn5d.png" alt="VS presenter mode"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(5) Sysinternals "ZoomIt" is a &lt;strong&gt;great tool for presentations&lt;/strong&gt;, offering to zoom into certain areas of the screen and highlight stuff. If you're encountering problems with it on Windows 10, make sure to use the latest available Windows version as earlier versions caused trouble (cursor not appearing, scaling problems). Thanks to @markrussinovich for pointing that out.&lt;/p&gt;

&lt;p&gt;(6) &lt;strong&gt;Engage with the audience. Use a presenter stick.&lt;/strong&gt; This allows you to walk around the stage and get away from your computer during your presentation. You should of course stand up during your talk. If possible at all, remove anything that separates you from your audience. &lt;strong&gt;Don't hide behind a desk, be approachable.&lt;/strong&gt; Accept questions during your talk and see if you can get into a communication with your audience. However, this needs some practice, as you need to be able to steer the communication if it gets too specific or moves too far away from your own track. Stay on course while looking left and right. If in doubt, collect questions and answer them at the end. Reserve time for such a Q&amp;amp;A block and have some optional content to fill the slot if there aren't enough questions.&lt;/p&gt;

&lt;p&gt;(7) The hidden track on this album that makes the heading obsolete - some might call it a repetition - &lt;strong&gt;know your stuff&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;That's it. I hope the tips will help you to manage your presentations well."&lt;/p&gt;

</description>
      <category>career</category>
      <category>learning</category>
      <category>motivation</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How To Setup Redux with Redux Toolkit
</title>
      <author>Ruben Gabrielyan</author>
      <pubDate>Tue, 22 Jun 2021 13:13:21 +0000</pubDate>
      <link>https://dev.to/rubengabrielian/how-to-setup-redux-with-redux-toolkit-5fgh</link>
      <guid>https://dev.to/rubengabrielian/how-to-setup-redux-with-redux-toolkit-5fgh</guid>
      <description>&lt;p&gt;Developing modern web applications involves not only UI building but also state management. One of the most widespread libraries for this is Redux. In this tutorial you will learn how to setup Redux using latest libraries and techniques available in 2020 and Redux Toolkit which will simplify your logic and ensure that your setup has good defaults.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why to choose Redux Toolkit&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Redux is a good fundament for the opening but to simplify working it is recommended to use the Redux Toolkit. It was created to help address three common concerns about Redux:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;"Configuring a Redux store is too complicated"&lt;/li&gt;
&lt;li&gt;"I have to add a lot of packages to get Redux to do anything useful"&lt;/li&gt;
&lt;li&gt;"Redux requires too much boilerplate code"&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It has functions that build according to &lt;a href="https://redux.js.org/style-guide/style-guide"&gt;Redux best practices&lt;/a&gt; . It includes several utility functions that simplify the most common Redux use cases, including store setup, defining reducers, immutable update logic with Immer, and even allows creating entire "slices" of state at once without need to write action creators.&lt;/p&gt;

&lt;p&gt;It comes as preconfigured bundle of the most widely used Redux addons, like Redux Thunk for async logic and Reselect for writing selector functions, so that you can use them right away. It also allows your to overwrite all of its settings, for example its very easy to use redux-saga or any other middleware with it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to setup Create-React-App With Redux&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For this redux tutorial lets start with setup new react application with CRA:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install -g create-react-app
create-react-app redux-tutorial
cd redux-tutorial

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next we will add redux with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install --save react-redux @reduxjs/toolkit

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Firstly configure store. Create file src/store/index.js containing:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { configureStore } from '@reduxjs/toolkit'
import { combineReducers } from 'redux'
const reducer = combineReducers({
  // here we will be adding reducers
})
const store = configureStore({
  reducer,
})
export default store;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;configureStore accepts a single object rather that multiple function arguments. It's because under the hood, the store has been configured to allow using the Redux DevTools Extension and has had some Redux middleware included by default.&lt;/p&gt;

&lt;p&gt;Then we need to connect our store to the React application. Import it into index.js like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...
import { Provider } from 'react-redux'
import store from './store'
ReactDOM.render(
  &amp;lt;Provider store={store}&amp;gt;
    &amp;lt;App /&amp;gt;
  &amp;lt;/Provider&amp;gt;,
  document.getElementById('root')
)

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Provider wraps the App and the whole application has access to Redux. If you start your application with npm start and open Redux Dev Tools you should see @@INIT. Congratulations you have setup redux!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How To Structure Your Redux&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Lets now setup Redux authentication and implement simple login form and logout button shown after authentication. Redux itself does not care about how your application's folders and files are structured. However, co-locating logic for a given feature in one place typically makes it easier to maintain that code. Redux.org recommend that most applications should structure files using a "feature folder" approach (all files for a feature in the same folder) or the "ducks" pattern (all Redux logic for a feature in a single file), rather than splitting logic across separate folders by "type" of code (reducers, actions, etc).&lt;/p&gt;

&lt;p&gt;Lets add src/store/user.js store slice:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { createSlice } from '@reduxjs/toolkit'
// Slice
const slice = createSlice({
  name: 'user',
  initialState: {
    user: null,
  },
  reducers: {
    loginSuccess: (state, action) =&amp;gt; {
      state.user = action.payload;
    },
    logoutSuccess: (state, action) =&amp;gt;  {
      state.user = null;
    },
  },
});
export default slice.reducer
// Actions
const { loginSuccess, logoutSuccess } = slice.actions
export const login = ({ username, password }) =&amp;gt; async dispatch =&amp;gt; {
  try {
    // const res = await api.post('/api/auth/login/', { username, password })
    dispatch(loginSuccess({username}));
  } catch (e) {
    return console.error(e.message);
  }
}
export const logout = () =&amp;gt; async dispatch =&amp;gt; {
  try {
    // const res = await api.post('/api/auth/logout/')
    return dispatch(logoutSuccess())
  } catch (e) {
    return console.error(e.message);
  }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The store feature file contains createSlice that returns a "slice" object that contains the generated reducer function as a field named reducer, and the generated action creators inside an object called actions.&lt;/p&gt;

&lt;p&gt;At the bottom we can import the action creators and export them directly or use them within async actions, like login and logout.&lt;/p&gt;

&lt;p&gt;To connect reducer into Redux, we have add add it to the main reducer in store/index.js:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...
import user from './user'
const reducer = combineReducers({
  user,
})

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Connecting Redux to Components with useDispatch and useSelector&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Our redux setup is ready. Now lets configurate Authentication form. For this we will use Formik. Type the following into your terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install --save formik

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can create following src/App.js component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...
import {useDispatch, useSelector} from 'react-redux'
import {Field, Form, Formik} from 'formik'
import {login, logout} from './store/user'
function App() {
  const dispatch = useDispatch()
  const { user } = useSelector(state =&amp;gt; state.user)
  if (user) {
    return (
      &amp;lt;div&amp;gt;
        Hi, {user.username}!
        &amp;lt;button onClick={() =&amp;gt; dispatch(logout())}&amp;gt;Logout&amp;lt;/button&amp;gt;
      &amp;lt;/div&amp;gt;
    )
  }
  return (
    &amp;lt;div&amp;gt;
      &amp;lt;Formik
        initialValues={{ username: '', password: '' }}
        onSubmit={(values) =&amp;gt; { dispatch(login(values)) }}
      &amp;gt;
        {({ isSubmitting }) =&amp;gt; (
          &amp;lt;Form&amp;gt;
            &amp;lt;Field type="text" name="username" /&amp;gt;
            &amp;lt;Field type="password" name="password" /&amp;gt;
            &amp;lt;button type="submit" disabled={isSubmitting}&amp;gt;Login&amp;lt;/button&amp;gt;
          &amp;lt;/Form&amp;gt;
        )}
      &amp;lt;/Formik&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Please note that there is no connect! With useDispatch and useSelector we can now integrate Redux with pure components using hooks! We just need to wrap App with Provider and there is much less boilerplate compared to connect.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How Keep User Authenticated on Page Reload&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Probably you've noticed that authentication is reseted on every page reload.&lt;/p&gt;

&lt;p&gt;That is very easy to fix with localStorage with just a few lines added to src/store/user.js&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;+const initialUser = localStorage.getItem('user')
+  ? JSON.parse(localStorage.getItem('user'))
+  : null
+
const slice = createSlice({
  name: 'user',
  initialState: {
-    user: null,
+    user: initialUser,
  },
  reducers: {
    loginSuccess: (state, action) =&amp;gt; {
      state.user = action.payload;
+      localStorage.setItem('user', JSON.stringify(action.payload))
    },
    logoutSuccess: (state, action) =&amp;gt;  {
      state.user = null;
+      localStorage.removeItem('user')
    },
  },
});

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;How to Store Token&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;My favorite API client library is Axios. I prefer Axios over built-in APIs for its ease of use and extra features like xsrf token support and interceptors.&lt;/p&gt;

&lt;p&gt;Here is sample configuration that I often use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const api = axios.create({
  baseURL: '/',
  headers: {
    'Content-Type': 'application/json'
  },
})
api.interceptors.request.use(
  config =&amp;gt; {
    const token = localStorage.getItem('token')
    if (token) {
      config.headers['Authorization'] = `Token ${token}`
    }
    return config
  },
  error =&amp;gt; Promise.reject(error)
)
export default api

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;How to Redirect after login&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The easiest way to redirect user after redux action is to use Redirect component provided by React.&lt;/p&gt;

&lt;p&gt;This can be one within Login form component, for example with code like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if (user) {
    return (
      &amp;lt;Redirect to={'/home'} /&amp;gt;
    )
  }

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>react</category>
      <category>redux</category>
    </item>
    <item>
      <title>Writing reliable Ansible playbooks</title>
      <author>XLAB</author>
      <pubDate>Tue, 22 Jun 2021 13:01:15 +0000</pubDate>
      <link>https://dev.to/xlab_si/writing-reliable-ansible-playbooks-295i</link>
      <guid>https://dev.to/xlab_si/writing-reliable-ansible-playbooks-295i</guid>
      <description>&lt;p&gt;&lt;strong&gt;WORDS BY&lt;/strong&gt; Tadej Borovšak&lt;/p&gt;

&lt;p&gt;We often talk about &lt;a href="https://steampunk.si/blog/ansible-role-argument-specification/"&gt;techniques and tools&lt;/a&gt; that help developers write high-quality Ansible content (modules and plugins). Of course, having &lt;a href="https://steampunk.si/blog/five-tips-for-choosing-an-ansible-collection/"&gt;high-quality Ansible collections&lt;/a&gt; is a prerequisite for creating robust automation workflows, but Ansible playbook authors still need to use that content appropriately. And this is the topic we will talk about today.&lt;/p&gt;

&lt;p&gt;In the first part of the post, we will look into what properties make the Ansible playbook reliable and what benefits those properties bring to the Ansible users. We will dedicate the second part of the post to finding concrete solutions for problems Ansible playbook authors often stumble upon while automating processes.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#why-bother-with-established-good-practices"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Why bother with established good practices?&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;When we write an Ansible playbook or role, we usually do it because we want to automate tedious manual tasks. But if the Ansible playbook that implements task steps is not reliable, we gained nothing. Before, we had to perform error-prone steps manually, and now we have to overview Ansible executions. And yes, watching Ansible logs is great fun during the honeymoon phase, but it gets tedious real quick ;)&lt;/p&gt;

&lt;p&gt;Luckily, things do not have to be this way. With a little bit of discipline, everyone can write reliable Ansible playbooks that will gracefully handle errors and offer an easy way of recovering after an error occurs.&lt;/p&gt;

&lt;p&gt;Do note that this does not mean we have to add a large amount of &lt;a href="https://docs.ansible.com/ansible/latest/user_guide/playbooks_error_handling.html"&gt;error checking&lt;/a&gt; to our Ansible playbooks. Error checking can be helpful sometimes, but in most cases, we do not need it. It is often much easier to let the error bubble up and stop the Ansible execution. Once we diagnose the culprit, we can rerun our Ansible playbook and call it a day.&lt;/p&gt;

&lt;p&gt;Now that we know why we should care about the reliability of our Ansible playbooks, we can start looking at some general guidelines that will improve the quality of our automation.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#enforcing-the-desired-state"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Enforcing the desired state&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;Enforcing the desired state is the thing that will have the most significant impact on the robustness of our Ansible playbooks. What it means is that we can run our Ansible playbooks two times in a row, and the second run will not break anything.&lt;/p&gt;

&lt;p&gt;If you think, “Ugh, that is probably too hard for me,” we have some great news. Writing Ansible playbooks that enforce the desired state is more effortless compared to their actions-executing counterparts. Why? Because we can test our playbook after each new task addition by rerunning it.&lt;/p&gt;

&lt;p&gt;It is also easy to spot when we start to deviate from this best practice. If we find ourselves commenting out previously written tasks before rerunning Ansible, we are probably doing something wrong.&lt;/p&gt;

&lt;p&gt;Most of the time, we do not have to do anything special when writing Ansible playbooks because most Ansible modules enforce state by default. But there exists one family of Ansible modules that we have to use with a bit more care: command executors.&lt;/p&gt;

&lt;p&gt;Let us assume that we need to run a database initialization command after we install the database. Our first attempt will probably look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- name: Initialize database
  ansible.builtin.command: init_my_db with some params
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But now we have a problem. If we rerun our Ansible playbook, Ansible will try to initialize the database for the second time, which is not OK. We can prevent this by telling the command module what file the command will create using the &lt;code&gt;creates&lt;/code&gt; parameter. If the file exists, the command module will skip the initialization and report no change.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- name: Initialize database
  ansible.builtin.command: init_my_db with some params
  args:
    creates: /path/to/file/created/at/initialization.db
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But sometimes, the command itself enforces the state. Sensu Go initialization is one such example. In this case, it is safe to rerun the initialization command, but it is still helpful to tell Ansible if things changed. And we can do that through the &lt;code&gt;changed_when&lt;/code&gt; task keyword.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- name: Initialize backend
  command:
    cmd: sensu-backend init
  register: init
  failed_when: init.rc not in (0, 3)  # 0 - OK, 3 - already initialized
  changed_when: init.rc == 0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the Sensu Go initialization example, Ansible will report a state change if the initialization command returns a zero status code.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#fully-qualified-collection-names"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Fully qualified collection names&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;Before the introduction of Ansible Collections, all Ansible modules lived in the same (global) namespace. In order not to break existing Ansible playbooks, Ansible Base introduced the routing table for content that Ansible developers moved from the central repository into dedicated collections. And while this is excellent news for owners of existing Ansible playbooks because they do not have to update them, new Ansible playbooks should always use fully qualified collection names (FQCNs).&lt;/p&gt;

&lt;p&gt;The main reason for this is straightforward: if we always use FQCNs, there is less of a chance that Ansible will use a different module than we intended.&lt;/p&gt;

&lt;p&gt;Finding an FQCN for a module might sound simple, but because Ansible Collections can redirect those to other collections, we might have to work a bit harder than anticipated. The safest option right now is to run Ansible in verbose mode and inspect the output it prints to the console.&lt;/p&gt;

&lt;p&gt;For example, let us take the following Ansible playbook:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;---
- hosts: localhost
  gather_facts: false
  tasks:
    - name: Create contaier
      docker_container:
        # Parameter go here
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we run Ansible, we will see something similar to this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ansible-playbook -vv playbook.yaml
ansible-playbook [core 2.11.1]

# More output here, trimmed for brevity

TASK [Create user] ******************************************************
path: /tmp/play.yaml:5 redirecting (type: modules) 
  ansible.builtin.docker_container to community.docker.docker_container

# More output here, trimmed for brevity
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can see that Ansible “renamed” the &lt;code&gt;docker_container&lt;/code&gt; module into &lt;code&gt;ansible.builtin.docker_container&lt;/code&gt; and then redirected it to the &lt;code&gt;community.docker.docker_container&lt;/code&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#certified-ansible-content"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Certified Ansible content&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;Being able to buy support for Ansible content we use in our Ansible playbooks is not directly related to reliability. Still, it does make a difference when finding someone to help us resolve our issues.&lt;/p&gt;

&lt;p&gt;Determining if an Ansible collection is certified is relatively straightforward: if we installed it from &lt;a href="https://www.ansible.com/products/automation-hub"&gt;Automation Hub&lt;/a&gt;, Red Hat or one of the partners would support us. Making sure we do not use any community-supported Ansible collections is a bit harder because the community bundles quite a few of them inside the &lt;code&gt;ansible&lt;/code&gt; Python package, making them exceptionally convenient to use.&lt;/p&gt;

&lt;p&gt;And to make things even “worse” (if we can call having a lot of ready-to-use content a bad thing), quite a lot of short Ansible module names redirect to community-supported modules. So this is yet another reason why we should use FQCNs if at all possible.&lt;/p&gt;

&lt;p&gt;It is also worth mentioning that Red Hat certifies individual collections and not all of the content from a namespace. Would you guess that the &lt;code&gt;ansible.windows&lt;/code&gt; collection is not certified yet? Well, neither did the blog post author, which was &lt;a href="https://github.com/sensu/sensu-go-ansible/issues/275"&gt;a “fun” problem&lt;/a&gt; to solve ;)&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Conclusion&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;So, what did we learn today? Well, if there is one point we would like to get across is this:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Writing reliable Ansible playbooks is not much more complex than writing bad Ansible playbooks if we know a few pitfalls that we need to avoid.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Using Ansible a lot is one way of getting to know those pitfalls. But visiting &lt;a href="https://scanner.steampunk.si/"&gt;scanner.steampunk.si&lt;/a&gt; can give you a speed boost and get your Ansible playbooks in top shape with a minimal amount of effort.&lt;/p&gt;

&lt;p&gt;Cheers!&lt;/p&gt;

</description>
      <category>ansible</category>
      <category>automation</category>
      <category>ansibleplaybooks</category>
      <category>ansiblecollections</category>
    </item>
    <item>
      <title>Introducing and testing accessibility in the LiveChat Chat Widget</title>
      <author>Oliwia Połeć</author>
      <pubDate>Tue, 22 Jun 2021 12:51:14 +0000</pubDate>
      <link>https://dev.to/livechat/introducing-and-testing-accessibility-in-the-livechat-chat-widget-42p9</link>
      <guid>https://dev.to/livechat/introducing-and-testing-accessibility-in-the-livechat-chat-widget-42p9</guid>
      <description>&lt;p&gt;For the last few months, we’ve been working on making our LiveChat Chat Widget accessible and ensuring it meets &lt;a href="https://www.w3.org/TR/WCAG21/" rel="noopener noreferrer"&gt;the WCAG requirements&lt;/a&gt;. We had to get acquainted with success criteria, translate them into specific technical tasks, then validate our solutions and introduce corrections.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Fu4cXuvq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cri4no2qgug18ogupter.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Fu4cXuvq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cri4no2qgug18ogupter.png" alt="LiveChat accessibility intro image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The whole project was very challenging, especially choosing between conflicting interpretations of the requirements and match. We repeatedly had to clarify a specification to match specific parts of the application that did not match the available examples. We want to share the knowledge gained during the project and explore how we adapted the LiveChat Chat Widget application to WCAG 2.1 level AA requirements. We decided to create a series of posts about the most complex technical aspects of making web applications accessible.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#web-content-accessibility-guidelines"&gt;
  &lt;/a&gt;
  Web Content Accessibility Guidelines
&lt;/h2&gt;

&lt;p&gt;As mentioned before, the LiveChat Chat Widget meets WCAG 2.1 requirements. What does this mean exactly? Web Content Accessibility Guidelines (WCAG) is a standard for web content accessibility provided by the World Wide Web Consortium (W3C). WCAG defines testable success criteria grouped into three conformance levels: A, AA, and AAA (the best). However, level AAA is usually not required for the entire content of a webpage because it is impossible to meet its success criteria for some parts of the content.&lt;/p&gt;

&lt;p&gt;Sample success criterion: text contrast. Level AA requires that the text must have at least a 4.5:1 contrast ratio in most cases, but level AAA requires a 7:1 contrast ratio.&lt;/p&gt;

&lt;p&gt;WCAG comes with an easy-to-navigate, detailed reference guide, along with techniques documented with examples, code, and descriptions of test procedures.&lt;/p&gt;

&lt;p&gt;Another important document is &lt;a href="https://www.w3.org/TR/wai-aria-practices-1.1/" rel="noopener noreferrer"&gt;Aria Practices&lt;/a&gt;, which provides developers with practical examples of how to implement specific solutions so that they are accessible to people with limitations.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M5acLt8M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lonrgoddelg50tqhvszc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M5acLt8M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lonrgoddelg50tqhvszc.png" alt="LiveChat accessibility graph"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-we-should-care-about-accessibility"&gt;
  &lt;/a&gt;
  Why we should care about accessibility
&lt;/h2&gt;

&lt;p&gt;We understand accessibility as enabling people with limited abilities to use a website or web application. Taking care of accessibility should be done from the very beginning of every project — there are several reasons for this.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;According to the WHO’s "&lt;a href="https://www.who.int/publications/i/item/9789241564182" rel="noopener noreferrer"&gt;World report on disability&lt;/a&gt;" from 2011, 15% of the global population live with some form of disability. That translates to a massive number of visitors that benefit from improvements in this area. 2.2 billion people have a near or distance vision impairment. The issue of accessibility is often seen as a problem that affects only a negligible minority. We pay very little attention to these problems, and actions to improve the situation have been disproportionate to the actual scale of the problem.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Taking care of website accessibility brings profit to every user. Meeting color requirements is essential for people with severe vision impairments, but it's also helpful for those with impairments classified as "moderate" or "mild." Valid document semantic structure is useful for every tool that needs to better understand the content of your website. It can improve multiple other aspects, like SEO. Alternative image descriptions can be applicable in the case of bad network conditions or failure.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Many countries require a particular category of institutions to ensure website accessibility. In the USA, such requirements for public institutions and those cooperating with them are imposed by the American Disability Act (ADA). In the case of the European Union, similar requirements are imposed by the Web Accessibility Directive. The requirements of these documents are often specified at the level of state law in the United States or the countries of the European Union.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Taking care of accessibility should be part of caring for a responsible brand image.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In the case of LiveChat, in the document &lt;a href="https://investor.livechatinc.com/uploads/the-livechat-software-living-consitution-v1.0.pdf" rel="noopener noreferrer"&gt;"The LiveChat Software Living Constitution"&lt;/a&gt; we have a clearly defined vision: "Customer communication without barriers." Such a vision means that we have to treat accessibility as the most important topic we should be dealing with.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--856QhQDi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aecauw7ya9621m1iqp26.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--856QhQDi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aecauw7ya9621m1iqp26.png" alt="LiveChat accessibility buttons image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#work-areas"&gt;
  &lt;/a&gt;
  Work areas
&lt;/h2&gt;

&lt;p&gt;When thinking about people with limitations, we should take into account the needs of people with visual, hearing, mobility, and cognitive impairments. In the case of our application, the most demanding tasks can be grouped into three areas:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#keyboard-navigation"&gt;
  &lt;/a&gt;
  Keyboard navigation
&lt;/h3&gt;

&lt;p&gt;Making sure that the app interface can be fully used without the need for additional input devices like a mouse or trackpad. The user should know which item is currently focused; keyboard navigation should be logical and comfortable.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#screen-readers"&gt;
  &lt;/a&gt;
  Screen readers
&lt;/h3&gt;

&lt;p&gt;Content should have correct semantic structure; interactive elements should have proper aria tags, and all state changes should be announced to the user. Meaningful non-text content should have an alternative text description. This enables screen readers to work correctly with your website, together with other accessibility tools, for example, Voice Control on devices with iOS systems.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#visuals"&gt;
  &lt;/a&gt;
  Visuals
&lt;/h3&gt;

&lt;p&gt;Colors should meet minimum contrast requirements and shouldn't be used as the only way to indicate app status.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;We'll cover each of these areas in detail in the following posts. Behind each of these points, there are many additional needs. In our posts, we will focus on the problems and requirements of the Chat Widget application; it is not a complete guide for any type of application.&lt;/p&gt;

&lt;p&gt;Besides this, we will describe how to start the process of customizing already running projects: how to test the compliance level of an application and how to use test automation to avoid regression in this area.&lt;/p&gt;

&lt;p&gt;We hope these articles will help developers and designers look closely at the topic of accessible web applications and provide practical tips. Unfortunately, despite the dynamic development of browsers, standards, and technologies, a lot of work in the area of accessibility still requires manual implementation. Commonly used interface elements, such as modal pop-ups, have well-defined requirements for keyboard navigation. Unfortunately, browsers do not provide built-in mechanisms for them. Had the native &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:focus-visible" rel="noopener noreferrer"&gt;focus-visible pseudo-selector support&lt;/a&gt; been released earlier, we might have prevented the practice of disabling outline from being popularized for active elements. On the other hand, developers have more and more tools to test the accessibility of their websites, like the &lt;a href="https://developer.chrome.com/blog/new-in-devtools-83/#vision-deficiencies" rel="noopener noreferrer"&gt;Emulate vision deficiencies in Chrome DevTools&lt;/a&gt;, the &lt;a href="https://developer.mozilla.org/en-US/docs/Tools/Accessibility_inspector" rel="noopener noreferrer"&gt;Accessibility tab in the Firefox devtools&lt;/a&gt; and the &lt;a href="https://www.deque.com/axe/browser-extensions/" rel="noopener noreferrer"&gt;Axe browser extension&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#our-journey-with-accessibility-testing"&gt;
  &lt;/a&gt;
  Our journey with accessibility testing
&lt;/h1&gt;

&lt;p&gt;The past few months have been quite busy for our team. In LiveChat, we’re responsible for building the Chat Widget, one of the core components of our system that is used by end-users to communicate with support agents. As described &lt;a href="https://developers.livechat.com/updates/livechat-chat-widget-accessibility-introduction/"&gt;here&lt;/a&gt; and &lt;a href="https://investor.livechatinc.com/uploads/the-livechat-software-living-consitution-v1.0.pdf"&gt;in our constitution&lt;/a&gt;, one of our core values is to make "customer communication without barriers." For us, communication without barriers meant that we needed to put more focus on accessibility, so we made adjustments to the Chat Widget in order to meet WCAG requirements.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m4B7rfz3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ev8rdmv9d0yug1qoi72k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m4B7rfz3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ev8rdmv9d0yug1qoi72k.png" alt="LiveChat testing accessibility"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-does-that-even-mean"&gt;
  &lt;/a&gt;
  What does that even mean?
&lt;/h2&gt;

&lt;p&gt;“Being accessible” means providing a person with disabilities a way to use a product. It applies to different areas of everyday life. For example, consider stairs People using wheelchairs cannot use stairs, so an owner of the building has to provide an elevator. The same is for the web - different people use our Chat Widget, some of whom might be blind, deaf, or have different kinds of vision impairments. Just as the owner of the aforementioned building had to make accommodations, we should provide our customers with alternative ways of using our product. If that’s not convincing enough, maybe you should keep in mind that building an inaccessible website might even end with a lawsuit!&lt;/p&gt;

&lt;p&gt;So, what are those alternatives? Well, it depends on the disability being accommodated. Sometimes we need to avoid some patterns. For example, we shouldn’t make elements of our UI reachable only with a mouse, as some users might explicitly depend on keyboard navigation. On some occasions, it is about not using colors that might be indistinguishable for people with color blindness. Fortunately, we don’t have to spend a lifetime researching the topic before jumping into action. Web Content Accessibility Guidelines (WCAG) is the saviour here. It is a document published by the Web Accessibility Initiative that establishes a set of recommendations to follow to make websites more accessible.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SPqb_C5b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fdvnz71eodwxkemnrws7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SPqb_C5b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fdvnz71eodwxkemnrws7.png" alt="LiveChat accessibility axe DevTools"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lowhanging-fruit"&gt;
  &lt;/a&gt;
  Low-hanging fruit
&lt;/h2&gt;

&lt;p&gt;When we first started working on accessibility, it was a bit overwhelming. We had an already working application with thousands of customers, and accessibility was a completely new thing for us. Our initial question was not “how,” but actually “what” to start with? Before making any plans, our first task was to research how to test the web applications with accessibility in mind, and then to fix any flaws in our Chat Widget.&lt;/p&gt;

&lt;p&gt;We began with static analysis tools. These tools analyze the semantic structure of the HTML DOM tree in order to be able to find some downsides. A great example of such a tool is &lt;a href="https://chrome.google.com/webstore/detail/axe-devtools-web-accessib/lhdoppojpmngadmnindnejefpokejbdd" rel="noopener noreferrer"&gt;“axe DevTools”&lt;/a&gt; browser extension or a similar &lt;a href="https://wave.webaim.org/extension/" rel="noopener noreferrer"&gt;WAVE&lt;/a&gt; one. You use it to scan either all of your webpage, or it’s particular elements, after which  you will get the report listing all found issues.&lt;/p&gt;

&lt;p&gt;These checks are based on the WCAG requirements mentioned above, and include the severity of each issue.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--idoi1OgJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1q42sjm9zn0kwn3e5dtf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--idoi1OgJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1q42sjm9zn0kwn3e5dtf.png" alt="LiveChat accessibility inspect tools"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Other tools which you can use for such an analysis, if you are using Chrome or Firefox, are built in your browsers. In Chrome, you are able to run a similar automatic report using Lighthouse. Although it is certainly less specific,  it is a good start.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uuBVeZht--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y5bx5j1yn0cl7wrgwni0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uuBVeZht--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y5bx5j1yn0cl7wrgwni0.png" alt="LiveChat accessibility testing result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The same is true for Firefox - when you open the developer tools, all you need to do is go to the “Accessibility” tab and select “Check for issues" with the option you favor. This will provide yet another report with all the information you need in order to start making the world a better place.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r7Xbq4Ij--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/khuy4vknrcbs7ee4ylod.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r7Xbq4Ij--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/khuy4vknrcbs7ee4ylod.png" alt="LiveChat accessibility check for issues"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Both of these browsers also provide additional information about the color contrasts, missing attributes, element semantics, and other important things.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#with-all-that-sorted-use-your-imagination"&gt;
  &lt;/a&gt;
  With all that sorted, use your imagination!
&lt;/h2&gt;

&lt;p&gt;From the reported issues we created tasks to improve particular components, and we have gained a lot of insight into what to look for. Though it was a quick round of running the audits around different application states, we knew it was just the beginning. We have found that we can keep track of issues using different automated solutions during early phases, such as eslint rules (e.g. “eslint-plugin-jsx-a11y”) or cypress plugin (“cypress-axe”). That is a topic for another blogpost, though!&lt;/p&gt;

&lt;p&gt;The second, much more important thing we knew we had to do was to make use of our empathy. We already learned which things we should pay attention to, soit was now time to check the user experience. When manually testing user experience of the accommodations, it’s probably preferable to categorize and test different disabilities independently instead of trying to test everything at once.&lt;/p&gt;

&lt;p&gt;For example, we had to learn how the blind use the web. The answer is pretty simple - they use screen-readers and navigate around using just the keyboard. There are a variety of screen readers to use, some of which might be already in your system, such as VoiceOver, which is on MacOS. If that’s not the case, you can consider free browser extensions like &lt;a href="https://chrome.google.com/webstore/detail/screen-reader/kgejglhpjiefppelpmljglcjbhoiplfn?hl=en" rel="noopener noreferrer"&gt;ChromeVox&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In Warsaw, there is an exhibition called “Invisible Exhibition.” It’s an interactive tour “into the world of darkness,” and is meant to show visitors how the blind or visually impaired navigate around the world. For web browsing we basically did the same, and we were able to recreate the experience of using our widget as a blind or visually impaired person would in order to check it.&lt;/p&gt;

&lt;p&gt;Imagine you are using the web without being able to “see;” you can only  “hear.” Imagination can be tricky here, so you can try it blindfolded or with your eyes closed. We are used to certain patterns which are not at all accessible, and blindfolding yourself helps you to understand how wed we are to those patterns. For us, it was a game-changer. For starters, we made a run for critical and basic paths of our application, like:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Find the Chat Widget on the page.&lt;/li&gt;
&lt;li&gt;Open it, fill in the pre-chat, and start a chat.&lt;/li&gt;
&lt;li&gt;Chat with the Agent - are you able to “read” (hear?) their message? Are you able to answer or ask any questions?&lt;/li&gt;
&lt;li&gt;Close the chat.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It seems pretty easy now, but it turned out that it was almost impossible at the very beginning of our journey with accessibility. We weren’t even able to find our widget on the page, so new messages from the Agent were not being read, and the user was unable to navigate through them. We had to learn how to use the keyboard, how content is being read, and which bits and pieces are viable.&lt;/p&gt;

&lt;p&gt;This gave us more insights than any static analysis would to and made us actually realize how important it is to improve that situation. The same is for other disabilities, like color blindness. You can use various tools to simulate such a condition, learn, and then make your app better with all that knowledge.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#design-with-a11y-in-mind"&gt;
  &lt;/a&gt;
  Design with a11y in mind
&lt;/h2&gt;

&lt;p&gt;The experience of using our Chat Widget in the way a disabled person might made us realize how important it is to consider accessibility at a very early stage. We believe in the “test early, test often” approach, and as mentioned earlier, we have included automatic tools in our pipeline to ensure there is no regression around particular areas. But, before development, there is a design.&lt;/p&gt;

&lt;p&gt;As part of the changes we adopted, we had to completely rebuild some of our components, such as the file upload. Now it provides a way to add an “aria-label” to the uploaded images, explicitly informs users about the status of the upload, and makes all content easily reachable with the keyboard. The earlier version was not accessible at all with a keyboard, not to mention that it gave only the visual representation of upload status.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UvgcIznO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uxwvsd07v3l8vwyde5mc.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UvgcIznO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uxwvsd07v3l8vwyde5mc.gif" alt="LiveChat accessibility file upload"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We have read a lot of blogs and specifications, learnt from our experiences, as well as from books like “&lt;a href="https://inclusive-components.design/" rel="noopener noreferrer"&gt;Inclusive Components&lt;/a&gt;.” All of these made us realize what we needed, and now every new feature we design and plan to implement is done with accessibility in mind.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#learn-from-the-professionals"&gt;
  &lt;/a&gt;
  Learn from the professionals
&lt;/h2&gt;

&lt;p&gt;Last but not least, there are companies like &lt;a href="http://deque.com" rel="noopener noreferrer"&gt;Deque&lt;/a&gt; which can help you with assessment and testing. They built the “axe DevTools”! They run training sessions, provide access to different testing tools, and perform audits and accessibility assessments. Their audits are based on their extensive knowledge in the area and will help you to determine which issues to address. The specifications and requirements can sometimes be confusing, and it might be quite hard to apply them or test them with your application. This is the part when even a simple chat with a professional in that area might be helpful.&lt;/p&gt;

&lt;p&gt;You can also use the solutions already made by professionals, such as &lt;a href="https://github.com/adobe/react-spectrum/" rel="noopener noreferrer"&gt;adobe/react-spectrum&lt;/a&gt;. There is a lot of useful knowledge there, as well as tips on what to look for while testing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#remember-accessibility"&gt;
  &lt;/a&gt;
  Remember accessibility!
&lt;/h2&gt;

&lt;p&gt;Although often overlooked, the accessibility of your product is of the highest importance. There are a variety of tools to help you determine where you can improve, and it’s impossible to find an excuse why you shouldn’t. I hope that our journey will encourage you to care about all of your visitors and unleash the full potential of your product.&lt;/p&gt;

</description>
      <category>a11y</category>
      <category>showdev</category>
      <category>webdev</category>
    </item>
    <item>
      <title>A Month In The AWS Community Builders Program.</title>
      <author>Fon Nkwenti</author>
      <pubDate>Tue, 22 Jun 2021 12:42:02 +0000</pubDate>
      <link>https://dev.to/aws-builders/a-month-in-the-aws-community-builders-program-4lp1</link>
      <guid>https://dev.to/aws-builders/a-month-in-the-aws-community-builders-program-4lp1</guid>
      <description>&lt;p&gt;In my previous &lt;a href="https://dev.to/aws-builders/the-aws-community-builders-program-what-it-is-and-how-to-apply-159l"&gt;post&lt;/a&gt;, I explained what the &lt;a href="https://aws.amazon.com/developer/community/community-builders/"&gt;AWS builders&lt;/a&gt; program is all about, how to apply, and some benefits officially advertised. I can't believe a month has already gone by. It sort of feels like the first weeks in a new boarding school. I'm still figuring out how to get adequately accommodated and where all the amenities and facilities are. What are the rules and timetables for activities, who are the cool kids, what are the older kids up to etc.? So far, I haven't seen any bullies. The community has got up to about 800 community builders, and there is quite a lot already happening. In this post, I'll share some of the exciting things which have caught my attention thus far.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#communication"&gt;
  &lt;/a&gt;
  Communication
&lt;/h2&gt;

&lt;p&gt;Going by my boarding school analogy, Slack is the campus, and the campus is slack. Slack is where everything happens. Almost all communication starts and ends in Slack. All announcements, introductions, questions and networking start from here before branching into other platforms like &lt;a href="https://dev.to/aws-builders"&gt;dev.to&lt;/a&gt;, for blogposts, &lt;a href="https://www.twitch.tv/aws"&gt;Twitch.tv&lt;/a&gt; for live sessions and Amazon Chime for webinars. For those who don't know what Slack is, it is simply a messaging platform. It is similar to Microsoft Teams which most people know about, although Teams is actually the copycat. I've never had to work for a company that uses Slack, but I'm part of other communities that rely on Slack for messaging and communication. I started using Slack regularly as of 2020, but 80% of the usage has been with the Community Builder's Program.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/chime/"&gt;Amazon Chime&lt;/a&gt;, is a communications service that lets you meet, chat, and place business calls inside and outside your organization. Let's just call it Amazon's response to Zoom and Google Meet.&lt;/p&gt;

&lt;p&gt;Although Twitch is popular with gamers, AWS has also got many channels covering multiple products and services. Before being accepted into the program under the Networking and Content Delivery category or topic, I already followed the &lt;a href="https://networkingandcontentdelivery.splashthat.com/"&gt;Networking and Content Delivery Office Hours&lt;/a&gt; on Twitch.tv. It is a weekly live stream on Thursdays from 6:30 PM - 8 PM GMT+1, hosted by technical leaders who introduce AWS services and updates on what's new across the category.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-welcome-calls"&gt;
  &lt;/a&gt;
  The Welcome Calls
&lt;/h2&gt;

&lt;p&gt;On June 3rd, there was a welcome call for all the new builders. It was announced on Slack and hosted on Amazon Chime by &lt;a href="https://www.linkedin.com/in/jasonrobertdunn/"&gt;Jason Dunn&lt;/a&gt;. Jason is the AWS Community Builders Program Manager. He has done a great job on the FAQ Slack channel and is the bearer of good news like benefits on the #benefits channel. Jason did cover quite a lot in his 30-45 mins presentation, and I can't possibly go through everything with you, but here are some of the things which caught my attention.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-does-aws-expect"&gt;
  &lt;/a&gt;
  What does AWS expect?
&lt;/h3&gt;

&lt;p&gt;Amazon wants to empower Builders like you to gain experience with their services and share that expertise with others. They want to help you "level up", grow your public profile, expand your knowledge on all things AWS plus other skills (writing, public speaking, etc.)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-engage-with-topic-leaders"&gt;
  &lt;/a&gt;
  How to engage with topic leaders.
&lt;/h3&gt;

&lt;p&gt;Topic leaders are the primary point of contact for the topic, but they are not tech support. They will look for opportunities for beta participation. Not all of them are staffed with Developer advocates, and since they work at scale, 1:1 interactions aren't always guaranteed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#some-guidelines-on-social-media-posting"&gt;
  &lt;/a&gt;
  Some guidelines on social media posting
&lt;/h3&gt;

&lt;p&gt;Always use #AWScommunity in all social post across all platforms. Please don't tag Jason if it is technical. You can tag your topic leaders on all your posts. AWS wants to see all the great stuff you are creating and sharing so that they can understand the impact it is having. We've got a tool to help provide visibility to our AWS related activities outside the program.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#benefits"&gt;
  &lt;/a&gt;
  Benefits
&lt;/h3&gt;

&lt;p&gt;In my previous post, I listed the following benefits as were officially advertised on the AWS Community Builders webpage;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Access to AWS product teams and information about new services and features.&lt;/li&gt;
&lt;li&gt;Mentorship from AWS subject matter experts on a variety of topics, including content creation, community building, and securing speaking engagements.&lt;/li&gt;
&lt;li&gt;AWS Promotional Credits and other helpful resources to support content creation and community-based work.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But Jason elaborated further and included even more benefits. Those that really caught my attention are;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Cloud Academy subscription. They produce a lot of high-quality content not only on AWS Certifications but on DevOps and Security.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;$500 AWS Promotional Credits. This is super important, especially for AWS Networking labs. Many things are not included in the free-tier, such as NAT gateways hourly charges, Transit gateway attachments, Network Firewall hourly charges and virtual appliances from the AWS Market Place. With these credits, I would unleash the playful child in me and turn up all the knobs in the VPC (with billing alerts configured, of course)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Cool swag. These are AWS Community Builders Program branded items. The $500 AWS Promotional Credits mentioned in the previous point will be delivered as a gift card in the swag kit.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Certification exam voucher. I didn't plan on taking any certification exam until nextyear, but it is a free voucher which will expire after some months.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#some-interesting-stuff-from-the-community"&gt;
  &lt;/a&gt;
  Some Interesting Stuff From The Community
&lt;/h2&gt;

&lt;p&gt;With about 800 builders and multiple slack channels, a lot is happening every second. But there are a few things which caught my attention which I would like to share with you.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/06/aws-removes-nat-gateways-dependence-on-internet-gateway-for-private-communications/#:~:text=AWS%20Removes%20NAT%20Gateway's%20Dependence%20on%20Internet%20Gateway%20for%20Private%20Communications,-Posted%20On%3A%20Jun&amp;amp;text=You%20can%20now%20launch%20NAT,access%20to%20the%20NAT%20Gateway."&gt;AWS Removes NAT Gateway's dependence on the Internet Gateway for private communications&lt;/a&gt;. The NAT Gateway enables instances in a private subnet without public IP addresses to be able to reach the internet by using the NAT Gateways own public IP address. Before this announcement, you needed to associate the NAT Gateway to an Internet Gateway. But now, you can select to set the connectivity type to private when creating a NAT Gateway. The NAT Gateway will use its private IP addresses when performing NAT operations. This makes it possible to connect to other VPCs, Transit Gateways or Virtual Private Gateways.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fellow community builder &lt;a href="https://www.linkedin.com/in/jareddonboch/"&gt;Jared Donboch&lt;/a&gt; made a &lt;a href="http://acbmap.humbleg.com/aws/"&gt;website&lt;/a&gt; showing the map of all community builders in their countries. It clearly shows that I am the only builder in Cameroon.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gweQAnp---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8tdaq6x2ida13geidz81.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gweQAnp---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8tdaq6x2ida13geidz81.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The map was done using the newly launched Amazon Location services. Jared wrote a 👉🏽&lt;a href="https://dev.to/aws-builders/aws-location-service-where-my-aws-community-builders-at-e02"&gt;post&lt;/a&gt; about how he built the website so please check it out.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What's Next
&lt;/h2&gt;

&lt;p&gt;It was announced that all community members will eventually be listed on the public website, so I'm looking forward to seeing my name up there as well.&lt;br&gt;
I will apply for the cloud academy subscription and maybe start preparing for the AWS Solutions Architect Professional Examination.&lt;br&gt;
As soon as I get my own swag kit, I'll share the pictures with you&lt;br&gt;
I'll be posting another review of the program same time next month. &lt;/p&gt;

&lt;p&gt;Thank you for reading🙏🏿. If you are interested in knowing more about the program, please follow me on twitter@ &lt;a href="https://twitter.com/fon_nkwenti"&gt;fon_nkwenti&lt;/a&gt;. &lt;/p&gt;

</description>
      <category>aws</category>
      <category>cloud</category>
    </item>
    <item>
      <title>Learn FastAPI With Me (Part 1)</title>
      <author>Morgan-Phoenix</author>
      <pubDate>Tue, 22 Jun 2021 12:35:56 +0000</pubDate>
      <link>https://dev.to/morgan_phoenix/learn-fastapi-with-me-part-1-48jd</link>
      <guid>https://dev.to/morgan_phoenix/learn-fastapi-with-me-part-1-48jd</guid>
      <description>&lt;p&gt;Hey there, Today I'm going to start this series of "Learn FastAPI With Me". So those how don't know what a api is, let me tell you:&lt;/p&gt;

&lt;p&gt;According to Wikipedia:&lt;/p&gt;

&lt;p&gt;An application programming interface(api) is a connection between computers or between computer programs. It is a type of software interface, offering a service to other pieces of software. A document or standard that describes how to build such a connection or interface is called an API specification.&lt;/p&gt;

&lt;p&gt;But if you are just starting and don't care about definition and want things in simple and clear words,&lt;/p&gt;

&lt;p&gt;An API is just a program that helps two programs to talk to each other. Imagine an API as the mouth and ears of a program, using which the program can talk and listen to other programs.&lt;/p&gt;

&lt;p&gt;Want an API in your web app now?&lt;br&gt;
Fine, Normally APIs are made using javascript, but it takes time to make one.&lt;br&gt;
So let's take the easy path insted and use our beloved programming language that we all know, Python.&lt;/p&gt;

&lt;p&gt;We will use FastAPI for now&lt;br&gt;
You can use other API frameworks too (like flask), but we are using FastAPI for now&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#why-fastapi"&gt;
  &lt;/a&gt;
  Why FastAPI?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;It's Fast&lt;/li&gt;
&lt;li&gt;It easy &lt;/li&gt;
&lt;li&gt;Supports async functions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And that should be it to convince you&lt;/p&gt;

&lt;p&gt;Not convinced yet?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It supports rendering of html pages&lt;/li&gt;
&lt;li&gt;File transfers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's continue now,&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation:
&lt;/h3&gt;

&lt;p&gt;It's very easy to install FastAPI just type this(↓) in your terminal&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ pip install fastapi&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;If you don't get an error, you're solid let's create out first api&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-api"&gt;
  &lt;/a&gt;
  The API:
&lt;/h3&gt;

&lt;p&gt;Now let's create our first api&lt;br&gt;
Create a file &lt;code&gt;main.py&lt;/code&gt; in any folder&lt;br&gt;
Copy-Paste the code given below in the &lt;code&gt;main.py&lt;/code&gt; file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from fastapi import FastAPI
app = FastAPI()
@app.get('/')
def home():
    return {'data':'Get This And Be Happy'}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And done, your first basic API is ready!&lt;br&gt;
but, how do you test if this is working?&lt;br&gt;
we use a server to check if it is working.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-server"&gt;
  &lt;/a&gt;
  The Server
&lt;/h3&gt;

&lt;p&gt;We will be using &lt;code&gt;uvicorn&lt;/code&gt; to test our api&lt;br&gt;
Let's install it!&lt;br&gt;
&lt;code&gt;$ pip install uvicorn&lt;/code&gt;&lt;br&gt;
now open a terminal and go to the folder where &lt;code&gt;main.py&lt;/code&gt; is and type the following&lt;br&gt;
&lt;code&gt;uvicorn main:app --reload&lt;/code&gt;&lt;br&gt;
And hit enter&lt;br&gt;
A URL will be provided to you in the terminal, Go to that URL&lt;br&gt;
(It will mostly be &lt;a href="http://127.0.0.1:8000"&gt;http://127.0.0.1:8000&lt;/a&gt;)&lt;br&gt;
If you see &lt;code&gt;{'data':'Get This And Be Happy'}&lt;/code&gt;, Then do what you see, be happy, your api is working!! &lt;/p&gt;

&lt;p&gt;In the next post I will explain what that code is, until then be happy&lt;/p&gt;

&lt;p&gt;See you in the next post.&lt;/p&gt;

</description>
      <category>python</category>
      <category>api</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Getting Started with Go Context</title>
      <author>Javad Rajabzade</author>
      <pubDate>Tue, 22 Jun 2021 12:32:53 +0000</pubDate>
      <link>https://dev.to/gopher/getting-started-with-go-context-l7g</link>
      <guid>https://dev.to/gopher/getting-started-with-go-context-l7g</guid>
      <description>&lt;p&gt;Applications in golang use Contexts for controlling and managing very important aspects of reliable applications, such as cancellation and data sharing in concurrent programming. This may sound trivial but in reality, it’s not that so. The entry point for the contexts in golang is the context package. It is extremely useful and probably one of the most versatile packages of the entire language. If you haven’t come across anything dealing with contexts yet, you probably will very soon (or maybe you just didn’t pay much attention to it). The usage of context is so widespread that multiple other packages rely on it and assume you will do the same. It is definitely a key component on golang’s ecosystem.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nbKyLWT1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6eos6t546i539bbwr0rl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nbKyLWT1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6eos6t546i539bbwr0rl.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here’s the official documentation for the context package &lt;a href="https://golang.org/pkg/context/"&gt;https://golang.org/pkg/context/&lt;/a&gt;. It’s really great and filled with practical examples. In an attempt to extend those, let’s have a look into things I have came across in real applications.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#context-with-value"&gt;
  &lt;/a&gt;
  Context with value
&lt;/h1&gt;

&lt;p&gt;One of the most common uses for contexts is to share data, or use request scoped values. When you have multiple functions and you want to share data between them, you can do so using contexts. The easiest way to do that is to use the function &lt;code&gt;context.WithValue&lt;/code&gt;. This function creates a new context based on a parent context and adds a value to a given key. You can think about the internal implementation as if the context contained a map inside of it, so you can add and retrieve values by key. This is very powerful as it allows you to store any type of data inside the context. Here’s an example of adding and retrieving data with a context.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"context"&lt;/span&gt;
    &lt;span class="s"&gt;"fmt"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;addValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;readValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;addValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WithValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"key"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"test-value"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;readValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"key"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;One important aspect of the design behind context package is that everything returns a new &lt;code&gt;context.Context&lt;/code&gt; struct. This means that you have to remember to work with the returned value from operations and possibly override old contexts with new ones. This is a key design in immutability. &lt;/p&gt;

&lt;p&gt;Using this technique you can pass along the &lt;code&gt;context.Context&lt;/code&gt; to concurrent functions and as long as you properly manage the context you are passing on, it’s good way to share scoped values between those concurrent functions (meaning that each context will keep their own values on its scope). That’s exactly what &lt;code&gt;net/http&lt;/code&gt; package does when handling HTTP requests. To elaborate on that let’s have a look into the next example.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#middlewares"&gt;
  &lt;/a&gt;
  Middlewares
&lt;/h2&gt;

&lt;p&gt;A great example and use case for request scoped values is working with middlewares in web request handlers. The type &lt;code&gt;http.Request&lt;/code&gt; contains a context which can carry scoped values throughout the HTTP pipeline. It is very common to see code where middlewares are added to the HTTP pipeline and the results of the middlewares are added to the &lt;code&gt;http.Request&lt;/code&gt; context. This is a very useful technique as you can rely on something you know happened to in your pipeline already on later stages. This also enables you to use generic code to handle HTTP request, while respecting the scope where you want to share the data (instead of sharing data on global variables for example). Here’s an example of a middleware that leverages the request context.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"context"&lt;/span&gt;
    &lt;span class="s"&gt;"log"&lt;/span&gt;
    &lt;span class="s"&gt;"net/http"&lt;/span&gt;

    &lt;span class="s"&gt;"github.com/google/uuid"&lt;/span&gt;
    &lt;span class="s"&gt;"github.com/gorilla/mux"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;router&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;mux&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewRouter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;router&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;guidMiddleware&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;router&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HandleFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/ishealthy"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;handleIsHealthy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Methods&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MethodGet&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ListenAndServe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;":8080"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;router&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;handleIsHealthy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusOK&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;uuid&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"uuid"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"[%v] Returning 200 - Healthy"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;uuid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Healthy"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;guidMiddleware&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Handler&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HandlerFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;uuid&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;uuid&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WithContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WithValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s"&gt;"uuid"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;uuid&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ServeHTTP&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#context-cancellation"&gt;
  &lt;/a&gt;
  Context Cancellation
&lt;/h1&gt;

&lt;p&gt;Another very useful feature of context in golang is cancelling things that are related. This is very important when you want to propagate your cancellation. It’s a good practice to propagate the cancellation signal when you receive one. Let’s say you have a function where you start tens of goroutines. That main function waits for all goroutines to finish or a cancellation signal before proceeding. If you receive the cancellation signal you may want to propagate it to all your goroutines, so you don’t waste compute resources. If you share the same context among all goroutines you can easily do that.&lt;br&gt;
To create a context with cancellation you only have to call the function &lt;code&gt;context.WithCancel(ctx)&lt;/code&gt; passing your context as parameter. This will return a new context and a cancel function. To cancel that context you only need to call the cancel function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"context"&lt;/span&gt;
    &lt;span class="s"&gt;"fmt"&lt;/span&gt;
    &lt;span class="s"&gt;"io/ioutil"&lt;/span&gt;
    &lt;span class="s"&gt;"net/http"&lt;/span&gt;
    &lt;span class="n"&gt;neturl&lt;/span&gt; &lt;span class="s"&gt;"net/url"&lt;/span&gt;
    &lt;span class="s"&gt;"time"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;queryWithHedgedRequestsWithContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;urls&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;ch&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;chan&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cancel&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WithCancel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="n"&gt;cancel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;urls&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="k"&gt;chan&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;executeQueryWithContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="n"&gt;ch&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;cancel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;After&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Millisecond&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="n"&gt;ch&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;executeQueryWithContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;parsedURL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;neturl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;req&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;parsedURL&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;req&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WithContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DefaultClient&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Do&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Body&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;ioutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReadAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Request time: %d ms from url%s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Since&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Nanoseconds&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Millisecond&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Nanoseconds&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%s from %s"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Each request is fired in a separate goroutine. The context is passed to all requests that are fired. The only thing that is being done with the context is that it gets propagated to the HTTP client. This allows a graceful cancellation of the request and underlying connection when the cancel function is called. This is a very common patter for functions that accept a &lt;code&gt;context.Context&lt;/code&gt; as argument, they either actively act on the context (like checking if it was cancelled) or they pass it to an underlying function that deals with it (in this case the Do function that receives the context through the &lt;code&gt;http.Request&lt;/code&gt;).&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#context-timeout"&gt;
  &lt;/a&gt;
  Context Timeout
&lt;/h1&gt;

&lt;p&gt;Timeouts are a really common pattern for making external requests, like querying a database or fetching data from another service either through HTTP or gRPC (both support contexts). Handling those scenarios is quite easy using the context package. All you have to do is call the function &lt;code&gt;context.WithTimeout(ctx, time)&lt;/code&gt; passing your context and the actual timeout. Like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cancel&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WithTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Millisecond&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You still receive the cancel function in case you want to manually trigger that. It works the same way as a normal context cancellation.&lt;br&gt;
The behaviour for this case is very straightforward. In case the timeout is reached, the context is cancelled. Is case of a HTTP call, it works essentially the same as the example above.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#grpc"&gt;
  &lt;/a&gt;
  gRPC
&lt;/h1&gt;

&lt;p&gt;Context is a fundamental piece of gRPC implementation in golang. It is used both to share data (what is called metadata) and to control flow, like cancelling a stream or request.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// Server implementation receiving metadata&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;calculatorpb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SumRequest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;calculatorpb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SumResponse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Sum rpc invoked with req: %v&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FromIncomingContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Metadata received: %v"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;calculatorpb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SumResponse&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NumA&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NumB&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;// Client implementation sending metadata&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="n"&gt;calculatorpb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CalculatorServiceClient&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;req&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;calculatorpb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SumRequest&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;NumA&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;NumB&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AppendToOutgoingContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s"&gt;"user"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"test"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatalf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Error calling Sum RPC: %v"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Response: %d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;// Server implementation handling context cancellation&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;greetpb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GreetRequest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;greetpb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GreetResponse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Greet rpc invoked!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;500&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Millisecond&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Err&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Canceled&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;codes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Canceled&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Client cancelled the request"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Greeting&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FirstName&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;greetpb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GreetResponse&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello %s"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;// Client implementation using timeout context cancellation&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;greetWithTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="n"&gt;greetpb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GreetServiceClient&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;req&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;greetpb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GreetRequest&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Greeting&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;greetpb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Greeting&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;FirstName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Ricardo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;LastName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="s"&gt;"Linck"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cancel&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WithTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Millisecond&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="n"&gt;cancel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;grpcErr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FromError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;grpcErr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Code&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;codes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DeadlineExceeded&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Deadline Exceeded"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatalf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Error calling Greet RPC: %v"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Response: %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#opentelemetry"&gt;
  &lt;/a&gt;
  OpenTelemetry
&lt;/h1&gt;

&lt;p&gt;OpenTelemetry also relies heavily on context for what is called Context Propagation. That is a way to tied up requests happening in different systems. The way to implement that is to Inject span information into the context you are going to send as part of the protocol you are using (HTTP or gRPC, for instance). On the other service you need to Extract the span information out of the context. &lt;/p&gt;

</description>
      <category>go</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>The master guide to smooth, realistic shadows in CSS</title>
      <author>Devang Saklani</author>
      <pubDate>Tue, 22 Jun 2021 12:06:02 +0000</pubDate>
      <link>https://dev.to/devang/the-master-guide-to-smooth-realistic-shadows-in-css-463p</link>
      <guid>https://dev.to/devang/the-master-guide-to-smooth-realistic-shadows-in-css-463p</guid>
      <description>&lt;p&gt;&lt;strong&gt;What are shadows?&lt;/strong&gt;&lt;br&gt;
When light falls upon an object shadow is formed. The shadows we see around us works on the same principle but they are really complex and realistic as they are not in a specific shape or length or size. They can take any shape and can fall in any direction. In order to create shadows in websites using CSS we use &lt;code&gt;box-shadow&lt;/code&gt; property.&lt;/p&gt;

&lt;p&gt;for ex.  &lt;code&gt;box-shadow: 0 10px 10px rgba(0, 0, 0, 0.1);&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BVov24lq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9mvryge2upd8fw0h7d9e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BVov24lq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9mvryge2upd8fw0h7d9e.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But if you are trying to create real shadows through &lt;code&gt;box-shadow&lt;/code&gt; property, well, You can't.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why?&lt;/strong&gt;&lt;br&gt;
In order to know 'Why?' you have to understand how box-shadow property works.&lt;br&gt;
&lt;code&gt;box-shadow&lt;/code&gt; property simply produces a blurred silhouette of an object. You can change its length, color, blur, spread and offset nothing more. Then there's probably no way to create the &lt;em&gt;Natural Super complex real Shadows&lt;/em&gt; through &lt;code&gt;box-shadow&lt;/code&gt; property.&lt;/p&gt;

&lt;p&gt;But unexpectedly &lt;strong&gt;there's a way!&lt;/strong&gt;&lt;br&gt;
If we will use a simple technique, we will be able to get more controls and expand our range of options. This technique is using 'layered shadows'. We can define multiple shadows in a simple &lt;code&gt;box-shadow&lt;/code&gt; property by using commas and gradually increasing the blur-radius, offset to make shadows more realistic. Here's an example:&lt;/p&gt;

&lt;p&gt;Normal &lt;code&gt;box-shadow&lt;/code&gt;⏬&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jVylqHts--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yk6h7s1l9c761ejrr0sk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jVylqHts--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yk6h7s1l9c761ejrr0sk.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Layered &lt;code&gt;box-shadow&lt;/code&gt;⏬&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fd4s5F_j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h5vpeig144z3a8l6tk9n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fd4s5F_j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h5vpeig144z3a8l6tk9n.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see the difference in shadows. You can customize it more to generate more variants of shadows i.e. Sharp shadows, Dreamy shadows, long shadows etc.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
/* Normal box-shadow */
.box {
    box-shadow: 0 3px 3px rgba(0,0,0,0.2);
}

/* Layered Box-shadow */
box-shadow:
     0 3.9px 4.6px rgba(0, 0, 0, 0.08),
     0 12.3px 8.4px rgba(0, 0, 0, 0.056),
     0 18.8px 19.2px rgba(0, 0, 0, 0.037),
     0 22px 40px rgba(0, 0, 0, 0.019)
;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;More Layers  ==  More Customization ==  More Realistic shadows&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can also generate Sharp shadows by gradually decreasing the alpha values (opacity) and increasing the blur strength to create Sharp shadows. You can use the same principle to create Diffused shadows.&lt;/p&gt;

&lt;p&gt;Sharp shadow⏬&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--663tssRU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jqk3t4etzhniybmwb2hm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--663tssRU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jqk3t4etzhniybmwb2hm.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Diffused shadow⏬&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mnqZXe_2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1435fhbc1lu7gu8dgib3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mnqZXe_2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1435fhbc1lu7gu8dgib3.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can also create Short as well as long shadows by just playing with opacity and spread. To create long shadows we can gradually increase the y-offset values. &lt;/p&gt;

&lt;p&gt;Short shadow⏬&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CYAh0Rlo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u1id3lesijkwm6yny80p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CYAh0Rlo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u1id3lesijkwm6yny80p.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Long shadow⏬&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--39jLqrl3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gsa0ennf7divwfxqu4gs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--39jLqrl3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gsa0ennf7divwfxqu4gs.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However creating these kind of shadows is a &lt;em&gt;real mess&lt;/em&gt; for some people, specifically for those people and for making our life more easy there is &lt;strong&gt;website&lt;/strong&gt; which can help them in &lt;strong&gt;Creating realistic shadows&lt;/strong&gt; i.e. &lt;a href="https://shadows.brumm.af/"&gt;https://shadows.brumm.af/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1Xw95K1j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r4nqc3bjfkpoznueintl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1Xw95K1j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r4nqc3bjfkpoznueintl.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Through this website you can create as many layers as you want and edit them in real time, Saving a lot of time and efforts.&lt;/p&gt;

&lt;p&gt;A post by Devang. Hope it helps!&lt;/p&gt;

</description>
      <category>css</category>
      <category>shadows</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Lunch Breaks: 5 Ways to Improve Your Productivity</title>
      <author>Kristi Anderson</author>
      <pubDate>Tue, 22 Jun 2021 11:59:37 +0000</pubDate>
      <link>https://dev.to/kristimke/lunch-breaks-5-ways-to-improve-your-productivity-1kn2</link>
      <guid>https://dev.to/kristimke/lunch-breaks-5-ways-to-improve-your-productivity-1kn2</guid>
      <description>&lt;p&gt;In the movie Wall Street, Michael Douglas' character Gordon Gekko declared that "lunch is for wimps." And it seems that conceit has taken hold --- &lt;a href="https://www.nytimes.com/2016/02/28/magazine/failure-to-lunch.html?login=smartlock&amp;amp;auth=login-smartlock"&gt;62% of professionals&lt;/a&gt; say they usually just grab a quick bite at their desk. After all, trading 60 minutes of downtime for another hour of effort seems like a reasonable exchange.&lt;/p&gt;

&lt;p&gt;But as it turns out, that additional hour of effort may not translate directly to an hour of productivity. If improved productivity is the goal, skipping lunch or eating while working won't cut it.&lt;/p&gt;

&lt;p&gt;If you want to improve the quantity and quality of your work, consider &lt;a href="https://reclaim.ai/use-cases/block-time-for-lunch"&gt;scheduling yourself a lunch break every day&lt;/a&gt; --- and more than a 10-minute break to eat a quick sandwich. Lunch should be considered a block of time as important as any other high-priority work task.&lt;/p&gt;

&lt;p&gt;In this article, you'll learn 5 ways in which taking a &lt;a href="https://reclaim.ai/blog/lunch-breaks-improve-productivity?utm_source=devto&amp;amp;utm_medium=blog-published&amp;amp;utm_campaign=lunch-breaks"&gt;lunch will actually improve your productivity&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-eating-lunch-keeps-you-alert"&gt;
  &lt;/a&gt;
  &lt;strong&gt;1. Eating lunch keeps you alert&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Skipping lunch may seem like an easy way to get more time out of your day. After all, if you're hungry, you can always just grab a snack later, and that time can be spent finishing a report or catching up on emails. However, skipping a meal comes at a cost to your productivity.&lt;/p&gt;

&lt;p&gt;Lunch breaks consisting of healthy food choices can set you up for a more productive afternoon by giving your brain the fuel it needs to focus and continue working. Your body turns food into glucose, which provides the energy needed for your brain to &lt;a href="https://hbr.org/2014/10/what-you-eat-affects-your-productivity"&gt;stay alert&lt;/a&gt;. A cheap, fast lunch may seem like a good option, but these foods can lead to a temporary burst --- followed by a dip --- in energy, and can also make you groggy by causing your digestive system to work harder.&lt;/p&gt;

&lt;p&gt;Without that healthy energy, it becomes much harder to concentrate. "When we don't feed our brains, this can signal to the body that it's time to shut things down," &lt;a href="https://www.prevention.com/weight-loss/a20470631/effects-of-skipping-meals/"&gt;says Frances Largeman-Roth&lt;/a&gt;, registered dietician and nutrition expert.&lt;/p&gt;

&lt;p&gt;Of course, eating a healthy lunch full of energizing foods is important. But to feel mentally refreshed and ready for the second half of your workday and beyond, you also need to give your mind a rest and separate from work during your lunch break.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-lunch-breaks-replenish-energy"&gt;
  &lt;/a&gt;
  &lt;strong&gt;2. Lunch breaks replenish energy&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;A break in the day can help you replenish the energy that you may have lost during the morning's work. A &lt;a href="https://www.livescience.com/5325-mental-fatigue-perceived-physical-exhaustion.html"&gt;study conducted by Live Science&lt;/a&gt; showed that tough mental tasks can cause more fatigue than you might realize. Participants were asked to exercise, and those that had first expended mental energy on a challenging task stopped 15% earlier than those who didn't. Heading into the afternoon, you can count on having less energy if your morning was consumed by difficult work.&lt;/p&gt;

&lt;p&gt;"Taking a break in the middle of the day for lunch is a recovery period, allowing employees to come back refreshed and reinvigorated for the second half," &lt;a href="https://www.forbes.com/sites/alankohll/2018/05/29/new-study-shows-correlation-between-employee-engagement-and-the-long-lost-lunch-break/?sh=68ed5cf84efc"&gt;Jennifer Deal&lt;/a&gt;, a senior research scientist at the University of Southern California (USC).&lt;/p&gt;

&lt;p&gt;Lunch breaks can also include other activities to help you recharge. Making time to &lt;a href="https://reclaim.ai/use-cases/block-time-to-exercise"&gt;exercise&lt;/a&gt;, or even just &lt;a href="https://reclaim.ai/use-cases/block-time-to-walk"&gt;take a walk&lt;/a&gt;, brings positive impacts, improving your memory, concentration, and alertness. &lt;a href="https://reclaim.ai/use-cases/block-time-to-meditate"&gt;Meditation&lt;/a&gt; can reduce stress. Using a lunch break as a restorative period can set you up for a more productive afternoon.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-lunch-breaks-help-you-collaborate"&gt;
  &lt;/a&gt;
  &lt;strong&gt;3. Lunch breaks help you collaborate&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;While you can certainly use your lunch break to spend time alone (especially if you've been trapped in meetings all day), it may benefit you to eat lunch with teammates.&lt;/p&gt;

&lt;p&gt;Lunch breaks give you an opportunity to meet with your colleagues in a more casual setting --- not focused on work --- which can help everyone get to know each other more. Socialization between employees &lt;a href="https://www.sciencedirect.com/science/article/abs/pii/S0040162516300853"&gt;increases the effectiveness&lt;/a&gt; of collaboration as you increase your understanding of your colleagues' backgrounds and values.&lt;/p&gt;

&lt;p&gt;"From an evolutionary anthropology perspective, eating together has a long, primal tradition as a kind of social glue. That seems to continue in today's workplaces," says &lt;a href="https://news.cornell.edu/stories/2015/11/groups-eat-together-perform-better-together"&gt;Kevin Kniffin&lt;/a&gt;, author of the study "Eating Together at the Firehouse: How Workplace Commensality Relates to the Performance of Firefighters." The study found that the job performance of firefighters who ate together was higher than those who dined solo.&lt;/p&gt;

&lt;p&gt;For teams working in a shared space, lunch breaks are a convenient opportunity for coworkers to gather over something more intimate than a spreadsheet. Remote teams can gather for a "Zoom lunch" or meet at a coworking space or restaurant if they live in close proximity.&lt;/p&gt;

&lt;p&gt;Whether the gatherings occur in person or virtually, teams that take breaks together have stronger social groups. And the &lt;a href="https://www.semanticscholar.org/paper/Productivity-Through-Coffee-Breaks%3A-Changing-Social-Waber-Olgu%C3%ADn/597093a720b7c70aa6b039850e62f1a43f764a7f"&gt;strength of social groups&lt;/a&gt; correlates positively to productivity. &lt;a href="https://cdntorkprod.blob.core.windows.net/docs-c5/763/185763/original/tork-takes-back-survey.pdf"&gt;A study&lt;/a&gt; found that workers who take a lunch break every day have more engagement on a wide range of metrics, including job satisfaction, efficiency, and the desire to be an active member of the company.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-lunch-breaks-boost-creativity"&gt;
  &lt;/a&gt;
  &lt;strong&gt;4. Lunch breaks boost creativity&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Creativity often happens in the moments *between *the otherwise high demands on your brain to constantly process information. Motivated attention is known as the &lt;a href="https://neuroscience.stanford.edu/events/clarifying-role-task-positive-and-task-negative-networks-attentional-fluctuations-michael"&gt;task-positive network&lt;/a&gt;. Your brain is fired up and busy filing away everything you've taken in.&lt;/p&gt;

&lt;p&gt;But, much like your body can't physically be in go-go-go mode all the time, your brain also needs some downtime. The human brain is particularly demanding, constantly requiring &lt;a href="https://www.scientificamerican.com/article/mental-downtime/"&gt;20% of your body's energy&lt;/a&gt;. Between this high demand and information processing, your brain needs space in order for creativity to occur. Stepping away from a task to take a lunch break lets your creativity flow again.&lt;/p&gt;

&lt;p&gt;By contrast, your brain also has a &lt;a href="https://www.neuroscientificallychallenged.com/blog/know-your-brain-default-mode-network"&gt;default mode network&lt;/a&gt; (DMN), or brain activity that occurs when you are supposed to be "at rest" (i.e., not involved in a specific mental task). As it turns out, during DMN, your brain is far from idle. The brain instead works to make sense of what it has learned. While "aha moments" may seem to &lt;a href="https://www.scientificamerican.com/article/mental-downtime/"&gt;come out of nowhere&lt;/a&gt;, they are often the result of mental activity during downtime. They say the best ideas come to you in the shower, but you've probably had just as many while eating a sandwich.&lt;/p&gt;

&lt;p&gt;The DMN is linked to &lt;a href="https://journals.sagepub.com/doi/abs/10.1177/1745691612447308"&gt;cognitive abilities&lt;/a&gt; like divergent thinking. The DMN systems activated during rest are also important for imagining the future and feeling social emotions. When you give your brain a rest, you're giving a big boost to creativity and problem-solving. Your lunch break can serve as an ideal time to reach DMN, leading to more brilliant ideas later.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-lunch-breaks-sync-with-your-productivity-rhythms"&gt;
  &lt;/a&gt;
  &lt;strong&gt;5. Lunch breaks sync with your productivity rhythms&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Most people hit a low point in the early afternoon. This aligns with your circadian rhythm, or your body's natural ability to feel alert or sleepy. So, if you feel like you have an &lt;a href="https://hbr.org/2015/01/the-ideal-work-schedule-as-determined-by-circadian-rhythms"&gt;ebb and flow of cognitive ability&lt;/a&gt; throughout the day, you're not alone!&lt;/p&gt;

&lt;p&gt;The good thing about this rhythm is that it's predictable. You reach peak alertness in the morning, and then it begins to decline. Somewhere in the late afternoon, you get a second wind, but that &lt;a href="https://www.wsj.com/articles/how-to-be-healthier-happier-and-more-productive-its-all-in-the-timing-1514560647?mod=djcm_OBV1_092216&amp;amp;reflink=email_PocketAcq5"&gt;trough in the middle&lt;/a&gt; of the day is where you need to be mindful of how you spend your time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XthmySnI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://assets.website-files.com/5ed945986aedf80ff9c4bfd8/60d1afbd21db237e55b1c9f4_FJvNkC1zmduQdkKVgQWupb-TM7GYbcsywJFTEXM86EYD2856WlXeXKEslNZZ0GoFfzFA5u5yEZUqgLap4I84uDOsmFKnoMQzelefX5N5-seGaxxAsnvsY_xDfVE80LBVDFX_yTfC.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XthmySnI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://assets.website-files.com/5ed945986aedf80ff9c4bfd8/60d1afbd21db237e55b1c9f4_FJvNkC1zmduQdkKVgQWupb-TM7GYbcsywJFTEXM86EYD2856WlXeXKEslNZZ0GoFfzFA5u5yEZUqgLap4I84uDOsmFKnoMQzelefX5N5-seGaxxAsnvsY_xDfVE80LBVDFX_yTfC.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.hubspot.com/marketing/method-better-writing-ideal-time"&gt;&lt;em&gt;Image source&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;"The performance change between the daily high point and the daily low point can be equivalent to the effect on performance of drinking the legal limit of alcohol," writes &lt;a href="https://www.wsj.com/articles/how-to-be-healthier-happier-and-more-productive-its-all-in-the-timing-1514560647?mod=djcm_OBV1_092216&amp;amp;reflink=email_PocketAcq5"&gt;Russell Foster&lt;/a&gt;, a neuroscientist and chronobiologist at the University of Oxford, and Leon Kreitzman in their book Rhythms of Life. &lt;a href="http://www.skillteam.se/wp-content/uploads/2011/12/Ericsson_delib_pract.pdf"&gt;Studies also show&lt;/a&gt; that 4 to 5 hours of demanding mental activity is the limit before burnout.&lt;/p&gt;

&lt;p&gt;Instead of fighting your body's natural rhythms, you can be cognizant of how you spend your time. You can plan for less demanding tasks in the early afternoon. And a lunch break can be timed perfectly to address your naturally waning productivity.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#its-your-lunch-break-set-it-dont-forget-it"&gt;
  &lt;/a&gt;
  &lt;strong&gt;It's your lunch break: Set it --- don't forget it&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;The research certainly backs taking a meaningful lunch break: one where you can recharge for the afternoon with food and other energy-boosting activities. If you're looking to improve your afternoon work, take ownership over a block of time in the middle of your day. Protect that time on your calendar in the same way that you would a meeting or other scheduled event, and &lt;a href="https://reclaim.ai/features/habits"&gt;form habits&lt;/a&gt; for how you will spend that time. Your productivity depends on it.&lt;/p&gt;

</description>
      <category>agile</category>
      <category>productivity</category>
      <category>career</category>
      <category>leadership</category>
    </item>
  </channel>
</rss>
