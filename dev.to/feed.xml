<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Learn React with one BIG Project [NOTES included] - Demo and Video Link</title>
      <author>The Nerdy Dev</author>
      <pubDate>Thu, 10 Jun 2021 06:42:27 +0000</pubDate>
      <link>https://dev.to/thenerdydev/learn-react-with-one-big-project-notes-included-demo-and-video-link-4fe5</link>
      <guid>https://dev.to/thenerdydev/learn-react-with-one-big-project-notes-included-demo-and-video-link-4fe5</guid>
      <description>&lt;p&gt;Hey guys,&lt;/p&gt;

&lt;p&gt;I created a full fledged video to help others in learning React with ease.&lt;/p&gt;

&lt;p&gt;The video includes :&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-whiteboard-explanations-for-every-concept-that-we-use-in-the-video"&gt;
  &lt;/a&gt;
  1. Whiteboard explanations for every concept that we use in the video.
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g8v8PDHz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yyyro3fpawl6y4rnapto.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g8v8PDHz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yyyro3fpawl6y4rnapto.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
 &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GkG6mA4I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h2gw9i2k13hv2ld8xkqi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GkG6mA4I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h2gw9i2k13hv2ld8xkqi.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#2-notes-will-be-also-be-given-for-future-reference-and-i-believe-short-notes-help-in-recalling-the-concepts-easily-because-they-are-short-and-to-the-point-isnt-it-"&gt;
  &lt;/a&gt;
  2. NOTES will be also be given for future reference and I believe short notes help in recalling the concepts easily because they are short and to the point. Isn't it ?
&lt;/h3&gt;
&lt;h3&gt;
  &lt;a href="#3-crud-features-every-app-that-you-see-out-there-uses-crud-at-its-core-apart-from-other-features-that-they-contain"&gt;
  &lt;/a&gt;
  3. CRUD features (every app that you see out there uses CRUD at its core apart from other features that they contain)
&lt;/h3&gt;

&lt;p&gt;Here is a quick demo that can help you decide whether you should watch the video or not :&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ZdjZ3EGzGq0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;‚≠ê Link for the complete video : &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/iqewbHLKkQk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;üëâüèª &lt;strong&gt;PS&lt;/strong&gt; : I am working on a &lt;strong&gt;BRAND&lt;/strong&gt; new &lt;strong&gt;FREE&lt;/strong&gt;- &lt;strong&gt;Web Developer Full Course&lt;/strong&gt; on YouTube , check the below article to know more about the topics that we cover in this course:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/thenerdydev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dvgjnxQX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j2i8W0Wf--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/297820/e861379b-e75a-48e5-bc39-44b3e940c086.png" alt="thenerdydev image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/thenerdydev/2021-web-developer-full-course-html-css-javascript-node-js-and-mongodb-27pb" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;(2021) - Web Developer Full Course : HTML, CSS, JavaScript, Node.js and MongoDB&lt;/h2&gt;
      &lt;h3&gt;The Nerdy Dev „Éª Apr 28 „Éª 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#node&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;üëâüèª Follow me on Twitter : &lt;a href="https://twitter.com/The_Nerdy_Dev"&gt;https://twitter.com/The_Nerdy_Dev&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Follow me on:&lt;br&gt;
üëâ Twitter: &lt;a href="https://twitter.com/thenerdydev"&gt;https://twitter.com/thenerdydev&lt;/a&gt;&lt;br&gt;
üëâ YouTube: &lt;a href="https://youtube.com/thenerdydev"&gt;https://youtube.com/thenerdydev&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;See you on the other side :)&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Visualization of perl development history</title>
      <author>Kang-min Liu</author>
      <pubDate>Thu, 10 Jun 2021 06:32:06 +0000</pubDate>
      <link>https://dev.to/gugod/visualization-of-perl-development-history-4afm</link>
      <guid>https://dev.to/gugod/visualization-of-perl-development-history-4afm</guid>
      <description>&lt;p&gt;About 10 years ago I tried &lt;a href="https://gource.io/"&gt;gource&lt;/a&gt; and made a visualization of the commit history of &lt;a href="https://github.com/Perl/perl5"&gt;perl5.git&lt;/a&gt;. It was when grouce was new, shiny and cool: &lt;a href="https://youtu.be/jl9HVEJl_-w"&gt;https://youtu.be/jl9HVEJl_-w&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;10 years passed like a blink and it has been a remarkable decade for perl5.git. As we see the growth of commit volume, there is also stable pace of releasees thanks to the standardization of release procedure. With relocation of communication platform, participation and small fixes seems to be much easier. While it has not be a perfectly stable decade, it is a good one.&lt;/p&gt;

&lt;p&gt;So as a 10-yearly review, here's the updated version of that gource visualization on perl5.git, all the way to mid 2021: &lt;a href="https://youtu.be/8udGUs7TnEM"&gt;https://youtu.be/8udGUs7TnEM&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These are the commands used to produce that video:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd ~/src/perl5
gource -s 0.01 --auto-skip-seconds 0.1 -r 30 -f --user-scale 3 --file-idle-time 0 --hide bloom,filenames,dirnames --date-format '%Y' -o ~/var/gource-perl.ppm
ffmpeg  -an -y -f image2pipe -vcodec ppm -i ~/var/gource-perl.ppm -r 30.000 ~/var/gource-out.webm
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;Êú¨ÁØáÊñáÁ´†ÁÇ∫ &lt;a href="https://gugod.org/2021/06/perl-development-history-visualized/"&gt;perl ÈñãÁôºÊ≠∑Âè≤Á¥ÄÈåÑ‰πãË¶ñË¶∫Âåñ&lt;/a&gt; ‰πãËã±ÊñáÁâà&lt;/p&gt;

</description>
      <category>perl</category>
      <category>gource</category>
    </item>
    <item>
      <title>Change Detection in Angular</title>
      <author>Nikhil Dhawan</author>
      <pubDate>Thu, 10 Jun 2021 06:20:38 +0000</pubDate>
      <link>https://dev.to/this-is-angular/change-detection-in-angular-4a52</link>
      <guid>https://dev.to/this-is-angular/change-detection-in-angular-4a52</guid>
      <description>&lt;p&gt;Hi Readers, So if you have been using Angular for a while you might have heard of Angular Change detection. Angular handles all the changes which happen for the application on behalf of us even without our interference. In this article, we are going to discuss angular change detection and then how we can manage that manually.&lt;/p&gt;

&lt;p&gt;Even if Angular is doing it for we must know how it's working and do we even have ways to modify it. So the answer to later is Yes, we can modify for the component to behave differently based upon our requirement.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#how-does-it-works"&gt;
  &lt;/a&gt;
  How does it works?
&lt;/h4&gt;

&lt;p&gt;So in Angular is there is a change detection cycle that helps render the component tree with the new changes on its own. If there is some value change in the component then you will be able to see the updated value automatically, as Angular re-renders all the components in the component tree from parent to child for us automatically. So as I mentioned earlier we can modify this behavior, let us discuss briefly on this.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#modifying-the-default-behavior"&gt;
  &lt;/a&gt;
  Modifying the default behavior
&lt;/h4&gt;

&lt;p&gt;So Angular has 2 ways for Change Detection, the first is OnPush, and the other is Default. Default is what we have touched already. In the OnPush strategy, we have more control over the component re-rendering and Angular also skips re-rendering of the component if certain conditions are not fulfilled which are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Change in input bound property.&lt;/li&gt;
&lt;li&gt;Use of async pipe.&lt;/li&gt;
&lt;li&gt;Event from component or its child.&lt;/li&gt;
&lt;li&gt;Manually marked components for change detection.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The first point is related to the value for &lt;strong&gt;@Input&lt;/strong&gt;  Decorator. So whenever you are passing the value to the Input property just remember to pass a new reference if you want to take advantage of the ngOnChanges hook which is like passing immutable objects always, if you just modify the object directly instead of providing a new copy you may face issues where the component data is not updated in case of OnPush strategy and even if you are Default strategy and using ngOnChanges hook for some purpose that may not work.&lt;/p&gt;

&lt;p&gt;So to sum up, here we learned basics about change detection and how we can have custom control over the component when we set its change detection strategy to OnPush. Hope you were able to understand this, in my upcoming articles about change detection will touch base upon some working examples and some deep dive.&lt;br&gt;
Till then Happy Learning!&lt;br&gt;
Thanks for reading, do provide your feedback.&lt;/p&gt;

</description>
      <category>angular</category>
    </item>
    <item>
      <title>Angular : How to add Toastr in your angular project just in 15 minutes?</title>
      <author>RajeshKumarYadav.com</author>
      <pubDate>Thu, 10 Jun 2021 05:16:44 +0000</pubDate>
      <link>https://dev.to/rajeshkumaryadavdotcom/angular-how-to-add-toastr-in-your-angular-project-just-in-15-minutes-533p</link>
      <guid>https://dev.to/rajeshkumaryadavdotcom/angular-how-to-add-toastr-in-your-angular-project-just-in-15-minutes-533p</guid>
      <description>&lt;p&gt;Demo -&lt;br&gt;&lt;br&gt;
 &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lrN92HhW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://developersdiscussion.com/ext/dmzx/imageupload/files/a0adb70c7105c9f8c2582077f9b0ac4b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lrN92HhW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://developersdiscussion.com/ext/dmzx/imageupload/files/a0adb70c7105c9f8c2582077f9b0ac4b.png" alt="Image"&gt;&lt;/a&gt;  &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step-1-install-dependancies-for-toastr-and-animation-in-your-project"&gt;
  &lt;/a&gt;
  Step 1 - Install dependancies for toastr and animation in your project.
&lt;/h2&gt;

&lt;p&gt;Open your terminal in project folder and run below command -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="nx"&gt;ngx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;toastr&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;save&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;@angular/animations package is a required dependency for the default toast&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;angular&lt;/span&gt;&lt;span class="sr"&gt;/animations --sav&lt;/span&gt;&lt;span class="err"&gt;e
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-2-add-toastr-styles-in-your-project"&gt;
  &lt;/a&gt;
  Step 2 - Add Toastr Styles in your project
&lt;/h2&gt;

&lt;p&gt;Add few styles based on your requirements -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;regular&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt; &lt;span class="nx"&gt;toast&lt;/span&gt; 
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;~ngx-toastr/toastr&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// bootstrap style toast &lt;/span&gt;
&lt;span class="c1"&gt;// or import a bootstrap 4 alert styled design (SASS ONLY) &lt;/span&gt;
&lt;span class="c1"&gt;// should be after your bootstrap imports, it uses bs4 variables, mixins, functions &lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;~ngx-toastr/toastr-bs4-alert&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// if you'd like to use it without importing all of bootstrap it requires &lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;~bootstrap/scss/functions&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;~bootstrap/scss/variables&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;~bootstrap/scss/mixins&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;~ngx-toastr/toastr-bs4-alert&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you are using angular-cli you can add it to your angular.json&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;styles&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;styles.scss&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;node_modules/ngx-toastr/toastr.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="c1"&gt;// try adding '../' if you're using angular cli before 6]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-3-add-raw-toastrmodule-endraw-to-app-raw-ngmodule-endraw-make-sure-you-have-raw-browseranimationsmodule-endraw-as-well"&gt;
  &lt;/a&gt;
  Step 3 - add &lt;code&gt;ToastrModule&lt;/code&gt; to app &lt;code&gt;NgModule&lt;/code&gt;, make sure you have &lt;code&gt;BrowserAnimationsModule&lt;/code&gt; as well
&lt;/h2&gt;

&lt;p&gt;app.module.ts&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BrowserModule&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/platform-browser&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;NgModule&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BrowserAnimationsModule&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/platform-browser/animations&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ToastrModule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ToastContainerModule&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ngx-toastr&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;AppComponent&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./app.component&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;NgModule&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
 &lt;span class="na"&gt;declarations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;AppComponent&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; 
 &lt;span class="na"&gt;imports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
          &lt;span class="nx"&gt;BrowserModule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;BrowserAnimationsModule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
          &lt;span class="nx"&gt;ToastrModule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forRoot&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;positionClass&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;inline&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}),&lt;/span&gt; 
          &lt;span class="nx"&gt;ToastContainerModule&lt;/span&gt;
&lt;span class="p"&gt;],&lt;/span&gt; 
 &lt;span class="na"&gt;providers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; 
 &lt;span class="na"&gt;bootstrap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;AppComponent&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

 &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppModule&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-4-add-a-div-with-toastcontainer-directive-on-it"&gt;
  &lt;/a&gt;
  Step 4 - Add a div with toastContainer directive on it.
&lt;/h2&gt;

&lt;p&gt;CODE:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;OnInit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ViewChild&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ToastContainerDirective&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ToastrService&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ngx-toastr&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; 
&lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;app-root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
&lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;` &amp;lt;h1&amp;gt;&amp;lt;a (click)="onClick()"&amp;gt;Click&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt; &amp;lt;div toastContainer&amp;gt;&amp;lt;/div&amp;gt;`&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppComponent&lt;/span&gt; &lt;span class="kr"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;OnInit&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;ViewChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ToastContainerDirective&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;static&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="nx"&gt;toastContainer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ToastContainerDirective&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 

&lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;toastrService&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ToastrService&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt; 

&lt;span class="nx"&gt;ngOnInit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toastrService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;overlayContainer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toastContainer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt; 

&lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toastrService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;success&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;in div&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Extra Bits-&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
How to handle toastr click/tap action?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;showToaster&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
 &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toastr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;success&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello world!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Toastr fun!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;onTap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;take&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toasterClickedHandler&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 

&lt;span class="nx"&gt;toasterClickedHandler&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
 &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Toastr clicked&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/rkycom"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With all that being said, I highly recommend you keep learning!&lt;/p&gt;

&lt;p&gt;Thank you for reading this article. Please feel free to connect with me on &lt;a href="https://www.linkedin.com/in/www-rajeshkumaryadav-com/"&gt;LinkedIn&lt;/a&gt; and &lt;a href="https://twitter.com/rky_com"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>angular</category>
      <category>typescript</category>
      <category>node</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Get meta info about python modules</title>
      <author>Adwaith Rajesh</author>
      <pubDate>Thu, 10 Jun 2021 03:39:01 +0000</pubDate>
      <link>https://dev.to/adwaithrajesh/get-meta-info-about-python-modules-c72</link>
      <guid>https://dev.to/adwaithrajesh/get-meta-info-about-python-modules-c72</guid>
      <description>&lt;p&gt;Get extra info about a python module, like imports, functions called inside other funcs etc.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;py-module-info
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#why-use-this"&gt;
  &lt;/a&gt;
  Why use this?
&lt;/h2&gt;

&lt;p&gt;Well Idk, the &lt;code&gt;inspect&lt;/code&gt; module in python requires you to import the module.&lt;br&gt;
This package does not require you to import, but rather just looks at the python file like a normal text file and parses it. The problem with importing is that it may execute code that can harm your PC. So maybe ?&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-does-it-do"&gt;
  &lt;/a&gt;
  What does it do?
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#get-info-about-the-imports-used"&gt;
  &lt;/a&gt;
  Get info about the imports used
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# test.py
&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pprint&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dump&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;py_module_info.main&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ModuleInfo&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;To get the imported names use&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;py_module_info&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ModuleInfo&lt;/span&gt;
&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ModuleInfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"test.py"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;imports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_imports&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;imports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_imported_names&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="c1"&gt;# output
&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'json'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'pprint'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'List'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'load'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'dump'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'ModuleInfo'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# in order to get the alias names used
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;imports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_imported_names&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;use_alias&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;# output
&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'json'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'p'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'l'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'load'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'d'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'ModuleInfo'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To get the literal import string in the module use&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;py_module_info&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ModuleInfo&lt;/span&gt;
&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ModuleInfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"test.py"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;imports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_imports&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;imports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_import_strings&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="c1"&gt;# output
&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'import json'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'import pprint'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'from typing import List'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s"&gt;'from json import load'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'from json import dump'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'from py_module_info.main import ModuleInfo'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# use alias names insted
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;imports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_import_strings&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;use_alias&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;# output
&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'import json'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'import pprint as p'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'from typing import List as l'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s"&gt;'from json import load'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'from json import dump as d'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'from py_module_info.main import ModuleInfo'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#note"&gt;
  &lt;/a&gt;
  Note
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;The imports will be split into individual imports:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;test&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;will become
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;test&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#get-info-about-the-function-in-the-module"&gt;
  &lt;/a&gt;
  Get info about the function in the module.
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# test.py
&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pprint&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;pprint&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;pprint&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s"&gt;"Hello"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"World"&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;


    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"test.json"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To get info about the functions use&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;py_module_info&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ModuleInfo&lt;/span&gt;

&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ModuleInfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"test.py"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_funcs_info&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="c1"&gt;# output
&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'foo'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'args'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="s"&gt;'defaults'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="s"&gt;'arg_count'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'calls'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'json.load(f)'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'open("test.json")'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'pprint({"Hello": "World"})'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'print(json.load(f))'&lt;/span&gt;&lt;span class="p"&gt;]}}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The output includes the args passed in function, the defaults value for the the arguments, the argument count, and all the function calls that happened inside the function.&lt;/p&gt;

&lt;p&gt;The function calls are all expanded and includes the entire call string.&lt;/p&gt;

&lt;p&gt;In order to get just the function calls use&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;py_module_info&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ModuleInfo&lt;/span&gt;

&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ModuleInfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"test.py"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_funcs_info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;only_func_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;# output
&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'foo'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'args'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="s"&gt;'defaults'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="s"&gt;'arg_count'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'calls'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'load'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'open'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'pprint'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'print'&lt;/span&gt;&lt;span class="p"&gt;]}}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A way to get the same data from classes will be added in the future version.&lt;/p&gt;

</description>
      <category>python</category>
      <category>imports</category>
    </item>
    <item>
      <title>Developer Nation 2021</title>
      <author>Rahul</author>
      <pubDate>Thu, 10 Jun 2021 03:25:55 +0000</pubDate>
      <link>https://dev.to/rahul72/developer-nation-2021-171a</link>
      <guid>https://dev.to/rahul72/developer-nation-2021-171a</guid>
      <description>&lt;p&gt;What‚Äôs your favourite programming language? Take the new #DeveloperNationSurvey to support your choice! You could win a #SamsungGalaxy S21, a #macbookpro, #GitKraken Pro license, #Amazon vouchers and more! #JavaScript #csharp #python #java #PHP #kotlin&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developereconomics.net?member_id=KgN1BPYe&amp;amp;lang=en&amp;amp;locale=en"&gt;https://developereconomics.net?member_id=KgN1BPYe&amp;amp;lang=en&amp;amp;locale=en&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>reactnative</category>
      <category>react</category>
      <category>aws</category>
    </item>
    <item>
      <title>How to Give Better Code Reviews</title>
      <author>Laurie</author>
      <pubDate>Thu, 10 Jun 2021 03:23:34 +0000</pubDate>
      <link>https://dev.to/laurieontech/how-to-give-better-code-reviews-3jik</link>
      <guid>https://dev.to/laurieontech/how-to-give-better-code-reviews-3jik</guid>
      <description>&lt;p&gt;If you're working on a codebase with more than one contributor you likely participate in code review. Also known as the act of signing off on someone else's code before it can be merged into the main branch.&lt;/p&gt;

&lt;p&gt;The idea behind code review is incredibly sound. We all benefit from an extra pair of eyes. It helps team members gain context on other pieces of the code base. It ideally keeps the patterns and choices consistent, helping people onboard down the line.&lt;/p&gt;

&lt;p&gt;Yet the words "code review" can often strike fear into the minds of those who hear it. Those who have endured bad code reviews often describe the experience as demoralizing or condescending. We don't want to make people feel that way, so let's talk about what it takes to be a good reviewer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-not-to-do"&gt;
  &lt;/a&gt;
  What not to do
&lt;/h2&gt;

&lt;p&gt;Let's start by explaining what code review is not.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Code review is &lt;strong&gt;not&lt;/strong&gt; being a human linter&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If a given piece of syntax should never show up in your codebase, add an automatic linter rule. It's a waste of time to make this a manual process and it doesn't provide a ton of value. If it's not worth it to add the rule then it's probably not worth it to point out in the code review either. If you do, you're being pedantic.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Code review is &lt;strong&gt;not&lt;/strong&gt; about proving how smart you are&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The goal of code review is entirely about the person who wrote the code growing their skills, and your codebase getting more robust. None of that is about your ego or showing off how much you know.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-how-do-i-do-it-right"&gt;
  &lt;/a&gt;
  So how do I do it right?
&lt;/h2&gt;

&lt;p&gt;Now that we have that out of the way, we can talk about what you &lt;em&gt;should&lt;/em&gt; do.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#this-is-a-two-way-conversation"&gt;
  &lt;/a&gt;
  This is a two way conversation
&lt;/h3&gt;

&lt;p&gt;Yes, there are power dynamics at play in code review. The reviewer may have a more senior title or have more experience in the codebase at hand. The original author may take that into account when weighing the recommendations, but as a reviewer you need to recognize that what you say isn't gospel. You may be missing context, or misunderstand what the original author is trying to do.&lt;/p&gt;

&lt;p&gt;Given that, it's better to ask questions when phrasing recommendations. Instead of "You should do it Y way", try "Can you talk about your reasons for choosing X? In most cases I'd use Y, is there a reason not to here?". Typically, this has the same outcome but it feels more collaborative and leaves open an opportunity for all participants to learn.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#this-isnt-just-about-what-is-wrong"&gt;
  &lt;/a&gt;
  This isn't just about what is wrong
&lt;/h3&gt;

&lt;p&gt;Code reviews are asynchronous, but they don't have to read that way. The goal is to provide feedback and not all feedback is negative. It's just as valid to say "Cool! I didn't know you could do that". And you should. It will balance out the overall tenor of the review and leave the author with a sense of where they can improve as well as where they should double down.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#not-everything-is-blocking"&gt;
  &lt;/a&gt;
  Not everything is blocking
&lt;/h3&gt;

&lt;p&gt;This may seem contrary to my comment above about being a human linter. However, not all things can be linted. Naming is a great example of this. Sometimes, you may have a recommendation that should not prevent the code from moving forward, but you want to note anyway.&lt;/p&gt;

&lt;p&gt;Marking these things as "NB" or non-blocking can be a great way to provide a quick note that an author can consider but doesn't have to listen to. This is especially helpful if you have an idea for an improvement but don't feel strongly about it. Or you have a question but don't want the back and forth to hold up getting the feature in.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-am-i-looking-for"&gt;
  &lt;/a&gt;
  What am I looking for?
&lt;/h2&gt;

&lt;p&gt;Now that we've talked about how to give feedback, let's talk about what to give feedback on. If code review isn't for pointing out syntax improvements, what is it for?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Integration points&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Is there a spot that may cause friction with another system? Do you need to loop someone else into the review? Does there need to be a synchronous conversation? Point that out.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Error boundaries&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Is there an edge case that isn't considered or handled? Talk about it. Make sure to address it before the code gets merged.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Unecessary bloat&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Does the code propose including a new library or system of some kind? Does it need to? It's worth discussing.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Pattern deviation&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Are you deviating from the way you've handled this type of functionality or data elsewhere in the codebase? Why? Let's talk about it.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Scalablility&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Is the way the is code written going to cause problems down the road? Bring it up early even if you choose to go for the short term solution.&lt;/p&gt;

&lt;p&gt;This is not an exhaustive list, but it should give you an idea of areas of concern that reviews can help aleviate.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#level-up-your-team"&gt;
  &lt;/a&gt;
  Level up your team
&lt;/h2&gt;

&lt;p&gt;The goal of a code review is to help level up the team and improve the long term health of the codebase. So focus on learning opportunities for your colleagues and yourself. And keep practicing--code review is a skill.&lt;/p&gt;

</description>
      <category>career</category>
      <category>productivity</category>
      <category>programming</category>
    </item>
    <item>
      <title>React 18: Terms and Functionality</title>
      <author>Laurie</author>
      <pubDate>Thu, 10 Jun 2021 03:21:14 +0000</pubDate>
      <link>https://dev.to/laurieontech/react-18-terms-and-functionality-165l</link>
      <guid>https://dev.to/laurieontech/react-18-terms-and-functionality-165l</guid>
      <description>&lt;p&gt;As of today, &lt;a href="https://reactjs.org/blog/2021/06/08/the-plan-for-react-18.html"&gt;React 18 Alpha&lt;/a&gt; is here! This is exciting news as the last major release, 17, didn't include new functionality.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-new"&gt;
  &lt;/a&gt;
  What's new?
&lt;/h2&gt;

&lt;p&gt;If you're interested in learning about the new features, I'd encourage you to look at the &lt;a href="https://github.com/reactwg/react-18/discussions"&gt;GitHub discussions&lt;/a&gt;. The React team has done a great job of explaining things in detail and is actively answering questions.&lt;/p&gt;

&lt;p&gt;The big takeaway is that you can use React 18 without having to change your existing application code. If you want to use the new features, you'll opt in rather than being forced to rewrite large chunks of code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cool-is-that-it"&gt;
  &lt;/a&gt;
  Cool, is that it?
&lt;/h2&gt;

&lt;p&gt;If that's all you wanted to know and you're ready to dive into the links above, go right ahead! But since I'm me, I found myself wondering about all the terminology I've heard over the past year or so. What is the right way to talk about React 18 going forward?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#suspense"&gt;
  &lt;/a&gt;
  Suspense
&lt;/h3&gt;

&lt;p&gt;This functionality was available starting with React 16.6. The idea was that you could designate a loading state while you waited for some code to load.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Suspense&lt;/span&gt; &lt;span class="na"&gt;fallback&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Spinner&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ProfilePage&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Suspense&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;React 18 does indeed dive into more in the world of Suspense. In fact, the way Suspense works has changed. You can read more in the &lt;a href="https://github.com/reactwg/react-18/discussions/7"&gt;GitHub discussion&lt;/a&gt; but it's helpful to point out the terminology changes. Specifically, the pre-React 18 Suspense implementation is now referred to as &lt;code&gt;Legacy Suspense&lt;/code&gt; and the new implementation is &lt;code&gt;Concurrent Suspense&lt;/code&gt;. Why? Let's talk concurrent React!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#concurrent"&gt;
  &lt;/a&gt;
  Concurrent
&lt;/h3&gt;

&lt;p&gt;This is the term you'll see most often in all of the various discussions/blog posts. So what exactly is concurrent React? "Concurrent" is the word being used to describe a suite of new features that rely on a specific type of internal implementation.&lt;/p&gt;

&lt;p&gt;This includes things like &lt;code&gt;startTransition&lt;/code&gt; that helps you account for expensive state transitions. It also covers &lt;code&gt;SuspenseList&lt;/code&gt;, a way to coordinate the various &lt;code&gt;Suspense&lt;/code&gt; fallback states. There are a couple other headline features, but the big takeaway is that concurrent React is a way of getting, and keeping, your pages interactive--even if they're actively doing other things.&lt;/p&gt;

&lt;p&gt;It's important to note that these are not the only concurrent features that will eventually end up in React, but they're a big start on the journey.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#server-components"&gt;
  &lt;/a&gt;
  Server Components
&lt;/h3&gt;

&lt;p&gt;In December of 2020, Dan Abramov and Lauren Tan gave a great talk introducing &lt;a href="https://reactjs.org/blog/2020/12/21/data-fetching-with-react-server-components.html"&gt;server components&lt;/a&gt;. In this video they talked about writing React components server side and having the result of that component sent to the client and rendered.&lt;/p&gt;

&lt;p&gt;This was a very cool demo! ...and it's not a part of React 18. However, React 18 does set the stage for some of this functionality in the future.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>react</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Accessibility Interview Questions - Part 6</title>
      <author>Neha Sharma </author>
      <pubDate>Thu, 10 Jun 2021 02:46:58 +0000</pubDate>
      <link>https://dev.to/hellonehha/accessibility-interview-questions-part-6-3j6f</link>
      <guid>https://dev.to/hellonehha/accessibility-interview-questions-part-6-3j6f</guid>
      <description>&lt;p&gt;You can read part 1, 2, 3, 4, and 5 here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://a11ytips.dev/docs/accessibility-interview-questions/"&gt;Part 1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://a11ytips.dev/docs/interview-questions/"&gt;Part 2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://a11ytips.dev/docs/accessibility-interview-questions-3/"&gt;Part 3&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://a11ytips.dev/docs/accessibility-interview-questions-4/"&gt;Part 4&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://a11ytips.dev/docs/accessibility-interview-questions-5/"&gt;Part 5&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#41-explain-the-process-of-accessibility-handsoff-in-your-project-between-designers-and-developers"&gt;
  &lt;/a&gt;
  41: Explain the process of accessibility hands-off in your project between designers and developers
&lt;/h2&gt;

&lt;p&gt;As a developer, I expect that the designer has designed the accessible screens. Designers have already taken care of the color contrast, and other UX accessibility requirements. Though if there are any modules or screens that requires extra information on:&lt;/p&gt;

&lt;p&gt;1) How the keyboard flow will work? &lt;/p&gt;

&lt;p&gt;2) How the screenreader's experience would be?&lt;/p&gt;

&lt;p&gt;For that, we request a wireframe to explain the same.&lt;/p&gt;

&lt;p&gt;Having said that we do re-check the color-contrast and other elements related to the UX and accessibility. If anything is off, we share the feedback with the UX team.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#42-given-the-below-table-code-what-are-the-accessibility-issues-it-has-how-you-are-going-to-fix-it"&gt;
  &lt;/a&gt;
  42: Given the below table code what are the accessibility issues it has? How you are going to fix it?
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;table&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;Country&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;City&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;1.&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;India&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;New Delhi&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;2.&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;USA&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;New York&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Below are the issues with the above code:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;caption&lt;/code&gt; is missing. This is useful to give the summary of the table&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;th&lt;/code&gt; is missing. This is useful to indicate the table header.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;scope&lt;/code&gt; is missing. This is useful to build the relationship between the rows and columns.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;table&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;caption&amp;gt;&lt;/span&gt;Country and city details&lt;span class="nt"&gt;&amp;lt;/caption&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;th&lt;/span&gt; &lt;span class="na"&gt;scope=&lt;/span&gt;&lt;span class="s"&gt;"col"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Country&lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;th&lt;/span&gt; &lt;span class="na"&gt;scope=&lt;/span&gt;&lt;span class="s"&gt;"col"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;City&lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;td&lt;/span&gt; &lt;span class="na"&gt;scope=&lt;/span&gt;&lt;span class="s"&gt;"row"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;India&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;New Delhi&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;td&lt;/span&gt; &lt;span class="na"&gt;scope=&lt;/span&gt;&lt;span class="s"&gt;"row"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;USA&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;New York&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/table&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#43-what-is-the-importance-of-role-what-are-the-important-things-one-should-take-care-of-while-using-a-role-give-example"&gt;
  &lt;/a&gt;
  43: What is the importance of 'role'? What are the important things one should take care of while using a role? Give example.
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;role&lt;/code&gt; is a way to identify the non-semantic tags to the screen readers. As of now, HTML5 has a lot of semantics tags available. Using HTML5 semantic tags with &lt;code&gt;role&lt;/code&gt;&lt;br&gt;
could lead to repetitive information for the screen reader users.&lt;/p&gt;

&lt;p&gt;Hence, be careful while using role with html5 tags.&lt;/p&gt;

&lt;p&gt;This is a BIG NO:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;header&lt;/span&gt; &lt;span class="na"&gt;role=&lt;/span&gt;&lt;span class="s"&gt;"header"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#44-how-to-make-the-notifications-accessible-by-screen-readers-or-keyboard"&gt;
  &lt;/a&gt;
  44: How to make the notifications accessible by screen readers or keyboard?
&lt;/h2&gt;

&lt;p&gt;The problem with the implementation of notification is that they get appended (or added) in the DOM later and when they appear&lt;br&gt;
on screen, the cursor focus is not there.&lt;/p&gt;

&lt;p&gt;So, we need to solve the issue when the notification appears on the screen the focus of the user and screenreader should go to the notification.&lt;/p&gt;

&lt;p&gt;Fortunately, we do have the tags that help in doing this and saving the developers time.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"notification"&lt;/span&gt; &lt;span class="na"&gt;aria-live=&lt;/span&gt;&lt;span class="s"&gt;"assertive"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;This is the notification!!&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#45-what-are-a-few-best-practices-around-links-and-accessibility"&gt;
  &lt;/a&gt;
  45: What are a few best practices around links and accessibility?
&lt;/h2&gt;

&lt;p&gt;There are many times developers get confused with where to use &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;button&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag is used for the redirection. When the link is opening to the new window/tab it is a good practice is to mention it.&lt;br&gt;
Similarly, when it comes to the download links it is advised to mention them. This is advised not just visually but for screen readers too.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"home.html"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;home&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"www.google.com"&lt;/span&gt; &lt;span class="na"&gt;target=&lt;/span&gt;&lt;span class="s"&gt;"_blank"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Google (opens in new window)&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"tipsForAccessibility.pdf"&lt;/span&gt; &lt;span class="na"&gt;download&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Tips for Accessibility (PDF Downloadable)&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"youtube.com/video=abc"&lt;/span&gt; &lt;span class="na"&gt;target=&lt;/span&gt;&lt;span class="s"&gt;"_blank"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;[Video] Watch now what accessibility is (open in new window)&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#46-what-are-your-testing-strategy-for-accessibility-testing-name-a-few-tools-and-nontools-tricks"&gt;
  &lt;/a&gt;
  46: what are your testing strategy for accessibility testing? Name a few tools and non-tools tricks.
&lt;/h2&gt;

&lt;p&gt;The testing strategy involves: Manual and Automated. A few tools are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Plugins for IDE&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Extensions: LightHouse, WAVE, AXE, etc.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Manual testing: keyboard, voice over&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#47-what-would-happen-if-we-have-raw-ltul-rolelistgt-ltulgt-endraw-"&gt;
  &lt;/a&gt;
  47: What would happen if we have &lt;code&gt;&amp;lt;ul role="list"&amp;gt; ... &amp;lt;/ul&amp;gt;&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;For Mac VoiceOver this will say "You are on the list". As &lt;code&gt;role&lt;/code&gt; and &lt;code&gt;ul&lt;/code&gt; semantic meaning in the given example is the same. Hence, it won't create any issue.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#48-which-tools-you-use-for-mobile-testing"&gt;
  &lt;/a&gt;
  48: Which tools you use for Mobile testing?
&lt;/h2&gt;

&lt;p&gt;If it is responsive testing then I follow the WCAG rules which require manual and automated testing. For dedicated mobile testing, we can use the native screen readers that come installed with them - talkback and voiceover.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#49-what-will-happen-raw-ltimg-srcabcjpg-alt-gt-endraw-raw-ltimg-srcabcjpg-gt-endraw-and-raw-ltimg-srcabcjpg-alt-gt-endraw-"&gt;
  &lt;/a&gt;
  49: What will happen: &lt;code&gt;&amp;lt;img src="abc.jpg" alt="" /&amp;gt;&lt;/code&gt; ,&lt;code&gt;&amp;lt;img src="abc.jpg" /&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;img src="abc.jpg" alt /&amp;gt;&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;alt tag is important for the screen readers. However, all the 3 syntaxes are focusing on the different ways of using alt tags. The impact would be for the&lt;br&gt;
screenreader users:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;img src="abc.jpg" alt="" /&amp;gt;&lt;/code&gt;: The screen readers will skip the image element altogether.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;img src="abc.jpg" /&amp;gt;&lt;/code&gt;: In the absence of the &lt;code&gt;alt&lt;/code&gt; attribute, screen readers will read aloud the content of the &lt;code&gt;src&lt;/code&gt; tag.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;img src="abc.jpg" alt /&amp;gt;&lt;/code&gt;: The screen readers will skip the image element altogether.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#50-how-will-you-make-a-website-like-pinterest-accessible"&gt;
  &lt;/a&gt;
  50: How will you make a website like Pinterest accessible?
&lt;/h2&gt;

&lt;p&gt;Aah!! this is an interesting question. If we consider the vision-disable folks. There are 17 vision related disabilities:&lt;br&gt;
From 100% blind to color blindness.&lt;/p&gt;

&lt;p&gt;Pinterest and Instagram are 100% images and videos based content. Making them accessible for the vision disabled folks would be a challenge but &lt;br&gt;
what we can do is make it accessible by doing:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#images"&gt;
  &lt;/a&gt;
  Images
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Proper alt tags&lt;/li&gt;
&lt;li&gt;Dark and Light theme&lt;/li&gt;
&lt;li&gt;alt tags&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#videos"&gt;
  &lt;/a&gt;
  Videos
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Controls&lt;/li&gt;
&lt;li&gt;live captions&lt;/li&gt;
&lt;li&gt;local language translations&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Happy Learning!!&lt;/p&gt;

</description>
      <category>a11y</category>
      <category>webdev</category>
    </item>
    <item>
      <title>PGP for the Working Dev (1)</title>
      <author>thunderbiscuit</author>
      <pubDate>Thu, 10 Jun 2021 02:29:05 +0000</pubDate>
      <link>https://dev.to/thunderbiscuit/pgp-for-the-working-dev-1-4f4g</link>
      <guid>https://dev.to/thunderbiscuit/pgp-for-the-working-dev-1-4f4g</guid>
      <description>&lt;p&gt;If you care about software, you should learn how to produce cryptographic signatures on data (documents, messages, binaries, git commits) and how to verify other people's signatures. Turns out it's rather easy, and all you need is a terminal and maybe half an hour of time!&lt;/p&gt;

&lt;p&gt;The goal of this article is to get you up to speed on two of the main uses of the GPG cli software: cryptographically signing and verifying signatures on data.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: this post is the first of a 2-part series aimed at developing a functional use of GPG for the day-to-day tasks of anyone who cares about software. Check out &lt;a href="https://dev.to/thunderbiscuit/pgp-for-the-working-dev-2-2ol1"&gt;Part 2&lt;/a&gt; for the lowdown on how to encrypt and decrypt messages.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;GPG stands for &lt;em&gt;GNU Privacy Guard&lt;/em&gt; and is a small open source piece of software that allows you to manage keys for cryptographic purposes. GPG implements the OpenPGP standard maintained by the Internet Engineering Task Force. In practice, the terms GPG, OpenPGP, and PGP are often used interchangably even though they probably shouldn't be. You can think of OpenPGP as email and GPG as one implementation of the email protocol (like Hotmail or Gmail). PGP is the protocol, and the command line tool we use to perform tasks using this protocol is called &lt;code&gt;gpg&lt;/code&gt;. Confusing I know.&lt;/p&gt;

&lt;p&gt;One important aspect of cryptographic keys is that they are &lt;em&gt;simply numbers&lt;/em&gt;. They are often really, really big numbers, but simple integers nonetheless. Another important aspect of cryptographic keys as used in GPG is that they come in pairs: a &lt;em&gt;public&lt;/em&gt; key and a &lt;em&gt;private&lt;/em&gt; key. Knowledge of these numbers (the keys) allows us to perform many tasks, two of which we'll tackle here:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Signing a piece of data in a way that only a person knowing a specific key could have done.&lt;/li&gt;
&lt;li&gt;Verify the validity of a signature from someone else on a specific piece of data.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;GPG does much more, but this post is really about those two basic tasks and their related options.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;There is much more to learn about privacy, encryption, and GPG than I cover in this series; for information on who invented this whole thing in the first place, check out &lt;a href="https://en.wikipedia.org/wiki/Phil_Zimmermann"&gt;Phil Zimmermann's Wikipedia page&lt;/a&gt;; for more on the difference between GPG and PGP, check out &lt;a href="https://www.goanywhere.com/blog/2013/07/18/openpgp-pgp-gpg-difference"&gt;this article&lt;/a&gt;; to dig deeper into the specifics of GPG, check out &lt;a href="https://gnupg.org/"&gt;their docs&lt;/a&gt;.  &lt;/p&gt;
&lt;/blockquote&gt;



&lt;h2&gt;
  &lt;a href="#priors"&gt;
  &lt;/a&gt;
  Priors
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#installing-the-software"&gt;
  &lt;/a&gt;
  Installing the Software
&lt;/h3&gt;

&lt;p&gt;First, make sure you have GPG installed on your computer. You can get it on MacOS using homebrew (&lt;code&gt;brew install gpg&lt;/code&gt;), on Linux using any of the package managers, or on Windows by downloading the binaries directly from the &lt;a href="https://gnupg.org/download/index.html"&gt;GnuPG official website&lt;/a&gt;. You will also need a bash terminal to interact with the software.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# if this returns a version number, you're good!&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;gpg &lt;span class="nt"&gt;--version&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#creating-keys"&gt;
  &lt;/a&gt;
  Creating Keys
&lt;/h3&gt;

&lt;p&gt;The first thing we want to do is create a key set (a public and a private key pair). I recommend creating an set of test keys with a simple password to use for the rest of this tutorial, and deleting it afterwards:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;gpg &lt;span class="nt"&gt;--full-generate-key&lt;/span&gt;  &lt;span class="c"&gt;# generate a new key&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The process of creating a new key pair requires that we answer some question about key type and size, as well as associate some information with the keys. If you answer the few questions required to build keys, you should soon find that you now have a key set available in your GPG keyring. To see what keys are available, enter:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;gpg &lt;span class="nt"&gt;--list-keys&lt;/span&gt;
pub   rsa1024 2019-09-14 &lt;span class="o"&gt;[&lt;/span&gt;SC]
      0E94A26389C61705D08560DFE8C2F3D9893479A7
uid           &lt;span class="o"&gt;[&lt;/span&gt;ultimate] MrAnderson &amp;lt;MrAnderson@email.com&amp;gt;
sub   rsa1024 2019-09-14 &lt;span class="o"&gt;[&lt;/span&gt;E]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We now have a key pair available to us for the tasks below. The &lt;code&gt;--list-key&lt;/code&gt; command outputs some metadata about the key, as well as a fingerprint‚Äîthe &lt;code&gt;0E94A26389C61705D08560DFE8C2F3D9893479A7&lt;/code&gt; part. The fingerprint is a hash of the public key, and can therefore be used for identification.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#exporting-and-importing-keys"&gt;
  &lt;/a&gt;
  Exporting and Importing Keys
&lt;/h3&gt;

&lt;p&gt;To verify the validity of your signature on data or encrypt messages destined for you, other users will need to have your public key information. We can export our public key to a file using the following command, and then simply share the file with anyone we wish:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;gpg --export --armor MrAnderson &amp;gt; MrAndersonPubKey.asc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once you have someone's public key file, you'll need to import it into your keyring before being able to use it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;gpg --import MorpheusPubKey.asc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#asciiarmor-format"&gt;
  &lt;/a&gt;
  ASCII-armor Format
&lt;/h3&gt;

&lt;p&gt;You can share your keys in binary format, or, often more conveniently, in a text format called ASCII-armor. You can print your public key to the console using the name or the email associated with the key as the last argument as in &lt;code&gt;gpg --export --armor MrAnderson&lt;/code&gt;, or generate a file with your key in it using the following commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# generate public key file in binary format&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;gpg &lt;span class="nt"&gt;--export&lt;/span&gt; MrAnderson &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; myBinaryPubKey.gpg

&lt;span class="c"&gt;# generate public key file in ASCII-armor format&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;gpg &lt;span class="nt"&gt;--export&lt;/span&gt; &lt;span class="nt"&gt;--armor&lt;/span&gt; MrAnderson &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; MrAndersonPubKey.asc

&lt;span class="c"&gt;# print content of key file in ASCII-armor format to console&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cat &lt;/span&gt;MrAndersonPubKey.asc
&lt;span class="nt"&gt;-----BEGIN&lt;/span&gt; PGP PUBLIC KEY BLOCK-----

mI0EXX0oXQEEAK/NyXBQxd1s9s3SYSVXMXfW0a3XR6JGwzf3ocfCu8OP12hVMvfo
BQfdj2WllNsWWpzNRJdeK2QCtLudykPNKtY7BuAk5bIWbGuVsNkWU/UmJZqijE0Q
aA+g2K1DFST5h4N12vLyLnN0On7RaJsTizR083E2QATsU/3VjP3Y3LUnABEBAAG0
IU1yQW5kZXJzb24gPE1yQW5kZXJzb25AZW1haWwuY29tPojOBBMBCAA4FiEEDpSi
Y4nGYN/owvMXBdCF2Yk0eacFAl19KF0CGwMFCwkIBwIGFQoJCAsCBBYCAwECHgEC
F4AACgkQBdCF2Yk0eadEqgQAm/LeK4BK77OPhy2jiouhmyhM922sATp07uP0s+WY
lJZZOlLSELc7FMn+iSzgsoBic432UFZVfJ5FZukn9oSSrvJagw7nx4Y3rIyUNDc+
0Dcw2lKH8WDqXXoANgWSewPb6P+kBq+ihVanaWgsG9a1nvb4/BoubMMoccAj3EaH
0Yq4jQRdfShdAQQArXj8/Ch3y//xeSPDXXu/HlylYT56s9gTOs8PzW/yeR8XAzGG
+YThFvMsRdfr8VYwr8fsNT+fS12IadaiwOX6ejs63LnE9WnyfnYdVTQO5ZTh61eU
zB1q97/YevWXIwTYAP/0h+tASqirffamdLZHctx54iozfb/M3QuSU2c4i5fAEQEA
AYi2BBgBCAAgFiEEDpSiY4nGYN/owvMXBdCF2Yk0eacFAl19KF0CGwwACgkQBdCF
2Yk0eacnRgP7BKkW5dMJn8aHKxSGmhcpeGnfI1Rp4MorfjcwCz/gqgtoiqOY99SK
maij8J92E5sKpdMpZXhQfjZjVDb91oAW0TdUEXbVVBSjZ4Ku33QwFCm+Qzud/xaT
lQDrnYx05SITsBAAmOrwfBRo464WfU/0rlXziE2E4wDY4U6IYtbrAcQ&lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="o"&gt;=&lt;/span&gt;aNWV
&lt;span class="nt"&gt;-----END&lt;/span&gt; PGP PUBLIC KEY BLOCK-----
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Both the binary format and the ASCII-armor format are representations of the same data, but you'll find that the ASCII-armor is much easier to share (for example you could copy/paste it in an email or a text message).&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#task-1-sign-a-document-without-encrypting-it"&gt;
  &lt;/a&gt;
  Task 1: Sign a document (without encrypting it)
&lt;/h2&gt;

&lt;p&gt;Signing a document (or any piece of data) creates proof that the document was signed by the owner of a specific public key, and that the document was not tampered with after the signature. Note that the signature is completely agnostic to the data it is signing, meaning that we can use GPG to sign sound data, text data, image data, or any other type of data we want.&lt;/p&gt;

&lt;p&gt;The goal here is really to sign an &lt;em&gt;open&lt;/em&gt; document. There is no encryption of the document in this procedure. As such, the document is usable by anyone whether or not they can verify its signature.&lt;/p&gt;

&lt;p&gt;One of the common objectives of signatures is to attest that a specific version of the data is being stored or sent across a network. Once a piece of data has been signed, changing a single bit in the data will render the signature invalid. This is why, for example, the lead maintainer of the bitcoin core software will sign the downloadable releases of the software. Once downloaded, you can test for yourself whether his or her signature is valid on the download you just performed. If the signature is valid, you are in posession of the exact same piece of code that he or she signed. If the signature is invalid, the download was tampered with on its way to you. You can use this as an assurance that the software you download is trustworthy without having to trust the network you download it on. Note that it does not prevent the signator from writing bugs or malware into the software at all‚Äîit only attests to the fact that the version in your possession is the same as the version that was signed, bit for bit.&lt;/p&gt;

&lt;p&gt;Let us suppose you have a file called &lt;code&gt;message.txt&lt;/code&gt; in your current directory with the content &lt;code&gt;hello, world&lt;/code&gt;, and that you wish to sign it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;gpg &lt;span class="nt"&gt;--sign&lt;/span&gt; message.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;outputs a new file in the same directory called &lt;code&gt;message.txt.gpg&lt;/code&gt; that contains the signature &lt;em&gt;and&lt;/em&gt; the original message. The message is not encrypted. Anyone can retrieve the message from the file, whether they verify the signature or not.&lt;/p&gt;

&lt;p&gt;Notice that the signed file is in &lt;code&gt;.gpg&lt;/code&gt; format, a binary format. This can make it inconvenient to look at or share (try &lt;code&gt;cat message.txt.gpg&lt;/code&gt; to see what I mean). Another very common way to save the file is in ASCII-armor format using the &lt;code&gt;--armor&lt;/code&gt; switch like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;gpg &lt;span class="nt"&gt;--sign&lt;/span&gt; &lt;span class="nt"&gt;--armor&lt;/span&gt; message.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The output file will be &lt;code&gt;message.txt.asc&lt;/code&gt;, and will look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nt"&gt;----------BEGIN&lt;/span&gt; PGP MESSAGE-----

owGbwMvMwME4vbHMPzN7+SPGNbJJ3LmpxcWJ6al6JRUlsVVLizNSc3LydRTK84ty
UjqOsDAwcjDoiSmyuPmV/RI73XDE80h8BUw7KxNIg4BMSX5JYo5Dem5iZo5ecn4u
AxenAExJ2E7mf/orZmwoeTJ1vspC35XrYvfoisoilj0k3uqnmdkfHX2t0eW0NeQN
TNi39keSVeD2utSvOzfZaoXsLUlekmUt7DGhg2lCRZmm53sHM58PFitPqmXNqOsU
+cjRljPzQHXgcfUbjDOmr3nvkbApSlp3yo53XS/e/0vgEFzFq+Y1oUwx4OqrJ+/9
&lt;span class="nv"&gt;eQA&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="o"&gt;=&lt;/span&gt;c82p
&lt;span class="nt"&gt;----------END&lt;/span&gt; PGP MESSAGE-----

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can then copy and paste this anywhere to share or store the signed message. For example you could post it publicly on a website, send it as a text, or even write it down on a piece of paper.&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#task-2-verify-the-signature-of-a-document"&gt;
  &lt;/a&gt;
  Task 2: Verify the signature of a document
&lt;/h2&gt;

&lt;p&gt;Let us assume someone has sent us a signed document (&lt;code&gt;message_from_Morpheus.txt.asc&lt;/code&gt;) and we wish to verify its signature. We can use the &lt;code&gt;--verify&lt;/code&gt; option to do so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;gpg &lt;span class="nt"&gt;--verify&lt;/span&gt; message_from_Morpheus.txt.asc
gpg: Signature made Sat 14 Sep 18:55:38 2019 EDT
gpg:                using RSA key 5F35BF8A88567B756A5F06898DFB48E3D8717A99
gpg:                issuer &lt;span class="s2"&gt;"morpheus@email.com"&lt;/span&gt;
gpg: Can&lt;span class="s1"&gt;'t check signature: No public key
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that if you simply have the file but not the public key of the signator in your keyring, the &lt;code&gt;--verify&lt;/code&gt; command will state that the signature could not be verified as valid.&lt;/p&gt;

&lt;p&gt;To validate the signature, we'll first have to import the public key of the signator on our GPG keyring. In this case let's assume your friend Morpheus just sent you his public key in ASCII-armor format (he knows how to export his key because he read Task 1 of this post), and the file is saved under &lt;code&gt;MorpheusPubKey.asc&lt;/code&gt;. You can import his key in your keyring using:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;gpg &lt;span class="nt"&gt;--import&lt;/span&gt; morpheusPubKey.asc
gpg: key 06898DFB48E3D899: public key &lt;span class="s2"&gt;"Morpheus &amp;lt;morpheus@email.com&amp;gt;"&lt;/span&gt; imported
gpg: Total number processed: 1
gpg:               imported: 1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now if you list your keys, you'll find you have 2 keys in your keyring:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ gpg --list-keys
pub   rsa1024 2019-09-14 [SC]
      0E94A26389C660DFE8C2F31705D085D9893479A7
uid           [ultimate] MrAnderson &amp;lt;MrAnderson@email.com&amp;gt;
sub   rsa1024 2019-09-14 [E]

pub   rsa1024 2019-09-14 [SC]
      5F357B756A571BF8A88567AF06898DFB48E3D899
uid           [ unknown] Morpheus &amp;lt;morpheus@email.com&amp;gt;
sub   rsa1024 2019-09-14 [E]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When first importing a key, it won't be &lt;em&gt;certified&lt;/em&gt; by default (GPG does not assume you &lt;em&gt;really&lt;/em&gt; know that the key is the key from the person who it says it belongs to). The key could have been tampered with on its way to you, and anyone can create keys with anyone else's name. GPG does not, in any way, verify that you are the person who's name you are using to create a key.&lt;/p&gt;

&lt;p&gt;It is recommended that you check that the key in your keyring belongs to the person you think it does using multiple sources, or that you take the time to call or text the person to verify. Once that is done, you can sign that key &lt;em&gt;yourself&lt;/em&gt; with your own private key, adding a layer of protection to the validity of your friend's public key in your key ring.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;gpg &lt;span class="nt"&gt;--sign-key&lt;/span&gt; Morpheus
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will identify the key as &lt;code&gt;[full]&lt;/code&gt; instead of &lt;code&gt;[unknown]&lt;/code&gt; in our keyring. Notice that we do not need to sign a public key to use it in signature verification; it simply is an added layer of certainty when verifying signatures.&lt;/p&gt;

&lt;p&gt;Once we have the public key of the signator of the piece of data we wish to verify in our keyring, we can verify the signature on any file in one line of code. GPG will print the result of the signature verification on the console. In the case of a valid signature, it would look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;gpg &lt;span class="nt"&gt;--verify&lt;/span&gt; message_from_Morpheus.txt.asc
gpg: Signature made Sat 14 Sep 18:55:38 2019 EDT
gpg:                using RSA key 5F357AF0687B756A571BF8A885698DFB48E3D899
gpg:                issuer &lt;span class="s2"&gt;"morpheus@email.com"&lt;/span&gt;
gpg: Good signature from &lt;span class="s2"&gt;"Morpheus &amp;lt;morpheus@email.com&amp;gt;"&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;full]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To see the content of the message, you'll want to either print it to the console or create a new file with the original message in it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;gpg &lt;span class="nt"&gt;--decrypt&lt;/span&gt; message.txt.asc
what&lt;span class="s1"&gt;'s up dog?
gpg: Signature made Sat 14 Sep 18:55:38 2019 EDT
gpg:                using RSA key 5F357AF0687B756A571BF8A885698DFB48E3D899
gpg:                issuer "morpheus@email.com"
gpg: Good signature from "Morpheus &amp;lt;morpheus@email.com&amp;gt;" [full]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;which will print it to the console, as well as print the result of the signature verifcation. You could have used &lt;code&gt;--decrypt&lt;/code&gt; on a message without the public key in your keyring and GPG would still have printed the message, but it would have told you that it could not verify the signature the same way as it did above with the &lt;code&gt;--verify&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;Anyone in posession of the file can also output the original data to a file using&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;gpg &lt;span class="nt"&gt;--decrypt&lt;/span&gt; message_from_Morpheus.txt.asc &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; Morpheus_message_only.txt
gpg: Signature made Sat 14 Sep 18:55:38 2019 EDT
gpg:                using RSA key 5F357AF0687B756A571BF8A885698DFB48E3D899
gpg:                issuer &lt;span class="s2"&gt;"morpheus@email.com"&lt;/span&gt;
gpg: Good signature from &lt;span class="s2"&gt;"Morpheus &amp;lt;morpheus@email.com&amp;gt;"&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;full]

&lt;span class="c"&gt;# the cat command prints to console the contents of a file&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cat &lt;/span&gt;Morpheus_message_only.txt
what&lt;span class="s1"&gt;'s up dog?
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will print the verification of the signature to the console as the file is created, but the signature verification will not be included in the newly created file; the new file is now an exact replica of the original file.&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#extras"&gt;
  &lt;/a&gt;
  Extras
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#clearsign"&gt;
  &lt;/a&gt;
  Clearsign
&lt;/h3&gt;

&lt;p&gt;Note that the signature file build in ASCII-armor format in &lt;a href="#"&gt;&lt;em&gt;Task 1&lt;/em&gt;&lt;/a&gt; does not contain a human readable version of the original data (in this case the string &lt;code&gt;hello, world&lt;/code&gt;). The file is not encrypted, but you'll need gpg installed and a command to show its content.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# create a signature file named message.txt.asc&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;gpg &lt;span class="nt"&gt;--sign&lt;/span&gt; &lt;span class="nt"&gt;--armor&lt;/span&gt; message.txt
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cat &lt;/span&gt;message.txt.asc

&lt;span class="nt"&gt;----------BEGIN&lt;/span&gt; PGP MESSAGE-----

owGbwMvMwME4vbHMPzN7+SPGNbJJ3LmpxcWJ6al6JRUlsVXfJmak5uTk6yiU5xfl
pHQcYWFg5GDQE1NkcfMr+yV2uuGI55H4Cph2ViaQBgGZkvySxByH9NzEzBy95Pxc
Bi5OAZiSV+3M/11+bLr0h3OFrsyTxPfv3irrfRX0m/U3aOXlwwd/KCju8Od59+5J
uGP84n0KOQbvjGbnvv31R7Nh1tz3b1r3aQks4Fglndb581JBIMN0M/dPxaKejOzH
61tOVRS3Kepk1L77tnv/XkeftjcHA1mrm0WCrS9sOlX2YEOg2Kt3HuY5nop7g9Xn
nwMA
&lt;span class="o"&gt;=&lt;/span&gt;/jWM
&lt;span class="nt"&gt;----------END&lt;/span&gt; PGP MESSAGE-----
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using the &lt;code&gt;--clearsign&lt;/code&gt; command on ASCII-armor format to sign a document (rather than the &lt;code&gt;--sign&lt;/code&gt; command) will include the original data in the signed file. The resulting file keeps the signed message at the top, making it easy to parse, whether we verify the signature or not.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;gpg &lt;span class="nt"&gt;--clearsign&lt;/span&gt; &lt;span class="nt"&gt;--armor&lt;/span&gt; message.txt
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cat &lt;/span&gt;message.txt.asc

&lt;span class="nt"&gt;----------BEGIN&lt;/span&gt; PGP SIGNED MESSAGE-----
Hash: SHA256

hello, world
&lt;span class="nt"&gt;----------BEGIN&lt;/span&gt; PGP SIGNATURE-----

iMQEAQEIAC4WIQRGTnb6FsuAxEnEX3iXgXZPaWun4gUCXXr2FxAcdG90YWxAZ21h
aWwuY29tAAoJEJeBdk9pa6fi038D/1dXYUkFlKak1jRH369BjU5UaSmjiJvoWM8j
tQW78RVuYlOosL7bRSzgXJK1YH4hiz4rj3UWlbwRmF6s+UEu9wfDisHssHEiijru
LqCZpsWEDkzihjVwKSRz1UNIm1Egg4jyEV2ZY32dJnveN6wCiB1ABMe1zvB3G2cI
72Y3KOLr
&lt;span class="o"&gt;=&lt;/span&gt;nKbM
&lt;span class="nt"&gt;----------END&lt;/span&gt; PGP SIGNATURE-----
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#detached-signatures"&gt;
  &lt;/a&gt;
  Detached Signatures
&lt;/h3&gt;

&lt;p&gt;A popular way to sign software is through the use of &lt;em&gt;detached signatures&lt;/em&gt;. A detached signature is a small file that sits &lt;em&gt;external&lt;/em&gt; to the actual softare or piece of data being signed.&lt;/p&gt;

&lt;p&gt;Detached signatures have one great advantage over normal signatures: because they are separate, they are not mandatory in order to use the data. The signatures for popular software (say, Python, for example), are downloaded separately, and therefore do not interfere with one's ability to simply download and start using the software. On the other hand, verifying the validity of such signatures is just as easy as it is with regular signatures.&lt;/p&gt;

&lt;p&gt;We create a detached signature using the following command, which will produce a small file called &lt;code&gt;mySoftware.dmg.sig&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;gpg &lt;span class="nt"&gt;--detach-sign&lt;/span&gt; mySoftware.dmg
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls
&lt;/span&gt;mySoftware.dmg
mySoftware.dmg.sig
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let us assume we have downloaded a piece of software and its associated signature (&lt;code&gt;python.dmg&lt;/code&gt; and &lt;code&gt;python.dmg.sig&lt;/code&gt;). Provided the files are in the same directory and have the same name, we can verify the signature like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls
&lt;/span&gt;python.dmg
python.dmg.sig

&lt;span class="nv"&gt;$ &lt;/span&gt;gpg &lt;span class="nt"&gt;--verify&lt;/span&gt; software.dmg.sig
gpg: assuming signed data &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="s1"&gt;'python.dmg'&lt;/span&gt;
gpg: Signature made Sat 14 Sep 19:28:09 2019 EDT
gpg:                using RSA key 0E49C5D08660D9A2638FE8C2F31705D9893479A7
gpg:                issuer &lt;span class="s2"&gt;"mranderson@email.com"&lt;/span&gt;
gpg: Good signature from &lt;span class="s2"&gt;"MrAnderson &amp;lt;MrAnderson@email.com&amp;gt;"&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;ultimate]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it! Check out &lt;a href=""&gt;part 2&lt;/a&gt; for how to encrypt and decrypt data using GPG.&lt;/p&gt;

</description>
      <category>bash</category>
      <category>linux</category>
      <category>pgp</category>
      <category>commandline</category>
    </item>
    <item>
      <title>How I'm Scaling My Service Business</title>
      <author>Karl L. Hughes</author>
      <pubDate>Thu, 10 Jun 2021 02:21:51 +0000</pubDate>
      <link>https://dev.to/karllhughes/how-i-m-scaling-my-service-business-47pa</link>
      <guid>https://dev.to/karllhughes/how-i-m-scaling-my-service-business-47pa</guid>
      <description>&lt;h1&gt;
  &lt;a href="#"&gt;
  &lt;/a&gt;
  &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2-Kd2RxS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.karllhughes.com/assets/img/scaling-services.png" alt=""&gt;
&lt;/h1&gt;

&lt;p&gt;When I left my job to &lt;a href="https://www.karllhughes.com/posts/cto-writer"&gt;start Draft.dev last year&lt;/a&gt;, I knew there were pros and cons to starting a service business. Unlike the venture funded startups I had been with before, Draft.dev required no outside investment, and it was profitable from the first month. The tradeoff - as any service business owner can tell you - is that &lt;strong&gt;scaling a service business is notoriously hard.&lt;/strong&gt;  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-middle-ground-productized-services"&gt;
  &lt;/a&gt;
  The Middle Ground: ‚ÄúProductized‚Äù Services
&lt;/h2&gt;

&lt;p&gt;An approach that appealed to me from the moment I first heard about it is &lt;a href="https://productizeandscale.com/what-is-productized-service/"&gt;the productized service&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;‚ÄúA productized service is one that runs systematically and continues to produce and grow with or without your direct involvement.‚Äù - Brian Casel&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In an ideal productized service, every process and role is so well-defined that the founder doesn‚Äôt need to be involved in &lt;em&gt;any&lt;/em&gt; of the day-to-day work. This is in stark contrast to models like &lt;a href="https://www.karllhughes.com/posts/startup-consulting"&gt;hourly consulting&lt;/a&gt; where you trade time for money. Productizing a service is hard to pull off, but if you can do it, it makes your company more valuable and less dependent on you.&lt;/p&gt;

&lt;p&gt;After hearing &lt;a href="https://www.tropicalmba.com/shopifyninjas/"&gt;Tristan King‚Äôs story on Tropical MBA&lt;/a&gt; and more recently &lt;a href="https://www.indiehackers.com/post/0-10k-mrr-in-3-5-months-a-step-by-step-guide-on-exactly-what-i-did-1f3ce44511"&gt;Andrew Pierno‚Äôs on Indie Hackers&lt;/a&gt;, I decided I would chime in with my approach. In this blog post, I‚Äôll outline the exact process I have used to productize my content writing service, &lt;a href="https://draft.dev/"&gt;Draft.dev&lt;/a&gt;. I‚Äôll share some specific examples of each step and where the challenges lie in implementing them.&lt;/p&gt;

&lt;p&gt;Even with these steps in mind though, &lt;a href="https://www.karllhughes.com/posts/creating-a-tech-startup-without-a-developer"&gt;starting a new business is really hard&lt;/a&gt;. In the past year, I‚Äôve had some of the highest highs and lowest lows in my professional career, but I can‚Äôt imagine trading it for another day job anytime soon.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-scale-a-service-business"&gt;
  &lt;/a&gt;
  How to Scale a Service Business
&lt;/h2&gt;

&lt;p&gt;When I started Draft.dev last year, it was essentially just me working as a freelance technical writer. Within 9 months, we have a team of nearly 50 writers, a full-time editor, a great marketing associate, and a handful of other freelancers helping with specialized tasks.&lt;/p&gt;

&lt;p&gt;My wife jokes that I like delegating too much, but the truth is &lt;strong&gt;that‚Äôs what separates entrepreneurs from freelancers&lt;/strong&gt;. Delegating isn‚Äôt magic though - it‚Äôs a lot of work. Here‚Äôs how I have approached it in my service business:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-niche-down"&gt;
  &lt;/a&gt;
  1. Niche Down
&lt;/h3&gt;

&lt;p&gt;When I first started the business, I took just about any client that wanted help with their engineering blog or technical copywriting. I knew I wanted to do something at the intersection of software engineering and writing, but I wasn‚Äôt yet sure where the profitable, scalable niche was in this area.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tZ6Qu9Nf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_D7CA14F8F5FDBCC0CAA5D1A347773A815DA981E958DB2DB5DE1BEBB0452535C7_1597613694050_hedgehog.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tZ6Qu9Nf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_D7CA14F8F5FDBCC0CAA5D1A347773A815DA981E958DB2DB5DE1BEBB0452535C7_1597613694050_hedgehog.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After a couple months of trying variations on the theme and having countless conversations with prospects, competitors, and clients, I started to really narrow down what I did and for whom. Rather than writing any technical content on the internet, now Draft.dev &lt;em&gt;exclusively&lt;/em&gt; offered blog posts for marketing teams at Series A and B funded startups that wanted to reach software developers.&lt;/p&gt;

&lt;p&gt;You might think that choosing a niche that narrow would hurt my chances of ever closing a sale, but the opposite happened. As I‚Äôve gotten more narrow, clients and friends refer me &lt;em&gt;more and better new clients&lt;/em&gt;. These new clients come in with some understanding of what we do, so they‚Äôre easier to work with and more similar to others I already work with.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The more similar each of your clients is, the more scalable your productized service becomes.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The startup company I worked for was essentially a productized service using a similar model to Draft.dev, but in a totally different market. We always struggled to grow because we were afraid to define our market too narrowly, and looking back, I think that was our biggest mistake.&lt;/p&gt;

&lt;p&gt;Admittedly, not just &lt;em&gt;any&lt;/em&gt; niche will work, but the easiest way to grow a scalable service business is to &lt;strong&gt;do one single thing for one type of customer.&lt;/strong&gt; The more narrowly defined, the better.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-separate-and-track-each-task"&gt;
  &lt;/a&gt;
  2. Separate and Track Each Task
&lt;/h3&gt;

&lt;p&gt;Once I niched down narrowly enough that finding new clients wasn‚Äôt much of an issue, I started to define each step in the sales and production process. Initially, I came up with 5 categories:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Sales - calls, emails, follow-ups, etc.&lt;/li&gt;
&lt;li&gt;  Account management - planning content, delivering work, answering questions, renewing clients&lt;/li&gt;
&lt;li&gt;  Writing - outlining, researching, and writing each blog post&lt;/li&gt;
&lt;li&gt;  Editing - copy editing, formatting, and handling revisions&lt;/li&gt;
&lt;li&gt;  Administrative - setting up accounts, paying bills, tax stuff, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then, I started tracking my time spent on each of these categories. Yes, even when the business was just me, I was tracking how much time I spent writing vs. editing vs. renewing clients.&lt;/p&gt;

&lt;p&gt;I also tracked (more qualitatively) my mood while doing each of these tasks. For example, I quickly realized that sales calls were fun, but I couldn‚Äôt do them all day - I needed &lt;a href="https://www.karllhughes.com/posts/maximizing-for-energy"&gt;a little time for focus work too&lt;/a&gt;. I also realized that I liked the writing process, but it took &lt;em&gt;by far&lt;/em&gt; the most time of anything.&lt;/p&gt;

&lt;p&gt;One of the biggest factors in building a successful business is being able to stick with it long enough to figure it out. This means I try to minimize the time I spend doing energy-sapping, annoying tasks and maximize my time spent doing the things I find interesting or fun. This has always led me to clear decisions about which task I need to focus on delegating next.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-break-down-one-task"&gt;
  &lt;/a&gt;
  3. Break Down One Task
&lt;/h3&gt;

&lt;p&gt;At this point, I decided not to document &lt;em&gt;all&lt;/em&gt; of these tasks in detail. Processes will change as you hire other people, so it‚Äôs usually best to produce &lt;a href="https://www.knowledgeowl.com/home/just-in-time-documentation"&gt;just in time documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Instead, I decided to pick the task that took the most time and figure out how I did it. That first task was writing, so I &lt;a href="https://draft.dev/learn/posts/styleguide"&gt;wrote a style guide&lt;/a&gt; and started creating briefs for each article I was planning to write.&lt;/p&gt;

&lt;p&gt;A lot of founders struggle with breaking down complicated tasks, and this ends up being a huge detriment to their company‚Äôs growth. I don‚Äôt know if I have any novel tips here other than the old saying, ‚ÄúYou eat an elephant one bite at a time.‚Äù In other words, just get started by trying something and seeing what works.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wu_-yxlJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/IPfDJoo.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wu_-yxlJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/IPfDJoo.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-hire-a-trailblazer"&gt;
  &lt;/a&gt;
  4. Hire a ‚ÄúTrailblazer‚Äù
&lt;/h3&gt;

&lt;p&gt;Outsourcing a task to another person - especially one critical to the business - is scary at first, so I usually start with a ‚Äútrailblazer.‚Äù Trailblazers are smart, proven people who I knew based on prior work or a strong personal recommendation that they can handle the job - even if I did a poor job defining it.&lt;/p&gt;

&lt;p&gt;My first trailblazer was my friend &lt;a href="https://www.linkedin.com/in/josh-alletto"&gt;Josh Alletto&lt;/a&gt;. He had a background in writing and I had worked with him on side projects, so I knew he was a solid engineer. He was essentially a zero-risk hire who could help me refine my instructions and expectations for future writers I hired.&lt;/p&gt;

&lt;p&gt;As I expected, Josh did a great job on his first article and in August, 2020, I had gone from freelance technical writer to agency owner. I had my first writer.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-make-it-foolproof"&gt;
  &lt;/a&gt;
  5. Make it Foolproof
&lt;/h3&gt;

&lt;p&gt;I never expected to build Draft.dev off trailblazers alone. First, there aren‚Äôt enough of them out there and which I have access to. Second, trailblazers get expensive, and for good reason. They tend to be in high demand, so while starting with a trailblazer will help you figure out how to communicate your expectations effectively, you should build a process and instruction set that is nearly foolproof.&lt;/p&gt;

&lt;p&gt;The next couple of articles I outsourced to other writers were not so great. One author completely missed the point of the article and even after I gave him instructions to revise it, it was still no closer to complete. I had to rewrite the whole thing overnight. Another one showed promise, but her grammar and formatting were wildly inconsistent, so it took almost as long to clean up as I would have spent writing it.&lt;/p&gt;

&lt;p&gt;With these modest failures in mind, I tore down our writing and recruiting processes. I figured out how much detail I needed to give writers (hint: it‚Äôs a lot) and how to pick applicants which were more likely to produce high-quality work. I took some notes and automated some parts of this process to reduce the chance that I would miss some critical piece of communication.&lt;/p&gt;

&lt;p&gt;As I iterated on this process, demand for our service was steadily growing. In the past, my clients had hired Draft.dev for direct access to me as a writer, but now, new clients came on knowing that I‚Äôd work with other writers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-mind-the-margin"&gt;
  &lt;/a&gt;
  6. Mind the Margin
&lt;/h3&gt;

&lt;p&gt;While bringing on more writers meant I was writing less, it also meant I was paying more to other people while the baseline costs of running the business had not changed. I started tracking my margins and realized that I‚Äôd need to raise prices to continue growing.&lt;/p&gt;

&lt;p&gt;A lot of freelancers are baffled by the fact that agencies can charge double or triple the hourly rate that they can as a soloist, but here‚Äôs the secret:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Companies aren‚Äôt paying just for your time in hours; they‚Äôre paying based on the value you bring in.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A single freelance writer (ie: me in the early days) could write 8-10 articles per month if they did nothing but write full-time. They could also only write about topics they knew well, so freelancers are severely limited in which clients they can take on.&lt;/p&gt;

&lt;p&gt;An agency like Draft.dev though doesn‚Äôt have the same limitation. Once I started bringing on other writers, our output was limited by my pace of editing and onboarding new clients. So, Draft.dev is potentially &lt;em&gt;much more valuable&lt;/em&gt; to our clients than Karl the freelance writer was.&lt;/p&gt;

&lt;p&gt;Counterintuitively then, productized services can often &lt;em&gt;increase&lt;/em&gt; prices as their capacity increases because larger capacity means working with larger, more mature, less price-sensitive clients. I know, this probably feels anathema to every economic intuition you have, but take my word for it. This is why my larger competitors can charge 2-3x what I do while individual freelancers can only charge about half.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-repeat"&gt;
  &lt;/a&gt;
  7. Repeat
&lt;/h3&gt;

&lt;p&gt;As I raised prices, improved quality, and increased our maximum output at Draft.dev, new bottlenecks started to arise. The next one was editing - which didn‚Äôt take that much of my time, but did sap my energy in a big way. I found a fantastic editor and brought her on for as many hours as I could justify. We‚Äôre now starting to look at bringing on a second editor to test our processes and make sure we‚Äôve foolproofed that part of the business.&lt;/p&gt;

&lt;p&gt;Once you get the basic process down, you realize that &lt;strong&gt;scaling a service business is not only do-able, it‚Äôs really fun&lt;/strong&gt;. I love getting to help more clients and offer more writers the opportunity for consistent, well-paid work in their area of expertise. We have a long way to go, but I‚Äôm very excited about what we‚Äôre building at Draft.dev.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#further-reading"&gt;
  &lt;/a&gt;
  Further Reading
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://amzn.to/38fFbKL"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2jHDAOGD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/TUs6CzA.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you like the idea of systematizing your business, read &lt;a href="https://amzn.to/38fFbKL"&gt;The E-Myth Revisited&lt;/a&gt;. This is the book I recommend the most to entrepreneurs who are struggling to get out of the day-to-day execution work in their business, and it‚Äôs the primary inspiration for my process above.&lt;/p&gt;

&lt;p&gt;Finally, I‚Äôve created &lt;a href="https://www.karllhughes.com/posts/startup-books"&gt;this list of must-read books for startup founders&lt;/a&gt;. These include some of the most impactful reads for me as I started my business, so I hope they help you turn your idea into reality too.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Mongoose Query Best Practice.</title>
      <author>Ekekenta Zion</author>
      <pubDate>Thu, 10 Jun 2021 00:36:47 +0000</pubDate>
      <link>https://dev.to/icode247/mongoose-query-best-practice-3n7k</link>
      <guid>https://dev.to/icode247/mongoose-query-best-practice-3n7k</guid>
      <description>&lt;p&gt;MongoDB is undoubtedly one of the most popular NoSQL database choices today. And it has a great community and ecosystem.&lt;br&gt;
In this article, we'll review some of the best practices to follow when you're setting up MongoDB and Mongoose with Node.js.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites-for-this-article"&gt;
  &lt;/a&gt;
  Pre-requisites for this article
&lt;/h2&gt;

&lt;p&gt;To get the best out of  this article, I assume you have some experience with JavaScript (and Node.js) already.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-do-you-need-mongoose"&gt;
  &lt;/a&gt;
  Why do you need Mongoose?
&lt;/h2&gt;

&lt;p&gt;To understand why we need Mongoose, let's understand how MongoDB (and a database) works on the architecture level.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You have a database server (MongoDB community server, for example)&lt;/li&gt;
&lt;li&gt;You have a Node.js script running (as a process)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;MongoDB server listens on a TCP socket (usually), and your Node.js process can connect to it using a TCP connection.&lt;br&gt;
But on the top of TCP, MongoDB also has its own protocol for understanding what exactly the client (our Node.js process) wants the database to do.&lt;br&gt;
For this communication, instead of learning the messages we have to send on the TCP layer, we abstract that away with the help of a "driver" software, called MongoDB driver in this case. MongoDB driver is available as an npm package here.&lt;br&gt;
Now remember, the MongoDB driver is responsible for connecting and abstracting the low level communication request/responses from you ‚Äì but this only gets you so far as a developer.&lt;br&gt;
Because MongoDB is a schemaless database, it gives you way more power than you need as a beginner. More power means more surface area to get things wrong. You need to reduce your surface area of bugs and screw-ups you can make in your code. You need something more.&lt;br&gt;
Meet Mongoose. Mongoose is an abstraction over the native MongoDB driver.&lt;/p&gt;

&lt;p&gt;The general rule of thumb with abstractions (the way I understand) is that with every abstraction you lose some low-level operation power. But that doesn't necessarily mean it is bad. Sometimes it boosts productivity 1000x+ because you never really need to have full access to the underlying API anyway.&lt;/p&gt;

&lt;p&gt;Similarly, with Mongoose, you can limit your surface area of lower level API access, but unlock a lot of potential gains and good DX.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#some-best-practices-i-recommend-when-using-mongoose-odm-with-mongodb"&gt;
  &lt;/a&gt;
  SOME BEST PRACTICES I RECOMMEND WHEN USING MONGOOSE ODM WITH MONGODB
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#how-to-connect-mongodb-using-mongoose"&gt;
  &lt;/a&gt;
  How to connect MongoDB using Mongoose
&lt;/h2&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mongoose.connect(DB_CONNECTION_STRING, {
        useNewUrlParser: true,
        useUnifiedTopology: true,
        useCreateIndex: true,
        useFindAndModify: false
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;The first thing you must do when using Mongoose and Mongodb is to create a database connection. Doing this the right is one of the basic things one must do.&lt;br&gt;
The above connection format makes sure that you're using the new URL Parser from Mongoose, and that you are not using any deprecated practices. You can read in depth about all these deprecation messages here if you like.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-use-mongoose-models"&gt;
  &lt;/a&gt;
  How to use Mongoose Models
&lt;/h2&gt;

&lt;p&gt;Models are the superpower of Mongoose. They help you enforce "schema" rules and provide a seamless integration of your Node code into database calls.&lt;br&gt;
The very first step is to define a good model:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const mongoose = require("mongoose");

const userSchema = new mongoose.Schema(
        {
                username : { type : String, required : true}
                dob : { type: Date, required: true },
                location : { type: String, required: true },
                hashedPassword : { type: String, required: true }
        },
        { collection: 'users' }
)
const User = mongoose.model('Users', userSchema)
module.exports = User 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
  &lt;a href="#there-are-few-interesting-things-you-should-note-here"&gt;
  &lt;/a&gt;
  There are few interesting things you should note here:
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Try to keep &lt;code&gt;required: true&lt;/code&gt; on all fields which are required. This can be a huge pain saver for you if you don't use a static type checking system like TypeScript to assist you with correct property names while creating an object. Plus the free validation is super cool, too.&lt;/li&gt;
&lt;li&gt;Define a collection name explicitly. Although Mongoose can automatically give a collection name based on the name of model (&lt;code&gt;Completed&lt;/code&gt; here, for example), this is way too much abstraction in my opinion. You should at least know about your database names and collections in your codebase.&lt;/li&gt;
&lt;li&gt;Define indexes and unique fields. &lt;code&gt;unique&lt;/code&gt; property can also be added within a schema. Indexes are a broad topic, so I will not go into depth here. But on a large scale they can really help you to speed up your queries a lot.&lt;/li&gt;
&lt;li&gt;Always make sure that user passwords are not stored as raw strings in the database, the used hashed to reduce its vulnarability.
How to perform Mongoose operations&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let's now go ahead and quickly discuss operations with Mongoose, and how you should perform them.&lt;br&gt;
Let perform some operations in mongoose. We will be using an POST API have created the here.&lt;br&gt;
When a get request is send to an API lets say to get the list of registered users. Some manay developer would do something like or similar to this.&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// lets use our User model
const models = require("./models/usersModel");
app.get('/api/Users', (req,res)=&amp;gt;{
    models.User.find({}, (err, users)=&amp;gt;{
     if(err) throw err;
    })
     res.json(users)  
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;The above code runs successfully, but thus vulnerable. Sensitive data like the user password are been sent to the client which they have no use for, but made available to attackers.&lt;/p&gt;

&lt;p&gt;To perform the same operation in a safer way you first of all know the data would be used by the client side and send them.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// lets say we want to display the username, location and date of birth
const models = require("./models/usersModel");
app.get('/api/Users', async (req,res)=&amp;gt;{
    try{
      const users = await models.User.find({}, ['username', 'location', 'dob'])
        .lean()
        .exec();
        res.json(users)
    catch(err){}
)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
  &lt;a href="#in-the-above-query-operation-there-couple-of-things-you-should-know-with-mongoose"&gt;
  &lt;/a&gt;
  In the above query operation there couple of things you should know with Mongoose.
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Can you see the &lt;code&gt;lean()&lt;/code&gt; function call there? It is super useful for performance. By default, Mongoose processes the returned document(s) from the database and adds its magical methods on it (for example &lt;code&gt;.save&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;When you use &lt;code&gt;.lean()&lt;/code&gt;, Mongoose returns plain JSON objects instead of memory and resource heavy documents. Makes queries faster and less expensive on your CPU, too.&lt;/li&gt;
&lt;li&gt;However, you can omit &lt;code&gt;.lean()&lt;/code&gt; if you are actually thinking of updating data (we'll see that next)&lt;/li&gt;
&lt;li&gt;Mongoose will not execute a query until then or exec has been called upon it. This is very useful when building complex queries.&lt;/li&gt;
&lt;li&gt;Use async-await instead of callbacks (nice on the eyes, no ground breaking performance benefit as such)&lt;/li&gt;
&lt;li&gt;Use try-catch blocks around queries because your query can fail for a number of reasons (duplicate record, incorrect value, and so on)&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#the-update-operation"&gt;
  &lt;/a&gt;
  The Update Operation
&lt;/h2&gt;

&lt;p&gt;This time around we are not calling the &lt;code&gt;.lean()&lt;/code&gt; function, we can simply go ahead and modify the object property, and save it using &lt;code&gt;object.save()&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const doc = await User.findOne(info)
doc.loacation= 'some where differnet'
await doc.save()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Remember that here, there are two database calls made. The first one is on &lt;code&gt;findOne&lt;/code&gt; and the second one is on &lt;code&gt;doc.save&lt;/code&gt;.&lt;br&gt;
It is advisable, you should always reduce the number of requests going to the database (because if you're comparing memory, network, and disk, network is almost always the slowest).&lt;br&gt;
In the other case, you can use a query like this:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const res = await User.updateOne({username:"user's username":}, {location:"some where different "}).lean()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;and it will only make a single call to the database.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-delete-operation"&gt;
  &lt;/a&gt;
  The Delete Operation
&lt;/h2&gt;

&lt;p&gt;Delete is also straightforward with Mongoose. Let's see how you can delete a single document:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const res = await User.deleteOne({username:"user's username"})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Just like the &lt;code&gt;updateOne&lt;/code&gt;, &lt;code&gt;deleteOne&lt;/code&gt; also accepts the first argument as the matching condition for the document.&lt;br&gt;
There is also another method called &lt;code&gt;deleteMany&lt;/code&gt; which should be used only when you know you want to delete multiple documents.&lt;br&gt;
In any other case, always use &lt;code&gt;deleteOne&lt;/code&gt; to avoid accidental multiple deletes, especially when you're trying to execute queries yourself.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;This article was to introduce you to some of best practices you need to use when performing CRUD operations using Mongodb and Mongoose.&lt;br&gt;
To know more, I recommend you to also read the Mongodb documentation and Mongoose documentation increase mastery.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>opensource</category>
      <category>mongodb</category>
    </item>
  </channel>
</rss>
