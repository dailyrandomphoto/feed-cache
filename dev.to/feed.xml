<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to create Records in AWS Route53</title>
      <author>Vijay Patel</author>
      <pubDate>Sun, 26 Dec 2021 18:23:13 +0000</pubDate>
      <link>https://dev.to/easyawslearn/how-to-create-records-in-aws-route53-1agh</link>
      <guid>https://dev.to/easyawslearn/how-to-create-records-in-aws-route53-1agh</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-route53"&gt;
  &lt;/a&gt;
  what is Route53?
&lt;/h2&gt;

&lt;p&gt;Amazon Route 53 is a highly available and scalable Domain Name System (DNS) web service. You can use Route 53 to perform three main functions in any combination: domain registration, DNS routing, and health checking.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#amazon-route-53-pricing-and-billing"&gt;
  &lt;/a&gt;
  Amazon Route 53 pricing and billing
&lt;/h2&gt;

&lt;p&gt;As with other AWS products, there are no contracts or minimum commitments for using Amazon Route 53. You pay only for the hosted zones that you configure and the number of DNS queries that Route 53 answers. For more information, see Amazon Route 53 Pricing  &lt;/p&gt;

&lt;p&gt;For information about billing for AWS services, including how to view your bill and manage your account and payments, see the AWS Billing and Cost Management User Guide.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Here is the full video, based on AWS Route53 Domain configuration, Creating the first comment and Query those Records in AWS CloudShell👇👇&lt;/code&gt;&lt;br&gt;
&lt;a href="https://youtu.be/Ftoiq8HvrNE"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--16BxaWFR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w89ka4tvykmjcp1dhq85.png" alt="Image description" width="600" height="320"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#to-create-a-record-using-the-route-53-console"&gt;
  &lt;/a&gt;
  To create a record using the Route 53 console
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#1-sign-in-to-the-aws-management-console-and-open-the-route-53-console-at-httpsconsoleawsamazoncomroute53"&gt;
  &lt;/a&gt;
  1. Sign in to the AWS Management Console and open the Route 53 console at &lt;a href="https://console.aws.amazon.com/route53/"&gt;https://console.aws.amazon.com/route53/&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QhN_PXFA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s9gnb5wmd2iroc450glv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QhN_PXFA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s9gnb5wmd2iroc450glv.png" alt="Image description" width="307" height="189"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#2-search-for-route53-service"&gt;
  &lt;/a&gt;
  2. Search for Route53 service
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DmNpADjf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uxti1prd63h9022f34p2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DmNpADjf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uxti1prd63h9022f34p2.png" alt="Image description" width="400" height="245"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#3-choose-hosted-zones"&gt;
  &lt;/a&gt;
  3. choose Hosted zones.
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4icRIVPN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lvnqh4lfho69rtyhllom.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4icRIVPN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lvnqh4lfho69rtyhllom.png" alt="Image description" width="400" height="245"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#4-if-you-already-have-a-hosted-zone-for-your-domain-skip-to-the-next-step-if-you-dont-select-the-create-a-hosted-zone-option-and-you-can-create-it"&gt;
  &lt;/a&gt;
  4. If you already have a hosted zone for your domain, skip to the next step. If you don't, select the "create a hosted zone" option and you can create it.
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HNpPhjaW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4dqnoz2c82yyw5k3yiok.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HNpPhjaW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4dqnoz2c82yyw5k3yiok.png" alt="Image description" width="400" height="245"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#5-now-if-you-are-done-with-the-creating-hosted-zone-on-the-hosted-zones-page-choose-the-name-of-the-hosted-zone-that-you-want-to-create-records-in"&gt;
  &lt;/a&gt;
  5. Now If you are done with the Creating hosted zone, On the Hosted zones page, choose the name of the hosted zone that you want to create records in.
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AmAkB78M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xs669e6uujy4efuvz14v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AmAkB78M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xs669e6uujy4efuvz14v.png" alt="Image description" width="400" height="245"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#6-choose-create-record"&gt;
  &lt;/a&gt;
  6. Choose Create Record.
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9kjgE-9b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wpgtfcuwv8u981exidp1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9kjgE-9b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wpgtfcuwv8u981exidp1.png" alt="Image description" width="400" height="245"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;▬▬▬▬▬▬ WANT TO LEARN MORE? ▬▬▬▬▬▬&lt;br&gt;
Full Terraform tutorial ► &lt;a href="https://bit.ly/2GwK8V2"&gt;https://bit.ly/2GwK8V2&lt;/a&gt;&lt;br&gt;
DevOps Tools, like Ansible ► &lt;a href="https://bit.ly/3iASHuP"&gt;https://bit.ly/3iASHuP&lt;/a&gt;&lt;br&gt;
Docker Tutorial ► &lt;a href="https://bit.ly/3iAT9Jx"&gt;https://bit.ly/3iAT9Jx&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>route53</category>
      <category>domain</category>
      <category>cloudcomputing</category>
    </item>
    <item>
      <title>The Ultimate Guide You Need To Publish Your Python Package In Just 9 Easy Steps</title>
      <author>Audarya</author>
      <pubDate>Sun, 26 Dec 2021 18:18:34 +0000</pubDate>
      <link>https://dev.to/audarya07/the-ultimate-guide-you-need-to-publish-your-python-package-in-just-9-easy-steps-39o5</link>
      <guid>https://dev.to/audarya07/the-ultimate-guide-you-need-to-publish-your-python-package-in-just-9-easy-steps-39o5</guid>
      <description>&lt;h3&gt;
  &lt;a href="#directory-structure"&gt;
  &lt;/a&gt;
  Directory structure
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Create a directory that is named exactly how you want your package to be named.
&lt;/li&gt;
&lt;li&gt;Place all the files, folders and classes that you want to publish into this directory.&lt;/li&gt;
&lt;li&gt;Create files required by PyPI to prepare the project for distribution. &lt;/li&gt;
&lt;li&gt;It should look something like this: &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DXxYqJt3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z75fm28j1oeomkys96dl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DXxYqJt3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z75fm28j1oeomkys96dl.png" alt="directory structure" width="809" height="459"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#clean-your-code"&gt;
  &lt;/a&gt;
  Clean your code
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Remove all "print" statements from the code.
&lt;/li&gt;
&lt;li&gt;Use logs instead of print statements(debug/info/warn etc..)
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#configuring-metadata"&gt;
  &lt;/a&gt;
  Configuring metadata
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;setup.cfg&lt;/code&gt; --&amp;gt; It is the configuration file for &lt;strong&gt;setuptools&lt;/strong&gt;. It tells setuptools about your package(such as the name and version) as well as which code files to include. There are a variety of &lt;a href="https://setuptools.pypa.io/en/latest/userguide/declarative_config.html"&gt;metadata and options supported&lt;/a&gt; here.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[metadata]
description-file = README.md  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;setup.py&lt;/code&gt; --&amp;gt;  It is the build script for which tells setuptools about your package(such as the name and version) as well as which code files to include.
&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;setuptools is a library designed to facilitate packaging Python projects.  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Open &lt;code&gt;setup.py&lt;/code&gt; and enter the following content. Change the name to include your username; this ensures that you have a unique package name and that your package doesn’t conflict with packages uploaded by other people.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;setuptools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;find_packages&lt;/span&gt;

&lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'0.0.1'&lt;/span&gt; &lt;span class="c1"&gt;# Any format you want
&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"README.md"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"r"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;fh&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;long_description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fh&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'your-package-name'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;find_packages&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
  &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;license&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'MIT'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'Short description'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;long_description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;long_description&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;long_description_content_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text/markdown"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'Author Name'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;author_email&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'author@email.com'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'https://gitlab.com/username/repo-name'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;download_url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'https://gitlab.com/username/repo-name/-/archive/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;/repo-name-&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;.tar.gz'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;keywords&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Some'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'keywords'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="n"&gt;install_requires&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
          &lt;span class="s"&gt;'dependency-1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;# All external pip packages you are importing
&lt;/span&gt;          &lt;span class="s"&gt;'dependency-2'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="n"&gt;classifiers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s"&gt;'Development Status :: 3 - Alpha'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'Intended Audience :: Developers'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'Operating System :: OS Independent'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'Topic :: Software Development :: Build Tools'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'License :: OSI Approved :: MIT License'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'Programming Language :: Python :: 3.7'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'Programming Language :: Python :: 3.8'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can find details about each arguments &lt;a href="https://packaging.python.org/tutorials/packaging-projects/#configuring-metadata"&gt;here&lt;/a&gt;.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-readmemd-optional-but-recommended"&gt;
  &lt;/a&gt;
  Creating README.md (optional but recommended)
&lt;/h3&gt;

&lt;p&gt;Open README.md and enter details about your package. You can customize this as you’d like. This content can be displayed on the homepage of your package on PyPI.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-a-license"&gt;
  &lt;/a&gt;
  Creating a LICENSE
&lt;/h3&gt;

&lt;p&gt;It’s important for every package uploaded to the Python Package Index to include a license. This tells users who install your package the terms under which they can use your package. For help picking a license, see &lt;a href="https://choosealicense.com/"&gt;https://choosealicense.com/&lt;/a&gt;. Once you have chosen a license, open LICENSE and enter the license text. For example, if you had chosen the MIT license:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Copyright (c) 2021 YOUR NAME
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#create-a-pypi-account"&gt;
  &lt;/a&gt;
  Create a PyPI account
&lt;/h3&gt;

&lt;p&gt;Register yourself for a PyPI account &lt;a href="https://pypi.org/account/register/"&gt;here&lt;/a&gt;. Remember your username (not the Name, not the E-Mail Address) and your password, you will need it later for the upload process.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#upload-your-package-to-githubgitlab"&gt;
  &lt;/a&gt;
  Upload your package to github/gitlab
&lt;/h3&gt;

&lt;p&gt;Create a github/gitlab repo including all the above files and folders. Name the repo exactly as the package.&lt;br&gt;&lt;br&gt;
If uploading package to Gitlab, &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;After uploading the required files, go to &lt;code&gt;Repository --&amp;gt; Tags --&amp;gt; New Tag&lt;/code&gt; and create new tag(tag name should be same as the version) for every release of the package to PyPI. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tWxa5bhU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uuekaftfa9a0btd5ff4j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tWxa5bhU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uuekaftfa9a0btd5ff4j.png" alt="Creating Tags" width="880" height="495"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This copied link should be the same as &lt;em&gt;download_url&lt;/em&gt; argument in the &lt;code&gt;setup.py&lt;/code&gt; file.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If uploading package to GitHub, &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;After uploading the required files, follow steps mentioned &lt;a href="https://docs.github.com/en/repositories/releasing-projects-on-github/managing-releases-in-a-repository"&gt;here&lt;/a&gt; to create a release.
&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;br&gt;&lt;br&gt;
Every time you want to update your package later on, upload a new version to gitlab/github, create a new release as discussed, specify a new release tag and copy-paste the link to Source into the setup.py file (do not forget to also increment the version number).&lt;/strong&gt; &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#uploading-the-distribution-archives"&gt;
  &lt;/a&gt;
  Uploading the distribution archives
&lt;/h3&gt;

&lt;p&gt;The first thing to do is register an account on TestPyPI, which is a separate instance of the package index intended for testing and experimentation. To register an account, go to &lt;a href="https://test.pypi.org/account/register/"&gt;here&lt;/a&gt; and complete the steps on that page. You will also need to verify your email address before you’re able to upload any packages.  &lt;/p&gt;

&lt;p&gt;After registration, use &lt;strong&gt;twine&lt;/strong&gt; to upload the distribution packages.  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Navigate to folder where you have al the files and package located.
&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;python setup.py sdist&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Install Twine:  &lt;code&gt;pip install twine&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Run twine: &lt;code&gt;twine upload --repository testpypi dist/*&lt;/code&gt;
Upload successful
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#installing-newly-uploaded-package"&gt;
  &lt;/a&gt;
  Installing newly uploaded package
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pip install -i https://test.pypi.org/simple/ your-package-name&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When you are ready to publish your package to &lt;strong&gt;PyPI&lt;/strong&gt; after proper testing, run the following command:&lt;br&gt;&lt;br&gt;
&lt;code&gt;twine upload dist/*&lt;/code&gt;&lt;br&gt;&lt;br&gt;
to publish it on PyPI.    &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;:&lt;br&gt;&lt;br&gt;
Now for every future updates to your package:  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;change the version number in setup.py file&lt;/li&gt;
&lt;li&gt;create tag/release in gitlab/github&lt;/li&gt;
&lt;li&gt;update the &lt;em&gt;download_url&lt;/em&gt; in setup.py&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;python setup.py sdist&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;twine upload dist/*&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;pip install your-package --upgrade&lt;/code&gt; --&amp;gt; to see whether your changes worked.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;AND IT'S DONE ...YAAAY !!&lt;br&gt;&lt;br&gt;
Visit PyPI and search for your package name. Now you can use your package just like any other python packages by installing it with pip i.e. &lt;code&gt;pip install your-package-name&lt;/code&gt;.  &lt;/p&gt;

&lt;p&gt;I hope this blog helped you understand how to publish your own Python Package easily.&lt;/p&gt;

&lt;p&gt;Happy coding !!&lt;/p&gt;

</description>
      <category>python</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>2022 Front-End Web Developer Roadmap With Resources</title>
      <author>Chaoo Charles</author>
      <pubDate>Sun, 26 Dec 2021 18:00:34 +0000</pubDate>
      <link>https://dev.to/chaoocharles/2022-front-end-web-developer-roadmap-with-resources-51lh</link>
      <guid>https://dev.to/chaoocharles/2022-front-end-web-developer-roadmap-with-resources-51lh</guid>
      <description>&lt;p&gt;This is my ultimate guide to becoming a front-end web developer in 2022 with resources.&lt;/p&gt;

&lt;p&gt;There are a lot of free courses you can learn from. Below I have listed some of the best from YouTube. If you don't like learning with videos, I recommend you start your journey on &lt;a href="https://www.freecodecamp.org/"&gt;freecodecamp&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#i-have-also-compiled-this-guide-in-a-video"&gt;
  &lt;/a&gt;
  I have also compiled this guide in a video 👇
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Remember to subscribe to my channel for more. Join 4.5k+ others 😊&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/NMNvIWo60wI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#100daysofcode"&gt;
  &lt;/a&gt;
  #100daysOfCode
&lt;/h2&gt;

&lt;p&gt;I highly recommend that you join the #100DaysOfCode challenge on twitter. This challenge will help you to learn in public by coding for not less than an hour each day and sharing your progress on twitter. You will become more consistent this way and you will also surround yourself with a good community of developers. Learn more about the challenge on the official website: &lt;a href="https://www.100daysofcode.com/"&gt;https://www.100daysofcode.com/&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Command-line/Terminal:&lt;/strong&gt;
Knowing your terminal well will give you full control of your computer and workflow. As a front-end dev you will need the terminal to work with git, install dependencies and run the application. You will also feel like you have super-powers while working with a terminal ⚡

&lt;ul&gt;
&lt;li&gt;FreeCodeCamp - Command-line Crash Course: &lt;a href="https://youtu.be/yz7nYlnXLfE"&gt;https://youtu.be/yz7nYlnXLfE&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Code Editor (Visual Studio Code):&lt;/strong&gt;
A code editor is simply a tool that you will be using to write your code. I personally work with visual studio code and I love it 😍

&lt;ul&gt;
&lt;li&gt;Academind - Visual Studio Code Tutorial for Beginners - Introduction: &lt;a href="https://youtu.be/VqCgcpAypFQ"&gt;https://youtu.be/VqCgcpAypFQ&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;HTML/CSS:&lt;/strong&gt;
HTML and CSS is the backbone of web development. They are also easy to learn but require a lot of practice to master. You will need HTML to add webpage content and CSS to style the content. CSS is like an art, become creative and have fun with it 🖌

&lt;ul&gt;
&lt;li&gt;DesignCourse - HTML and CSS Tutorial for 2021 - COMPLETE Crash Course!: &lt;a href="https://youtu.be/D-h8L5hgW-w"&gt;https://youtu.be/D-h8L5hgW-w&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;CSS(Framework) - Bootstrap/TailwindCSS:&lt;/strong&gt;
A CSS framework simply makes it easy and fast to build UIs. Have a solid understanding of CSS before you start using a Framework. In 2022 I recommend TailwindCSS.

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Bootstrap&lt;/em&gt; - DesignCourse - Getting Started with Bootstrap 5 for Beginners - Crash Course: &lt;a href="https://youtu.be/1nxSE0R27Gg"&gt;https://youtu.be/1nxSE0R27Gg&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;TailwindCSS&lt;/em&gt; - DesignCourse - Build &amp;amp; Deploy a Personal Portfolio with TailwindCSS - 2022 Edition: &lt;a href="https://youtu.be/Vp6GC3jKG20"&gt;https://youtu.be/Vp6GC3jKG20&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Git and GitHub:&lt;/strong&gt;
At this point you can dive into git and GitHub. They will help you to track changes, share projects and even collaborate on open source projects.

&lt;ul&gt;
&lt;li&gt;Traversy Media - Git &amp;amp; GitHub Crash Course For Beginners: &lt;a href="https://youtu.be/SWYqp7iY_Tc"&gt;https://youtu.be/SWYqp7iY_Tc&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;JavaScript&lt;/strong&gt;
It's time for the big dog 🐶 JavaScript is the most important programming language of the web. It's also so huge, I recommend learning the fundamentals first and then going into advanced topics after learning at least one JS framework. Be patient with JavaScript and practice with projects. At the end of the day it will start paying your bills 💰

&lt;ul&gt;
&lt;li&gt;FreecodeCamp - Learn JavaScript - Full Course for Beginners: &lt;a href="https://youtu.be/PkZNo7MFNFg"&gt;https://youtu.be/PkZNo7MFNFg&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;JavaScript Framework (React, Vue, Angular, Svelt):&lt;/strong&gt;
There are many popular JS Frameworks so far. It will be confusing to choose one. Decide depending on company you want to work at or job description. If you don't know which is which, go with React. It's popular in terms of jobs. Vue is loved by most developers though.

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;React&lt;/em&gt; - Academind - React Crash Course for Beginners 2021: &lt;a href="https://youtu.be/Dorf8i6lCuk"&gt;https://youtu.be/Dorf8i6lCuk&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Vue&lt;/em&gt; - Traversy - Vue JS Crash Course 2021: &lt;a href="https://youtu.be/qZXt1Aom3Cs"&gt;https://youtu.be/qZXt1Aom3Cs&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Angular&lt;/em&gt; - Traversy - Angular Crash Course 2021: &lt;a href="https://youtu.be/3dHNOWTI7H8"&gt;https://youtu.be/3dHNOWTI7H8&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Svelt&lt;/em&gt; - Traversy - Svelte Crash Course 2021: &lt;a href="https://youtu.be/3TVy6GdtNuQ"&gt;https://youtu.be/3TVy6GdtNuQ&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Deployment (Netlify, Vercel, GitHub):&lt;/strong&gt;
You can take your application online for free using netlify or vercel.

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Netlify&lt;/em&gt; - Programming with Erik - Deploy Your Website In Minutes With Netlify
: &lt;a href="https://youtu.be/gaC-l9MAE9Q"&gt;https://youtu.be/gaC-l9MAE9Q&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Vercel&lt;/em&gt; Official Website: &lt;a href="https://vercel.com/"&gt;https://vercel.com/&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Frontend Mentor:&lt;/strong&gt;
Participate in Frontend Mentor Challenges as you apply for jobs. The challenges will help you to practice and learn further.

&lt;ul&gt;
&lt;li&gt;Official Website: &lt;a href="https://www.frontendmentor.io/"&gt;https://www.frontendmentor.io/&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;Note that on the above list I didn't mention some popular technologies such as &lt;code&gt;SCSS&lt;/code&gt;, &lt;code&gt;Next.js&lt;/code&gt;, &lt;code&gt;Typescript&lt;/code&gt; and others. I recommend you learn the above first and then you can explore the rest after having a solid understanding of the above&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Check out my amazing portfolio: &lt;a href="https://chaoocharles.dev/"&gt;https://chaoocharles.dev/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Was this post helpful? Let me know on the discussion section below. What are you planning to learn in 2022?&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>css</category>
    </item>
    <item>
      <title>System Design Interviews: A Step-By-Step Guide</title>
      <author>Arslan Ahmad</author>
      <pubDate>Sun, 26 Dec 2021 17:41:20 +0000</pubDate>
      <link>https://dev.to/arslan_ah/system-design-interviews-a-step-by-step-guide-39am</link>
      <guid>https://dev.to/arslan_ah/system-design-interviews-a-step-by-step-guide-39am</guid>
      <description>&lt;p&gt;How to efficiently manage a 45 minutes system design interview?&lt;/p&gt;

&lt;p&gt;System design interviews (SDIs) have gained a lot of focus in the past few years. Now a standard part of every software engineering interview, these interviews assess a candidate’s ability to handle complex systems. &lt;strong&gt;Performance in these interviews determines the position and salary offered by the interviewing company.&lt;/strong&gt; Engineers usually struggle with SDIs partly due to their lack of experience developing large-scale systems and partly due to the unstructured nature of SDIs. Engineers who have experience building such systems still find these interviews uncomfortable, mainly because the design problems are open-ended and have no standard answer.&lt;/p&gt;

&lt;p&gt;Generally, software engineers have difficulty with system design interviews for three primary reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SDIs are &lt;strong&gt;unstructured&lt;/strong&gt;, where candidates are asked to take on an open-ended design problem that doesn’t have a standard solution.&lt;/li&gt;
&lt;li&gt;Candidates &lt;strong&gt;lack experience&lt;/strong&gt; in developing complex and large-scale systems.&lt;/li&gt;
&lt;li&gt;Candidates did not &lt;strong&gt;spend enough time&lt;/strong&gt; preparing for SDIs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Like coding interviews, candidates who have not put a deliberate effort to prepare for SDIs, mostly perform poorly, especially at top companies like Google, Facebook, Amazon, Microsoft, etc. In these companies, candidates who do not perform above average have a limited chance to get an offer. &lt;strong&gt;On the other hand, a good performance always results in a better offer (a higher position and salary) since it proves the candidate’s ability to handle a complex system.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;During my professional career, I have taken more than 200 system design interviews. My goal in this post is to provide a step-by-step guide on how to approach system design questions during an interview; it will assist with overcoming the problems highlighted above.&lt;/p&gt;

&lt;p&gt;Check &lt;strong&gt;&lt;a href="https://www.designgurus.org/course/grokking-the-system-design-interview"&gt;Grokking the System Design Interview&lt;/a&gt;&lt;/strong&gt; to learn about important distributed system concepts.&lt;/p&gt;

&lt;p&gt;In my experience, candidates who have performed better tend to follow these seven steps:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Requirements clarifications:&lt;/strong&gt; Always ask questions to find the exact scope of the problem you are solving.&lt;br&gt;
&lt;strong&gt;2. Back-of-the-envelope estimation:&lt;/strong&gt; It’s always a good idea to estimate the scale of the system you are going to design. This will also help later, when you will be focusing on scaling, partitioning, load balancing, caching, etc.&lt;br&gt;
&lt;strong&gt;3. System interface definition:&lt;/strong&gt; Define what APIs are expected from the system. This will not only establish the exact contract expected from the system but also ensure that you have not gotten any requirements wrong.&lt;br&gt;
&lt;strong&gt;4. Define data model:&lt;/strong&gt; Defining the system data model early on will clarify how data will flow among different components of the system and later will also guide towards the data partitioning and management.&lt;br&gt;
&lt;strong&gt;5. High-level design:&lt;/strong&gt; Draw a block diagram with 5–6 boxes representing the core components of your system. You should identify enough components that are needed to solve the actual problem from end to end.&lt;br&gt;
&lt;strong&gt;6. Detailed design:&lt;/strong&gt; Dig deeper into 2–3 components; interviewer’s feedback should always guide you towards which parts of the system she wants you to explain further. You should be able to provide different options, their pros and cons, and why are you choosing them?&lt;br&gt;
&lt;strong&gt;7. Identifying and resolving bottlenecks:&lt;/strong&gt; Try to discuss as many bottlenecks (and different approaches to mitigate them) as possible.&lt;/p&gt;

&lt;p&gt;Let’s discuss each step in detail with a real case study:&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step-1-requirements-clarifications"&gt;
  &lt;/a&gt;
  Step 1: Requirements clarifications
&lt;/h2&gt;

&lt;p&gt;It is always a good idea to ask questions about the exact scope of the problem we are solving. Design questions are mostly open-ended, and they don’t have ONE correct answer; that’s why clarifying ambiguities early in the interview becomes critical. Candidates who spend enough time defining the end goals of the system always have a better chance to be successful in the interview. Also, since we only have 35–40 minutes to design a (supposedly) large system, we should clarify what parts of the system we will be focusing on.&lt;/p&gt;

&lt;p&gt;Let’s expand this with an actual example of designing a Twitter-like service. Here are some questions for designing Twitter that should be answered before moving on to the next steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Will users of our service be able to post tweets and follow other people?&lt;/li&gt;
&lt;li&gt;Should we also design to create and display the user’s timeline?&lt;/li&gt;
&lt;li&gt;Will tweets contain photos and videos?&lt;/li&gt;
&lt;li&gt;Are we focusing on the backend only, or are we developing the front-end too?&lt;/li&gt;
&lt;li&gt;Will users be able to search tweets?&lt;/li&gt;
&lt;li&gt;Do we need to display hot trending topics?&lt;/li&gt;
&lt;li&gt;Will there be any push notification for new (or important) tweets?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All such questions will determine how our end design will look like.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--azQ_kyjj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1vla8mnczr2if415r27d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--azQ_kyjj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1vla8mnczr2if415r27d.png" alt="Photo by Malcolm Lightbody on Unsplash" width="700" height="466"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step-2-backoftheenvelope-estimation"&gt;
  &lt;/a&gt;
  Step 2: Back-of-the-envelope estimation
&lt;/h2&gt;

&lt;p&gt;It is always a good idea to estimate the scale of the system we’re going to design. This will also help later when we will be focusing on scaling, partitioning, load balancing, and caching.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What scale is expected from the system (e.g., number of new tweets, number of tweet views, number of timeline generations per sec., etc.)?&lt;/li&gt;
&lt;li&gt;How much storage will we need? We will have different storage requirements if users can have photos and videos in their tweets.&lt;/li&gt;
&lt;li&gt;What network bandwidth usage are we expecting? This will be crucial in deciding how we will manage traffic and balance load between servers.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#step-3-system-interface-definition"&gt;
  &lt;/a&gt;
  Step 3: System interface definition
&lt;/h2&gt;

&lt;p&gt;Define what APIs are expected from the system. This will not only establish the exact contract expected from the system but will also ensure that we haven’t gotten any requirements wrong. Some examples of APIs for our Twitter-like service will be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;postTweet(user_id, tweet_data, tweet_location, timestamp, …)
generateTimeline(user_id, current_time, user_location, …)
markTweetFavorite(user_id, tweet_id, timestamp, …)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-4-defining-data-model"&gt;
  &lt;/a&gt;
  Step 4: Defining data model
&lt;/h2&gt;

&lt;p&gt;Defining the data model in the early part of the interview will clarify how data will flow between different components of the system. Later, it will guide for data partitioning and management. The candidate should be able to identify various entities of the system, how they will interact with each other, and different aspects of data management like storage, transportation, encryption, etc. Here are some entities for our Twitter-like service:&lt;br&gt;
&lt;strong&gt;User:&lt;/strong&gt; UserID, Name, Email, DoB, CreationData, LastLogin, etc.&lt;br&gt;
&lt;strong&gt;Tweet:&lt;/strong&gt; TweetID, Content, TweetLocation, NumberOfLikes, TimeStamp, etc.&lt;br&gt;
&lt;strong&gt;UserFollowo:&lt;/strong&gt; UserdID1, UserID2&lt;br&gt;
&lt;strong&gt;FavoriteTweets:&lt;/strong&gt; UserID, TweetID, TimeStamp&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9MBOIYPO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ecmfllged09ajdjnf9v5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9MBOIYPO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ecmfllged09ajdjnf9v5.png" alt="Image description" width="700" height="211"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Which database system should we use? Will NoSQL like &lt;a href="https://en.wikipedia.org/wiki/Apache_Cassandra"&gt;Cassandra&lt;/a&gt; best fit our needs, or should we use a MySQL-like solution? What kind of block storage should we use to store photos and videos? &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-5-highlevel-design"&gt;
  &lt;/a&gt;
  Step 5: High-level design
&lt;/h2&gt;

&lt;p&gt;Draw a block diagram with 5–6 boxes representing the core components of our system. We should identify enough components that are needed to solve the actual problem from end to end.&lt;/p&gt;

&lt;p&gt;For Twitter, at a high level, we will need multiple application servers to serve all the read/write requests with load balancers in front of them for traffic distributions. If we’re assuming that we will have a lot more read traffic (as compared to write), we can decide to have separate servers for handling these scenarios. On the backend, we need an efficient database that can store all the tweets and can support a huge number of reads. We will also need a distributed file storage system for storing photos and videos.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ty1VhY0G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kn39faxmx8muxfs0nlvg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ty1VhY0G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kn39faxmx8muxfs0nlvg.png" alt="Image description" width="369" height="203"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-6-detailed-design"&gt;
  &lt;/a&gt;
  Step 6: Detailed design
&lt;/h2&gt;

&lt;p&gt;Dig deeper into two or three major components; the interviewer’s feedback should always guide us to what parts of the system need further discussion. We should be able to present different approaches, their pros and cons, and explain why we will prefer one approach over the other. Remember, there is no single answer; the only important thing is to consider tradeoffs between different options while keeping system constraints in mind.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Since we will be storing a massive amount of data, how should we partition our data to distribute it to multiple databases? Should we try to store all the data of a user on the same database? What issue could it cause?&lt;/li&gt;
&lt;li&gt;How will we handle hot users who tweet a lot or follow lots of people?&lt;/li&gt;
&lt;li&gt;Since users’ timelines will contain the most recent (and relevant) tweets, should we try to store our data in such a way that is optimized for scanning the latest tweets?&lt;/li&gt;
&lt;li&gt;How much and at which layer should we introduce cache to speed things up?&lt;/li&gt;
&lt;li&gt;What components need better load balancing?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7iHBY1GP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nikdbd64s8dywl0fkvm6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7iHBY1GP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nikdbd64s8dywl0fkvm6.png" alt="Image description" width="700" height="384"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-7-identifying-and-resolving-bottlenecks"&gt;
  &lt;/a&gt;
  Step 7: Identifying and resolving bottlenecks
&lt;/h2&gt;

&lt;p&gt;Try to discuss as many bottlenecks as possible and different approaches to mitigate them.&lt;br&gt;
Is there any single point of failure in our system? What are we doing to mitigate it?&lt;br&gt;
Do we have enough replicas of the data so that if we lose a few servers, we can still serve our users?&lt;br&gt;
Similarly, do we have enough copies of different services running such that a few failures will not cause a total system shutdown?&lt;br&gt;
How are we monitoring the performance of our service? Do we get alerts whenever critical components fail, or their performance degrades?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;To sum up, preparing well and being organized during the interview is key to success in a system design interview. The steps mentioned above should guide you to stay on track and cover all the different aspects while designing a system.&lt;br&gt;
Please take a look at &lt;strong&gt;&lt;a href="https://www.designgurus.org/course/grokking-the-system-design-interview"&gt;Grokking the System Design Interview&lt;/a&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;a href="https://www.designgurus.org/course/grokking-the-advanced-system-design-interview"&gt;Grokking the Advanced System Design Interview&lt;/a&gt;&lt;/strong&gt; for some good examples of system design interview questions and their answers.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>distributedsystems</category>
      <category>career</category>
      <category>architecture</category>
    </item>
    <item>
      <title>Internet image as desktop background without downloading it in your local machine :) Its Possible</title>
      <author>manish srivastava</author>
      <pubDate>Sun, 26 Dec 2021 17:33:33 +0000</pubDate>
      <link>https://dev.to/manishfoodtechs/internet-image-as-desktop-background-without-downloading-it-in-your-local-machine-its-possible-1ab1</link>
      <guid>https://dev.to/manishfoodtechs/internet-image-as-desktop-background-without-downloading-it-in-your-local-machine-its-possible-1ab1</guid>
      <description>&lt;p&gt;Hello Friends,&lt;/p&gt;

&lt;p&gt;Many of us download images from internet and then set it as wallpaper. In this short hack , I will let you know, how you can make any internet image as desktop background without downloading it in your local machine.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Kn5f2D9k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cpnmg57zi6i7mz5liux6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kn5f2D9k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cpnmg57zi6i7mz5liux6.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In ubuntu you need to run this command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt-get install feh
feh --bg-scale /path/to/your/background/image.jpg
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;change path to internet image:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;feh --bg-scale https://bit.ly/3EnPMkc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above link is shorturl of &lt;a href="https://upload.wikimedia.org/wikipedia/commons/b/b3/Shinjini_kathak_dance_indian_classical_san_Francisco.jpg"&gt;https://upload.wikimedia.org/wikipedia/commons/b/b3/Shinjini_kathak_dance_indian_classical_san_Francisco.jpg&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;you can make feh to remember your choice next boot:&lt;br&gt;
Once you've picked a wallpaper, feh stores the name in a file called .fehbg. That means you can tell it to restore the wallpaper on the next boot by checking to see what's inside that file. Add this line to your ~/.xinitrc file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;eval `cat $HOME/.fehbg` &amp;amp;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Other things you can do:&lt;/p&gt;

&lt;p&gt;(1) My readers may recall my post about the lorapora-sum of images, in which images are generated on each refresh ( check my previous posts). You can try this on your server by allowing feh to reload every 2 hours. As a simple home-made solution.&lt;/p&gt;

&lt;p&gt;(2) If you are a "Administrator," you can update the season greeting as the desktop wallpaper on all computers connected to your network.&lt;/p&gt;

&lt;p&gt;(3) New notices are delivered to employees' desktops on a daily basis. They are not required to open mail:)&lt;/p&gt;

&lt;p&gt;Bye!!! &lt;/p&gt;

</description>
      <category>ubuntu</category>
      <category>linux</category>
      <category>desktop</category>
    </item>
    <item>
      <title>How to Add Featured Image in WordPress RSS Feed</title>
      <author>elinabey</author>
      <pubDate>Sun, 26 Dec 2021 17:28:44 +0000</pubDate>
      <link>https://dev.to/elinabey/how-to-add-featured-image-in-wordpress-rss-feed-1g0e</link>
      <guid>https://dev.to/elinabey/how-to-add-featured-image-in-wordpress-rss-feed-1g0e</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6SPLLRo---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j0lycwxptahm4pggsgin.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6SPLLRo---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j0lycwxptahm4pggsgin.jpg" alt="Add Featured Image in WordPress RSS Feed" width="600" height="300"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Featured Image in WordPress RSS Feed. If you use an RSS feed on your WordPress website, you'll notice that the featured image isn't included in your RSS feed's posts by default. Having an RSS feed with images will enhance your syndication and may come in handy later because marketing tools like Mailup, Aweber, MailChimp use RSS feeds to create newsletters. RSS really means simple syndication. &lt;/p&gt;

&lt;p&gt;In this brief guide, I will show you how to show your featured image in WordPress RSS feed using a plugin and without a plugin.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#featured-image-in-wordpress-rss%C2%A0feed-manually"&gt;
  &lt;/a&gt;
  Featured Image in WordPress RSS Feed (Manually)
&lt;/h2&gt;

&lt;p&gt;If you are familiar with modifying your &lt;strong&gt;&lt;code&gt;functions.php&lt;/code&gt;&lt;/strong&gt; file, you can use the code below to display the prominent Featured images in your RSS feed.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Login to your WordPress Dashboard.&lt;/li&gt;
&lt;li&gt;Go to &lt;strong&gt;Appearance&lt;/strong&gt; &amp;gt;&amp;gt; &lt;strong&gt;Theme Editor&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Click on &lt;strong&gt;function.php&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Add given code in the bottom of function.php file.&lt;/li&gt;
&lt;li&gt;That's All, Click on &lt;strong&gt;Update file&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can also add this code by using FTP.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Yf9ZDIAo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w6tx40hbna1b65bnqe9t.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Yf9ZDIAo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w6tx40hbna1b65bnqe9t.jpg" alt="Featured Image" width="880" height="466"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cd"&gt;/**
 * Featured image to RSS Feed.
 */&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;featuredtoRSS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="nv"&gt;$post&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nf"&gt;has_post_thumbnail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$post&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="no"&gt;ID&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;){&lt;/span&gt;
&lt;span class="nv"&gt;$content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;div&amp;gt;'&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nf"&gt;get_the_post_thumbnail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$post&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="no"&gt;ID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'medium'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'style'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'margin-bottom: 15px;'&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;/div&amp;gt;'&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$content&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$content&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;add_filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'the_excerpt_rss'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'featuredtoRSS'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nf"&gt;add_filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'the_content_feed'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'featuredtoRSS'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Copy the above code and paste it into your &lt;strong&gt;function.php&lt;/strong&gt; file. If you don't know what you are doing with the function first make a backup. &lt;/p&gt;

&lt;p&gt;I shared this post from &lt;a href="https://softcodeon.com/wordpress/featured-image-in-wordpress-rss-feed.htm"&gt;Add Featured Image in WordPress RSS Feed&lt;/a&gt; you can read in detail from there. Also they have provided easy way by using a plugin.&lt;/p&gt;

&lt;p&gt;If you have any question please discuss below help to improve. Thank you.&lt;/p&gt;

</description>
      <category>wordpress</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Creating new server in node.js</title>
      <author>Muhammadaziz</author>
      <pubDate>Sun, 26 Dec 2021 16:44:11 +0000</pubDate>
      <link>https://dev.to/muhammadaziz107/creating-new-server-in-nodejs-2icp</link>
      <guid>https://dev.to/muhammadaziz107/creating-new-server-in-nodejs-2icp</guid>
      <description>&lt;p&gt;Firstly install express&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const express = require("express")
const app = express()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then add to server.js or other js files to listen port&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;app.listen(4000, ()=&amp;gt;{
console.log("server is running on port: 4000")
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or if you want to this way. This way is also good. It's best practices&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const PORT = process.env.PORT || 4000

app.listen(PORT, ()=&amp;gt;{
console.log(PORT)
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>npm</category>
      <category>node</category>
    </item>
    <item>
      <title>VIDEO PLAYLIST SCROLLING</title>
      <author>ZEK</author>
      <pubDate>Sun, 26 Dec 2021 16:14:34 +0000</pubDate>
      <link>https://dev.to/zekmartin7/video-playlist-scrolling-4ifc</link>
      <guid>https://dev.to/zekmartin7/video-playlist-scrolling-4ifc</guid>
      <description>&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/zekmartin7/embed/zYEPXyg?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>codepen</category>
    </item>
    <item>
      <title>DevOps as a self-taught developer</title>
      <author>Sergiu Pruteanu</author>
      <pubDate>Sun, 26 Dec 2021 15:56:19 +0000</pubDate>
      <link>https://dev.to/sergiuprt/devops-as-a-self-taught-developer-3ni3</link>
      <guid>https://dev.to/sergiuprt/devops-as-a-self-taught-developer-3ni3</guid>
      <description>&lt;p&gt;Learning software development is not easy, you must figure out everything and mostly by yourself. While Tutorials are fine, they just give you an example and often not a proper one. I'm learning web development for a year now and I can tell you I'm starting over. After learning the basics of PHP and some Laravel by examples and tutorials, I've decided I want to start over, learning to do everything properly and most importantly - to understand what I'm doing. So why did I write DevOps? It is simple - I'm setting everything myself: the local development environments, docker images and containers, test servers in cloud, deploying to production. And overall, everyone is doing the same, until you work in a team with seniors or DevOps to do it for you.&lt;br&gt;
Believe in yourself, you're doing much more than you think you do!&lt;/p&gt;

</description>
      <category>devops</category>
      <category>beginners</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>5 Free React Courses To Learn In 2022, If You're Just Starting Out.</title>
      <author>Pranish Shrestha</author>
      <pubDate>Sun, 26 Dec 2021 15:36:29 +0000</pubDate>
      <link>https://dev.to/pranish07/5-free-react-courses-to-learn-in-2022-if-youre-just-starting-out-4pne</link>
      <guid>https://dev.to/pranish07/5-free-react-courses-to-learn-in-2022-if-youre-just-starting-out-4pne</guid>
      <description>&lt;p&gt;1:  Learn React for free&lt;/p&gt;

&lt;p&gt;11 hour-long course, completely free from &lt;a class="mentioned-user" href="https://dev.to/bobziroll"&gt;@bobziroll&lt;/a&gt; . &lt;br&gt;
It contains 140+ interactive coding challenges and 9 projects! Best to begin with.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/learn-react"&gt;https://scrimba.com/learn/learnreact&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2: 30 days of react&lt;br&gt;
Beginner friendly and easy to understand with projects.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/30-days-of-react"&gt;https://github.com/Asabeneh/30-Days-Of-React&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3: The Beginner's Guide to React&lt;/p&gt;

&lt;p&gt;No BS, React only course, working with a single HTML file through all the 28 lessons. &lt;a class="mentioned-user" href="https://dev.to/kentcdodds"&gt;@kentcdodds&lt;/a&gt; is my favorite teacher in the React community. Check out his other courses, newsletter, etc you won't regret it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/the-beginner-guide-to-react"&gt;https://egghead.io/courses/the-beginner-s-guide-to-react&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4: Develop Accessible Web Apps with React &lt;br&gt;
The instructor is an expert in creating accessible React applications. This course will give you a concrete process for testing, refactoring, and building your applications with accessibility in mind.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.todevelop-accessible-web-apps-with-react"&gt;https://egghead.io/courses/develop-accessible-web-apps-with-react&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;5:  Build a Web App with React&lt;/p&gt;

&lt;p&gt;A free, 5-part video course with interactive code examples that will help you learn React from glitch. &lt;br&gt;
&lt;a href="https://dev.tobuild-a-web-app-with-react"&gt;https://blog.glitch.com/post/react-starter-kit&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>career</category>
      <category>100daysofcode</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Test Driven Development with React</title>
      <author>Basar Buyukkahraman</author>
      <pubDate>Sun, 26 Dec 2021 15:13:53 +0000</pubDate>
      <link>https://dev.to/basarbk/test-driven-development-with-react-a8a</link>
      <guid>https://dev.to/basarbk/test-driven-development-with-react-a8a</guid>
      <description>&lt;p&gt;In this one lets see how we can apply test driven development in a react project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h2&gt;

&lt;p&gt;First lets create the project.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npx create-react-app my-app&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Create react app is creating the project having necessary dependencies for the testing. We are using &lt;br&gt;
&lt;strong&gt;jest&lt;/strong&gt;&lt;a href="https://jestjs.io/"&gt;*&lt;/a&gt; as the test runner which also has the assertion and mocking functionalities.&lt;/p&gt;

&lt;p&gt;We also have additional dependencies&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;@testing-library/react&lt;/strong&gt; is for rendering the components in our test functions.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;@testing-library/jest-dom&lt;/strong&gt; is for dom releated matchers for jest&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;@testing-library/user-event&lt;/strong&gt; is for making user actions on components, like clicking, typing, focusing etc&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The project comes with &lt;code&gt;App.test.js&lt;/code&gt; module which is a sample to demonstrate how to test a component. It displays how to render a component in a test module, how to query elements in that component and how to do the assertion part.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// App.test.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@testing-library/react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;renders learn react link&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;linkElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/learn react/i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;linkElement&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toBeInTheDocument&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;There is also &lt;code&gt;setupTest.js&lt;/code&gt; in the project. This file is loaded by jest and we can move repeating parts (like importing the common packages for the test modules) from test modules to this one.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#project"&gt;
  &lt;/a&gt;
  Project
&lt;/h2&gt;

&lt;p&gt;Lets have a simple component here. We will have a button on it and whenever we click to that button, it is going to be loading random user from this public api&lt;br&gt;
&lt;a href="https://randomuser.me/"&gt;https://randomuser.me/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First lets have two terminal and run the project &lt;code&gt;npm start&lt;/code&gt; in one of them and run the tests &lt;code&gt;npm test&lt;/code&gt; on another one.&lt;/p&gt;

&lt;p&gt;By default the jest is running in watch mode in our project. And jest watch mode is working based on git status. If there is no changed files, it does not run tests. You can make sure to run all test to run by hitting &lt;code&gt;a&lt;/code&gt; in the test terminal. The App.test.js would be run after that and you must be seeing all tests are passing.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; PASS  src/App.test.js
  √ renders learn react link (61 ms)

Test Suites: 1 passed, 1 total
Tests:       1 passed, 1 total
Snapshots:   0 total
Time:        1.407 s
Ran all test suites.

Watch Usage: Press w to show more
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now lets add our component &lt;code&gt;RandomUser.js&lt;/code&gt; and corresponding test module &lt;code&gt;RandomUser.spec.js&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Jest&lt;/strong&gt; automatically detects the test modules if the files have the extension &lt;code&gt;*.test.js&lt;/code&gt; or &lt;code&gt;*.spec.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;and lets add our first test&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// RandomUser.spec.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;RandomUser&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./RandomUser&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@testing-library/react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Random User&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;has button to load random user&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;RandomUser&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;loadButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;queryByRole&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Load Random User&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;loadButton&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toBeInTheDocument&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We are rendering the RandomUser component. And than we use &lt;code&gt;screen&lt;/code&gt;'s functions to query the elements we are looking for. &lt;a href="https://testing-library.com/docs/queries/about"&gt;doc&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;this first test is looking for a button on page. We are using the a11y roles here and as a text, we expect the button to have &lt;strong&gt;Load Random User&lt;/strong&gt;. In the end, we expec this button to be in the document.&lt;/p&gt;

&lt;p&gt;As soon as we save this module, jest is running the tests again. It will be ending up with failure.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; ● Random User › has button to load random user

    Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: object. You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.

      4 | describe('Random User', () =&amp;gt; {
      5 |   it('has button to load random user', () =&amp;gt; {
    &amp;gt; 6 |     render(&amp;lt;RandomUser /&amp;gt;);
        |     ^
      7 |     const loadButton = screen.queryByRole('button', {
      8 |       name: 'Load Random User'
      9 |     });

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The test fails at the render phase, because the RandomUser.js is not actually a react component yet.&lt;/p&gt;

&lt;p&gt;Lets create the component.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// RandomUser.js&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;RandomUser&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="c1"&gt;// lets return button element having the text we are looking for&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Load&lt;/span&gt; &lt;span class="nx"&gt;Random&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Test is passing now.&lt;/p&gt;

&lt;p&gt;Lets show this component in our application.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// index.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;//&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;RandomUser&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./RandomUser&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;StrictMode&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;// replace &amp;lt;App/&amp;gt; with our component&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;RandomUser&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/React.StrictMode&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;,
&lt;/span&gt;  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now you must be seeing a button on page.&lt;/p&gt;

&lt;p&gt;Now we are going to click to this button and it will be making an api call to &lt;strong&gt;randomuser.me&lt;/strong&gt;&lt;br&gt;
But first lets install a library for this api call.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i axios
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Make sure you stop and start test and app consoles after installing a new dependency.&lt;/p&gt;

&lt;p&gt;Lets use &lt;a href="https://github.com/axios/axios"&gt;axios&lt;/a&gt; for http calls.&lt;/p&gt;

&lt;p&gt;We are going to add our test for this requirement. But first lets see the returned object from randomuser api.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"results"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"gender"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"female"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Miss"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"first"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Jennifer"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"last"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Alvarez"&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"location"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"email"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"jennifer.alvarez@example.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"login"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
         &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"dob"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"date"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1954-07-01T18:59:36.451Z"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"age"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;67&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"registered"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"date"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2016-11-17T05:48:39.981Z"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"age"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"phone"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"07-9040-0066"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"cell"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"0478-616-061"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"TFN"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"value"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"531395478"&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"picture"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"large"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://randomuser.me/api/portraits/women/24.jpg"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"medium"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://randomuser.me/api/portraits/med/women/24.jpg"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"thumbnail"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://randomuser.me/api/portraits/thumb/women/24.jpg"&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"nat"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"AU"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"info"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;so the actual user object is in the results array.&lt;br&gt;
now lets add our test&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// we need to import two packages.&lt;/span&gt;
&lt;span class="c1"&gt;// we will mock the&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;axios&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// and we will use this user-event to click the button.&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;userEvent&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@testing-library/user-event&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// this test will be having async/await&lt;/span&gt;
&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;displays title, first and lastname of loaded user from randomuser.me&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;RandomUser&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;loadButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;queryByRole&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Load Random User&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="c1"&gt;// we will click the button but our request must not be going&lt;/span&gt;
  &lt;span class="c1"&gt;// to the real server. we can't be sure how that request&lt;/span&gt;
  &lt;span class="c1"&gt;// ends up. So we will mock it. Lets make sure we set what&lt;/span&gt;
  &lt;span class="c1"&gt;// axios will return. &lt;/span&gt;
  &lt;span class="c1"&gt;// lets define the mock function first&lt;/span&gt;
  &lt;span class="c1"&gt;// axios get, post ... functions are promise and here&lt;/span&gt;
  &lt;span class="c1"&gt;// we will mock success response by mockResolvedValue&lt;/span&gt;
  &lt;span class="c1"&gt;// and we will return the axios response object.&lt;/span&gt;
  &lt;span class="c1"&gt;// so we put the actual api response into data object here&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mockApiCall&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;jest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;mockResolvedValue&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;results&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Miss&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;first&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jennifer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;last&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Alvarez&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="c1"&gt;// now lets assign this mock function to axios.get&lt;/span&gt;
  &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mockApiCall&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;// then we can click the button&lt;/span&gt;
  &lt;span class="nx"&gt;userEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;loadButton&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// and we expect to see this text on screen.&lt;/span&gt;
  &lt;span class="c1"&gt;// this is dependent onto async operation to complete&lt;/span&gt;
  &lt;span class="c1"&gt;// so to wait that api call to finish, we use this findBy...&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userInfo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Miss Jennifer Alvarez&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userInfo&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toBeInTheDocument&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;this test fails and you should be seeing a message like this&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;  ● Random User › displays title, first and lastname of loaded user from randomuser.me

    TestingLibraryElementError: Unable to find an element with the text: Miss Jennifer Alvarez. This could be because the text is broken up by multiple elements. In this &lt;span class="k"&gt;case&lt;/span&gt;, you can provide a &lt;span class="k"&gt;function for &lt;/span&gt;your text matcher to make your matcher more flexible.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;lets fix this.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// RandomUser.js&lt;/span&gt;

&lt;span class="c1"&gt;// importing axios, we will make api call&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;axios&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// we need to have a state&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;RandomUser&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="c1"&gt;// we have user object in state&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setUser&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="c1"&gt;// this function will be handling the api call&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;loadRandomUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://randomuser.me/api&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="c1"&gt;// updates the user object with the loaded data&lt;/span&gt;
      &lt;span class="nx"&gt;setUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;loadRandomUser&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Load&lt;/span&gt; &lt;span class="nx"&gt;Random&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="c1"&gt;// if we have user, lets display the name&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;last&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;)}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;after these changes test will pass.&lt;/p&gt;

&lt;p&gt;With mocking, we have a predictable behavior in our application. If we test this on browser, we can see in each click, we receive different users.&lt;/p&gt;

&lt;p&gt;But the downside of mocking is, now our test is highly coupled with our implementation detail. If we decide to replace axios with &lt;code&gt;fetch&lt;/code&gt;, then our test needs to be refactored accordingly.&lt;/p&gt;

&lt;p&gt;lets do that.&lt;/p&gt;

&lt;p&gt;The fetch is coming with the browser. So to use it in our component we don't need to install anything. But in our test environment, which is running in node, it doesn't have fetch in it. So using fetch in application will cause problem on test part. To resolve this lets install another package. This is only needed for test modules.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i &lt;span class="nt"&gt;-D&lt;/span&gt; whatwg-fetch
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;now lets import this one in our test and re-run tests.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// RandomUser.spec.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;whatwg-fetch&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;But other than this import, lets do nothing on test. But lets use fetch in our component.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// RandomUser.js&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;loadRandomUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://randomuser.me/api&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="nx"&gt;setUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;after these changes the tests are failing. But if we test this on browser, the user is properly loaded. So form user point of view, there is no difference.&lt;br&gt;
But since our test is coupled with axios usage, it is broken now. We can update our mock functions in test to make our test pass. Or we can resolve it without mocking.&lt;/p&gt;

&lt;p&gt;We are going to use the library &lt;a href="//mswjs.io"&gt;Mock Service Worker - MSW&lt;/a&gt;&lt;br&gt;
Lets install it&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i &lt;span class="nt"&gt;-D&lt;/span&gt; msw
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We are going to use it in our test module.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// RandomUser.spec.js&lt;/span&gt;
&lt;span class="c1"&gt;// lets import these two functions&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;setupServer&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;msw/node&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;rest&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;msw&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;displays title, first and lastname of loaded user from randomuser.me&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;// here we will create a server&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setupServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="c1"&gt;// and this server is going to be processing the GET requests&lt;/span&gt;
    &lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://randomuser.me/api&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// and here is the response it is returning back&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;results&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Miss&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="na"&gt;first&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jennifer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="na"&gt;last&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Alvarez&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="p"&gt;}));&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// then..&lt;/span&gt;
  &lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="c1"&gt;// so at this step we have a server&lt;/span&gt;
  &lt;span class="c1"&gt;// after this part we don't need to deal with axios or fetch&lt;/span&gt;
  &lt;span class="c1"&gt;// in this test function&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;RandomUser&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;loadButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;queryByRole&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Load Random User&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="nx"&gt;userEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;loadButton&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userInfo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Miss Jennifer Alvarez&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userInfo&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toBeInTheDocument&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;after this change, test must be passing.&lt;br&gt;
Now our test is not dependent onto the client we are using. We can go back and use axios again.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;loadRandomUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://randomuser.me/api&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Tests must be passing with this usage too.&lt;/p&gt;

&lt;p&gt;The mocking is a very good technique in scenarios where external services are taking place. With mocking we are able to create a reliable test environment. But the down side of it, our tests are being highly coupled with our implementation.&lt;br&gt;
My choice is to avoid mocking if I can. And the &lt;strong&gt;msw&lt;/strong&gt; library is great replacement for backend in client tests.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h3&gt;

&lt;p&gt;Github repo for this project can be found here&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/basarbk"&gt;
        basarbk
      &lt;/a&gt; / &lt;a href="https://github.com/basarbk/dev-to-tdd-react"&gt;
        dev-to-tdd-react
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Repository of article project about test driven development with react published in dev.to 
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You can also check this video tutorial about similar topic &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/PyssT_e_Twc"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;If you would be interested in a full TDD course on react, you can check my course at udemy &lt;a href="https://www.udemy.com/course/react-with-test-driven-development/?couponCode=DEC21DXT"&gt;React with Test Driven Development&lt;/a&gt;&lt;br&gt;
You can access to the latest coupons &lt;a href="https://bafoly.com/?course=tdd-react"&gt;here&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>tdd</category>
      <category>jest</category>
      <category>msw</category>
    </item>
    <item>
      <title>Styled Text Package</title>
      <author>flutterCode</author>
      <pubDate>Sun, 26 Dec 2021 14:33:50 +0000</pubDate>
      <link>https://dev.to/mmanflori/styled-text-package-185b</link>
      <guid>https://dev.to/mmanflori/styled-text-package-185b</guid>
      <description>&lt;p&gt;Keine Anwendung kommt ohne Texte aus. Diese Texte zu formatieren ist dementsprechend eine immer wiederkehrende Aufgabe. Flutter hat dafür ohne Zweifel gute Bordmittel. Aber wenn es darum geht größere Textmengen zu bearbeiten wird es rasch aufwendig.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://pub.dev/publishers/amazingsoftworks.com"&gt;amazingsoftworks&lt;/a&gt; hat für diese Problemstellung eine interessante Package veröffentlicht.&lt;br&gt;
&lt;a href="https://pub.dev/packages/styled_text"&gt;styled_text&lt;/a&gt; ermöglicht das Formatieren eines Textes, ähnlich wie man es aus Html kennt. Das heisst, es werden Tags verwendet:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TextKonserve&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;StatelessWidget&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="n"&gt;Widget&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BuildContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;StyledText&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="nl"&gt;text:&lt;/span&gt; &lt;span class="s"&gt;'&amp;lt;italic&amp;gt;Dies ist ein&amp;lt;/italic&amp;gt; &amp;lt;bold&amp;gt;Test !&amp;lt;/bold&amp;gt;'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="nl"&gt;tags:&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;'bold'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;StyledTextTag&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
            &lt;span class="nl"&gt;style:&lt;/span&gt; &lt;span class="n"&gt;TextStyle&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
          &lt;span class="nl"&gt;fontFamily:&lt;/span&gt; &lt;span class="s"&gt;'Raleway'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
          &lt;span class="nl"&gt;fontSize:&lt;/span&gt; &lt;span class="mf"&gt;20.0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
          &lt;span class="nl"&gt;fontWeight:&lt;/span&gt; &lt;span class="n"&gt;FontWeight&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;w700&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
          &lt;span class="nl"&gt;fontStyle:&lt;/span&gt; &lt;span class="n"&gt;FontStyle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;normal&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
          &lt;span class="nl"&gt;color:&lt;/span&gt; &lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;red&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="o"&gt;)),&lt;/span&gt;
        &lt;span class="s"&gt;'italic'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;StyledTextTag&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
            &lt;span class="nl"&gt;style:&lt;/span&gt; &lt;span class="n"&gt;TextStyle&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
          &lt;span class="nl"&gt;fontFamily:&lt;/span&gt; &lt;span class="s"&gt;'Raleway'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
          &lt;span class="nl"&gt;fontSize:&lt;/span&gt; &lt;span class="mf"&gt;20.0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
          &lt;span class="nl"&gt;fontStyle:&lt;/span&gt; &lt;span class="n"&gt;FontStyle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;italic&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
          &lt;span class="nl"&gt;fontWeight:&lt;/span&gt; &lt;span class="n"&gt;FontWeight&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;w700&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="o"&gt;))&lt;/span&gt;
      &lt;span class="o"&gt;},&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Im Code oben ist das Prinzip schön zu sehen. &lt;strong&gt;text:&lt;/strong&gt; enthält die zu formatierende Zeichenkette.&lt;strong&gt;StyledTextTag&lt;/strong&gt; übernimmt dabei ein &lt;strong&gt;TextStyle&lt;/strong&gt; Widget, welches die eigentliche Formatierung enthält.&lt;/p&gt;

&lt;p&gt;Wer auf die &lt;a href="https://pub.dev/packages/styled_text/example"&gt;Beispiel&lt;/a&gt; Seite der Entwickler surft, findet eine Vielzahl von Einsatzmöglichkeiten. Erwähnen möchte ich hier, das auch das Einbinden von Icons möglich ist, oder die Verwendung von Texten, die über mehrere Zeilen gehen. Es lohnt sich auf jeden Fall die Package zu testen!&lt;/p&gt;

&lt;p&gt;Bis bald ! 😀&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@maxchen2k?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Max Chen&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/text?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>german</category>
      <category>flutter</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
