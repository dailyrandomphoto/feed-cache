<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Easiest way to add multilanguage in your website</title>
      <author>Shuvo</author>
      <pubDate>Tue, 26 Oct 2021 15:37:39 +0000</pubDate>
      <link>https://dev.to/0shuvo0/easiest-way-to-add-multilanguage-in-your-website-4n7</link>
      <guid>https://dev.to/0shuvo0/easiest-way-to-add-multilanguage-in-your-website-4n7</guid>
      <description>&lt;p&gt;If you want to scale your website then it'd be a really good idea to add multiple language support in your site so that language wont be a barrier.&lt;/p&gt;

&lt;p&gt;Now this might sound really hard and complicated but &lt;a href="https://tolgee.io/"&gt;tolgee.io&lt;/a&gt; makes it really easy. You can literally &lt;strong&gt;make a multilingual website UNDER 10 MINUTES&lt;/strong&gt;. And it is framework independent. So you can use it with &lt;a href="https://reactjs.org"&gt;React&lt;/a&gt;, &lt;a href="https://vuejs.org/"&gt;Vue JS&lt;/a&gt; or any framework that you want. But in this article we will see how to use it with vanilla JavaScript project.&lt;/p&gt;

&lt;p&gt;So let me show you how to do just that in just 10 simple steps:&lt;br&gt;
1) So first you have to create an account on &lt;a href="https://tolgee.io/"&gt;tolgee.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2) Then click on &lt;strong&gt;Go to app&lt;/strong&gt; then click on &lt;strong&gt;ADD&lt;/strong&gt; &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4mFJYC9V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tamtbphj1kwrm9j25iyy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4mFJYC9V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tamtbphj1kwrm9j25iyy.png" alt="Tolgee go to app button"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mq6MUCCt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/013ut6ezcqydj8ix2ms2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mq6MUCCt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/013ut6ezcqydj8ix2ms2.png" alt="Tolgee add button"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3) Then you have to enter the name of you project/website. And select the languages you want to add to your website. &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IOMtZobI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ba009iegg7ejd3u1m9af.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IOMtZobI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ba009iegg7ejd3u1m9af.png" alt="Tolgee create project"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4) The click on your project. &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5R4amStY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0npn17gxwxb9niqbvon6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5R4amStY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0npn17gxwxb9niqbvon6.png" alt="Project list"&gt;&lt;/a&gt; the add the texts that you want to show in those languages. &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nJGfHcrb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l7wg8na8m63ssuive2m2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nJGfHcrb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l7wg8na8m63ssuive2m2.png" alt="Add text button"&gt;&lt;/a&gt;&lt;br&gt;
Feel free to use &lt;a href="https://translate.google.com/"&gt;Google translate.&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z8wvvrK0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p0w1oekva48yhfzno13x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z8wvvrK0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p0w1oekva48yhfzno13x.png" alt="Add text in tolgee project"&gt;&lt;/a&gt; &lt;em&gt;Your key should be named like a variable&lt;/em&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Rf0qzE_m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hqwfdyhd9nq53ojnsxxz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rf0qzE_m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hqwfdyhd9nq53ojnsxxz.png" alt="Added texts list"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;5) Then click on &lt;strong&gt;integrate&lt;/strong&gt; and choose your framework which will be JS in our case and create a api key. And make sure you copy it, we will need it in a moment.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IEuGSpAT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vvhcgcc5c8ipr1p2w78k.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IEuGSpAT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vvhcgcc5c8ipr1p2w78k.gif" alt="creating api key"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;6) Now we are finally ready for the coding part. So create a &lt;strong&gt;index.html&lt;/strong&gt; and link &lt;strong&gt;&lt;a href="https://unpkg.com/@tolgee/core/dist/tolgee.umd.min.js"&gt;https://unpkg.com/@tolgee/core/dist/tolgee.umd.min.js&lt;/a&gt;&lt;/strong&gt; in it. It is the CDN for Tolgee SDK.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Hello world&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;%-%welcome_message%-%&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;%-%msg_long%-%&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://unpkg.com/@tolgee/core/dist/tolgee.umd.min.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&lt;/span&gt; &lt;span class="err"&gt;src="main.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Notice that we have some weird syntax. What is &lt;strong&gt;%-%welcome_message%-%&lt;/strong&gt; and &lt;strong&gt;%-%msg_long%-%&lt;/strong&gt;?  Well these are just the key we have defined. These will be complied to the actual text we defined.&lt;/p&gt;

&lt;p&gt;7) Now we need to initialize our tolgee app in &lt;strong&gt;main.js&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@tolgee/core&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;Tolgee&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;apiUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://app.tolgee.io&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;apiKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The_API_key_You_coped&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;inputPrefix&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;%-%&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;inputSuffix&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;%-%&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;watch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;tg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Here the &lt;strong&gt;inputPrefix&lt;/strong&gt; and &lt;strong&gt;inputSuffix&lt;/strong&gt; are basically the characters our key is wrapped around. In Vue JS we use double set on curly braces and single set in react. So we are doing similar thing here, just the data is coming from tolgee.&lt;br&gt;
And now if you open &lt;strong&gt;index.html&lt;/strong&gt; with live server you will see you get the text we defined in our tolgee project earlier. &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R0NqFXn2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4hu70g63w0zhaawtlecb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R0NqFXn2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4hu70g63w0zhaawtlecb.png" alt="translation demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;8) But you will notice for for some moments we see those expressions uncompiled. &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yejd6Qw5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u7v5pjh3dpvn7e6dguqf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yejd6Qw5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u7v5pjh3dpvn7e6dguqf.png" alt="Uncompiled tolgee expression"&gt;&lt;/a&gt;&lt;br&gt;
  We don't want our users too see that. So to hide them you can implement a full screen loader.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"loader"&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"height: 100vh"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Loading&lt;span class="nt"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;%-%welcome_message%-%&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;%-%msg_long%-%&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@tolgee/core&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;Tolgee&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;apiUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://app.tolgee.io&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;apiKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;71mpth0erv28oidqrt14d8l01e&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;inputPrefix&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;%-%&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;inputSuffix&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;%-%&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;watch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;tg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//Hide the loader after tolgee has ran&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.loader&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;9) Now we want our user to be able to select a language from a drop down list and the language of webpage should change according to that. So for that lets first create a select in our &lt;strong&gt;html&lt;/strong&gt; document&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;    &lt;span class="nt"&gt;&amp;lt;select&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"lang-select"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Englis&lt;span class="nt"&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"hi"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Hindi&lt;span class="nt"&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"zh-Hans"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Chienese (Simplified.)&lt;span class="nt"&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/select&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;%-%welcome_message%-%&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;%-%msg_long%-%&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;10) Now finally in the javascript when the user select any language we want to translate our contents accordingly.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@tolgee/core&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;Tolgee&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;apiUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://app.tolgee.io&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;apiKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;71mpth0erv28oidqrt14d8l01e&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;inputPrefix&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;%-%&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;inputSuffix&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;%-%&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;watch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="nx"&gt;tg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;langs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.lang-select&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;langs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;change&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//Changing the language of our page&lt;/span&gt;
    &lt;span class="nx"&gt;tg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lang&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ObhjEZU4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u9mi8rbzc9ex73tetxi8.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ObhjEZU4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u9mi8rbzc9ex73tetxi8.gif" alt="toleee final demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And there now we have successfully made a multilingual website using JavaScript and Tolgee.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#final-thaught"&gt;
  &lt;/a&gt;
  Final thaught:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Tolgee is beginner friendly&lt;/li&gt;
&lt;li&gt;We have only touched the surface, theres a lot more Tolgee can do, For example on page adding and editing translation using tolgee UI&lt;/li&gt;
&lt;li&gt;many people would say now your texts are not inside your code that can be hard to manage.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;But in my option it makes it even better because lets say you just published your app to production and found a typo in your text then you wont have to change your codes and reupload them you can just change the texts from Tolgee dashboard and you are good to go.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So make sure you checkout &lt;a href="https://tolgee.io/"&gt;Tolgee&lt;/a&gt; docs and level up your skills. Its highly recommended by me.&lt;/p&gt;


&lt;div class="ltag__user ltag__user__id__728097"&gt;
  
    .ltag__user__id__728097 .follow-action-button {
      background-color: #000000 !important;
      color: #ffffff !important;
      border-color: #000000 !important;
    }
  
    &lt;a href="/0shuvo0" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wZgMNup---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j0_lvM9_--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/728097/0f6e1da9-f243-42d0-b446-301ac6ea6412.jpeg" alt="0shuvo0 image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/0shuvo0"&gt;Shuvo&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/0shuvo0"&gt;Frontend Developer and YouTuber.
Channel link: https://www.youtube.com/c/AngleBrace&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Por que decidi aprender (e ensinar) Clojure</title>
      <author>Marcio Frayze</author>
      <pubDate>Tue, 26 Oct 2021 15:35:31 +0000</pubDate>
      <link>https://dev.to/marciofrayze/por-que-decidi-aprender-e-ensinar-clojure-1j6m</link>
      <guid>https://dev.to/marciofrayze/por-que-decidi-aprender-e-ensinar-clojure-1j6m</guid>
      <description>&lt;p&gt;Em 2017 comecei a me aprofundar no universo da Programação Funcional. Este paradigma já ganhava bastante popularidade e cada vez mais as principais linguagens de programação orientadas a objetos incluíam recursos inspirados neste paradigma, inclusive a linguagem que eu mais utilizava: Java.&lt;/p&gt;

&lt;p&gt;Após o lançamento da versão 8 da JDK, em março de 2014, passou a ser cada vez mais comum ouvir as pessoas desenvolvedoras Java usando termos como: programação funcional, &lt;em&gt;streams&lt;/em&gt;, &lt;em&gt;optional&lt;/em&gt;, &lt;em&gt;map&lt;/em&gt;, &lt;em&gt;flat map&lt;/em&gt;, etc. Mas muitas pessoas em meu entorno ainda ignoravam estes novos recurso e, confesso, demorei para adotar essas novidades. As ideias pareciam muita interessantes, mas colocá-las em prática se mostrou mais difícil do que eu esperava.&lt;/p&gt;

&lt;p&gt;Depois de muita tentativa e erro, resolvi me aprofundar nos conceitos. O livro &lt;a href="https://www.oreilly.com/library/view/functional-thinking/9781449365509/"&gt;Functional Thinking&lt;/a&gt; me ajudou a dar os primeiros passos na direção correta.&lt;/p&gt;

&lt;p&gt;Em paralelo decidi que iria aprender uma linguagem funcional mais pura ao invés de tentar aplicar o paradigma funcional em uma linguagem orientada a objetos. Depois de pesquisar bastante, optei por aprender &lt;a href="https://elm-lang.org"&gt;Elm&lt;/a&gt;. O fato de ser uma linguagem funcional pura e imutável me chamou atenção. Alem disso, ela é focada no desenvolvimento de &lt;em&gt;webapps&lt;/em&gt; e, até então, eu não havia encontrado nenhuma solução para desenvolvimento de páginas web que me agradasse. &lt;/p&gt;

&lt;p&gt;Depois de passar por todo &lt;a href="https://guide.elm-lang.org"&gt;Guia de introdução à linguagem Elm&lt;/a&gt; e ler o livro &lt;a href="https://www.manning.com/books/elm-in-action"&gt;Elm in Action&lt;/a&gt;, já me sentia bastante confortável em desenvolver &lt;em&gt;webapps&lt;/em&gt; neste paradigma. Gostei tanto de Elm que iniciei um projeto para ensinar programação para iniciantes usando esta linguagem e disponibilizei as primeiras aulas no site &lt;a href="https://elm.dev.br"&gt;elm.dev.br&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Mas havia um problema sério que ainda precisava encarar: Elm é uma linguagem concebida para desenvolvimento de &lt;em&gt;webapps&lt;/em&gt; e funciona muito bem para isso, mas eu buscava uma solução de uso geral, que pudesse ser utilizada também no desenvolvimento de &lt;em&gt;backends&lt;/em&gt;. Por isso voltei a estudar as alternativas.&lt;/p&gt;

&lt;p&gt;Elm é uma linguagem estaticamente tipada e inspirada em &lt;a href="https://www.haskell.org"&gt;Haskell&lt;/a&gt;. O passo natural seria utilizar Elm no &lt;em&gt;frontend&lt;/em&gt; e Haskell no &lt;em&gt;backend&lt;/em&gt;. E foi o que tentei fazer. Li com certa dificuldade o livro &lt;em&gt;Learn You a Haskell for Great Good!&lt;/em&gt; (disponível gratuitamente &lt;a href="http://learnyouahaskell.com"&gt;aqui&lt;/a&gt;) e aprendi muita coisa legal. Mas criar um &lt;em&gt;backend&lt;/em&gt; completo usando Haskell mostrou-se um passo maior do que eu conseguiria dar naquele momento. Resolvi então procurar outras alternativas...&lt;/p&gt;

&lt;p&gt;Durante todo esse processo a palavra &lt;a href="https://pt.wikipedia.org/wiki/Lisp"&gt;Lisp&lt;/a&gt; não saía da minha cabeça! De tempos em tempos esbarrava em algum vídeo de alguma pessoa influente na comunidade falando sobre ela (como &lt;a href="https://www.youtube.com/watch?v=Uooh0Y9fC_M#t=4876ab_channel=IGN"&gt;este vídeo&lt;/a&gt; ou &lt;a href="https://twitter.com/ID_AA_Carmack/status/577877590070919168"&gt;este twit&lt;/a&gt; do &lt;a href="https://pt.wikipedia.org/wiki/John_Carmack"&gt;John Carmack&lt;/a&gt;, fundador da &lt;em&gt;id Software&lt;/em&gt;). Parecia algo místico. E o fato do &lt;a href="https://building.nubank.com.br/working-with-clojure-at-nubank"&gt;Nubank ter adotado Clojure&lt;/a&gt; trouxe um estudo de caso bastante real e pragmático do uso de um dialeto de Lisp no Brasil. &lt;/p&gt;

&lt;p&gt;Até então estava postergando estudá-la pois estava priorizando linguagens estaticamente tipadas e os dialetos mais famosos de Lisp são linguagens dinâmicas. Mas no começo de 2021 resolvi finalmente dar uma chance. Escolhi a linguagem &lt;a href="https://clojure.org%7CClojure"&gt;Clojure&lt;/a&gt; e comecei a ler o livro &lt;a href="https://pragprog.com/titles/roclojure/getting-clojure"&gt;Getting Clojure&lt;/a&gt;. Ao contrário dos meus estudos de Haskell, consegui ler este livro em poucos dias! Em paralelo comecei a fazer as aulas da &lt;a href="https://www.alura.com.br/formacao-clojure"&gt;Formação Clojure da Alura&lt;/a&gt;, que me ajudaram a ver mais na prática como programar nesta linguagem. Foi uma boa combinação: no livro eu aprendia mais a fundo os conceitos da linguagem e no curso revisava estes conceitos e aprendia a parte um pouco mais prática.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#principais-caracter%C3%ADsticas-de-clojure"&gt;
  &lt;/a&gt;
  Principais características de Clojure
&lt;/h2&gt;

&lt;p&gt;Lisp não é uma linguagem de programação, mas uma família de linguagens com diversos &lt;em&gt;dialetos&lt;/em&gt;. Os dialetos mais famosos incluem a &lt;a href="https://lisp-lang.org"&gt;Common Lisp&lt;/a&gt;, &lt;a href="https://clojure.org"&gt;Clojure&lt;/a&gt;, &lt;a href="https://groups.csail.mit.edu/mac/projects/scheme"&gt;Scheme&lt;/a&gt; e &lt;a href="https://racket-lang.org"&gt;Racket&lt;/a&gt;. Desta forma, após decidir que iria aprender Lisp, precisaria escolher um de seus dialetos.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://clojure.org"&gt;Clojure&lt;/a&gt; se destacou para mim por duas razões:  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ela utiliza a máquina virtual do Java, possibilitando interoperabilidade com aplicações Java (que como disse no início do artigo, é a linguagem que costumo utilizar no &lt;em&gt;backend&lt;/em&gt;).&lt;/li&gt;
&lt;li&gt;ela utiliza predominantemente o paradigma funcional. Alguns dialetos de Lisp (como o Common Lisp, por exemplo) são multiparadigma, mas como minha intenção era me aprofundar no universo da programação funcional, fazia mais sentido adotar um dialeto que desse preferência para este paradigma.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A experiência de programar em Clojure foi bastante libertadora. Praticar &lt;a href="https://pt.wikipedia.org/wiki/Test-driven_development"&gt;TDD&lt;/a&gt; junto com o &lt;a href="https://practical.li/clojure/repl-driven-devlopment.html"&gt;REPL Driven Development&lt;/a&gt; (técnica bastante difundida dentro da&lt;br&gt;
comunidade Clojure) faz com que o ciclo de &lt;em&gt;feedback&lt;/em&gt; seja muito rápido. O fato de Clojure ser uma linguagem dinâmica também contribui para isso.&lt;/p&gt;

&lt;p&gt;Outra característica de Clojure é ser uma linguagem &lt;em&gt;impura&lt;/em&gt;, ou seja, podemos efetuar &lt;em&gt;efeitos colaterais&lt;/em&gt; a qualquer momento. A principal vantagem disso é que torna a linguagem mais fácil de aprender (embora traga junto uma série de outros problemas que não acontecem em linguagens mais puras, como Elm ou Haskell). Escrevi &lt;a href="https://segunda.tech/posts/2019-08-26-funcoes-puras"&gt;um artigo sobre Funções Puras&lt;/a&gt; onde explico melhor este tema. Também &lt;a href="https://www.youtube.com/watch?v=QenAR_3XtXU&amp;amp;t=1189s&amp;amp;ab_channel=segunda.tech"&gt;gravei um vídeo&lt;/a&gt; explicando o que são Função Puras.&lt;/p&gt;

&lt;p&gt;Embora seja uma linguagem impura, ela incentiva uma série de boas práticas que fazem com que os potenciais problemas dessa abordagem sejam significativamente reduzidos.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#como-dar-os-primeiros-passos-em-clojure"&gt;
  &lt;/a&gt;
  Como dar os primeiros passos em Clojure
&lt;/h2&gt;

&lt;p&gt;Todas essas características que citei ao longo do artigo fazem com que Clojure, embora tenha uma aparência um pouco intimidadora no começo, seja na verdade bastante fácil de utilizar. Por isso escolhi também esta linguagem para compartilhar com outras pessoas desenvolvedoras os fundamentos básicos da &lt;em&gt;programação funcional&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;Para quem gosta de livros, recomendo iniciar pelo &lt;a href="https://pragprog.com/titles/roclojure/getting-clojure"&gt;Getting Clojure&lt;/a&gt;, que como disse é uma ótima forma de entender os princípios básicos por trás do Clojure, ou se preferir uma opção gratuita pode começar pela versão online do livro &lt;a href="https://www.braveclojure.com"&gt;Clojure for Brave and True&lt;/a&gt;. Outra opção mais focada nos fundamentos do paradigma e que aborda outras linguagens além de Clojure é o livro &lt;a href="https://www.oreilly.com/library/view/functional-thinking/9781449365509/"&gt;Functional Thinking&lt;/a&gt;, do Neal Ford. Gravei um &lt;a href="https://segunda.tech/posts/2019-06-17-functional-thinking"&gt;podcast&lt;/a&gt; onde falo um pouco sobre esta obra. Estes 3 livros são em inglês. Se quiser uma leitura em português a editora Casa do Código tem disponível o livro &lt;a href="https://www.casadocodigo.com.br/products/livro-programacao-funcional-clojure"&gt;Programação Funcional: Uma introdução em Clojure&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Se preferir estudar através de &lt;em&gt;cursos &lt;em&gt;online&lt;/em&gt;&lt;/em&gt;, você pode se inscrever no meu curso &lt;a href="https://segundatech.teachable.com"&gt;Clojure: Introdução à Programação Funcional&lt;/a&gt;. Ou pode fazer os cursos da &lt;a href="https://www.alura.com.br/formacao-clojure"&gt;Formação Clojure da Alura&lt;/a&gt;.&lt;/p&gt;




&lt;p&gt;E você, qual seu paradigma preferido? Já tentou programar utilizando o paradigma funcional? Quais foram suas principais dificuldades? Compartilhe suas experiências nos comentários!&lt;/p&gt;

&lt;p&gt;Se você gostou deste texto talvez goste dos meus outros artigos, vídeos e podcasts disponíveis em &lt;a href="//segunda.tech"&gt;segunda.tech&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>clojure</category>
      <category>functional</category>
      <category>java</category>
    </item>
    <item>
      <title>Beginner's Guide to JavaScript Operators - Part One</title>
      <author>Sumudu Siriwardana</author>
      <pubDate>Tue, 26 Oct 2021 15:29:58 +0000</pubDate>
      <link>https://dev.to/sumusiriwardana/beginners-guide-to-javascript-operators-part-one-eld</link>
      <guid>https://dev.to/sumusiriwardana/beginners-guide-to-javascript-operators-part-one-eld</guid>
      <description>&lt;p&gt;Have you thought about how we can tell our program to do a specific task? For example, how do we add two numbers together or compare two values?  &lt;/p&gt;

&lt;p&gt;If you remember your arithmetic lessons, we use the &lt;code&gt;+&lt;/code&gt; sign to add two numbers. We use this same sign in JavaScript for additions, and we call them operators.&lt;/p&gt;

&lt;p&gt;In this first article of the beginner's guide to JavaScript operators series, we will explore some of the basic operators in JavaScript! 😊&lt;/p&gt;

&lt;p&gt;Are you ready? 😉&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A5T9u-bM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634695857356/C7Z8grolw.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A5T9u-bM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634695857356/C7Z8grolw.gif" alt="are-you-ready.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check out the Table of Contents below to see what we will be going over in this article.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#what-are-operators-and-operands"&gt;What are operators and operands?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#arithmetic-operators"&gt;Arithmetic Operators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#assignment-operators"&gt;Assignment Operators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#operator-precedence"&gt;Operator Precedence&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-are-operators-and-operands"&gt;
  &lt;/a&gt;
  What are operators and operands?
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;An operator performs some operation on single or multiple operands (data values) and produces a result.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What does this mean? &lt;/p&gt;

&lt;p&gt;Let's look at the below example:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;2 + 3 = 5&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here, we have to add &lt;code&gt;2&lt;/code&gt; and &lt;code&gt;3&lt;/code&gt; to get the final value. So we are using &lt;code&gt;+&lt;/code&gt; to add these two values. And the final value is &lt;code&gt;5&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;In the above example, the &lt;code&gt;+&lt;/code&gt; sign performs an arithmetic operation to add these two values. So this &lt;code&gt;+&lt;/code&gt; sign is the &lt;strong&gt;operator&lt;/strong&gt; here. In modern programming languages, we use this &lt;code&gt;+&lt;/code&gt; sign to add two values. &lt;/p&gt;

&lt;p&gt;An operand is a data value that the operator will carry out the actions. It is the values on which we operate. So, in the above example, &lt;code&gt;2&lt;/code&gt; and &lt;code&gt;3&lt;/code&gt; are &lt;strong&gt;operands&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6onQZ7sb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634696119802/opqnLtAOv.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6onQZ7sb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634696119802/opqnLtAOv.gif" alt="addition.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are &lt;em&gt;binary&lt;/em&gt; operators, &lt;em&gt;unary&lt;/em&gt; operators, and a &lt;em&gt;ternary&lt;/em&gt; operator in JavaScript. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Binary&lt;/em&gt; operators have two values or operands, that one value comes before the operator, and one comes after the operator. For example, &lt;code&gt;1 + 2&lt;/code&gt; is a binary operator. So &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;2&lt;/code&gt; are the operands, and &lt;code&gt;+&lt;/code&gt; is the operator here. &lt;/p&gt;

&lt;p&gt;There is only one operand in &lt;em&gt;unary&lt;/em&gt; operators. We place the operand before or after the operator.  &lt;code&gt;x++&lt;/code&gt; is an example of the unary operator. We can see only one operand here, which comes before the operator. Don't worry if you don't understand this syntax. Let's come back to this in a later section in this post. &lt;/p&gt;

&lt;p&gt;The &lt;em&gt;ternary&lt;/em&gt; operator has three operands. It is also known as a "conditional" operator.  An example of a ternary operator is &lt;code&gt;age &amp;gt;= 18 ? "can drive" : "can't drive";&lt;/code&gt;. We will dive into ternary operators later in this post.  &lt;/p&gt;

&lt;p&gt;Alright! I hope now you understand what's an operator and what's an operand. You are going to hear these two names many times in this post 😄&lt;/p&gt;

&lt;p&gt;JavaScript supports various operators, and we will be exploring six types of operators, which are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Arithmetic Operators&lt;/li&gt;
&lt;li&gt;Assignment Operators&lt;/li&gt;
&lt;li&gt;Comparison Operators&lt;/li&gt;
&lt;li&gt;Logical Operators&lt;/li&gt;
&lt;li&gt;Ternary Operators&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;typeof&lt;/code&gt; Operator&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this article, we will learn about Arithmetic and assignment operators, and we will go through the rest in the second part of this series. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#arithmetic-operators"&gt;
  &lt;/a&gt;
  Arithmetic Operators
&lt;/h2&gt;

&lt;p&gt;We use arithmetic operators to do mathematical operations like addition, subtraction, multiplication, division, etc. It simply takes numerical values as the operands, performs an arithmetic operation, and returns a numerical value. &lt;/p&gt;

&lt;p&gt;Let's look at some of the arithmetic operators in javaScript in the below list. &lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Operator Name&lt;/th&gt;
&lt;th&gt;Operator  symbol&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;let x = 10, y = 5&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Addition&lt;/td&gt;
&lt;td&gt;&lt;code&gt;+&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Adds two numeric operands.&lt;/td&gt;
&lt;td&gt;&lt;code&gt;x + y = 15&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Subtraction&lt;/td&gt;
&lt;td&gt;&lt;code&gt;-&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Subtract right operand from left operand.&lt;/td&gt;
&lt;td&gt;&lt;code&gt;x - y = 5&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Multiplication&lt;/td&gt;
&lt;td&gt;&lt;code&gt;*&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Multiply two numeric operands.&lt;/td&gt;
&lt;td&gt;&lt;code&gt;x * y = 50&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Division&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Divide left operand by right operand.&lt;/td&gt;
&lt;td&gt;&lt;code&gt;x / y = 2&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Remainder&lt;/td&gt;
&lt;td&gt;&lt;code&gt;%&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Returns remainder of two operands.&lt;/td&gt;
&lt;td&gt;&lt;code&gt;x % y = 0&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Increment&lt;/td&gt;
&lt;td&gt;&lt;code&gt;++&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Increase operand value by one.&lt;/td&gt;
&lt;td&gt;&lt;code&gt;++x = 11&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Decrement&lt;/td&gt;
&lt;td&gt;&lt;code&gt;--&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Decrease value by one.&lt;/td&gt;
&lt;td&gt;&lt;code&gt;y-- = 5&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Exponentiation&lt;/td&gt;
&lt;td&gt;&lt;code&gt;**&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Raise one operand to the power of the other operand.&lt;/td&gt;
&lt;td&gt;&lt;code&gt;x ** y = 100000&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Now let's see some examples of the above operators.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;   &lt;span class="c1"&gt;// 10 + 5 --&amp;gt; 15&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;   &lt;span class="c1"&gt;// 10 - 5 --&amp;gt; 5&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;   &lt;span class="c1"&gt;// 10 * 5 --&amp;gt; 50&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;   &lt;span class="c1"&gt;// 10 / 5 --&amp;gt; 2&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;   &lt;span class="c1"&gt;// 10 % 3 --&amp;gt; 1&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;     &lt;span class="c1"&gt;// 10&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;     &lt;span class="c1"&gt;// 4&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// 5 * 5 * 5 --&amp;gt; 125 &lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Have you noticed that we used two different styles to write increment and decrement operators? Sometimes we used the operator after the operand &lt;code&gt;x++&lt;/code&gt;, sometimes before the operand &lt;code&gt;--y&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;For example, we used &lt;code&gt;x++&lt;/code&gt; in the example above, and the output result was &lt;code&gt;10&lt;/code&gt;. So what happens if we write it as &lt;code&gt;++x&lt;/code&gt;? Then the output result would be &lt;code&gt;11&lt;/code&gt;. Are you confused? Let's find out why this is happening. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#javascript-prefix-and-postfix"&gt;
  &lt;/a&gt;
  JavaScript prefix and postfix
&lt;/h3&gt;

&lt;p&gt;We can assign the JavaScript increment and decrement operators either before the operand or after the operand. If we assign &lt;code&gt;++&lt;/code&gt; or &lt;code&gt;--&lt;/code&gt; before the operand &lt;code&gt;(++x)&lt;/code&gt;, then we call it "prefix". If we assign it after the operand &lt;code&gt;(x++)&lt;/code&gt;, we call it "postfix". &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Using ++/-- After the Operand&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When we use the increment/decrement operator after the operand, the operator returns the variable value first, and then only the value will be incremented/decremented by &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let's look at the below example to understand this better.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Increment&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    &lt;span class="c1"&gt;// 2&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;      &lt;span class="c1"&gt;// 3&lt;/span&gt;

&lt;span class="c1"&gt;// Decrement&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    &lt;span class="c1"&gt;// 5&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;      &lt;span class="c1"&gt;// 4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example, the first values for &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; have the same original value. That's because the original value of the operand is returned before the operand is changed. If you checked the second console log results, which we use the variable the next time, you could see that we get the result including the &lt;code&gt;+1&lt;/code&gt; and &lt;code&gt;-1&lt;/code&gt; values. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Using ++/-- Before the Operand&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When we use the increment/decrement operator before the operand, It will increment the value of the operand even before returning its value. &lt;/p&gt;

&lt;p&gt;Let's look at the below example to understand this better.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Increment&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    &lt;span class="c1"&gt;// 3&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;      &lt;span class="c1"&gt;// 3&lt;/span&gt;

&lt;span class="c1"&gt;// Decrement&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    &lt;span class="c1"&gt;// 4&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;      &lt;span class="c1"&gt;// 4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see in the above example, the operation executes the addition and subtraction before returning the value. So you cannot see any difference in each log. This way, it helps us to check the resulting value of an operand instantly. &lt;/p&gt;

&lt;p&gt;Well, now you know how the increment and decrement actually work! &lt;/p&gt;

&lt;p&gt;Before moving into assignment operators, I would like to mention one more use case for the &lt;code&gt;+&lt;/code&gt; operator. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-the-raw-endraw-operator-to-concatenate-strings"&gt;
  &lt;/a&gt;
  Using the &lt;code&gt;+&lt;/code&gt; operator to concatenate strings
&lt;/h3&gt;

&lt;p&gt;You can use the &lt;code&gt;+&lt;/code&gt; operator to combine two or more JavaScript strings into one. The process of combining strings is called JavaScript string concatenation.&lt;/p&gt;

&lt;p&gt;Here is the syntax for the concatenation operator:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;'string1' + 'string2'&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now let's see how this is useful. Let's say that you have two names that you want to combine. One is the first name, and the other is the last name.  Let’s combine these two strings using the &lt;code&gt;+&lt;/code&gt; operator:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Smith&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// JohnSmith&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example, we created two variables for the first and the last name, and we combined the two names with the &lt;code&gt;+&lt;/code&gt; operator to print the full name. &lt;/p&gt;

&lt;p&gt;If you try this code, you will notice that there is no space between the two names. This is because these names are not automatically separated by a space. So if we want to keep a space between, we have to specify it by adding either a space after the first name, or space before the last name, or adding an empty string in between. Check the below example to understand this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//Space after the first name&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Smith&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// John Smith&lt;/span&gt;

&lt;span class="c1"&gt;//Space before the last name&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; Smith&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// John Smith&lt;/span&gt;

&lt;span class="c1"&gt;//Add empty string in between variables&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Smith&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// John Smith&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fC3UDeFY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634696366488/sZBBV-Yi8.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fC3UDeFY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634696366488/sZBBV-Yi8.jpeg" alt="javascript.jpeg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope that is clear! Let's move on to assignment operators 😊&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#assignment-operators"&gt;
  &lt;/a&gt;
  Assignment Operators
&lt;/h2&gt;

&lt;p&gt;An assignment operator assigns a value to the left operand based on the value of the right operand. Let's say that we want to assign the value &lt;code&gt;10&lt;/code&gt; to the variable &lt;code&gt;x&lt;/code&gt;. So we use the equal &lt;code&gt;(=)&lt;/code&gt; sign to assign this value, &lt;code&gt;x = 10&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Here's a list of assignment operators in JavaScript:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Operator Name&lt;/th&gt;
&lt;th&gt;Symbol&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Longform version&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;let x = 5, y = 10&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Assignment&lt;/td&gt;
&lt;td&gt;x = y&lt;/td&gt;
&lt;td&gt;Assigns right operand value to the left operand.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;x = 10;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Addition&lt;/td&gt;
&lt;td&gt;x += y&lt;/td&gt;
&lt;td&gt;Sums up left and right operand values and assigns the result to the left operand.&lt;/td&gt;
&lt;td&gt;x = x + y&lt;/td&gt;
&lt;td&gt;&lt;code&gt;x += 10;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Subtraction&lt;/td&gt;
&lt;td&gt;x -= y&lt;/td&gt;
&lt;td&gt;Subtract right operand value from the left operand value and assigns the result to the left operand.&lt;/td&gt;
&lt;td&gt;x = x - y&lt;/td&gt;
&lt;td&gt;&lt;code&gt;x -= 10;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Multiplication&lt;/td&gt;
&lt;td&gt;x *= y&lt;/td&gt;
&lt;td&gt;Multiply left and right operand values and assigns the result to the left operand.&lt;/td&gt;
&lt;td&gt;x = x * y&lt;/td&gt;
&lt;td&gt;&lt;code&gt;x *= 10;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Division&lt;/td&gt;
&lt;td&gt;x /= y&lt;/td&gt;
&lt;td&gt;Divide left operand value by right operand value and assign the result to the left operand.&lt;/td&gt;
&lt;td&gt;x = x / y&lt;/td&gt;
&lt;td&gt;&lt;code&gt;x /= 10;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Remainder&lt;/td&gt;
&lt;td&gt;x %= y&lt;/td&gt;
&lt;td&gt;Get the remainder of left operand divide by right operand and assign resulted remainder to the left operand.&lt;/td&gt;
&lt;td&gt;x = x % y&lt;/td&gt;
&lt;td&gt;&lt;code&gt;x %= 10;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;In the above list, you have seen that we have combined the assignment operator with arithmetic operators, for example, &lt;code&gt;x += 10&lt;/code&gt;. We call these &lt;em&gt;compound assignment operators&lt;/em&gt;. This is a shorthand version to its long-form version, which is &lt;code&gt;x = x + 10&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;It's better to get familiar with these compound assignment operators because you will be using them a lot in the future! 😊&lt;/p&gt;

&lt;p&gt;Now you must be wondering how these expressions should be evaluated when there are multiple operators in the same expression. &lt;/p&gt;

&lt;p&gt;For example, let's look at the below expression. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;(2 + 3) * 5 = ?&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Let's see how JavaScript understands which part of this mathematical expression should be evaluated first. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#operator-precedence"&gt;
  &lt;/a&gt;
  Operator Precedence
&lt;/h2&gt;

&lt;p&gt;If you remember your arithmetic lessons, you might remember the acronym P.E.M.D.A.S (Please Excuse My Dear Aunt Sally). This acronym PEMDAS helps us to remember which part of our mathematical expression should be evaluated first.&lt;/p&gt;

&lt;p&gt;First, we work with what is inside the parenthesis, next exponents, then multiplication, then division, after that addition, and the last subtraction.&lt;/p&gt;

&lt;p&gt;So if we take the example, &lt;code&gt;(2 + 3) * 5 = ?&lt;/code&gt;, since the &lt;code&gt;2 + 3&lt;/code&gt; is within parenthesis, we add these two numbers together, which gives us &lt;code&gt;5&lt;/code&gt;. Then we take that result of &lt;code&gt;5&lt;/code&gt; and multiply it by &lt;code&gt;5&lt;/code&gt;. So the final result is &lt;code&gt;25&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So in JavaScript, we have the same way of evaluating expressions with well-defined operator precedence. &lt;/p&gt;

&lt;p&gt;You can use the  &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence"&gt;MDN document&lt;/a&gt; to check the operator precedence table. The MDN document has listed down all the operators with their precedence and associativity.&lt;/p&gt;

&lt;p&gt;If you wonder what the meaning of associativity is, it tells us the direction of evaluating the expression. For example, if you look at the table on the MDN document, you can see that under the associativity column, it tells us the direction ( ‘left to right’ ) for some operators. This is very helpful when two operators have the same level of precedence.&lt;/p&gt;

&lt;p&gt;We have &lt;code&gt;+&lt;/code&gt; and &lt;code&gt;-&lt;/code&gt; in the same expression, then the expression is evaluated left to right. Let's check the below examples.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// 6&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// 4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example, the first expression first calculates the &lt;code&gt;5 + 3&lt;/code&gt;, and then &lt;code&gt;2&lt;/code&gt; is subtracted from that result. So it does the calculation from left to right. The second expression evaluates in the same way. &lt;/p&gt;

&lt;p&gt;You don't have to remember each and every operator's precedence by heart, but having a strong understanding of how the precedence works is crucial for your programming journey. &lt;/p&gt;

&lt;p&gt;Alright, that's it for the day! 🤗&lt;/p&gt;

&lt;p&gt;I hope now you have a good understanding of Arithmetic operators, assignment operators, and operator precedence.&lt;/p&gt;

&lt;p&gt;In the second part of this two-part series, we will be going over the following operators:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Comparison Operators&lt;/li&gt;
&lt;li&gt;Logical Operators&lt;/li&gt;
&lt;li&gt;Ternary Operators&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;typeof&lt;/code&gt; Operator&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Until that, you can check out this JavaScript operators cheatsheet 😊&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pcS3ml7u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634819327165/vE9vrNwmf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pcS3ml7u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634819327165/vE9vrNwmf.png" alt="Screenshot 2021-10-21 at 17.57.32.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RZv43Bo1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634697373133/jgPGVQlyr.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RZv43Bo1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634697373133/jgPGVQlyr.gif" alt="see-ya.gif"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;This article was originally published on  &lt;a href="https://dasha.ai/en-us/blog/beginners-guide-js-operators-part-1"&gt;Dasha&lt;/a&gt; &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>🔥 Vue Tips #31: The limitations of props</title>
      <author>Michael Thiessen</author>
      <pubDate>Tue, 26 Oct 2021 15:14:51 +0000</pubDate>
      <link>https://dev.to/michaelthiessen/vue-tips-31-the-limitations-of-props-36bh</link>
      <guid>https://dev.to/michaelthiessen/vue-tips-31-the-limitations-of-props-36bh</guid>
      <description>&lt;p&gt;&lt;em&gt;This newsletter was sent out to my list on October 20, 2021. &lt;a href="https://michaelnthiessen.com/newsletter"&gt;Sign up here&lt;/a&gt; to get emails like this each week!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As always, here are some tips.&lt;/p&gt;

&lt;p&gt;Enjoy.&lt;/p&gt;

&lt;p&gt;— Michael&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#static-and-dynamic-classes"&gt;
  &lt;/a&gt;
  🔥 Static and dynamic classes
&lt;/h2&gt;

&lt;p&gt;We can add static &lt;em&gt;and&lt;/em&gt; dynamic classes to an element at the same time:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt;
    &lt;span class="na"&gt;v-for=&lt;/span&gt;&lt;span class="s"&gt;"item in list"&lt;/span&gt;
    &lt;span class="na"&gt;:key=&lt;/span&gt;&lt;span class="s"&gt;"item.id"&lt;/span&gt;
    &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"always-here"&lt;/span&gt;
    &lt;span class="na"&gt;:class=&lt;/span&gt;&lt;span class="s"&gt;"item.selected &amp;amp;&amp;amp; 'selected'"&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    {{ item.name }}
  &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This lets you apply basic styling through static classes, and then dynamically add other styles as you need them.&lt;/p&gt;

&lt;p&gt;You can also achieve the same thing when using an &lt;code&gt;Object&lt;/code&gt; or &lt;code&gt;Array&lt;/code&gt; with dynamic classes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt;
    &lt;span class="na"&gt;v-for=&lt;/span&gt;&lt;span class="s"&gt;"item in list"&lt;/span&gt;
    &lt;span class="na"&gt;:key=&lt;/span&gt;&lt;span class="s"&gt;"item.id"&lt;/span&gt;
    &lt;span class="na"&gt;:class=&lt;/span&gt;&lt;span class="s"&gt;"{
      'always-here': true,
      selected: item.selected,
    }"&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    {{ item.name }}
  &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or with an &lt;code&gt;Array&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt;
    &lt;span class="na"&gt;v-for=&lt;/span&gt;&lt;span class="s"&gt;"item in list"&lt;/span&gt;
    &lt;span class="na"&gt;:key=&lt;/span&gt;&lt;span class="s"&gt;"item.id"&lt;/span&gt;
    &lt;span class="na"&gt;:class=&lt;/span&gt;&lt;span class="s"&gt;"[
      'always-here',
      item.selected &amp;amp;&amp;amp; 'selected',
    ]"&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    {{ item.name }}
  &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I prefer splitting them out into &lt;code&gt;class&lt;/code&gt; and &lt;code&gt;:class&lt;/code&gt; bindings though, since it makes the code clearer. It also makes it less likely to be broken when refactored!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-limitations-of-props"&gt;
  &lt;/a&gt;
  🔥 The limitations of props
&lt;/h2&gt;

&lt;p&gt;Props are useful, but they have two glaring issues:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Impossible to pass markup*&lt;/li&gt;
&lt;li&gt;Not that flexible&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;*not technically impossible, but not something you want to do.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The solution to these two problems is the same, but we'll get there in a second.&lt;/p&gt;

&lt;p&gt;Many components you create are &lt;strong&gt;contentless components&lt;/strong&gt;. They provide a container, and you have to supply the content. Think of a button, a menu, an accordion, or a card component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;Card&lt;/span&gt; &lt;span class="na"&gt;title=&lt;/span&gt;&lt;span class="s"&gt;"Shrimp Tempura"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"picOfShrimp.jpg"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Here are some words about tempura.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;How can you go wrong with fried food?&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"www.michaelnthiessen.com/shrimp-tempura"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    Read more about Shrimp Tempura
  &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/Card&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can often pass this content in as a regular &lt;code&gt;String&lt;/code&gt;. But many times you want to pass in a whole chunk of HTML, maybe even a component or two.&lt;/p&gt;

&lt;p&gt;You can't do that with props.*&lt;/p&gt;

&lt;p&gt;&lt;em&gt;*again, yes, you could do this, but you'll definitely regret it.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Props also require that you &lt;strong&gt;plan for all future use cases&lt;/strong&gt; of the component. If your &lt;code&gt;Button&lt;/code&gt; component only has two values for &lt;code&gt;type&lt;/code&gt;, you can't just use a third without modifying the &lt;code&gt;Button&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- You just have to believe it will work --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;Button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"AWESOME"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Button.vue&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="c1"&gt;// Unfortunately, 'AWESOME' doesn't work here :/&lt;/span&gt;
      &lt;span class="na"&gt;validator&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;primary&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;secondary&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I'm not a psychic, and I'm guessing you aren't either.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The solution to these problems?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I think I gave it away with my card example above...&lt;/p&gt;

&lt;p&gt;..slots! 🎰&lt;/p&gt;

&lt;p&gt;Slots allow you to pass in whatever markup and components you want, and they also are fairly open-ended, giving you lots of flexibility. This is why in many cases, slots are simply better than props.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-photoshop-plugin-with-vue"&gt;
  &lt;/a&gt;
  📜 A photoshop plugin with Vue!?
&lt;/h2&gt;

&lt;p&gt;Last week I shared an article on creating a VS Code extension.&lt;/p&gt;

&lt;p&gt;Now we break out of the web world entirely, and see how we can create a plugin for Photoshop.&lt;/p&gt;

&lt;p&gt;I had no idea this was even possible!&lt;/p&gt;

&lt;p&gt;Read it now: &lt;a href="https://medium.com/adobetech/make-your-first-plugin-with-vue-js-for-photoshop-and-adobe-xd-7af094c69aa5"&gt;Make Your First Plugin with Vue JS for Photoshop and Adobe XD&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%F0%9F%97%9E-vuejs-london-is-today-tomorrow"&gt;
  &lt;/a&gt;
  🗞 Vue.js London is today + tomorrow!
&lt;/h2&gt;

&lt;p&gt;Quick, don't miss out on some amazing talks at &lt;a href="https://vuejs.london/"&gt;Vue.js Conference (London)&lt;/a&gt; — happening right now!&lt;/p&gt;

&lt;p&gt;Conferences are an amazing place to learn and connect with other Vue devs.&lt;/p&gt;

&lt;p&gt;We're slowly starting to see some more in-person events, along with lots of virtual ones too.&lt;/p&gt;

&lt;p&gt;Here are some upcoming conferences:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.vuetoronto.com/"&gt;VueConf Toronto&lt;/a&gt; — November 22-23 — free + online&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.vuejs.amsterdam/"&gt;Vuejs Global (Amsterdam)&lt;/a&gt; — February 10-11, 2022 — Amsterdam&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(Let me know if I've missed any.)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#brute-force"&gt;
  &lt;/a&gt;
  💬 Brute force
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;When in doubt, use brute force. — Steve McConnell&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I'm often just not clever enough to come up with a clever solution.&lt;/p&gt;

&lt;p&gt;But cleverness isn't the point of software development.&lt;/p&gt;

&lt;p&gt;It's developing software &lt;em&gt;that works&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#spacedrepetition-6-levels-of-reusability"&gt;
  &lt;/a&gt;
  🧠 Spaced-repetition: 6 Levels of Reusability
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;The best way to commit something to long-term memory is to periodically review it, gradually increasing the time between reviews 👨‍🔬&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Actually remembering these tips is much more useful than just a quick distraction, so here's a tip from a couple weeks ago to jog your memory.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;My course on &lt;a href="//michaelnthiessen.com/reusable-components"&gt;reusable components&lt;/a&gt; covers this framework, which outlines six different levels of reusability that you can use in your components.&lt;/p&gt;

&lt;p&gt;Here are the six levels of reusability:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Templating&lt;/strong&gt; — Reusing code by wrapping it up inside of a component&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Configuration&lt;/strong&gt; — Using configuration props to allow for varying behaviour&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Adaptability&lt;/strong&gt; — Allowing components to become future-proof&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Inversion&lt;/strong&gt; — Letting other components control the process&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Extension&lt;/strong&gt; — Using reusability throughout our component&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Nesting&lt;/strong&gt; — Creating powerful hierarchies of components&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I cover this in more detail in &lt;a href="https://michaelnthiessen.com/6-levels-of-reusability"&gt;this excerpt from the course&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#exclusive-tips-and-insights-every-week"&gt;
  &lt;/a&gt;
  Exclusive tips and insights every week
&lt;/h2&gt;

&lt;p&gt;Join 8335 other Vue devs and &lt;a href="//michaelnthiessen.com/newsletter"&gt;get exclusive tips and insights&lt;/a&gt; like these delivered straight to your inbox, every week.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You have great content in your emails. I seriously learn something from every one of them. — Titus Decali&lt;/p&gt;

&lt;p&gt;Thanks for another beautiful tip 🙏 — Victor Onuoha&lt;/p&gt;

&lt;p&gt;Loving these, and the spaced repetition — Mark Goldstein&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="//michaelnthiessen.com/newsletter"&gt;Sign up here&lt;/a&gt;&lt;/p&gt;

</description>
      <category>vue</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Is it possible to have a grid inside a multi-select dropdown? Preferably in Angular</title>
      <author>raj-dcs</author>
      <pubDate>Tue, 26 Oct 2021 14:50:38 +0000</pubDate>
      <link>https://dev.to/rajkumarpativada/is-it-possible-to-have-a-grid-inside-a-multi-select-dropdown-preferably-in-angular-4ja</link>
      <guid>https://dev.to/rajkumarpativada/is-it-possible-to-have-a-grid-inside-a-multi-select-dropdown-preferably-in-angular-4ja</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rQ0JmX6F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2f5cjaoib6m2gow2qqs8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rQ0JmX6F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2f5cjaoib6m2gow2qqs8.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have a form with a multiselect dropdown, when the dropdown is opened, I want to show a grid with multiple columns and user can select multiple rows from the grid.&lt;/p&gt;

&lt;p&gt;Any help is really appreciated. Thank you.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>webdev</category>
      <category>html</category>
    </item>
    <item>
      <title>React NodeJS Purity - Open-source Full-Stack Seed Project</title>
      <author>Sm0ke</author>
      <pubDate>Tue, 26 Oct 2021 14:39:47 +0000</pubDate>
      <link>https://dev.to/sm0ke/react-nodejs-purity-open-source-full-stack-seed-project-3l92</link>
      <guid>https://dev.to/sm0ke/react-nodejs-purity-open-source-full-stack-seed-project-3l92</guid>
      <description>&lt;p&gt;Hello Coders! &lt;/p&gt;

&lt;p&gt;This article presents an &lt;code&gt;open-source&lt;/code&gt; full-stack project crafted on top of a pixel-perfect Chakra UI design using &lt;a href="https://appseed.us/product/node-js-react-purity-dashboard"&gt;React and Node JS&lt;/a&gt;. &lt;strong&gt;Purity Dashboard&lt;/strong&gt; can be downloaded from Github under the MIT license and used for unlimited hobby &amp;amp; commercial projects.  The product is built in two-tier pattern where the &lt;strong&gt;React&lt;/strong&gt; UI is decoupled from the backend and &lt;code&gt;communicates securely using JWT tokens&lt;/code&gt; managed by the &lt;strong&gt;Node JS Backend&lt;/strong&gt;. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Thanks for reading!&lt;/em&gt; - Content provided by &lt;strong&gt;&lt;a href="https://appseed.us/"&gt;App Generator&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;ul&gt;
&lt;li&gt;✨ &lt;a href="https://appseed.us/product/node-js-react-purity-dashboard"&gt;React Purity Dashboard&lt;/a&gt; - product page&lt;/li&gt;
&lt;li&gt;✨ &lt;a href="https://node-js-react-purity-dashboard.appseed-srv1.com/#/auth/signin"&gt;React Purity Dashboard&lt;/a&gt; - LIVE Demo&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zERSCZu3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i3mak7lhyrgbbpu4hmpf.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zERSCZu3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i3mak7lhyrgbbpu4hmpf.gif" alt="React Node JS - Purity Dashboard, open-source project."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#product-features"&gt;
  &lt;/a&gt;
  ✨ Product Features
&lt;/h2&gt;

&lt;p&gt;This full-stack ready seed product comes with a few useful features out-of-the-box that might help beginners, and not only, to code and deliver faster a new end-product using modern technologies.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Modern UI - &lt;strong&gt;Purity Dashboard&lt;/strong&gt;, crafted by Creative-Tim&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;JWT Authentication Flow&lt;/code&gt; - Login, Logout, Register methods&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Production-ready API Server&lt;/code&gt; - Node JS/Express&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Docker support&lt;/code&gt; for backend and the frontend&lt;/li&gt;
&lt;li&gt;Free support via Github (issues tracker) and &lt;a href="https://discord.gg/fZC6hup"&gt;Discord&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Purity UI Dashboard&lt;/strong&gt; is built with over 70 frontend individual elements, like buttons, inputs, navbars, nav tabs, cards, or alerts, giving you the freedom of choosing and combining. All components can take variations in color, that you can easily modify using Chakra's style props.&lt;/p&gt;

&lt;p&gt;Designed for those who like modern UI elements and beautiful websites, Purity UI Dashboard is ready to help you create stunning apps and dashboards. This Free Chakra UI Dashboard is coming with prebuilt design blocks, so the development process is seamless, switching from our pages to the real website is very easy to be done.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Purity React Dashboard - User Profile&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--drXReiTC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zirbsy7s3jovo26fawra.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--drXReiTC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zirbsy7s3jovo26fawra.png" alt="React Node JS Purity - Profile Page."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Purity React Dashboard - Billing Page&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--StxasSaT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tib5tfi6yjv977dte5mn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--StxasSaT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tib5tfi6yjv977dte5mn.png" alt="React Node JS Purity - Billing Page"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#how-to-use-the-product"&gt;
  &lt;/a&gt;
  ✨ How to use the product
&lt;/h2&gt;

&lt;p&gt;This open-source product is a complete full-stack seed product that covers all layers from the UI to the database using a two-tier architecture:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;React Frontend (Purity Template)&lt;/li&gt;
&lt;li&gt;JWT Authentication: users can register, Sign IN, and logout&lt;/li&gt;
&lt;li&gt;Node JS Backend:  responsible with persistence&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In order to use the product, we need to build both parts: the &lt;code&gt;API backend&lt;/code&gt; and the &lt;code&gt;React Frontend&lt;/code&gt;. Both parts are already configured to work and communicate using compatible settings. &lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#start-the-backend-server"&gt;
  &lt;/a&gt;
  Start the Backend Server
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Step #1&lt;/strong&gt; - Clone the &lt;a href="https://github.com/app-generator/api-server-nodejs"&gt;Node JS Backend&lt;/a&gt; from Github&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/app-generator/api-server-nodejs.git
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;api-server-nodejs
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step #2&lt;/strong&gt; - Install dependencies via NPM or Yarn&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npm i
// OR
&lt;span class="nv"&gt;$ &lt;/span&gt;yarn
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step #3&lt;/strong&gt; - Run the SQLite migration via TypeORM&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ yarn typeorm migration:run
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step #4&lt;/strong&gt; - Start the API server (development mode)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npm dev
// OR
&lt;span class="nv"&gt;$ &lt;/span&gt;yarn dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step #5&lt;/strong&gt; - Production Build (files generated in &lt;code&gt;build&lt;/code&gt; directory)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npm build
// OR
&lt;span class="nv"&gt;$ &lt;/span&gt;yarn build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step #6&lt;/strong&gt; - Start the API server for production (files served from &lt;code&gt;build/index.js&lt;/code&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npm start
// OR
&lt;span class="nv"&gt;$ &lt;/span&gt;yarn start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this point we should be able to test the API server using POSTMAN or any other command line tool like &lt;code&gt;curl&lt;/code&gt; to create and authenticate new users by sending requests with bellow signatures: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Register&lt;/strong&gt; - &lt;code&gt;api/users/register&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;POST api/users/register
Content-Type: application/json

{
    "username":"test",
    "password":"pass", 
    "email":"test@appseed.us"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Login&lt;/strong&gt; - &lt;code&gt;api/users/login&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;POST /api/users/login
Content-Type: application/json

{
    "password":"pass", 
    "email":"test@appseed.us"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#start-the-react-ui"&gt;
  &lt;/a&gt;
  Start the React UI
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #1&lt;/strong&gt; - Clone &lt;a href="https://github.com/app-generator/react-purity-ui-dashboard"&gt;Purity React&lt;/a&gt; (from Github)&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/app-generator/react-purity-ui-dashboard.git
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;react-purity-ui-dashboard
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #2&lt;/strong&gt; - Install dependencies via NPM or yarn&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npm i
// OR
&lt;span class="nv"&gt;$ &lt;/span&gt;yarn
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #3&lt;/strong&gt; - Start in development mode&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npm run start 
// OR
&lt;span class="nv"&gt;$ &lt;/span&gt;yarn start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;Configure the backend server&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The product comes with a usable JWT Authentication flow that provides only the basic requests: login/logout/register. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;API Server URL&lt;/strong&gt; - &lt;code&gt;src/config/constant.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="na"&gt;API_SERVER&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http://localhost:5000/api/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;  &lt;span class="c1"&gt;// &amp;lt;-- The magic line&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once the React UI is up &amp;amp; running, we should see the login page: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3Nuly-7r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cf7lisv0m1zqba0yx7d6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3Nuly-7r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cf7lisv0m1zqba0yx7d6.png" alt="React Node Purity Dashboard - Login Page."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Thanks for Reading! For more resources, feel free to access: &lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;👉 More &lt;a href="https://appseed.us/apps/react"&gt;React Apps&lt;/a&gt; - index provided by AppSeed&lt;/li&gt;
&lt;li&gt;👉 Free &lt;a href="https://dev.to/sm0ke/react-dashboards-open-source-apps-1c7j"&gt;React Dashboards&lt;/a&gt; - a popular article published on Dev &lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>react</category>
      <category>fullstack</category>
      <category>opensource</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How I shifted to Notion for my blog</title>
      <author>Abhiraj Bhowmick</author>
      <pubDate>Tue, 26 Oct 2021 14:39:00 +0000</pubDate>
      <link>https://dev.to/abhirajb/how-i-shifted-to-notion-for-my-blog-4lpa</link>
      <guid>https://dev.to/abhirajb/how-i-shifted-to-notion-for-my-blog-4lpa</guid>
      <description>&lt;p&gt;For the last few days, some of my blog posts have blown up and have been loved by the community, all thanks to you guys, and so I have been thinking of creating an independent site for my blogs.&lt;/p&gt;

&lt;p&gt;Just to be clear, I use &lt;a href="https://dev.to/abhirajb"&gt;Dev.to&lt;/a&gt; primarily then repost them to &lt;a href="https://abhirajb.hashnode.dev"&gt;Hashnode&lt;/a&gt; and &lt;a href="https://tealfeed.com/rainboestrykr"&gt;Tealfeed&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let's face it, developing sites and maintaining them is hard. I tried &lt;a href="https://stackbit.com"&gt;Stackbit&lt;/a&gt;, &lt;a href="https://www.netlifycms.org/"&gt;Netlify CMS&lt;/a&gt; and even &lt;a href="https://jamstackthemes.dev"&gt;Jamstack&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;None of these seemed to match my taste and meet my requirements.&lt;/p&gt;

&lt;p&gt;Then I recalled my post a week ago.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/abhirajb" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7f8bAbFa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--3oC9sq3B--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/685929/5c0c6258-ee72-42ae-b8df-6a2eee3f6988.png" alt="abhirajb"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/abhirajb/no-code-development-for-dummies-291o" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;No-code development for dummies&lt;/h2&gt;
      &lt;h3&gt;Abhiraj Bhowmick ・ Oct 15 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#nocode&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;Notion came to my rescue.&lt;/p&gt;

&lt;p&gt;Now all I had to do was find the right content management system, per se, to host and manage my posts.&lt;/p&gt;

&lt;p&gt;Finally, I came across &lt;a href="https://mdx.one"&gt;MDX.one&lt;/a&gt;, an amazing tool to use Notion for blog.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--MbEsfp3V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1277492092676145152/kmEJVcrt_normal.jpg" alt="Bhanu Teja P profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Bhanu Teja P
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/pbteja1998"&gt;@pbteja1998&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Finally launching &lt;a href="&amp;lt;a%20href="&gt;MDX.one&lt;/a&gt;'&amp;gt;MDX.one 🚀🚀&lt;br&gt;&lt;br&gt;Create your own notion-based blog with &lt;a href="&amp;lt;a%20href="&gt;MDX.one&lt;/a&gt;'&amp;gt;MDX.one.&lt;br&gt;&lt;br&gt;Just sent the email to all the 250 people that are on the waitlist🤞&lt;br&gt;&lt;br&gt;Going to sleep now. I am a little exhausted. Hope that nothing breaks while I am away 😬
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      10:16 AM - 21 Jun 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1406918837283344385" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1406918837283344385" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1406918837283344385" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;
&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xTJCxg4h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xi1t8orp7hm8d3z338k2.png" alt="landing"&gt;

&lt;p&gt;Now this is an awesome no-code tool for Notion&lt;br&gt;
It has a pre-built template that you duplicate and then use to your wish.&lt;/p&gt;

&lt;p&gt;The template is basically Notion's database template but supercharged. &lt;/p&gt;

&lt;p&gt;There you can upload new blogs and change their settings.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1JFZY5J5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/0VSt05V/Abhiraj-s-Tech-B.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1JFZY5J5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/0VSt05V/Abhiraj-s-Tech-B.png" alt="Blog-dashboard"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The general settings of your blog is available on the general settings page. It is the place where you change the basic things such as making a Call-to-action button and uploading a logo. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IgRMF8NN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/SyzvbxP/Settings.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IgRMF8NN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/SyzvbxP/Settings.png" alt="settings"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Considering the fact that this is the most easy-to-use tool for its category which already has a few competitors in the market right now, I would recommend this to anyone willing to create a blog without coding a bit. &lt;br&gt;
The pricing of mdx.one is also quite flexible.&lt;br&gt;
All the basic features needed to run a blog are free of cost. When you feel like upscaling, it will provide you premium features at low cost.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G0QGHM2u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f8jv1pzd3z1tywtyb0jw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G0QGHM2u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f8jv1pzd3z1tywtyb0jw.png" alt="pricing"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Henceforth, from today, I am shifting my blog to &lt;a href="https://abhiraj.mdx.one"&gt;abhiraj.mdx.one&lt;/a&gt; and I will use Dev.to and others for specific articles and reposting. Hope to see you there. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_5JmqxaR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w3ht7yp5axmhr5cnw47y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_5JmqxaR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w3ht7yp5axmhr5cnw47y.png" alt="my blog"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Thanks for reading.&lt;br&gt;
Until next time,&lt;br&gt;
&lt;a href="https://abhiraj.glitch.me"&gt;Abhiraj&lt;/a&gt;&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>"Don't Make Me Think!" | 4 Ways to Put Developer Experience First When Writing Code</title>
      <author>Keyhole Software</author>
      <pubDate>Tue, 26 Oct 2021 14:38:25 +0000</pubDate>
      <link>https://dev.to/keyholesoftwareteam/dont-make-me-think-4-ways-to-put-developer-experience-first-when-writing-code-4l6g</link>
      <guid>https://dev.to/keyholesoftwareteam/dont-make-me-think-4-ways-to-put-developer-experience-first-when-writing-code-4l6g</guid>
      <description>&lt;p&gt;&lt;strong&gt;This article illustrates four high-level ways of elevating the developer experience to the forefront in coding, helping us&lt;strong&gt; grok more while thinking less.&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I love &lt;a href="https://stackoverflow.com/questions?tab=Frequent"&gt;Stack Overflow 🔗&lt;/a&gt;. It allows me to offload the minutia and move on to bigger things.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Sometimes.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;And sometimes, my Codebase gently taps me on the shoulder... and piles the minutia right back on.  &lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hx-UWPlf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2vwg7hj97kzxi06pkq6w.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hx-UWPlf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2vwg7hj97kzxi06pkq6w.jpg" alt="Coding Steve Meme: Says he's got this, asks for help"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;"C'mon Codebase 🎨", I implore, "Don't make me think about this!"&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Long before I was offloading brainpower to Stack Overflow, I sought to offload it for my future self (ahem, and teammates of course). I have a book to thank for this. Steve Krug's &lt;a href="https://www.amazon.com/Dont-Make-Me-Think-Usability/dp/0321344758" rel="noopener noreferrer"&gt;"Don't Make Me Think" 🔗&lt;/a&gt;.  It's a critique of &lt;a href="https://keyholesoftware.com/wp-content/uploads/brewer-pied-piper.jpg" rel="noopener noreferrer"&gt;complex user interfaces 🎨&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Steve likes them simple and intuitive: the users' goals are evident and easily accomplished.&lt;/p&gt;

&lt;p&gt;Steve's adage--&lt;em&gt;"don't make me think"&lt;/em&gt;--also plays a fair critique of the code we write. We can take that adage and apply it as a &lt;em title="'Developer Experience First'"&gt;"DX First"&lt;/em&gt; approach to writing code. (An approach that admittedly should be sacrificed to UX or Performance Gods as needed.)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This post was originally published on the &lt;a href="https://keyholesoftware.com/2021/02/15/four-ways-to-put-developer-experience-first/"&gt;Keyhole Software employee blog&lt;/a&gt; by Ryan Brewer.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;Overview&lt;/h2&gt;

&lt;p&gt;The first two ways to put developer experience first, &lt;strong&gt;&lt;a href="#write-honest-code"&gt;Writing Honestly&lt;/a&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;a href="#get-to-the-point"&gt;Getting to the Point&lt;/a&gt;&lt;/strong&gt;, can be likened to the scientific concepts of accuracy and precision.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;When we're Writing Honestly&lt;/strong&gt;, &lt;em&gt;we're naming functions that perform their expected operations, and we're declaring variables that accurately represent the data they hold.&lt;/em&gt; &lt;strong&gt;When we're Getting to the Point&lt;/strong&gt;, &lt;em&gt;we're being precise, and we're minimizing the terrain others traverse when building mental maps of the code they've ventured into.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The third way of keeping mental overhead in check is to &lt;strong&gt;&lt;a href="#keep-with-conventions"&gt;Keep With Conventions&lt;/a&gt;&lt;/strong&gt;. All software has conventions. Sometimes a convention packs a magical punch. Other times it's much more mundane. &lt;em&gt;To thoughtlessly ignore these conventions is to leave others (including our future-selves) scratching our forehead.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Lastly, in the interest of developer experience, I argue our software products should &lt;a href="#leverage-open-source"&gt;&lt;strong&gt;Leverage Open-Source&lt;/strong&gt;&lt;/a&gt;. &lt;em&gt;With so many packages freely available and thousands of man-hours pumped into them, is it really worth reinventing the wheel?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The following examples are in JavaScript, though the patterns could apply to many languages.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id="write-honest-code"&gt;Write Honest Code&lt;/h2&gt;

&lt;p&gt;Writing honest code is a great way to ensure developer experience is put first in your code base.&lt;/p&gt;

&lt;p&gt;You may have heard the term radical candor. Someone at Google (Kim Scott) coined it a few years back in &lt;a href="https://www.youtube.com/watch?v=4yODalLQ2lM" rel="noopener noreferrer"&gt;her talk on management 🔗&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/4yODalLQ2lM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;In a nutshell, radical candor creates a workspace free of confusion and miscommunication. Managers are honest and frank. People know where they stand and what's expected of them.&lt;/p&gt;

&lt;p&gt;Now, imagine a radically candid codebase; code that tells you where it stands and what you can expect of it. Static typing can take you a long way, sure, but even better is simply naming things well.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Honest code &lt;a href="https://www.amazon.com/Stormlight-Archive-Am-Stick-T-Shirt/dp/B07VKY6SNG/ref=sr_1_6?dchild=1&amp;amp;qid=1612973558refinements=p_4%3ABrandon%2BSanderson&amp;amp;s=apparel&amp;amp;sr=1-6&amp;amp;customId=B075386ZHH&amp;amp;th=1" rel="noopener noreferrer"&gt;describes itself accurately 🎨&lt;/a&gt;.&lt;/strong&gt; Here are some tips for naming things more accurately.&lt;/p&gt;

&lt;h3&gt;1. Incorporate Common Verbs&lt;/h3&gt;

&lt;p&gt;First off, it's important to remember that certain verbs carry built-in expectations and can help reduce cognitive overhead. It often makes sense to springboard off your language's built-ins.&lt;/p&gt;

&lt;p&gt;For example, JavaScript has an &lt;code&gt;Array.find&lt;/code&gt; method, so when naming a method that figures out how to return something from an array, prefix it with the word "find". Below are some other examples.&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;
&lt;strong&gt;Is/Has&lt;/strong&gt; - signals a Boolean description of something
&lt;ul&gt;
    &lt;li&gt;
&lt;code&gt;form.isPristine&lt;/code&gt; or &lt;code&gt;form.hasChanged&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;/li&gt;

    &lt;li&gt;
&lt;strong&gt;Should/Will&lt;/strong&gt; - signals a side effect will occur

&lt;ul&gt;
    &lt;li&gt;
&lt;code&gt;shouldShowTitle &amp;amp;&amp;amp; &amp;lt;Title text={titleText} /&amp;gt;&lt;/code&gt; or &lt;code&gt;if (willValidate) validate(form);&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;/li&gt;

    &lt;li&gt;
&lt;strong&gt;Find&lt;/strong&gt; - finds an item in a collection

&lt;ul&gt;
    &lt;li&gt;&lt;code&gt;findAccountByType(AccountTypes.&lt;a href="https://keyholesoftware.com/wp-content/uploads/brewer-get-schwifty.jpg"&gt;SCHWIFTY 🎨&lt;/a&gt;)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;/li&gt;

    &lt;li&gt;
&lt;strong&gt;Get&lt;/strong&gt; - expect a function that returns a synchronous computation

&lt;ul&gt;
    &lt;li&gt;&lt;code&gt;getFriendlyErrorMessage(error)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;/li&gt;

    &lt;li&gt;
&lt;strong&gt;Fetch&lt;/strong&gt; - expect an async &lt;code&gt;GET&lt;/code&gt; network request

&lt;ul&gt;
    &lt;li&gt;&lt;code&gt;fetchAccounts(query)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;/li&gt;

    &lt;li&gt;
&lt;strong&gt;Save&lt;/strong&gt; - expect an async &lt;code&gt;POST/PUT/PATCH&lt;/code&gt; network request

&lt;ul&gt;
    &lt;li&gt;&lt;code&gt;saveAccount(params, data)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;/li&gt;

    &lt;li&gt;
&lt;strong&gt;Delete&lt;/strong&gt; - expect an async &lt;code&gt;DELETE&lt;/code&gt; network request

&lt;ul&gt;
    &lt;li&gt;&lt;code&gt;deleteAccount(params)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;/li&gt;

&lt;/ul&gt;

&lt;h3&gt;2. Create Context Chains&lt;/h3&gt;

&lt;p&gt;Secondly, name things so you form a link between where something gets made and where it gets used. It gives your fellow developer a quick heads up. Wield a context consistently enough, and you might forget you're in a dynamically typed language!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/** Good **/
class PayrollTable {
  // Consumers will get a certain shape when invoking PayrollTable.getColumnNames()
  getColumnNames() {}
}

class PayrollReport {
  // Here--because it's well named--we naturally expect that same shape!
  getPayrollTableColumnNames() {}
}

/** Bad **/
class ShadyPayrollReport {
  // But here... maybe this returns payroll table column names? Hmm, let's dig in and see...
  // if it does, we've clearly missed the opportunity to indicate it.
  getLabels() {}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;3. Be Descriptive and Brief&lt;/h3&gt;

&lt;p&gt;Third, try to be as concise but thorough as possible. Like both of my children, I love clarity &amp;amp; brevity equally--but I'll admit, clarity can be easier to get along with.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/** Bad **/
const o = {/* ... */} // a little too brief

/** Good **/
const options = {/* ... */} // that's better

/** Bad **/
PayrollTable.getPayrollTableColumnNames = () =&amp;gt; {/* ... */} // a bit too repetitive

/** Good **/
PayrollTable.getColumnNames = () =&amp;gt; {/* ... */} // noice!

/** Chaotic Good **/
const benefitGroupSourceHierarchyManagerModel = {/* ... */} // long ...but helpful if other managers are nearby
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;4. Be Mindful of Grammar&lt;/h3&gt;

&lt;p&gt;Last but not least, try to write with proper grammar. Turns out all those English classes in high school were worth it ... at least somewhat.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/**
 * Bad.
 * "This 'shouldWillConfirm' prop is likely just bad grammar...
 * but did [git blame] expect something mysteriously-meta here?
 * Bah! Let's dig in and make sure."
 */
&amp;lt;ConfirmRouteChange shouldWillConfirm={/* ??? */} /&amp;gt;

/**
 * Good.
 * "Clearly 'willConfirm' expects a Boolean."
 */
&amp;lt;ConfirmRouteChange willConfirm={formIsDirty} /&amp;gt;

/** Bad. Type is a collection but the name is singular. **/
const selectedTableRow = [{ /* ... */ }];

/** Good. **/
const selectedTableRows = [{ /* ... */ }];
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2 id="get-to-the-point"&gt;Get to the Point&lt;/h2&gt;

&lt;p&gt;Another way to put developer experience first is to strive to get to the point quickly and concisely.&lt;/p&gt;

&lt;p&gt;It sounds harsh, but there are many ways codebases can ramble. A rambling codebase is harder to follow and tends to waste everyone's time. No one likes it when an uninvited variable shows up at the party, and no one likes code indentation that resembles a HIIT workout. (And makes us sweat just as much!)&lt;/p&gt;

&lt;p&gt;Here are a few tips to help you avoid creating a rambling codebase.&lt;/p&gt;

&lt;h3&gt;1. Guard Clauses&lt;/h3&gt;

&lt;p&gt;Guard clauses can immediately burn cognitive weight. Use them generously!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/**
 * Bad.
 * After reading the whole function you learn it might simply return true.
 */
const optionIncludesInputValue = (option) =&amp;gt; {
  let isIncluded;

  if (this.inputValue) {
    const name = option.name.toLowerCase();
    const value = option.value.toLowerCase();
    const inputValue = this.inputValue.toLowerCase();

    isIncluded = name.includes(inputValue) || value.includes(inputValue);
  } else {
    isIncluded = true;
  }

  return isIncluded;
}

/**
* Good.
* The easy case is handled first. Plain and simple. And as an added bonus
* the rest of the function is no longer indented and flows more freely.
**/
const optionIncludesInputValue = (option) =&amp;gt; {
  if (!this.inputValue) {
    return true;
  }

  const name = option.name.toLowerCase();
  const value = option.value.toLowerCase();
  const inputValue = this.inputValue.toLowerCase();

  return name.includes(inputValue) || value.includes(inputValue);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;2. Keep Functions Short&lt;/h3&gt;

&lt;p&gt;If there are chunks of isolated logic in a function, consider extracting them into their own functions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/** 
 * Bad. 
 * A guard and two observers hinder 
 * the overall clarity of "setup".
 */
class Collection {
  setup() {
    if (![DataState.ERROR, DataState.UNSYNCED].includes(this.dataState)
      || this.readyHandler) {
      return;
    }

    if (this.urlDependent) {
      this.readyHandler = observe(endpoints, 'ready', (isReady) =&amp;gt; {
        if (isReady) {
          this.fetch();
        }
      }, true);
    } else {
      this.readyHandler = observe(url, 'params', (newParams) =&amp;gt; {
        const { collectionId } = newParams;
        if (!isNil(collectionId) &amp;amp;&amp;amp; collectionId !== this.id) {
          this.id = collectionId;
          this.fetch();
        }
      }, true);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/**
 * Good.
 * The "setup" implementation has been split into grokkable chunks.
 */
class Collection {
  setup() {
    if (this.hasFetchedData || this.readyHandler) {
      return;
    }

    this.readyHandler = this.urlDependent
      ? this.fetchOnUrlChanges()
      : this.fetchOnEndpointsReady();
  }

  get hasFetchedData() {
    return ![DataState.ERROR, DataState.UNSYNCED].includes(this.dataState);
  }

  fetchOnEndpointsReady() {
    return observe(endpoints, 'ready', (isReady) =&amp;gt; {
      if (isReady) {
        this.fetch();
      }
    }, true);
  }

  fetchOnUrlChanges() {
    return observe(url, 'params', (newParams) =&amp;gt; {
      const { collectionId } = newParams;
      if (!isNil(collectionId) &amp;amp;&amp;amp; collectionId !== this.id) {
        this.id = collectionId;
        this.fetch();
      }
    }, true);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;3. Keep Conditional Logic Lean&lt;/h3&gt;

&lt;p&gt;Conditional logic can quickly become long and tedios. Try to keep it to a minimum.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/**
 * Bad.
 * The fetch function is called under both conditions.
 * Look closely!  Its parameters are the only things that vary.
 */
const fetchJobs = (params, query) =&amp;gt; {
  if (query) {
    return fetchUrl(Url.JOBS, params, query);
  }
  return fetchUrl(Url.JOBS, params, params);
}

/**
 * Good.
 * Only the changing parts are within the conditional flow.
 * Since this also paired us down to a one-liner, we can
 * now leverage javascript's implicit return, leaving us with
 * even less code!
 */
const fetchJobs = (params, query) =&amp;gt;
  fetchUrl(Url.JOBS, params, query || params);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;4. Colocate or Barrel things&lt;/h3&gt;

&lt;p&gt;There are two popular ways of organizing modern projects: by architecture or by the business domain.&lt;/p&gt;

&lt;p&gt;Suppose you have a project architected with models, controllers, and views. A CLI tool might scaffold this project with the following (less than ideal) folder structure:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/** Bad. The business features of your site are spilled across the directory structure. */
- src
  |_ controllers
     |_ cart.js
     |_ product-listing.js
  |_ models
     |_ cart.js
     |_ product-listing.js
  |_ services
     |_ cart.js
  |_ views
     |_ cart.jsx
     |_ product-listing.jsx
     |_ splashPage.jsx
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The structure above might seem nice at first, but ultimately there's a more helpful way! &lt;strong&gt;Organize your code by the business domain.&lt;/strong&gt; With all of your app's features barreled together, it's easy to find a whole thing. You might even snag a glimpse into its complexity.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- src
  |_ cart
     |_ cart.model.js
     |_ cart.controller.js
     |_ cart.service.js
     |_ cart.view.jsx
  |_ product-listing
     |_ product-listing.controller.js
     |_ product-listing.model.js
     |_ product-listing.view.jsx
  |_ splash-page
     |_ splash-page.view.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In larger codebases, it can be helpful to use both approaches. High-level folder structures might organize files by feature and subfolders might then organize files by architecture.&lt;/p&gt;

&lt;h2 id="keep-with-conventions"&gt;Keep With Conventions&lt;/h2&gt;

&lt;p&gt;Along with Writing Honestly and Getting to the Point, Keeping with Conventions is another way to put developer experience first in your code.&lt;/p&gt;

&lt;p&gt;Almost a decade ago I read an article titled Idiomatic jQuery, written by a core contributor to the project. (Not &lt;a href="http://benalman.com/talks/idiomatic-jquery.html#1" rel="noopener noreferrer"&gt;Ben's article 🔗&lt;/a&gt;, but he is good too!) It convinced me that life is easier when we build things the way the author intended. &lt;strong&gt;Idiomatic programming is easier to grok, easier to explain, and easier to come back to.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Every platform is different, as are the conventions your app layers on top. The trick is to learn them--for the framework, for the library, and for the app.&lt;/p&gt;

&lt;p&gt;For example, there's a way the community writes Redux or Vuex. There's probably a style (or two) your app uses to write a component. The more we adhere to our conventions, the easier it is for everyone to step in and help.&lt;/p&gt;

&lt;p&gt;Like nifty outfits, conventions come in all shapes and sizes. Our best-dressed code will match our conventions. Try to resist breaking out that silly cowboy-coder hat we all keep.&lt;/p&gt;

&lt;p&gt;Conventions can be automated or managed through code reviews. Some typical ones include:&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;Linting styles
&lt;ul&gt;
    &lt;li&gt;It's better to be consistent than "right," even if it hurts. (&lt;a href="https://github.com/standard/semistandard" rel="noopener noreferrer"&gt;I guess we Dark Lords can get over it too! 🔗&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;




&lt;/li&gt;

    &lt;li&gt;A client-side app that favors models + components over just components, or vice versa&lt;/li&gt;

    &lt;li&gt;That framework you're using probably has an idiomatic way of using it&lt;/li&gt;

    &lt;li&gt;Decide to prefer using built-ins to libraries (or vice versa)

&lt;ul&gt;
    &lt;li&gt;Eg, using a library for async calls, instead of rolling your own&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From time to time, you might be faced with the decision to onboard a paradigm shift. A few years back, I convinced my team to bring TypeScript to our very large, established codebase. (After all, we can just sprinkle it in, right?) In hindsight, 7/10 teammates felt this was a poor decision, myself included. In our particular case, the added complexity and inconsistent adoption eclipsed the overall payoff.&lt;/p&gt;

&lt;p&gt;Fundamental shifts can introduce sustained drag on a team, and though often exciting, they might not be worth it.&lt;/p&gt;

&lt;h2 id="leverage-open-source"&gt;Leverage Open-Source&lt;/h2&gt;

&lt;p&gt;Finally, a great way to keep developer experience at the forefront is to leverage the open-source software out there.&lt;/p&gt;

&lt;p&gt;Writing software is fun, and it can be enticing to write a new, perfect low-level widget--even if it's been written before. (After all, that other widget has cruft to it, and isn't perfect for our needs!) Nevertheless, I encourage you to use open-source libraries instead.&lt;/p&gt;

&lt;p&gt;There are several reasons why open-source is often the right choice. First, time and money aren't spent reinventing the wheel and later, hardening it against defects. Popular open-source libraries can be readily trusted, having been pre-hardened by the community. Second, mature open-source libraries often accommodate a richer variety of implementation strategies, which in turn improves your own quality of life while working with them. Third, there's a strong chance you and your teammates have experience with the library and can shorten or skip the ramp-up time.&lt;/p&gt;

&lt;p&gt;When deciding what open-source to use, there is usually a tradeoff or two. Sometimes it's a tradeoff between usefulness and cruft. There's often an acceptable amount of uselessness everyone can live with.&lt;/p&gt;

&lt;p&gt;At other times you'll weigh utility against "hackiness." If it feels a library would lead to building Frankenstein's Monster, consider finding a lower-level abstraction to work with.&lt;/p&gt;

&lt;p&gt;Finally, you might face tradeoffs of time--both time to develop and time to maintain. When assessing this, you might consider your team's collective experience in one thing vs another or the impact of selecting a higher vs lower-level abstraction.&lt;/p&gt;

&lt;p&gt;Fortunately, the open-source ecosystem is diverse, and we can often find something suitable. Make it your go-to.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Writing code that won't make us think, unfortunately, requires some thought! In this article, I've outlined four approaches to help achieve this and put developer experience first in our code.&lt;/p&gt;

&lt;p&gt;How can you offload mental overhead in more ways than skillful Googling? Maybe you'll free up bandwidth by using an open-source library. Maybe you'll extract logic into another method, or take a bit more time to name something really well. Even though it can be hard, it's worth crafting something simple.&lt;/p&gt;

&lt;p&gt;These initial investments and iterations in developer experience can lead to future happiness, for you and your team. Will our code be perfect and extensible to all potential futures? Nope! But will it be easier to maintain? You bet! &lt;em&gt;You don't need to think about that!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;For more great tips on wrangling chaos, check out Gabe's article on &lt;a href="https://keyholesoftware.com/2020/11/12/refactoring-ugly-code-that-does-everything/" rel="noreferrer noopener"&gt;taking down God functions 🔗&lt;/a&gt;. (Spoiler, they can fall to mere gritty mortals like us.)&lt;/em&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>cleancode</category>
      <category>bestpractices</category>
      <category>programming</category>
    </item>
    <item>
      <title>Exploring the EyeDropper API</title>
      <author>Cory LaViska</author>
      <pubDate>Tue, 26 Oct 2021 14:34:12 +0000</pubDate>
      <link>https://dev.to/claviska/exploring-the-eyedropper-api-4dk7</link>
      <guid>https://dev.to/claviska/exploring-the-eyedropper-api-4dk7</guid>
      <description>&lt;p&gt;The &lt;a href="https://github.com/WICG/eyedropper-api"&gt;EyeDropper API&lt;/a&gt; has landed in &lt;a href="https://www.chromestatus.com/feature/6304275594477568"&gt;Chrome and Edge 95&lt;/a&gt;! This is a simple promise-based API that lets you select a color from anywhere on the screen. Let's dive in and see how it works.&lt;/p&gt;

&lt;p&gt;To start, we'll add a button that activates the eye dropper.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Select a color&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When the button is clicked, we'll launch the eye dropper. As soon as the user selects a color, we'll update the page's background to match.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;EyeDropper&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;eyeDropper&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;EyeDropper&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;eyeDropper&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;colorSelectionResult&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;backgroundColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;colorSelectionResult&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sRGBHex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// The user canceled selection&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// The EyeDropper API isn't supported&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://codepen.io/claviska/pen/OJjmMgz?editors=1010"&gt;Try it on CodePen&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#breaking-it-down"&gt;
  &lt;/a&gt;
  Breaking it down
&lt;/h2&gt;

&lt;p&gt;Here's what's happening in the code above:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Feature-detect the API&lt;/li&gt;
&lt;li&gt;Instantiate an EyeDropper object&lt;/li&gt;
&lt;li&gt;Listen for button clicks&lt;/li&gt;
&lt;li&gt;Call the eye dropper's &lt;code&gt;open()&lt;/code&gt; method, which returns a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"&gt;Promise&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Wait for the promise to resolve (the user selected a color) or reject (the user canceled selection)&lt;/li&gt;
&lt;li&gt;On resolve, grab the hex value and set the background&lt;/li&gt;
&lt;li&gt;On reject, do nothing (the empty &lt;code&gt;catch&lt;/code&gt; will prevent an error hitting the console)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Note how I'm feature-detecting the EyeDropper API. This is important because, at the time of this writing, Firefox and Safari don't support it. That doesn't mean you can't use the API to progressively enhance your users' experience, though!&lt;/p&gt;

&lt;p&gt;For example, I'm using it in &lt;a href="https://twitter.com/claviska/status/1452990807640875011?s=20"&gt;Shoelace's color picker&lt;/a&gt; to show an eye dropper if the API is available. Otherwise, I don't show the eye dropper but everything else still works.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#another-example"&gt;
  &lt;/a&gt;
  Another Example
&lt;/h2&gt;

&lt;p&gt;I whipped up another example that's a bit more practical. Play around with it and let me know what you think!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/claviska/pen/ExvmjqQ"&gt;Try it on CodePen&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;em&gt;This post originally appeared on &lt;a href="https://www.abeautifulsite.net/posts/exploring-the-eyedropper-api/"&gt;the author's blog&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>css</category>
      <category>webdev</category>
      <category>eyedropper</category>
    </item>
    <item>
      <title>Saving Time as a Freelancer</title>
      <author>Saji Wang</author>
      <pubDate>Tue, 26 Oct 2021 14:26:54 +0000</pubDate>
      <link>https://dev.to/codesphere/saving-time-as-a-freelancer-2711</link>
      <guid>https://dev.to/codesphere/saving-time-as-a-freelancer-2711</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;I was sick of working 9–5 so I quit my job and went freelance, now I work 24/7 - Unknown freelance dev, 2021&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Freelancing in tech can be both rewarding and highly demanding. You're hired to deliver and you need to come up with the goods to earn your paycheck. Your work needs to be high quality and on time if you want to keep getting hired. &lt;/p&gt;

&lt;p&gt;But when you're just one person, delivering a consistently high standard can be a challenge, especially when you're using the wrong tools. So today we want to tell you how we're trying to help…we've built an all in one online code editor, GitOps manager and Cloud provider.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wh5Ip-ys--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5b7xagn2qhvcpgcyr87w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wh5Ip-ys--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5b7xagn2qhvcpgcyr87w.png" alt="webpages"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#how-does-that-help-me-as-a-freelancer"&gt;
  &lt;/a&gt;
  How does that help me as a freelancer?
&lt;/h3&gt;

&lt;p&gt;Time is a resource to us all, but freelancers know this pain more than most. With multiple clients asking for last-minute changes or updates of projects, anything that can save you time is an invaluable weapon in your arsenal. &lt;/p&gt;

&lt;p&gt;Codesphere puts your entire development pipeline in one place, so you don't need to sign up and into multiple tools for each stage of the development process. It comes with automatic CI/CD and managed infrastructure with no config required, so you can spend more time coding and building your projects. &lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#keep-your-projects-live-and-make-changes-on-the%C2%A0fly"&gt;
  &lt;/a&gt;
  Keep your projects live and make changes on the fly
&lt;/h3&gt;

&lt;p&gt;The product you deliver to your client very likely needs to be live all the time. If it goes down, you can expect some angry phone calls, and no excuse you give will be good enough; You are expected to provide consistent and reliable service. Deploying and hosting on Codesphere is all taken care of, so you don't have to worry about it.&lt;/p&gt;

&lt;p&gt;Your project is live, but what if you need to make changes? You have to bring it offline, make the change, push the master, rebuild the image and then redeploy. But what if you could make changes to the live app? Codesphere lives in your browser and deploys, tests, and scales as you type.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dg4430tD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oc2slt5bftyebts2u9sk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dg4430tD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oc2slt5bftyebts2u9sk.png" alt="key"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#it-works-on-my-machine"&gt;
  &lt;/a&gt;
  It works on my machine
&lt;/h3&gt;

&lt;p&gt;Like debugging, handing over the project to your client also needs to be seamless, and it needs to work every time. Coding to the cloud guarantees what you coded is what your client sees when it's time to present it. No environmental constraints to deal with and no unexpected deployment surprises, it always works on their machine… &lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#whats-your%C2%A0take"&gt;
  &lt;/a&gt;
  What's your take?
&lt;/h3&gt;

&lt;p&gt;We know we're tooting our own horn here, but we want you to know what Codesphere actually is. We're still trying to find the people we can best help, so give us your feedback, tell us what you want to see in a product like ours. What problems are you facing that we can help solve?&lt;/p&gt;

&lt;p&gt;Don't believe us? &lt;a href="https://link.codesphere.com/EW"&gt;Try us out&lt;/a&gt; and help us build a better product - we're still trying to solve the DevOps problem…and maybe you don't even have a DevOps problem. Then again, no one had a problem with horses until the car came along.&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>cloud</category>
      <category>devops</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Ruby on Rails will be dead soon! </title>
      <author>poudyal_rabin</author>
      <pubDate>Tue, 26 Oct 2021 14:22:41 +0000</pubDate>
      <link>https://dev.to/poudyal_rabin/ruby-on-rails-will-be-dead-soon-pab</link>
      <guid>https://dev.to/poudyal_rabin/ruby-on-rails-will-be-dead-soon-pab</guid>
      <description>&lt;p&gt;Yes! I was also surprised and a little bit agitated when I saw similar headlines on tech blogs and magazines few years back. I thought maybe that's right, I don't see much people learning Ruby On Rails these days neither I see much job posts for Rails developer position. Maybe I should learn django? Or maybe I should learn nodejs(express)? If you are also on your early stage of career, these questions must be itching your bones too. And especially, if Rails is the first framework you are working on, you must have been dealing with few more issues too. &lt;/p&gt;

&lt;p&gt;For example, people say that Ruby/Rails ecosystem is not really the future because it does not have Machine Learning Capabilities and it is too slow. Some also say that Rails is not that scalable giving the example of Twitter. I also think to some degree that they are right. But should you be worried about it and start learning something else?&lt;/p&gt;

&lt;p&gt;Actually you don't need to. If you are learning Rails then you must have shaped your future into being a web developer. So why should you even worry about Machine Learning when you are learning web development? You are worrying then, you are on the wrong path. If you really want to learn both then you can still learn it side by side. What really works according to my experience is that, Rails has the convention over configuration ideology that gives you the bird's eye overview of overall web development ecosystem which you can transfer to any another framework of choice.&lt;/p&gt;

&lt;p&gt;A lot of technologies evolve over time but Rails has been there for a while now as a mature framework which has answers to most of the problems faced by web developers. So if you are learning/coding on Rails, then you don't need to worry now. These technologies that have been around for more than decade will take time to die. &lt;/p&gt;

&lt;p&gt;Don't forget to share your thoughts too.&lt;br&gt;
Happy Coding!&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Create a simple calculator using HTML, CSS and Javascript</title>
      <author>Adam Nagy</author>
      <pubDate>Tue, 26 Oct 2021 14:18:20 +0000</pubDate>
      <link>https://dev.to/javascriptacademy/create-a-simple-calculator-using-html-css-and-javascript-4o7k</link>
      <guid>https://dev.to/javascriptacademy/create-a-simple-calculator-using-html-css-and-javascript-4o7k</guid>
      <description>&lt;p&gt;In this tutorial we will create a fully working calculator using only HTML, CSS and vanilla Javascript. You'll learn about event handling, and DOM manipulations throughout the project. In my opinion this is a really good beginner project for those who want to become web developers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#video-tutorial"&gt;
  &lt;/a&gt;
  Video Tutorial
&lt;/h2&gt;

&lt;p&gt;If you would watch a detailed &lt;strong&gt;step-by-step&lt;/strong&gt; video instead you can check out the video I made covering this project &lt;a href="https://www.youtube.com/c/JavaScriptAcademyOfficial"&gt;on my Youtube Channel&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/QS6Y0ezhyCs"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#html"&gt;
  &lt;/a&gt;
  HTML
&lt;/h2&gt;

&lt;p&gt;The html will be pretty simple for this project. We'll start out with a standard HTML5 boilerplate. At the bottom of our body I included the &lt;code&gt;index.js&lt;/code&gt; script that we will create later. This needs to be at the bottom, because this way, when our javascript runs, the html elements required for the calculator will be in the DOM.&lt;br&gt;
In the body we have a &lt;code&gt;section&lt;/code&gt; and inside that a div with a &lt;code&gt;container&lt;/code&gt; class. We will use these wrappers to position our calculator on the page. Inside our container we have an empty div with the id of &lt;code&gt;display&lt;/code&gt;, and this will be the display of our calculator. It is empty, because we will modify its content from Javascript. Then we have a div with the class of &lt;code&gt;buttons&lt;/code&gt; which will represent the keypad of the calculator.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;section&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"display"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"buttons"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"index.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;buttons&lt;/code&gt; container will hold all of the buttons. Each button will be a div with a class of &lt;code&gt;button&lt;/code&gt;. This will make the styling easy, and also will help us to gather the user input. Here we have a div for every button that we want on our keypad. You can notice that we have a weird looking label between the buttons: &lt;code&gt;&amp;amp;larr;&lt;/code&gt;. This is a HTML entity and it renders a back arrow (←), and we'll use this as a backspace. Also please not that for the equal sign button we have a separate id &lt;code&gt;equal&lt;/code&gt;. We will use this Id to distinguish this special button, and evaluate the expression provided to the calculator.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt; &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"buttons"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;C&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;/&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;*&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="ni"&gt;&amp;amp;larr;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;7&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;8&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;9&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;-&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;4&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;5&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;6&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;+&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;1&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;2&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;3&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;.&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;(&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;0&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;)&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"equal"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;=&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And this is all of the HTML markup that we need for this project, let's jump into CSS.&lt;/p&gt;

&lt;p&gt;Don't forget to link the CSS styleshead in the head of the HTML file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"style.css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#css"&gt;
  &lt;/a&gt;
  CSS
&lt;/h2&gt;

&lt;p&gt;Let's create a &lt;code&gt;style.css&lt;/code&gt; file.&lt;br&gt;
We set a width for the container and center it using margin (also give it a decent top margin of 10vh), and apply a little box shadow.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;400px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10vh&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt; &lt;span class="m"&gt;43px&lt;/span&gt; &lt;span class="m"&gt;17px&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;153&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;153&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;153&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the display we set a fixed height, and to center the text vertically we need to set the line-height to the exact same amount. The text should be right align, because this is how most calculator displays work. Also set the font-size and give a decent amount paddings.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nf"&gt;#display&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;70px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;line-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;70px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;16px&lt;/span&gt; &lt;span class="m"&gt;8px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;25px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To position the buttons we use CSS grid. By setting 4 x 1fr in-&lt;code&gt;grid-template-coloumns&lt;/code&gt; we'll have 4 equally sized buttons in each row. We only set bottom and left borders, so we won't get double borders. We'll set the other two sides in the next CSS rule.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.buttons&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#999&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt;&lt;span class="m"&gt;#999&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Apply the missing two sides of the borders for every button:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.buttons&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;border-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#999&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt;&lt;span class="m"&gt;#999&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the button we'll set borders, font-size and 100px of line height to center it vertically, and set &lt;code&gt;text-align: center&lt;/code&gt; to center the button labels horizontally. To have a better user experience set cursor to pointer, so the user will know that this is a clickable element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.5px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#999&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;line-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;25px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We want the equal button to stand out so, we'll set a blue background color and white text to it. Also to have a nice hover effect we'll set a darker background color and white text color on hover. To make the transition smoot set: &lt;code&gt;transition: 0.5s ease-in-out;&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nf"&gt;#equal&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;85&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;85&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.button&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#323330&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.5s&lt;/span&gt; &lt;span class="n"&gt;ease-in-out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#javascript"&gt;
  &lt;/a&gt;
  Javascript
&lt;/h2&gt;

&lt;p&gt;This will be the heart of our application. Let's create the &lt;code&gt;index.js&lt;/code&gt; file. The first thing we need to do is to save a reference to our display dom element. We can easily do that because it has an id of &lt;code&gt;display&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;display&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;display&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next we have to get references for the buttons. We'll store the button references in an array. To gather the buttons we can select them by &lt;code&gt;document.getElementsByClassName('button')&lt;/code&gt;, but this function gives back a NodeCollection instead of an array so we have to convert it to an array using &lt;code&gt;Array.from()&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;buttons&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementsByClassName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The next and last step we have to make is to add event listener to the buttons and build the functionalities. To add event listeners for the buttons, we'll map through the buttons array and add a click event listener for each. (An advanced solution would be to only add event listener to the &lt;code&gt;buttons&lt;/code&gt; container and use event bubbling but this is a more beginner-friendly solution.)&lt;/p&gt;

&lt;p&gt;To determine what should we do, we'll use &lt;code&gt;e.target.innerText&lt;/code&gt;, which will simply give back the label of the button that was clicked.&lt;/p&gt;

&lt;p&gt;In the first case, when the user hits the "C" button we'd like to clear the display. To do that we can access our display reference and set the &lt;code&gt;innerText&lt;/code&gt; to an empty string. Don't forget to add &lt;code&gt;break;&lt;/code&gt; at the end, because it is needed to prevent the execution of the code defined in other &lt;code&gt;case&lt;/code&gt; blocks.&lt;/p&gt;

&lt;p&gt;For the equal button we'll use javascript built in &lt;code&gt;eval&lt;/code&gt; function. We need to provide the display's content to eval and it will evaluate and return the result, so we should set the result of the eval call to the display's innerText. We need to wrap this into a try catch block to handle errors. Erros can happen when we have syntactically wrong math expressions, for example &lt;code&gt;//(9(&lt;/code&gt;, ine these cases we'll set the display's innerText to display 'Error'.&lt;/p&gt;

&lt;p&gt;⚠️ You should not use eval in user facing applications, because it can be abused and external code can be run with it. &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval#never_use_eval!"&gt;More details&lt;/a&gt; If you want to replace eval I suggest using &lt;a href="https://mathjs.org/"&gt;Math.js lib.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If the user hits the back arrow we need to remove the last character from the display's innerText. To do that we'll use the String.slice() method, but we only want to do that if the display has any value.&lt;/p&gt;

&lt;p&gt;In the default case, so whenever the user don't hit these special symbols we just want to append the clicked button's innerText to the display's innerText. We can use the &lt;code&gt;+=&lt;/code&gt; operator to do that.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;buttons&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;C&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="nx"&gt;display&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nx"&gt;display&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nx"&gt;display&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Error&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;←&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                   &lt;span class="nx"&gt;display&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;display&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="nx"&gt;display&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The whole project is &lt;a href="https://github.com/javascriptacademy-stash/calculator"&gt;available on GitHub&lt;/a&gt;&lt;br&gt;
And that's it you have a working calculator.&lt;/p&gt;

&lt;p&gt;Thanks for reading.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#where-you-can-learn-more-from-me"&gt;
  &lt;/a&gt;
  Where you can learn more from me?
&lt;/h2&gt;

&lt;p&gt;I create education content covering web-development on several platforms, feel free to 👀 check them out.&lt;/p&gt;

&lt;p&gt;I also create a newsletter where I share the week's or 2 week's educational content that I created. No bull💩 just educational content.&lt;/p&gt;

&lt;p&gt;🔗 Links:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;💬 Join our &lt;a href="https://discord.gg/GuxmcEgAjB"&gt;community on Discord&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;📧 Newsletter &lt;a href="https://www.getrevue.co/profile/dev_adamnagy"&gt;Subscribe here&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;🎥 YouTube &lt;a href="https://www.youtube.com/channel/UCicOwFWkuMX0ddFaKCc_E5Q"&gt;Javascript Academy&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;🐦 Twitter: &lt;a href="https://twitter.com/dev_adamnagy"&gt;@dev_adamnagy&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;📷 Instagram &lt;a href="https://www.instagram.com/javascriptacademy/"&gt;@javascriptacademy&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>tutorial</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
