<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Función al curry</title>
      <author>Franco Cuarterolo</author>
      <pubDate>Fri, 06 Aug 2021 01:31:00 +0000</pubDate>
      <link>https://dev.to/cuarte4/funcion-al-curry-4257</link>
      <guid>https://dev.to/cuarte4/funcion-al-curry-4257</guid>
      <description>&lt;p&gt;Sí, ya sé, cuando te nombraron lo que llamamos Curry function&lt;br&gt;
(o funciones currificadas) te hizo ruido el estómago. Pero lamentablemente, nada tienen que ver con ese condimento. ¿Y por qué lleva el mismo nombre? Por Haskell Curry, matemático estadounidense. Según Wikipedia fue propuesto el nombre &lt;em&gt;Schönfinkelisation&lt;/em&gt; pero no creo que tenga tanto marketing.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#qu%C3%A9-significa-que-una-funci%C3%B3n-sea-currificada"&gt;
  &lt;/a&gt;
  ¿Qué significa que una función sea currificada?
&lt;/h2&gt;

&lt;p&gt;Una función currificada es aquella que está compuesta por dos o más funciones, ejecutadas de forma secuencial. Estas funciones comparten los mismos argumentos ya que componen un mismo closure.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#c%C3%B3mo-se-ve-una-funci%C3%B3n-curry"&gt;
  &lt;/a&gt;
  ¿Cómo se ve una función curry?
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//Función cotidiana&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;suma&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;valor1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;valor2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;valor1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;valor2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nx"&gt;suma&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 3&lt;/span&gt;

&lt;span class="c1"&gt;//Función Curry&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sumaCurry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;valor1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;valor2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;valor1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;valor2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nx"&gt;sumaCurry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 6&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#qu%C3%A9-notamos-de-diferente"&gt;
  &lt;/a&gt;
  ¿Qué notamos de diferente?
&lt;/h2&gt;

&lt;p&gt;En el snippet de código, podemos ver que la función curry recibe un parámetro (valor1), luego retorna una función que recibe el segundo parámetro (valor2) y esa función retorna la suma de ambos parámetros. Son dos funciones que comparten un mismo scope&lt;br&gt;
y los mismos parámetros.&lt;/p&gt;

&lt;p&gt;En el momento de ejecución de la función, tenemos que ejecutarla dos veces: una vez por cada función anidada hasta llegar al resultado. Esto nos permite desacoplar partes de la función y guardarlas en variables&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#en-qu%C3%A9-nos-beneficia"&gt;
  &lt;/a&gt;
  ¿En qué nos beneficia?
&lt;/h2&gt;

&lt;p&gt;Una característica que a mí me encanta de las funciones curry es que nos permiten reutilizar funciones por partes. Por ejemplo, digamos que nuestra función &lt;code&gt;sumaCurry&lt;/code&gt; siempre la usamos para sumar de a 20. Podemos ejecutar la primera parte de la función, y guardar la segunda para más tarde&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sumaVeinte&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sumaCurry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sumaVeinte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 30&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Si nos fijamos en la consola con &lt;code&gt;console .log&lt;/code&gt; qué tiene dentro sumaVeinte`, nos mostrará esto:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SUYJyBMp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q1ktof6s2dfho8642qh3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SUYJyBMp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q1ktof6s2dfho8642qh3.png" alt="Cuerpo de función sumaVeinte"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pero si utilizamos el método &lt;code&gt;console .dir&lt;/code&gt; y nos dirigimos a donde dice &lt;code&gt;[[[Scopes ]]]&lt;/code&gt; podremos ver dentro del closure nuestro valor &lt;code&gt;20&lt;/code&gt; guardado.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g5oRzzLp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/apel36jko576sm683ffg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g5oRzzLp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/apel36jko576sm683ffg.png" alt="Información del Closure de la función sumaVeinte"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusi%C3%B3n"&gt;
  &lt;/a&gt;
  Conclusión
&lt;/h2&gt;

&lt;p&gt;La idea de este articulo era mostrarte la existencia de este tipo de funciones y puedas reconocerlas. Tienen muchos usos y se encuentran en muchos lenguajes de programación funcional. Te invito a que explores el concepto y lo pongas en práctica!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>spanish</category>
      <category>functional</category>
    </item>
    <item>
      <title>How I structure my React /TS applications (2021)</title>
      <author>Djamaile</author>
      <pubDate>Fri, 06 Aug 2021 01:19:42 +0000</pubDate>
      <link>https://dev.to/djamaile/how-i-structure-my-react-ts-applications-2021-145j</link>
      <guid>https://dev.to/djamaile/how-i-structure-my-react-ts-applications-2021-145j</guid>
      <description>&lt;p&gt;(code is hosted at: &lt;a href="https://github.com/djamaile/react-boilerplate-2021"&gt;https://github.com/djamaile/react-boilerplate-2021&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;(last years post: &lt;a href="https://dev.to/djamaile/how-i-structure-my-react-ts-applications-160g"&gt;https://dev.to/djamaile/how-i-structure-my-react-ts-applications-160g&lt;/a&gt;) &lt;/p&gt;

&lt;p&gt;Last year, I created a post on how I structure my ReactJS projects. Now that it is summer vacation again, I shook the structure up a bit. But honestly there are few changes, because in the end React changed little (which is a good thing). So, in this post I will highlight what I changed/added.&lt;/p&gt;

&lt;p&gt;Lets first start with a picture of the whole folder structure!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O-Ak4419--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v2gi5gcq2xp701ek0mq5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O-Ak4419--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v2gi5gcq2xp701ek0mq5.png" alt="Folder structure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now lets discuss the changes :) &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#api"&gt;
  &lt;/a&gt;
  📖 Api
&lt;/h3&gt;

&lt;p&gt;In the API folder, I only now have a generic request function and what I added was react-query. If you are not familiar with react-query, it is a library for fetching server state. React-query comes with a lot of power like caching, data synchronisation, etc. &lt;/p&gt;

&lt;p&gt;In this project, I have kept react-query pretty simple by only adding a &lt;code&gt;defaultQueryFn&lt;/code&gt;, what looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;AxiosResponse&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;axios&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;api&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="c1"&gt;// baseURL: process.env.REACT_APP_HOST_BACKEND,&lt;/span&gt;
  &lt;span class="na"&gt;baseURL&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://rickandmortyapi.com/api&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;any&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;AxiosResponse&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// Define a default query function that will receive the query key&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;defaultQueryFn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;queryKey&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;any&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;unknown&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;queryKey&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;queryKey&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;queryKey&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, the &lt;code&gt;defaultQueryFn&lt;/code&gt; is calling the &lt;code&gt;request&lt;/code&gt; function. Now we can add this to our &lt;code&gt;QueryClient&lt;/code&gt; and in our Home view we can call the &lt;code&gt;useQuery&lt;/code&gt; functionality like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../styles/home.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-query&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Header&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../components&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FC&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isFetching&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;GET&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/character&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{}]);&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isFetching&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Is&lt;/span&gt; &lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Header&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I am still experimenting with react-query and see how I can use it better. But this is how I have been using it for now.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#testscypress"&gt;
  &lt;/a&gt;
  🧪 Tests/Cypress
&lt;/h3&gt;

&lt;p&gt;Yes, the infamous test folder. I actually ended up deleting it! I still have tests but I put them directly into the views/[view] folder.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TThWMNcb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wdq0o5ephjy6o95m8b77.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TThWMNcb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wdq0o5ephjy6o95m8b77.png" alt="Test code in component"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have to admit that I am not using Jest as much anymore. I have switched over to using Cypress. Cypress is a tool for end-to-end tests and I have been liking it so far. So, in &lt;code&gt;cypress/integration/404_page.ts&lt;/code&gt; you can see I have a spec test that tests if the user can go back to the home page if the user has reached to 404 page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;404 page&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;should give the option to return to home&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;visit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/does-not-exists&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Return to Home&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
       &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Learn React&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; 
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#docker"&gt;
  &lt;/a&gt;
  🐳 Docker
&lt;/h3&gt;

&lt;p&gt;I have added also Dockerfiles to my default repo. I have two separate two Dockerfiles, one for development and one for production.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; node:15-alpine AS builder&lt;/span&gt;

&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /app&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . .&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;yarn &lt;span class="nb"&gt;install&lt;/span&gt; 

&lt;span class="k"&gt;RUN &lt;/span&gt;yarn build

&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; nginx:stable-alpine&lt;/span&gt;

&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /usr/share/nginx/html&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;&lt;span class="nb"&gt;rm&lt;/span&gt; &lt;span class="nt"&gt;-rf&lt;/span&gt; &lt;span class="k"&gt;*&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; --from=builder /app/build .&lt;/span&gt;

&lt;span class="k"&gt;ENTRYPOINT&lt;/span&gt;&lt;span class="s"&gt; ["nginx", "-g", "daemon off;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To build a image use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker build &lt;span class="nt"&gt;-t&lt;/span&gt; djam97/react-boilerplate-2021:prod &lt;span class="nt"&gt;-f&lt;/span&gt; docker/Dockerfile.prod &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#kubernetes"&gt;
  &lt;/a&gt;
  ☸️ Kubernetes
&lt;/h3&gt;

&lt;p&gt;I use Kubernetes daily so that's why I added also some k8s manifests. They are pretty bare bone, but they get the job done and are easily extensible.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;apps/v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Deployment&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;react-boiler-plate&lt;/span&gt;
  &lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;react-boiler-plate&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;replicas&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;matchLabels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;react-boiler-plate&lt;/span&gt;
  &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;react-boiler-plate&lt;/span&gt;
    &lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;containers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;react-boiler-plate&lt;/span&gt;
          &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;djam97/react-boilerplate-2021:prod&lt;/span&gt;
          &lt;span class="na"&gt;imagePullPolicy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Never&lt;/span&gt;
          &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;containerPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3000&lt;/span&gt;
&lt;span class="nn"&gt;---&lt;/span&gt;
&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Service&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;react-boiler-plate-service&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;react-boiler-plate&lt;/span&gt;
  &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;protocol&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;TCP&lt;/span&gt;
      &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3000&lt;/span&gt;
      &lt;span class="na"&gt;targetPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To apply the manifests use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl apply &lt;span class="nt"&gt;-f&lt;/span&gt; k8s/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#github-workflow"&gt;
  &lt;/a&gt;
  😺 Github workflow
&lt;/h3&gt;

&lt;p&gt;I use Kubernetes daily, so that’s why I added also some k8s manifests. They are pretty bare bone, but they get the job done and are easily extensible.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Deploy site&lt;/span&gt;

&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;main&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;continue-on-error&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
    &lt;span class="na"&gt;strategy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;matrix&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;node-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;14.x&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Setup Node&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/setup-node@v1&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;node-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;14.x"&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Get yarn cache&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;yarn-cache&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;echo "::set-output name=dir::$(yarn cache dir)"&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Cache dependencies&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/cache@v1&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ steps.yarn-cache.outputs.dir }}&lt;/span&gt;
          &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}&lt;/span&gt;
          &lt;span class="na"&gt;restore-keys&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
            &lt;span class="s"&gt;${{ runner.os }}-yarn-&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Yarn installation&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;yarn install &amp;amp;&amp;amp; CI='' yarn build&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Deploy&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;peaceiris/actions-gh-pages@v3&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;github_token&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.ACCESS_TOKEN }}&lt;/span&gt;
          &lt;span class="na"&gt;publish_dir&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;./buil&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you also want to use it, there are some steps you need to take. First, you need to create a personal access token in GitHub and add it as a secret to your repo as &lt;code&gt;ACCESS_TOKEN&lt;/code&gt;. Last, change the homepage in &lt;code&gt;package.json&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt; - &lt;span class="s2"&gt;"homepage"&lt;/span&gt;: &lt;span class="s2"&gt;"https://djamaile.github.io/react-boilerplate-2021"&lt;/span&gt;,
 + &lt;span class="s2"&gt;"homepage"&lt;/span&gt;: &lt;span class="s2"&gt;"https://&amp;lt;your username&amp;gt;.github.io/react-boilerplate-2021"&lt;/span&gt;,
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#extra-files"&gt;
  &lt;/a&gt;
  🗄️ Extra files
&lt;/h3&gt;

&lt;p&gt;Besides the usual prettier, eslint, husky setup. I have also added &lt;code&gt;@commitlint/config-conventional&lt;/code&gt; to make sure every commit complies with being a conventional commit. If you don't know what that is, you can read up on it here: &lt;a href="https://www.conventionalcommits.org/en/v1.0.0/#summary"&gt;https://www.conventionalcommits.org/en/v1.0.0/#summary&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>typescript</category>
    </item>
    <item>
      <title>Is solana a hidden Crypto Gem</title>
      <author>gaidu</author>
      <pubDate>Fri, 06 Aug 2021 01:15:00 +0000</pubDate>
      <link>https://dev.to/gaidu/is-solana-a-hidden-crypto-gem-46dg</link>
      <guid>https://dev.to/gaidu/is-solana-a-hidden-crypto-gem-46dg</guid>
      <description>&lt;p&gt; &lt;span&gt;Solana is a project dedicated to solving the blockchain trilemma. It wants to build a scalable network which is much faster than any existing blockchain, and even VISA.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;As of mid 2021, Solana supports 50,000 transactions per second (TPS) and produces new blocks every 400 milliseconds with the help of 200 validating nodes. All while maintaining close to zero network fees.&lt;/p&gt;
&lt;p&gt;Solana uses eight innovative technologies to achieve its goals, but in this guide we will touch on the two major ones – Proof of History and Turbine.&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Read More; &lt;/span&gt;&lt;b&gt;&lt;span&gt;&lt;a href="https://www.codelivly.com/is-solana-cryptos-hidden-gem/"&gt;Is solana a hidden Crypto Gem&lt;/a&gt;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Personalizando o README no GitHub </title>
      <author>LeehXD</author>
      <pubDate>Fri, 06 Aug 2021 01:14:35 +0000</pubDate>
      <link>https://dev.to/leehxd/personalizando-o-readme-no-github-4a66</link>
      <guid>https://dev.to/leehxd/personalizando-o-readme-no-github-4a66</guid>
      <description>&lt;p&gt;Oi galera, tudo bem? Sejam Bem-Vindos.&lt;br&gt;
Meu nome é Leticia Jordão vou ensinar vocês como personalizar seu Readme do GitHub com essas tabelas de estatísticas.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vZFeHLJA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github-readme-stats.vercel.app/api%3Fusername%3DLeehXD%26show_icons%3Dtrue%26theme%3Dradical%26include_all_commits%3Dtrue%26count_private%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vZFeHLJA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github-readme-stats.vercel.app/api%3Fusername%3DLeehXD%26show_icons%3Dtrue%26theme%3Dradical%26include_all_commits%3Dtrue%26count_private%3Dtrue"&gt;&lt;/a&gt;&lt;br&gt;
  &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZnS8wvkt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github-readme-stats.vercel.app/api/top-langs/%3Fusername%3DLeehXD%26layout%3Dcompact%26langs_count%3D16%26theme%3Dradical" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZnS8wvkt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github-readme-stats.vercel.app/api/top-langs/%3Fusername%3DLeehXD%26layout%3Dcompact%26langs_count%3D16%26theme%3Dradical"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1º PASSO&lt;/strong&gt; vocês vão entrar lá no meu perfil do -&amp;gt; &lt;a href="https://github.com/LeehXD/LeehXD"&gt;GitHub&lt;/a&gt; repositório LeehXD.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VL5Q5eyD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yuqwb3nn9ao7xfodl0je.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VL5Q5eyD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yuqwb3nn9ao7xfodl0je.png" alt="2021-08-05 (7)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2º Passo&lt;/strong&gt; Vocês vão clicar em &lt;a href="https://github.com/LeehXD/LeehXD/commit/e2d9878c9cc4da72686cd7955e919c42668fed0a"&gt;Update README.md&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pxgsLEvj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1bepofol78pju4toibiz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pxgsLEvj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1bepofol78pju4toibiz.png" alt="2021-08-05 (3)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3º Passo&lt;/strong&gt; Copia a linha grifada e cola no Readme de vocês.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A9B_Cbu9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/15n37g6qkvj6yciyjpew.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A9B_Cbu9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/15n37g6qkvj6yciyjpew.png" alt="2021-08-05 (4)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4º Passo&lt;/strong&gt; Muda o LeehXD para o seu nome no GitHub&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gTegB-W5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/us9ivrr6k2hknvdf2tvy.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gTegB-W5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/us9ivrr6k2hknvdf2tvy.jpg" alt="2021-08-05 (6)_LI"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;e pronto!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bônus&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QfOi0C1p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xv5wu9isc8v84ea2mh1i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QfOi0C1p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xv5wu9isc8v84ea2mh1i.png" alt="68747470733a2f2f7265732e636c6f7564696e6172792e636f6d2f616e7572616768617a72612f696d6167652f75706c6f61642f76313539353137343533362f6772732d7468656d65735f6c34796e6a612e706e67"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Vou ensinar a mudar a cor da sua tabela.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4PqpDWvL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oixqqoq73nxykke06lbt.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4PqpDWvL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oixqqoq73nxykke06lbt.jpg" alt="2021-08-05 (9)_LI"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nessa parte &lt;strong&gt;theme=radical&lt;/strong&gt; você pode alterar o &lt;strong&gt;radical&lt;/strong&gt; para os temas abaixo:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;dark &lt;/li&gt;
&lt;li&gt;gruvbox&lt;/li&gt;
&lt;li&gt;tokyonight&lt;/li&gt;
&lt;li&gt;onedark&lt;/li&gt;
&lt;li&gt;cobalt&lt;/li&gt;
&lt;li&gt;synthwave&lt;/li&gt;
&lt;li&gt;highcontrast&lt;/li&gt;
&lt;li&gt;dracula&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Espero que tenham gostado, me siga no &lt;a href="https://github.com/LeehXD/LeehXD"&gt;GitHub&lt;/a&gt; repositório LeehXD.❤️&lt;/p&gt;

</description>
      <category>github</category>
      <category>readme</category>
      <category>status</category>
      <category>personalizando</category>
    </item>
    <item>
      <title>Boy with a beard explains Web components</title>
      <author>boywithabeard</author>
      <pubDate>Fri, 06 Aug 2021 00:41:40 +0000</pubDate>
      <link>https://dev.to/boywithabeard/boy-with-a-beard-explains-web-components-1jhm</link>
      <guid>https://dev.to/boywithabeard/boy-with-a-beard-explains-web-components-1jhm</guid>
      <description>&lt;h3&gt;
  &lt;a href="#what-are-web-components"&gt;
  &lt;/a&gt;
  What are Web Components?
&lt;/h3&gt;

&lt;p&gt;Web component is a term used for four web standards that help us make custom, reusable and encapsulated html tags that can be used in web pages and applications.&lt;br&gt;
&lt;strong&gt;1. &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; elements:&lt;/strong&gt; With the &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; elements, we encapsulate html, and then render it using javascript.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;So what happens is that template elements break apart html. Whatever is contained inside the template tag doesn't get rendered at load-time. Instead javascript renders when the function is called. So a page would load very quickly, since we have part of html that doesn't load at load-time. We can also reuse these elements, so we save a lot of time.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eaTA8FYL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/le5f869t7cmrnp9cdx2n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eaTA8FYL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/le5f869t7cmrnp9cdx2n.png" alt="Screen Shot 2021-08-04 at 9.33.15 PM"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--58ZDXYuD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ald27azuinloteo2vfs4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--58ZDXYuD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ald27azuinloteo2vfs4.png" alt="Screen Shot 2021-08-04 at 9.33.32 PM"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;2. Custom elements:&lt;/strong&gt; With custom elements, we create a javascript class, and then link it to a custom html element.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;An html document already ships default html elements. E.g &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;,&lt;code&gt;&amp;lt;header&amp;gt;&lt;/code&gt; etc. An HTMLElement class contains all these elements. Inside a javascript file we define a class and extend the HTMLElement, with this custom class. Next, we define a custom element, and then link it to our class. We can now use this custom element inside html as many times as we like.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YrfBEjf5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mupm6qcksqcilpfcjxpg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YrfBEjf5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mupm6qcksqcilpfcjxpg.png" alt="Screen Shot 2021-08-04 at 3.50.16 PM"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nth3tFVc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3vfq3puj50sefl16u7jb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nth3tFVc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3vfq3puj50sefl16u7jb.png" alt="Screen Shot 2021-08-04 at 3.50.24 PM"&gt;&lt;/a&gt;&lt;br&gt;
Notice the &lt;code&gt;-&lt;/code&gt; in the custom element; that is important when making custom elements, to differentiate it from default elements.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;3. Shadow DOM:&lt;/strong&gt; &lt;br&gt;
With a Shadow DOM we encapsulate styles, so that we can limit them to a specific area.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A DOM, Document Object Model, is a tree like structure of a documents elements, in our case html's elements. Code and styles contained here affect one another.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z2yEE2LZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m67k3aha9ldcjx8dqfso.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z2yEE2LZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m67k3aha9ldcjx8dqfso.png" alt="dom-screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A Shadow DOM on the other hand, is a separate DOM, and the code contained inside the Shadow DOM is separate from the main DOM, so it does not affect the code of the main DOM. We can attach a Shadow DOM to an element, using javascript, and it would only affect that element.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QQYzta9A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5nhg3vfqmtfvkkzrpcqe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QQYzta9A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5nhg3vfqmtfvkkzrpcqe.png" alt="Screen Shot 2021-08-05 at 10.06.12 AM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Javascript Modules:&lt;/strong&gt;&lt;br&gt;
We can convert a javascript file to a module by exporting it. This would allow other files to import it, by using it as a dependency. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;So a module is a file that exports its own code. Modules usually have their own scope. So we could have a modules with different functionality, that people can then share with others. So we could share a module called &lt;code&gt;mediaplayer&lt;/code&gt;, that could play media; or another one called &lt;code&gt;whattimeisit&lt;/code&gt;, that could display time in different time zones. Npmjs is a popular package manager that people use to share modules.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TXWYr9WG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3oyrws8p20r3hntpzkb3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TXWYr9WG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3oyrws8p20r3hntpzkb3.png" alt="Screen Shot 2021-08-05 at 10.53.42 AM"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#why-use-web-components"&gt;
  &lt;/a&gt;
  Why use Web Components?
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Future proof:&lt;/strong&gt;&lt;br&gt;
There have been many frameworks that have had a dramatic rise in popularity, but have been replaced by other newer frameworks. The great thing about web components is that after it's usage has increased over the years.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Gahtvk2R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dy0wlyj6ilo3qr5zvhr9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Gahtvk2R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dy0wlyj6ilo3qr5zvhr9.png" alt="trends-minor"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VdIIYDDv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wrsoo4d3aejvduvwzcix.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VdIIYDDv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wrsoo4d3aejvduvwzcix.jpg" alt="RYVwr119hwQIps5UL0u4 copy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Can be run by any browser:&lt;/strong&gt;&lt;br&gt;
Another great thing about Web components is, is that they were added by the World Wide Web Consortium, W3C, as a standard. The W3C defines the standards for browsers to implement. All five major browser have added support for web components. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NqGz72Yk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zh1lkwczfa024tukq8tj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NqGz72Yk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zh1lkwczfa024tukq8tj.png" alt="which-browsers-support-web-components"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Can be used with any framework:&lt;/strong&gt;&lt;br&gt;
Since it is a part of code, that can be run by the browser, usage by any framework is not an issue.&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FxmGOF4U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eoi8n68mt358qxy99bev.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FxmGOF4U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eoi8n68mt358qxy99bev.jpeg" alt="1*4cFhtuq6zRDqJ6p4s2pQ6g"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Write cleaner code:&lt;/strong&gt;&lt;br&gt;
One of the best things about web components is, is that web components helps us write cleaner, and better code. This would improve performance, increase accessibility, and make it easier to maintain. &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P8lNcUU7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ncyvnkhs2je3sjlclypr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P8lNcUU7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ncyvnkhs2je3sjlclypr.png" alt="1*OW9_FTfEMmSWpMSSQtFhIQ"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Improve reusability:&lt;/strong&gt;&lt;br&gt;
You could save a lot of time, by reusing web components. This would also mean that less developer hours are spent, and the productivity would increase a lot. ![Screen Shot 2021-08-05 at 2.42.46 PM]&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VK4fpFro--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xl9kbphxz0hjc2d0r5v1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VK4fpFro--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xl9kbphxz0hjc2d0r5v1.png" alt="Screen Shot 2021-08-05 at 2.42.46 PM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Improve Consistency:&lt;/strong&gt;&lt;br&gt;
When starting a new project, there might be old components that could be reused. So amongst different projects, a consistent look and feel can be created.&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f6FDTx_A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0n41jj3hjyxe1snxo2wl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f6FDTx_A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0n41jj3hjyxe1snxo2wl.png" alt="1*SlAPqCmjtwvRsn0Kszi7oA"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Improve Accessibility:&lt;/strong&gt;&lt;br&gt;
By reusing old components, we make it easier for users to use a specific feature again, in a different part of the project.&lt;/p&gt;

&lt;p&gt;Any accessibility features that have already been implemented can also be reused by us, or made available to use by others. E.g a simple search of accessibility on npmjs gives us more than 1350 packages to work with.&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3jDJ_sj---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cya69qucx07lgb4xjqs4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3jDJ_sj---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cya69qucx07lgb4xjqs4.png" alt="Screen Shot 2021-08-05 at 2.31.53 PM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#who-uses-web-components"&gt;
  &lt;/a&gt;
  Who uses Web Components?
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Github:&lt;/strong&gt;&lt;br&gt;
Github makes use of web components. As discussed before, an element with a &lt;code&gt;-&lt;/code&gt; in between means that it is a custom element. The &lt;code&gt;include-frameworks&lt;/code&gt; in Github's homepage after login, is an example.&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bTSLEUa---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rjt2l10stns0q5h5hruw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bTSLEUa---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rjt2l10stns0q5h5hruw.png" alt="Screen Shot 2021-08-05 at 3.02.52 PM"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--98ETaHTe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m0r20mdkf8s5aw38u15z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--98ETaHTe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m0r20mdkf8s5aw38u15z.png" alt="Screen Shot 2021-08-05 at 3.40.23 PM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Salesforce:&lt;/strong&gt;&lt;br&gt;
Salesforce also makes use of web components. An example of a custom element is &lt;code&gt;dx-instrumentation&lt;/code&gt; in Salesforce's developer page.&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8_3Zu4j8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2y0nz488sb820yp9kb0p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8_3Zu4j8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2y0nz488sb820yp9kb0p.png" alt="Screen Shot 2021-08-05 at 3.17.27 PM"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--weDVUCB2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2ln8jebdt2c6ep00bj3i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--weDVUCB2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2ln8jebdt2c6ep00bj3i.png" alt="Screen Shot 2021-08-05 at 3.41.04 PM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;EA:&lt;/strong&gt;&lt;br&gt;
EA uses web components. Here is an example of the sims website using web components. It makes use of the iron-a11y-announcer custom element, that adds a11y to features that require on-demand announcement from screen readers.&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fn7CJiWt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nmccyzhz62txzsh4pxg1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fn7CJiWt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nmccyzhz62txzsh4pxg1.png" alt="Screen Shot 2021-08-05 at 3.35.28 PM"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---Q_xh-Ad--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9c74knsqha6rd19ia21g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---Q_xh-Ad--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9c74knsqha6rd19ia21g.png" alt="Screen Shot 2021-08-05 at 3.41.32 PM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#links-to-learn-more"&gt;
  &lt;/a&gt;
  Links to learn more:
&lt;/h3&gt;

&lt;p&gt;Here are some links that you can use to learn more about Web components:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_templates_and_slots"&gt;Templates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements"&gt;Custom Elements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_shadow_DOM"&gt;Shadow DOM&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#video"&gt;
  &lt;/a&gt;
  Video:
&lt;/h3&gt;

&lt;p&gt;And here is a video where I explain web components:&lt;br&gt;
&lt;a href="https://youtu.be/0UvDjhO8j94"&gt;Youtube&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>html</category>
    </item>
    <item>
      <title>A Guide to Object Destructuring in JavaScript</title>
      <author>Adriana DiPietro</author>
      <pubDate>Fri, 06 Aug 2021 00:28:07 +0000</pubDate>
      <link>https://dev.to/am20dipi/a-guide-to-object-destructuring-in-javascript-4a4l</link>
      <guid>https://dev.to/am20dipi/a-guide-to-object-destructuring-in-javascript-4a4l</guid>
      <description>&lt;h2&gt;
  &lt;a href="#object-destructuring"&gt;
  &lt;/a&gt;
  Object Destructuring
&lt;/h2&gt;

&lt;p&gt;Object destructuring is an approach to access an object's properties. We use object destructuring because it dries our code by removing duplication. There are many reasons to use object destructuring. Today, let's talk about a few. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#property-assignment"&gt;
  &lt;/a&gt;
  Property Assignment
&lt;/h2&gt;

&lt;p&gt;It is most commonly seen as a way to assign a property to a variable. Traditionally, you may see property assignment like such:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Software Engineer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example, we declare an object called "person" with a few properties. We then declare a constant variable named "title" and set it to the "title" property of the object "person". We may participate in this type of variable assignment so as to use the title property often in an application. &lt;/p&gt;

&lt;p&gt;With object destructuring, we can create a simpler, more succinct version. Here is an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Software Engineer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Similarly, we declare an object "person" and a constant named "title". However, in our assignment, we assign the constant simply to the object "person". &lt;/p&gt;

&lt;p&gt;By wrapping our constant in brackets, we are telling our code to look to the object for a property with the same name as the constant we declare. &lt;/p&gt;

&lt;p&gt;In a simple example seen above, it may seem redundant or even silly to use object destructuring. However, as objects grow alongside applications, complexity ensues and the need for succinct, dry code also grows. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#multiple-property-assignment"&gt;
  &lt;/a&gt;
  Multiple Property Assignment
&lt;/h2&gt;

&lt;p&gt;Here is how we can use object destructuring to assign multiple properties at a single moment in our code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Software Engineer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And here is the "traditional", equivalent version:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Software Engineer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We removed quite a bit of code with object destructuring!&lt;/p&gt;

&lt;p&gt;How else can we use it?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aliases"&gt;
  &lt;/a&gt;
  Aliases
&lt;/h2&gt;

&lt;p&gt;We can use object destructuring to alias property names incase we do not want to use the original property name.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Software Engineer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;jobTitle&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example, we are still accessing "person.title", but we gave it a new identifier: "jobTitle". If we were to console "jobTitle", our return value would be "Software Engineer"! Cool, right?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#properties-in-nested-objects"&gt;
  &lt;/a&gt;
  Properties in Nested Objects
&lt;/h2&gt;

&lt;p&gt;In our previous example, our JavaScript object only portrayed properties with simple data types (i.e strings). While we love simplicity, JavaScript objects tend to be complex. A JavaScript object may have a property that is an array or an object itself. Here is an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Software Engineer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;previousJob&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SEO Specialist&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;location&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;NYC&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The "person" object has a property called "previousJob" and "previousJob" has two (2) properties, "title" and "location". This is nesting: we have an object inside another object. &lt;/p&gt;

&lt;p&gt;To access a property of a nested object, we can of course use object destructuring. Here's how:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Software Engineer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;previousJob&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SEO Specialist&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;location&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;NYC&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;previousJob&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;location&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt; 

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we ask our console, what "location" is, we will receive a return value of "NYC". &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#recap"&gt;
  &lt;/a&gt;
  Recap
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Object destructuring dries our code.&lt;/li&gt;
&lt;li&gt;Object destructuring assigns an object property to a variable.&lt;/li&gt;
&lt;li&gt;Object destructuring binds the property's value to a variable. &lt;/li&gt;
&lt;li&gt;Object destructuring is useful in complex applications. &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading"&gt;
  &lt;/a&gt;
  Thank you for reading!
&lt;/h3&gt;

&lt;p&gt;🌻 Comment below to continue the discussion. I would love to learn from you! 🌻&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>rails</category>
      <category>destructuring</category>
    </item>
    <item>
      <title>How to display content in multiple columns using CSS</title>
      <author>Kritika Pattalam Bharathkumar</author>
      <pubDate>Fri, 06 Aug 2021 00:21:15 +0000</pubDate>
      <link>https://dev.to/kritikapattalam/how-to-display-content-in-multiple-columns-using-css-3cfa</link>
      <guid>https://dev.to/kritikapattalam/how-to-display-content-in-multiple-columns-using-css-3cfa</guid>
      <description>&lt;p&gt;In this article, we are going to see how or when  orphans or widows property in CSS can be used in showing content as multiple columns. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[P.S : Refer the codepen given below to see visually how each property behaves]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Consider that you have a list of paragraphs and you want to show it in 3 or 4 columns and also decide where or how the content can break. Let's see the first step on how you can split the content in a simple way.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#simple-steps-on-how-to-show-content-into-multiple-columns"&gt;
  &lt;/a&gt;
  Simple steps on how to show content into multiple columns.
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Create a div with multiple paragraph tags or a ul with multiple li tags&lt;/li&gt;
&lt;li&gt;Add the below code snippet&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;columns: 3 //  should be a positive integer. Here the paragraph will be split into 3 columns.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.split-3-columns {
  display: block;
  columns: 3; // value based on how many columns you want the content to split
  height: 250px; // height of the div as per your need
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example, columns property accepts a positive integer value.Eg: value 3 means, the paragraphs will be split into 3 columns in the browser. &lt;br&gt;
When the content is split into multiple columns at times the layout or the paragraph might not look as expected.&lt;/p&gt;

&lt;p&gt;Eg: You might end up seeing something below, where in the second column, the column begins with the last line of the paragraph and seeing it in just two line looks weird. In this case you might wish that when the content does break you might want to show the last three lines of a paragraph at the start of the column instead of just two lines. This is where widows come into the picture. The same goes for the paragraph for &lt;strong&gt;"It was popularised..."&lt;/strong&gt; the first lines of the paragraph at the bottom of the column is in 2 lines, but you want to change how many lines of a paragraph are shown at the bottom of the column, this can be done using orphans.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aP_tAEWn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qfo06sqxu6ka7hmwsyzk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aP_tAEWn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qfo06sqxu6ka7hmwsyzk.png" alt="Example"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#orphans"&gt;
  &lt;/a&gt;
  Orphans
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;The orphans property sets the minimum number of lines that can stay by themselves at the bottom of a fragment(columns) before a fragmentation(column) break. The value must be positive and applies to block level container elements. This value typically affects the first line of the paragraph&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;In the below codepen example , orphan value has been set to 1. Hence if you check the paragraph &lt;strong&gt;"It was popularised in the 1960s"&lt;/strong&gt;, it breaks as a single line i.e if the paragraph at the bottom of the column is expected to break at the first few lines then it will make sure that atleast 1 line of paragraph is seen at the bottom of the column(fragment), if there is no enough space to break based on the orphan value then it will rather start in the next column.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.split-3-columns {
  display: block;
  orphans: 1; 
  columns: 3; // value based on how many columns you want the content to split
  height: 250px; // height of the div as per your need
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#widows"&gt;
  &lt;/a&gt;
  Widows
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;The widow property sets the minimum number of lines that can stay by themselves at the top of a new fragment(column) after a fragmentation(column) break. The value must be positive and applies to block level container elements. This value is typically for the last line of a paragraph&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;In the below codepen example , widows value has been set to 5. Hence if you check the paragraph &lt;strong&gt;"Lorem Ipsum is simply dummy "&lt;/strong&gt; you would see atleast there are 5 lines of text from the end of the parapgraph is shown at the top of the second new column/fragment.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.split-3-columns {
  display: block;
  widows: 5; 
  columns: 3; // value based on how many columns you want the content to split
  height: 250px; // height of the div as per your need
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/kpattalam/embed/mdmbBVP?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#browser-support"&gt;
  &lt;/a&gt;
  Browser support:
&lt;/h3&gt;

&lt;p&gt;This is supported in all major browsers except for firefox in desktop and android firefox in mobile.&lt;br&gt;
For more details refer the MDN docs given below in the references section.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/widows"&gt;Widows  - MDN docs&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/orphans"&gt;Orphans - MDN docs&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Follow me on  &lt;a href="https://twitter.com/KritikaPattalam"&gt;Twitter&lt;/a&gt;  | &lt;a href="https://www.linkedin.com/in/kritika-p-296739155/"&gt;LinkedIn&lt;/a&gt; for more web development related tips and posts.&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>programming</category>
      <category>html</category>
    </item>
    <item>
      <title>Solution to html/template: "your-template.tmpl" is undefined
</title>
      <author>iamlearning</author>
      <pubDate>Thu, 05 Aug 2021 23:43:34 +0000</pubDate>
      <link>https://dev.to/iamlearning/solution-to-html-template-your-template-tmpl-is-undefined-4aen</link>
      <guid>https://dev.to/iamlearning/solution-to-html-template-your-template-tmpl-is-undefined-4aen</guid>
      <description>&lt;h1&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h1&gt;

&lt;p&gt;First I thought when I execute a template I'm using relative filepath, but I was wrong because it actually using template name, which is the base file name (without the directory).&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#longer-explanation"&gt;
  &lt;/a&gt;
  Longer explanation
&lt;/h1&gt;

&lt;p&gt;While following the awesome &lt;a href="https://golang.org/doc/articles/wiki/"&gt;Golang wiki page assignment&lt;/a&gt;, I had hard time with putting the template files into a subdirectory and make them work.&lt;/p&gt;

&lt;p&gt;If you are here, you might have some of the following directory:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;├── IAmNew.txt
├── TestPage.txt
├── go.mod
├── tmpl
│   ├── page-edit.html
│   └── page-view.html
└── wiki.go
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And you have something similar code to this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;templates&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Must&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ParseGlob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"./tmpl/*.html"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or maybe you used the ParseFiles and have a list of files instead:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;templates&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Must&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ParseGlob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"tmpl/page-view.html"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"tmpl/page-edit.html"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;⚠️ Wrong way of executing templates&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;templates&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ExecuteTemplate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"tmpl/"&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;tmpl&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;".html"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;✅ I removed the directory prefix and it worked&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;templates&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ExecuteTemplate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tmpl&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;".html"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#explanation-from-the-documentation-itself"&gt;
  &lt;/a&gt;
  Explanation from the documentation itself
&lt;/h2&gt;

&lt;p&gt;ParseFiles creates a new Template and parses the template definitions from the named files. &lt;strong&gt;The returned template's name will have the (base) name&lt;/strong&gt; and (parsed) contents of the first file. There must be at least one file.&lt;br&gt;
If an error occurs, parsing stops and the returned *Template is nil.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#also-another-possible-reason-could-be"&gt;
  &lt;/a&gt;
  Also another possible reason could be
&lt;/h2&gt;

&lt;p&gt;When parsing multiple files with the same name in different directories, the last one mentioned will be the one that results. For instance, ParseFiles("a/foo", "b/foo") stores "b/foo" as the template named "foo", while "a/foo" is unavailable.&lt;/p&gt;

</description>
      <category>go</category>
      <category>template</category>
    </item>
    <item>
      <title>Vite vue ts tailwind template: Convert styles to TailwindCSS classes and configs (Part 1)</title>
      <author>Sardorbek Imomaliev</author>
      <pubDate>Thu, 05 Aug 2021 23:43:29 +0000</pubDate>
      <link>https://dev.to/imomaliev/vite-vue-ts-tailwind-template-convert-styles-to-tailwindcss-classes-and-configs-part-1-1mlj</link>
      <guid>https://dev.to/imomaliev/vite-vue-ts-tailwind-template-convert-styles-to-tailwindcss-classes-and-configs-part-1-1mlj</guid>
      <description>&lt;h2&gt;
  &lt;a href="#enable-raw-jit-endraw-mode"&gt;
  &lt;/a&gt;
  Enable &lt;code&gt;jit&lt;/code&gt; mode
&lt;/h2&gt;

&lt;p&gt;If you haven't heard, TailwindCSS 2.1+ has a &lt;a href="https://tailwindcss.com/docs/just-in-time-mode"&gt;&lt;code&gt;jit&lt;/code&gt;&lt;/a&gt; mode. It speeds up build times and allows a couple of extra features which take TailwindCSS's utility first approach to the next level&lt;/p&gt;

&lt;p&gt;Enabling &lt;code&gt;jit&lt;/code&gt; is pretty &lt;a href="https://tailwindcss.com/docs/just-in-time-mode#enabling-jit-mode"&gt;simple&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Update &lt;code&gt;tailwind.config.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="gi"&gt;+  mode: 'jit',
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git add -u&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git commit -m 'enable tailwindcss jit'&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#replace-existing-styles-with-tailwindcss-classes-in-raw-srcappvue-endraw-"&gt;
  &lt;/a&gt;
  Replace existing styles with TailwindCSS classes in &lt;code&gt;src/App.vue&lt;/code&gt;
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#replace-raw-fontfamily-endraw-"&gt;
  &lt;/a&gt;
  Replace &lt;code&gt;font-family&lt;/code&gt;
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Our first CSS property is &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/font-family"&gt;&lt;code&gt;font-family&lt;/code&gt;&lt;/a&gt; inside &lt;code&gt;#app&lt;/code&gt; styles. To set &lt;code&gt;font-samily&lt;/code&gt; for TailwindCSS project, we will use &lt;a href="https://tailwindcss.com/docs/font-family#customizing"&gt;&lt;code&gt;fontFamily&lt;/code&gt;&lt;/a&gt; configuration in our &lt;a href="https://tailwindcss.com/docs/configuration#theme"&gt;&lt;code&gt;theme&lt;/code&gt;&lt;/a&gt; section of &lt;code&gt;tailwind.config.js&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Update our code&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="gh"&gt;diff --git a/src/App.vue b/src/App.vue
index 1963bd4..9b68502 100644
&lt;/span&gt;&lt;span class="gd"&gt;--- a/src/App.vue
&lt;/span&gt;&lt;span class="gi"&gt;+++ b/src/App.vue
&lt;/span&gt;&lt;span class="p"&gt;@@ -17,7 +17,6 @@&lt;/span&gt; export default defineComponent({

 &amp;lt;style&amp;gt;
 #app {
&lt;span class="gd"&gt;-  font-family: Avenir, Helvetica, Arial, sans-serif;
&lt;/span&gt;   -webkit-font-smoothing: antialiased;
   -moz-osx-font-smoothing: grayscale;
   text-align: center;
&lt;span class="gh"&gt;diff --git a/tailwind.config.js b/tailwind.config.js
index 1858089..4d6d6e7 100644
&lt;/span&gt;&lt;span class="gd"&gt;--- a/tailwind.config.js
&lt;/span&gt;&lt;span class="gi"&gt;+++ b/tailwind.config.js
&lt;/span&gt;&lt;span class="p"&gt;@@ -2,6 +2,9 @@&lt;/span&gt; module.exports = {
   purge: ['./index.html', './src/**/*.{js,jsx,ts,tsx,vue}'],
   darkMode: false, // or 'media' or 'class'
   theme: {
&lt;span class="gi"&gt;+    fontFamily: {
+      sans: ['Avenir', 'Helvetica', 'Arial', 'sans-serif'],
+    },
&lt;/span&gt;     extend: {},
   },
   variants: {
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git add -u&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git commit -m 'set font as a part of a tailwind theme'&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#replace-raw-webkitfontsmoothing-endraw-and-raw-mozosxfontsmoothing-endraw-"&gt;
  &lt;/a&gt;
  Replace &lt;code&gt;-webkit-font-smoothing&lt;/code&gt; and &lt;code&gt;-moz-osx-font-smoothing&lt;/code&gt;
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Next properties are &lt;code&gt;-webkit-font-smoothing&lt;/code&gt; and &lt;code&gt;-moz-osx-font-smoothing&lt;/code&gt;. There is already &lt;a href="https://tailwindcss.com/docs/font-smoothing"&gt;a utility class&lt;/a&gt; for these properties. So we will use it with &lt;a href="https://tailwindcss.com/docs/functions-and-directives#apply"&gt;&lt;code&gt;@apply&lt;/code&gt;&lt;/a&gt; directive.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Update our code&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="gh"&gt;diff --git a/src/App.vue b/src/App.vue
index 9b68502..67fbaa8 100644
&lt;/span&gt;&lt;span class="gd"&gt;--- a/src/App.vue
&lt;/span&gt;&lt;span class="gi"&gt;+++ b/src/App.vue
&lt;/span&gt;&lt;span class="p"&gt;@@ -17,8 +17,6 @@&lt;/span&gt; export default defineComponent({

 &amp;lt;style&amp;gt;
 #app {
&lt;span class="gd"&gt;-  -webkit-font-smoothing: antialiased;
-  -moz-osx-font-smoothing: grayscale;
&lt;/span&gt;&lt;span class="gi"&gt;+  @apply antialiased;
&lt;/span&gt;   text-align: center;
   color: #2c3e50;
   margin-top: 60px;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git add -u&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git commit -m 'replace -webkit-font-smoothing and -moz-osx-font-smoothing with antialiased utily class'&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#replace-raw-textalign-endraw-"&gt;
  &lt;/a&gt;
  Replace &lt;code&gt;text-align&lt;/code&gt;
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;text-align&lt;/code&gt; is pretty straight forward as well. There are &lt;a href="https://tailwindcss.com/docs/text-align"&gt;text alignment utilities&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Update our code&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="gh"&gt;diff --git a/src/App.vue b/src/App.vue
index 67fbaa8..5c978a6 100644
&lt;/span&gt;&lt;span class="gd"&gt;--- a/src/App.vue
&lt;/span&gt;&lt;span class="gi"&gt;+++ b/src/App.vue
&lt;/span&gt;&lt;span class="p"&gt;@@ -17,7 +17,6 @@&lt;/span&gt; export default defineComponent({

 &amp;lt;style&amp;gt;
 #app {
&lt;span class="gd"&gt;-  @apply antialiased;
-  text-align: center;
&lt;/span&gt;&lt;span class="gi"&gt;+  @apply antialiased text-center;
&lt;/span&gt;   color: #2c3e50;
   margin-top: 60px;
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git add -u&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git commit -m 'replace text-align property with text-center class'&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#replace-raw-color-endraw-"&gt;
  &lt;/a&gt;
  Replace &lt;code&gt;color&lt;/code&gt;
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;General &lt;code&gt;color&lt;/code&gt; as &lt;code&gt;font-family&lt;/code&gt; should be set in &lt;code&gt;tailwind.config.js&lt;/code&gt;. We could use one of jit's features and set color inline with &lt;a href="https://tailwindcss.com/docs/just-in-time-mode#arbitrary-value-support"&gt;"Arbitrary value support"&lt;/a&gt; But in this case we will add a new color called &lt;code&gt;default&lt;/code&gt; in &lt;a href="https://tailwindcss.com/docs/text-color#customizing"&gt;&lt;code&gt;textColor&lt;/code&gt;&lt;/a&gt; by &lt;code&gt;extend&lt;/code&gt;ing our &lt;code&gt;theme&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Update our code&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="gh"&gt;diff --git a/src/App.vue b/src/App.vue
index 5c978a6..08379dd 100644
&lt;/span&gt;&lt;span class="gd"&gt;--- a/src/App.vue
&lt;/span&gt;&lt;span class="gi"&gt;+++ b/src/App.vue
&lt;/span&gt;&lt;span class="p"&gt;@@ -17,7 +17,6 @@&lt;/span&gt; export default defineComponent({

 &amp;lt;style&amp;gt;
 #app {
&lt;span class="gd"&gt;-  @apply antialiased text-center;
-  color: #2c3e50;
&lt;/span&gt;&lt;span class="gi"&gt;+  @apply antialiased text-center text-default;
&lt;/span&gt;   margin-top: 60px;
 }
 &amp;lt;/style&amp;gt;
&lt;span class="gh"&gt;diff --git a/tailwind.config.js b/tailwind.config.js
index c592ea4..8855955 100644
&lt;/span&gt;&lt;span class="gd"&gt;--- a/tailwind.config.js
&lt;/span&gt;&lt;span class="gi"&gt;+++ b/tailwind.config.js
&lt;/span&gt;&lt;span class="p"&gt;@@ -6,7 +6,11 @@&lt;/span&gt; module.exports = {
     fontFamily: {
       sans: ['Avenir', 'Helvetica', 'Arial', 'sans-serif'],
     },
&lt;span class="gd"&gt;-    extend: {},
&lt;/span&gt;&lt;span class="gi"&gt;+    extend: {
+      textColor: {
+        default: '#2c3e50'
+      }
+    },
&lt;/span&gt;   },
   variants: {
     extend: {},
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git add -u&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git commit -m 'add default color'&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#replace-raw-margintop-endraw-"&gt;
  &lt;/a&gt;
  Replace &lt;code&gt;margin-top&lt;/code&gt;
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;This is the last style in &lt;code&gt;#app&lt;/code&gt;. TailwindCSS uses &lt;code&gt;rem&lt;/code&gt;'s for &lt;a href="https://tailwindcss.com/docs/margin"&gt;&lt;code&gt;margin&lt;/code&gt;&lt;/a&gt; classes. We have &lt;code&gt;margin-top: 60px;&lt;/code&gt; in &lt;code&gt;rem&lt;/code&gt;'s it would be &lt;code&gt;3.75&lt;/code&gt;. By default, there is no class for this value. We could &lt;a href="https://tailwindcss.com/docs/margin#customizing"&gt;add&lt;/a&gt; one, but I prefer just choosing the closest one from already preconfigured ones. Which will be &lt;code&gt;mt-16&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Update our code&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="gh"&gt;diff --git a/src/App.vue b/src/App.vue
index 08379dd..93f2f31 100644
&lt;/span&gt;&lt;span class="gd"&gt;--- a/src/App.vue
&lt;/span&gt;&lt;span class="gi"&gt;+++ b/src/App.vue
&lt;/span&gt;&lt;span class="p"&gt;@@ -14,9 +14,3 @@&lt;/span&gt; export default defineComponent({
   },
 })
 &amp;lt;/script&amp;gt;

&amp;lt;style&amp;gt;
&lt;span class="err"&gt;#app&lt;/span&gt; {
&lt;span class="gd"&gt;-  @apply antialiased text-center text-default;
-  margin-top: 60px;
&lt;/span&gt;&lt;span class="gi"&gt;+  @apply antialiased text-center text-default m-16;
&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git add -u&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git commit -m 'replace margin-top property with class'&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#links"&gt;
  &lt;/a&gt;
  Links
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://tailwindcss.com/docs/just-in-time-mode"&gt;https://tailwindcss.com/docs/just-in-time-mode&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://tailwindcss.com/docs/text-color#text-colors"&gt;https://tailwindcss.com/docs/text-color#text-colors&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/font-family"&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/font-family&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://tailwindcss.com/docs/configuration#theme"&gt;https://tailwindcss.com/docs/configuration#theme&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://tailwindcss.com/docs/font-family#customizing"&gt;https://tailwindcss.com/docs/font-family#customizing&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://tailwindcss.com/docs/functions-and-directives#apply"&gt;https://tailwindcss.com/docs/functions-and-directives#apply&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://tailwindcss.com/docs/font-smoothing"&gt;https://tailwindcss.com/docs/font-smoothing&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://tailwindcss.com/docs/customizing-colors#extending-the-defaults"&gt;https://tailwindcss.com/docs/customizing-colors#extending-the-defaults&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://tailwindcss.com/docs/just-in-time-mode#arbitrary-value-support"&gt;https://tailwindcss.com/docs/just-in-time-mode#arbitrary-value-support&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://tailwindcss.com/docs/margin"&gt;https://tailwindcss.com/docs/margin&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://tailwindcss.com/docs/margin#customizing"&gt;https://tailwindcss.com/docs/margin#customizing&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#project"&gt;
  &lt;/a&gt;
  Project
&lt;/h2&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/imomaliev"&gt;
        imomaliev
      &lt;/a&gt; / &lt;a href="https://github.com/imomaliev/vue-ts-tailwind"&gt;
        vue-ts-tailwind
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Template vite vue typescript tailwind
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


</description>
      <category>vite</category>
      <category>vue</category>
      <category>tailwindcss</category>
    </item>
    <item>
      <title>7 Bad Coding Habits You Should Leave Right Now
</title>
      <author>Mr. Unity Buddy</author>
      <pubDate>Thu, 05 Aug 2021 23:16:55 +0000</pubDate>
      <link>https://dev.to/unitybuddy/7-bad-coding-habits-you-should-leave-right-now-2hjn</link>
      <guid>https://dev.to/unitybuddy/7-bad-coding-habits-you-should-leave-right-now-2hjn</guid>
      <description>&lt;p&gt;Hello, buddies! Bad habits are hard to break and even harder if you don't realize that what you're doing is undermining your work. If you know but don't care—that would be the worst. You lucky buddy, you are in the right article. Here are the 7 coding habits you might have and if you have them,   drop it right now.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-you-dont-focus-on-one-language"&gt;
  &lt;/a&gt;
  1. You don't focus on one language
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S7fECRJi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625371697883/SCpAwFJDH.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S7fECRJi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625371697883/SCpAwFJDH.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
To be a good programmer, you should master a language. A language about which you know everything. If you are good at Python, master Python first and after that go to another language. learn step by step. No one doesn't know everything 😉&lt;/p&gt;

&lt;p&gt;Instead of learning different languages, one should focus on mastering one language.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-acting-like-you-have-all-the-answers"&gt;
  &lt;/a&gt;
  2. Acting like you have all the answers.
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bPnbqxj2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625371879880/j0xV-hnFE.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bPnbqxj2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625371879880/j0xV-hnFE.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
It is good to be confident in life. But in programming, it is better to keep checking on the code you are working on.&lt;/p&gt;

&lt;p&gt;Knowing everything is okay. But it doesn’t mean that you won’t make any mistakes. When you are dealing with a big project, it may possible that there is a little syntax error. Being overconfident on what you know will lead you to make little mistakes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-refusing-to-ask-for-helpquestions"&gt;
  &lt;/a&gt;
  3. Refusing to ask for help/questions
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nT3ZkSl4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625371924040/jVx4ztndw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nT3ZkSl4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625371924040/jVx4ztndw.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
Not every time you can solve all the problems by yourself. The best programmer knows when to ask for help.&lt;/p&gt;

&lt;p&gt;While working in team projects, asking help from your team members will help you in interacting with them. You will able to know the abilities of your team members.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://unclebigbay.hashnode.dev/10-reasons-you-should-ask-questions"&gt;In this article&lt;/a&gt;, @&lt;a href="https://dev.to@unclebigbay"&gt;Ayodele Samuel Adebayo&lt;/a&gt; shows you 10 reasons why you should ask questions! &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-refusing-to-write-bad-code"&gt;
  &lt;/a&gt;
  4. Refusing to write bad code
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---xiFYHj9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625372173823/aDcE44kgK.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---xiFYHj9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625372173823/aDcE44kgK.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
There comes a time in every developer's life when deadlines will force you to write terrible code, and that’s okay. You’ve tried warning your client or manager about the consequences, but they insist on sticking to the deadline, so now it’s time to code. Or perhaps there’s an urgent bug that can’t wait for you to come up with a clean solution. That’s why it’s important to be versatile as a programmer and to be able to write poor code very quickly as well as good code. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-not-sharing-with-your-team-what-youve-learned"&gt;
  &lt;/a&gt;
  5. Not sharing with your team what you’ve learned
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rEug1YbZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625373688106/9FoqRMC0Z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rEug1YbZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625373688106/9FoqRMC0Z.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
The value of a developer is not only placed on the code you write, but also on what you learn when writing it. Share your experiences, write comments about it, let others know why things are the way they are, and help them learn new things about the project and its intricacies. Unofficial teams may look this as a joke and It's OK. You did your job and that's it!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-blindly-copypasting-code"&gt;
  &lt;/a&gt;
  6. Blindly copy/pasting code
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WxVAEjQf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625373931045/4-omxdyu4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WxVAEjQf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625373931045/4-omxdyu4.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
Getting help for StackOverflow is OK but, understand code before you reuse it. Always compare your code with it. Sometimes you don't immediately notice everything the code is doing at first glance. You will also learn more about a problem when you take the time to read the code in detail.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-saying-ill-fix-it-later"&gt;
  &lt;/a&gt;
  7. Saying, “I’ll fix it later”
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UjcJld89--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625374379137/E8IBM1AOX.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UjcJld89--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625374379137/E8IBM1AOX.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
Last but not least. The habit of postponing code fixes is not merely a problem of priorities. Organizing your issue tracker might generate some progress, but you also need to have a way of tracking smaller issues that come up. Adding “TODO” comments is a quick way of making sure you don’t miss anything.&lt;/p&gt;

&lt;p&gt;So here are the 7 bad(worst) habits you should drop right now. Happy Coding!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mr-unity-buddy.hashnode.dev/7-bad-coding-habits-you-should-leave-right-now"&gt;Originally&lt;/a&gt; published on Hahshnode&lt;/p&gt;

</description>
      <category>generalprogramming</category>
      <category>programming</category>
      <category>productivity</category>
      <category>developer</category>
    </item>
    <item>
      <title>Beep Boop 1: Intro to AI/ML</title>
      <author>Ornella Altunyan</author>
      <pubDate>Thu, 05 Aug 2021 23:12:18 +0000</pubDate>
      <link>https://dev.to/azure/beep-boop-1-intro-to-ai-ml-1la</link>
      <guid>https://dev.to/azure/beep-boop-1-intro-to-ai-ml-1la</guid>
      <description>&lt;p&gt;Thanks to everyone who joined us live for our 1st episode of &lt;a href="//aka.ms/BeepBoopSeries"&gt;Beep Boop with the Microsoft Reactor&lt;/a&gt;- it was so much fun chatting about our AI/ML experience and learning alongside y'all as we beeped and booped through some of our first &lt;a href="//aka.ms/beepbooplinks1"&gt;Microsoft Learn module&lt;/a&gt;! 👩‍💻👩🏽‍💻&lt;/p&gt;

&lt;p&gt;If you missed the fun live, don't worry- you can watch the replay &lt;a href="https://youtu.be/r3hQRXwkuiE"&gt;here&lt;/a&gt;, and in the embedded video below!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/r3hQRXwkuiE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;On this episode we cover:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://youtu.be/r3hQRXwkuiE?t=96"&gt;1:36&lt;/a&gt; &lt;a href="https://twitter.com/ornelladotcom"&gt;Ornella&lt;/a&gt; and &lt;a href="https://twitter.com/ChloeCondon"&gt;Chloe&lt;/a&gt; explain what exactly is a beep boop and what we're doing on the show! 🤖&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://youtu.be/r3hQRXwkuiE?t=563"&gt;9:23&lt;/a&gt; We chat about PER (player efficiency ratings in basketball), why ball is indeed life, and intro the first &lt;a href="https://docs.microsoft.com/en-us/learn/modules/predict-basketball-player-efficiency-ratings/?WT.mc_id=academic-33424-chcondon&amp;amp;WT.mc_id=academic-33556-ornella"&gt;Learn module&lt;/a&gt; that we'll be working on 🏀💯&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://youtu.be/r3hQRXwkuiE?t=985"&gt;16:25&lt;/a&gt; Download &lt;a href="https://code.visualstudio.com/?WT.mc_id=academic-33424-chcondon&amp;amp;WT.mc_id=academic-33556-ornella"&gt;VS Code&lt;/a&gt;, &lt;a href="https://www.python.org/"&gt;Python&lt;/a&gt; and the &lt;a href="https://marketplace.visualstudio.com/items?itemName=ms-python.python"&gt;Python extension&lt;/a&gt; to beep boop alongside us 👯‍♀️&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://youtu.be/r3hQRXwkuiE?t=1044"&gt;17:24&lt;/a&gt; Making sure everything is ready to goooo by &lt;a href="https://docs.microsoft.com/en-us/learn/modules/predict-basketball-player-efficiency-ratings/2-set-up-local-environment/?WT.mc_id=academic-33424-chcondon&amp;amp;WT.mc_id=academic-33556-ornella"&gt;setting up your local environment for data science coding&lt;/a&gt; and bringing in that &lt;a href="https://github.com/drguthals/learnwithdrg/blob/main/SpaceJamANewLegacy/player_data.csv"&gt;dataset&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://youtu.be/r3hQRXwkuiE?t=1808"&gt;30:08&lt;/a&gt; We're on the hunt for &lt;a href="https://docs.microsoft.com/en-us/learn/modules/predict-basketball-player-efficiency-ratings/3-find-missing-values/?WT.mc_id=academic-33424-chcondon&amp;amp;WT.mc_id=academic-33556-ornella"&gt;missing values&lt;/a&gt; in our dataset and we get rid of them by &lt;a href="https://docs.microsoft.com/en-us/learn/modules/predict-basketball-player-efficiency-ratings/4-drop-data/?WT.mc_id=academic-33424-chcondon&amp;amp;WT.mc_id=academic-33556-ornella"&gt;dropping rows and columns&lt;/a&gt; - NaN no thank you 🙅🏽‍♀️ &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://youtu.be/r3hQRXwkuiE?t=2415"&gt;40:15&lt;/a&gt; We &lt;a href="https://docs.microsoft.com/en-us/learn/modules/predict-basketball-player-efficiency-ratings/5-check-for-outliers/?WT.mc_id=academic-33424-chcondon&amp;amp;WT.mc_id=academic-33556-ornella"&gt;check for outliers&lt;/a&gt; and reminisce about the childhood magic of box 📦 and whisker 🐱 plots &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://youtu.be/r3hQRXwkuiE?t=2957"&gt;49:17&lt;/a&gt; We &lt;a href="https://docs.microsoft.com/en-us/learn/modules/predict-basketball-player-efficiency-ratings/6-check-data-distribution?WT.mc_id=academic-33424-chcondon&amp;amp;WT.mc_id=academic-33556-ornella"&gt;check the distribution of the data using histograms&lt;/a&gt; 📊 (not to be confused with historical instagrams 🎞)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://youtu.be/r3hQRXwkuiE?t=3551"&gt;59:11&lt;/a&gt; A meet n greet with our show mascot, Franklin 🐶🦴&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Did you have fun? Check out &lt;a href="//aka.ms/beepboopseries"&gt;Beep Boop 2: Use Machine Learning Models to Prep Your Data&lt;/a&gt; where we continue on this PERfect journey together - see ya then, friends!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>3 Tips to be SUCCESSFUL at DevOps</title>
      <author>Davide 'CoderDave' Benvegnù</author>
      <pubDate>Thu, 05 Aug 2021 23:10:41 +0000</pubDate>
      <link>https://dev.to/n3wt0n/3-tips-to-be-successful-at-devops-5f8h</link>
      <guid>https://dev.to/n3wt0n/3-tips-to-be-successful-at-devops-5f8h</guid>
      <description>&lt;p&gt;Today I have for you &lt;strong&gt;3 tips&lt;/strong&gt; that will help you &lt;strong&gt;be more successful in your DevOps career&lt;/strong&gt;, and they apply to every type of DevOps Role.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h3&gt;

&lt;p&gt;I have been working "in DevOps and with DevOps" for the most part of the last 14 years. I've covered many different roles, and worked with big and small clients. And today I wanna share with you how &lt;strong&gt;you can be more successful at DevOps&lt;/strong&gt;. As I've mentioned I have 3 tips that will help you in your DevOps Career. Actually, I also have a &lt;strong&gt;bonus one&lt;/strong&gt; at the end so I guess that makes it 4 tips.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-tips"&gt;
  &lt;/a&gt;
  The Tips
&lt;/h3&gt;

&lt;p&gt;In short, those are the tips. But &lt;strong&gt;&lt;em&gt;check the video below 👇🏻 for the whole explanation&lt;/em&gt;&lt;/strong&gt; on each of those:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Think out of the box&lt;/strong&gt;, be a problem solver, be the person others look to when they need a solution&lt;/li&gt;
&lt;li&gt;Find a way to &lt;strong&gt;automate&lt;/strong&gt; more&lt;/li&gt;
&lt;li&gt;Always &lt;strong&gt;experiment&lt;/strong&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The Bonus tip? Check the video below for it 🎬&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#video"&gt;
  &lt;/a&gt;
  Video
&lt;/h3&gt;

&lt;p&gt;Here you have &lt;strong&gt;the video with the whole explanation&lt;/strong&gt; about the 3 tips and also the &lt;strong&gt;&lt;em&gt;bonus&lt;/em&gt;&lt;/strong&gt; tip.&lt;/p&gt;

&lt;p&gt;Enjoy the watch 😉&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/A-NeIPCLSRU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/A-NeIPCLSRU"&gt;Link to the video: https://youtu.be/A-NeIPCLSRU&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h3&gt;

&lt;p&gt;Let me know in the comment section below what you think about those 3+1 tips. Do you agree with me? Or do you have anything else you can share that made YOU successful at DevOps?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Like, share and follow me&lt;/strong&gt; 🚀 for more content:&lt;/p&gt;

&lt;p&gt;📽 &lt;a href="https://www.youtube.com/CoderDave"&gt;YouTube&lt;/a&gt;&lt;br&gt;
☕ &lt;a href="https://buymeacoffee.com/CoderDave"&gt;Buy me a coffee&lt;/a&gt;&lt;br&gt;
💖 &lt;a href="https://patreon.com/CoderDave"&gt;Patreon&lt;/a&gt;&lt;br&gt;
🌐 &lt;a href="https://coderdave.io"&gt;CoderDave.io Website&lt;/a&gt;&lt;br&gt;
👕 &lt;a href="https://geni.us/cdmerch"&gt;Merch&lt;/a&gt;&lt;br&gt;
👦🏻 &lt;a href="https://www.facebook.com/CoderDaveYT"&gt;Facebook page&lt;/a&gt;&lt;br&gt;
🐱‍💻 &lt;a href="https://github.com/n3wt0n"&gt;GitHub&lt;/a&gt;&lt;br&gt;
👲🏻 &lt;a href="https://www.twitter.com/davide.benvegnu"&gt;Twitter&lt;/a&gt;&lt;br&gt;
👴🏻 &lt;a href="https://www.linkedin.com/in/davidebenvegnu/"&gt;LinkedIn&lt;/a&gt;&lt;br&gt;
🔉 &lt;a href="https://geni.us/cdpodcast"&gt;Podcast&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/CoderDave"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/A-NeIPCLSRU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>devops</category>
      <category>codenewbie</category>
      <category>tips</category>
      <category>success</category>
    </item>
  </channel>
</rss>
