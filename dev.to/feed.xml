<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to hide Feature A and show Feature B for different users in React</title>
      <author>Alex Barashkov</author>
      <pubDate>Tue, 20 Jul 2021 15:16:18 +0000</pubDate>
      <link>https://dev.to/alex_barashkov/how-to-hide-feature-a-and-show-feature-b-for-different-users-in-react-j6e</link>
      <guid>https://dev.to/alex_barashkov/how-to-hide-feature-a-and-show-feature-b-for-different-users-in-react-j6e</guid>
      <description>&lt;h3&gt;
  &lt;a href="#overview"&gt;
  &lt;/a&gt;
  Overview
&lt;/h3&gt;

&lt;p&gt;Have you ever wondered how do companies like Slack, Netlify, Zoom, Facebook (and rest of FAANG for sure)  gradually roll out new features just for some users?  🤔  &lt;/p&gt;

&lt;p&gt;Wonder no more! It is done via Feature Flags (or FF for short) and we're just about to dive into this concept.&lt;/p&gt;

&lt;p&gt;Feature Flags services work the following way. You define a list of features(eg. dark mode, horizontal login layout, design 2.0) and assign it to a group of users specifying conditions whether it should be enabled or disabled.&lt;/p&gt;

&lt;p&gt;Chances are that you've already used FF in your projects but wasn't aware of this. Did you store in a database some booleans that indicate whether particular user should have an access to a certain feature? If yes, then congratulations - you indeed have experience working with feature flags.&lt;/p&gt;

&lt;p&gt;Booleans in DB were good up to a certain point, but progress never stops and now we have much more flexible and dev friendly way to control feature presence. Let's take a look at feature flags services.  FF services have the following bonuses:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;UI where you can define and manage features&lt;/li&gt;
&lt;li&gt;Users segmentation&lt;/li&gt;
&lt;li&gt;A/B testing&lt;/li&gt;
&lt;li&gt;Flags analytics&lt;/li&gt;
&lt;li&gt;Staged feature rollouts&lt;/li&gt;
&lt;li&gt;SDKs for different languages/frameworks&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this article, we are going to use &lt;a href="https://github.com/Flagsmith/flagsmith"&gt;Flagsmith&lt;/a&gt; - open source feature flag and remote config service, but you can check commercial alternatives such as &lt;a href="https://launchdarkly.com/"&gt;LaunchDarkly&lt;/a&gt;. Our goal is to learn how to start using feature flags in React and make the process of launching new functionality for users smoother.&lt;/p&gt;

&lt;p&gt;FF manipulation with Flagsmith can be done pretty much anywhere (frontend/backend/mobile platform). Let's take a look at the following schema: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ri8eP2U3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/70xojzecxzyo7tmgrwyy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ri8eP2U3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/70xojzecxzyo7tmgrwyy.png" alt="diagram"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Let's break down what is happening here.&lt;/p&gt;

&lt;p&gt;1) User requests the page&lt;br&gt;
2) A certain side of your app (FE/BE) makes a call to Flagsmith service with user uuid&lt;br&gt;
3) Flagsmith matches received uuid with the configuration of available features for this particular user and returns the info on that&lt;br&gt;
4) App generates a page based on received feature info&lt;/p&gt;

&lt;p&gt;Definitely not a rocket science. Now to practice! &lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Flagsmith"&gt;
        Flagsmith
      &lt;/a&gt; / &lt;a href="https://github.com/Flagsmith/flagsmith"&gt;
        flagsmith
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Feature flagging and remote config service. Host yourself or use our hosted version at https://flagsmith.com/
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#our-goal"&gt;
  &lt;/a&gt;
  Our goal
&lt;/h3&gt;

&lt;p&gt;We want to build pretty much standard dashboard app (sorry, no todos today) with authorization set up. We want to show certain feature components only to those users who opted-in for beta. &lt;/p&gt;

&lt;p&gt;React, Next.js, Next-Auth and beautiful dashboard components from Tailwind UI are going to help us building it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dN2TSMBD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7c0sxyirkx8wzplpi8om.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dN2TSMBD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7c0sxyirkx8wzplpi8om.png" alt="4-pinned-projects"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prerequirements"&gt;
  &lt;/a&gt;
  Pre-requirements
&lt;/h3&gt;

&lt;p&gt;Create a new app with Next.js, React and Next-Auth or clone this &lt;a href="https://github.com/Flagsmith/flagsmith-js-client/tree/main/examples/nextjs-auth"&gt;sample repository&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Additional links&lt;/p&gt;

&lt;p&gt;&lt;a href="https://nextjs.org/docs/getting-started"&gt;Getting started with Next.js&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://next-auth.js.org/getting-started/introduction"&gt;Getting started with nextauth&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://flagsmith.com/"&gt;Then create an account&lt;/a&gt; in the cloud version of Flagsmith.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9orzVOJb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zxnnpxq5xrcdb4eice5a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9orzVOJb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zxnnpxq5xrcdb4eice5a.png" alt="1-sing-up"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#configure-flagsmith-environment"&gt;
  &lt;/a&gt;
  Configure Flagsmith environment
&lt;/h3&gt;

&lt;p&gt;The configuration process is simple. Once you've signed up, create a new project. In Flagsmith you can define multiple environments per project, each environment keeps its own features/users/segments and API key.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NQLGLJBf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7mme9h5kf9m0e5jl7ew8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NQLGLJBf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7mme9h5kf9m0e5jl7ew8.png" alt="2-onboarding"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's create our first feature, we will name it - "pinned_projects". Beta users will be able to pin projects and see them.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T-lcXQwq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qbsi72oxlx36wfgieu65.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T-lcXQwq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qbsi72oxlx36wfgieu65.png" alt="3-create-feature"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next step we need to install &lt;code&gt;flagsmith-react&lt;/code&gt; package&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="nx"&gt;flagsmith&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;react&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As an initial step, we will wrap our _app.js with &lt;code&gt;FlagsmithProvider&lt;/code&gt; and pass Flagsmith API key, which we can get from the Settings page in Flagsmith UI. FlagsmithProvider will allow to use &lt;code&gt;useFlagsmith&lt;/code&gt; hook and pass the state to underlying components.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Auth&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;components/auth&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Provider&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;SessionProvider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next-auth/client&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;FlagsmithProvider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;flagsmith-react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../styles/globals.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MyApp&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pageProps&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FlagsmithProvider&lt;/span&gt; &lt;span class="na"&gt;environmentId&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NEXT_PUBLIC_FLAGSMITH_API_KEY&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;SessionProvider&lt;/span&gt; &lt;span class="na"&gt;session&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;pageProps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Auth&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Component&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;pageProps&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Auth&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Component&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;pageProps&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;SessionProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;FlagsmithProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;FlagsmithProvider&lt;/code&gt; will initialise Flagsmith javascript client under the hood and you will be able to start getting flags declared in the UI. But it does not make too much sense unless we get user-specific flags. To let Flagsmith know which user requests flags, we need to &lt;code&gt;identify&lt;/code&gt; him. The perfect place for this Auth component, that responsible for checking user session and redirecting users to the sign-in page in case it's expired.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useSession&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;signIn&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next-auth/client&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useFlagsmith&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;flagsmith-react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Auth&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;identify&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isIdentified&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getTrait&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setTrait&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useFlagsmith&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useSession&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// Identify user and set email trait if does not exist&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;identifyUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;identify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hasEmail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="nx"&gt;getTrait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;hasEmail&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setTrait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Do nothing while loading&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isUser&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;signIn&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// If not authenticated, force log in&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isUser&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isUser&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isIdentified&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// In the example we don't save users in the database so we don't have id that should be used for identification&lt;/span&gt;
      &lt;span class="c1"&gt;// Instead we're going to use email as a trait and id&lt;/span&gt;
      &lt;span class="nx"&gt;identifyUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isIdentified&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;identify&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isUser&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isUser&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// Session is being fetched, or no user.&lt;/span&gt;
  &lt;span class="c1"&gt;// If no user, useEffect() will redirect.&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here you can see that we use &lt;code&gt;getTrait&lt;/code&gt; and &lt;code&gt;setTrait&lt;/code&gt;. Traits are simply key/value pairs that are associated with individual Identities. You can pass any additional information to the user, that later could be used for segmentation eg. current plan, opt-in for beta features or newsletters, etc. &lt;/p&gt;

&lt;p&gt;Let's create first segment and call it &lt;code&gt;beta_opt_in&lt;/code&gt; . Go to Segments → Create Segment. Here you also could define an expression based on the trait which will add users that match that condition to the segment. We can start from a simple one, such as if email has &lt;code&gt;[pixelpoint.io](http://pixelpoint.io)&lt;/code&gt; consider them as opted-in for beta features.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3I8xRa1c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/auwahcvy2viz7vhzhmue.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3I8xRa1c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/auwahcvy2viz7vhzhmue.png" alt="5-segment"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The final step is to add a check to our React component using &lt;code&gt;hasFeature("pinned_projects")&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;hasFeature&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useFlagsmith&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;main&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"flex-1 relative z-0 overflow-y-auto focus:outline-none"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"border-b border-gray-200 px-4 py-4 sm:flex sm:items-center sm:justify-between sm:px-6 lg:px-8"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;HomeHeader&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;hasFeature&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pinned_projects&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"px-4 mt-6 sm:px-6 lg:px-8"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;PinnedProjects&lt;/span&gt; &lt;span class="na"&gt;items&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;pinnedProjects&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ProjectsTable&lt;/span&gt; &lt;span class="na"&gt;items&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;projects&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;main&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#here-you-go"&gt;
  &lt;/a&gt;
  Here you go!
&lt;/h3&gt;

&lt;p&gt;If you've been following along, by this time you should have a nice little pet project demonstrating a modern approach to feature flags. Congratulations🎉&lt;/p&gt;

&lt;p&gt;Don't hesitate to extend it or leverage the idea in your existing project.&lt;/p&gt;

&lt;p&gt;P.S. Further reading&lt;/p&gt;

&lt;p&gt;In this article we just took a quick glance at Feature Flags and built a simple example app, but FF system is capable of much more. Check out: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.flagsmith.com/advanced-use/ab-testing"&gt;A/B testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.flagsmith.com/advanced-use/flag-analytics"&gt;Feature flags analytics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.flagsmith.com/advanced-use/staged-feature-rollouts"&gt;Staged rollouts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>beginners</category>
      <category>webdev</category>
      <category>opensource</category>
      <category>react</category>
    </item>
    <item>
      <title>FlaskCaption - Basic Flask Project</title>
      <author>Atharva Shirdhankar</author>
      <pubDate>Tue, 20 Jul 2021 14:45:30 +0000</pubDate>
      <link>https://dev.to/star_trooper/flaskcaption-basic-flask-project-p03</link>
      <guid>https://dev.to/star_trooper/flaskcaption-basic-flask-project-p03</guid>
      <description>&lt;p&gt;&lt;strong&gt;Pre-requisites:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Python 3 or higher.&lt;/li&gt;
&lt;li&gt;Flask&lt;/li&gt;
&lt;li&gt;Html and CSS&lt;/li&gt;
&lt;li&gt;Editor - VSCode / PyCharm&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Part 1: Dependencies Installation&lt;/strong&gt;&lt;br&gt;
Open terminal and install the following dependencies.&lt;br&gt;
Commands :&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;pip install flask&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pip install SpeechRecognition&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Part 2: Setting-Up Project&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Now create a folder give it anyname. Here, I have given folder name as Flaskproject.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1HTKoLCU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/efs24f8fjunh09sjocg0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1HTKoLCU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/efs24f8fjunh09sjocg0.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now, open the empty folder in VSCode or PyCharm IDE(I preferred VSCode).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Inside the empty folder we have to create a python file (app.py), a templates directory and static directory and inside static directory create styles directory.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fVrDxg92--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o4mphvg78na8dbesqqpj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fVrDxg92--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o4mphvg78na8dbesqqpj.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Part 3: Coding&lt;/strong&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open the app.py file and enter the following code:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Code &lt;code&gt;app.py&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from flask import Flask, render_template , request , redirect
import speech_recognition as sr

app = Flask(__name__)

@app.route("/", methods=["GET","POST"])
def index():
    transcript = ''
    if request.method == "POST":
         print("FORM DATA RECEIVED")

         if "file" not in request.files:
              return redirect(request.url)

         file = request.files["file"]
         if file.filename == "":
             return redirect(request.url)

         if file:
             recognizer = sr.Recognizer()  
             wavfile = sr.AudioFile(file)
             with wavfile as source:
                 data = recognizer.record(source)
             transcript = recognizer.recognize_google(data, key=None)

    return render_template('index.html' , transcript = transcript)

if __name__ == " main ":
    app.run(debug=True, threaded=True)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;2.Create index.html file in templates directory:&lt;/p&gt;

&lt;p&gt;Code &lt;code&gt;index.html&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en"&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset="UTF-8"&amp;gt;
    &amp;lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&amp;gt;
    &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&amp;gt;
    &amp;lt;title&amp;gt;FlaskProject - AudiotoText&amp;lt;/title&amp;gt;
    &amp;lt;link rel="stylesheet" href="{{url_for('static', filename='styles/style.css')}}"&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;header&amp;gt;FlaskCaption&amp;lt;/header&amp;gt;
    &amp;lt;div id="mainContainer"&amp;gt;
        &amp;lt;h2&amp;gt;Upload Audio File&amp;lt;/h2&amp;gt;
        &amp;lt;form method="post" enctype="multipart/form-data"&amp;gt;
           &amp;lt;input type="file" name="file" id="fileinput"&amp;gt;
           &amp;lt;br&amp;gt;
           &amp;lt;input type="submit" id="submitButton" value="Process"/&amp;gt;

        &amp;lt;/form&amp;gt;
        {% if transcript != "" %}
        &amp;lt;div class="speechTranscriptContainer"&amp;gt;
            &amp;lt;h1&amp;gt;Transcripted Text&amp;lt;/h1&amp;gt;
            &amp;lt;p&amp;gt;{{transcript}}&amp;lt;/p&amp;gt;
        &amp;lt;/div&amp;gt;
        {% endif %}

    &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;3.Create a styles.css file inside static/styles directory:&lt;/p&gt;

&lt;p&gt;Code &lt;code&gt;style.css&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
body{
    margin: 0;
    padding: 0;
    background-color: aliceblue;

}

h1, p , input{
    font-family: cursive;
}

header{
    display: flex;
    justify-content: center; 
    font-size: 50px;
    font-family: Georgia, 'Times New Roman', Times, serif;
}

#mainContainer{
    display: flex;
    align-items: center;
    flex-direction: column;
    border-radius: 10px;
    background-color: white;
    margin-top: 15%;   
}

#submitButton{
    background-color: #0191FE;
    color: white;
    border: none;
    border-radius: 10px;
    margin-top: 10px;
    margin-left: 30%;
    padding: 10px;   
}

#submitButton:hover{
    cursor: pointer;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Part 4: Execution&lt;/strong&gt;&lt;br&gt;
To run the flask webapp we need one command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;flask run
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--39-a7-pO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l2hujywqdffmpyg3h818.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--39-a7-pO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l2hujywqdffmpyg3h818.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This command will run our flask webapp locally on port number 5000 by default.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Part 5: Output&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pWi_eYJV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3r7rxeqw6yaae6mm3lf2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pWi_eYJV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3r7rxeqw6yaae6mm3lf2.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Part 6: Final File Structure:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0uJi6beB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/du6x5ssp75p1puw21p8v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0uJi6beB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/du6x5ssp75p1puw21p8v.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Some Pros of the Project:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The accuracy of converting the &lt;strong&gt;Audio(Speech)&lt;/strong&gt; to convert &lt;strong&gt;text&lt;/strong&gt; is almost &lt;strong&gt;92%&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Some Cons of the Project:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The project only take .wav file as a input.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Resources&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://github.com/StarTrooper08/FlaskCaption"&gt;Github Repository&lt;/a&gt;&lt;br&gt;
&lt;a href="https://pypi.org/project/Flask/"&gt;Flask Doc&lt;/a&gt;&lt;br&gt;
&lt;a href="https://pypi.org/project/SpeechRecognition/"&gt;SpeechRecognition Doc&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>flask</category>
    </item>
    <item>
      <title>JSON in AssemblyScript</title>
      <author>Jairus Tanaka</author>
      <pubDate>Tue, 20 Jul 2021 14:44:53 +0000</pubDate>
      <link>https://dev.to/assemblyscript/json-in-assemblyscript-28cg</link>
      <guid>https://dev.to/assemblyscript/json-in-assemblyscript-28cg</guid>
      <description>&lt;p&gt;&lt;strong&gt;Finally, AssemblyScript has a fully-functional JSON implementation.&lt;/strong&gt; &lt;em&gt;&lt;a href="https://github.com/aspkg/as-json"&gt;as-json&lt;/a&gt;&lt;/em&gt; implements full JSON compatibility that enables AssemblyScript to use JSON to communicate with APIs, store data, and more. In this article, I will introduce you to &lt;em&gt;as-json&lt;/em&gt; and help you include it into your project.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;as-json&lt;/em&gt; uses the same general API as the JavaScript JSON object. We can then use it just like JS. However, we must install and prep it first.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;json-as
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nt"&gt;--transform&lt;/span&gt; json-as/transform
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Installation complete. Lets use some JSON! 🔥&lt;/p&gt;

&lt;p&gt;&lt;em&gt;json-test.ts&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;json-as&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Create the Schemas&lt;/span&gt;
&lt;span class="c1"&gt;// @ts-ignore&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;json&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;JSONSchema&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;human&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;location&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;f64&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// @ts-ignore&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;json&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Meta&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;country&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;awesome&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Create the JSON object&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSONSchema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jairus&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Tanaka&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;human&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;country&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;US&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;awesome&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;english&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;location&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;43.130850291&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;32.926401705&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// Now, encode and decode&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;encoded&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Encoded: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;encoded&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;decoded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;JSONSchema&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;encoded&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Decoded:`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`{`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;` firstName: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;decoded&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;,`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;` lastName: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;decoded&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;,`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;` age: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;decoded&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;,`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;` human: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;decoded&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;human&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;,`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;` meta: {`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`   country: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;decoded&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;country&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;,`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`   awesome: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;decoded&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;awesome&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;` },`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;` language: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;decoded&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;language&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;` location: [&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;decoded&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;decoded&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt;]`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`}`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note: If you are not running in WASI, use as-console instead.&lt;/p&gt;

&lt;p&gt;So, &lt;em&gt;json-as&lt;/em&gt; serialized and deserialized JSON. Lets see if it was correct.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;json-test.ts&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;json-as&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Create the Schemas&lt;/span&gt;
&lt;span class="c1"&gt;// @ts-ignore&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;json&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;JSONSchema&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;human&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;location&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;f64&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// @ts-ignore&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;json&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Meta&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;country&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;awesome&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Create the JSON object&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSONSchema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jairus&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Tanaka&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;human&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;country&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;US&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;awesome&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;english&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;location&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;43.130850291&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;32.926401705&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// Now, encode and decode&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;encoded&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;decoded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;JSONSchema&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;encoded&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// We perform an equality check&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;encoded&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;decoded&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Yay! JSON-AS works! 😄&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Oof. JSON-AS died.😖&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yay! JSON is now working for AssemblyScript. Go ahead and mess around with it and let me know what you make.&lt;br&gt;
NPM: &lt;a href="https://www.npmjs.com/package/json-as"&gt;https://www.npmjs.com/package/json-as&lt;/a&gt;&lt;br&gt;
GitHub: &lt;a href="https://github.com/aspkg/as-json"&gt;https://github.com/aspkg/as-json&lt;/a&gt;&lt;br&gt;
Thanks for reading 😁&lt;/p&gt;

</description>
      <category>webassembly</category>
      <category>javascript</category>
      <category>typescript</category>
    </item>
    <item>
      <title>A Illustrated Guide To: Fusion Development</title>
      <author>Nitya Narasimhan</author>
      <pubDate>Tue, 20 Jul 2021 14:24:31 +0000</pubDate>
      <link>https://dev.to/azure/a-illustrated-guide-to-fusion-development-22l4</link>
      <guid>https://dev.to/azure/a-illustrated-guide-to-fusion-development-22l4</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;TL;DR: Key resources for learning more!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;👩🏽‍💻 &lt;a href="https://docs.microsoft.com/en-us/learn/paths/transform-business-applications-with-fusion-development/?WT.mc_id=azurefunctionsonlearntv-35831-ninarasi"&gt;Explore the Fusion Development Learning Path&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;👩🏽‍🏫 &lt;a href="https://docs.microsoft.com/en-us/powerapps/guidance/fusion-dev-ebook/?WT.mc_id=azurefunctionsonlearntv-35831-ninarasi"&gt;Read the Fusion Development eBook&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;📺 &lt;a href="https://channel9.msdn.com/Events/Azure-Functions/Azure-Functions-Discover-OpenAPI-and-Power-Apps?WT.mc_ID=azurefunctionsonlearntv-35831-ninarasi"&gt;Watch Azure Functions Sessions On-Demand&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;🗺 &lt;a href="https://aka.ms/visual/fusion-dev-path/illustrated"&gt;Download a hi-res poster of the Illustrated Guide&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;This is a low-resolution image for the illustrated guide. Click on it to access the hi-res image -- or scroll down for a deep-dive into the illustrations.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aka.ms/visual/fusion-dev-path/illustrated"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OCSfvhrx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pm9ralwv9bccbfhnlpm1.png" alt="An Illustrated Guide to Fusion Development: Shows a 25-cell 5x5 grid of images, each illustrating one unit or section of the Fusion Dev Learning Path "&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#background"&gt;
  &lt;/a&gt;
  Background
&lt;/h2&gt;

&lt;p&gt;Recently, a few colleagues of mine hosted an online event that explores the topics of &lt;a href=""&gt;OpenAPI&lt;/a&gt;, &lt;a href=""&gt;Power Platforms&lt;/a&gt; and &lt;a href=""&gt;Fusion Development&lt;/a&gt; in a series of short, actionable talks. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/azure" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__org__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TSIs2QqE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--MdxUgcr_--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/512/64ce0b82-730d-4ca0-8359-2c21513a0063.jpg" alt="Microsoft Azure"&gt;
      &lt;div class="ltag__link__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vOJaOvLG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--bjwYsbM9--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/8619/686ae69d-8c31-462d-bd5e-c373a688e99d.png" alt=""&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/azure/azure-functions-discover-open-api-a-learning-event-1okh" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Azure Functions: Discover OpenAPI &amp;amp; Power Apps - A Learning Event! &lt;/h2&gt;
      &lt;h3&gt;Nitya Narasimhan for Microsoft Azure ・ Jul 6 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#azure&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#openapi&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#powerfuldevs&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#serverless&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;Didn't get a chance to attend the live event? Or just want to revisit a specific session? We have you covered! All the session replays are now available &lt;a href="https://channel9.msdn.com/Events/Azure-Functions/Azure-Functions-Discover-OpenAPI-and-Power-Apps?WT.mc_ID=azurefunctionsonlearntv-35831-ninarasi"&gt;here on Ch9&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ISqV8K5m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4fl4i7wxnsoj9js5vfu4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ISqV8K5m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4fl4i7wxnsoj9js5vfu4.png" alt="Image shows 6 speaker cards for the 6 sessions from the Azure Functions event, each linked to a video for replay"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#learning-resources"&gt;
  &lt;/a&gt;
  Learning Resources
&lt;/h2&gt;

&lt;p&gt;The event was structured around the broader theme of &lt;em&gt;low-code development&lt;/em&gt; and &lt;em&gt;fusion teams&lt;/em&gt;. Want to dive into more details? &lt;/p&gt;

&lt;p&gt;We have resources to suit your learning style:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;👩🏽‍💻 &lt;a href="https://docs.microsoft.com/en-us/learn/paths/transform-business-applications-with-fusion-development/?WT.mc_id=azurefunctionsonlearntv-34311-ninarasi"&gt;The Fusion Development Learning Path&lt;/a&gt; for kinesthetic learners. Explore concept step-by-step, with hands-on exercises. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;👩🏽‍🏫 &lt;a href="https://docs.microsoft.com/en-us/powerapps/guidance/fusion-dev-ebook/?WT.mc_id=azurefunctionsonlearntv-35831-ninarasi"&gt;The Fusion Development eBook&lt;/a&gt; if learn by reading. Go from Fusion Development concepts, to code - using Power Plaform to build low-code apps!&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you're a visual or visual-spatial learner who likes to "see the big picture" before you dive into details - then this illustrated guide to Fusion Development is for you!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#the-illustrated-guide"&gt;
  &lt;/a&gt;
  The Illustrated Guide
&lt;/h2&gt;

&lt;p&gt;The illustrated guide is part of my &lt;a href="https://twitter.com/sketchthedocs"&gt;SketchTheDocs&lt;/a&gt; initiative to bring visual storytelling to tech. 65% of us are visual learners who absorb, retain, and recall, information better when we have visual cues and illustrations.&lt;/p&gt;

&lt;p&gt;Scroll up to see a low-res (thumbnail) of the illustrated guide, or visit &lt;a href="https://aka.ms/visual/fusion-dev-path/illustrated"&gt;this link&lt;/a&gt; to view or download a poster-sized version that is easier to read. Better still, install it as desktop wallpaper while you go through the learning path - and see if you can make or reinforce connections.&lt;/p&gt;

&lt;p&gt;You can also visit this tweet for a 30-second timelapse that shows how the guide was created.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2RLIUi_l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/ext_tw_video_thumb/1415091010430963712/pu/img/TLVSWk54amhnLyKX.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--hCF7KqCo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1336782118924455944/K4ZDwHHg_normal.png" alt="Nitya Narasimhan profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Nitya Narasimhan
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/nitya"&gt;@nitya&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Sneak peek at a Visual Guide to Fusion Development - illustrated summary of a &lt;a href="https://twitter.com/MSFTLearn"&gt;@MSFTLearn&lt;/a&gt; path built by my colleagues to show how pro-devs &amp;amp; citizen devs can work together to develop apps for biz needs.&lt;br&gt;&lt;br&gt;Learn path:&lt;br&gt;&lt;a href="https://t.co/Au7j5ThrtB"&gt;aka.ms/visual/fusion-…&lt;/a&gt;&lt;br&gt;&lt;br&gt;Related Event:&lt;br&gt;&lt;a href="https://t.co/GGGcdDijOk"&gt;docs.microsoft.com/en-us/events/l…&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      23:36 PM - 13 Jul 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1415092751348211714" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1415092751348211714" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1415092751348211714" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;





&lt;h2&gt;
  &lt;a href="#under-the-hood"&gt;
  &lt;/a&gt;
  Under The Hood
&lt;/h2&gt;

&lt;p&gt;I'm working on a blog post that I will link in later, that provides a deep dive into the individual cells. &lt;/p&gt;

&lt;p&gt;For now, let's look under the hood at a few visuals that showcase core themes:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-tech-intensity"&gt;
  &lt;/a&gt;
  1. Tech Intensity
&lt;/h3&gt;

&lt;p&gt;Chance are you've heard Microsoft CEO (Satya Nadella) mention &lt;code&gt;Tech Intensity&lt;/code&gt; more than once. But what does it mean? Here's an illustrated explainer of the concept. Digital transformation cannot succeed without three dimensions that building on each other: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;technology adoption&lt;/em&gt; readiness for real-world use &lt;/li&gt;
&lt;li&gt;
&lt;em&gt;organizational trust&lt;/em&gt; that technology is reliable&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;individual capability&lt;/em&gt; to build &amp;amp; use technology&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MfbT07lB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rnwxk3brr6gjh89amup3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MfbT07lB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rnwxk3brr6gjh89amup3.png" alt="Image visualizing the Tech Intensity lesson"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Learn more &lt;a href="https://docs.microsoft.com/en-us/learn/modules/transform-business-software-authoring-with-fusion-dev/2-tech-intensity?WT.mc_id=azurefunctionsonlearntv-35831-ninarasi"&gt;in this unit&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-fusion-development-process"&gt;
  &lt;/a&gt;
  2. Fusion Development Process
&lt;/h3&gt;

&lt;p&gt;Fusion Teams reflect our growing awareness that solving real-world business problems will require the skills of diverse teams (business devs, pro devs, citizen devs) &lt;em&gt;working together&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;A Fusion Development Process is about breaking the silos between teams, and providing tools and workflows that empower &lt;em&gt;all types of devs&lt;/em&gt; to build apps by contributing their expertise (where comfortable) and asking others for help (where they have skill gaps).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vSTomw9z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eia1ib5or0i8pbtk4dcx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vSTomw9z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eia1ib5or0i8pbtk4dcx.png" alt="Image visualizing the Fusion Development process"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Learn more &lt;a href="https://docs.microsoft.com/en-us/learn/modules/transform-business-software-authoring-with-fusion-dev/4-fusion-development-process?WT.mc_id=azurefunctionsonlearntv-35831-ninarasi"&gt;in this unit&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-low-code-development"&gt;
  &lt;/a&gt;
  3. Low Code Development
&lt;/h3&gt;

&lt;p&gt;While fusion development explores the human workflows required to build apps, the low code development focus is on &lt;em&gt;removing barriers&lt;/em&gt; that prevent different fusion team members from contributing to app development.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;High Code Apps&lt;/em&gt; reflect traditional notions of app development, with rich programming languages, frameworks and workflows, and more &lt;strong&gt;imperative&lt;/strong&gt; approaches to development.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Low Code Apps&lt;/em&gt; are about more action with &lt;em&gt;less code&lt;/em&gt;, employing scripting languages, drag-and-drop UI wizards, and more &lt;strong&gt;declarative&lt;/strong&gt; approaches to development.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zNIhfHtl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kjv7xx5o1u2dnpl72o7x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zNIhfHtl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kjv7xx5o1u2dnpl72o7x.png" alt="Image visualizing the meaning of Low Code Development"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Learn more &lt;a href="https://docs.microsoft.com/en-us/learn/modules/understanding-low-code-as-a-traditional-developer/?WT.mc_id=azurefunctionsonlearntv-35831-ninarasi"&gt;in this module&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-power-apps-platform"&gt;
  &lt;/a&gt;
  4. Power Apps Platform
&lt;/h3&gt;

&lt;p&gt;Power Apps is &lt;a href="https://powerplatform.microsoft.com/en-us/power-apps/"&gt;part of Microsoft's Power Platform&lt;/a&gt; suite of technologies supporting low-code development. Citizen developers can use this to rapidly prototype apps without requiring a programming background. Pro developers can enhance fusion team development by using platform tools to build web APIs, data connectors, and serverless integration support for their team-mates.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wxFiYmdq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o7tplcloiiw220is0zwv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wxFiYmdq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o7tplcloiiw220is0zwv.png" alt="Image visualizing Power Apps technology"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Learn more &lt;a href="https://docs.microsoft.com/en-us/learn/modules/understanding-low-code-as-a-traditional-developer/2-what-is-low-code?WT.mc_id=azurefunctionsonlearntv-35831-ninarasi"&gt;in this unit&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#summary-amp-next-steps"&gt;
  &lt;/a&gt;
  Summary &amp;amp; Next Steps
&lt;/h3&gt;

&lt;p&gt;That was a rapid introduction to Fusion Development and related terms and technologies. I hope you found it fun &lt;strong&gt;and&lt;/strong&gt; functional - and that it inspires you to want to learn more!&lt;/p&gt;

&lt;p&gt;Here are some resources for next steps! Happy learning journeys!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;👩🏽‍💻 &lt;a href="https://docs.microsoft.com/en-us/learn/paths/transform-business-applications-with-fusion-development/?WT.mc_id=azurefunctionsonlearntv-35831-ninarasi"&gt;Explore the Fusion Development Learning Path&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;👩🏽‍🏫 &lt;a href="https://docs.microsoft.com/en-us/powerapps/guidance/fusion-dev-ebook/?WT.mc_id=azurefunctionsonlearntv-35831-ninarasi"&gt;Read the Fusion Development eBook&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;📺 &lt;a href="https://channel9.msdn.com/Events/Azure-Functions/Azure-Functions-Discover-OpenAPI-and-Power-Apps?WT.mc_ID=azurefunctionsonlearntv-35831-ninarasi"&gt;Watch Azure Functions Sessions On-Demand&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;🗺 &lt;a href="https://aka.ms/visual/fusion-dev-path/illustrated"&gt;Download a hi-res poster of the Illustrated Guide&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;




</description>
      <category>beginners</category>
      <category>powerfuldevs</category>
      <category>azure</category>
      <category>openapi</category>
    </item>
    <item>
      <title>Write Better Java Project</title>
      <author>Suraj Vishwakarma</author>
      <pubDate>Tue, 20 Jul 2021 14:10:27 +0000</pubDate>
      <link>https://dev.to/surajondev/write-better-java-project-2055</link>
      <guid>https://dev.to/surajondev/write-better-java-project-2055</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;When we first started our coding journey. The program used to be short. The compiler was enough to know all the technical errors and warnings. We go on to solve those errors.&lt;/p&gt;

&lt;p&gt;As we kept on learning and developing projects. The codebase was getting larger, the complexity increases. It becomes hard to keep up with the code quality and code structures. &lt;/p&gt;

&lt;p&gt;Now the compiler can only show code errors but as a whole project was unable to provide any data.&lt;br&gt;
In such a case a program that can detect errors in the whole package can be very handy. So one such tool is Jarchitect.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-jarchitect"&gt;
  &lt;/a&gt;
  What is Jarchitect?
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://www.jarchitect.com/"&gt;Jarchitect&lt;/a&gt; is a software for analyzing the Java-based project developed by CodeGear in 2009. It was intended to help developers to create a better project by providing different statistics and metrics.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bUP7GWDb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_FD83CA05E4BCD846F3B1797E9CD3AF5F3B8D0C7F77F0A66004462BB887D17B63_1625812508040_transparentlogo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bUP7GWDb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_FD83CA05E4BCD846F3B1797E9CD3AF5F3B8D0C7F77F0A66004462BB887D17B63_1625812508040_transparentlogo.png" alt="Jarchitect"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The software is efficient in providing statics about the project. It supports a large number of metrics with visualization of dependency with dependency graphs and matrix graphs. It provides code quality with pre-defined quality metrics.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Code Querying&lt;/strong&gt;: You can write the custom query to check for different conditions and can perform actions accordingly. It uses CQLinq for queries.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Quality Gates&lt;/strong&gt;: A quality gate is various check son the code to determine the overall quality of the software. It can fail a build if certain criteria do not meet.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Issue Management&lt;/strong&gt;: There can be a number of issues that are detected by the software. It has an issue management panel that helps you to manage your all issue in one place.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Code Quality Metrics&lt;/strong&gt;: It comes with code quality metrics that measure the quality of code. The number of lines in a code is one of the measures of code quality. Jarchitect comes with 80+ metrics.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Plugin Interaction&lt;/strong&gt;: The data extracted by Jarchitect can be more useful with the integration of plugins.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Diagrams&lt;/strong&gt;: It provides graphs to show statistics. &lt;/li&gt;
&lt;li&gt;It shows the following graphs:

&lt;ul&gt;
&lt;li&gt;Treemap Metrics&lt;/li&gt;
&lt;li&gt;Dependencies Matrix&lt;/li&gt;
&lt;li&gt;Dependencies Graph&lt;/li&gt;
&lt;li&gt;Abstractness vs Instability&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can check more features and read in detail about listed features &lt;a href="https://www.jarchitect.com/features"&gt;&lt;strong&gt;Here&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  PROS
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Useful Metrics&lt;/strong&gt;: It provides many useful metrics that can be used to improve the software and code quality.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Easily Query through Data&lt;/strong&gt;: You can query through the data to perform conditions on extracted data.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Many types of data&lt;/strong&gt;: There are many metrics and are indifferent formats such as string, graphs, diagrams, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--It0NRyFG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_FD83CA05E4BCD846F3B1797E9CD3AF5F3B8D0C7F77F0A66004462BB887D17B63_1626688421879_dashboard.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--It0NRyFG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_FD83CA05E4BCD846F3B1797E9CD3AF5F3B8D0C7F77F0A66004462BB887D17B63_1626688421879_dashboard.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  CONS
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;UI/UX&lt;/strong&gt;: The UI felt very old. It will take some time to be used to the interface as many panels are displayed on the screen at a time.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8d5iSnCu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_FD83CA05E4BCD846F3B1797E9CD3AF5F3B8D0C7F77F0A66004462BB887D17B63_1626688438918_jarchitectscreenshot.jpg" alt=""&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://www.jarchitect.com/GettingStarted"&gt;The software&lt;/a&gt; is good for finding issues and errors in the project. It has some useful data such as technical debt, code quality, etc. But due to bad UI, it makes it harder to notice all the usage metrics. Some are lost and some are hidden. Also, the pricing can be an issue for individual developers, especially with newbies.&lt;/p&gt;

&lt;p&gt;It has a &lt;a href="https://www.jarchitect.com/download"&gt;14-day free trial&lt;/a&gt;, I highly recommend you to try it once and find if it is useful for you.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#last-note"&gt;
  &lt;/a&gt;
  Last Note
&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Thanks for reading the blog post. One secret is that Jarchitect has approached me to write this review.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>java</category>
      <category>beginners</category>
      <category>productivity</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>Creating a Spotify Web Clone with ReactJS+Spotify WEB API.</title>
      <author>sumit kumar bighaniya</author>
      <pubDate>Tue, 20 Jul 2021 13:41:19 +0000</pubDate>
      <link>https://dev.to/ammyy9908/creating-a-spotify-web-clone-with-reactjs-spotify-web-api-1b8g</link>
      <guid>https://dev.to/ammyy9908/creating-a-spotify-web-clone-with-reactjs-spotify-web-api-1b8g</guid>
      <description>&lt;p&gt;Pre View:&lt;a href="https://romantic-wozniak-9ac9cd.netlify.app"&gt;View:&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this post i represent how i build a spotify clone web app using ReactJS+Redux using Spotify Web API...&lt;a href="https://developer.spotify.com/documentation/web-api/"&gt;Read docs.&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#note"&gt;
  &lt;/a&gt;
  Note::
&lt;/h3&gt;

&lt;p&gt;We cannot play audio of any song because this feature is not yet updated in spotify web api docs.&lt;/p&gt;

&lt;p&gt;hence in this project user can view their spotify data in terms of application.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#actors-of-the-application"&gt;
  &lt;/a&gt;
  Actors of the Application:
&lt;/h3&gt;

&lt;p&gt;Non-Premium Spotify Users:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;* Check their latest played song
* Visit Spotify User profile.
* Check their saved &amp;amp; liked playlists.
* View which device playing current song in song player.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Premium Spotify Users:&lt;br&gt;
    * The above 4 features of Non Premium Users is also same for the Premium users &lt;br&gt;
    in addition with this premium users can control player i.e user can play Next, Previous song, stop or resume the current played song, user can also control device volume by sliding the user control in player.&lt;/p&gt;

&lt;p&gt;Github Repo:&lt;a href="https://github.com/Ammyy9908/spotify"&gt;Repo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Please 🌟 the repo if you like.&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>css</category>
      <category>beginners</category>
      <category>react</category>
    </item>
    <item>
      <title>Github Copilot, useState e useEffects</title>
      <author>Sergio</author>
      <pubDate>Tue, 20 Jul 2021 13:23:29 +0000</pubDate>
      <link>https://dev.to/sergjun/github-copilot-usestate-e-useeffects-dep</link>
      <guid>https://dev.to/sergjun/github-copilot-usestate-e-useeffects-dep</guid>
      <description>&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table Of Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#introducao"&gt;Introdução&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#useState"&gt;useState&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#useEffect"&gt;useEffect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Copilot"&gt;Github Copilot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Links"&gt;Links úteis&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;Introdução&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Recentemente, comecei a estudar React no curso do &lt;a href="https://estartandodevs.com.br/"&gt;Estardando Devs&lt;/a&gt; e acabamos estudando esses dois hooks primordiais, &lt;b&gt;useState&lt;/b&gt; e o &lt;b&gt;useEffect&lt;/b&gt;, algumas coisas sobre ambos conceitos ficaram um tanto quanto confusas para mim, então, depois de muito apanhar e praticar fui pesquisar e procurar entender mais sobre ambos para complementar o meu conhecimento. &lt;/p&gt;

&lt;p&gt;Resolvi escrever esse texto para fixar mais esse aprendizado e talvez até ajudar qualquer pessoa que venha a ter dúvida semelhantes a minha, durante esse meio tempo de aprendizado, o meu acesso ao Github Copilot foi liberado e eu achei interessante narrar como foi "aprender" algo com uma tecnologia de I.A me dando algum auxilio e como ela funciona.  &lt;/p&gt;

&lt;p&gt;Reforçando que, esse texto se limita as minhas opiniões e experiencias;&lt;br&gt;
 &lt;/p&gt;

&lt;p&gt;Não irei entrar nos conceitos de &lt;b&gt;"O que é hook"&lt;/b&gt; ou explicações profundas sobre o &lt;b&gt;React&lt;/b&gt;, nem acho que tenho conhecimento para tal ainda, usarei exemplos simples mas funcionais que me ajudaram a entender melhor os conceitos e no final do texto irei deixar links de artigos que eu li/estou lendo para ter uma compreensão mais detalhada sobre tudo o que está sendo escrito aqui.  &lt;/p&gt;

&lt;p&gt;Criticas e sugestões sobre o conteúdo o texto são sempre bem vindas, por favor, se achou algo errado/mal escrito ou coisa do tipo, me oriente que eu irei arrumar assim que possível!  &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;useState&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Pelas minhas pesquisas e por uma leve quantidade de dedução,o &lt;b&gt;useState&lt;/b&gt;, é o primeiro hook que geralmente é mostrado quando React é ensinado ou falado,  na documentação oficial do React o exemplo que nós é apresentado é em forma de contador, escrito em código ficaria mais ou menos assim:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
import React, { useState } from 'react;

function Example() {
    const [count, setCount] = useState(0)

    return (

            &amp;lt;p&amp;gt;You clicked {count} times&amp;lt;/p&amp;gt;
            &amp;lt;button&amp;gt; setCount(count + 1)}&amp;amp;gt;
                Click me
            &amp;lt;/button&amp;gt;

    );
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Antes de eu dar minha explicação sobre como consegui entender melhor o que o useState faz, vou postar a forma feito em Javascript puro pra mostrar exatamente o que o count é e o que o setCount são:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
let count = 0;

const setCount = (value) =&amp;amp;gt; {
    count = value
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;O useState tem dois valores, o primeiro é uma &lt;b&gt;variável&lt;/b&gt; e o segundo é uma &lt;b&gt;função&lt;/b&gt;,e o trabalho dessa função é basicamente atualizar a variável!&lt;/p&gt;

&lt;p&gt;Exemplificando a variável agora que esse exemplo está claro:&lt;/p&gt;

&lt;p&gt;&lt;b&gt;const [count, setCount] = useState(0)&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;const&lt;/b&gt; - declaração de que a variável é uma const.&lt;br&gt;
&lt;b&gt;[count, setCount ]&lt;/b&gt; - desestruturação do array, onde &lt;b&gt;count&lt;/b&gt; é a variável e &lt;b&gt;setCount&lt;/b&gt; - é a função que atualiza o estado dessa variável.&lt;br&gt;
&lt;b&gt; useState(0)&lt;/b&gt; - passando o parâmetro inicial para a função e consequentemente para a variável, ou seja, &lt;b&gt;count&lt;/b&gt; ira começar em &lt;b&gt;(0)&lt;/b&gt;&lt;/p&gt;

&lt;h4&gt;Reforçando que:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;useState é um &lt;b&gt;array&lt;/b&gt;, mas seu retorno não está limitado a tal, no exemplo acima foi passado um nú mero, porem poderia ter sido passado uma string &lt;b&gt;" "&lt;/b&gt; (vazia ou não), ou um objeto &lt;b&gt;{ }&lt;/b&gt; (vazio ou não) &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ainda sobre a ideia de ser um array, a desestruturação do mesmo é opcional e facilita muito a leitura, mas poderia ser usado dessa forma:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; const arrayState = useState(0);
 const count = arrayState[0]; 
 const setCount = arrayState[1];
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Um ultimo exemplo usando dois useStates para exemplificar:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function App () {
    const [count, setCount] = useState (0)
    const [theme, setTheme] = useState ("")

    function decrementCount () {
        setCount(prevCount =&amp;amp;gt; prevCount -1)
        setTheme('green')
    }

    function incrementCount() {
        setCount(prevCount =&amp;amp;gt; prevCount +1)
        setTheme('blue')
    }

    return (
        &amp;amp;lt;&amp;amp;gt;
        &amp;lt;button&amp;gt; - &amp;lt;/button&amp;gt;
        &amp;lt;span&amp;gt;{count}&amp;lt;/span&amp;gt;
        &amp;lt;span&amp;gt;{theme}&amp;lt;/span&amp;gt;
        &amp;lt;button&amp;gt; + &amp;lt;/button&amp;gt; 
        &amp;amp;gt;
    )
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;No código acima, temos dois useState, um para gerenciar a variável &lt;b&gt;count&lt;/b&gt; inicialmente declarado como &lt;b&gt;0&lt;/b&gt;, e um para gerenciar a variável &lt;b&gt;theme&lt;/b&gt;, inicialmente declarado como " " (uma string vazia), e temos dois botões no fim do código onde, cada um deles tem uma função diferente atribuída, ao se clicar no botão de &lt;b&gt;-&lt;/b&gt; a variável &lt;b&gt;count&lt;/b&gt; sera subtraída em 1 e a variável &lt;b&gt;theme&lt;/b&gt; vai renderizar &lt;b&gt;green&lt;/b&gt; na tela, ao clicar no botão de &lt;b&gt;+&lt;/b&gt; a variável &lt;b&gt;count&lt;/b&gt; sera somada em 1 e a variável &lt;b&gt;theme&lt;/b&gt; ira renderizar &lt;b&gt;blue&lt;/b&gt;!&lt;br&gt;
 &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;useEffect&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Confesso que esse eu demorei um pouco mais para entender, o conceito e o que fazia, mas com o exemplo que eu vi, e irei escrever aqui, ficou claro e bem mais compreensível. &lt;/p&gt;

&lt;p&gt;Dada a minha própria limitação, não sera tão extenso quanto o &lt;b&gt;useState&lt;/b&gt; foi, mas acredito que ficará claro! &lt;/p&gt;

&lt;p&gt;Um jeito simples de se entender o useEffect de inicio é, pensar em um bloco de código que você deseja executar toda vez que algum componente for renderizado, isso ficou bem confuso de inicio mas o exemplo abaixo me fez entender melhor:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function App () {
    const [resourceType, setResourceType] = useState ('')

    console.log('render')

    useEffect (() =&amp;amp;gt; {
        console.log("resourceType changed")

    }, [resourceType] )

    return (
        &amp;amp;lt;&amp;amp;gt;

                &amp;lt;button&amp;gt; setResourceType('post')}&amp;amp;gt;Post&amp;lt;/button&amp;gt;
                &amp;lt;button&amp;gt; setResourceType('users')}&amp;amp;gt;Users&amp;lt;/button&amp;gt;
                &amp;lt;button&amp;gt; setResourceType('comments')}&amp;amp;gt;Comments&amp;lt;/button&amp;gt;

            &amp;lt;h1&amp;gt;{resourceType}&amp;lt;/h1&amp;gt;
        &amp;amp;gt;
    )
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;De inicio, temos a utilização do useState novamente, como dito na parte de cima, ele é uma hook que ira controlar estados, &lt;b&gt;resourceType&lt;/b&gt; é a variável e &lt;b&gt;setResourceType&lt;/b&gt; a função que atualiza o valor dessa variável, e de inicio está sendo passado uma string vazia para ela &lt;b&gt;( ' ' )&lt;/b&gt;. &lt;/p&gt;

&lt;p&gt;Logo abaixo dessa declaração, temos um &lt;b&gt;console.log&lt;/b&gt; que ira renderizar a palavra render, e em seguida temos o uso do &lt;b&gt;useEffect&lt;/b&gt;, o mesmo recebe uma função como parâmetro (que pelo o que eu vi, quase sempre será uma arrow function) e essa função irá rodar outro &lt;b&gt;console.log&lt;/b&gt; com a frase resourceType changed, e no fim do &lt;b&gt;useEffect&lt;/b&gt;, temos um array com um parâmetro, nesse caso o &lt;b&gt;resourceType&lt;/b&gt;, a nossa variável lá do inicio. &lt;/p&gt;

&lt;p&gt;Na ultima parte, temos a renderização, três botoes, cada botão executando a função &lt;b&gt;setResourceType&lt;/b&gt; e em cada um deles um parâmetro diferente é passado, no primeiro botão, o parâmetro é o &lt;b&gt;post&lt;/b&gt;, no segundo botão, o parâmetro é &lt;b&gt;users&lt;/b&gt;, e no terceiro o parâmetro é &lt;b&gt;comments&lt;/b&gt;. &lt;/p&gt;

&lt;p&gt;A funcionalidade do useEffect no exemplo acima será a seguinte: &lt;/p&gt;

&lt;p&gt;Quando esse componente for renderizado, ele ira exibir no console a palavra render devido aquele primeiro console.log, ao se clicar em qualquer um dos botões, o &lt;b&gt;h1&lt;/b&gt; da página irá renderizar de acordo com o botão (&lt;b&gt;post &lt;/b&gt;ou &lt;b&gt;users&lt;/b&gt; ou &lt;b&gt;comments&lt;/b&gt;) e ira exibir resourceType changed que estava no segundo console.log dentro do useEffect. &lt;/p&gt;

&lt;p&gt;Isso acontece pois, como parâmetro, no useEffect, nos passamos o &lt;b&gt;resourceType&lt;/b&gt; dentro daquele array, com isso, o bloco de código dentro do useEffect só sera rodado se o &lt;b&gt;resourceType&lt;/b&gt; for modificado! &lt;/p&gt;

&lt;p&gt;Se não houvesse parametro no array, e o mesmo estivesse vazio &lt;b&gt;[ ]&lt;/b&gt;, o bloco do useEffect seria usado apenas uma vez, durante a primeira renderização! &lt;/p&gt;

&lt;p&gt;Se clicar no botão do &lt;b&gt;Post&lt;/b&gt; uma vez, quando qualquer um dos dois outros parâmetros (&lt;b&gt;users&lt;/b&gt; ou &lt;b&gt;comments&lt;/b&gt;) estiver renderizado na tela, as duas mensagens serão exibidas, pois ao clicar no botão você chamou a função &lt;b&gt;setResourceType&lt;/b&gt; e assim modificou o &lt;b&gt;resourceType&lt;/b&gt; fazendo com que o código do bloco &lt;b&gt;useEffect&lt;/b&gt; seja executado, mas se após isso, você clicar novamente no mesmo botão, você tera apenas um dos consoles.log, o de render, fora do useEffect, pois o &lt;b&gt;resourceType&lt;/b&gt; segue sem ser modificado, era um &lt;b&gt;Post&lt;/b&gt; e você clicando no mesmo botão ele continua sendo um &lt;b&gt;Post&lt;/b&gt;, segue inalterado. &lt;/p&gt;

&lt;p&gt;Esse foi o exemplo mais simples que consegui achar e ver na pratica o useEffect e facilitou demais o entendimento do mesmo para mim, por isso achei interessante escrever ele para reforçar, só que, o useEffect não se limita a isso, há um conceito mais abrangente nele que envolve &lt;b&gt;React class lifecycle methods&lt;/b&gt; e &lt;b&gt;componentDidMount, componentDidUpdate, e componentWillUnmount&lt;/b&gt; (infelizmente não consegui achar o nome desses conceitos em português e não achei uma boa ideia fazer tradução ao pé da letra). &lt;/p&gt;

&lt;p&gt;Não posso falar sobre esses conceitos pois, ainda estou estudando e entendendo tudo isso, talvez num texto futuro eu escreva sobre, irei deixar os links que eu estou acompanhando e se aprofundam mais nesses assuntos na ultima parte! &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;Github Copilot&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Por fim, minha experiencia com a inteligencia artificial de copiloto! &lt;/p&gt;

&lt;p&gt;Bom, fiquei bem feliz ao receber no sábado o convite para o acesso antecipado do programa, estava (estou ainda na real) construindo um site para consumir a API do Github e exibir algumas informações e por coincidência recebi o convite no meio desse processo, mesmo sendo um projeto "simples" a primeira aparição do Copilot foi quase que imediata. &lt;/p&gt;

&lt;p&gt;Após a extensão ser instalada, você pode começar a utilizar o copiloto, usando a tag de comentário no Javascript &lt;b&gt;(//)&lt;/b&gt; e descrevendo o que você tem intenção de fazer geralmente retorna algo, utilizei as palavras fetch github api e em instantes depois de alguns enters o seguinte código me foi retornado:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function App() {
 //fetch data from github API
 const [data, setData] = useState(null);
 useEffect(() =&amp;amp;gt; {
   fetch("https://api.github.com/users/sergjun/repos")
     .then(response =&amp;amp;gt; response.json())
     .then(repos =&amp;amp;gt; setData(repos))
 }, []);

 return (

     &amp;lt;h2&amp;gt;
       Top languages
     &amp;lt;/h2&amp;gt;
     {data &amp;amp;amp;&amp;amp;amp; data.map((repo, i) =&amp;amp;gt; (

         &amp;lt;h4&amp;gt;{repo.name}&amp;lt;/h4&amp;gt;
         &amp;lt;p&amp;gt;{repo.description}&amp;lt;/p&amp;gt;

     ))}

 );
}

export default App;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Um fetch honesto ( ao meu ver de iniciante ) onde ele faz justamente o que se propõe, a única coisa que eu alterei no período em que estava testando foi o retorno do parâmetro do useState (&lt;b&gt;null&lt;/b&gt;), por algum motivo esse valor acabava quebrando a aplicação, ao se colocar um retorno de string vazia (&lt;b&gt;" "&lt;/b&gt;) ela parava de crashar. &lt;/p&gt;

&lt;p&gt;Essa foi a vez que o Copilot mais "deu as caras", no resto do código, não sei se por falha minha, ou dele, ou talvez a "complexidade" da aplicação, ele não palpitou e honestamente, não fez tanta falta, ficou ao meu ver sendo bem parecido com snippets ou trechos de código meio que prontos que as vezes você copia e altera algumas coisas. &lt;/p&gt;

&lt;p&gt;Ainda assim, é uma tecnologia muito interessante, que estou curioso para ver como irá evoluir e se comportar nos próximos tempos, é bem interessante ver as soluções propostas por ele, outras pessoas já disseram isso de forma exaustiva mas sempre é bom reforçar, não adianta copiar e colar, em algumas das sugestões, o mesmo fazia a sugestão de utilização de react com classes e de nada adiantaria eu usar um código daquele tipo sendo que nada entenderia.&lt;br&gt;
 &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;Links úteis&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Como eu falei, sou iniciante nisso tudo, há um mar de informações e diversas referencias pelas quais se pode procurar por ai, estou usando essas e aceito toda e qualquer tipo de contribuição!&lt;br&gt;
 &lt;br&gt;
 &lt;/p&gt;

&lt;p&gt;&lt;a href="https://pt-br.reactjs.org/docs/getting-started.html"&gt;Documentação oficial do React&lt;/a&gt;&lt;br&gt;
  &lt;br&gt;
&lt;a href="https://dev.to/dan_abramov/making-sense-of-react-hooks-2eib"&gt;Um texto do Dan Abramov falando sobre Hooks (inglês)&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;
&lt;a href="https://pt-br.reactjs.org/docs/hooks-intro.html"&gt;Documentação oficial do React introduzindo hooks&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;
&lt;a href="https://javascript.plainenglish.io/react-hooks-how-to-use-useeffect-ecea3e90d84f"&gt;Artigo muito bom falando sobre useEffect que o @ramonrxm me passou, muito obrigado, mais uma vez! (inglês)&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;
&lt;a href="https://blog.webdevsimplified.com/2020-04/use-effect/"&gt;Artigo do autor do canal "web dev simplified" falando sobre useEffects, alguns exemplos foram tirados do canal dele, dos vídeos de useState e useEffect, recomendo demais! (inglês)&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>github</category>
      <category>react</category>
      <category>learninpublic</category>
    </item>
    <item>
      <title>SWR + Dynamic Routes in Next.js</title>
      <author>Jannik Baranczyk</author>
      <pubDate>Tue, 20 Jul 2021 13:16:33 +0000</pubDate>
      <link>https://dev.to/wh1zk1d/swr-dynamic-routes-in-next-js-3cbl</link>
      <guid>https://dev.to/wh1zk1d/swr-dynamic-routes-in-next-js-3cbl</guid>
      <description>&lt;p&gt;Hey folks!&lt;/p&gt;

&lt;p&gt;If you recently worked with client side data fetching in Next.js, you probably heard of &lt;a href="https://swr.vercel.app/"&gt;SWR&lt;/a&gt;. It comes with &lt;code&gt;useSWR&lt;/code&gt;, a React hook that makes all the complicated stuff in client side data fetching (caching, revalidation, focus tracking etc.) easy as pie.&lt;/p&gt;

&lt;p&gt;You can implement it with just a few lines of code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Import the hook&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;useSWR&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;swr&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Define a custom fetcher function&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetcher&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Profile&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Use the hook to fetch your data&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useSWR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/api/user&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fetcher&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;failed&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;load&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;hello&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Easy, right? Well, it definitely is when you try to fetch an endpoint with no query parameters, like &lt;code&gt;/api/user&lt;/code&gt;. But when you try to pass a dynamic route parameter to your &lt;code&gt;useSWR&lt;/code&gt; hook, things can get a little bit tricky. I recently spent some time figuring out a solution for this, so I thought I should share my solution.&lt;/p&gt;

&lt;p&gt;Let's say we have a dynamic user route under &lt;code&gt;/pages/user/[id].js&lt;/code&gt;, which should show a user profile based on the ID we pass as a route parameter.&lt;/p&gt;

&lt;p&gt;The code to access that ID parameter would look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Import the useRouter hook from Next.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/router&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Profile&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Use the useRouter hook&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="c1"&gt;// Grab our ID parameter&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="err"&gt; 
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you open that page with a random ID (&lt;code&gt;http://localhost:3000/user/42&lt;/code&gt; i.e), you should see the ID on the rendered page (&lt;code&gt;user id: 42&lt;/code&gt;). Now, instead of just rendering that ID, let's fetch the user related to that ID from our API endpoint and render a profile page.&lt;/p&gt;

&lt;p&gt;When I tried to do that, I thought I could just pass the ID parameter to the &lt;code&gt;useSWR&lt;/code&gt; hook and voilá – a beautiful profile page. The code looked like that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;useSWR&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;swr&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/router&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetcher&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Profile&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useSWR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`/api/user/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fetcher&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;failed&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;load&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;hello&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But then the error messages came in – something obviously didn't work, my component just won't fetch the user. What happened here? When I had a look into the network tab, I noticed that the ID parameter wasn't passed to the fetch call – instead it said &lt;code&gt;undefined&lt;/code&gt;. But why? The ID was clearly there, so what the heck happened here?&lt;/p&gt;

&lt;p&gt;The answer is in the &lt;a href="https://nextjs.org/docs/routing/dynamic-routes#caveats"&gt;Next.js Docs&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Pages that are statically optimized by Automatic Static Optimization will be hydrated without their route parameters provided, i.e &lt;code&gt;query&lt;/code&gt; will be an empty object (&lt;code&gt;{}&lt;/code&gt;). After hydration, Next.js will trigger an update to your application to provide the route parameters in the &lt;code&gt;query&lt;/code&gt; object.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Since I didn't use &lt;code&gt;getServerSideProps&lt;/code&gt; or &lt;code&gt;getStaticProps&lt;/code&gt; on that page, Next turned on Automatic Static Optimization for it – which means the dynamic parameters from &lt;code&gt;router.query&lt;/code&gt; are not available until the hydration process has finished. Before, &lt;code&gt;query&lt;/code&gt; is just an empty object – that's why the network tab said &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So how can we tell &lt;code&gt;useSWR&lt;/code&gt; to wait until our dynamic route parameter is ready?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;useSWR&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;swr&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/router&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetcher&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Profile&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;

  &lt;span class="c1"&gt;// Use a ternary operator to only fetch the data when the ID isn't undefined&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useSWR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="s2"&gt;`/api/user/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fetcher&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;failed&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;load&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;hello&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This way our page now initially renders &lt;code&gt;Loading...&lt;/code&gt;, and as soon as the hydration process has finished it fetches the user data and renders the profile.&lt;/p&gt;

&lt;p&gt;I hope this little explanation could help you!&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>tutorial</category>
      <category>webdev</category>
      <category>react</category>
    </item>
    <item>
      <title>How to deal with complex projects</title>
      <author>Vadim Kravcenko</author>
      <pubDate>Tue, 20 Jul 2021 13:11:40 +0000</pubDate>
      <link>https://dev.to/bndr/how-to-deal-with-complex-projects-30b1</link>
      <guid>https://dev.to/bndr/how-to-deal-with-complex-projects-30b1</guid>
      <description>&lt;p&gt;This article was originally published on &lt;a href="https://vadimkravcenko.com"&gt;my blog&lt;/a&gt;, where I write about being a technical advisor to early- and mid-stage startups.&lt;/p&gt;




&lt;p&gt;As a founder, one of the underrated skills is to know how to deal with complex projects and build complicated stuff. Whenever you start a project, you usually have a good idea of how difficult it will get. If there are challenges to be solved, you can see possible places to look for hidden complexity – this comes from experience.&lt;/p&gt;

&lt;p&gt;Over the last ten years, I’ve built projects of different complexity – mobile banking apps, finance tools, ordering apps, running apps, you name it. But even with such experience, some projects still fail. I would never agree to handle a big project alone. It’s always the effort of many people that keep the project from falling apart – it’s not a one-person show.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--onujTgTd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/07kfwl57nk526y333x4k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--onujTgTd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/07kfwl57nk526y333x4k.png" alt=""&gt;&lt;/a&gt;There’s always complexity hidden in the projects.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We know why projects fail – there are multitudes of books/articles/studies on why software projects fail. We know how to prevent their failure – so why do they still fail?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I don’t know why projects fail in general. That’s the simple answer. Every startup is building its megaproject, and it is unique and has its flaws, and you learn how to adapt and make sure that it’s done on time and in the correct way.  &lt;/p&gt;

&lt;p&gt;I’ve split this article into several sections:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;As an early-stage founder, what necessary soft skills do you need to cultivate.&lt;/li&gt;
&lt;li&gt;Things that I do day-to-day to move a product forward.&lt;/li&gt;
&lt;li&gt;Most common issues that you will face.&lt;/li&gt;
&lt;li&gt;General tips for indie hackers or early-stage startups on managing your product development.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;The easiest way to build a complex project is to reduce complexity. That’s even more true if the timeline is tight.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Before we dive deep into the nits and bits, I’d like to clarify what exactly I consider as a complex project – these are projects that require cross-product integrations with aggressive deadlines and multiple Agents involved. They don’t necessarily need to have huge codebases, as that’s not what makes it complex – it’s more about everything around the project that makes it difficult – difficult people, complex processes, consultants all around. An early-stage startup that is solving a single problem can be considered a complex project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#soft-skills-to-manage-projects-effectively"&gt;
  &lt;/a&gt;
  Soft skills to manage projects effectively
&lt;/h2&gt;

&lt;p&gt;As many will tell you – building software products is less about coding and more about everything that revolves around it. These three character traits can have a profound effect on success.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#expect-the-unexpected-and-have-a-plan-b"&gt;
  &lt;/a&gt;
  Expect the unexpected and have a plan B.
&lt;/h3&gt;

&lt;p&gt;Try to be as flexible as possible – get ready for unexpected things to happen. When planning a timeline – assume people will get sick or leave the company, consider that the freelancers will not deliver on time.&lt;/p&gt;

&lt;p&gt;There are multitudes of factors that are out of your control when you’re building a product:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;People get sick&lt;/li&gt;
&lt;li&gt;People leave you&lt;/li&gt;
&lt;li&gt;Freelancers overpromise and underdeliver&lt;/li&gt;
&lt;li&gt;Contractors fail to meet the deadlines or goes entirely out of business.&lt;/li&gt;
&lt;li&gt;The complexity of the project increases with new requirements.&lt;/li&gt;
&lt;li&gt;Of course, you can say – but I have it in the contract that these things shouldn’t happen. A contract can help you when you sue them six months later, but here and now, it has zero influence.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t63lES60--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jf6z6pkle320hi9ibhx3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t63lES60--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jf6z6pkle320hi9ibhx3.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These are all improbable events, but I hadn’t had a single project where at least one of the above things didn’t happen. So a good rule of thumb – trust Murphy’s Law – “Anything that can go wrong will go wrong.” Managing a project is the same as managing life – you can’t have everything under control – mostly, you ride that chaos wave and hope it’s going in the right direction.&lt;/p&gt;

&lt;p&gt;Failure is the rule, not the exception, in large-scale IT projects. I’ve read a study some time ago that says that 45% of the projects run over budget, 7% of the projects run over time, and 56% of the projects deliver less value than planned. &lt;/p&gt;

&lt;p&gt;A more “developer-friendly” example: Your team wants to build a payment integration. Sounds straightforward as you were planning on using Stripe, which has excellent documentation. But then, during the development, you find out that Stripe doesn’t allow selling weed-based products through its platform. So you search for a payment provider that does allow it. But this provider doesn’t have a REST API – it only has SOAP. The whole processing of payments is different, leading to additional handling of currencies and orders, resulting in more chaos in the project.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#get-ready-to-make-hard-decisions"&gt;
  &lt;/a&gt;
  Get ready to make hard decisions.
&lt;/h3&gt;

&lt;p&gt;When something unexpected happens, it’s crucial to make decisions and to make them quickly. You’re accountable for all the choices that you make and also those that you do not. Being indecisive is a one-way ticket to a failed project.&lt;/p&gt;

&lt;p&gt;On the one side, you need to gather as much data as possible to make an informed choice. On the other side – you don’t have the luxury of spending too much time on it. Any decision is better than no decision at all. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;My thought process during some unexpected crisis is as follow:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You get hit by something unexpected. It happens, no way around it—time to squeeze the lemons that life threw at you.&lt;/li&gt;
&lt;li&gt;Don’t look for excuses or someone to blame, no time for reflection on WHY it went wrong either – you can do this after you have the situation under control. &lt;/li&gt;
&lt;li&gt;Start asking yourself the essential questions – How does it affect our endgame? What are my next steps? Who can help me decide what my alternatives are? &lt;/li&gt;
&lt;li&gt;Start planning the measures that can solve the issue. As I said – make a plan A and then a few more just in case.&lt;/li&gt;
&lt;li&gt;Make it a priority and discuss it with the key people involved.&lt;/li&gt;
&lt;li&gt;After solving the problem – start documenting why it happened and what you can do not to allow this to happen in the future.&lt;/li&gt;
&lt;li&gt;Time to have some rest.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mDFnvTp7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b8anhha2u5ccmckmctz8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mDFnvTp7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b8anhha2u5ccmckmctz8.png" alt=""&gt;&lt;/a&gt;Managing a complex megaproject is similar to managing a crisis&lt;br&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#learn-to-talk-to-people"&gt;
  &lt;/a&gt;
  Learn to talk to people
&lt;/h3&gt;

&lt;p&gt;So as you see from the two points above – communication is one of those skills that you’re going to have to master to be a good manager or just, in general, to lead product development.&lt;/p&gt;

&lt;p&gt;You’re going to have many discussions of the underlying problems without pointing fingers and blaming someone. It’s a skill to keep the conversation civil and focused on the task. Too many times have I witnessed the passive-aggressive pushing of blame to avoid responsibility instead of accepting the failure and moving forward. &lt;/p&gt;

&lt;p&gt;One thing to mention, from experience, when dealing with big corporations – remember that they will be playing politics to get maximum value from collaboration with you. There’s no way around it. Just try to learn enough of it to navigate it, but don’t get sucked into it. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#staying-on-track-single-day-at-a-time"&gt;
  &lt;/a&gt;
  Staying on track single day at a time
&lt;/h2&gt;

&lt;p&gt;Any big project always requires a lot of work. Here are some things that can make your life easier when dealing with the chaos that complexity brings.&lt;/p&gt;

&lt;p&gt;Before you start setting up the team, the responsibilities and tasks define the business problem you’re trying to solve and outline the value in solving it. It doesn’t have to be too detailed, just the high-level stuff. Talk about the vision of the end product – discuss it with your stakeholders, make sure you don’t forget anything. When making a mobile application – build a persona, do scoping canvas, talk about features, prioritize them, think about user flows. Everything you do know will make the work later easier.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“If you don’t know where you are going. How can you expect to get there?”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A good practice is to conduct interviews with your audience as soon as you defined some form of the product. Many tools on the web allow you to select people based on criteria that suit your product persona. Talk to your target audience, whether internal or external, so you fully understand the problem space and gather information on it. Find out edge-cases, things that people expect, ways to build them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#after-you-have-an-idea-of-what-youre-building-lets-take-a-look-at-the-timeline"&gt;
  &lt;/a&gt;
  After you have an idea of what you’re building, let’s take a look at the timeline.
&lt;/h3&gt;

&lt;p&gt;It’s good practice to start from the release date and go backward. Discuss the interdependencies of the sub-projects. Does something need to be finished before the next phase starts? &lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the content needs to be completed before the development starts.&lt;/li&gt;
&lt;li&gt;The designers need to finish the UX/UI before development kicks off.&lt;/li&gt;
&lt;li&gt;The UX/UI needs to be greenlighted by the stakeholders.&lt;/li&gt;
&lt;li&gt;The functionality needs to be signed off before the UX starts etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Usually, there are quite a few dependencies, and not everything can be done in parallel, even in big teams.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#after-defining-the-time-scope-its-time-to-gather-the-ateam"&gt;
  &lt;/a&gt;
  After defining the time scope – it’s time to gather the A-Team.
&lt;/h3&gt;

&lt;p&gt;You always need your best people working on complex projects. Make sure a suitable team member covers every part of the project. Empower them to be the decision-makers and take responsibility for their tiny island. There’s no need to micro-manage every aspect, as long as you have the big picture view (and of course, you need to trust your colleagues). &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FMfWmc5a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i9demu5g7duad501ylu8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FMfWmc5a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i9demu5g7duad501ylu8.png" alt=""&gt;&lt;/a&gt;The team is what drives your success. Focus on empowering the people around you.&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;Make sure everyone knows who’s responsible for what, who can make what decisions. Here’s it’s also vital to define communication channels and intervals. For example, you say that you will have a meeting every week on Thursday to go through the latest activities from different departments and everything that went wrong. People need to be aware of the problems- to deal with the unexpected as soon as possible.&lt;/p&gt;

&lt;p&gt;Start iterating. If you’re building something in an agile way, then the product is never finished; you finish one of the iterations. Get ready to build and rebuild based on feedback. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;No amount of testing can prove a software right, yet a single test can prove a software wrong.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;All the assumptions that you made, the rules that you tried to skip to deliver faster – all of that will surface during the alpha-release.&lt;/p&gt;

&lt;p&gt;To make this period less painful, you need to schedule some time before the release for beta testing, a week, maybe even a month, depending on the release cycle and the size of the Software. You will still get a considerable bug list regardless of how well you test. Testing is not meaningless, though – the more you test, the more bugs you’ll see and the more bugs you can fix.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#most-likely-issues-during-the-early-stages"&gt;
  &lt;/a&gt;
  Most likely issues during the early stages.
&lt;/h2&gt;

&lt;p&gt;I can summarize the possible issues that you will face into three categories:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Business issues – This includes the time-to-market and limited resources.&lt;/li&gt;
&lt;li&gt;Management issues – This includes things like lack of oversight and over-optimism.&lt;/li&gt;
&lt;li&gt;Product Issues – Bad technology choices and flawed estimations.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#business-issues"&gt;
  &lt;/a&gt;
  Business Issues
&lt;/h3&gt;

&lt;p&gt;The business side always wants to have the highest quality in the shortest amount of time. As a person from the technical side, you always need to push back on that, as you know – the faster you go, the worse it gets. Shortcuts in implementation, skipping testing, forgetting documentation – the usual consequences of tight deadlines.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You either cut the scope and keep the deadline or keep the scope and push the deadline.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are always limited resources available. Of course, we all want to work on multi-billion projects with unlimited budgets. Sadly, that’s not how it works, as the budget is usually the one thing that investors tightly control. Everything money-related will need to be justified, and the decisions will be under scrutiny.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If there are consultants on the project – they will try to minimize the costs to show that they are squeezing the maximum efficiency out of the teams.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Even though the resources you will have available are limited – the business will think that anything is possible. That’s a common misconception in IT. Example from High-Frequency Trading – if there’s a requirement to keep the latency below 20ms, but you are sitting in Europe, and the Server is in China, things get tricky. Push back on things that don’t make sense from the technical perspective.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#management-issues"&gt;
  &lt;/a&gt;
  Management Issues
&lt;/h3&gt;

&lt;p&gt;Delegation is cool. Letting people run wild isn’t. If you give people the chance to slack off, they will take that chance. This doesn’t mean you should micromanage everyone, but you should instead define clear goals and make sure that people get there without causing too much trouble.&lt;/p&gt;

&lt;p&gt;For example, suppose one of the stakeholders takes too much time with some critical decision blocking your development teams. In that case, it’s essential to step in and remind them that there are deadlines and the project needs to be moving forward.&lt;/p&gt;

&lt;p&gt;Speaking of deadlines – be realistic or even pessimistic when planning. The problem with being optimistic is that if you think that each task will be finished at exactly the time allotted, then a single hiccup somewhere in the chain will result in everyone missing deadlines. Each mistake accumulates as an avalanche effect:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Someone forgot to send an email – people don’t know what to do.&lt;/li&gt;
&lt;li&gt;A decision is unmade.&lt;/li&gt;
&lt;li&gt;A manager is afraid of taking responsibility, &lt;/li&gt;
&lt;li&gt;and bam, you’re behind your deadline by a week.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The complex projects are usually multi-year contracts. This means people tend to relax during the first few months. The closer it gets to release, the more they start running around like bees. So my rule of thumb is – act as if the release is next month and solve problems with that state of mind.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#product-issues"&gt;
  &lt;/a&gt;
  Product Issues
&lt;/h3&gt;

&lt;p&gt;One of the most common product issues is that no one knows what the project’s vision is. Or worse – some stakeholders have conflicting interests – both want the product to succeed but in different ways. This is when politics start. Everyone will be pushing their agenda. Again, when it comes to politics, I try to stay away from it.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Nobody would force a builder to build the basement after having finished the roof, but in the software industry, that is standard practice.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The second most common thing is that a change request later in the project requires rewriting the core functionality. Of course, with agile development, you rarely have the full specification of the product when you start developing. Otherwise, it would be waterfall development and not Agile. &lt;/p&gt;

&lt;p&gt;Other than that – unless it’s an entirely new project with no dependencies, you will have to work with some legacy system that lay dormant for ages. Sometimes you find relevant parts with zero documentation, and no one in the company knows how it works. It’s better to evaluate the legacy system before the development starts and calculate the time to build/migrate/extend the legacy code. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DnyTGts9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/917pj8mas31u1fvy8bi5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DnyTGts9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/917pj8mas31u1fvy8bi5.png" alt=""&gt;&lt;/a&gt;Managing complexity is like solving several different puzzles at once&lt;br&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#general-tips"&gt;
  &lt;/a&gt;
  General Tips
&lt;/h2&gt;

&lt;p&gt;I’ve gathered a few valuable tidbits of advice over the years. I think you will find them helpful also:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#document-everything"&gt;
  &lt;/a&gt;
  Document everything
&lt;/h3&gt;

&lt;p&gt;It’s crucial to have everything in writing – all the information regarding who does what, who’s responsible for what, who built what, how the Software works, how it should work, or why it doesn’t. As long as you have it on paper, you can always come back and reflect on what you did and why.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#revisit-plan-at-regular-intervals"&gt;
  &lt;/a&gt;
  Revisit plan at regular intervals
&lt;/h3&gt;

&lt;p&gt;If you’ve successfully finished some part of your Software – review how the assumptions you made earlier changed. Make sure no new issues have arisen going forward from this milestone. Talk to your team. With the new knowledge that they have – do they see any problems now that some part of the project is complete?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#be-transparent-and-honest-communicate-progress-on-time"&gt;
  &lt;/a&gt;
  Be transparent and honest. Communicate progress on time
&lt;/h3&gt;

&lt;p&gt;Set up regular reports with the key stakeholders so that you can tackle issues and manage expectations proactively. These could be written or through any channel that you defined.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#keep-your-options-open"&gt;
  &lt;/a&gt;
  Keep your options open.
&lt;/h3&gt;

&lt;p&gt;You don’t know from the start in which direction the project will evolve. So it’s impossible to prepare the “core” for all possible deviations from the initial requirement. Prepare to be flexible, but don’t start over-optimizing too early.&lt;/p&gt;

&lt;p&gt;A megaproject is a combination of predictable, standardized, and repetitive tasks performed many times before and novel and innovative procedures being applied for the first time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#do-your-homework-always"&gt;
  &lt;/a&gt;
  Do your homework. Always.
&lt;/h3&gt;

&lt;p&gt;You may be building something you’ve never built before, so it’s essential to do research and talk with someone more knowledgeable. When performing risk assessment, where are the pitfalls/shortcomings? Find out all the ins and outs of the technology that you’re using. How were similar projects built? Are there any case studies? This is especially true for software engineers that need to get their estimates right – the more you know, the more accurately you will know what to expect.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#try-and-reduce-the-number-of-parties-involved"&gt;
  &lt;/a&gt;
  Try and reduce the number of parties involved.
&lt;/h3&gt;

&lt;p&gt;Multiple agents (subcontractors) always increase the complexity of the project. The best-case scenario: your company can do the whole project alone, which sadly rarely ever happens on megaprojects.&lt;/p&gt;

&lt;p&gt;If you can’t reduce the number of agents involved – strictly control all the communication. Otherwise, it will get out of hand quickly. Clear structures help everyone know where they sit in the hierarchy and who they need to talk to to get things done, e.g., change approvals, resources release.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IkVRrC03--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bqu61r09zddv01ypeokz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IkVRrC03--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bqu61r09zddv01ypeokz.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#frequently-asked-questions"&gt;
  &lt;/a&gt;
  Frequently asked questions
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-whats-the-difference-between-software-projects-and-other-engineering-projects"&gt;
  &lt;/a&gt;
  1. What’s the difference between software projects and other engineering projects?
&lt;/h3&gt;

&lt;p&gt;The main difference is the number of changes during the execution of the project. For example, if you’re building an airplane, nobody will tell you that they want it to go to space in the middle of the project. But in the software industry, this is possible. This goes hand-in-hand with the logic of business that anything is possible in IT. If you built something that flies, then it should fly anywhere we want it to.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-how-to-estimate-a-megaproject"&gt;
  &lt;/a&gt;
  2. How to estimate a megaproject?
&lt;/h3&gt;

&lt;p&gt;The task of estimation is a crucial one, so take your time doing it. This is where good technical spec can help you a lot.&lt;/p&gt;

&lt;p&gt;First of all, never estimate a software project by yourself. It’s good practice to have at least several teams assess the project and then take the average number of hours for reference. &lt;/p&gt;

&lt;p&gt;Second, split the project into modules and modules into tasks, estimate the tasks, and sum the person-hours needed for the functions and modules. The rule of thumb is people only count the raw development time, forgetting all the small things that add up in between, so add another 20-30% for unexpected bugs. Communication will also take a few hours per week. Then there’s the Scalability requirements, Security requirements, Performance, etc.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-can-i-trust-the-developers-to-meet-their-estimations"&gt;
  &lt;/a&gt;
  3. Can I trust the developers to meet their estimations?
&lt;/h3&gt;

&lt;p&gt;This is a tricky one. If a developer estimates the task will take 30 hours, can you trust him to deliver finished work in time and up to the standards? To be honest, you shouldn’t. If a developer says he will do this task in X amount of hours, you plan it as X + 20% hours internally.&lt;/p&gt;

&lt;p&gt;The reason is that the developer may not see the whole complexity from the start and will only notice how hard it is after starting. I can not remember how often I created a task that seemed easy initially but was quite complex after the second glance. Consider a job to build a currentTime library that returns the current time. It seems easy enough, but then time zones come into play, then suddenly some countries decide they’re not doing Daylight Savings anymore, and the spiral continues.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#moving-forward"&gt;
  &lt;/a&gt;
  Moving forward
&lt;/h2&gt;

&lt;p&gt;As your startup grows, the project becomes less chaotic and more defined. Processes get added, procedures get documented – you have either adapted to the chaos, built that first version of the product, or you failed. Still, even then, you have gained valuable knowledge that will allow you to build your next endeavor better and more efficiently.&lt;/p&gt;

&lt;p&gt;In conclusion, I want to say – never say NO to building something extraordinary. It’s always a win-win situation. If you fail – you learn. If you succeed – even better. &lt;/p&gt;




&lt;p&gt;Follow me on &lt;a href="https://twitter.com/vadim_kravcenko"&gt;Twitter&lt;/a&gt; as I build my consulting business in public, or let me know if you need a technical advisor – I might be able to help you out.&lt;/p&gt;

</description>
      <category>startup</category>
      <category>productivity</category>
      <category>management</category>
    </item>
    <item>
      <title>Motivation and Mindset as a beginner in programming</title>
      <author>Daniil Birsan</author>
      <pubDate>Tue, 20 Jul 2021 13:05:27 +0000</pubDate>
      <link>https://dev.to/daniilbirsan/motivation-and-mindset-as-a-beginner-in-programming-3adg</link>
      <guid>https://dev.to/daniilbirsan/motivation-and-mindset-as-a-beginner-in-programming-3adg</guid>
      <description>&lt;p&gt;Hi, my name is Daniil, I'm following the 100daysOfCode challenge and this is my first blog in which I'm sharing some of the experiences I've gained along the way.&lt;/p&gt;

&lt;p&gt;How to get started with programming? Which resources you're using for learning? “I’ve no idea where to begin. How do I start?” These are just some of the questions I receive in private messages from people who follow my journey.&lt;/p&gt;

&lt;p&gt;I don't know if you're a beginner or maybe you know some basics but let's start all over from the beginning. First of all, you'll need dedication, motivation and consistency to stay stick with your programming journey.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#consistency"&gt;
  &lt;/a&gt;
  Consistency
&lt;/h1&gt;

&lt;p&gt;Learning to code is incredibly rewarding but can also be difficult and frustrating. Anyone can learn how to program as long as they are willing to put in the time and effort.&lt;/p&gt;

&lt;p&gt;The first rule of programming may be considered "Consistency". When you are just starting out, you might want to rush into things and spend hours each day dedicated to studying and practicing coding. But you may think that you're not learning anything and you're not making any progress, with this approach you'll definitely end up burning out and giving up. You’ll be more likely to continue if you figure out how much time you can realistically and sustainably spend each day or each week studying coding. Then stick to that. I'll recommend spending at least 1 hour per day. Even small efforts, when combined with consistency, can lead to big accomplishments.&lt;/p&gt;

&lt;p&gt;Take brushing and flossing your teeth, for instance. You might spend 4-5 minutes per day on brushing and flossing. A tiny amount of time! But doing that every single day means the difference between having great teeth, and having no teeth.&lt;/p&gt;

&lt;p&gt;This is why consistency is more important than trying to go as fast as you possibly can.&lt;/p&gt;

&lt;p&gt;You will inevitably get stuck at some point in the curriculum, perhaps due to a concept that you are having difficulty understanding. It's ok if you're feeling stuck and don't understand the meaning of it all. You can figure it by using these approaches:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Google it: You can be certain someone else out there has encountered the same problem as you at some point. A quick Google search can often lead to a solution.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Take a break: find something else to do, maybe make yourself a cup of coffee or even go for a walk and then come back, do not rush yourself into solving that problem, take some time for yourself and then come back with more power and desire to learn.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ask for Help: Don't work on a problem on your own for too long. If you can't figure something out by yourself, ask. You can always join a comunity, there is a lot of them just waiting for you to give a question(Discord communities, Twitter, Reddit, etc.), don't be afraid to join them, they are in the same position as yours.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please remember: People will be more willing to help you when they can see you have already put effort into trying to figure out the solution on your own.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#dont-compare-yourself-to-others"&gt;
  &lt;/a&gt;
  Don’t compare yourself to others.
&lt;/h1&gt;

&lt;p&gt;As you start getting more involved in the coding community, please try to remember not to compare yourself to other coders. Obviously it’s impossible to not see what other people are doing or accomplishing. But try (as much as possible) to not feel like you have to keep up with everyone else.&lt;/p&gt;

&lt;p&gt;By comparing yourself with over developers you may end up just feeling discouraged because someone is more ahead of you. Please do not compare yourself to those who’ve spent their youth solving math, physics, and programming problems.&lt;/p&gt;

&lt;p&gt;Everyone has a different situation and progresses at different speeds. Some people will have more time than you, or may be faster at learning certain things than you are. Others will have less time or learn slower than you. No one is better than another person.&lt;/p&gt;

&lt;p&gt;It may be difficult but please don't worry about someone else's journey, just worry about your own.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#practice"&gt;
  &lt;/a&gt;
  Practice
&lt;/h1&gt;

&lt;p&gt;Don’t spend all of your time on reading books or watching videos. In short — do stuff! Do something with you're knowledge, if you came up with an idea, implement it, try to create something. It’s a lot to process, and trying out things will help you remember them.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion:
&lt;/h1&gt;

&lt;p&gt;Learning to code is a really difficult thing to do, and if you’re somewhere on that path please don't give up. Even if you feel like you are completely lost and you’ll never be good at programming, just know that it will come with time.&lt;/p&gt;

&lt;p&gt;You just started a lifelong journey, which provides amazing opportunities, enjoy it!&lt;/p&gt;

&lt;p&gt;Thanks so much for reading!&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>webdev</category>
      <category>html</category>
      <category>productivity</category>
    </item>
    <item>
      <title>100 Days Of Code Tips</title>
      <author>Christine</author>
      <pubDate>Tue, 20 Jul 2021 12:46:06 +0000</pubDate>
      <link>https://dev.to/christinecodes/100-days-of-code-tips-4cpe</link>
      <guid>https://dev.to/christinecodes/100-days-of-code-tips-4cpe</guid>
      <description>&lt;p&gt;In this blog, I'll be talking about my experience with 100 days of code and share some tips with you guys. I've found this challenge on Twitter about a month ago.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tip-1-consistency"&gt;
  &lt;/a&gt;
  Tip 1. Consistency
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dX3UE1DL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4buiotrp0jwt61x5q96s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dX3UE1DL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4buiotrp0jwt61x5q96s.png" alt="overload"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I understand sometimes it's hard to keep on track, but try to focus on consistency not speed. Not only this process will help you in the future, but also gain more skills. From my experience, I normally plan before the night so that I could start working in the morning and so that I know what I'm supposed to do after. I used Notion which is a great productivity software where you can keep track of your work (recommended!).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tip-2-use-other-resources"&gt;
  &lt;/a&gt;
  Tip 2. Use other resources!
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bomAOrPV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gtt8gt4bl92y8au4s43r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bomAOrPV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gtt8gt4bl92y8au4s43r.png" alt="study"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At first, I focused on using FreeCodeCamp but on top of that, using other resources such as the Modern JS tutorial has helped me understand the overall concept.&lt;/p&gt;

&lt;p&gt;Here are some HTML, CSS &amp;amp; JavaScript resources: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.freecodecamp.org/"&gt;FreeCodeCamp&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://javascript.info/"&gt;Modern JS&lt;/a&gt; (For JavaScript)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.w3schools.com/"&gt;W3Schools&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#tip-3-stay-away-from-distraction"&gt;
  &lt;/a&gt;
  Tip 3. Stay Away From Distraction
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2rNmhv4C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tnvolsrtudob85bootop.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2rNmhv4C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tnvolsrtudob85bootop.png" alt="no-phone (1)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is something I struggled with the most while doing the challenge. Try to stay away from TV, Mobile Phone or Music (that distracts you). Try to limit yourself using technology devices outside to save your time working on other projects. Another point is to consider a good working environment to stay focused and try to stay away from procrastinating :)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tip-4-join-the-community"&gt;
  &lt;/a&gt;
  Tip 4. Join The Community
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1nsHuQJ3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8rr9nq7m1df7bypx6wfc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1nsHuQJ3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8rr9nq7m1df7bypx6wfc.png" alt="network"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Recently I've joined some communities on Discord, Twitter etc and learned a lot of new things, so should you! Having exposure to that environment will help you a lot in your field. Once you join the community, you can help other people to grow, learn together as a developer and share ideas. They can also help you reach your goals.&lt;/p&gt;

&lt;p&gt;You will have the opportunity to meet other professionals in your field and have a better chance of networking once you engage with the community. Participate as much as you can, support and respect each other. Comment on other people's projects, give them some feedback and show them that you're interested!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tip-5-share-your-journey-with-others"&gt;
  &lt;/a&gt;
  Tip 5. Share your journey with others
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BS3cKvQ3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vddqgv7oek8a0ptwn7in.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BS3cKvQ3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vddqgv7oek8a0ptwn7in.png" alt="user-experience"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On a social media platform such as Twitter, I tend to showcase my work to people. Sometimes you will get feedback that helps you learn more and get inspiration from the community. Present your work clearly by using video, gifs, images etc.&lt;/p&gt;

&lt;p&gt;Video: QuickTime Player&lt;br&gt;
Gifs: &lt;a href="https://giphy.com/"&gt;Giphy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While learning how to code, it's important to create projects too. I think this is important when you're learning as a beginner. This will allow you to understand the concepts you have learned and implement them in your project. Start your project small at first, keep it simple as possible and try a project that you can learn something new from. It's okay to fail sometimes so don't stress it out.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thank you for reading my first article, I hope my tips helped you in some way. Whether you're a beginner or not, I wish you the best of luck in your journey♡&lt;/strong&gt; &lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>webdev</category>
    </item>
    <item>
      <title>React useEffect fetching API</title>
      <author>ShubhamTiwari909</author>
      <pubDate>Tue, 20 Jul 2021 12:45:18 +0000</pubDate>
      <link>https://dev.to/shubhamtiwari909/react-useeffect-fetching-api-28f4</link>
      <guid>https://dev.to/shubhamtiwari909/react-useeffect-fetching-api-28f4</guid>
      <description>&lt;p&gt;Hello everyone today i will show you how to fetch API in react js using 'useEffect'.&lt;/p&gt;

&lt;p&gt;Hooks are a new addition in React 16.8. They let you use state and other React features without writing a class.&lt;/p&gt;

&lt;p&gt;What does useEffect do?&lt;br&gt;
By using this Hook, you tell React that your component needs to do something after render. React will remember the function you passed (we’ll refer to it as our “effect”), and call it later after performing the DOM updates. In this effect, we set the document title, but we could also perform data fetching or call some other imperative API.&lt;/p&gt;

&lt;p&gt;Does useEffect run after every render? Yes! By default, it runs both after the first render and after every update. &lt;/p&gt;

&lt;p&gt;Lets get dive into the code now-&lt;/p&gt;

&lt;p&gt;First we will import the required modules&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,{&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="cm"&gt;/*here we have imported the useState to change the state of the
 data when the data gets update on the end point and useEffect
 is used to fetch the data from the api 
and it will run on every render
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we are fetching data from a fake api called jsonPlacenholder api which gives us data of a todo list with 'pending' and 'completed' status&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setTodos&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt;
&lt;span class="c1"&gt;//useState is set to an empty arraya and later &lt;/span&gt;
&lt;span class="c1"&gt;//we will fetch the data from the end point &lt;/span&gt;
&lt;span class="c1"&gt;//and will store in the 'todos' array&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;useEffect -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http://jsonplaceholder.typicode.com/todos&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setTodos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
 &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;fetch is used to fetch the api from end point&lt;/li&gt;
&lt;li&gt;Then we set the state of todo to the data we have fetched from 
the API.&lt;/li&gt;
&lt;li&gt;In the last line of it [todos] is the dependency on which 
useEffect depends on.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Then we map the data using map function&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
             &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;card bg-dark text-light my-3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
               &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;card-body&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                 &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h5&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;card-title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h5&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h6&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;card-subtitle mb-2 text-muted&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                      &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;completed&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
                      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class="nx"&gt;Completed&lt;/span&gt;
                      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                      &lt;span class="p"&gt;}&lt;/span&gt;
                      &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;completed&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
                      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class="nx"&gt;Pending&lt;/span&gt;
                       &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                      &lt;span class="p"&gt;}&lt;/span&gt;              
                   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h6&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;           &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="p"&gt;))}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Full source code -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,{&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Fade&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-reveal/Fade&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Navbar&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;NavbarBrand&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;NavbarToggler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;Nav&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;NavItem&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;NavLink&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;Collapse&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;reactstrap&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;setToggle&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isToggle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setToggle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setTodos&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([])&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http://jsonplaceholder.typicode.com/todos&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setTodos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;    
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text-primary text-center display-4 mb-5&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt; &lt;span class="nx"&gt;api&lt;/span&gt; &lt;span class="nx"&gt;using&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text-center&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="na"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;block&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;50%&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="na"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0 auto&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="na"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;flex&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="na"&gt;flexDirection&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;column&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="na"&gt;justifyContent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;center&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="na"&gt;justifyItems&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;center&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;100%&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
             &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;card bg-dark text-light my-3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
             &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;card-body&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
               &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h5&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;card-title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h5&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;               &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h6&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;card-subtitle mb-2 text-muted&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
               &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;completed&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
                 &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                 &lt;span class="nx"&gt;Completed&lt;/span&gt;
                 &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;               &lt;span class="p"&gt;}&lt;/span&gt;
               &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;completed&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
                 &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                   &lt;span class="nx"&gt;Pending&lt;/span&gt;
                 &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;               &lt;span class="p"&gt;}&lt;/span&gt;              
               &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h6&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;             &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;           &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="p"&gt;))}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is the Output-&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lj5wzgwM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n7ojupgemal32canwpbr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lj5wzgwM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n7ojupgemal32canwpbr.png" alt="Screenshot (5)"&gt;&lt;/a&gt;&lt;br&gt;
I am newbie developer.So , if you find any mistake regarding any post Please highlight it &lt;br&gt;
THANK YOU FOR READING THIS POST.&lt;/p&gt;

&lt;p&gt;NOTE- In the example , we have bootstrap classes so , use bootstrap cdn or install and import it using npm or yarn package manager&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>html</category>
      <category>css</category>
    </item>
  </channel>
</rss>
