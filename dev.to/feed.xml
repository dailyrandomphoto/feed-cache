<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>GitHub Web Editor: FREE VSCode in the browser</title>
      <author>Davide 'CoderDave' Benvegn√π</author>
      <pubDate>Mon, 23 Aug 2021 01:41:26 +0000</pubDate>
      <link>https://dev.to/github/vscode-in-the-browser-for-free-github-web-editor-k4h</link>
      <guid>https://dev.to/github/vscode-in-the-browser-for-free-github-web-editor-k4h</guid>
      <description>&lt;p&gt;A lightweight code editor, based on VSCode, that can be accessed via Browser, and it's &lt;strong&gt;completely free&lt;/strong&gt;. Sounds too good to be true? Well this time it's not.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h3&gt;

&lt;p&gt;As promised in the &lt;a href="https://dev.to/github/github-codespaces-ga-any-good-reviewed-and-tested-3e62"&gt;article&lt;/a&gt; / &lt;a href="https://youtu.be/Car0QZ_YbxQ"&gt;video&lt;/a&gt; about Codespaces that I've released last week (&lt;em&gt;check it out if you haven't yet&lt;/em&gt;), today we talk about an awesome new feature that has been released by GitHub together with Codespaces.&lt;/p&gt;

&lt;p&gt;I'm talking about the new &lt;strong&gt;Web Editor experience&lt;/strong&gt; accessible directly from your repos. Best part? It's &lt;strong&gt;completely free&lt;/strong&gt; for everyone!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#video"&gt;
  &lt;/a&gt;
  Video
&lt;/h3&gt;

&lt;p&gt;As usual, if you are a &lt;strong&gt;visual learner&lt;/strong&gt;, or simply prefer to watch and listen instead of reading, here you have &lt;strong&gt;the video with the whole explanation and demo&lt;/strong&gt;, which to be fair is much &lt;strong&gt;&lt;em&gt;more complete&lt;/em&gt;&lt;/strong&gt; than this post.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/UDbdChCXIKw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/UDbdChCXIKw"&gt;Link to the video: https://youtu.be/UDbdChCXIKw&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you rather prefer reading, well... let's just continue :)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-it"&gt;
  &lt;/a&gt;
  What is it?
&lt;/h3&gt;

&lt;p&gt;The new Web Editor is a &lt;strong&gt;lightweight code editor&lt;/strong&gt;, based on &lt;strong&gt;VSCode&lt;/strong&gt;. It is similar to Codespaces, but it is not backed by any compute backing; it is in fact &lt;strong&gt;entirely powered by your browser&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This means it has &lt;strong&gt;some limitations&lt;/strong&gt; over Codespaces, and we will see it in a moment, but on the flipside it's very fast to load and quickly navigate. It is &lt;strong&gt;perfect for making small changes&lt;/strong&gt; to your code without the need of having an IDE on your laptop.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-access-it"&gt;
  &lt;/a&gt;
  How to Access it
&lt;/h3&gt;

&lt;p&gt;There are currently 2 ways to access the new Web Editor: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Directly via URL&lt;/strong&gt; -  just change &lt;code&gt;github.com&lt;/code&gt; to &lt;code&gt;github.dev&lt;/code&gt; in your browser when in the repo you want to work on &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;By Keyboard&lt;/strong&gt; - pressing the full stop &lt;code&gt;.&lt;/code&gt; keyboard button while in the repo&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#how-it-works"&gt;
  &lt;/a&gt;
  How it works
&lt;/h3&gt;

&lt;p&gt;Alright, it's time to see this in actions. Images are 1,000 times better than words, so check it out here:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/UDbdChCXIKw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Demo starts at &lt;a href="https://youtu.be/UDbdChCXIKw?t=110"&gt;minute 1:50&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Comment down below&lt;/strong&gt; with what you think of this new Web Editor. It's still in beta, so probably &lt;strong&gt;some features will be added&lt;/strong&gt;, but I think it's really cool!&lt;/p&gt;

&lt;p&gt;I will soon have another article/video in which I will do a bit by bit comparison between Codespaces and this Web Editor, so consider following me or subscribing if you don't wanna miss it.&lt;/p&gt;

&lt;p&gt;Also, checkout &lt;a href="https://youtu.be/Car0QZ_YbxQ"&gt;this video&lt;/a&gt;, where I talk about the new Codespaces features now that it's GA.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Like, share and follow me&lt;/strong&gt; üöÄ for more content:&lt;/p&gt;

&lt;p&gt;üìΩ &lt;a href="https://www.youtube.com/CoderDave"&gt;YouTube&lt;/a&gt;&lt;br&gt;
‚òï &lt;a href="https://buymeacoffee.com/CoderDave"&gt;Buy me a coffee&lt;/a&gt;&lt;br&gt;
üíñ &lt;a href="https://patreon.com/CoderDave"&gt;Patreon&lt;/a&gt;&lt;br&gt;
üåê &lt;a href="https://coderdave.io"&gt;CoderDave.io Website&lt;/a&gt;&lt;br&gt;
üëï &lt;a href="https://geni.us/cdmerch"&gt;Merch&lt;/a&gt;&lt;br&gt;
üë¶üèª &lt;a href="https://www.facebook.com/CoderDaveYT"&gt;Facebook page&lt;/a&gt;&lt;br&gt;
üê±‚Äçüíª &lt;a href="https://github.com/n3wt0n"&gt;GitHub&lt;/a&gt;&lt;br&gt;
üë≤üèª &lt;a href="https://www.twitter.com/davide.benvegnu"&gt;Twitter&lt;/a&gt;&lt;br&gt;
üë¥üèª &lt;a href="https://www.linkedin.com/in/davidebenvegnu/"&gt;LinkedIn&lt;/a&gt;&lt;br&gt;
üîâ &lt;a href="https://geni.us/cdpodcast"&gt;Podcast&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/CoderDave"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/UDbdChCXIKw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>github</category>
      <category>codenewbie</category>
      <category>codespaces</category>
    </item>
    <item>
      <title>Python For Data Science</title>
      <author>Harsha Vardhan</author>
      <pubDate>Mon, 23 Aug 2021 01:27:39 +0000</pubDate>
      <link>https://dev.to/harshavardhan/python-for-data-science-gaf</link>
      <guid>https://dev.to/harshavardhan/python-for-data-science-gaf</guid>
      <description>&lt;p&gt;Introduction to Python:&lt;br&gt;
Python is a general-purpose interpreted, interactive, object-oriented, and high-level programming language. It was created by Guido van Rossum during 1985- 1990&lt;/p&gt;

&lt;p&gt;Why Python ?&lt;br&gt;
Interpreted ‚àí Python is processed at runtime by the interpreter. You do not need to compile your program before executing it. This is similar to PERL and PHP.&lt;/p&gt;

&lt;p&gt;Interactive ‚àí You can actually sit at a Python prompt and interact with the interpreter directly to write your programs.&lt;/p&gt;

&lt;p&gt;Object-Oriented ‚àí Python supports Object-Oriented style or technique of programming that encapsulates code within objects.&lt;/p&gt;

&lt;p&gt;Beginner's Language ‚àí Python is a great language for the beginner-level programmers and supports the development of a wide range of applications from simple text processing to WWW browsers to games.&lt;/p&gt;

&lt;p&gt;Where we can use Python?&lt;br&gt;
Data Science, Artificial Intelligence, Machine Learning&lt;br&gt;
Image Processing&lt;br&gt;
Robot-Operating-Systems (ROS)&lt;br&gt;
Web frameworks&lt;/p&gt;

&lt;p&gt;1.1 Python variables:&lt;br&gt;
Variables are nothing but reserved memory locations to store values. This means that when you create a variable you reserve some space in memory. Python variables do not need explicit declaration to reserve memory space. The declaration happens automatically when you assign a value to a variable.&lt;/p&gt;

&lt;p&gt;Standard Data Types:&lt;br&gt;
The data stored in memory can be of many types. For example, a person's age is stored as a numeric value and his or her address is stored as alphanumeric characters. Python has various standard data types that are used to define the operations possible on them and the storage method for each of them.&lt;/p&gt;

&lt;p&gt;Python has five standard data types:&lt;br&gt;
Numbers&lt;br&gt;
String&lt;br&gt;
List&lt;br&gt;
Tuple&lt;br&gt;
Dictionary&lt;/p&gt;

&lt;p&gt;Python Identifiers:&lt;br&gt;
A Python identifier is a name used to identify a variable, function, class, module or other object. An identifier starts with a letter A to Z or a to z or an underscore (_) followed by zero or more letters, underscores and digits (0 to 9).&lt;/p&gt;

&lt;p&gt;Python does not allow punctuation characters such as @, $, and % within identifiers. Python is a case sensitive programming language. Thus, Manpower and manpower are two different identifiers in Python.&lt;/p&gt;

&lt;p&gt;Reserved Words:&lt;br&gt;
The following list shows the Python keywords. These are reserved words and you cannot use them as constants or variables or any other identifier names. All the Python keywords contain lowercase letters only.&lt;/p&gt;

</description>
      <category>python</category>
      <category>datascience</category>
      <category>machinelearning</category>
    </item>
    <item>
      <title>Sending GET Request In Python Using Requests</title>
      <author>Aya Bouchiha</author>
      <pubDate>Sun, 22 Aug 2021 23:55:12 +0000</pubDate>
      <link>https://dev.to/ayabouchiha/sending-get-request-in-python-using-requests-2ad</link>
      <guid>https://dev.to/ayabouchiha/sending-get-request-in-python-using-requests-2ad</guid>
      <description>&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  installation
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pip install requests
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#sending-get-requests-in-python-using-requests"&gt;
  &lt;/a&gt;
  Sending GET requests in Python using requests
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;

&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'https://jsonplaceholder.typicode.com/posts/1'&lt;/span&gt;

&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# &amp;lt;Response [200]&amp;gt;
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# 200
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# {
#  "userId": 1,
#  "id": 1,
#  "title": "sunt aut facere repellat provident occaecati excepturi optio reprehenderit",
#  "body": "quia et suscipit\nsuscipit recusandae consequuntur expedita et cum\nreprehenderit molestiae ut ut quas totam\nnostrum rerum est autem sunt rem eveniet architecto"
#}
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# https://jsonplaceholder.typicode.com/posts/1
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# application\json; charset=utf-8
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Content-Type'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="c1"&gt;# b'{\n  "userId": 1,\n  "id": 1,\n  "title": "sunt aut facere repellat provident occaecati excepturi optio reprehenderit",\n  "body": "quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto"\n}'
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# {'userId': 1, 'id': 1, 'title': 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit', 'body': 'quia et suscipit\nsuscipit recusandae consequuntur expedita et cum\nreprehenderit molestiae ut ut quas totam\nnostrum rerum est autem sunt rem eveniet architecto'}
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="c1"&gt;# &amp;lt;class 'dict'&amp;gt;
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;

&lt;span class="c1"&gt;# for more information
# print(dir(response))
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#tutorials-to-learn-requests"&gt;
  &lt;/a&gt;
  tutorials to learn requests
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=tb8gHvYlCFs"&gt;Python Requests Tutorial: Request Web Pages, Download Images, POST Data, Read JSON, and More&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=iv-Uc8d3tDs&amp;amp;"&gt;Requests in Python | Python Request Tutorial | Python Tutorial For Beginners | Edureka&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.geeksforgeeks.org/python-requests-tutorial/"&gt;Python Requests Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://realpython.com/python-requests/"&gt;python-requests&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#suggested-posts"&gt;
  &lt;/a&gt;
  Suggested posts
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/ayabouchiha/all-you-need-to-know-about-python-json-module-5ef0"&gt;All You Need To Know About Python JSON Module&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/ayabouchiha/5-helpful-python-math-module-methods-44gf"&gt;5 Helpful Python Random Module Methods&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/ayabouchiha/5-helpful-python-math-module-methods-44gf"&gt;5 Helpful Python Math Module Methods&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/ayabouchiha/5-useful-python-string-methods-4pe7"&gt;5 Useful Python String Methods&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Happy codding!&lt;/p&gt;

</description>
      <category>programming</category>
      <category>python</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Why every developer should be using TDD</title>
      <author>Kars van Iersel</author>
      <pubDate>Sun, 22 Aug 2021 23:29:14 +0000</pubDate>
      <link>https://dev.to/karsvaniersel/why-every-developer-should-be-using-tdd-bki</link>
      <guid>https://dev.to/karsvaniersel/why-every-developer-should-be-using-tdd-bki</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;No skill is more important for programmers than the ability to write code that works. But all too often, developers don't think about whether their code will work until it's finished, and by then they've already created many bugs that are difficult or impossible to fix.  &lt;/p&gt;

&lt;p&gt;That's why every developer should be using Test Driven Development (TDD). TDD forces you to "think before you act" and come up with a test before writing any new lines of code. This simple technique has been shown in studies done at Microsoft Research and elsewhere to reduce programming errors by as much as 50 percent--an amazing reduction in mistakes! And because TDD prevents so many bugs from creeping into your software, it also makes future debugging sessions shorter and reduces technical debt.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-tdd"&gt;
  &lt;/a&gt;
  What is TDD
&lt;/h2&gt;

&lt;p&gt;When developers code, they need to make sure that their code works, and it will work when the project is complete. This means they need to write tests for this coding before they even write the code! &lt;/p&gt;

&lt;p&gt;The way TDD works is simple: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;First, create a test for your program that will be called "Arithmetical Addition Test" - in this case, adding two numbers together. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Then write some arithmetic addition code that creates a result according to the test you created. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Finally, run your test and make sure that the result matches what you expect it to be. If not, then your code has an error in it somewhere.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#the-benefits-of-using-tdd"&gt;
  &lt;/a&gt;
  The benefits of using TDD
&lt;/h2&gt;

&lt;p&gt;The benefits of using TDD are many. One of the major benefits is that it prevents bugs before they ever get into your code. This is a great thing because not only do you find the mistakes earlier and more easily, but you also don't have to waste time fixing them later on. This means that a developer can spend less time debugging and more time creating solutions. &lt;/p&gt;

&lt;p&gt;It's also important to note that TDD allows developers to distribute their work in a better way. Taking the time to create tests for every function forces developers to think about what they are doing before they start writing new lines of code, which helps them use their time better and understand what's going on in the project better.&lt;/p&gt;

&lt;p&gt;Test Driven Development (TDD) is an important skill to have for developers because it helps them create code that will work. It's a simple process of creating tests before the code and then checking if they match up to what was expected after running them. This technique has been shown in studies done at Microsoft Research and elsewhere to reduce programming errors by as much as 50%.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-use-tdd-in-your-workflow"&gt;
  &lt;/a&gt;
  How to use TDD in your workflow
&lt;/h2&gt;

&lt;p&gt;There are many benefits to using TDD in your workflow, and it doesn't take too much time or effort to implement. &lt;/p&gt;

&lt;p&gt;It's important for developers to create tests first before they start writing code. Once you have testing, you know what your expectations for the code should be and can write the code to match those expectations. When you're both writing the test and the function, it forces you to think about what each step of the process is doing as well as how they interact with each other. This helps reduce errors and bugs that get into your code before they cause problems in the future. &lt;/p&gt;

&lt;p&gt;When coding, it's also important to make sure that the tests are developed enough. It's not necessary for them all to be 100% complete, but they should at least have a basic functional outline to help make sure that the code is going in the right direction. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when-you-should-start-using-tdd"&gt;
  &lt;/a&gt;
  When you should start using TDD
&lt;/h2&gt;

&lt;p&gt;The best time to start using TDD in your workflow is right now. The sooner you start, the more bugs will be caught and the less work you'll need to do fixing them later on.  Even if you're not currently using TDD, there's never a bad time to start. Even though it can be challenging at first, when writing code without testing can lead to much more complex issues later on in the development process.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tips-for-getting-started-with-and-implementing-tdd-into-your-workflow-or-project"&gt;
  &lt;/a&gt;
  Tips for getting started with and implementing TDD into your workflow or project
&lt;/h2&gt;

&lt;p&gt;TDD can be challenging to use at first, but the time spent will be worth it in the long run. It's important that tests are written carefully and completely so that they do not need to be changed later on during development. The best way to start is by testing a few of your functions in a simple program or project before moving on to more complex code. &lt;/p&gt;

&lt;p&gt;For example, you could try out TDD with a small function that takes two numbers and adds them together. Once you're confident with how TDD works with this function, then move on to the next one related to addition and continue from there. &lt;/p&gt;

&lt;p&gt;It can also be helpful for developers to make sure that they have plenty of tests before they start writing code. You don't need hundreds of tests, but a good number to start with is about 5-10 per function that's being developed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;TDD is a popular programming technique that helps developers create code that will work. This process involves writing tests before the code and then checking if they match up to what was expected after running them. There are many benefits to using TDD in your workflow, including reducing bugs by as much as 50%! No matter where you're at or how experienced of a developer you are, it's never too late to start this practice in your workflow. It can be challenging at first but the time spent will pay off down the line with less debugging needed on future projects! &lt;/p&gt;

</description>
      <category>testing</category>
      <category>laravel</category>
      <category>tdd</category>
    </item>
    <item>
      <title>Object Oriented PHP (Lesson 1: Classes)</title>
      <author>Clean Code Studio</author>
      <pubDate>Sun, 22 Aug 2021 22:24:17 +0000</pubDate>
      <link>https://dev.to/cleancodestudio/object-oriented-php-lesson-1-classes-23fk</link>
      <guid>https://dev.to/cleancodestudio/object-oriented-php-lesson-1-classes-23fk</guid>
      <description>&lt;div class="ltag__user ltag__user__id__386677"&gt;
  
    .ltag__user__id__386677 .follow-action-button {
      background-color: #343c35 !important;
      color: #f5f5f5 !important;
      border-color: #343c35 !important;
    }
  
    &lt;a href="/cleancodestudio" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YeAAvjHT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--GeGRizPU--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/386677/4f170830-7e2c-4f3e-81fe-b666a90b7e3f.gif" alt="cleancodestudio image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code Studio&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code Clean Life ~ Simplify&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
 

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;In &lt;a href="https://www.cleancode.studio/series/object-oriented-php/episodes/1"&gt;object-oriented programming&lt;/a&gt;, a &lt;a href="https://www.cleancode.studio/series/object-oriented-php/episodes/1"&gt;class is a blueprint for creating objects&lt;/a&gt; (a particular data structure), providing initial values for state (member variables or attributes), and implementations of behavior (member functions or methods). The class is a blueprint that defines a nature of a future object.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;...HUH??!?!&lt;/p&gt;

&lt;p&gt;Let's simplify!&lt;/p&gt;



&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/kwVLTxl1iZI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;Within &lt;a href="https://www.cleancode.studio/series/object-oriented-php"&gt;Object Oriented PHP&lt;/a&gt;, &lt;a href="https://www.cleancode.studio/series/object-oriented-php/episodes/1"&gt;classes are generally understood as blue prints, structures, or templates&lt;/a&gt; used to model either the real world or software specific concepts.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What makes &lt;a href="https://www.cleancode.studio/series/object-oriented-php/episodes/1"&gt;object oriented PHP classes&lt;/a&gt; similar to blueprints?

&lt;ul&gt;
&lt;li&gt;How does finding nouns help us make &lt;a href="https://www.cleancode.studio/series/object-oriented-php/episodes/1"&gt;PHP classes&lt;/a&gt;?&lt;/li&gt;
&lt;li&gt;What are PHP class properties?&lt;/li&gt;
&lt;li&gt;How do you define PHP class properties?&lt;/li&gt;
&lt;li&gt;What is PHP class behavior?&lt;/li&gt;
&lt;li&gt;How do you define PHP class behavior? &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;


&lt;center&gt;


&lt;h3&gt;
  &lt;a href="#the-end"&gt;
  &lt;/a&gt;
  The End
&lt;/h3&gt;




&lt;div class="ltag__user ltag__user__id__386677"&gt;
  
    .ltag__user__id__386677 .follow-action-button {
      background-color: #343c35 !important;
      color: #f5f5f5 !important;
      border-color: #343c35 !important;
    }
  
    &lt;a href="/cleancodestudio" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YeAAvjHT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--GeGRizPU--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/386677/4f170830-7e2c-4f3e-81fe-b666a90b7e3f.gif" alt="cleancodestudio image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code Studio&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code Clean Life ~ Simplify&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;&lt;a href="https://cleancode.studio/clean-code"&gt;Clean Code&lt;/a&gt;&lt;br&gt;
&lt;a href="https://cleancode.studio/design-patterns"&gt;Java Script Design Patterns&lt;/a&gt;&lt;br&gt;
&lt;a href="https://cleancode.studio/series/object-oriented-php/"&gt;Object Oriented Programming&lt;/a&gt;&lt;br&gt;
&lt;a href="https://cleancode.studio/algorithms"&gt;JavaScript Algorithm Examples&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://cleancode.studio"&gt;Clean Code Studio&lt;/a&gt;&lt;br&gt;
‚òïÔ∏è Code Tips&lt;br&gt;
‚òïÔ∏è Career Advice&lt;br&gt;
‚òïÔ∏è Developer Memes&lt;br&gt;
&lt;small&gt;Shiny button, Fancy ùó°ùó≤ùòÑùòÄùóπùó≤ùòÅùòÅùó≤ùóø üëá, Juicy Dev Tips...wanna join?&lt;/small&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://cleancodestudio.paperform.co/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dgj1OcQv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f7hwc3k4pzedr59fnr9r.png" alt="Yes, I want in! Button to go sign up for clean code studio newsletter"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;(Discover [50+ pages] of my personal FAANG interview notes!)&lt;/small&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://twitter.com/cleancodestudio"&gt;Follow @cleancodestudio on Twitter&lt;/a&gt;&lt;br&gt;
&lt;a href="https://youtube.com/c/cleancodestudio"&gt;Follow @cleancodestudio on YouTube&lt;/a&gt;&lt;br&gt;
&lt;a href="https://tiktok.com/@cleancodestudio"&gt;Follow @cleancodestudio on TikTok&lt;/a&gt;&lt;br&gt;
&lt;a href="https://facebook.com/cleancodestudio"&gt;Follow @cleancodestudio on Facebook&lt;/a&gt;&lt;br&gt;
&lt;a href="https://instagram.com/cleancodestudio"&gt;Follow @cleancodestudio on Instagram&lt;/a&gt;&lt;br&gt;
&lt;a href="https://linkedin.com/company/cleancodestudio"&gt;Follow @cleancodestudio on LinkedIn&lt;/a&gt;&lt;br&gt;
&lt;a href="https://reddit.com/r/cleancodestudio"&gt;Follow @cleancodestudio on Reddit&lt;/a&gt;&lt;br&gt;
&lt;a href="https://dev.to/cleancodestudio"&gt;Follow @cleancodestudio on Dev.to&lt;/a&gt;&lt;br&gt;
&lt;a href="https://stackoverflow.com/users/8541350/clean-code-studio"&gt;Follow @cleancodestudio on Stack Overflow&lt;/a&gt;&lt;br&gt;
&lt;a href="https://npmjs.com/~zhorton999"&gt;Follow @cleancodestudio packages on npm&lt;/a&gt;&lt;br&gt;
&lt;a href="https://packagist.org/packages/clean-code-studio"&gt;Follow @cleancodestudio packages on packagist&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/zhorton34"&gt;Star @cleancodestudio on Github&lt;/a&gt;&lt;/p&gt;




&lt;/center&gt;

</description>
      <category>php</category>
      <category>codenewbie</category>
      <category>oop</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Encryption is important</title>
      <author>William</author>
      <pubDate>Sun, 22 Aug 2021 22:09:33 +0000</pubDate>
      <link>https://dev.to/willkenzie/encryption-is-important-36cb</link>
      <guid>https://dev.to/willkenzie/encryption-is-important-36cb</guid>
      <description>&lt;p&gt;Encryption is crucial to everyone, whether it's the average user or enterprise deployment. Everyone has information they'd rather hide. It may not be much; you may be the kind of person that doesn't save embarrassing photos or cringy search histories. But what about private conversations between you and your friends? &lt;/p&gt;

&lt;p&gt;You don't have to be a criminal to enjoy encryption, simply stopping random people from reading texts you sent to your friend and texts they sent back is most likely something you'd be interested in. After all, you don't send them texts publically - it's a private conversation!&lt;/p&gt;

&lt;p&gt;This is where encryption comes into play. It may not be much - it can easily be automatic encryption like what's found in Signal or iMessage, but it's important nonetheless. Unless you trust iMessage, in which case you don't care about privacy and should &lt;em&gt;really&lt;/em&gt; take my advice and &lt;strong&gt;use Signal so Jared can quit reading your fantasy texts&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I have seen encryption that can be broken in seconds - a good example of this is poorly encrypted AES128 where the key can be extracted. For good encryption, you should use more layers, more random passwords, and smarter encryption.&lt;br&gt;
Let's assume you have a laptop with private communications between you and a friend. You don't need to be privacy paranoid to not want some random stranger reading these texts. &lt;/p&gt;

&lt;p&gt;The first step is adding a password to your account. This way, someone can't just click "Sign in" and log into your computer. But, if they have long-term access to your device, they can boot into a different OS or unplug your hard drive and read the texts through a file browser. This is fairly basic and if you aren't doing this, Joe is going to love reading your search history.&lt;/p&gt;

&lt;p&gt;The next layer is enabling user account encryption, like with NTFS's "Encrypt contents to secure data" option in Windows or Linux's EncryptFS. Now, if you have a weak password like your birthdate or your crush's name because &lt;strong&gt;we all know you have one Jared&lt;/strong&gt;, then you should reconsider what kinds of passwords you use. Try to avoid using words or w0rd$ in your password because that can be just as bad as setting your password to "password,"&lt;/p&gt;

&lt;p&gt;The next layer is whole disk encryption, which can be done with LUKS on Linux and, I believe, MacOS as well. Feel free to set this to an actual phrase with numbers, letters, and special characters in it, as long as it is as long as possible. Doing this can prevent most attacks that don't have a lot of time, like a random stranger in the library. Joe is watching.&lt;/p&gt;

&lt;p&gt;Your final step should be encrypting sensitive files and folders themselves with whatever your system can use. Avoid using programs like 7Zip and instead, use things like OpenSSL or dedicated tools that are well-vetted in the encryption community. Use PGP encryption to communicate via email and use Signal to prevent someone from reading the message logs. &lt;/p&gt;

&lt;p&gt;My next chunk of advice is to encrypt a flash drive with sensitive data and carry it on you at all times, maybe put it on your keychain. This makes it much more difficult for someone to decrypt your data because they won't likely have physical access to it. The creepy stalker behind you Chrome tried to warn you about won't be able to see your private messages.&lt;/p&gt;

&lt;p&gt;While you're at it, create a profile in your web browser and store it on that flash drive. Save your passwords in your browser with that profile and it will protect your browser sessions from attack.&lt;/p&gt;

&lt;p&gt;If anyone has any tips they'd like to contribute, feel free to share them below in the comments, I'll be replying to any advice and I may add it to this article if it's really good advice.&lt;/p&gt;

</description>
      <category>encryption</category>
      <category>privacy</category>
      <category>security</category>
    </item>
    <item>
      <title>JS13K: A journey through music (Day 10 üòä)</title>
      <author>Michael Primo</author>
      <pubDate>Sun, 22 Aug 2021 21:59:43 +0000</pubDate>
      <link>https://dev.to/michaelprimo/js13k-a-journey-through-music-day-10-3338</link>
      <guid>https://dev.to/michaelprimo/js13k-a-journey-through-music-day-10-3338</guid>
      <description>&lt;p&gt;Today I changed ways for proceeding the game.&lt;br&gt;
I need to make music for it and looking for a solution for making soundtracks for a 13KB game (Is this possible? If yes, will that be good?), so I am reading a book about that.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8_vZtKyR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z0dbqebczt3mhzkunxzm.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8_vZtKyR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z0dbqebczt3mhzkunxzm.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
 This one. 



&lt;p&gt;I hope to learn how to process, play and visualize music throughly once of all this way :)&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>devjournal</category>
      <category>challenge</category>
      <category>gamedev</category>
    </item>
    <item>
      <title>Why care about Immutability ?</title>
      <author>mayankav</author>
      <pubDate>Sun, 22 Aug 2021 20:37:23 +0000</pubDate>
      <link>https://dev.to/mayankav/why-care-about-immutability-119g</link>
      <guid>https://dev.to/mayankav/why-care-about-immutability-119g</guid>
      <description>&lt;p&gt;We unavoidingly tap into function purity, point free syle, recursion, immutability etc.. when discussing functional programming. You may not necessarily practice all aspects of functional programming in your run-of-the-mill job but if you're someone who works extensively with JavaScript libraries like RxJs, Cycle or state management tools like Flux (Redux, Vuex), I am sure you'd come across immutable objects more often than anything else functional. Immutability infact is so crucial to the reactive world of programming that you can count it into the basics of it. We are not going to talk about strings and other primitives in JavaScript which by design are always immutable.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yEELsO3t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a28oi7iikkisuhqn6xhp.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yEELsO3t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a28oi7iikkisuhqn6xhp.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt;


&lt;p&gt;For a library that's reactive, it needs to &lt;strong&gt;&lt;em&gt;preserve the state&lt;/em&gt;&lt;/strong&gt; throughout the execution of the program, why? How else would you detect change in the state? Think of it like this, given that JS objects are &lt;strong&gt;&lt;em&gt;ephemeral&lt;/em&gt;&lt;/strong&gt; (non persistent), once you modify some property its value gets changed, &lt;strong&gt;&lt;em&gt;the object being the same&lt;/em&gt;&lt;/strong&gt;. If you compare the object before modifcation to the one after modification, well they are the same. Obviously you know why, modifying a property wont generate a new object! To understand this I expect you know that &lt;strong&gt;&lt;em&gt;a variable holding an object in JavaScript actually holds the reference to the memory block where the object's properties are stored as key value pairs&lt;/em&gt;&lt;/strong&gt;. Now you may say that you can detect a change by employing a recursive comparison on the data ? Not a performant idea when your state keeps changing every now and then! Immutability suggests &lt;strong&gt;&lt;em&gt;shallow copying&lt;/em&gt;&lt;/strong&gt; the object and making new modifications on the new copy of the object. Thinking of the copying step as a &lt;strong&gt;&lt;em&gt;signal&lt;/em&gt;&lt;/strong&gt; that something changed in the state, wont be wrong. Now that's a much faster and performance compliant way to tell whether or not the state changed. That may also trigger another doubt, how do you believe that making copies of your state is more performant than a recursive check on the property which changed? Well, that's a good question. I will try to catch up with this towards the end of this post, for now I'd say that there's something called &lt;strong&gt;&lt;em&gt;structural sharing&lt;/em&gt;&lt;/strong&gt; that makes this possible. &lt;/p&gt;


&lt;div class="runkit-element"&gt;
  &lt;code&gt;
    
// hidden setup JavaScript code goes in this preamble area

  &lt;/code&gt;
  &lt;code&gt;
    
const obj = {
    x: 1,
    y: 2
}

const copiedObj = obj;
copiedObj.x = 10;

console.log(obj.x); // 10
console.log(copiedObj.x); // 10 
// Referential equality check doesn't care about the contents, only the reference
console.log(obj === copiedObj); // true

const immutablyCopiedObj = {...obj};
console.log(obj === immutablyCopiedObj); //false

  &lt;/code&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;center&gt;&lt;h6&gt;
&lt;a href="https://codepen.io/mayankav/pen/xxrKggJ"&gt;Try on Codepen&lt;/a&gt;&lt;h6&gt;&lt;/h6&gt;
&lt;/h6&gt;&lt;/center&gt;
&lt;br&gt;



&lt;h2&gt;
  &lt;a href="#in-essence-immutability-has-the-following-benefits"&gt;
  &lt;/a&gt;
  In essence immutability has the following benefits
&lt;/h2&gt;

&lt;p&gt;1- &lt;strong&gt;&lt;em&gt;&lt;u&gt;Reactivity through change tracking&lt;/u&gt;&lt;/em&gt;&lt;/strong&gt; - We already discussed this. Using immutable state can make identifying changes quick and effortless both for the machine and us developers. This is what tools like redux, vuex or even parts of react and vue themselves build their reactivity upon. As soon as something in the state changes, be it based on some asynchronous background activity or a result of user interaction with the UI, a reference equality check instantly signals that it may be the correct time to rerender.&lt;/p&gt;

&lt;p&gt;2- &lt;strong&gt;&lt;em&gt;&lt;u&gt;Predictability and better debugging&lt;/u&gt;&lt;/em&gt;&lt;/strong&gt; - Predictability is very frequently linked with function purity. Given a function which does not cause any &lt;a href="https://subscription.packtpub.com/book/application-development/9781789800104/5/ch05lvl1sec38/side-effects"&gt;side effect&lt;/a&gt; within itself, the ouput will always be the same for the same set of inputs no matter how many times you call the function. With this restriction that no function can modify the shared state, we now have tools like Vuex and Redux that let you modify the state but in a way that fulfils their criteria. For example, you can only make changes to the Vuex store through functions listed as &lt;strong&gt;&lt;em&gt;mutations&lt;/em&gt;&lt;/strong&gt; in the store. You also have access to methods like &lt;strong&gt;&lt;em&gt;Vue.set()&lt;/em&gt;&lt;/strong&gt; &amp;amp; &lt;strong&gt;&lt;em&gt;Vue.delete()&lt;/em&gt;&lt;/strong&gt; to register your changes immutably. This makes debugging more easy and outputs/errors more predictable.&lt;/p&gt;

&lt;p&gt;3- &lt;strong&gt;&lt;em&gt;&lt;u&gt;Versioning&lt;/u&gt;&lt;/em&gt;&lt;/strong&gt; - Isn't it obvious that if you can preserve states you can go back and look at the old ones whenever needed? Quite similar to how you still have access to your old piece of code in Git even after merging several times on top of that. Redux implements a feature they call "&lt;a href="https://github.com/zalmoxisus/redux-devtools-extension/blob/master/docs/Features/Trace.md"&gt;action replay&lt;/a&gt;", wherein you can see the state change and the user interaction side by side in the browser. You think its helpful? Ofcourse! cool and helpful. Now you know how important it is to preserve the state.&lt;/p&gt;

&lt;p&gt;4- &lt;strong&gt;&lt;em&gt;&lt;u&gt;Performance&lt;/u&gt;&lt;/em&gt;&lt;/strong&gt; - I took this as the last thing only because I did not talk about &lt;strong&gt;&lt;em&gt;structural sharing&lt;/em&gt;&lt;/strong&gt; when we were discussing performance. You may still be wondering how would creating new objects for every simple change be more performance complaiant than a &lt;a href="https://www.npmjs.com/package/deep-equal"&gt;deep equality check&lt;/a&gt; on the objects. While talking about immutability I also used the term &lt;strong&gt;&lt;em&gt;shallow copy&lt;/em&gt;&lt;/strong&gt;, that should have given out some hint. If not, its still nothing to worry about. As easy as it is, when making copies its important to be aware that the object you're copying may have nested objects as values to its properties. We &lt;strong&gt;&lt;em&gt;shallow copy&lt;/em&gt;&lt;/strong&gt; (just copy the reference without creating a new object) those objects which are not to be changed and only &lt;strong&gt;&lt;em&gt;deep clone&lt;/em&gt;&lt;/strong&gt; the nested object that actually needs to be changed. That's what we call structure sharing between 2 objects. You share the entire structure by internal references and only re create the node that needs modification. This may take an example for you to wrap your head around it.&lt;br&gt;&lt;/p&gt;


&lt;div class="runkit-element"&gt;
  &lt;code&gt;
    
// hidden setup JavaScript code goes in this preamble area

  &lt;/code&gt;
  &lt;code&gt;
    
const tea = {
  tbspSugar: 1,
  type: 'beverage',
  manufacturer: {
    name: 'Assam Tea Company',
    licensed: true
  }
}

// making a copy of tea but with an extra tbsp of sugar
const sweetestTea = {
  ...tea,
  tbspSugar: 2
}

// making a copy of tea but with another manufacturer name
const chineseTea = {
  ...tea,
  manufacturer: {
   ...tea.manufacturer,
    name: 'Chinese Tea Company'
  }
}

console.log(sweetestTea);
console.log(chineseTea);

  &lt;/code&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;center&gt;&lt;h6&gt;
&lt;a href="https://codepen.io/mayankav/pen/powzeGY"&gt;Try on Codepen&lt;/a&gt;&lt;h6&gt;&lt;/h6&gt;
&lt;/h6&gt;&lt;/center&gt;
&lt;br&gt;




&lt;p&gt;You see its not that difficult but only until it reaches like thousands of properties in an object and then when you need to modify some very very deeply nested object, it sure will break your fingers. If that wasn't enough trouble, a thought of mistakenly altering some other nested object may start bothering you. To avoid hassle when dealing with large chunks of objects, you may opt for libraries like &lt;a href="https://www.npmjs.com/package/immutable"&gt;immutable.js&lt;/a&gt; or &lt;a href="https://github.com/immerjs/immer"&gt;immer&lt;/a&gt;. I would highly recommed &lt;a href="https://dev.to/viebel/structural-sharing-with-7-lines-of-javascript-2dnh"&gt;this article by Yehonathan&lt;/a&gt; if you'd like to learn more about structural sharing. If you'd like to explore more on functional programming, &lt;a href="https://dev.to/mayankav/think-recursive-272h"&gt;give this a read&lt;/a&gt; to understand recursion from my point of view.‚Äç&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#originally-posted-here-"&gt;
  &lt;/a&gt;
  Originally Posted Here -
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://mayankav.webflow.io/blog/why-immutability"&gt;https://mayankav.webflow.io/blog/why-immutability&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>vue</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Flatten a nested array. Algorithms and Scripting</title>
      <author>Randy Rivera</author>
      <pubDate>Sun, 22 Aug 2021 20:35:29 +0000</pubDate>
      <link>https://dev.to/rthefounding/flatten-a-nested-array-algorithms-and-scripting-528j</link>
      <guid>https://dev.to/rthefounding/flatten-a-nested-array-algorithms-and-scripting-528j</guid>
      <description>&lt;ul&gt;
&lt;li&gt;I've been saving these posts for a while now. I would always want to post something that I myself understand as well. Well Today we have a problem that needs us to flatten a nested array. We should also account for different levels of nesting.&lt;/li&gt;
&lt;li&gt;Code:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function checkForArrayApproval(arr) {
  return arr;
}

checkForArrayApproval([1, [2], [3, [[4]]]]);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Answer:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function steamrollArray(arr) {
  let newArr = []
  // Loop over array contents
  for (let i = 0; i &amp;lt; arr.length; i++) {
    if (Array.isArray(arr[i])) {
      // Recursively flatten entries that are arrays
      //  and push into the newArr
      newArr.push(...steamrollArray(arr[i]));
    } else {
       // Copy contents that are not arrays
      newArr.push(arr[i]);
    }
  }
  return newArr;
}

// we could also do it this way:
//    while (arr.some(function(num) {
//      return Array.isArray(num)
//    })) {
//      let i = 0

//   arr = arr.flat()
//   i += 1
// }

//   return arr;
// }

console.log(steamrollArray([1, [2], [3, [[4]]]])); // will display [1, 2, 3, 4]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#binary-code"&gt;
  &lt;/a&gt;
  Binary Code
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;In this following post we must return an English translated sentence of the passed binary string.&lt;/li&gt;
&lt;li&gt;Code:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function binaryCode(str) {
  return str;
}

binaryCode("01000001 01110010 01100101 01101110 00100111 01110100 00100000 01100010 01101111 01101110 01100110 01101001 01110010 01100101 01110011 00100000 01100110 01110101 01101110 00100001 00111111");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Answer:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function binaryCode(str) {
  return str.split(" ").map(dataPoint =&amp;gt; {
    let characterPoint = parseInt(dataPoint, 2);
    let decipheredLetter = String.fromCharCode(characterPoint);
    return decipheredLetter;
  }).join("")
}

console.log(binaryCode("01000001 01110010 01100101 01101110 00100111 01110100 00100000 01100010 01101111 01101110 01100110 01101001 01110010 01100101 01110011 00100000 01100110 01110101 01101110 00100001 00111111")); will display Aren't bonfires fun!?

// 2    Binary numeral system   Used internally by nearly all computers, is base 2. The two digits are "0" and "1", expressed from switches displaying OFF and ON, respectively.

// The map() method creates a new array populated with the results of calling a provided function on every element in the calling array.

// Ex: 
// const array1 = [1, 4, 9, 16];

// // pass a function to map
// const map1 = array1.map(x =&amp;gt; x * 2);

// console.log(map1);
// // expected output: Array [2, 8, 18, 32];
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#it-is-a-sunday-currently-415-in-the-afternoon-today-were-going-to-flatten-a-nested-array"&gt;
  &lt;/a&gt;
  It is a sunday, currently 4:15 in the afternoon, today we're going to flatten a nested array.
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Also don't forget that you must consider for different levels of nesting.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Code:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function nestedArr(arr) {
  return arr;
}

nestedArr([1, [2], [3, [[4]]]]);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Answer:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function nestedArr(arr) {
  let newArr = []
  for (let i = 0; i &amp;lt; arr.length; i++) {
    if (Array.isArray(arr[i])) { // wants to check each element if it is an Array or not.
      newArr = newArr.concat(nestedArr(arr[i])) // we're using recursion because we don't know how many levels it will be so we want it to call itself whenever it is needed. call for each array, if it is we go deeper in the nested levels
    } else {
    newArr.push(arr[i]) // if it is not an array (base case)
    }
  }
  return newArr;
}
console.log(nestedArr([1, [2], [3, [[4]]]])); will display [1, 2, 3, 4] 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>devops</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Google dorks for WordPress</title>
      <author>Julien Maury</author>
      <pubDate>Sun, 22 Aug 2021 20:21:38 +0000</pubDate>
      <link>https://dev.to/jmau111/google-dorks-for-wordpress-2mi8</link>
      <guid>https://dev.to/jmau111/google-dorks-for-wordpress-2mi8</guid>
      <description>&lt;p&gt;Google is a gigantic word wild database. Finding a vulnerable WordPress website in a few seconds can be as simple as a Google search.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  Disclaimer
&lt;/h2&gt;

&lt;p&gt;As usual with ethical hacking in general and depending on your country, using Google dorks to find vulnerable websites can lead to lawsuits!&lt;/p&gt;

&lt;p&gt;On no account should you use Google dorks to download logs, databases, and other resources you are not supposed to access, even in a &lt;em&gt;white hat perspective&lt;/em&gt; or for test purposes.&lt;/p&gt;

&lt;p&gt;I know that's lame, and most people do it with the best intentions, but remember that can be illegal, and don't believe all vulnerable companies and organizations will treat you well if they know you have access to their credentials.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#google-dorks-in-short"&gt;
  &lt;/a&gt;
  Google dorks in short
&lt;/h2&gt;

&lt;p&gt;It's called &lt;em&gt;Google dorking&lt;/em&gt; and it consists of &lt;strong&gt;advanced Google search queries with unique keywords and operators&lt;/strong&gt; to find sensitive information and security breaches.&lt;/p&gt;

&lt;p&gt;For example, if you want websites that use the Woocommerce plugin, you may &lt;em&gt;google&lt;/em&gt; the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;inurl:"/wp-content/plugins/woocommerce"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's pretty helpful when known vulnerabilities are revealed for specific plugins.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#read-my-logs"&gt;
  &lt;/a&gt;
  Read my logs üòì
&lt;/h2&gt;

&lt;p&gt;Google this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;inurl:wp-content/debug.log 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You'll see WordPress websites that have logs enabled in production in a publically accessible directory!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#please-download-my-sql-dumps"&gt;
  &lt;/a&gt;
  Please, download my SQL dumps üò±
&lt;/h2&gt;

&lt;p&gt;You can even find SQL dumps with Google Dorks. Of course, not all WordPress installations have such a big security hole, but it happens:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;filetype:sql intext:wp_users
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once you have the database, you do pretty much everything you want, including finding user passwords by decrypting MD5 strings.&lt;/p&gt;

&lt;p&gt;Note that it can be slightly more subtle:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;filetype:tar.gz site:mywebsite.com
filetype:sql site:mywebsite.com
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above dork query looks for publically accessible backup files in mywebsite.com. If you accidentally saved a backup in a public directory and forgot to remove it, that can turn nasty.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-database-for-google-dorks"&gt;
  &lt;/a&gt;
  A database for Google dorks ü§òüèª
&lt;/h2&gt;

&lt;p&gt;Instead of listing all kinds of Google dorks here, I prefer you go to &lt;a href="https://www.exploit-db.com/google-hacking-database"&gt;exploit-db.com&lt;/a&gt; to see it by yourself. Just type "wordpress" in the search form, and you'll get tones of Google dorks!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-fix-it-%EF%B8%8F"&gt;
  &lt;/a&gt;
  How to fix it ‚ö°Ô∏è
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#test-your-website"&gt;
  &lt;/a&gt;
  Test your website
&lt;/h3&gt;

&lt;p&gt;Run dork queries against your website, and you'll see if there's something wrong.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#request-removal"&gt;
  &lt;/a&gt;
  Request removal
&lt;/h3&gt;

&lt;p&gt;You can request removal with the Removals Tool, which enables you to temporarily block pages from Google Search results on sites that you own.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://support.google.com/webmasters/answer/1663419?hl=en"&gt;Source: Google support&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#disable-directory-browsing"&gt;
  &lt;/a&gt;
  Disable directory browsing
&lt;/h3&gt;

&lt;p&gt;Most of the time, those websites are misconfigured so that you can browse the &lt;code&gt;wp-content&lt;/code&gt; directory. Any website should disable directory browsing with, for example, this line in the &lt;code&gt;.htaccess&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Options -Indexes
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#forget-the-raw-robotstxt-endraw-file"&gt;
  &lt;/a&gt;
  Forget the &lt;code&gt;robots.txt&lt;/code&gt; file
&lt;/h3&gt;

&lt;p&gt;While the &lt;code&gt;robots.txt&lt;/code&gt; file is meant for search engines, it's publically accessible, so it's easy for hackers to use this file to discover directories and files.&lt;/p&gt;

&lt;p&gt;You might end up giving them sensitive information!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#disable-logs-and-debugging"&gt;
  &lt;/a&gt;
  Disable logs and debugging
&lt;/h3&gt;

&lt;p&gt;The production environment is not meant for logging errors and debugging. You can add the following code in your &lt;code&gt;wp-config.php&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nb"&gt;ini_set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'display_errors'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'Off'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nb"&gt;ini_set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'error_reporting'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;E_ALL&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nb"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'WP_DEBUG'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nb"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'WP_DEBUG_DISPLAY'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#install-a-security-plugin"&gt;
  &lt;/a&gt;
  Install a security plugin
&lt;/h3&gt;

&lt;p&gt;Most security plugins ensure your installation is safer, making all the quick fixes we just saw for you, protecting sensitive directories, and scanning your website regularly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrap-up"&gt;
  &lt;/a&gt;
  Wrap up
&lt;/h2&gt;

&lt;p&gt;Fortunately, many web hosting providers have robust default configurations and pre-built CMS integrations to prevent harmful situations.&lt;/p&gt;

&lt;p&gt;However, Google dorks for WordPress are still a common concern in 2021. You'd be surprised how many &lt;code&gt;.env&lt;/code&gt; files and credentials you can access with a simple search.&lt;/p&gt;

</description>
      <category>wordpress</category>
      <category>cybersecurity</category>
    </item>
    <item>
      <title>Code your own vue</title>
      <author>Gil Rudolf H√§rdi</author>
      <pubDate>Sun, 22 Aug 2021 19:46:28 +0000</pubDate>
      <link>https://dev.to/ghaerdi/code-your-own-vue-50mg</link>
      <guid>https://dev.to/ghaerdi/code-your-own-vue-50mg</guid>
      <description>&lt;p&gt;Code your own vue is a series of post that is going to show you how create your own vue for learning purposes, the implementation of functionalities try to be most simple as can be.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-ideas-of-this-title-are"&gt;
  &lt;/a&gt;
  The ideas of this title are:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Get a &lt;strong&gt;better&lt;/strong&gt; understanding of the main concepts of popular frameworks or libraries like vue, react, angular and so on.&lt;/li&gt;
&lt;li&gt;Be a cool coder that has did your own vue... a simple one like a cheap toy, but is your own vue.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Consider that I can be wrong or vue possibly handle some concepts in other ways, you can use the comments section if you think I'm wrong.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-you-need-to-know"&gt;
  &lt;/a&gt;
  What you need to know:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Javascript&lt;/li&gt;
&lt;li&gt;DOM&lt;/li&gt;
&lt;li&gt;Vue v2&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I want to be concise, but also I will add some references links to documentation if I use something that someone who start learning javascript may don't know.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#posts"&gt;
  &lt;/a&gt;
  Posts
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/ghaerdi/make-your-own-vue-rendering-and-states-jb6"&gt;Rendering and states&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#links"&gt;
  &lt;/a&gt;
  Links
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ghaerdi/petite-vue"&gt;petite-vue pepository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/ghaerdi/"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>vue</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Let's build a simple Node.js CLI application</title>
      <author>vishnu prasad</author>
      <pubDate>Sun, 22 Aug 2021 19:28:08 +0000</pubDate>
      <link>https://dev.to/vishnup95/let-s-build-a-simple-node-js-cli-application-1l9c</link>
      <guid>https://dev.to/vishnup95/let-s-build-a-simple-node-js-cli-application-1l9c</guid>
      <description>&lt;p&gt;Hello everyone! Hope you all are staying safe. &lt;/p&gt;

&lt;p&gt;Today, we are going to see how to quickly create a Node.js CLI application. This is a true beginners post. If you have experience creating Node.js CLI applications, then I don't think you will learn more from here. You could always read on and see. You may learn something new. &lt;/p&gt;

&lt;p&gt;Now that's out of the way. Let's begin.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-we-building"&gt;
  &lt;/a&gt;
  What are we building?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;CLI&lt;/strong&gt; is the &lt;strong&gt;Command Line Interface&lt;/strong&gt;. A better understanding would be obtained by calling it terminal on your computer. CLI apps are apps that run on the terminal. Minimal visual effect, maximum efficency and productivity is the tagline of CLI apps. &lt;/p&gt;

&lt;p&gt;Hmm, I thought about what would be a good introduction to Node.js CLI Application.  One of the most used CLI commands would be the &lt;code&gt;ls&lt;/code&gt; command. Let's reproduce that using Node.js. We will create a &lt;code&gt;nls&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tools-of-the-trade"&gt;
  &lt;/a&gt;
  Tools of the trade
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#nodejs"&gt;
  &lt;/a&gt;
  Node.js
&lt;/h3&gt;

&lt;p&gt;Node.js is a JavaScript runtime in the terminal (or outside of the browser). It's a wonderful piece of technology that allows JavaScript developers to create fully featured backend systems with their exisiting JavaScript knowledge.  Read more &lt;a href="https://nodejs.org/en/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#npm-package-manager"&gt;
  &lt;/a&gt;
  npm - Package Manager
&lt;/h3&gt;

&lt;p&gt;A package manager. 1000's of open source packages that you can try and use to build great things. Easy to install and get started, a great tool in the toolbox of any JS developer.&lt;br&gt;
&lt;strong&gt;FUN FACT&lt;/strong&gt; You would think npm stands for &lt;code&gt;Node Package Manager&lt;/code&gt;, that's a misunderstanding most people make. It is actually a recursive bacronymic abbreviation for "npm is not an acronym". &lt;a href="https://github.com/npm/cli"&gt;https://github.com/npm/cli&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I think that's it for now. Let's build something. &lt;/p&gt;

&lt;p&gt;First create a folder called nls. &lt;code&gt;cd&lt;/code&gt; into nls. Make sure you have node and npm setup. &lt;/p&gt;

&lt;p&gt;Run &lt;code&gt;npm init -y&lt;/code&gt;. This will create a package.json. This is a config file for your application. It will list the dependencies you have used, names, description and much more. &lt;/p&gt;

&lt;p&gt;Exercise for you: Why did we use &lt;code&gt;-y&lt;/code&gt; ? what happens if we don't. Figure it out.&lt;/p&gt;

&lt;p&gt;The first thing we need to do is to create an &lt;code&gt;index.js&lt;/code&gt; in the nls directory. Cool. &lt;/p&gt;

&lt;p&gt;We can now go into the API Docs of the Node.JS to see what we can use. Visit &lt;a href="https://nodejs.org/dist/latest-v14.x/docs/api/"&gt;Here&lt;/a&gt;. Make sure you are following for the version you have. I am running the 14.x LTS version. So I will use that. The sidebar on the left lists the different standard library and API's available for your node projects. Look through it. You will see something called File System. Load it up. It's a vast vast document. Don't feel overwhelmed. You can go ahead and search for readdir. There are three versions of the &lt;code&gt;readdir&lt;/code&gt; function available for our use. &lt;br&gt;
1) call back based one.&lt;a href="https://nodejs.org/dist/latest-v14.x/docs/api/fs.html#fs_fs_readdir_path_options_callback"&gt;Doc&lt;/a&gt;&lt;br&gt;
2) Synchronous readdir. &lt;a href="https://nodejs.org/dist/latest-v14.x/docs/api/fs.html#fs_fs_readdirsync_path_options"&gt;Doc&lt;/a&gt;&lt;br&gt;
3) promises based one. &lt;a href="https://nodejs.org/dist/latest-v14.x/docs/api/fs.html#fs_fspromises_readdir_path_options"&gt;Doc&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please read through them. You don't need to understand everything. It would be really good for you to read through it and get an idea of the difference. We will use the callback based one to start with. Although I would probably prefer a promise based approach in a large project. Let's write some code. &lt;/p&gt;

&lt;p&gt;Start by requiring the fs module. ( we could use the ECMAScript module system to have taste of it. It's widely available now and I expect node packages to move to import/export rather quickly.Infact I will write another post on using the new import/export node API soon. See &lt;a href="https://nodejs.org/dist/latest-v14.x/docs/api/esm.html"&gt;more&lt;/a&gt; if you are interested. )&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const fs = require('fs')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;next we use the readdir function.readdir accepts three arguments. the first one is a path. This is the path of the directory from which you want to read the contents. The second is options objects. It has options like &lt;code&gt;encoding&lt;/code&gt; and &lt;code&gt;withFileType&lt;/code&gt;. Note that. We will use that one. The last is a callback function that will allows us to execute the code we want after readdir runs. The callback accepts two arguments. &lt;code&gt;err&lt;/code&gt; and &lt;code&gt;files&lt;/code&gt;. Okay.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// process.cwd() is the way by which node understands the 
// current working directory. We will change it soon. 
// Give me 2 minutes :)
fs.readdir(process.cwd(), (err, files) =&amp;gt; {
 if(err) {
  console.error('something went wrong!');
  return;
 }
 console.log(files)
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;How do we test it out? Well node makes it easy. Go to your package.json. somewhere in that, without breaking the JSON structure add&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// package.json
// You can replace nls with whatever you want. This is what 
// your ls command is going to be. Get creative. 
"bin": {
  "nls": "index.js"
},
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;next go back to your index.js and add the shebang to make it executable. Note the shebang should be the first line in your js file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/usr/bin/node
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Shebang tells which interpreter to use. We are telling to use node. &lt;/p&gt;

&lt;p&gt;Now in your directory with the package.json run &lt;code&gt;npm install -g .&lt;/code&gt; (npm link is also a alternative)&lt;br&gt;
This should mean you can now &lt;code&gt;nls&lt;/code&gt; on the terminal and see something. Something like &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aM9I0cfq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zdvau6n8jbjskkqppwo1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aM9I0cfq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zdvau6n8jbjskkqppwo1.png" alt="Node - File List"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Exciting. This is an array of the files and folders in the directory. Wohoo. Almost, almost. Note two important points. This is an array. All files are colored in the same green color. Let's work on fixing that. Let's install chalk to color the console outputs. Chalk is terminal styling helper. It provides a simple wrapper to style/color the console logs of your application. &lt;a href="https://www.npmjs.com/package/chalk"&gt;Chalk&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm install --save chalk&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now let's use the options object of the &lt;code&gt;readdir&lt;/code&gt; function. &lt;br&gt;
Change the code as&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;readdir(process.cwd(), { withFileTypes: true },...
// no changes here..
)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;withFileTypes ensures that files that we get back are of class of type &lt;code&gt;fs.Dirent&lt;/code&gt;. This is node file object which has certain properties and methods which are very usual here. &lt;a href="https://nodejs.org/dist/latest-v14.x/docs/api/fs.html#fs_class_fs_dirent"&gt;fs.Dirent&lt;/a&gt;. One of this is a method &lt;code&gt;fs.isDirectory()&lt;/code&gt; that returns a boolean. Like you get from the name. It can be useful to check whether it is directory or not. Let's include that. Modify our callback function as&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//index.js

readdir(process.cwd(), { withFileTypes: true }, (err, files) =&amp;gt; {
    if (err) {
        log(chalk('ERROR'));
    }
    files.forEach((file) =&amp;gt; {
        if (file.isDirectory()) {
            log(chalk.blueBright(file.name));
        } else {
            log(chalk.whiteBright(file.name));
        }
    });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hmm hmm.. Now let's try running it. Save it and type &lt;code&gt;nls&lt;/code&gt; into your terminal. You can see that folders are blue colored and files are white colored. Yay. &lt;/p&gt;

&lt;p&gt;One more change that I wanna make is to accept a argument. &lt;code&gt;ls&lt;/code&gt; can take an argument and list the files and folders in the path. For. eg. in your linux machine. &lt;code&gt;ls /home/{usrname(replace with your usernam)}&lt;/code&gt; can list the files in that directory. Let's add that. &lt;/p&gt;

&lt;p&gt;How can read the arguments passed in the CLI to your file. We can use &lt;code&gt;process.argv&lt;/code&gt; value. Note that &lt;code&gt;process.argv&lt;/code&gt; is an array. The first two values are related to node installation in your system and not much interest to us. Let's accept the third value or &lt;code&gt;process.argv[2]&lt;/code&gt;. Change the code to&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
const lsArgs = process.argv[2]

const fileDirectory = lsArgs ? lsArgs : process.cwd();

readdir(fileDirectory, { withFileTypes: true }, (err, files) =&amp;gt; {
    if (err) {
        log(chalk('ERROR'));
    }
    files.forEach((file) =&amp;gt; {
        if (file.isDirectory()) {
            log(chalk.blueBright(file.name));
        } else {
            log(chalk.whiteBright(file.name));
        }
    });
});

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That was easy. Take the arg if it's present or use the cwd(). Wohoo. We have something. Another improvment is that we can hide the hidden folders from our listing. We can use regex for this check. Something like&lt;/p&gt;

&lt;p&gt;&lt;code&gt;files = files.filter((file) =&amp;gt; !/(^|\/)\.[^\/\.]/g.test(file.name));&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;would work well. &lt;/p&gt;

&lt;p&gt;Well well. We have a CLI application. We can actually deploy this to npm. You can login to npm and run &lt;code&gt;npm deploy&lt;/code&gt; to get it up there. This has gone too long and I am not using going into deployment here. Adding the whole index.js below for your reference. Please let me know your thoughts.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/usr/bin/env node

const fs = require('fs');
const chalk = require('chalk');

const { log } = console;
const { readdir } = fs;

const lsArgs = process.argv[2];

const fileDirectory = lsArgs ? lsArgs : process.cwd();

readdir(fileDirectory, { withFileTypes: true }, (err, files) =&amp;gt; {
    files = files.filter((item) =&amp;gt; !/(^|\/)\.[^\/\.]/g.test(item.name));
    if (err) {
        log(chalk.red('ERROR'));
                return;
    }
    files.forEach((file) =&amp;gt; {
        if (file.isDirectory()) {
            log(chalk.blueBright(file.name));
        } else {
            log(chalk.whiteBright(file.name));
        }
    });
});

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>node</category>
      <category>tutorial</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
