<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Why You Should Switch to NextJS from ReactJS</title>
      <author>Enlear</author>
      <pubDate>Thu, 30 Sep 2021 18:44:20 +0000</pubDate>
      <link>https://dev.to/enlearacademy/why-you-should-switch-to-nextjs-from-reactjs-3lhh</link>
      <guid>https://dev.to/enlearacademy/why-you-should-switch-to-nextjs-from-reactjs-3lhh</guid>
      <description>&lt;p&gt;If you love frontend development, you should have some experience with React JS, this is because it’s one of the greatest frontend libraries out there. Due to its speed, flexibility, performance, etc… a majority of the developer tends to use React JS as for their frontends.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://enlear.academy/next-js-or-react-js-lets-find-out-60c77373da85"&gt;https://enlear.academy/next-js-or-react-js-lets-find-out-60c77373da85&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>nextjs</category>
      <category>javascript</category>
    </item>
    <item>
      <title>My First PR</title>
      <author>Deepesha Burse</author>
      <pubDate>Thu, 30 Sep 2021 18:41:14 +0000</pubDate>
      <link>https://dev.to/deepeshaburse/my-first-pr-7mg</link>
      <guid>https://dev.to/deepeshaburse/my-first-pr-7mg</guid>
      <description>&lt;p&gt;Making your first pull request is definitely daunting. Whether you are taking part in some open source program or not, there are multiple things that go through your mind while making it. This blog is my experience and everything I learnt.&lt;/p&gt;

&lt;p&gt;I made my first PR through an open source program, so I was given a basic format in which we had to document everything. Now, I was familiar with putting my personal projects on GitHub, but I had never tried to make a contribution. Making the appropriate documentation/files wasn’t too hard for me, sure I had my doubts on whether it was good enough and I was ‘qualified’ enough to contribute, but with lots of research and my basic knowledge of the topic got me through it somehow.&lt;/p&gt;

&lt;p&gt;The part which I procrastinated the most was making the PR. I had this mental block of creating a PR and had somewhere decided that it would be very complicated. As someone who’s still new to open-source, let me tell you, it is not! It is actually one of the easiest parts of contributing (if not the easiest!).&lt;/p&gt;

&lt;p&gt;Another huge learning for me was patience. Having worked only on personal projects, I never had to think about others’ views too much. I would ask a few people to review my project once but that was it. When making contributions, we need to consider that it is not our project, we are only fixing a bug or adding something to an entire project of theirs. They may have different expectations from as simple files as README files or the documentation or whatever it is you are contributing to. Something that looks okay to you, may not look so to your mentor/supervisor/maintainer. Instead of taking it negatively, try to understand what they expect and tweak your files accordingly.&lt;/p&gt;

&lt;p&gt;Taking part in an open source program has helped me grow a lot, and I would definitely recommend you to try it out! The best part about it is, there is always something you can contribute to. Giving back to a community that has given us so much is such an amazing feeling, made me feel so grateful to everyone who has directly/indirectly helped me. Yes, it is a little scary, but once you make your first PR, there is no going back!&lt;/p&gt;

&lt;p&gt;Here are a few articles that helped me to understand the process better:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.freecodecamp.org/news/how-to-make-your-first-pull-request-on-github-3/"&gt;How to make your first pull request on GitHub&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.better.dev/create-your-first-github-pull-request"&gt;Create Your First GitHub Pull Request&lt;/a&gt;&lt;br&gt;
&lt;a href="https://dev.to/doctolib/make-your-first-pull-request-to-an-open-source-project-1m57"&gt;Make your first pull request to an open-source project&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope this gave you a brief idea on how it is to make your first PR. &lt;/p&gt;

&lt;p&gt;If there are any tips you would like to share, please leave a comment!&lt;/p&gt;

&lt;p&gt;Until next time, Happy Coding! :))&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>beginners</category>
      <category>github</category>
    </item>
    <item>
      <title>Product developers’ guide to getting started with AI — Part 3: Terraforming dataframes</title>
      <author>Mage</author>
      <pubDate>Thu, 30 Sep 2021 18:28:44 +0000</pubDate>
      <link>https://dev.to/mage_ai/product-developers-guide-to-getting-started-with-ai-part-3-terraforming-dataframes-5bdk</link>
      <guid>https://dev.to/mage_ai/product-developers-guide-to-getting-started-with-ai-part-3-terraforming-dataframes-5bdk</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TLDR
&lt;/h2&gt;

&lt;p&gt;Terraforming a planet requires large scale projects to inhabit other planets for survival. We’ll begin by terraforming datasets to calculate the cost of survival on the Titanic.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#outline"&gt;
  &lt;/a&gt;
  Outline
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Introduction&lt;/li&gt;
&lt;li&gt;Before we begin&lt;/li&gt;
&lt;li&gt;Functional programming&lt;/li&gt;
&lt;li&gt;Applying Function&lt;/li&gt;
&lt;li&gt;Aggregating Data&lt;/li&gt;
&lt;li&gt;Transforming Data&lt;/li&gt;
&lt;li&gt;Data Analysis&lt;/li&gt;
&lt;li&gt;Conclusion&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From the &lt;a href="https://m.mage.ai/how-to-interpret-and-explain-your-machine-learning-models-using-shap-values-471c2635b78e"&gt;SHAP&lt;/a&gt; article, we know that people in some groups were more likely to survive when the Titanic crashed. But what does it cost to survive the titanic?&lt;/p&gt;


&lt;center&gt; &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GRkzMxf6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jfue71jxrb2d79yfplxk.jpeg" alt="Alt Text"&gt;&lt;em&gt;Titanic meets Iceberg (Source: &lt;a href="https://m.mage.ai/how-to-interpret-and-explain-your-machine-learning-models-using-shap-values-471c2635b78e"&gt;Britannica&lt;/a&gt;)&lt;/em&gt;
&lt;/center&gt;

&lt;p&gt;In “Product developers’ guide to getting started with AI — Part 3: Terraforming dataframes”, we’ll look at the price point of a “golden ticket” that ensures the best chance of survival. Based on the SHAP values calculated there is a direct correlation between the sex, passenger class, fare, and age.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7h5N-Nki--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wotn4nd9tnidp8ozdkg3.png" alt="Alt Text"&gt;&lt;em&gt;Mage Analyzer Page (Source: SHAP)&lt;/em&gt;
&lt;/center&gt;

&lt;p&gt;Manipulating datasets are a quick and easy way to rearrange data and extract everything. In this series we’ve gone over how to pick and search through data so it’s time to look at transforming the underlying data.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#before-we-begin"&gt;
  &lt;/a&gt;
  Before we Begin
&lt;/h2&gt;

&lt;p&gt;It is highly advised to have read &lt;a href="https://m.mage.ai/product-developers-guide-to-getting-started-with-ai-part-2-surfing-through-dataframes-d86b3540c7dc"&gt;part 2&lt;/a&gt; before continuing forward. In this guide, we’ll be using the &lt;a href="https://github.com/pandas-dev/pandas/tree/master/doc/data/titanic.csv"&gt;Titanic dataset&lt;/a&gt; along with &lt;a href="https://colab.research.google.com/"&gt;Google Collab&lt;/a&gt;. I’ll be briefly reusing techniques from previous contents such as surfing and extracting to quickly start us off with an ideal dataframe for applying transformations and functions.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T4wV4h1s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mt8u97zvcm7q21v8d4xf.png" alt="Alt Text"&gt;&lt;em&gt;Part 2: Surfing through dataframes&lt;/em&gt;
&lt;/center&gt;
&lt;h2&gt;
  &lt;a href="#functional-programming"&gt;
  &lt;/a&gt;
  Functional Programming
&lt;/h2&gt;

&lt;p&gt;Python is a functional programming language, which means that all operations can be expressed as a function. This is important as later on in this guide we’ll be looking at creating functions and passing lambda expressions to apply and transform. For those that are comfortable enough with Python, you may skip this section. Otherwise, keep reading for a quick refresher on the syntax for defining functions and lambda expressions.&lt;/p&gt;

&lt;p&gt;In Python, a function is created by the “def” keyword and takes in a number of arguments.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--do3r_8QX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wz4dzavkgsd1h0dc89dt.png" alt="Alt Text"&gt;&lt;em&gt;Basic Adder that adds 1 to the value&lt;/em&gt;
&lt;/center&gt;

&lt;p&gt;Rewrite the adder function as a lambda expression to shorthand.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DdM8Qcwj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gq26efazb0ceoye2tiix.png" alt="Alt Text"&gt;&lt;em&gt;Lambda expression of the adder&lt;/em&gt;
&lt;/center&gt;

&lt;p&gt;For a small operation, like the adder above, it’s best practice to use a lambda expression. But, for more complex calculations that are used multiple times use a function. When in doubt check if there is a simpler way or how much repeating will occur.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#applying-function"&gt;
  &lt;/a&gt;
  Applying Function
&lt;/h2&gt;

&lt;p&gt;The simplest form of manipulating a dataframe is by using apply. Apply takes in a function and repeats it for either all columns or rows within a dataframe. The applications of this are for quickly calculating or encrypting data.&lt;/p&gt;

&lt;p&gt;Based on the SHAP values, we form a hypothesis that women and children are more likely to survive, possibly due to the fact that they can board first and when living in upper class areas of the ship there is less population density allowing them to quickly escape in comparison to the lower class.&lt;/p&gt;


&lt;center&gt; &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u58MEXSY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ggsxn22vvxihjzl5ehzc.jpeg" alt="Alt Text"&gt;&lt;em&gt;Lifeboats on the Titanic (Source: DailyMail)&lt;/em&gt; &lt;/center&gt;

&lt;p&gt;To find the average price point of the winning ticket: ticket for a young lady in 1st class, we first need to filter down our rows and columns. In the dataframe, “Pclass” represents whether a passenger is located in the 1st class, 2nd class, or 3rd class area of the Titanic. The average is calculated as the sum of the prices divided by the total number or count of items, but may also be calculated by the mean method.&lt;/p&gt;

&lt;p&gt;Using what we’ve learned in part 2, we filter the rows down to only contain items from the sex, passenger class, and age columns. We define our filter as&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Having the sex of a female&lt;/li&gt;
&lt;li&gt;Passenger class of only 1st class&lt;/li&gt;
&lt;li&gt;Age must be no lower than 40 years old&lt;/li&gt;
&lt;/ol&gt;


&lt;center&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wWIuTLLg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ex7qhtf652swi2qo6csa.png" alt="Alt Text"&gt;&lt;/center&gt;

&lt;p&gt;Then reduce it to only show the relevant information: ‘Fare’ or price of golden ticket.&lt;/p&gt;


&lt;center&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iyQ8Ubdg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j3he7r6oq95au018vq2h.png" alt="Alt Text"&gt;&lt;/center&gt;

&lt;p&gt;Then, we take the sum of the ‘Fare’ column and divide by the total number of items.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4oUNCuga--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iy2avix0es4m85ie5j2b.png" alt="Alt Text"&gt;&lt;em&gt;The total price of all golden tickets are $6484.80&lt;/em&gt;
&lt;/center&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_BOJhL6u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uivkqongv9d4s5hba9y1.png" alt="Alt Text"&gt;&lt;em&gt;Average price of $113.77&lt;/em&gt;
&lt;/center&gt;

&lt;p&gt;Unlike &lt;a href="https://m.mage.ai/product-developers-guide-to-getting-started-with-ai-part-2-surfing-through-dataframes-d86b3540c7dc"&gt;part 2&lt;/a&gt;, where we overwrite the values, instead store the data inside a new variable called average_price to hold the results of the calculations. This lets us preserve the old data.&lt;/p&gt;

&lt;p&gt;We can confirm this is the same when calculating the mean of the prices.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ozfeV7UY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6o926xcmrv3yo7xu59o4.png" alt="Alt Text"&gt;&lt;em&gt;The mean matches the average price of $113.77&lt;/em&gt;
&lt;/center&gt;

&lt;p&gt;Pandas has multiple other built-in mathematical functions, such as median and more.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5Eag2lCk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v44dllv9bctghqh9d37v.png" alt="Alt Text"&gt;&lt;em&gt;Median is $86.50&lt;/em&gt;
&lt;/center&gt;

&lt;p&gt;Unfortunately, all of this must be done separately, which makes apply good for short functions, but what about longer functions? That’s where aggregate or agg shines in removing repeatability.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aggregating-data"&gt;
  &lt;/a&gt;
  Aggregating Data
&lt;/h2&gt;

&lt;p&gt;If you know which aggregate you want to apply ahead of time, use agg instead. When doing multiple calculations of summation, mean, or standard deviation, aggregate is a neater way to calculate than using apply.&lt;/p&gt;

&lt;p&gt;For instance, if we were to use aggregate instead, we could grab multiple types all at once. For our next section, we’ll need the standard deviation so let’s calculate that as well. Note: The shorthand is agg, which is functionally equivalent to aggregate.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ux4dZABn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xmqvcsdkamcz6mp1rf0t.png" alt="Alt Text"&gt;&lt;em&gt;1 liner for sum, mean, max, and median&lt;/em&gt;
&lt;/center&gt;
&lt;h2&gt;
  &lt;a href="#transforming-data"&gt;
  &lt;/a&gt;
  Transforming Data
&lt;/h2&gt;

&lt;p&gt;Another way of manipulating a dataframe is by using transform. This is similar to apply, except that it applies the function to itself and repeats it for all columns within a dataframe. Since it can be applied to itself, the applications are more extended and can complete multiple operations by passing values back to itself.&lt;/p&gt;

&lt;p&gt;Because transform applies it to itself, the result must be the same length of the original input. This means that functions such as sum(), mean(), and max/min() don’t work as they condense or aggregate all the data into 1 value.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VvWcboY0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4eq6r2xdj06flstjtugl.png" alt="Alt Text"&gt;&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sx8seoT3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ad9oapysbn1rcu6wu4ir.png" alt="Alt Text"&gt;
&lt;/center&gt;

&lt;p&gt;Back to the original problem, find out what percentage of passengers have a “golden ticket”. Using transform, we can combine aggregation using a series to calculate the individual values. This makes transform more useful at looking at the finer details.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ROuDl5m---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ux2zdrbxtjpm3mt8koj.png" alt="Alt Text"&gt;&lt;em&gt;Calculate individual percentages&lt;/em&gt;
&lt;/center&gt;

&lt;p&gt;Likewise, summing the individual results should result in 1.0 (100%)&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qKSc2EtY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h4oratww7d88ploc7m74.png" alt="Alt Text"&gt;&lt;em&gt;Sanity Check&lt;/em&gt;
&lt;/center&gt;
&lt;h2&gt;
  &lt;a href="#data-analysis"&gt;
  &lt;/a&gt;
  Data Analysis
&lt;/h2&gt;

&lt;p&gt;To find out how many passengers paid top dollar, first we take the original dataset and calculate the percentages. We leverage transform’s ability to maintain length, along with groupby to sort our data.&lt;/p&gt;


&lt;center&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Vjifp2E---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2qqez2y7yt8wdulkmev0.png" alt="Alt Text"&gt;&lt;/center&gt;

&lt;p&gt;What slice of the “pie” do the golden ticket passengers make out?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dWxQ-Bao--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5q7gv9jjujxrvnhthqkp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dWxQ-Bao--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5q7gv9jjujxrvnhthqkp.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;center&gt;&lt;em&gt;23% of all income on the ship is from golden ticket sales.&lt;/em&gt;&lt;/center&gt;

&lt;p&gt;What percentage of passengers own a golden ticket?&lt;/p&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ec4ZV30n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f113fm8nnfxeg5wwto46.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ec4ZV30n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f113fm8nnfxeg5wwto46.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;center&gt;&lt;em&gt;Only 6% of all passengers purchased a golden ticket.&lt;/em&gt;&lt;/center&gt;

&lt;h3&gt;
  &lt;a href="#key-differences"&gt;
  &lt;/a&gt;
  Key Differences
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Transform returns based on self, the equal length must be satisfied. Therefore, transform can’t handle aggregate methods (sum, mean, std deviation, etc…)&lt;/li&gt;
&lt;li&gt;Apply doesn’t take in multiple aggregations (one column at a time), while agg can.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#highlights"&gt;
  &lt;/a&gt;
  Highlights
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Transform is best used to create a new entry into a table to see fine detail.&lt;/li&gt;
&lt;li&gt;Aggregate and apply are useful at calculating a single summary value.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;


&lt;p&gt;That’s it now, you’re ready to tackle future problems in data science. Using your newfound knowledge I suggest modifying the steps to calculate what percentage of golden ticket holders survive, as your next step in familiarizing yourself with these core AI concepts. As always, stay tuned for future guides where we’ll go over more topics ranging from joining datasets to deploying a machine learning model to the Cloud.&lt;br&gt;&lt;br&gt;
&lt;/p&gt;
&lt;center&gt;
&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_iBFI56M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2y43q2ndwmphnu00g0t4.gif" alt="Alt Text"&gt;&lt;em&gt;I’ve got a Golden Ticket! (Source South Park)&lt;/em&gt;&lt;br&gt;
&lt;/center&gt;

</description>
    </item>
    <item>
      <title>Binary Search in other words</title>
      <author>haytam_7</author>
      <pubDate>Thu, 30 Sep 2021 18:28:22 +0000</pubDate>
      <link>https://dev.to/haytamkh7/binary-search-in-other-words-1n0e</link>
      <guid>https://dev.to/haytamkh7/binary-search-in-other-words-1n0e</guid>
      <description>&lt;p&gt;Imagine yourself holding a flashlight against a list of sorted numbers searching for your lottery number.&lt;/p&gt;

&lt;p&gt;Each time you turn on the flashlight it will automatically point to the &lt;strong&gt;middle of the list&lt;/strong&gt; and you can't change it.&lt;br&gt;
If at this point you see your lottery number then BOOM! you won the lottery.&lt;/p&gt;

&lt;p&gt;Otherwise you need to compare your lottery number with that number in the middle of the list and you will face one of two situations:&lt;/p&gt;

&lt;p&gt;Either your number is bigger, then you have to cut the lower part of the list and continue working with the upper part.&lt;/p&gt;

&lt;p&gt;Or your number is smaller, then you have to cut the upper part of the list and continue working with the lower part.&lt;/p&gt;

&lt;p&gt;Now let's try to translate this to a code (in Java):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public static int myLotteryNumber(int[] list, int lotteryNumber) {
        int left = 0;
        int right = list.length - 1;
        while(left &amp;lt;= right){
            int mid = (left + right) / 2;
            if(list[mid] == lotteryNumber)
                return list[mid];
            else if(lotteryNumber &amp;gt; list[mid])
                left = mid + 1; //cut the lower part of the list
            else if(lotteryNumber &amp;lt; list[mid])
                right = mid - 1; //cut the upper part of the list
        }
        return -1;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The great thing about this algorithm is that at each iteration you &lt;strong&gt;cut down half of the list&lt;/strong&gt; and at the worst case this will cost you &lt;strong&gt;&lt;em&gt;O(Log n)&lt;/em&gt;&lt;/strong&gt; of time complexity and &lt;strong&gt;&lt;em&gt;O(1)&lt;/em&gt;&lt;/strong&gt; of space complexity!&lt;/p&gt;

</description>
      <category>java</category>
      <category>programming</category>
      <category>coding</category>
      <category>binarysearch</category>
    </item>
    <item>
      <title>Art of giving feedback</title>
      <author>Andriy Chemerynskiy</author>
      <pubDate>Thu, 30 Sep 2021 18:13:18 +0000</pubDate>
      <link>https://dev.to/andrewchmr/art-of-giving-feedback-2mdi</link>
      <guid>https://dev.to/andrewchmr/art-of-giving-feedback-2mdi</guid>
      <description>&lt;p&gt;How to give proper feedback? Although you might find this topic trivial, the majority of people struggle with it.&lt;/p&gt;

&lt;p&gt;Having this skill will not just improve your career, it will also improve your relationships with other people.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-you-should-give-feedback"&gt;
  &lt;/a&gt;
  Why you should give feedback?
&lt;/h3&gt;

&lt;p&gt;There are two types of feedback. Positive and negative. Both of them have the same goal which is to improve the situation or the person's performance.&lt;/p&gt;

&lt;p&gt;By giving people feedback you make them grow. Often it involves criticism, but when it is given in the right way, it can help them evolve.&lt;/p&gt;

&lt;p&gt;The result of not sharing feedback within a group might result in gossips that would harm everyone.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ideal-feedback-formula"&gt;
  &lt;/a&gt;
  Ideal feedback formula
&lt;/h3&gt;

&lt;p&gt;In 2003 executive coach and author Anna Carroll developed the the COIN Conversation Model. &lt;/p&gt;

&lt;p&gt;COIN stands for Context, Observation, Impact, and Next steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Context - define the situation&lt;/li&gt;
&lt;li&gt;Observation - describe the behavior&lt;/li&gt;
&lt;li&gt;Impact - clarify the impact&lt;/li&gt;
&lt;li&gt;Next steps - make a suggestion&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let me give you an example:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;During our meeting&lt;/em&gt; (context)... &lt;em&gt;you interrupted me several times&lt;/em&gt; (observation)... &lt;em&gt;and it made me feel as though you don’t want to hear what I have to say&lt;/em&gt; (impact)... &lt;em&gt;Could you next time let me finish my thought so everybody has a chance to share their opinion, please?&lt;/em&gt; (next steps)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What's important here is not just to blame someone for something, but to let them know what it made you think or feel. &lt;/p&gt;

&lt;p&gt;Do not avoid giving feedback because you are afraid to upset another person. You cannot control the mood of the person you are giving your feedback to, but you will encourage honesty in the group and potentially fix the problem that another person cooperates with.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#feedback-receiver-maturity"&gt;
  &lt;/a&gt;
  Feedback receiver maturity
&lt;/h3&gt;

&lt;p&gt;You might become pro at giving feedback, but you have still to keep one thing in mind. Not everyone is used to receive feedback and maybe you too.&lt;/p&gt;

&lt;p&gt;There are different levels of maturity: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1ro9ltsK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tacenku87f06jh1myl8m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1ro9ltsK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tacenku87f06jh1myl8m.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://medium.com/the-ascent/how-to-master-yourself-and-win-at-receiving-feedback-b1dc757d02fe"&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It doesn't mean that you can't disagree with someone's feedback. The goal is to lift yourself up the staircase towards understanding.&lt;/p&gt;




&lt;p&gt;As homework, try giving feedback to someone. It doesn't have to be necessarily positive or negative. Let’s make the world a better place by improving ourselves 💪&lt;/p&gt;

</description>
      <category>career</category>
      <category>communication</category>
      <category>softskills</category>
      <category>selfdevelopment</category>
    </item>
    <item>
      <title>I Design, You Build! - Frontend Challenge #2</title>
      <author>Zernonia</author>
      <pubDate>Thu, 30 Sep 2021 18:01:40 +0000</pubDate>
      <link>https://dev.to/zernonia/i-design-you-build-frontend-challenge-2-2egc</link>
      <guid>https://dev.to/zernonia/i-design-you-build-frontend-challenge-2-2egc</guid>
      <description>&lt;h2&gt;
  &lt;a href="#appreciation"&gt;
  &lt;/a&gt;
  Appreciation
&lt;/h2&gt;

&lt;p&gt;What an overwhelming response from the first challenge! I really enjoy seeing every submission, and appreciate every feedback given. If you haven't give the challenge a try, I &lt;strong&gt;strongly encourage&lt;/strong&gt; you to join us in this fun challenge! 🤩✨&lt;/p&gt;

&lt;p&gt;I know everyone is in different level of HTML/CSS/Javascript, but don't worry, I will try to mix in different difficulties in the coming challenge, so stay tuned! 🔔&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#challenge"&gt;
  &lt;/a&gt;
  Challenge
&lt;/h2&gt;

&lt;p&gt;I have a confession to make, I'm kinda obsessed with Gradient Blob recently. If you check out my &lt;a href="https://www.zernonia.com/"&gt;website&lt;/a&gt;, you will know what I meant.&lt;/p&gt;

&lt;p&gt;So, in this challenge, we will be creating an awesome &lt;strong&gt;Gradient Blob and Text&lt;/strong&gt; Website for a web application. Create a homepage following the design. Fulfill Target and/or Extra below:&lt;/p&gt;

&lt;p&gt;Target:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;🎯 Target : User can see the similar design&lt;/li&gt;
&lt;li&gt;🎯 Target : Responsive design&lt;/li&gt;
&lt;li&gt;🎯 Target : Gradient text&lt;/li&gt;
&lt;li&gt;🎯 Target : Gradient background (gradient blob)&lt;/li&gt;
&lt;li&gt;🎯 Target : On mobile, when I select the hamburger menu, I can see a navigation (use your own creativity)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Extra:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;🌟 Extra : Add animation to the Gradient blob&lt;/li&gt;
&lt;li&gt;🌟 Extra : Add animation to the image&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Resources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;📃 Icon : &lt;a href="https://icones.js.org/collection/all"&gt;https://icones.js.org/collection/all&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;📃 Hosting: &lt;a href="https://vercel.com/"&gt;https://vercel.com/&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;⚠ It will defeat the purpose of learning if you just copy and paste someone else's answer 😭!&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#start-coding"&gt;
  &lt;/a&gt;
  Start Coding!
&lt;/h2&gt;

&lt;p&gt;If you are ready to take on the challenge, then&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Help 💖 this design on &lt;a href="https://dribbble.com/shots/16561170-UNX-Slick-Gradient-Landing-Page"&gt;Dribbble&lt;/a&gt;, and follow me! Please... 😳&lt;/li&gt;
&lt;li&gt;Bookmark this post so that you can submit it easier.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Right-click&lt;/strong&gt; &lt;a href="https://www.figma.com/file/nJMqfSZI2HZGjWHWV4jCnG/UNX-Slick-App?node-id=0%3A1"&gt;here&lt;/a&gt; and open &lt;strong&gt;Open link in a New Tab&lt;/strong&gt; to see the Figma Design.&lt;/li&gt;
&lt;li&gt;Enjoy coding! 🤩&lt;/li&gt;
&lt;li&gt;Come back to submit!&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;All the &lt;strong&gt;images&lt;/strong&gt; and &lt;strong&gt;assets&lt;/strong&gt; are free to use, and can be exported from the Figma Design.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://www.figma.com/file/nJMqfSZI2HZGjWHWV4jCnG/UNX-Slick-App?node-id=0%3A1"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---82mp8JC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v42ksciemobwm90rp2xj.png" alt="Zernonia Frontend Challenge #2"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#submission"&gt;
  &lt;/a&gt;
  Submission
&lt;/h2&gt;

&lt;p&gt;Once you've completed, come back to this post, and submit your solution using the following &lt;code&gt;template&lt;/code&gt; in the comment section. You are encouraged to &lt;strong&gt;comment&lt;/strong&gt; and &lt;strong&gt;upvotes&lt;/strong&gt; other's answer!&lt;/p&gt;

&lt;p&gt;Thank you!💘&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Feedback: This is awesome!

Demo: &amp;lt;url&amp;gt;
Github: &amp;lt;url&amp;gt;
Tech-Stack: Vue, TailwindCSS
Learning Outcome: 
  1. 
  2.

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#why"&gt;
  &lt;/a&gt;
  Why?
&lt;/h2&gt;

&lt;p&gt;I share these design freely so that anyone who wanted to practice or challenge Web design be able to do so without paying other platform (&lt;em&gt;ahem) to get their **Figma Design&lt;/em&gt;*🎨 file. &lt;/p&gt;

&lt;p&gt;You are free to use the Design you've created in your portfolio. No copyright claims or anything.&lt;/p&gt;

&lt;p&gt;But if you are loving my work, you are most welcomed to follow me on &lt;code&gt;Dev.to&lt;/code&gt; and &lt;a href="https://twitter.com/zernonia"&gt;Twitter&lt;/a&gt; 😄&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-your-time-and-attention-hope-youll-enjoy"&gt;
  &lt;/a&gt;
  Thank you for your time and attention! Hope you'll enjoy!
&lt;/h3&gt;

</description>
      <category>idesignyoubuild</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Build A Simple Progress Bar</title>
      <author>Omkar B</author>
      <pubDate>Thu, 30 Sep 2021 17:51:02 +0000</pubDate>
      <link>https://dev.to/omkarscode/build-a-simple-progress-bar-4kcl</link>
      <guid>https://dev.to/omkarscode/build-a-simple-progress-bar-4kcl</guid>
      <description>&lt;p&gt;You might get this as an interview question for web development roles, especially front-end roles. I'll explain how you can ace it by creating a progress bar in minutes.&lt;/p&gt;

&lt;p&gt;Spoiler: You could do it under a minute with CSS ;)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1-create-the-structure"&gt;
  &lt;/a&gt;
  Step 1: Create the structure
&lt;/h2&gt;

&lt;p&gt;Create the progress bar with plain HTML and CSS as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Progress Bar Tutorial&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"progress-bar-wrapper"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"progress-bar"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"load_something(1)"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Load&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
        &lt;span class="nc"&gt;.progress-bar-wrapper&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;500px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#D5C67A&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nc"&gt;.progress-bar&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#06A77D&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This results in the following empty progress bar:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6GsaWir8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xobd9wtj5802vgq2wy85.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6GsaWir8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xobd9wtj5802vgq2wy85.png" alt="Empty Progress Bar"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can already test it by manually increasing the width from &lt;code&gt;0%&lt;/code&gt; to &lt;code&gt;10%&lt;/code&gt; and so on!&lt;/p&gt;

&lt;p&gt;There's a button in there which will trigger the function &lt;code&gt;load_something(1)&lt;/code&gt; and pass seconds as value. In this case we are passing 1 second as the value.&lt;/p&gt;

&lt;p&gt;We'll create that function in the next step.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step-2-add-javascript"&gt;
  &lt;/a&gt;
  Step 2: Add JavaScript
&lt;/h2&gt;

&lt;p&gt;Add the following JS code before the closing &lt;code&gt;body&lt;/code&gt; tag:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;load_something&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;seconds&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;progress_bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.progress-bar&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;percent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;interval&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;percent&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="nx"&gt;progress_bar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;percent&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;%&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;percent&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;clearInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;interval&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;seconds&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This &lt;code&gt;load_something&lt;/code&gt; function will perform the following steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Select the element with the &lt;code&gt;progress-bar&lt;/code&gt; class.&lt;/li&gt;
&lt;li&gt;Set &lt;code&gt;percent&lt;/code&gt; to 0.&lt;/li&gt;
&lt;li&gt;Create an interval which repeats every &lt;code&gt;seconds/100&lt;/code&gt;. In each iteration it will set the width of the progress bar based on the value in &lt;code&gt;percent&lt;/code&gt; and then increase the &lt;code&gt;percent&lt;/code&gt; value by 1.&lt;/li&gt;
&lt;li&gt;It will clear this interval only when &lt;code&gt;percent&lt;/code&gt; is greater than &lt;code&gt;100&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here's what that looks like:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HlDGx6ml--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2chnphc832fd9gnge26v.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HlDGx6ml--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2chnphc832fd9gnge26v.gif" alt="Final Progress Bar"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-3-do-it-with-css"&gt;
  &lt;/a&gt;
  Step 3: Do it with CSS
&lt;/h2&gt;

&lt;p&gt;What if I tell you we can avoid the second step completely by using CSS? Here's how –&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;load_something&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;seconds&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;progress_bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.progress-bar&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;progress_bar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;transition&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;seconds&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;s linear width`&lt;/span&gt;
        &lt;span class="nx"&gt;progress_bar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;100%&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will achieve the same result but I personally prefer this one as it is much cleaner and done with CSS (instead of intervals which can be a bit messy).&lt;/p&gt;

&lt;p&gt;Let me know what you think about this in the comments. &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Top 5 state management libraries for React</title>
      <author>Anjan Shomooder</author>
      <pubDate>Thu, 30 Sep 2021 17:22:10 +0000</pubDate>
      <link>https://dev.to/thatanjan/top-5-state-management-libraries-for-react-2c9</link>
      <guid>https://dev.to/thatanjan/top-5-state-management-libraries-for-react-2c9</guid>
      <description>&lt;p&gt;There are a lot of state management libraries available for Reactjs. Here you will learn about the 5 most popular state management libraries.&lt;br&gt;
In case if you don't know, simply State management libraries are used for passing the props to children components without prop drilling.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#note"&gt;
  &lt;/a&gt;
  Note
&lt;/h3&gt;

&lt;p&gt;There are a lot of state management libraries available for Reactjs and they have their pros and cons. So I can't say any library is best. The list I will show you is not ranked.&lt;/p&gt;

&lt;p&gt;So, &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#lets-see-the-top-react-state-management-libraries"&gt;
  &lt;/a&gt;
  Let's see the top react state management libraries
&lt;/h2&gt;
&lt;h2&gt;
  &lt;a href="#redux"&gt;
  &lt;/a&gt;
  &lt;a href="https://react-redux.js.org/"&gt; Redux &lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U1pVWSMm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/erjck90ysagn43xlc1m5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U1pVWSMm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/erjck90ysagn43xlc1m5.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A predictable state container for React applications. Designed to work with React's component model. Provides APIs that enable your components to interact with the Redux store. Automatically implements complex performance optimizations&lt;/p&gt;

&lt;p&gt;If you have any experience with react-redux then you know it is hard to set up&lt;br&gt;
and work with it for its boilerplate codes. But &lt;a href="https://redux-toolkit.js.org/"&gt; redux-toolkit &lt;/a&gt; simplifies everything for you. I already made a crash course on redux toolkit on &lt;a href="https://www.youtube.com/channel/UCBaGowNYTUsm3IDaHbLRMYw?sub_confirmation=1"&gt;cules coding&lt;/a&gt; channel.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/rSa8sUC8m_4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;If you like the video, please consider subscribing to the channel.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mobx"&gt;
  &lt;/a&gt;
  &lt;a href="https://mobx.js.org/README.html"&gt;MobX&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZUpkOzg_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mpptpolti2546lu81eql.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZUpkOzg_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mpptpolti2546lu81eql.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;MobX is a battle-tested library that makes state management simple and scalable by transparently applying functional reactive programming (TFRP). The philosophy behind MobX is simple:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Straightforward&lt;/li&gt;
&lt;li&gt;Effortless optimal rendering&lt;/li&gt;
&lt;li&gt;Architectural freedom&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#recoil"&gt;
  &lt;/a&gt;
  &lt;a href="https://recoiljs.org/"&gt;Recoil&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y_YBkpR6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1djfjvb1kjrj1eh78xpc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y_YBkpR6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1djfjvb1kjrj1eh78xpc.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Minimal and Reactish. Recoil works and thinks like React.&lt;/li&gt;
&lt;li&gt;Data flow graph. Derived data and asynchronous queries are tamed with pure functions and efficient subscriptions.&lt;/li&gt;
&lt;li&gt;Cross-App Observation. Implement persistence, routing, time-travel debugging, or undo by observing all state changes across your app, without impairing code-splitting.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#akita"&gt;
  &lt;/a&gt;
  &lt;a href="https://datorama.github.io/akita/"&gt; Akita &lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UHNNj9ZK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iuqpym0rmzqef0xwwoyd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UHNNj9ZK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iuqpym0rmzqef0xwwoyd.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Akita is a state management pattern, built on top of RxJS, which takes the idea of multiple data stores from Flux and the immutable updates from Redux, along with the concept of streaming data, to create the Observable Data Store model.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Akita encourages simplicity. It saves you the hassle of creating boilerplate code and offers powerful tools with a moderate learning curve, suitable for both experienced and inexperienced developers alike.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Akita is based on object-oriented design principles instead of functional programming, so developers with OOP experience should feel right at home. Its opinionated structure provides your team with a fixed pattern that cannot be deviated from.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#hookstate"&gt;
  &lt;/a&gt;
  &lt;a href="https://hookstate.js.org/"&gt; Hookstate &lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IRNTT9dw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/59vrlduut7b2jxoi4qk0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IRNTT9dw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/59vrlduut7b2jxoi4qk0.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The simple but incredibly fast and flexible state management that is based on React state hook&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Concise, pragmatic but flexible API. Very easy to learn.&lt;/li&gt;
&lt;li&gt;Incredible performance based on a unique method for tracking used/rendered and updated state segments. Ideal solution for huge states and very frequent updates.&lt;/li&gt;
&lt;li&gt;Small core library packed with features: global states, local states, asynchronously loaded states, partial state updates, deeply nested state updates, and a lot more.&lt;/li&gt;
&lt;li&gt;Complete type inference for any complexity of structures of managed state data.&lt;/li&gt;
&lt;li&gt;Extend or customize your state hooks with a plugins system.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are a lot of libraries available. But&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#which-one-should-you-use"&gt;
  &lt;/a&gt;
  Which one should you use?
&lt;/h3&gt;

&lt;p&gt;It depends on you. Test some libraries first. Pick the one that works for you. &lt;/p&gt;

&lt;p&gt;I love redux. It is very easy to use with the Redux toolkit. What library do you use for state management?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#shameless-plug"&gt;
  &lt;/a&gt;
  Shameless Plug
&lt;/h2&gt;

&lt;p&gt;I have made a video about how to build a carousel postcard with React, Material-UI, and Swiper.js.&lt;br&gt;
If you are interested you can check the video.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/NDyjI7hd4uE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;You can also demo the application form &lt;a href="https://insta-carousel-demo.vercel.app/"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sXlAWXXh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/thatanjan/insta-carousel-yt/development/public/Screenshot%2520of%2520the%2520App.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sXlAWXXh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/thatanjan/insta-carousel-yt/development/public/Screenshot%2520of%2520the%2520App.png" alt="Screenshot of Insta Carousel"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please like and subscribe to &lt;a href="https://www.youtube.com/channel/UCBaGowNYTUsm3IDaHbLRMYw?sub_confirmation=1"&gt;Cules Coding&lt;/a&gt;. It motivates me to create more content like this.&lt;/p&gt;

&lt;p&gt;If you have any questions, please comment down below.&lt;br&gt;
You can reach out to me on social media as &lt;a class="mentioned-user" href="https://dev.to/thatanjan"&gt;@thatanjan&lt;/a&gt;
.&lt;br&gt;
Stay safe. Goodbye.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#about-me"&gt;
  &lt;/a&gt;
  About me
&lt;/h2&gt;
&lt;h4&gt;
  &lt;a href="#why-do-i-do-what-i-do"&gt;
  &lt;/a&gt;
  Why do I do what I do?
&lt;/h4&gt;

&lt;p&gt;The Internet has revolutionized our life. I want to make the internet more beautiful and useful.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#what-do-i-do"&gt;
  &lt;/a&gt;
  What do I do?
&lt;/h4&gt;

&lt;p&gt;I ended up being a full-stack software engineer.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#what-can-i-do"&gt;
  &lt;/a&gt;
  What can I do?
&lt;/h4&gt;

&lt;p&gt;I can develop complex full-stack web applications like social media applications or e-commerce sites.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#what-have-i-done"&gt;
  &lt;/a&gt;
  What have I done?
&lt;/h4&gt;

&lt;p&gt;I have developed a social media application called &lt;a href="https://con-fession.vercel.app/"&gt;Confession&lt;/a&gt;. The goal of this application is to help people overcome their imposter syndrome by sharing our failure stories.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XbQiTDS2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gjay62pz7byne4d8ja8v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XbQiTDS2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gjay62pz7byne4d8ja8v.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I also love to share my knowledge. So, I run a youtube channel called &lt;a href="https://www.youtube.com/channel/UCBaGowNYTUsm3IDaHbLRMYw?sub_confirmation=1"&gt;Cules Coding&lt;/a&gt; where I teach people full-stack web development, data structure algorithms, and many more. So, Subscribe to Cules Coding so that you don't miss the cool stuff.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#want-to-work-with-me"&gt;
  &lt;/a&gt;
  Want to work with me?
&lt;/h2&gt;

&lt;p&gt;I am looking for a team where I can show my ambition and passion and produce great value for them.&lt;br&gt;
Contact me through my email or any social media as &lt;a class="mentioned-user" href="https://dev.to/thatanjan"&gt;@thatanjan&lt;/a&gt;
. I would be happy to have a touch with you.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#contacts"&gt;
  &lt;/a&gt;
  Contacts
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Email: &lt;a href="mailto:thatanjan@gmail.com"&gt;thatanjan@gmail.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;linkedin: &lt;a href="https://linkedin.com/in/thatanjan/"&gt;@thatanjan&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;portfolio: &lt;a href="https://thatanjan.me/"&gt;anjan&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Github: &lt;a href="https://github.com/thatAnjan/"&gt;@thatanjan&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Instagram (personal): &lt;a href="https://instagram.com/thatAnjan/"&gt;@thatanjan&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Instagram (youtube channel): &lt;a href="https://instagram.com/cules_coding/"&gt;@thatanjan&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Twitter: &lt;a href="https://twitter.com/thatAnjan"&gt;@thatanjan&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Facebook: &lt;a href="https://www.facebook.com/thatanjan/"&gt;@thatanjan&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Blogs you might want to read:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.culescoding.space/blog/setup-eslint-prettier-with-typescript-and-react"&gt; Eslint, prettier setup with TypeScript and react &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.culescoding.space/blog/what-is-client-side-rendering"&gt;What is Client-Side Rendering?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.culescoding.space/blog/what-is-server-side-rendering"&gt;What is Server Side Rendering?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.culescoding.space/blog/everything-you-need-to-know-about-tree-data-structure"&gt;Everything you need to know about tree data structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.culescoding.space/blog/13-reasons-why-you-should-use-Nextjs"&gt;13 reasons why you should use Nextjs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Videos might you might want to watch:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/NDyjI7hd4uE"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/T-n0mrssDiw"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Be_C_Op8Tx8"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ag3je1g0BN8"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/B3HX2rWyKlU"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/C6VytdSDNSk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>react</category>
      <category>javascript</category>
      <category>redux</category>
    </item>
    <item>
      <title>10% Discount for 15000+ Premium design resources for Life Time Access.</title>
      <author>Kamal Ahmed</author>
      <pubDate>Thu, 30 Sep 2021 17:19:20 +0000</pubDate>
      <link>https://dev.to/marketerkamal/10-discount-for-15000-premium-design-resources-for-life-time-access-36ag</link>
      <guid>https://dev.to/marketerkamal/10-discount-for-15000-premium-design-resources-for-life-time-access-36ag</guid>
      <description>&lt;p&gt;🤷🏻‍♀️ 15000+ Premium design resources Web template, Illustrations, Mobile app, Free icon and Web app elements from the world’s best designers&lt;/p&gt;

&lt;p&gt;Lifetime Access Only 99$ 🎉&lt;br&gt;
Get 10% Discount 📢 Use this coupon code: SPI10&lt;/p&gt;

&lt;p&gt;From : &lt;a href="https://www.uihut.com/"&gt;https://www.uihut.com/&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Generating strongly typed reducer actions for React</title>
      <author>Matt Priour</author>
      <pubDate>Thu, 30 Sep 2021 17:13:25 +0000</pubDate>
      <link>https://dev.to/mpriour/generating-strongly-typed-reducer-actions-for-react-j77</link>
      <guid>https://dev.to/mpriour/generating-strongly-typed-reducer-actions-for-react-j77</guid>
      <description>&lt;p&gt;Using reducers in the React Context api leaves a lot of room for error, even when using TypeScript. A reducer takes a single argument and returns a state. The common format for the argument is an object with an &lt;code&gt;action&lt;/code&gt; property and a &lt;code&gt;payload&lt;/code&gt; or &lt;code&gt;value&lt;/code&gt; property. The &lt;code&gt;action&lt;/code&gt;'s value is generally a string such as &lt;code&gt;setTitle&lt;/code&gt;. In the case of &lt;code&gt;action:'setTitle'&lt;/code&gt;, the &lt;code&gt;value&lt;/code&gt; would then be the title you want to set on the state object. The problems with this approach are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You have to look back at the reducer to see what the correct spelling and valid values of action are.&lt;/li&gt;
&lt;li&gt;There is no type checking of the values that are linked with the action.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;This article assumes that you have a basic familiarity with React, &lt;code&gt;useReducer&lt;/code&gt;, and TypeScript.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you just want to skip to the code, you can see the final working version on &lt;a href="https://www.typescriptlang.org/play?target=6&amp;amp;q=373#code/JYWwDg9gTgLgBAJQKYEMDGMA0cDecDCEAdjEgB5ZxpSqmEnmUCuAzksgCZNpJRwC+cAGZQIIOACIa6GBIDcAWABQy8pFhwYATzBI4ASVIgAyjBSk4AXlzK4duMA4AuOCxhRgRAOaZb9mMAwADZILm4e3r5K9nAcSCzUwGABxAD8Ye6ePn52AI5MKCSBWi5ETCAARrzK-MrK2rpwxkgwpFAsADwAKgB8VjbR9gDaAAoORHAA1khaEEJwXXAoLHAABmwwACQ4+ChggShBwABeSB3hWXAAZHAjPfyrALoAtOkLo481dUoNeoZIJhabRW1marV4nX+JjMpB631+cAAghhgMQWABZPb9HA5OBDYzjKYzOYGIxg4GPFw4wYxOwyVFEFzGKK0+wAN0OTFCpIB5Ih+M+NIEXxUSjU0HgCKhyJSRBBSJRaMxYCG01m8xlDIxe0FyjQaPggQBnG4vH6AAo3OZuVDTNbsPTiC5pYq5QBKODOskwvSWPrUmIsADugTQAAtzY6iAA6KMegOsqjLPQAcg2+g4KacuMTcBoMCYUAmOGjpatpGwjhcUejHKCXP4iiFMTQybgaZaXUCISzOcT+cLxdL0fLSGwAWC3JrdYbTdzrbY7Y2ABF4olkgze83+y1B7hh6PsHEEh4N06lq7a5ykI2+3YF6mNgBFApFbRb3MxAdF-dln3YfJCgnEoL1lK96xvOdEziIQUCYIIYGzbdWX1OUIBCaNeFEKBzVWTViDgElthrKNBGAFYiAgeAWCYMB1FIDhVjdKD7FqZtvwmUcmzY75PDaWCeAMEZRDZRxeGEiAwBWBNw2AIIOBoIh0kKLQRWUPjeAEv56FICgJKkgY7CNEAvV5f8-A4ciwHMcMXEjV1TJAfD3SsPo2QgRw1KUVC3B5EAdMYfpqFoJAAooc0cEEZYDDCmB9JYD1otijp9Fi+K4VFIQmCIV0-Ik0S4hwnBZPkxT+GdfKxKgeK3Rkg08WMo8rJssNHn6Vh2CQLgeBw4yTR67BIqWFZbR9N0-B8+BUN0mAAHkKgAK2xRrYmamBwzYuwOLgc1cRSoxYujSrCrgGckEsYriBm+aFv4DLWWKsM5IUpAiE2+wOgAeihQ7jt4e64HGpQeLFMh6NwH6rsYbAoT+qB+CAA"&gt;this TS Playground&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The optimal solution would allow us to define the state object and its valid values, then TypeScript would provide code completion and type validation for the actions and values passed to the reducer function. A less optimal solution would be to do something similar to Redux and create a series of action functions that are strongly typed and wrap calls to the reducer. Then in your code you only use action functions and never call the reducer directly. However, TypeScript's mapped types can make that extra layer unnecessary.&lt;/p&gt;

&lt;p&gt;Let's take a simple state type&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;ItemState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;quantity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We want to create a reducer that knows that &lt;code&gt;setId&lt;/code&gt; and &lt;code&gt;setQuantity&lt;/code&gt; are valid actions but &lt;code&gt;setID&lt;/code&gt; and &lt;code&gt;setQty&lt;/code&gt; are not. It should also type check so that the value paired with &lt;code&gt;setQuantity&lt;/code&gt; is a number and not a Date or string.&lt;/p&gt;

&lt;p&gt;The first step is to create a generic utility type called &lt;code&gt;Setters&lt;/code&gt; that takes another type and produces "setPropertyName" style function names for each property on that type.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Setters&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;P&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="kr"&gt;keyof&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="s2"&gt;`set&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;Capitalize&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;P&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;P&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;Capitalize&lt;/code&gt; is a built in string modifier that capitalizes the passed string. The &lt;code&gt;-?&lt;/code&gt; means that we remove the optional attribute of any property. &lt;code&gt;T[P]&lt;/code&gt; gives us the type of each property of the passed in generic type.&lt;/p&gt;

&lt;p&gt;We then use the Setters utility to generate a setters type for our state type.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;ItemSetters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Setters&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ItemState&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="cm"&gt;/* 
This is equivalent to writing out:
type ItemSetters = {
    setId: string,
    setTitle: string,
    setDescription: string,
    setQuantity: number
}
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's use another mapped type to create a map of action objects with valid action names and value types.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;ActionsMap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;S&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="kr"&gt;keyof&lt;/span&gt; &lt;span class="nx"&gt;ItemSetters&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;action&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;S&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ItemSetters&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;S&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cm"&gt;/* 
This results in:
type ActionsMap = {
    setId: {
        action: 'setId',
        value: string
    }, ...
    setQuantity: {
        action: 'setQuantity',
        value: number
    }
}
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we need to extract the action/value objects out of ActionsMap and use the union of those objects as our action type in our reducer.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;ItemActions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ActionsMap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kr"&gt;keyof&lt;/span&gt; &lt;span class="nx"&gt;ActionsMap&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;itemReducer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ItemState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ItemActions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ItemState&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;itemReducer&lt;/code&gt; doesn't actually do anything yet. We need to fill it out with the reducer logic. What you can't see here in the code sample is the ease of doing this. With the strongly typed &lt;code&gt;ItemActions&lt;/code&gt; we will have code completion on the switch case statements we will write and type validation when we use the reducer. &lt;/p&gt;

&lt;p&gt;Here is the filled out reducer function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;itemReducer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ItemState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ItemActions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ItemState&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;setId&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;setTitle&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;setDescription&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;setQuantity&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;quantity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Action of &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; is not supported`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Unfortunately our &lt;code&gt;default&lt;/code&gt; statement has an error:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Property 'action' does not exist on type 'never'.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That error occurs because we covered all possible valid cases. In order to account for a possible error, we can add a dummy action type. ItemActions becomes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;ItemActions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 
    &lt;span class="nx"&gt;ActionsMap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kr"&gt;keyof&lt;/span&gt; &lt;span class="nx"&gt;ActionsMap&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;action&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;other&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using the mapped types with string template literals approach really shows its power when you need to add another property to the state. For example, let's add a boolean 'backordered' property. We just have to add 3 total lines of code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;ItemState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="na"&gt;quantity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;backordered&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;

    &lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;setQuantity&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;quantity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;setBackordered&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;backordered&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Even better than the developer experience when adding or removing properties from state, is the experience of using the reducer. While it can't easily be shown in code snippets, the auto-complete and type validation is a game changer. No longer do you have to look back at the reducer to determine the correct spelling and what exactly type of value it is expecting. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* GOOD */&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;action&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;setQuantity&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="cm"&gt;/* ERROR */&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;action&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;setQuantity&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
   &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hope this approach helps you when creating and using reducers. Once I figured it out, it has saved me plenty of development time and frustration.&lt;/p&gt;

&lt;p&gt;Here is the final TypeScript annotated reducer:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;ItemState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;quantity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;backordered&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Setters&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;P&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="kr"&gt;keyof&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="s2"&gt;`set&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;Capitalize&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;P&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;P&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;ItemSetters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Setters&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ItemState&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;ActionsMap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;S&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="kr"&gt;keyof&lt;/span&gt; &lt;span class="nx"&gt;ItemSetters&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;action&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;S&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ItemSetters&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;S&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;ItemActions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 
    &lt;span class="nx"&gt;ActionsMap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kr"&gt;keyof&lt;/span&gt; &lt;span class="nx"&gt;ActionsMap&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;action&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;other&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;itemReducer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ItemState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ItemActions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ItemState&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;setId&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;setTitle&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;setDescription&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;setQuantity&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;quantity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;setBackordered&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;backordered&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Action of &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; is not supported`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>react</category>
      <category>typescript</category>
      <category>usereducer</category>
      <category>mappedtypes</category>
    </item>
    <item>
      <title>RippleX Releases Engineering Preview of Proposed Federated Sidechains System</title>
      <author>Scott Determan</author>
      <pubDate>Thu, 30 Sep 2021 17:09:58 +0000</pubDate>
      <link>https://dev.to/ripplexdev/ripplex-releases-engineering-preview-of-proposed-federated-sidechains-system-3ncp</link>
      <guid>https://dev.to/ripplexdev/ripplex-releases-engineering-preview-of-proposed-federated-sidechains-system-3ncp</guid>
      <description>&lt;p&gt;Earlier this year, Ripple &lt;a href="https://ripple.com/insights/a-vision-for-federated-sidechains-xrp-ledger/"&gt;shared&lt;/a&gt; a vision for Federated Sidechains that can complement the XRP Ledger (XRPL) Mainnet. Federated Sidechains support the developer community by unlocking new capabilities related to smart contracts and DeFi, interoperability, NFTs and more.&lt;/p&gt;

&lt;p&gt;Today, an engineering preview of Federated Sidechains that can be used with the XRPL is available for developers to experiment with. Developers are welcome to view and comment on the &lt;a href="https://github.com/ripple/rippled/blob/sidechain/docs/sidechain/design.md"&gt;technical design&lt;/a&gt;, as well as leverage this technology to &lt;a href="https://github.com/ripple/rippled/blob/sidechain/docs/sidechain/GettingStarted.md"&gt;start&lt;/a&gt; exploring its potential.&lt;/p&gt;

&lt;p&gt;At a high level, each sidechain acts as its own blockchain, while federation enables value in the form of XRP and other tokens to move efficiently from the sidechain to the Mainnet. Federated Sidechains operate without compromising the impressive speed, efficiency, and throughput of the public XRPL Mainnet.&lt;/p&gt;

&lt;p&gt;Federated Sidechains create exciting new opportunities for developers. They expand the scope for developers to customize the core, proven XRPL technology to the needs of a specific use case or project. Examples of the kinds of customization enabled include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Innovative design characteristics that can be tuned to specific use cases like tokenization, DeFi, or payments &lt;/li&gt;
&lt;li&gt;Flexibility to make permissioned or nearly permissionless, centralized or largely decentralized ledgers whose assets can be traded on the Mainnet DEX&lt;/li&gt;
&lt;li&gt;Choice in validators and flexibility of system rules (e.g. optional transaction fees and reserve requirements)&lt;/li&gt;
&lt;li&gt;Opportunity to temporarily manage a sidechain and shut it down after it has served its purpose &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that successful new sidechain features may even eventually be ported to the XRPL Mainnet. &lt;/p&gt;

&lt;p&gt;Federated Sidechains give developers an opportunity to launch new features and innovative applications built on foundational XRP Ledger technology, like a smart sidechain with &lt;a href="https://hooks-testnet.xrpl-labs.com/"&gt;Hooks&lt;/a&gt; enabled. Developers can also create private or public sidechains, with public sidechains available for the community to leverage for various use cases. &lt;/p&gt;

&lt;p&gt;Ripple itself will be looking to leverage the flexibility and customizability that Federated Sidechains afford in its own &lt;a href="https://ripple.com/insights/ripple-pilots-a-private-ledger-for-central-banks-launching-cbdcs/"&gt;CBDC efforts&lt;/a&gt;, making it possible for private CBDC ledgers to easily and seamlessly interconnect.&lt;/p&gt;

&lt;p&gt;Interested developers are encouraged to &lt;a href="https://xrplgrants.org/"&gt;apply&lt;/a&gt; to the XRPL Grants Program with your ideas on implementing and launching sidechains for creative use cases and applications.&lt;/p&gt;

&lt;p&gt;Please share your thoughts below.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Medusa Hacktoberfest 2021</title>
      <author>Vadim Smirnov</author>
      <pubDate>Thu, 30 Sep 2021 17:07:14 +0000</pubDate>
      <link>https://dev.to/medusajs/medusa-hacktoberfest-2021-13eb</link>
      <guid>https://dev.to/medusajs/medusa-hacktoberfest-2021-13eb</guid>
      <description>&lt;p&gt;It's that time of year, and &lt;a href="https://hacktoberfest.digitalocean.com/"&gt;Hacktober&lt;/a&gt; is right around the corner. This year Medusa is excited to take part in the fest for the first time.&lt;/p&gt;

&lt;p&gt;An excellent opportunity to learn more about the open-source environment, meet creators, active contributors and win a t-shirt or have a tree planted in your name!&lt;/p&gt;

&lt;p&gt;Every year Hacktober fest brings &lt;a href="https://www.digitalocean.com/blog/hacktoberfest-recap2020/"&gt;tremendous activity&lt;/a&gt; and helps the open-source ecosystem grow.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-hacktober"&gt;
  &lt;/a&gt;
  What is Hacktober?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://hacktoberfest.digitalocean.com/"&gt;Hacktober fest&lt;/a&gt; is a worldwide event that Digital Ocean organizes with the primary goal of supporting the open-source culture by encouraging contributions to open-source projects participating in the event.&lt;/p&gt;

&lt;p&gt;Making four or more contributions between October 1-31 will allow you to get a memorable t-shirt as a token of appreciation, or you can choose to have a tree planted in your name and help make Hacktoberfest 2021 more carbon neutral.&lt;/p&gt;

&lt;p&gt;You can follow &lt;a href="https://hacktoberfest.digitalocean.com/resources/participation"&gt;this guide&lt;/a&gt; to get a grasp of the rules.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-contribute-to-medusa"&gt;
  &lt;/a&gt;
  Why contribute to Medusa?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.medusa-commerce.com/"&gt;Medusa&lt;/a&gt; is a headless e-commerce engine with a mission to provide a fantastic developer experience and give merchant's full control of their ecommerce stack.&lt;/p&gt;

&lt;p&gt;By contributing to Medusa, you help push the boundaries of e-commerce and make amazing commerce experiences easier for developers to create.&lt;/p&gt;

&lt;p&gt;By actively participating in Hacktober fest, you make Medusa more sustainable and help us progress quickly. Every single contribution matters, and you'll get an appreciation gift for your time and effort:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;One pull request → Medusa sticker&lt;/li&gt;
&lt;li&gt;Three pull requests → Medusa t-shirt&lt;/li&gt;
&lt;li&gt;Build a Plugin (issues labeled with plugin) → Complete Medusa pack (t-shirt, hoodie, sticker)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-can-i-contribute"&gt;
  &lt;/a&gt;
  How can I contribute?
&lt;/h2&gt;

&lt;p&gt;Medusa supplies developers with different open-source tools, which you can find on our &lt;a href="https://github.com/medusajs"&gt;Github profile&lt;/a&gt;. Pick the tool you like the most and follow our &lt;a href="https://github.com/medusajs/medusa/blob/master/CONTRIBUTING.md"&gt;contribution guide&lt;/a&gt; to keep the consistency of deliveries.&lt;/p&gt;

&lt;p&gt;Contributing to an open-source project might feel intimidating at the beginning, and below, you can find a guide about the process:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Browse the issues that are labeled hacktober&lt;/li&gt;
&lt;li&gt;After finding an issue you want to take over, you can let the community know that you are willing to provide a solution in the comments section.&lt;/li&gt;
&lt;li&gt;Fork the Medusa repo and create a branch for your solution according to the &lt;a href="https://github.com/medusajs/medusa/blob/master/CONTRIBUTING.md#branches"&gt;workflow&lt;/a&gt; described in the contribution guide.&lt;/li&gt;
&lt;li&gt;When the functionality is reviewed, push the branch to the forked repo and submit a pull request.&lt;/li&gt;
&lt;li&gt;After that, the Medusa core team members will review the pull request and let you know if additional work is needed.&lt;/li&gt;
&lt;li&gt;Once you receive the approval from the team, the contribution is ready to be merged and taken into account for the overall Hacktober fest activity.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For more detailed guidance and support, feel free to join our &lt;a href="https://discord.gg/PGhCdgEP"&gt;Discord&lt;/a&gt; to ask the engineering team directly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#where-do-i-find-help-from-the-medusa-community"&gt;
  &lt;/a&gt;
  Where do I find help from the Medusa community?
&lt;/h2&gt;

&lt;p&gt;The community has a massive priority for &lt;a href="https://github.com/medusajs/medusa"&gt;Medusa&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Contributing to an open-source project might be confusing and complicated. That's why team members of Medusa are always ready to support you on this path.&lt;/p&gt;

&lt;p&gt;Feel free to join &lt;a href="https://discord.gg/PGhCdgEP"&gt;our Discord&lt;/a&gt; and chat directly with the engineering team, so you can get the warm, welcoming experience and be surrounded by passionate developers just like you!&lt;/p&gt;

&lt;p&gt;Happy hacking!&lt;/p&gt;

</description>
      <category>hacktoberfest</category>
      <category>opensource</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
