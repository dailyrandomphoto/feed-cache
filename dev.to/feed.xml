<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>What is AWS Security? Risks, Best Practices, and More</title>
      <author>Lion king ishu</author>
      <pubDate>Mon, 20 Sep 2021 10:37:09 +0000</pubDate>
      <link>https://dev.to/ishupanday/what-is-aws-security-risks-best-practices-and-more-49ef</link>
      <guid>https://dev.to/ishupanday/what-is-aws-security-risks-best-practices-and-more-49ef</guid>
      <description>&lt;p&gt;Learn about Amazon Web Services (AWS) security in Data Protection 101, our series on the fundamentals of information security.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FV0Wr5ym--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ipfbmbnzlnxnmmq4gvl9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FV0Wr5ym--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ipfbmbnzlnxnmmq4gvl9.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;INTRODUCTION TO AMAZON WEB SERVICES&lt;/p&gt;

&lt;p&gt;Amazon Web Services (AWS) is the leading provider of on-demand cloud services with more than a million customers.&lt;/p&gt;

&lt;p&gt;When the cloud was still new, the perceived lack of security hindered people from adopting it. While cloud security has come a long way, there are still many risks associated with it. Following recommended best practices can help mitigate those risks as you build your infrastructure and store and transmit your data with AWS.&lt;/p&gt;

&lt;p&gt;AWS SECURITY RISKS&lt;/p&gt;

&lt;p&gt;AWS security is not fail-safe and operates on a Shared Security Responsibility model. This means that Amazon secures its infrastructure while you have your own security controls in place for the data and applications you deploy and store in the cloud.&lt;/p&gt;

&lt;p&gt;Unlike your on-site systems, which have a hierarchical structure and a peripheral network that scrubs and analyzes data being transmitted, AWS makes it possible for every instance to communicate with the Internet. The exposed applications structure requires you to strengthen existing security controls. This includes continuously updating your security configurations with sufficient patching, strong firewall configurations, and proper network security implementations.&lt;/p&gt;

&lt;p&gt;Furthermore, you should constantly manage your users, including third party vendors and suppliers, and limit privileges. Be sure to delete unused accounts with old credentials as they can easily be targets for breaches.&lt;/p&gt;

&lt;p&gt;BEST PRACTICES FOR AWS SECURITY&lt;br&gt;
In August 2016, Amazon released a 74-page document detailing the best practices for AWS users. Some of the biggest takeaways are:&lt;/p&gt;

&lt;p&gt;Think of security at every layer. Instead of using just one firewall to secure all of your virtual networks, be sure to use virtual firewalls on every network that you create.&lt;br&gt;
Make sure that every activity is traceable and that you manage privileges meticulously. You should be able to see which users did what on your systems. Be strict with access controls and have authentication. Only a few trusted people should be able to access the root and modify settings at that level.&lt;br&gt;
Keep track of all actions, modifications, and points of exit and entry in your AWS deployments. Not only should you be able to tell who did what on your cloud platform, but you should also create alerts to warn you of unusual activities.&lt;/p&gt;

&lt;p&gt;Have customized image templates of all of your virtual servers. You can use these images when you launch a new server. The Amazon Machine Image service can create these reusable templates every time you spin up an EC2 instance. These images will already include your security settings.&lt;/p&gt;

&lt;p&gt;Be sure to encrypt every piece of sensitive data that you store in or transmit over your AWS environment. You can opt to encrypt your data on-site and then send it to your AWS deployment. You can also store the encryption keys behind your own firewall and just use Amazon’s hardware security module to make sure that they work properly. Data key caching is a recent introduction from AWS which offers benefits such as reduced latency, but there are some security tradeoffs to consider.&lt;/p&gt;

&lt;p&gt;Perform regular audits to ensure regulatory compliance. AWS offers a robust suite of Compliance Resources, including an auditing security checklist which helps businesses perform self-audits to ensure that regulatory requirements are met.&lt;br&gt;
GO DEEPER&lt;/p&gt;

&lt;p&gt;Cloud Data Protection&lt;/p&gt;

&lt;p&gt;AWS SECURITY TOOLS&lt;br&gt;
Amazon has a variety of security tools available to help implement the aforementioned AWS security best practices. Here are the top AWS security tools:&lt;/p&gt;

&lt;p&gt;CloudTrail allows you to monitor your systems by recording the API requests used to manage SDK deployments, management consoles, accounts, services, and command lines. With these event logs, you can troubleshoot incidents and simplify compliance auditing.&lt;br&gt;
AWS WAF (Web Application Firewall) allows you to create custom rules to keep your agile developments secure from common attacks such as SQL injections and XSS.&lt;br&gt;
Amazon Inspector gives you security evaluations for your applications and looks for vulnerabilities.&lt;/p&gt;

&lt;p&gt;Amazon Cognito is used for identity management. It can detect brute force authentication, as well as fraudulent login attempts. Amazon Cognito works with third party services such as Microsoft Active Directory, Google and Facebook, allowing you to specify additional validation methods.&lt;br&gt;
CloudHSM helps you generate encryption keys using managed hardware security modules, or HSMs, stored on your AWS deployments.&lt;/p&gt;

&lt;p&gt;CloudFront is Amazon’s content delivery network. It protects your applications from DDoS attacks and allows you to transfer data securely at high speeds.&lt;/p&gt;

&lt;p&gt;BEST PRACTICES FOR CHOOSING AN AWS SECURITY SOLUTION&lt;br&gt;
With the help of a cloud security solution, businesses can easily manage their responsibilities for securing their sensitive data and applications in the cloud. Here are some best practices to help you choose the right solution:&lt;/p&gt;

&lt;p&gt;Easy integration. Choose a security solution that integrates with AWS to make the process painless.&lt;br&gt;
Maintain visibility and control. To be able to effectively audit and control compliance, choose a solution that allows total visibility and control. Ideally, a security solution will provide the visibility necessary for identifying sensitive data in the cloud and then implement automated, immediate responses to keep your organization in compliance.&lt;/p&gt;

&lt;p&gt;Context, system, and user awareness. A security solution should be context-, system-, and user-aware to more effectively identify and block suspicious behavior and protect your data without interrupting the flow of operations.&lt;br&gt;
Automatic response to user activity. Choose a cloud security solution that automatically prompts or blocks user activity based on context, logs the event, and audits the activity for forensic analysis.&lt;/p&gt;

&lt;p&gt;Detailed logging and reporting. A good cloud security solution offers detailed logging and reporting for analysis, allowing you to identify patterns and trends and adjust data protection programs accordingly.&lt;/p&gt;

&lt;p&gt;Unified cloud and on-premise security. Some solutions work in tandem with on-premise data protection solutions, allowing for more comprehensive security and consistent policies. By simplifying policy management, you will cut down on costs and eliminate policy gaps that can lead to vulnerabilities.&lt;br&gt;
While Amazon has helped lower security risks by publishing best practices and developing a suite of tools, you must also enforce the proper controls and protocols and manage your users to secure your data and applications. In addition, implementing a third-party cloud security solution will help ensure compliance and unify your cloud and on-premise policies and initiatives to achieve maximum security for your organization.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>How to mint an NFT via CLI</title>
      <author>Emanuel Ferreira</author>
      <pubDate>Mon, 20 Sep 2021 10:26:34 +0000</pubDate>
      <link>https://dev.to/emanuelferreira/how-to-mint-an-nft-via-cli-25ea</link>
      <guid>https://dev.to/emanuelferreira/how-to-mint-an-nft-via-cli-25ea</guid>
      <description>&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h3&gt;

&lt;p&gt;In this article we will create a script with NodeJS to create an NFT via CLI, passing in its private address and a URL containing the NFT metadata.&lt;/p&gt;

&lt;p&gt;To do this tutorial, I recommend looking at our series to understand the previous steps and see how we got here&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://dev.to/emanuelferreira/how-to-create-a-smart-contract-to-mint-a-nft-2bbn"&gt;How to create a Smart Contract to mint an NFT&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/emanuelferreira/how-to-deploy-smart-contract-to-rinkeby-testnet-using-infura-and-hardhat-5ddj"&gt;How to deploy a Smart Contract to Rinkeby Testnet using Infura and Hardhat&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#boilerplate"&gt;
  &lt;/a&gt;
  Boilerplate
&lt;/h3&gt;

&lt;p&gt;To be faster, I will provide a boilerplate containing the babel, typescript, file structure, packages, scripts, environment variables...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/EmanuelCampos/mint-nft-script/tree/boilerplate"&gt;Click here to go to the GitHub with boilerplate&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our boilerplate contains the following packages to run the script:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y481ZgMS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f70vp4jg92gyjyl0svjk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y481ZgMS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f70vp4jg92gyjyl0svjk.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#taking-the-provider"&gt;
  &lt;/a&gt;
  Taking the Provider
&lt;/h3&gt;

&lt;p&gt;Our application provider will help us interact with our contract by defining the network we want to access as mainnet or testnet.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: To get the provider we are going to use Infura, you can see my previous article on how to use Infura: &lt;a href="https://dev.to/emanuelferreira/how-to-deploy-smart-contract-to-rinkeby-testnet-using-infura-and-hardhat-5ddj"&gt;How to deploy a Smart Contract to Rinkeby Testnet using Infura and Hardhat&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Going into the &lt;code&gt;getProvider&lt;/code&gt; file in the &lt;code&gt;src/getProvider.ts&lt;/code&gt; directory we will take the code below and edit it to get our provider.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;getProvider.ts&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ethers&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ethers&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//Library to connect to the ethereum&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;dotenv&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dotenv&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="c1"&gt;// Library to get the enviroment variables&lt;/span&gt;

&lt;span class="nx"&gt;dotenv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// starting the dotenv&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getProvider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt; &lt;span class="c1"&gt;// function to get provider&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we are going to edit our file and leave it the same as below(I will explain in the code what each line does).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;getProvider.ts&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ethers&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ethers&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;dotenv&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dotenv&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;dotenv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getProvider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;infuraProvider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ethers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;providers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;InfuraProvider&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NETWORK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// Our enviroment variable with network (rinkeby, mainnet, ropsten)&lt;/span&gt;
    &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PROJECT_ID&lt;/span&gt; &lt;span class="c1"&gt;// Our environment variable with the id of our project in infura&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Function in ethers to connect to Infura&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;infuraProvider&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// returning the provider&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ready, we finished our first function!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#contract-addresses"&gt;
  &lt;/a&gt;
  Contract Addresses
&lt;/h3&gt;

&lt;p&gt;In the &lt;code&gt;contractAddresses.ts&lt;/code&gt; file in &lt;code&gt;src/contractAddresses.ts&lt;/code&gt; we have an export of the environment variable which is the address of the contract we deployed in the previous article.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;contractAddresses.ts&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;dotenv&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dotenv&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;dotenv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;FactoryNFTAddress&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CONTRACT_ADDRESS&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#creating-the-mint-script"&gt;
  &lt;/a&gt;
  Creating the Mint Script
&lt;/h3&gt;

&lt;p&gt;Now finally let's create our script to mint an NFT using only 1 command.&lt;/p&gt;

&lt;p&gt;We have some basic settings to run our script:&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;mintNFT.ts&lt;/code&gt; file in &lt;code&gt;src/mintNFT.ts&lt;/code&gt; we have some basic settings to run our script, let's complete by adding the desired functions.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;mintNFT.ts&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ethers&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ethers&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// eslint-disable-next-line&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;err: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#getting-the-args"&gt;
  &lt;/a&gt;
  Getting the args
&lt;/h4&gt;

&lt;p&gt;Let's start by getting the two arguments that are &lt;code&gt;privateKey&lt;/code&gt; and &lt;code&gt;tokenURI&lt;/code&gt; and validating if at least 2 arguments were sent.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;mintNFT.ts&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ethers&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ethers&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;unsanitizedArgs&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// getting the args&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;unsanitizedArgs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// eslint-disable-next-line&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;yarn es ./src/mintNft &amp;lt;privatekey&amp;gt; &amp;lt;tokenuri&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// validating whether the 2 arguments were sent&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;privateKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;tokenUri&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;unsanitizedArgs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// destructuring to get the arguments&lt;/span&gt;


&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// eslint-disable-next-line&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;err: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#getting-the-provider"&gt;
  &lt;/a&gt;
  Getting the Provider
&lt;/h4&gt;

&lt;p&gt;After we get the arguments we need to know which address is being used to mint the NFT and sign the contract.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;mintNFT.ts&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ethers&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ethers&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;unsanitizedArgs&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// getting the args&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;unsanitizedArgs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// eslint-disable-next-line&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;yarn es ./src/mintNft &amp;lt;privatekey&amp;gt; &amp;lt;tokenuri&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// validating whether the 2 arguments were sent&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;privateKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;tokenUri&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;unsanitizedArgs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// destructuring to get the arguments&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// eslint-disable-next-line&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;err: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#connecting-with-the-wallet-and-the-contract"&gt;
  &lt;/a&gt;
  Connecting with the wallet and the contract
&lt;/h4&gt;

&lt;p&gt;First, we need to import some things which are the ABI of our contract that we got after compiling it, the address of our contract, and our getProvider&lt;/p&gt;

&lt;p&gt;&lt;em&gt;mintNFT.ts&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ethers&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ethers&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getProvider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./getProvider&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;FactoryNFT&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../artifacts/contracts/factoryNFT.sol/FactoryNFT.json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;FactoryNFTAddress&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./contractAddresses&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;unsanitizedArgs&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// getting the args&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;unsanitizedArgs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// eslint-disable-next-line&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;yarn es ./src/mintNft &amp;lt;privatekey&amp;gt; &amp;lt;tokenuri&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// validating whether the 2 arguments were sent&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;privateKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;tokenUri&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;unsanitizedArgs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// destructuring to get the arguments&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// eslint-disable-next-line&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;err: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can get your ABI contract after compiling your contract, just dragging the artifacts folder to the root folder. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VD3_2oQ3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1873w7fdsovon9w2u93v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VD3_2oQ3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1873w7fdsovon9w2u93v.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we need to pass the wallet that we are using for our transaction to our contract, for that we will use ethers on both occasions.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;mintNFT.ts&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ethers&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ethers&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;unsanitizedArgs&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// getting the args&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;unsanitizedArgs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// eslint-disable-next-line&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;yarn es ./src/mintNft &amp;lt;privatekey&amp;gt; &amp;lt;tokenuri&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// validating whether the 2 arguments were sent&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;privateKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;tokenUri&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;unsanitizedArgs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// destructuring to get the arguments&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;wallet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ethers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Wallet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;privateKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;provider&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// getting your wallet&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;factoryNFTContract&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ethers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Contract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;FactoryNFTAddress&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// your contract address&lt;/span&gt;
    &lt;span class="nx"&gt;FactoryNFT&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;abi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// your contract ABI&lt;/span&gt;
    &lt;span class="nx"&gt;wallet&lt;/span&gt; &lt;span class="c1"&gt;// your wallet&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// getting the contract&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// eslint-disable-next-line&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;err: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#making-the-transaction"&gt;
  &lt;/a&gt;
  Making the transaction
&lt;/h4&gt;

&lt;p&gt;And now the last step is to use our contract to make our transaction.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;mintNFT.ts&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ethers&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ethers&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;unsanitizedArgs&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// getting the args&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;unsanitizedArgs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// eslint-disable-next-line&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;yarn es ./src/mintNft &amp;lt;privatekey&amp;gt; &amp;lt;tokenuri&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// validating whether the 2 arguments were sent&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;privateKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;tokenUri&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;unsanitizedArgs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// destructuring to get the arguments&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;wallet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ethers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Wallet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;privateKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;provider&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// getting your wallet&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;factoryNFTContract&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ethers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Contract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;FactoryNFTAddress&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// your contract address&lt;/span&gt;
    &lt;span class="nx"&gt;FactoryNFT&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;abi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// your contract ABI&lt;/span&gt;
    &lt;span class="nx"&gt;wallet&lt;/span&gt; &lt;span class="c1"&gt;// your wallet&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// getting the contract&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;minting&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;transaction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;factoryNFTContract&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createToken&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tokenUri&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// interacting with the contract&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// waiting the minting of the block&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;events&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tokenId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toNumber&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// getting the created tokenId&lt;/span&gt;

  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="nx"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;tokenId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt; &lt;span class="c1"&gt;// returns&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// eslint-disable-next-line&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;err: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you can run the command below and see the result in the console.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn es ./src/mintNft &amp;lt;privatekey&amp;gt; &amp;lt;tokenuri&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h1CHR4TN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nqiz2hd2447vt355joie.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h1CHR4TN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nqiz2hd2447vt355joie.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The script is done, now you can get your tokenID and consult the contract that will return your metadata.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;thanks &lt;a href="https://twitter.com/sseraphini"&gt;Sibelius&lt;/a&gt; for helping with the script.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now you can Follow me on &lt;a href="https://twitter.com/manelferreira_"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Project Repository(Complete): &lt;a href="https://github.com/EmanuelCampos/mint-nft-script/tree/master"&gt;https://github.com/EmanuelCampos/mint-nft-script/tree/master&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Project Repository(Blank Template): &lt;a href="https://github.com/EmanuelCampos/mint-nft-script/tree/boilerplate"&gt;https://github.com/EmanuelCampos/mint-nft-script/tree/boilerplate&lt;/a&gt;&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>solidity</category>
      <category>script</category>
      <category>web3</category>
    </item>
    <item>
      <title>Software Engineering is a Loser’s Game</title>
      <author>Tyler Hawkins</author>
      <pubDate>Mon, 20 Sep 2021 09:53:40 +0000</pubDate>
      <link>https://dev.to/thawkin3/software-engineering-is-a-loser-s-game-2k20</link>
      <guid>https://dev.to/thawkin3/software-engineering-is-a-loser-s-game-2k20</guid>
      <description>&lt;p&gt;I’ve recently become fascinated by the idea of “winner’s games” and “loser’s games.” There are several great articles which explain the idea in depth, but here’s a quick summary:&lt;/p&gt;

&lt;p&gt;An observation was made by Simon Ramo in 1973 that there is big difference in how games are won in amateur tennis versus professional tennis.&lt;/p&gt;

&lt;p&gt;When two amateur opponents are playing, the game is often won not through the winner’s great skill but because of the loser’s mistakes. The loser often commits unforced errors by hitting the ball out of bounds, missing easy shots, or double faulting. In other words, the loser beats himself. Points are “lost” by the loser more than they are “won” by the winner. This is a “loser’s game.”&lt;/p&gt;

&lt;p&gt;When two professional opponents are playing, the game is won primarily due to the winner’s skill. Neither player commits many unforced errors. The winner places his shots well and outperforms his opponent to defeat him. Points in this kind of game are “won” by the winner more than they are “lost” by the loser. This is a “winner’s game.”&lt;/p&gt;

&lt;p&gt;So, if you’re playing a loser’s game, a winning strategy is to simply try to avoid making mistakes and let your opponent beat himself.&lt;/p&gt;

&lt;p&gt;(If you’ve ever played tennis or ping pong before, I hope at this point you’re nodding your head in recognition. As an avid ping pong player, I’ve seen this scenario play out in the office at work on a daily basis.)&lt;/p&gt;

&lt;p&gt;The application of this observation is that you should attempt to understand whether any given activity you’re involved in is a winner’s game or a loser’s game. Gaining that understanding teaches you how you should play the game.&lt;/p&gt;

&lt;p&gt;You can read more about these ideas in this &lt;a href="https://www.empirical.net/wp-content/uploads/2012/06/the_losers_game.pdf"&gt;article by Charles Ellis&lt;/a&gt;, this &lt;a href="https://fs.blog/2014/06/avoiding-stupidity/"&gt;article from the FS blog&lt;/a&gt;, or this &lt;a href="https://thehosk.medium.com/software-development-is-a-losers-game-fc68bb30d7eb"&gt;article from Ben Hosking&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#parallels-to-software-engineering"&gt;
  &lt;/a&gt;
  Parallels to Software Engineering
&lt;/h2&gt;

&lt;p&gt;Now, what if we consider software engineering to be a loser’s game? That is to say, we often beat ourselves by committing unforced errors and making mistakes. If we are amateurs, so to speak, how can we keep the ball in play rather than hitting it into the net?&lt;/p&gt;

&lt;p&gt;It’s a simple thing to say, “If you want to be good, just stop making mistakes.” But that’s somewhat unhelpful. That’s like saying to those in poverty, “Why don’t you just stop being poor?”&lt;/p&gt;

&lt;p&gt;It’s also unhelpful if we take this analogy too far. If avoiding mistakes is the ultimate goal of software engineering, is the best software engineer the one who writes no code or does nothing? Obviously, no. Software engineers are paid to write code to help bring to life some product in order to achieve some vision (make the business money, solve a real-world problem, simplify a task, etc.), so that must be the real ultimate goal.&lt;/p&gt;

&lt;p&gt;So it appears that we must balance producing valuable output with avoiding mistakes. This leads to an interesting thought experiment: In what ways do we beat ourselves, and how can we avoid making these amateur mistakes?&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#unforced-errors"&gt;
  &lt;/a&gt;
  Unforced Errors
&lt;/h2&gt;

&lt;p&gt;Here’s a list of possible unforced errors we commit. I’m sure you may be able to add more to this list as well.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Not understanding the problem before trying to code a solution&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Not understanding the tools or programming languages we use&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Not carefully reviewing our own code before asking for a code review&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Not manually testing our own code before asking for a code review&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Not writing unit tests&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Not following agreed-upon company standards&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#solving-these-unforced-errors"&gt;
  &lt;/a&gt;
  Solving These Unforced Errors
&lt;/h2&gt;

&lt;p&gt;Now that we’ve identified some potential unforced errors, how do we avoid making them?&lt;/p&gt;

&lt;p&gt;For starters, we can put safeguards in place to help us catch and correct our mistakes before they become too costly. All code repos should be configured with code linters, code formatters, and a suite of automated tests. These safeguards can be run as part of a CI pipeline prior to allowing any code to be merged.&lt;/p&gt;

&lt;p&gt;We can also be more thorough in our own attention to detail when writing code. After creating a merge request, we should always do a self code review before asking others to review our code. We should always manually validate our changes as well.&lt;/p&gt;

&lt;p&gt;Nothing is more frustrating as a code reviewer than reviewing someone else’s code who clearly didn’t do these checks themselves. It wastes the code reviewer’s time when he has to catch simple mistakes like commented out code, bad formatting, failing unit tests, or broken functionality in the code. All of these mistakes can easily be caught by the code author or by a CI pipeline.&lt;/p&gt;

&lt;p&gt;When merge requests are frequently full of errors, it turns the code review process into a gatekeeping process in which a handful of more senior engineers serve as the gatekeepers. This is an unfavorable scenario that creates bottlenecks and slows down the team’s velocity. It also detracts from the higher purpose of code reviews, which is knowledge sharing.&lt;/p&gt;

&lt;p&gt;We can use checklists and merge request templates to serve as reminders to ourselves of things to double check. Have you reviewed your own code? Have you written unit tests? Have you updated any documentation as needed? For frontend code, have you validated your changes in each browser your company supports? Have you ensured that all user-facing text is translated? Have you ensured that the UI meets accessibility standards and guidelines?&lt;/p&gt;

&lt;p&gt;By performing these checks ourselves, aided by automated tools, we show an added measure of professionalism and respect for our coworkers. Trust will grow and velocity will increase. The key is to be diligent and disciplined.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Software engineering is a loser’s game. So let’s learn to play the game and stop losing to ourselves.&lt;/p&gt;

</description>
      <category>leadership</category>
      <category>productivity</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How to learn Machine Learning?
</title>
      <author>Nephilem</author>
      <pubDate>Mon, 20 Sep 2021 09:40:51 +0000</pubDate>
      <link>https://dev.to/jameskirk308/how-to-learn-machine-learning-258</link>
      <guid>https://dev.to/jameskirk308/how-to-learn-machine-learning-258</guid>
      <description>&lt;p&gt;Machine learning is the process of applying analytical and statistical models to enable computer systems to execute a range of activities in the absence of human-provided step-by-step instructions. As a consequence, machine learning may be used to generate various data-driven hypotheses.&lt;/p&gt;

&lt;p&gt;Many industries have benefited from data science, but machine learning has always been a fundamental driver of digital transformation and automation. With the quantity of data created every day increasing exponentially, the world requires experts who can extract insights from that data and forecast the future.&lt;/p&gt;

&lt;p&gt;Machine learning is prevalent all around the world. It can be beneficial to data scientists, software engineers, and business analysts. Students must spend months, if not years, mastering the theory and mathematics of machine learning. Without question, this is the best way to start your adventure. If you want to work in the subject of Machine Learning, you'll need a good background in math and statistics.&lt;/p&gt;

&lt;p&gt;Are you interested in the opportunities that machine learning offers? Check out the path you may take to become an expert in machine learning.&lt;br&gt;
Step 1. Learn Python/R&lt;br&gt;
Machine learning capabilities are available in a variety of languages. In addition, there is a lot of development work going on in a lot of language addition; there is a lot of development work going on in many languages. The most widely used languages are “R” and “Python,” and both have extensive support and community. Before diving into the realm of machine learning, I recommend picking one of these two languages (R or Python) to assist you in focusing on machine learning.&lt;/p&gt;

&lt;p&gt;Here are some book recommendations to get started with,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://amzn.to/2L604fM"&gt;Python Machine Learning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://amzn.to/31UAr9J"&gt;R in a Nutshell&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Step 2. Learn Basic Statistics&lt;br&gt;
Let's get started or brush up on our statistics knowledge. Before you begin significant machine learning development, you need to have a strong understanding of the below mathematical topics,&lt;/p&gt;

&lt;p&gt;Probability distribution&lt;br&gt;
Theory of graphs&lt;br&gt;
Testing of Hypothesis&lt;br&gt;
Aspects of Bayesian thinking&lt;br&gt;
Coordinate geometry of curves&lt;br&gt;
Conditional probability&lt;br&gt;
Linear discriminant analysis&lt;br&gt;
Multivariate calculus.&lt;br&gt;
Prior and posteriors&lt;br&gt;
Least squares and mean square errors.&lt;br&gt;
Mean, median, and mode&lt;br&gt;
Maximum likelihoods.&lt;br&gt;
Principal component analysis (PCA)&lt;/p&gt;

&lt;p&gt;Here are some book recommendations to get started with,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://amzn.to/2F6WT6L"&gt;Practical Statistics for Data Scientists: 50 Essential Concepts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com/Elements-Statistical-Learning-Prediction-Statistics/dp/0387848576/ref=as_li_ss_tl?currency=INR&amp;amp;ie=UTF8&amp;amp;language=en_US&amp;amp;linkCode=ll1&amp;amp;linkId=b760a6048cf9e065d77392a286c19d3c&amp;amp;tag=learnds-20"&gt;The Elements of Statistical Learning: Data Mining, Inference, and Prediction (“ESL”)&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Step 3. Learn Data Preparation&lt;br&gt;
Although each form of data, such as pictures in computer vision, text in natural language processing, and sequence data in time series forecasting, requires specialized processes, data preparation is a crucial issue for all. The quality of their feature engineering and data cleaning on the original data can separate great machine learning professionals from poor ones. Make the most of your stay here. Because this is the most time-consuming phase of the procedure, planning ahead is essential.&lt;/p&gt;

&lt;p&gt;Some of the important topics,&lt;br&gt;
Variable Identification&lt;br&gt;
Univariate and Multivariate analysis&lt;br&gt;
Missing values treatment&lt;br&gt;
Outlier treatment&lt;br&gt;
Feature Engineering&lt;/p&gt;

&lt;p&gt;Here are some book recommendations to get started with,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com/gp/product/149190142X/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=149190142X&amp;amp;linkCode=as2&amp;amp;tag=petacrunch-20&amp;amp;linkId=edf06af7b6694a8bc86289c37f4378e4"&gt;Data Science from Scratch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://amzn.to/35wjsvx"&gt;Best Practices in Data Cleaning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://amzn.to/35DoLcU"&gt;Data Wrangling in Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://amzn.to/2zZOQXN"&gt;Feature Engineering for Machine  Learning&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Step 4. Learn Machine  Learning&lt;br&gt;
If you want to study in incremental stages and require additional guidance, start with working on some &lt;a href="https://www.projectpro.io/article/top-10-machine-learning-projects-for-beginners-in-2021/397"&gt;beginner-level machine learning projects&lt;/a&gt;. Projects are the best way for beginners to get some hands-on experience with real-world machine learning problems. Also, it's simple and easy to understand concepts by actually working on them. Work on diverse ML projects covering all the fundamental algorithms and a few advanced subjects such as neural networks and recommendation systems. If you understand the concepts and algorithms well, you will be able to code them in R or Python easily.&lt;/p&gt;

&lt;p&gt;Under the machine learning concepts, you need to learn&lt;br&gt;
Machine learning models&lt;br&gt;
Machine learning types&lt;br&gt;
Supervised algorithms (regression, classification)&lt;br&gt;
Unsupervised and semi-supervised algorithms (clustering, dimensionality reduction, graph-based algorithms)&lt;br&gt;
Deep learning (CNNs and RNNs)&lt;br&gt;
Reinforcement learning (dynamic programming, Monte Carlo methods, heuristic methods)&lt;br&gt;
Clustering&lt;br&gt;
Separation of features&lt;br&gt;
Output variable&lt;br&gt;
Outliers&lt;br&gt;
Label/ target&lt;br&gt;
Data training&lt;br&gt;
Time series analysis&lt;br&gt;
Clustering&lt;/p&gt;

&lt;p&gt;Under the machine learning algorithms, you need to learn&lt;br&gt;
Linear regression&lt;br&gt;
Logistic regression&lt;br&gt;
Decision tree&lt;br&gt;
SVM&lt;br&gt;
KNN&lt;br&gt;
Naive Bayes&lt;br&gt;
Random Forest, &lt;br&gt;
XgBoost&lt;br&gt;
ADABoost etc.&lt;/p&gt;

&lt;p&gt;Here are some book recommendations to get started with,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://geni.us/DkXs"&gt;Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow: Concepts, Tools, and Techniques to Build Intelligent Systems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.in/dp/199957950X?tag=hackr0df-21&amp;amp;geniuslink=true"&gt;The Hundred Page Machine Learning Book&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.in/Machine-Learning-Absolute-Beginners-Introduction/dp/1549617214/"&gt;Machine Learning For Absolute Beginners: A Plain English Introduction (2nd Edition)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.in/Machine-Learning-Hackers-Studies-Algorithms/dp/9350236745/"&gt;Machine Learning for Hackers: Case Studies and Algorithms to Get You Started (1st Edition)&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;Step 5. Get your hands dirty with Beginner Level ML Projects&lt;br&gt;
Machine learning is a rapidly growing field with applications in various areas, including health, finance, retail, and many more. If you're a novice interested in pursuing a career in new technologies such as machine learning or deep learning, it's important to have hands-on experience with the ideas.&lt;/p&gt;

&lt;p&gt;Here is a selected selection of machine learning projects to get you started on your ML adventure,&lt;/p&gt;

&lt;p&gt;House Price Prediction&lt;br&gt;
Titanic Survival Prediction&lt;br&gt;
Stock Prices Prediction&lt;br&gt;
Iris Flowers Classification Project&lt;br&gt;
Movie Ticket Pricing Prediction&lt;br&gt;
Handwritten Digit Classification&lt;/p&gt;

&lt;p&gt;Step 6. Advanced Machine Learning&lt;br&gt;
Now that you've learned the fundamentals of machine learning, it's time to consider more advanced machine learning techniques, such as Deep Learning and Natural Language Processing (NLP), to better grasp different data formats.&lt;/p&gt;

&lt;p&gt;Deep Learning&lt;br&gt;
In machine learning, deep learning allows computers to learn by doing, similar to how people learn. Self-driving cars rely heavily on deep learning because it will enable them to see a stop sign or tell the difference between a pedestrian and a lamppost from a distance. Consumer electronics, such as smartphones, tablets, TVs, and hands-free speakers, include voice control capabilities. Deep learning has gotten a lot of press lately, and for a good reason. It's all about reaching previously unattainable targets.&lt;/p&gt;

&lt;p&gt;Here are some book recommendations to get started with,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com/Deep-Learning-Coders-fastai-PyTorch/dp/1492045527"&gt;Deep Learning for Coders with Fastai and PyTorch: AI Applications Without a PhD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.in/Deep-Learning-Practitioners-Josh-Patterson/dp/9352136047"&gt;Deep Learning: A Practitioner's Approach&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.in/Deep-Learning-Python-Francois-Chollet/dp/1617294438/ref=sr_1_3?adgrpid=59218639416&amp;amp;dchild=1&amp;amp;ext_vrnc=hi&amp;amp;gclid=Cj0KCQjwnJaKBhDgARIsAHmvz6cBk2WME2ph2y0mazgFPm53MfiIwKlQZwDgbLm-7bFwXweNkbRQAUQaAjCnEALw_wcB&amp;amp;hvadid=294146687174&amp;amp;hvdev=c&amp;amp;hvlocphy=9303409&amp;amp;hvnetw=g&amp;amp;hvqmt=e&amp;amp;hvrand=14580621618843395660&amp;amp;hvtargid=kwd-304805565088&amp;amp;hydadcr=25368_1776648&amp;amp;keywords=deep+learning+with+python&amp;amp;qid=1631966348&amp;amp;sr=8-3"&gt;Deep Learning with Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com/Deep-Learning-Adaptive-Computation-Machine/dp/0262035618/ref=sr_1_1?ie=UTF8&amp;amp;qid=1472485235&amp;amp;sr=8-1&amp;amp;keywords=deep+learning+book"&gt;Deep Learning (Adaptive Computation and Machine Learning series)&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Natural Language Processing&lt;br&gt;
&lt;a href="https://www.projectpro.io/article/nlp-projects-ideas-/452"&gt;Natural Language Processing (NLP)&lt;/a&gt; is a field of AI that allows machines to comprehend human language. Its objective is to create systems that can automatically understand the text and execute activities like translation, spell check, and classification. However, machine learning will be required to automate these procedures and provide correct replies. Machine learning is the process of teaching machines how to learn and develop without being explicitly programmed by applying algorithms.&lt;/p&gt;

&lt;p&gt;Here are some book recommendations to get started with,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.oreilly.com/library/view/natural-language-processing/9780596803346/"&gt;Natural Language Processing with Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.in/Natural-Language-Processing-Action-Understanding/dp/1617294632"&gt;Natural Language Processing in Action: Understanding, analyzing, and generating text with Python&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Computer Vision&lt;br&gt;
In the artificial intelligence (AI) field, computer vision is the study of how computers and systems can derive useful information from visual inputs such as digital pictures, videos, and other types of media and take action or make suggestions in response to that data. &lt;a href="https://www.projectpro.io/article/computer-vision-projects/437"&gt;Computer vision&lt;/a&gt; and artificial intelligence go hand in hand because computer vision allows computers to perceive, observe, and comprehend. Computer vision has made great progress in recent years because of advancements in artificial intelligence, deep learning, and neural networks, exceeding humans in numerous tasks related to object identification and classification.&lt;/p&gt;

&lt;p&gt;Here are some book recommendations to get started with,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="http://szeliski.org/Book/"&gt;Computer Vision: Algorithms and Applications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.computervisionmodels.com/"&gt;Computer Vision: Models, Learning, and Inference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://programmingcomputervision.com/"&gt;Programming Computer Vision with Python&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So, once you've completed this, you can start practicing machine learning skills on a dataset from websites like Kaggle, and once you've become proficient and comfortable with that, the sky's the limit; you can write research papers, compete in live competitions, and win both laurels and cash prizes.&lt;/p&gt;

</description>
      <category>machinelearning</category>
      <category>datascience</category>
      <category>machinelearningprojects</category>
      <category>datascienceprojects</category>
    </item>
    <item>
      <title>Using Socket.io in express-generator.</title>
      <author>Abhishek shah</author>
      <pubDate>Mon, 20 Sep 2021 09:34:06 +0000</pubDate>
      <link>https://dev.to/shahiscoding/using-socket-io-in-express-generator-4pkp</link>
      <guid>https://dev.to/shahiscoding/using-socket-io-in-express-generator-4pkp</guid>
      <description>&lt;p&gt;Socket.io has documentation on how to use it with express but it a bit tricky to use socket.io with express-generator because the server is created in www file and the io is created in app or server but the use of io is in the router .So how can you use socket.io in express-generator ?&lt;br&gt;&lt;br&gt;
           Its very simple you can create a new file as mysocket and create instance of io over there and export it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#in-the-mysocket-file"&gt;
  &lt;/a&gt;
  In the mysocket file.
&lt;/h2&gt;

&lt;blockquote&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let socketIo = require('socket.io');
let io = socketIo();
let socketApi = {};
socketApi.io = io;
module.exports = socketApi;
&lt;/code&gt;&lt;/pre&gt;

&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#in-the-www-file"&gt;
  &lt;/a&gt;
  In the www file
&lt;/h2&gt;

&lt;blockquote&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var server = http.createServer(app);
socketAPI.io.attach(server);
&lt;/code&gt;&lt;/pre&gt;

&lt;/blockquote&gt;

&lt;p&gt;So, you can import io from mysocket file into the router and use it.&lt;br&gt;
If you have anything to add you can leave a comment.&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>node</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>What is Ethereum</title>
      <author>Shadmehr</author>
      <pubDate>Mon, 20 Sep 2021 09:22:31 +0000</pubDate>
      <link>https://dev.to/shadmehra/what-is-ethereum-37mn</link>
      <guid>https://dev.to/shadmehra/what-is-ethereum-37mn</guid>
      <description>&lt;p&gt;If Bitcoin (BTC) is the alleged future of money, then what is Ethereum? For someone new to the cryptocurrency space, that’s the logical question to ask, considering they probably see Ethereum and its native Ether (ETH) cryptocurrency next to Bitcoin everywhere on exchanges and in the news. However, it’s not exactly fair to consider Ethereum to be in direct competition with Bitcoin. It has different goals, features and even technology.&lt;/p&gt;

&lt;p&gt;Ethereum is a decentralized blockchain network powered by the Ether token that enables users to make transactions, earn interest on their holdings through staking, use and store nonfungible tokens (NFTs), trade cryptocurrencies, play games, use social media and so much more.&lt;/p&gt;

&lt;p&gt;It’s currently a proof-of-work (PoW) blockchain but is making the move to proof-of-stake (PoS) with Ethereum 2.0 for scalability purposes and for a more environmentally friendly approach.&lt;/p&gt;

&lt;p&gt;Many consider Ethereum to be the internet’s next step. If centralized platforms like Apple’s App Store represent Web 2.0, a decentralized, user-powered network like Ethereum is Web 3.0. This “next-generation web” supports decentralized applications (DApps), decentralized finance (DeFi) and decentralized exchanges (DEXs), for instance. &lt;/p&gt;

&lt;p&gt;All of these are trustless, automated versions of traditional finance and internet usage, and they’re widely used. DeFi is already holding billions in total value locked in projects, and that’s expected to grow even higher.&lt;/p&gt;

&lt;p&gt;History of Ethereum&lt;br&gt;
Ethereum wasn’t always the second-largest blockchain project in the world. Vitalik Buterin actually co-created the project to answer for Bitcoin’s shortcomings. Buterin published the Ethereum white paper in 2013, detailing smart contracts — automated, immutable “if-then” statements — enabling the development of decentralized applications. While DApp development already existed in the blockchain space, platforms weren’t interoperable. Buterin intended Ethereum to unify them. To him, unifying the way DApps run and interact was the only way to maintain adoption.&lt;/p&gt;

&lt;p&gt;Thus, Ethereum 1.0 was born. Think of it as Apple’s App Store: one space for tens of thousands of different applications, all abiding by the same ruleset, only that ruleset is hardcoded into the network and enforced autonomously, with developers able to enforce their own rules within DApps. There isn’t a central party, like with Apple changing and enforcing regulations. Instead, the power is in the hands of the people who act as a community.&lt;/p&gt;

&lt;p&gt;Of course, building such a network isn’t cheap. So, Buterin and his co-founders — Gavin Wood, Jeffrey Wilcke, Charles Hoskinson, Mihai Alisie, Anthony Di Iorio and Amir Chetrit — held a token presale to raise $18,439,086 in Ether, funding Ethereum’s present and future developments.&lt;/p&gt;

&lt;p&gt;The group also founded the Ethereum Foundation in Switzerland, with the mission to maintain and develop the network. Soon after, Buterin announced the foundation would run as a nonprofit, which caused some co-founders to leave.&lt;/p&gt;

&lt;p&gt;Over time, developers came to Ethereum with their own decentralized ideas. In 2016, these users founded The DAO, a democratic group that voted on network changes and proposals. The organization was backed by a smart contract and circumvented the need for a CEO heralding power over Ethereum. Instead, a majority needed to vote on changes for them to be implemented.&lt;/p&gt;

&lt;p&gt;However, this all went south when an unknown hacker stole $40 million in funds from The DAO’s holdings, due to a security exploit. To reverse the theft, The DAO voted to “hard fork” Ethereum, diverging from the old network and upgrading to a new protocol, essentially undergoing a major software update. This new fork retained the name Ethereum, while the original network exists as Ethereum Classic.&lt;br&gt;
&lt;a href="https://arzdigital.academy/what-is-ethereum/"&gt;https://arzdigital.academy/what-is-ethereum/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>pow</category>
    </item>
    <item>
      <title>Make Spam bot in Python in just 6 lines</title>
      <author>VECTOR3Studio</author>
      <pubDate>Mon, 20 Sep 2021 09:22:03 +0000</pubDate>
      <link>https://dev.to/vector3studio/make-spam-bot-in-python-in-just-6-lines-288e</link>
      <guid>https://dev.to/vector3studio/make-spam-bot-in-python-in-just-6-lines-288e</guid>
      <description>&lt;p&gt;1 Hello 👋&lt;br&gt;
In this post I will show you how to make simple spam bot in Python in just 6 lines of code.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#btw-you-can-watch-video-tutorial-here"&gt;
  &lt;/a&gt;
  BTW you can watch video tutorial here:
&lt;/h4&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ZvyEpkrTGKM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#so-lets-start"&gt;
  &lt;/a&gt;
  So let's Start ▶️
&lt;/h4&gt;

&lt;p&gt;First we need to install Pysimplegui library, we can do it by running this command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; pip install pysimplegui 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we need to import pysimplegui and time library. We can use this code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pysimplegui&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's make a program for spamming.&lt;br&gt;
First we need add a timer, because you will need some time to go to Instagram or something.&lt;br&gt;
Then we need ad a whole loop for the spamming functionality&lt;br&gt;
Here is the code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#delay for 5 sec
&lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;#endless loop
&lt;/span&gt;  &lt;span class="n"&gt;pyautogui&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"heyy"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;pyautogui&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;press&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"enter"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's the whole code you need to Spam your friend.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#thanks-for-reading-this-post-i-hope-you-learned-something-new-see-you"&gt;
  &lt;/a&gt;
  Thanks for Reading this post. I hope you learned something new. See you 👋
&lt;/h5&gt;

</description>
      <category>python</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>What is C# Programming Language
</title>
      <author>Shadmehr</author>
      <pubDate>Mon, 20 Sep 2021 09:16:23 +0000</pubDate>
      <link>https://dev.to/shadmehra/what-is-c-programming-language-2iip</link>
      <guid>https://dev.to/shadmehra/what-is-c-programming-language-2iip</guid>
      <description>&lt;p&gt;What is C# Programming Language&lt;br&gt;
Microsoft developed C# in 2000. It was built to meet the rising demand for web applications that Visual Basic(VB) and C++ can’t cater to. Its architecture adopts the best features of Java and C++. As a result, developers who are well versed in C and C++ can shift to C# easily.&lt;/p&gt;

&lt;p&gt;Also, its huge popularity is attributed to:&lt;/p&gt;

&lt;p&gt;Reusable components for faster software development&lt;br&gt;
The code syntax looks similar to Java and C++&lt;br&gt;
Data types inside C# are more flexible and error-free. &lt;br&gt;
These are just a few reasons that make C# the best programming language when it comes to web applications. It provides a broad spectrum of components covering business-oriented to system-oriented projects.&lt;/p&gt;

&lt;p&gt;What is C# used for?&lt;br&gt;
C# is a general-purpose programming language used to build different types of programs and applications. While it is exceptionally versatile, there are three fields where it is commonly applied: &lt;/p&gt;

&lt;p&gt;Web Application Development&lt;br&gt;
Regardless of the platform, you can still use the C# programming language. You can build dynamic websites and web apps using the .NET platform or other open-source platforms. &lt;/p&gt;

</description>
      <category>codepen</category>
    </item>
    <item>
      <title>What and Why Next.js and TailwindCSS?</title>
      <author>Avneesh Agarwal</author>
      <pubDate>Mon, 20 Sep 2021 09:11:39 +0000</pubDate>
      <link>https://dev.to/byteslash/what-and-why-next-js-and-tailwindcss-g5j</link>
      <guid>https://dev.to/byteslash/what-and-why-next-js-and-tailwindcss-g5j</guid>
      <description>&lt;p&gt;&lt;strong&gt;Hey folks 👋🏻,&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you have seen my past articles then you must have seen that many of the articles are related to &lt;a href="https://nextjs.org/"&gt;Next.js&lt;/a&gt;,  &lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt;, or  &lt;a href="https://tailwindcss.com/"&gt;Tailwind &lt;/a&gt; but I never really explained what they exactly are, so I have decided to write an article on that today!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--50hj-Y-1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/r3XdvPsAV3kAAAAC/despicable-me-minions.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--50hj-Y-1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/r3XdvPsAV3kAAAAC/despicable-me-minions.gif" alt="started"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-nextjs"&gt;
  &lt;/a&gt;
  What is Next.js?
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://nextjs.org/"&gt;Next.js&lt;/a&gt;  is a production-ready framework for the javascript library React. Next.js provides us many features on top of the amazing library &lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-use-nextjs"&gt;
  &lt;/a&gt;
  Why use Next.js?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;ServerSideRendering and Static generation hybrid&lt;/li&gt;
&lt;li&gt;Easy file system routing&lt;/li&gt;
&lt;li&gt;Better SEO&lt;/li&gt;
&lt;li&gt;Image Optimization&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#what-is-react"&gt;
  &lt;/a&gt;
  What is  React?
&lt;/h3&gt;

&lt;p&gt;React is an open-source Javascript library built by Facebook and it is used for building user interfaces or UI components.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-react"&gt;
  &lt;/a&gt;
  Why React?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Great performance&lt;/li&gt;
&lt;li&gt;Easy to learn&lt;/li&gt;
&lt;li&gt;Easy to test&lt;/li&gt;
&lt;li&gt;Simple&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#what-is-tailwindcss"&gt;
  &lt;/a&gt;
  What is TailwindCSS?
&lt;/h3&gt;

&lt;p&gt;TailwindCSS is a CSS framework that allows us to write CSS directly inside our HTML. It is a utility-first framework and highly flexible unlike some others like Bootstrap. The long classes can be opinionated but it is worth a try.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-use-tailwind"&gt;
  &lt;/a&gt;
  Why use Tailwind?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Superfast&lt;/li&gt;
&lt;li&gt;Easily make apps responsive&lt;/li&gt;
&lt;li&gt;Helps to maintain a design system&lt;/li&gt;
&lt;li&gt;Tiny in production&lt;/li&gt;
&lt;li&gt;Easy dark mode&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Useful links -&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://nextjs.org"&gt;Nextjs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://tailwindcss.com/"&gt;TailwindCSS&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://avneesh-links.vercel.app/"&gt;All socials&lt;/a&gt;&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>react</category>
      <category>tailwindcss</category>
    </item>
    <item>
      <title>Let's Grow with LetsGrowMore ✨</title>
      <author>AYUSH SONI</author>
      <pubDate>Mon, 20 Sep 2021 09:09:26 +0000</pubDate>
      <link>https://dev.to/ayushsoni1010/let-s-grow-with-letsgrowmore-1db2</link>
      <guid>https://dev.to/ayushsoni1010/let-s-grow-with-letsgrowmore-1db2</guid>
      <description>&lt;p&gt;Learning Web Development is never been an easy task for me until I get some real hands-on experience. It's all started in June 2021, I was exploring an open-source program on google, I was also using LinkedIn for finding such technically experienced people. Suddenly, a post comes into my feed and that was about LetsGrowMore. And, then I was come to know that day LetsGrowMore is not just providing open-source enthusiasts a platform to showcase their skills in a different field but also provides an opportunity to undergraduates to work together with them as an intern in various fields.&lt;br&gt;
I grabbed the opportunity with both hands and applied and thus opening the gateway to the Open Source world!&lt;/p&gt;

&lt;p&gt;So, Now let's talk about What community is this and how they help the beginner to boost their skills. For beginners, I would first like to clear some things. Here we go:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-open-source"&gt;
  &lt;/a&gt;
  What is Open Source🤔?
&lt;/h2&gt;

&lt;p&gt;I think you might’ve studied about this. There are generally two types of software that programmers code a closed source software, and open-source software. open-source software is the one for which the source code is made freely available and may be redistributed and modified. This is done to accept bugs, issues, and other features from around the world helping the open-source software community. So next time when you’re on a website like Github, working on a project (repository), and contributing your code to it, consider yourself to be a lucky person because you’re now an open-source contributor, Open source has become a movement and a way of working that reaches beyond software production. The open-source movement uses the values and decentralized production model of open-source software to find new ways to solve problems in their communities and industries.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-letsgrowmore"&gt;
  &lt;/a&gt;
  What is LetsGrowMore🚀?
&lt;/h2&gt;

&lt;p&gt;LetsGrowMore is a ground-based organization that aims at building the future through nourishing the present. LetsGrowMore believes in making our youth especially the students self-aware and exploring the untouched world of technology and tremendous growth-making fields and our belief finally took us where we are standing today. Today LetsGrowMore is an officially MSME registered start-up with nearly 100+ people working under the same establishment.&lt;br&gt;
Well, this is not what LetsGrwMore aims for, their plans are much higher and they are working for it. Soon they are coming with new projects which target the future building.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-the-main-missions-of-letsgrowmore"&gt;
  &lt;/a&gt;
  What are the main missions of LetsGrowMore🎯?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;1. Help Everyone To Grow&lt;/strong&gt;&lt;br&gt;
Learning is a never-ending process! To make sure everyone will learn new things in the right way LetsGrowMore provides a healthy community where everyone can share.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Provide Learning Opportunity&lt;/strong&gt;&lt;br&gt;
At LetsGrowMore they aim to provide as many opportunities as possible.&lt;br&gt;
For now, they are offering many free opportunities such as :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://letsgrowmore.in/vip"&gt;LGMVIP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://letsgrowmore.in/soc"&gt;LGMSoC'21&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://forms.gle/vi5YgBREv5LQ6CMw9"&gt;LGMWEP(For Girls-Only)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://letsgrowmore.in/vip/"&gt;Web Development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://letsgrowmore.in/vip/"&gt;Tech Intern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.google.com/forms/d/1kfEcNyxKit0Ib8xV5sU4c4KI2fY9JcK8DvYklfQuOz0/viewform?edit_requested=true"&gt;Campus Ambassador&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.google.com/forms/d/1ZnAdbukXaTVj_S0sgn6PfJh1UwKlpX4tuD87mdRhO_8/viewform?edit_requested=true"&gt;Social Media Marketing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.google.com/forms/d/12VyIWPh3bmE8SfkhOy7JrYWZjclzCOP_Gp4Tn4zFVZo/viewform?edit_requested=true"&gt;Content Writing Intern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.google.com/forms/d/e/1FAIpQLSdXeL_soItd5fFZQByZeQyaceYPbEJoSf5Hx2W9XmAo0_m_sg/viewform?usp=sf_link"&gt;Graphic Designer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;3. Build a better tomorrow&lt;/strong&gt;&lt;br&gt;
By investing in students, they not only providing students a platform, but they also focus on how did students get all the in free of cost.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Knowledge grows by sharing&lt;/strong&gt;&lt;br&gt;
Creating an educational open-source community will help beginners to build a solid network with more experienced individuals and under their guidance, they can pave their path in the field of development.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-this-community-helps-you%F0%9F%9B%A1"&gt;
  &lt;/a&gt;
  How this community helps you🛡?
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;They enhance your understanding and appreciation of diversity.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;They provide various services within the community&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;They allow members to gain personal and professional skills in the area of leadership &amp;amp; development.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can also grow within the community to become a mentor in the organization.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;They support and encourage students to explore their multiple identities.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;They provide convenient, up-to-date services to meet the current needs of the community.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;They provide leisure learning, continuing education courses for the campus and community.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#what-i-have-learned-from-this-program-"&gt;
  &lt;/a&gt;
  What I have learned from this program 🧾?
&lt;/h2&gt;

&lt;p&gt;Although I have learned many things but will emphasize some important points here. Having in a huge team is a fantastic experience for me, more than 500+ contributors are working on several projects, invokes teamwork within us which is a very important soft skill a student much have I'm also an introvert before joining this awesome community but after joining I learned many things like how to express my views with others, solving problems, helping new programmers, managing projects. Apart from the art of taking help from others, the art of helping others is also a silent feature of this program.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Please forgive me if I have done any grammatical errors in this article as I’m yet improving my English.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;“If everyone is moving forward together, then success takes care of itself.”&lt;br&gt;
— Henry Ford&lt;/p&gt;

&lt;p&gt;Good luck to everyone who’s about to decide between contributing to this amazing and open world of coders. 🙌&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>letsgrowmore</category>
      <category>lgm</category>
      <category>opensourceprogram</category>
    </item>
    <item>
      <title>How to deploy streamlit app to Heroku</title>
      <author>Kevork Keheian</author>
      <pubDate>Mon, 20 Sep 2021 09:00:44 +0000</pubDate>
      <link>https://dev.to/kevorkkeheian/how-to-deploy-streamlit-app-to-heroku-khn</link>
      <guid>https://dev.to/kevorkkeheian/how-to-deploy-streamlit-app-to-heroku-khn</guid>
      <description>&lt;p&gt;Hello everyone,&lt;br&gt;
This is a step by step tutorial about how to deploy your Streamlit app to Heroku.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-is-streamlit"&gt;
  &lt;/a&gt;
  What is streamlit?
&lt;/h2&gt;

&lt;p&gt;Streamlit is an open-source python framework for Machine Learning and Data Science teams and individuals.&lt;br&gt;
See it yourself: &lt;a href="https://streamlit.io"&gt;https://streamlit.io&lt;/a&gt;&lt;br&gt;
You can deploy your app using streamlit sharing, but the problem is that you only have 3 apps with the free version.&lt;/p&gt;

&lt;p&gt;So what you will see now is how you can deploy your app to Heroku&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#requirements"&gt;
  &lt;/a&gt;
  Requirements:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;python&lt;/code&gt; installled&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;streamlit&lt;/code&gt; installed
(You can install streamlit using &lt;code&gt;pip install streamlit&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com"&gt;GitHub&lt;/a&gt; account&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once the above are installed&lt;/p&gt;

&lt;p&gt;You can check their &lt;a href="https://docs.streamlit.io/en/stable/"&gt;documentation&lt;/a&gt; about creating you app.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#and-now-its-time-to-deploy"&gt;
  &lt;/a&gt;
  And now it's time to deploy 🎇
&lt;/h3&gt;

&lt;p&gt;You need to add 2 additional files to your project.&lt;br&gt;
1- You need to add a &lt;strong&gt;setup.sh&lt;/strong&gt; file which is used to add shell commands inside the file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; ~/.streamlit/
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;&lt;span class="s2"&gt;
[server]&lt;/span&gt;&lt;span class="se"&gt;\n\&lt;/span&gt;&lt;span class="s2"&gt;
headless = true&lt;/span&gt;&lt;span class="se"&gt;\n\&lt;/span&gt;&lt;span class="s2"&gt;
port = &lt;/span&gt;&lt;span class="nv"&gt;$PORT&lt;/span&gt;&lt;span class="se"&gt;\n\&lt;/span&gt;&lt;span class="s2"&gt;
enableCORS = false&lt;/span&gt;&lt;span class="se"&gt;\n\&lt;/span&gt;&lt;span class="s2"&gt;
&lt;/span&gt;&lt;span class="se"&gt;\n\&lt;/span&gt;&lt;span class="s2"&gt;
"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; ~/.streamlit/config.toml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then add a new file called &lt;strong&gt;Procfile&lt;/strong&gt; and inside it paste the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;web: sh setup.sh &amp;amp;&amp;amp; streamlit run app.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And finally a &lt;strong&gt;requirements.txt&lt;/strong&gt; file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;streamlit
matplotlib
numpy
pandas
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and the other packages that you are using in your app.&lt;/p&gt;

&lt;p&gt;Now head over to &lt;a href="https://github.com"&gt;GitHub&lt;/a&gt; and create a new repository and publish your code to github. You can check this &lt;a href="https://medium.com/singapore-rails-learning-group/how-to-push-your-code-to-github-and-publish-your-first-page-8b0e1f4caf2a"&gt;article&lt;/a&gt; to see how you can do that.&lt;/p&gt;

&lt;p&gt;Once the code is on GitHub head over to &lt;a href="https://heroku.com"&gt;Heroku&lt;/a&gt; and create a new app:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JSJAqHXY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y8cqgbnnsvvvo8sgepor.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JSJAqHXY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y8cqgbnnsvvvo8sgepor.png" alt="Create a new app on Heroku"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Choose a name to your app and click "&lt;strong&gt;Create app&lt;/strong&gt;"&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iZdG3S9Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/luevxt316fhugf8mes6b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iZdG3S9Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/luevxt316fhugf8mes6b.png" alt="Heroku - create a new app"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can leave the pipeline empty for the time being and choose "GitHub" as your deployment method.&lt;br&gt;
And in the &lt;strong&gt;Connect to GitHub&lt;/strong&gt; section choose your username/org, type the name of the repository and click search. After you click search you can see the repo, click on the &lt;strong&gt;Connect&lt;/strong&gt; button next to the repo.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RSBqGZcu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kpqhsz4y7lv14zi2v6ci.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RSBqGZcu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kpqhsz4y7lv14zi2v6ci.png" alt="Heroku - choose deployment method"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you click connect you can see at the end of the page The &lt;strong&gt;Manual deploy&lt;/strong&gt; section. Just click Deploy Branch and watch the magic happen.&lt;/p&gt;

&lt;p&gt;Once the deployment is finished you can check your app &lt;strong&gt;app-name&lt;/strong&gt;.heroku.com.&lt;br&gt;
In this case we chose &lt;strong&gt;streamlit-heroku-app&lt;/strong&gt; as our app name so if you need to navigate to streamlit-heroku-app.heroku.com to see the deployed streamlit app.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MIlABuIB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zanl8gtpwrieb84epafj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MIlABuIB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zanl8gtpwrieb84epafj.png" alt="Heroku - manaul deployment"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: the app is no longer available on heroku&lt;/em&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>streamlit</category>
      <category>heroku</category>
    </item>
    <item>
      <title>Create an NPX CLI Portfolio under 5 minutes</title>
      <author>Anish De</author>
      <pubDate>Mon, 20 Sep 2021 08:56:34 +0000</pubDate>
      <link>https://dev.to/anishde12020/creat-an-npx-cli-portfolio-under-5-minutes-fh0</link>
      <guid>https://dev.to/anishde12020/creat-an-npx-cli-portfolio-under-5-minutes-fh0</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dWSfitnE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632121300335/gd5ezLkxf.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dWSfitnE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632121300335/gd5ezLkxf.gif" alt="npx-cli-portfolio.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Want something like this? This is the article you are looking for. Let me show you how you can make an NPX CLI Portfolio under 5 minutes&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-i-made-it"&gt;
  &lt;/a&gt;
  How I made it
&lt;/h1&gt;

&lt;p&gt;I am mainly using &lt;a href="https://github.com/vadimdemedes/ink"&gt;React Ink&lt;/a&gt; for this project. I have also written a &lt;a href="https://blog.anishde.dev/getting-started-with-react-ink"&gt;Getting started with React Ink&lt;/a&gt; article which you can check out. The goal was to make a portfolio that can be viewed in the terminal. At first, I just did a console log which logged out information about me but once I found out about React Ink, I thought of using that and making it better. The advantage of using React Ink is that it is way more flexible than simple console logs and hence I was able to put custom colors (theoretically you can apply a color to a console log but options are quite limited). Using React also allowed me to make a reusable component and hence the number of fields showing up and the contents are dynamic, based on a &lt;code&gt;data.json&lt;/code&gt; file.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-you-can-make-it-as-well"&gt;
  &lt;/a&gt;
  How you can make it as well
&lt;/h1&gt;

&lt;p&gt;I have made a template in GitHub (which you can find &lt;a href="https://github.com/AnishDe12020/cli-portfolio-template"&gt;here&lt;/a&gt;) which you can use. You can find a detailed guide &lt;a href="https://github.com/AnishDe12020/cli-portfolio-template#how-to-use-this-template"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#things-to-keep-in-mind"&gt;
  &lt;/a&gt;
  Things to keep in mind
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;If someone has already made a package with the same name on NPM, then you need to choose something else&lt;/li&gt;
&lt;li&gt;NPM version 5.2 is needed at a minimum to use NPX (it can be used as a standalone package though)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks to &lt;a class="mentioned-user" href="https://dev.to/deninpaulv"&gt;@deninpaulv&lt;/a&gt;
 for help with the thumbnail&lt;/p&gt;

</description>
      <category>npm</category>
      <category>portfolio</category>
      <category>template</category>
      <category>node</category>
    </item>
  </channel>
</rss>
