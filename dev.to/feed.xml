<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Youtube To MP3 üòç</title>
      <author>Said Mounaim</author>
      <pubDate>Wed, 07 Apr 2021 21:18:01 +0000</pubDate>
      <link>https://dev.to/said_mounaim/youtube-to-mp3-3ja6</link>
      <guid>https://dev.to/said_mounaim/youtube-to-mp3-3ja6</guid>
      <description>&lt;p&gt;youtube to mp3 app using html5, css3 &amp;amp;javascript üòçüéâ&lt;/p&gt;

&lt;p&gt;Demo : &lt;br&gt;
&lt;a href="https://youtube-mp3.netlify.app/"&gt;https://youtube-mp3.netlify.app/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Code :&lt;br&gt;
&lt;a href="https://github.com/saidMounaim/100DaysOfCode/tree/main/Day50"&gt;https://github.com/saidMounaim/100DaysOfCode/tree/main/Day50&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check my #100DaysOfCode challenge üòç&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/saidMounaim/100DaysOfCode"&gt;https://github.com/saidMounaim/100DaysOfCode&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>html</category>
      <category>100daysofcode</category>
      <category>programming</category>
    </item>
    <item>
      <title>Self-Studying Advice from CodeNewbie Community</title>
      <author>Ben Halpern</author>
      <pubDate>Wed, 07 Apr 2021 20:57:29 +0000</pubDate>
      <link>https://dev.to/devteam/self-studying-advice-from-codenewbie-community-ibh</link>
      <guid>https://dev.to/devteam/self-studying-advice-from-codenewbie-community-ibh</guid>
      <description>&lt;p&gt;I came across a great post on the &lt;a href="https://community.codenewbie.org"&gt;CodeNewbie Community&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#selfstudying-101-advice-from-a-selftaught-dev"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;a href="https://community.codenewbie.org/httpspauline/self-studying-101-advice-from-a-self-taught-dev-2io2"&gt;"Self-studying 101: Advice From a Self-Taught Dev‚Äù&lt;/a&gt;&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;If you're a newbie in deep need of self-teaching tips, or just feel like you need to improve on this skills, I highly recommend this post.&lt;/p&gt;

&lt;p&gt;Reminder that the CodeNewbie community is a space entirely dedicated to newbie success. It's built DEV's open source software &lt;a href="https://github.com/forem/forem"&gt;Forem&lt;/a&gt; but posts and comments are moderated explicitly with newbies in mind. Check it out if you want a second space to hang out.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: We're getting closer to getting Forem Open Source project to general availability with versioned releases for anyone who wants to host a Forem. Stay tuned.&lt;/em&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#"&gt;
  &lt;/a&gt;
  üå±
&lt;/h4&gt;

</description>
      <category>forem</category>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Why I didn't just use NgRx, NGXS or Subjects in a Service</title>
      <author>Mike Pearson</author>
      <pubDate>Wed, 07 Apr 2021 20:20:24 +0000</pubDate>
      <link>https://dev.to/this-is-angular/why-i-didn-t-just-use-ngrx-ngxs-or-subjects-in-a-service-1djf</link>
      <guid>https://dev.to/this-is-angular/why-i-didn-t-just-use-ngrx-ngxs-or-subjects-in-a-service-1djf</guid>
      <description>&lt;p&gt;I am about to throw shade at some beloved state management solutions, and this is bound to upset some people. Great people have worked hard on these, and I am seriously grateful to anyone who has contributed to the many state management options out there.  However, I have been asked to clarify why I created StateAdapt instead of using an existing solution. So let's get into it.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#ngrx"&gt;
  &lt;/a&gt;
  NgRx
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8I2G6vh---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9barqgte6p1qysw4g8b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8I2G6vh---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9barqgte6p1qysw4g8b.png" alt="What NgRx is missing"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#state-pattern-is-coupled-to-state"&gt;
  &lt;/a&gt;
  State pattern is coupled to state
&lt;/h3&gt;

&lt;p&gt;Recently I created a complex tree of components in an NgRx project only to find out later that a 2nd copy of that tree of components needed to exist on the same page at the same time. I would need to add an extra property to 30 actions so that the reducer could become more complicated and know whether an action should apply to one place in the state tree or another. &lt;/p&gt;

&lt;p&gt;If we managed state like we built UIs‚Äîwith components‚Äîwe could add another instance of a state pattern in as little as 2 lines of code. I believe we could achieve this with the state adapter pattern introduced in NgRx/Entity, but I think most people would view it as even more boilerplate unless the surrounding boilerplate was reduced at the same time. That is what I did in StateAdapt. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#boilerplate"&gt;
  &lt;/a&gt;
  Boilerplate
&lt;/h3&gt;

&lt;p&gt;Everyone knows about the boilerplate problem with NgRx. The NgRx Core team has done a terrific job of reducing this, but in order to reduce it to a minimum you would need to take full advantage of RxJS, which StateAdapt does. StateAdapt achieves the same benefits as NgRx with 60% the minimum code compared to modern NgRx. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#best-practices"&gt;
  &lt;/a&gt;
  Best practices?
&lt;/h3&gt;

&lt;p&gt;NgRx seems to try to distance itself from Redux, but it is still a copy of Redux wrapped in an observable. Unfortunately, there is a lot of wisdom and best practices in the Redux community that did not successfully make its way over. There is some guidance, like &lt;a href="https://www.youtube.com/watch?v=JmnsEvoy-gY"&gt;this terrific talk&lt;/a&gt; by Mike Ryan, but I believe people are largely using NgRx in a way that minimizes the benefits they get from it. &lt;/p&gt;

&lt;p&gt;I wrote &lt;a href="https://medium.com/@m3po22/stop-using-ngrx-effects-for-that-a6ccfe186399"&gt;Stop using ngrx/effects for that&lt;/a&gt; in 2017 in the hopes that people would stop using ngrx/effects for everything. It mostly didn't work. The first example in the &lt;a href="https://ngrx.io/guide/effects"&gt;NgRx/Effects&lt;/a&gt; documentation is for something that NgRx/Effects shouldn't be used for: Subscribing to data by dispatching an action. In my article I explain why using plain RxJS makes data dependencies much more flexible and maintainable. &lt;/p&gt;

&lt;p&gt;My solution did not catch on very well, and I have seen indications that people were intimidated by the little-known &lt;code&gt;using&lt;/code&gt; function from RxJS that it requires. Unfortunately I was too lazy to write more about that solution. So, one of my primary goals in StateAdapt was to just take care of that behind the scenes. I am very happy with how it turned out. With StateAdapt, developers can focus on thinking reactively and not worry about how to involve the store. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#ngxs"&gt;
  &lt;/a&gt;
  NGXS
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--20j0w87T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i1yau65kxrq4yhg2qtdi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--20j0w87T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i1yau65kxrq4yhg2qtdi.png" alt="What NGXS is missing"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#state-pattern-is-coupled-to-state"&gt;
  &lt;/a&gt;
  State pattern is coupled to state
&lt;/h3&gt;

&lt;p&gt;This is the same problem I talked about with NgRx above. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#everything-is-an-effect"&gt;
  &lt;/a&gt;
  Everything is an effect
&lt;/h3&gt;

&lt;p&gt;I already thought people were drastically overusing NgRx/Effects, but then somebody created a state management library where literally everything is an effect. &lt;/p&gt;

&lt;p&gt;Rather than repeat myself about why I love pure functions, I will just refer you to &lt;a href="https://medium.com/@m3po22/stop-using-ngrx-effects-for-that-a6ccfe186399"&gt;my first article&lt;/a&gt;. I think it is wonderful that people are trying to reduce state management boilerplate, but I personally find NGXS code to be hard to understand. Data structure manipulation gets in the way of trying to understand the overall data flow in an application, and vice versa. I like separation of concerns between the big picture stuff and the details of how state is changed. NgRx has that (when not overusing NgRx/Effects) but it comes at the cost of all that boilerplate. But StateAdapt maintains it while reducing boilerplate.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#multiple-action-dispatching"&gt;
  &lt;/a&gt;
  Multiple action dispatching
&lt;/h3&gt;

&lt;p&gt;Dispatching multiple actions at the same time is an anti-pattern in Redux, and NGXS encourages it with special syntax. &lt;/p&gt;

&lt;p&gt;One of my first experiences in an NGXS application was opening Redux Devtools and seeing this: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--073dOfcH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jcr1a3f26gx10ea2prod.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--073dOfcH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jcr1a3f26gx10ea2prod.png" alt="Multiple Actions Dispatched"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I looked at the code and saw that these actions were all dispatched at the same time. &lt;/p&gt;

&lt;p&gt;The line between what was happening and how the app reacted was blurred to the point where I could no longer clearly see what was happening. There should have just been one action dispatched: &lt;code&gt;AnswerCall&lt;/code&gt;. If I was interested in the details, I could click on it and look at the state changes. &lt;/p&gt;

&lt;p&gt;Also, if you try to jump to any of these actions in Redux Devtools it will put the app in an intermediate state that is impossible in reality. &lt;/p&gt;

&lt;p&gt;The last issue is that this is backwards from FRP. Rather than multiple action handlers listening to one action in their respective state files, the event source is in charge of making all the changes downstream. An event source that dispatches multiple actions is a lot more than an event source.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#akita"&gt;
  &lt;/a&gt;
  Akita
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1d6JRcVe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wyn2az9ps5di36btcmsu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1d6JRcVe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wyn2az9ps5di36btcmsu.png" alt="What Akita is missing"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#imperative-state-management"&gt;
  &lt;/a&gt;
  Imperative State Management
&lt;/h3&gt;

&lt;p&gt;State is updated imperatively in Akita, like it tends to be in NGXS. Actually, NGXS would be improved if its syntax were more like Akita's, but they both suffer from the issues I mentioned in the section about NGXS.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#subjects-in-a-service"&gt;
  &lt;/a&gt;
  Subjects in a Service
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Oh_nQO8V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/chjw6jadsiuy6btxq64t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Oh_nQO8V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/chjw6jadsiuy6btxq64t.png" alt="What RxJS is missing"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#no-redux-devtools"&gt;
  &lt;/a&gt;
  No Redux Devtools
&lt;/h3&gt;

&lt;p&gt;RxJS is notoriously annoying to debug. Usually you have to edit the file by putting a &lt;code&gt;tap(console.log)&lt;/code&gt; in there, reload the app and reproduce the situation you wanted to debug. But Redux Devtools keeps track of everything automatically, so you can just open it anytime and explore what happened at any time. &lt;/p&gt;

&lt;p&gt;(Actions and state reactions are a big part of understanding what is happening in an application, so Redux Devtools is great, but I am still trying to find a better way to debug RxJS for the other parts of applications. If anyone knows of anything, let me know.) &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#no-selectors"&gt;
  &lt;/a&gt;
  No Selectors
&lt;/h3&gt;

&lt;p&gt;Sometimes you want to combine observables, but &lt;code&gt;combineLatest&lt;/code&gt; emits once for each input observable, even if the input observables emit synchronously. I believe this is the original reason NgRx included &lt;code&gt;createSelector&lt;/code&gt;, because selectors solve this. &lt;/p&gt;

&lt;p&gt;It is also really nice to have all the derived state calculated in pure functions, separate from the asynchronous RxJS stuff. &lt;/p&gt;

&lt;p&gt;Another benefit is with derived state. Pure RxJS makes you &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;distinctUntilChanged&lt;/code&gt; and &lt;code&gt;shareReplay&lt;/code&gt; if you want to calculate derived state efficiently. Selectors do not need any of that.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#stateadapt"&gt;
  &lt;/a&gt;
  StateAdapt
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gvlgzhfK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qt4qidf4hdut76ljur7r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gvlgzhfK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qt4qidf4hdut76ljur7r.png" alt="StateAdapt has everything"&gt;&lt;/a&gt;&lt;br&gt;
So, all of that is why I wrote StateAdapt. Is it perfect? No. Is it for everyone? Well, I think it is for everyone who loves minimal, reactive, debuggable and reusable code. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://state-adapt.github.io/"&gt;Give it a try&lt;/a&gt; and let me know what you think. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#others"&gt;
  &lt;/a&gt;
  Others
&lt;/h1&gt;

&lt;p&gt;If there are any I missed, please let me know. I searched a lot before I wrote StateAdapt, but I may have missed something. &lt;/p&gt;

&lt;p&gt;Also, if anyone wants to see any comparisons, I would love to create some. I already plan on doing some. But if you show me a feature developed in one state pattern, I will recreate it using StateAdapt. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#thank-you"&gt;
  &lt;/a&gt;
  Thank you!
&lt;/h1&gt;

&lt;p&gt;And please forgive me! I love you all!&lt;/p&gt;

</description>
      <category>stateadapt</category>
      <category>ngrx</category>
      <category>ngxs</category>
      <category>akita</category>
    </item>
    <item>
      <title>What's New in Codesphere Version¬†1.7.0</title>
      <author>Saji Wang</author>
      <pubDate>Wed, 07 Apr 2021 19:58:56 +0000</pubDate>
      <link>https://dev.to/codesphere/what-s-new-in-codesphere-version-1-7-0-478j</link>
      <guid>https://dev.to/codesphere/what-s-new-in-codesphere-version-1-7-0-478j</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;We have exciting news.. we read your feedback and listened, we just released v1.7.0 as the latest version of Codesphere!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#whats-new%C2%A0"&gt;
  &lt;/a&gt;
  What's new?¬†
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;We added GitHub integration support&lt;/li&gt;
&lt;li&gt;We added ESlint code assistance&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#fixes"&gt;
  &lt;/a&gt;
  Fixes
&lt;/h3&gt;

&lt;p&gt;‚úì We improved overall sign-up and sign-in process&lt;/p&gt;

&lt;p&gt;In addition, our team is currently working on allowing users to sign in with third-party accounts like GitHub and Google to ensure that our users can get started with Codesphere as quickly as possible. We will be adding more frameworks and soon you will be able to connect your own domain and so much more. Stay tuned for future releases!&lt;/p&gt;

&lt;p&gt;Happy Coding!&lt;/p&gt;

</description>
      <category>changelog</category>
      <category>webdev</category>
      <category>programming</category>
      <category>typescript</category>
    </item>
    <item>
      <title>Want to get started with web components?</title>
      <author>Matt Levy</author>
      <pubDate>Wed, 07 Apr 2021 19:49:29 +0000</pubDate>
      <link>https://dev.to/ficusjs/want-to-get-started-with-web-components-4h7p</link>
      <guid>https://dev.to/ficusjs/want-to-get-started-with-web-components-4h7p</guid>
      <description>&lt;p&gt;Browsers have improved &lt;em&gt;greatly&lt;/em&gt;. Many of the reasons to reach for a big framework like React or Angular have gone away.&lt;/p&gt;

&lt;p&gt;You don't have to rely on a complex build system, bundlers, or other tooling to ship your Javascript to users anymore.&lt;/p&gt;

&lt;p&gt;Browsers have support to import Javascript modules directly. You don't have to template your components in JSX and add all the baggage and complexity of a build tool - you can use Javascript &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals"&gt;tagged template literal syntax&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If don't want to pull in the complexity of a large framework like React or Angular, but still want to build applications with components, &lt;a href="https://docs.ficusjs.org"&gt;FicusJS&lt;/a&gt; is for you!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.ficusjs.org"&gt;FicusJS&lt;/a&gt; is a set of lightweight functions for developing web applications. It is focused on creating web components, managing application state plus a pub/sub event bus.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-web-components"&gt;
  &lt;/a&gt;
  What are web components?
&lt;/h2&gt;

&lt;p&gt;Web components are a set of browser APIs that allow you to create new custom, reusable, encapsulated HTML tags for use in web applications.&lt;br&gt;
Web Components work across modern browsers and can be used with any JavaScript library or framework that works with HTML.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#go-buildless"&gt;
  &lt;/a&gt;
  Go build-less
&lt;/h2&gt;

&lt;p&gt;Browsers have improved a lot over the past years. It's now possible to do web development without requiring any build tools, using the native module loader of the browser. We think this is a great fit for &lt;a href="https://docs.ficusjs.org"&gt;FicusJS&lt;/a&gt;, and we recommend this as a general starting point.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#aligns-with-standards"&gt;
  &lt;/a&gt;
  Aligns with standards
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://docs.ficusjs.org"&gt;FicusJS&lt;/a&gt; aligns with standard browser APIs which means it is not based on any proprietary code or libraries.&lt;/p&gt;

&lt;p&gt;As it is based on standards, it has longevity and is a good choice for enterprise web applications.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#try-it-out"&gt;
  &lt;/a&gt;
  Try it out
&lt;/h2&gt;

&lt;p&gt;The easiest way to try out &lt;a href="https://docs.ficusjs.org"&gt;FicusJS&lt;/a&gt; is using a hello world example.&lt;/p&gt;

&lt;p&gt;Create an &lt;code&gt;index.html&lt;/code&gt; file and copy the following between the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; tags.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;hello-world&amp;gt;&amp;lt;/hello-world&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"module"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;renderer&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://cdn.skypack.dev/@ficusjs/renderers/lit-html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createComponent&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://cdn.skypack.dev/ficusjs@3/component&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;createComponent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello-world&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;handleClick&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello to you!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="s2"&gt;`&amp;lt;div&amp;gt;
&amp;lt;p&amp;gt;Test component&amp;lt;/p&amp;gt;
&amp;lt;button type="button" @click="&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&amp;gt;Click me!&amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;`&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Alternatively, fork this Codepen to see it in action - &lt;a href="https://codepen.io/ducksoupdev/pen/GRZPqJO"&gt;https://codepen.io/ducksoupdev/pen/GRZPqJO&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The hello world example creates a new &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements"&gt;custom element&lt;/a&gt;&lt;br&gt;
using the &lt;code&gt;createComponent&lt;/code&gt; function and registers it to the &lt;code&gt;hello-world&lt;/code&gt; tag. It uses the &lt;a href="https://www.npmjs.com/package/lit-html"&gt;lit-html&lt;/a&gt; renderer (&lt;a href="https://github.com/ficusjs/ficusjs-renderers"&gt;multiple renderers are available&lt;/a&gt;) for creating HTML from &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals"&gt;tagged template literals&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once registered, the tag can be used multiple times in HTML and instances can be programmatically obtained using &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector"&gt;&lt;code&gt;document.querySelector&lt;/code&gt;&lt;/a&gt;&lt;br&gt;
or &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/querySelector"&gt;&lt;code&gt;element.querySelector&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Using pysimilar to compute similarity between texts</title>
      <author>Jordan Kalebu</author>
      <pubDate>Wed, 07 Apr 2021 19:48:42 +0000</pubDate>
      <link>https://dev.to/kalebu/using-pysimilar-to-compute-similarity-between-texts-290g</link>
      <guid>https://dev.to/kalebu/using-pysimilar-to-compute-similarity-between-texts-290g</guid>
      <description>&lt;p&gt;Hi guys , &lt;br&gt;
I recently wrote an article titled &lt;a href="https://kalebujordan.dev/how-to-detect-plagiarism-in-text-using-python/"&gt;How to detect plagiarism in text using python&lt;/a&gt; where by I shown how you can easily detect the plagiarism between documents as title says manually using cosine similarity.&lt;/p&gt;

&lt;p&gt;I republished that article on multiple platform including here on &lt;strong&gt;dev.to&lt;/strong&gt; and &lt;strong&gt;Hackernoon&lt;/strong&gt;, and its one of my most viewed article plus most starred GitHub repository among articles repositories.&lt;/p&gt;

&lt;p&gt;Which gave me a second thought to refactor the code/article to make it more easily and friendly to get started with even for absolutely beginners leading me to build a python library &lt;strong&gt;pysimilar&lt;/strong&gt; which I can say simplify it to the maximum;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#getting-started-with-pysimilar"&gt;
  &lt;/a&gt;
  Getting started with Pysimilar
&lt;/h2&gt;

&lt;p&gt;To get started with pysimilar for comparing text documents, you just need to install first of which you can either install directly from github or using pip.&lt;/p&gt;

&lt;p&gt;Here how to install pysimilar using pip&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;pysimilar
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Here how to install directly from github&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/Kalebu/pysimilar
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;pysimilar
&lt;span class="nv"&gt;$ &lt;/span&gt;pysimilar -&amp;gt; python setup.py &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;With Pysimilar you can either compare text documents  as strings or specify the path to the file containing the textual documents.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#comparing-strings-directly"&gt;
  &lt;/a&gt;
  Comparing strings directly
&lt;/h3&gt;

&lt;p&gt;You can easily compare strings using pysimilar using &lt;em&gt;compare()&lt;/em&gt; method just as illustrated below;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pysimilar&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;compare&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;compare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'very light indeed'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'how fast is light'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mf"&gt;0.17077611319011649&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#comparing-strings-contained-files"&gt;
  &lt;/a&gt;
  Comparing strings contained files
&lt;/h3&gt;

&lt;p&gt;To compare strings contained in the files, you just need to explicit specify the &lt;strong&gt;isfile&lt;/strong&gt; parameter to True just as illustrated below;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;compare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'README.md'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'LICENSE'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;isfile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mf"&gt;0.25545580376557886&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Well that's all for this article &lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Kalebu"&gt;
        Kalebu
      &lt;/a&gt; / &lt;a href="https://github.com/Kalebu/pysimilar"&gt;
        pysimilar
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A python library for computing the similarity between two string(text) based on cosine similarity
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
pysimilar&lt;/h1&gt;
&lt;p&gt;A python library for computing the similarity between two string(text) based on cosine similarity made by &lt;a href="https://github.com/Kalebu"&gt;kalebu&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/kalebuj" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/3ba8042b343d12b84b85d2e6563376af4150f9cd09e72428349c1656083c8b5a/68747470733a2f2f63646e2e6275796d6561636f666665652e636f6d2f627574746f6e732f64656661756c742d6f72616e67652e706e67" alt="Buy Me A Coffee" height="41" width="174"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
How does it work ?&lt;/h2&gt;
&lt;p&gt;It uses Tfidf Vectorizer to transform the text into vectors and then obtained vectors are converted into arrays of numbers and then finally cosine similary computation is employed resulting to output indicating how similar they are.&lt;/p&gt;
&lt;h2&gt;
Installation&lt;/h2&gt;
&lt;p&gt;You can either install it directly from &lt;em&gt;Github&lt;/em&gt; or use &lt;em&gt;pip&lt;/em&gt; to install it, here is how you to install it directly from github;&lt;/p&gt;
&lt;div class="highlight highlight-source-shell js-code-highlight"&gt;
&lt;pre&gt;$  git clone https://github.com/Kalebu/pysimilar
$  &lt;span class="pl-c1"&gt;cd&lt;/span&gt; pysimilar
$ pysimilar -&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; python setup.py install
&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
Installation with pip&lt;/h2&gt;
&lt;div class="highlight highlight-source-python js-code-highlight"&gt;
&lt;pre&gt;$ &lt;span class="pl-s1"&gt;pip&lt;/span&gt; &lt;span class="pl-s1"&gt;install&lt;/span&gt; &lt;span class="pl-s1"&gt;pysimilar&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
Example of usage&lt;/h2&gt;
&lt;p&gt;Pysimilar allows you to either specify the string you want to compare directly or specify path to files containing string you want to compare.&lt;/p&gt;
&lt;p&gt;Here an example on how to compare strings directly;&lt;/p&gt;
&lt;div class="highlight highlight-source-python js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-c1"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s1"&gt;pysimilar&lt;/span&gt; &lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-s1"&gt;compare&lt;/span&gt;
&lt;span class="pl-c1"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;compare&lt;/span&gt;&lt;/pre&gt;‚Ä¶
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/Kalebu/pysimilar"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



</description>
      <category>python</category>
      <category>nlp</category>
      <category>programming</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>git stash - Store your uncommitted changes aside to work on it later</title>
      <author>Raunaq </author>
      <pubDate>Wed, 07 Apr 2021 19:47:38 +0000</pubDate>
      <link>https://dev.to/raunaqchawhan/git-stash-store-your-uncommitted-changes-aside-to-work-on-it-later-5713</link>
      <guid>https://dev.to/raunaqchawhan/git-stash-store-your-uncommitted-changes-aside-to-work-on-it-later-5713</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;In this post, we'll be looking at the &lt;code&gt;git stash&lt;/code&gt; command and its usage. We come across situations in our development work where we are in the middle of a task with quite a good amount of code changes and have to switch to some other task that has come on priority. Now, if the changes are somewhat complete then we can commit it and start with the other task but what if those changes are unfinished and far away from a meaningful commit, in that case instead of committing it we can make use of&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git stash
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;git stash&lt;/code&gt; stores the uncommitted changes that we've made on our current branch away to be used at a later point in time and we are left with the code that was present before those changes. This allows us to work on our other task and get back to the stashed one later.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#git-stash"&gt;
  &lt;/a&gt;
  git stash
&lt;/h2&gt;

&lt;p&gt;Suppose we have a demo project and we've modified some files in it&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--whqUcfeI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617450893454/zx24SE4It.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--whqUcfeI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617450893454/zx24SE4It.png" alt="screenshot 1.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As we can see from the above screenshot that we have modified two files and now we'll use &lt;code&gt;git stash&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FwkAd5fP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617451546655/-Bgeev86A.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FwkAd5fP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617451546655/-Bgeev86A.png" alt="git stash.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After performing &lt;code&gt;git stash&lt;/code&gt;, the changes get stashed and when we use &lt;code&gt;git status&lt;/code&gt;, it shows that there is nothing to commit. Now, we can work on any other changes, switch branches and perform different operations and once we are done, we can re-apply the stash and continue working on it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reapplying-the-stashed-changes"&gt;
  &lt;/a&gt;
  Re-applying the stashed changes
&lt;/h2&gt;

&lt;p&gt;We can use the following command to re-apply the stashed changes&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git stash pop
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UrTp1pLy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617455223016/Zn2AcG1_g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UrTp1pLy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617455223016/Zn2AcG1_g.png" alt="git stash pop.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We see that the above command pops out our stashed changes and applies them to the current branch. After the changes are applied, it gets removed from the stash.&lt;/p&gt;

&lt;p&gt;If we don't want our changes to be removed from the stash after applying it on the branch, we can use the following command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git stash apply
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command can be used to apply the same changes on multiple branches.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#multiple-stashes"&gt;
  &lt;/a&gt;
  Multiple stashes
&lt;/h2&gt;

&lt;p&gt;We are not limited to a single stash and can use the &lt;code&gt;git stash&lt;/code&gt; command multiple times to create as many stash as required. We can then use the following command to view our stashes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git stash list
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Suppose, we've created few stashes by running the &lt;code&gt;git stash&lt;/code&gt; command multiple times&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w7QLUowA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617466048079/avUWgD8RK.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w7QLUowA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617466048079/avUWgD8RK.png" alt="git stash list.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We see that this command list out all the stashes that we've created and the stashes are identified as&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;stash@{n}: WIP(work in progress) on (branch on which stash is created): (commit from which the stash is created)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Identifying which stash contains what change becomes difficult as the message does not provide any context related to the change that it holds. Therefore, instead of using only &lt;code&gt;git stash&lt;/code&gt; we can use the following command that adds a description to the stash&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git stash save "description to give you an idea about your change"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XmGODtUU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617468260159/31RNXLGRL.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XmGODtUU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617468260159/31RNXLGRL.png" alt="git stash save.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git stash pop&lt;/code&gt; and &lt;code&gt;git stash apply&lt;/code&gt; re-applies the most recently created stash which is &lt;code&gt;stash@{0}&lt;/code&gt;. If we want to re-apply the changes from a different stash, we should pass its identifier as the last argument to the respective commands.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git stash pop stash@{3}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git stash apply stash@{3}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#stash-untracked-and-ignored-files"&gt;
  &lt;/a&gt;
  Stash untracked and ignored files
&lt;/h2&gt;

&lt;p&gt;By default, &lt;code&gt;git stash&lt;/code&gt; stores the staged and unstaged changes only. It will not store the new files added to the directory that has not been staged yet and also the files that have been ignored.&lt;/p&gt;

&lt;p&gt;If we also want to stash the new files, we can use the following command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git stash save "description" -u
OR
git stash save "description" --include-untracked
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using the following command will stash all the files including the ignored ones&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git stash save "description" -a
OR
git stash save "description" --all
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#view-the-changes-recorded-in-a-stash"&gt;
  &lt;/a&gt;
  View the changes recorded in a stash
&lt;/h2&gt;

&lt;p&gt;We can use the following command to view the changes recorded in a particular stash as a diff between the stashed contents and the commit back when the stash was first created.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git stash show -p stash@{n}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#stash-specific-files"&gt;
  &lt;/a&gt;
  Stash specific files
&lt;/h2&gt;

&lt;p&gt;We can make use of the &lt;code&gt;--patch&lt;/code&gt; flag while running the &lt;code&gt;git stash&lt;/code&gt; command that instructs Git not to stash everything that is modified instead it will iterate through all the changes and ask whether we want to stash it or not&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git stash save "description" -p
OR
git stash save "description" --patch
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#create-a-branch-from-the-stash"&gt;
  &lt;/a&gt;
  Create a branch from the stash
&lt;/h2&gt;

&lt;p&gt;Suppose we stashed some changes from a branch and continue to work on that particular branch and later try to re-apply those stashed changes, it might happen that the stashed changes try to modify a file which has already been modified and it results in a merge conflict. In that case we'll have to resolve the conflict or what we can do is use the following command that creates a new branch and checks out the commit we were on when the stash was created and reapply the stashed changes and removes the stash if it gets applied successfully.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git stash branch branch_name stash@{n}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fTdOBoZB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617551747074/pAjGpw9N7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fTdOBoZB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617551747074/pAjGpw9N7.png" alt="git stash branch.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cleaning-the-stash"&gt;
  &lt;/a&gt;
  Cleaning the stash
&lt;/h2&gt;

&lt;p&gt;So far we've seen how to create a stash and re-apply those changes back, now we'll be looking at the commands that will allow us to delete the stash. If we want to delete a particular stash, we can use the following command to delete it&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git stash drop stash@{n}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--49gNRSTR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617552551576/tFjMvyNSs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--49gNRSTR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617552551576/tFjMvyNSs.png" alt="git stash drop.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In case we want to delete all the stashes, it can be done using&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git stash clear
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this post, we learned about the &lt;code&gt;git stash&lt;/code&gt; command that lets us store our uncommitted changes that are not ready enough to be committed. We learned how to stash our work and also re-apply the changes back.&lt;/p&gt;

&lt;p&gt;By default, the stash command only stores the staged and unstaged changes so we learned how to stash the untracked and ignored files as well.&lt;br&gt;
We learned the command to view the changes stored in a stash and also stash specific files. Lastly, we created a branch from the stash and also deleted the created stashes.&lt;/p&gt;




&lt;p&gt;Thanks for taking the time to read this post. I hope this post helped you in learning something and if you enjoyed it, please share.&lt;/p&gt;

&lt;p&gt;It would be great to connect with you on &lt;a href="https://twitter.com/_raunaq_"&gt;Twitter&lt;/a&gt;. Please do share your valuable feedback and suggestionsüëã&lt;/p&gt;

</description>
      <category>git</category>
      <category>programming</category>
    </item>
    <item>
      <title>Verify matching parens, brackets and braces with Elixir</title>
      <author>Lucas Perez</author>
      <pubDate>Wed, 07 Apr 2021 19:44:56 +0000</pubDate>
      <link>https://dev.to/lucassperez/verify-matching-parens-brackets-and-braces-with-elixir-dh5</link>
      <guid>https://dev.to/lucassperez/verify-matching-parens-brackets-and-braces-with-elixir-dh5</guid>
      <description>&lt;p&gt;So I've started to study the Elixir language and decided to solve some coding exercise with it in order to better understand some concepts.&lt;br&gt;
Since I liked my solution, I decided to make a post explaining the thought process behind it. Suggestions to further improve the code or to better follow Elixir's conventions are more than appreciated! (:&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The Problem
&lt;/h2&gt;

&lt;p&gt;I want to make a function that receives a string as input, supposedly a mathematical expression or some code snippet, and tells me whether all of it's opening parenthesis/brackets/braces have a correct closing match.&lt;br&gt;
Some expressions as examples:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1 * 2 (3 + [4 / 5])
# should return true
9 / [(8 + 7] - 6)
# should return false
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#make-a-plan"&gt;
  &lt;/a&gt;
  Make a plan
&lt;/h2&gt;

&lt;p&gt;Before coding, I think it is a good ideia do solve the problem theoretically, and then try to implement it.&lt;br&gt;
For this exercise, I believe using the &lt;a href="https://en.wikipedia.org/wiki/Stack_(abstract_data_type)"&gt;stack&lt;/a&gt; idea is a very good approach. Basically, a stack is a set of items that have two operations: &lt;strong&gt;push&lt;/strong&gt; and &lt;strong&gt;pop&lt;/strong&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The push operation will put a new item in the set&lt;/li&gt;
&lt;li&gt;The pop operation will remove the last pushed item&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So the stack follows the "Last In, First Out" dynamic. When I put an item in the stack, this item will be the first one to get out when I start removing them.&lt;/p&gt;

&lt;p&gt;How can we use a stack here? Well, my theoretical solution would be to iterate over all the characters in the input string, and if:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It is an opening char (parens/brackets/braces), put it in a stack&lt;/li&gt;
&lt;li&gt;It is a closing char, check the last item in the stack: If it matches, we &lt;em&gt;pop&lt;/em&gt; it and continue the recursion. If it doesn't, the input string is not valid&lt;/li&gt;
&lt;li&gt;If it is something else, ignore&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If the whole input string is iterated and I never found an error, this means that all closers had a matching opener, but it doesn't necessarily means the string is valid. This input is an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1 + (2 * [3]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All the closers had a matching opener, but not all the openers were closed. This means that if we survive the iteration, we also have to check if our final stack is &lt;em&gt;empty&lt;/em&gt;. If it is, all openers were closed, and the input was valid. If it is not, the input was not valid.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-implementation"&gt;
  &lt;/a&gt;
  The Implementation
&lt;/h2&gt;

&lt;p&gt;Good, we have a plan, so now we have to translate it into Elixir.&lt;br&gt;
For starters, I'm creating a module &lt;code&gt;Parens&lt;/code&gt; with a function &lt;code&gt;check&lt;/code&gt; that will receive as input a string.&lt;br&gt;
This function &lt;code&gt;check&lt;/code&gt; will have to iterate over the string, so we can use the &lt;code&gt;String&lt;/code&gt; module's &lt;code&gt;split/2&lt;/code&gt; function. So we have our first piece of code like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;defmodule Parens &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; check&lt;span class="p"&gt;(&lt;/span&gt;expression&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    expression
      &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; String&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I'm using the pipe operator &lt;code&gt;|&amp;gt;&lt;/code&gt; here, meaning that whatever comes before it, is going to be the first argument of whatever comes after it. In this case, &lt;code&gt;expression&lt;/code&gt; is going to be the first argument of &lt;code&gt;String.split&lt;/code&gt;.&lt;br&gt;
The second argument is an empty string so we can split the expression at every character. The result of this is a list, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"a + b * (c / d)" |&amp;gt; String.split("")
# ["", "a", " ", "+", " ", "b", " ", "*", " ", "(", "c", " ", "/", " ", "d", ")", ""]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On our theoretical solution, every character but openers/closers were to be ignored, so we can apply a &lt;strong&gt;filter&lt;/strong&gt; in this resulting list. To do that, we can use &lt;code&gt;Enum.filter/2&lt;/code&gt;, which receives two arguments.&lt;br&gt;
The first one is something that "is enumerable", which means that this something must implement the Enum protocol.&lt;br&gt;
Luckly, lists do that, so we can pass our resulting list as the first argument to our filter.&lt;br&gt;
The second argument is a &lt;em&gt;function&lt;/em&gt; that receives an element of our list and then decide if it or shouldn't be in the filtered result. More precisely, if this &lt;em&gt;function&lt;/em&gt; returns a falsy value (&lt;code&gt;false&lt;/code&gt; or &lt;code&gt;nil&lt;/code&gt;), then the element will not be in the resulting filtered list. If it returns a truthy value (anything else), it is going to be in the filtered result.&lt;br&gt;
In our case, this function will verify if each element of our list is a parens/brackets/braces and keep it if it is, removing it otherwise. One way to do that is like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;fn &lt;span class="k"&gt;x&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;x&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"{"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"["&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"("&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;")"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; end
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This anonymous function will receive something (&lt;em&gt;x&lt;/em&gt;) and see if it belongs to that list, which happens to be a list with only our parens/brackets/braces.&lt;br&gt;
We could also use the capture notation, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&amp;amp;&lt;span class="p"&gt;(&lt;/span&gt;&amp;amp;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"{"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"["&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"("&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;")"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The capture notation is similar, but instead of declaring &lt;em&gt;x&lt;/em&gt;, we just use &amp;amp;1, &amp;amp;2, &amp;amp;3... for all of our arguments.&lt;/p&gt;

&lt;p&gt;Good, so our code right now looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;defmodule Parens &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; check&lt;span class="p"&gt;(&lt;/span&gt;expression&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    expression
      &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; String&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; Enum&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&amp;amp;&lt;span class="p"&gt;(&lt;/span&gt;&amp;amp;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"{"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"["&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"("&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;")"&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The next step is to iterate over our resulting list and use our "stack strategy". To do that, I decided to create a &lt;strong&gt;private function&lt;/strong&gt; called &lt;code&gt;iterate&lt;/code&gt;, where I'll recursively walk over our elements, passing the stack around, until we checked all of our elements. Since I'll need the stack, this function will have an arity of 2, which means it will have 2 arguments.&lt;br&gt;
The first thing I do when I'm thinking about recursion it to write the stop condition. In this case, it should stop once our list of characters is empty. I'll make use of the wonderful &lt;strong&gt;pattern matching&lt;/strong&gt; functionality to do that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;defp iterate([], stack), do: stack
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This means that this function will only execute when the first element is an empty list and the second element is whatever it arrives here.&lt;br&gt;
In this case, this function will do nothing and just return the stack, so we can later verify if it is empty or not.&lt;/p&gt;

&lt;p&gt;A very important thing to note here is that we also have to pass a &lt;code&gt;stack&lt;/code&gt; when we first call the iterate function. Our stack will start empty, so our pipeline will be like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; check&lt;span class="p"&gt;(&lt;/span&gt;expression&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  expression
    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; String&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; Enum&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&amp;amp;&lt;span class="p"&gt;(&lt;/span&gt;&amp;amp;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"{"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"["&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"("&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;")"&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; iterate&lt;span class="p"&gt;([])&lt;/span&gt;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Note: We could also use a default value, but I'll keep it like this.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now the hard part. After writing a stop condition to our recursion, we have to write the recursive step (or steps).&lt;/p&gt;

&lt;p&gt;Let's check our plan again. We have to look at each element, and if it is an opener, we put it in the stack and go on. Let's do this part first.&lt;/p&gt;

&lt;p&gt;I love pattern matching, so I'll be using it here again. And to further help us, I'll also use &lt;strong&gt;guards&lt;/strong&gt; to decide if the function will be executed or not:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;defp iterate&lt;span class="p"&gt;([&lt;/span&gt;head &lt;span class="p"&gt;|&lt;/span&gt; tail&lt;span class="p"&gt;],&lt;/span&gt; stack&lt;span class="p"&gt;)&lt;/span&gt; when head &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"{"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"["&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"("&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This function will only be executed if the variable &lt;code&gt;head&lt;/code&gt; belongs to that list of openers. But where is this variable coming from?&lt;br&gt;
We are pattern matching the first argument with &lt;code&gt;[head | tail]&lt;/code&gt;, so this function will need for the first argument to be a list with a first element. This first element will be bound to &lt;code&gt;head&lt;/code&gt;. The rest of the list will be bound to &lt;code&gt;tail&lt;/code&gt;. If you are in doubt, open the interactive elixir shell in your terminal (write iex and press enter) and try this code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;head &lt;span class="p"&gt;|&lt;/span&gt; tail&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
head
#&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
tail
#&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;head2 &lt;span class="p"&gt;|&lt;/span&gt; tail2&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
head2
#&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
tail2
#&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;head3 &lt;span class="p"&gt;|&lt;/span&gt; tail3&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
# Will raise &lt;span class="k"&gt;a&lt;/span&gt; matching error&lt;span class="p"&gt;!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The head and tail are important concepts. The head is the first element of a list, and the tail &lt;strong&gt;is the list itself&lt;/strong&gt;, but &lt;strong&gt;without the first element&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;Okay, back to our function. What will it do if the character is an opener? It should push it to the stack and continue iterating. We can do that simply by calling &lt;code&gt;iterate&lt;/code&gt; again with the right arguments.&lt;br&gt;
Since we already checked the first element, we can pass the list without the first element. That is precisely what &lt;code&gt;tail&lt;/code&gt; is! Good, but how can we &lt;strong&gt;push&lt;/strong&gt; the element to the stack?&lt;br&gt;
Elixir offers a good way to put an item in a list, and it is simply like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;new_element &lt;span class="p"&gt;|&lt;/span&gt; stack&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is a list which its head is &lt;code&gt;new_element&lt;/code&gt;, and its tail is the &lt;code&gt;stack&lt;/code&gt;. You can always go to iex and make some experiments:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
#&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So our function looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;defp iterate&lt;span class="p"&gt;([&lt;/span&gt;head &lt;span class="p"&gt;|&lt;/span&gt; tail&lt;span class="p"&gt;],&lt;/span&gt; stack&lt;span class="p"&gt;)&lt;/span&gt; when head &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"{"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"["&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"("&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; iterate&lt;span class="p"&gt;(&lt;/span&gt;tail&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;head &lt;span class="p"&gt;|&lt;/span&gt; stack&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When it is an opener, we simply call iterate with &lt;code&gt;tail&lt;/code&gt; and pass the stack with a newly pushed &lt;code&gt;head&lt;/code&gt; item.&lt;/p&gt;

&lt;p&gt;Good! Now that we have this part done, let's check the plan again.&lt;/p&gt;

&lt;p&gt;We already know how to stop the recursion;&lt;br&gt;
We already took care of the "ignore if not opener/closer" issue;&lt;br&gt;
We already know how to push an opener to the stack and continue;&lt;/p&gt;

&lt;p&gt;We now have to do something when the element is a "closer". When that happens, the idea was to look at the last added item of our stack, which happens to be the head of &lt;code&gt;stack&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This part of the code was heavily refactored, but I'll tell how I did it first time. For each possible closer, which are &lt;code&gt;}&lt;/code&gt;, &lt;code&gt;]&lt;/code&gt; and &lt;code&gt;)&lt;/code&gt;, I made its single pattern matched function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;defp iterate&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s2"&gt;"}"&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; tail&lt;span class="p"&gt;],&lt;/span&gt; stack&lt;span class="p"&gt;)&lt;/span&gt;
defp iterate&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s2"&gt;"]"&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; tail&lt;span class="p"&gt;],&lt;/span&gt; stack&lt;span class="p"&gt;)&lt;/span&gt;
defp iterate&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s2"&gt;")"&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; tail&lt;span class="p"&gt;],&lt;/span&gt; stack&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And for each one of those, I made a simple if/else statement:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;defp iterate&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s2"&gt;"}"&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; tail&lt;span class="p"&gt;],&lt;/span&gt; stack&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; hd&lt;span class="p"&gt;(&lt;/span&gt;stack&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"{"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    iterate&lt;span class="p"&gt;(&lt;/span&gt;tail&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;tl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;stack&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt;
    false
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First of all, I used the functions &lt;code&gt;hd&lt;/code&gt; and &lt;code&gt;tl&lt;/code&gt;, which returns the &lt;strong&gt;head&lt;/strong&gt; and the &lt;strong&gt;tail&lt;/strong&gt; of a list, respectively. It would be the same as this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;defp iterate&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s2"&gt;"}"&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; tail&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;stack_head &lt;span class="p"&gt;|&lt;/span&gt; stack_tail&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; stack_head &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"{"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    iterate&lt;span class="p"&gt;(&lt;/span&gt;tail&lt;span class="p"&gt;,&lt;/span&gt; stack_tail&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt;
    false
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, since this function will only execute if the element is exactly &lt;code&gt;}&lt;/code&gt;, I'm verifying if the last added item in the stack (its head) is &lt;code&gt;{&lt;/code&gt;, which would be a match.&lt;br&gt;
If it is, we have to pop it. The "popped" version of the stack is simply its tail, so that's why we don't pass the stack to the next iteration, but rather the &lt;code&gt;stack_tail&lt;/code&gt;.&lt;br&gt;
If it doesn't match, we know that the input string is not valid, so I'm returning a &lt;code&gt;false&lt;/code&gt; here.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;else&lt;/code&gt; part is not really needed, because if the condition to go inside the "if" parte is not true, this would return &lt;code&gt;nil&lt;/code&gt;, but I'll keep it with this &lt;code&gt;else&lt;/code&gt; for now. We can refactor later.&lt;/p&gt;

&lt;p&gt;This looks like a valid "alpha version" of our &lt;code&gt;iterate&lt;/code&gt; function. What is missing is verifying if the stack is empty or not after the stop condition. A way to do that is to add a comparison with &lt;code&gt;[]&lt;/code&gt; in the stop condition or in the pipeline  of our &lt;code&gt;check&lt;/code&gt; function. I'll show the latter first because I can talk briefly about the &lt;code&gt;Kernel&lt;/code&gt; module.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Kernel&lt;/code&gt; module has all the functions we can use "natively", without calling a module. So if you want so sum two integers, you can do both:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;+&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;
#&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;
Kernel&lt;span class="p"&gt;.+(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
#&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;==&lt;/code&gt; comparison is also part of the &lt;code&gt;Kernel&lt;/code&gt; module, so we can do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;  &lt;span class="k"&gt;def&lt;/span&gt; check&lt;span class="p"&gt;(&lt;/span&gt;expression&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    expression
      &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; String&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; Enum&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&amp;amp;&lt;span class="p"&gt;(&lt;/span&gt;&amp;amp;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"{"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"["&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"("&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;")"&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
      &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; iterate&lt;span class="p"&gt;([])&lt;/span&gt;
      &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; Kernel&lt;span class="p"&gt;.==([])&lt;/span&gt;
  end
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will take whatever returns from the &lt;code&gt;iterate&lt;/code&gt; call and use it as the first argument of &lt;code&gt;Kernel.==&lt;/code&gt;. The second argument is &lt;code&gt;[]&lt;/code&gt;, so we are going to return the comparison of the result of &lt;code&gt;iterate&lt;/code&gt; with &lt;code&gt;[]&lt;/code&gt;.&lt;br&gt;
If the input is invalid, the &lt;code&gt;iterate&lt;/code&gt; may return &lt;code&gt;false&lt;/code&gt;, and then the comparison with &lt;code&gt;[]&lt;/code&gt; will also be false.&lt;br&gt;
Another possibility is that the &lt;code&gt;iterate&lt;/code&gt; will return a not empty stack. Then, the comparison with &lt;code&gt;[]&lt;/code&gt; will be false as well.&lt;br&gt;
This actually solves it, but for me it is really ugly.&lt;/p&gt;

&lt;p&gt;For starters, sometimes &lt;code&gt;iterate&lt;/code&gt; returns a boolean, and sometimes it returns a list, which could be empty or not.&lt;br&gt;
Now that I wrote about &lt;code&gt;Kernel&lt;/code&gt; a little bit, I think we should not use it in this case (:&lt;br&gt;
To avoid it, we can put this comparison in our stop condition, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;defp iterate&lt;span class="p"&gt;([],&lt;/span&gt; stack&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; stack &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another way is to pattern match the second argument as well!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;defp iterate&lt;span class="p"&gt;([],&lt;/span&gt; &lt;span class="p"&gt;[]),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; true
defp iterate&lt;span class="p"&gt;([],&lt;/span&gt; _stack&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; false
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the first argument is an empty list and the second agument is also an empty list, we return &lt;code&gt;true&lt;/code&gt;.&lt;br&gt;
If the first argument is an empty list and the second argument is anything (the _ denotes that this variable will not be used), we return false.&lt;br&gt;
&lt;em&gt;Note: We could simply use _ instead of _stack, but I think it is nice to put some name to it in the name of readability, since it is not obvious what the second argument could be&lt;/em&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#okay-so-this-apparently-works-right"&gt;
  &lt;/a&gt;
  Okay, so this apparently works, right?
&lt;/h4&gt;

&lt;p&gt;If we try to run our code now, we are going to sometimes get an error!&lt;br&gt;
To test it, we can use our module inside iex. To do that, save the code in a file, for example, &lt;code&gt;parens.ex&lt;/code&gt;. Now, run &lt;code&gt;iex parens.ex&lt;/code&gt;. You'll be able to use the &lt;code&gt;Parens&lt;/code&gt; module we just created inside iex!&lt;br&gt;
If you try to check a string where a closer would be found before any opener, the code would try to get the head of an empty stack, which raises an error. You can verify it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;Parens&lt;span class="p"&gt;.&lt;/span&gt;check&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"a}"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
#&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; Raises error&lt;span class="p"&gt;!&lt;/span&gt;

Parens&lt;span class="p"&gt;.&lt;/span&gt;check&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"(a}"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
#&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; false
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can fix this by checking if the stack is empty before trying to get its head.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#or"&gt;
  &lt;/a&gt;
  &lt;em&gt;Or...&lt;/em&gt;
&lt;/h4&gt;

&lt;p&gt;We could simply pattern match the second argument to empty list when we have a closer, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;defp iterate&lt;span class="p"&gt;([&lt;/span&gt;head &lt;span class="p"&gt;|&lt;/span&gt; _&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt; when head &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;")"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; false
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The guard will ensure that &lt;code&gt;head&lt;/code&gt; is a closer, and when the stack is an empty list, we just return &lt;code&gt;false&lt;/code&gt; before trying to get the head of an empty list (which raises an error).&lt;/p&gt;

&lt;p&gt;The first version of our solution could then be this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;defmodule Parens &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; check&lt;span class="p"&gt;(&lt;/span&gt;expression&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    expression
      &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; String&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; Enum&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&amp;amp;&lt;span class="p"&gt;(&lt;/span&gt;&amp;amp;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"{"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"["&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"("&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;")"&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
      &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; iterate&lt;span class="p"&gt;([])&lt;/span&gt;
  end

  defp iterate&lt;span class="p"&gt;([],&lt;/span&gt; stack&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; stack &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

  defp iterate&lt;span class="p"&gt;([&lt;/span&gt;head &lt;span class="p"&gt;|&lt;/span&gt; tail&lt;span class="p"&gt;],&lt;/span&gt; stack&lt;span class="p"&gt;)&lt;/span&gt; when head &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"{"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"["&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"("&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; iterate&lt;span class="p"&gt;(&lt;/span&gt;tail&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;head &lt;span class="p"&gt;|&lt;/span&gt; stack&lt;span class="p"&gt;])&lt;/span&gt;

  defp iterate&lt;span class="p"&gt;([&lt;/span&gt;head &lt;span class="p"&gt;|&lt;/span&gt; _&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt; when head &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;")"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; false

  defp iterate&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s2"&gt;"}"&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; tail&lt;span class="p"&gt;],&lt;/span&gt; stack&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; hd&lt;span class="p"&gt;(&lt;/span&gt;stack&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"{"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      iterate&lt;span class="p"&gt;(&lt;/span&gt;tail&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;tl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;stack&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
     false
    end
  end

  defp iterate&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s2"&gt;"]"&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; tail&lt;span class="p"&gt;],&lt;/span&gt; stack&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; hd&lt;span class="p"&gt;(&lt;/span&gt;stack&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"["&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      iterate&lt;span class="p"&gt;(&lt;/span&gt;tail&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;tl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;stack&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
     false
    end
  end

  defp iterate&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s2"&gt;")"&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; tail&lt;span class="p"&gt;],&lt;/span&gt; stack&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; hd&lt;span class="p"&gt;(&lt;/span&gt;stack&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"("&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      iterate&lt;span class="p"&gt;(&lt;/span&gt;tail&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;tl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;stack&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
     false
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Nice!&lt;/strong&gt; So now our code actually works!&lt;br&gt;
But it doesn't really give me good vibes...&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#refactor"&gt;
  &lt;/a&gt;
  Refactor!
&lt;/h2&gt;

&lt;p&gt;First, we are using lists like &lt;code&gt;["{", "[", "("]&lt;/code&gt;, &lt;code&gt;["{", "[", "("]&lt;/code&gt; and &lt;code&gt;["{", "[", "(", "}", "]", ")"]&lt;/code&gt;, which could be extracted to &lt;strong&gt;module attributes&lt;/strong&gt;.&lt;br&gt;
Module attributes are values that can be used by any method in a module. To define them, we can write &lt;code&gt;@attribute_name&lt;/code&gt; and then its value. We can do it like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;defmodule Parens &lt;span class="k"&gt;do&lt;/span&gt;
  @opener &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"{"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"["&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"("&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  @closer &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;")"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is a nice little addition, so now we can rewrite our guards and filter like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;Enum&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&amp;amp;&lt;span class="p"&gt;(&lt;/span&gt;&amp;amp;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"{"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"["&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"("&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;")"&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
Enum&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&amp;amp;&lt;span class="p"&gt;(&lt;/span&gt;&amp;amp;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; @opener &lt;span class="p"&gt;||&lt;/span&gt; &amp;amp;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; @closer&lt;span class="p"&gt;))&lt;/span&gt;

defp iterate&lt;span class="p"&gt;([&lt;/span&gt;head &lt;span class="p"&gt;|&lt;/span&gt; tail&lt;span class="p"&gt;],&lt;/span&gt; stack&lt;span class="p"&gt;)&lt;/span&gt; when head &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"{"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"["&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"("&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
defp iterate&lt;span class="p"&gt;([&lt;/span&gt;head &lt;span class="p"&gt;|&lt;/span&gt; tail&lt;span class="p"&gt;],&lt;/span&gt; stack&lt;span class="p"&gt;)&lt;/span&gt; when head &lt;span class="k"&gt;in&lt;/span&gt; @opener&lt;span class="p"&gt;,&lt;/span&gt;

defp iterate&lt;span class="p"&gt;([&lt;/span&gt;head &lt;span class="p"&gt;|&lt;/span&gt; _&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt; when head &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;")"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; false
defp iterate&lt;span class="p"&gt;([&lt;/span&gt;head &lt;span class="p"&gt;|&lt;/span&gt; _&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt; when head &lt;span class="k"&gt;in&lt;/span&gt; @closer&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; false
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But we still have 3 big functions that are basically the same, which are the ones that decide what to do when the element we are checking is a closer character.&lt;br&gt;
I'll write what I did and then explain it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;defmodule Parens &lt;span class="k"&gt;do&lt;/span&gt;
  @pairs %&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"{"&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"["&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"("&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;")"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

  defp iterate&lt;span class="p"&gt;([&lt;/span&gt;head &lt;span class="p"&gt;|&lt;/span&gt; tail&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;stack_head &lt;span class="p"&gt;|&lt;/span&gt; stack_tail&lt;span class="p"&gt;])&lt;/span&gt; when head &lt;span class="k"&gt;in&lt;/span&gt; @closer&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; @pairs&lt;span class="p"&gt;[&lt;/span&gt;stack_head&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; head &amp;amp;&amp;amp; iterate&lt;span class="p"&gt;(&lt;/span&gt;tail&lt;span class="p"&gt;,&lt;/span&gt; stack_tail&lt;span class="p"&gt;)&lt;/span&gt;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So first, I created a &lt;code&gt;@pairs&lt;/code&gt; module attribute which is a &lt;strong&gt;map&lt;/strong&gt;. Each key of the map is an opener character and it maps to a closer character (maps are like hashes and dictionaries, if you are coming from ruby or python).&lt;br&gt;
Then, I made a &lt;code&gt;iterate/2&lt;/code&gt; function that has a guard. This guard will ensure that &lt;code&gt;head&lt;/code&gt; variable (the first element of our list) is a closer (so it is one of &lt;code&gt;)&lt;/code&gt;, &lt;code&gt;]&lt;/code&gt; or &lt;code&gt;}&lt;/code&gt;).&lt;br&gt;
I also used a &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; boolean operation here:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;@pairs&lt;span class="p"&gt;[&lt;/span&gt;stack_head&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; head &amp;amp;&amp;amp; iterate&lt;span class="p"&gt;(&lt;/span&gt;tail&lt;span class="p"&gt;,&lt;/span&gt; stack_tail&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the left side is a &lt;strong&gt;falsy&lt;/strong&gt; value, then this value is returned and the right side is not executed (which stops our recursion).&lt;br&gt;
If the left side is &lt;strong&gt;truthy&lt;/strong&gt;, then whatever is at the right side is returned. In this case, the right side is a function call, continuing the recursion.&lt;/p&gt;

&lt;p&gt;Now I'll look at &lt;code&gt;@pairs[stack_head]&lt;/code&gt;. Remember that &lt;code&gt;@pairs&lt;/code&gt; is a map, so &lt;code&gt;@pairs["{"]&lt;/code&gt;, for example, returns &lt;code&gt;"}"&lt;/code&gt;.&lt;br&gt;
If whatever is the head of our stack is an opener, then it maps to some closer (&lt;code&gt;@pairs[stack_head]&lt;/code&gt;, then, is some closer). If this closer equals to &lt;code&gt;head&lt;/code&gt; (the element we are checking itself), then the comparison returns &lt;code&gt;true&lt;/code&gt;, which will then return the right side of the &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;, continuing our recursion!&lt;br&gt;
If not, then the comparison will return &lt;code&gt;false&lt;/code&gt;, and not execute the right side of the &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;.&lt;br&gt;
So this is enough to check if the parens are matching and stop the recursion otherwise.&lt;/p&gt;

&lt;p&gt;So our second version of the program is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;defmodule Parens &lt;span class="k"&gt;do&lt;/span&gt;
  @pairs %&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"{"&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"["&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"("&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;")"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  @opener &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"{"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"["&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"("&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  @closer &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;")"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; check&lt;span class="p"&gt;(&lt;/span&gt;expression&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    expression
      &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; String&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; Enum&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&amp;amp;&lt;span class="p"&gt;(&lt;/span&gt;&amp;amp;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; @opener &lt;span class="p"&gt;||&lt;/span&gt; &amp;amp;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; @closer&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; iterate&lt;span class="p"&gt;([])&lt;/span&gt;
  end

  defp iterate&lt;span class="p"&gt;([],&lt;/span&gt; &lt;span class="p"&gt;[]),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; true
  defp iterate&lt;span class="p"&gt;([],&lt;/span&gt; _stack&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; false

  defp iterate&lt;span class="p"&gt;([&lt;/span&gt;head &lt;span class="p"&gt;|&lt;/span&gt; tail&lt;span class="p"&gt;],&lt;/span&gt; stack&lt;span class="p"&gt;)&lt;/span&gt; when head &lt;span class="k"&gt;in&lt;/span&gt; @opener&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; iterate&lt;span class="p"&gt;(&lt;/span&gt;tail&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;head &lt;span class="p"&gt;|&lt;/span&gt; stack&lt;span class="p"&gt;])&lt;/span&gt;

  defp iterate&lt;span class="p"&gt;([&lt;/span&gt;head &lt;span class="p"&gt;|&lt;/span&gt; _&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt; when head &lt;span class="k"&gt;in&lt;/span&gt; @closer&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; false

  defp iterate&lt;span class="p"&gt;([&lt;/span&gt;head &lt;span class="p"&gt;|&lt;/span&gt; tail&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;stack_head &lt;span class="p"&gt;|&lt;/span&gt; stack_tail&lt;span class="p"&gt;])&lt;/span&gt; when head &lt;span class="k"&gt;in&lt;/span&gt; @closer&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; @pairs&lt;span class="p"&gt;[&lt;/span&gt;stack_head&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; head &amp;amp;&amp;amp; iterate&lt;span class="p"&gt;(&lt;/span&gt;tail&lt;span class="p"&gt;,&lt;/span&gt; stack_tail&lt;span class="p"&gt;)&lt;/span&gt;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#thats-it-for-today"&gt;
  &lt;/a&gt;
  That's it for today
&lt;/h4&gt;

&lt;p&gt;Thanks for reading this. I'm enjoying Elixir very much. Pattern matching is quite powerful and fun.&lt;br&gt;
Please correct any mistakes I might have made (:&lt;br&gt;
I hope you learned something today, and have a good day.&lt;/p&gt;

</description>
      <category>elixir</category>
      <category>algorithms</category>
      <category>functional</category>
    </item>
    <item>
      <title>Cloudera SQL Stream Builder (SSB) - Update Your FLaNK Stack</title>
      <author>Timothy Spann</author>
      <pubDate>Wed, 07 Apr 2021 19:10:00 +0000</pubDate>
      <link>https://dev.to/tspannhw/cloudera-sql-stream-builder-ssb-update-your-flank-stack-2393</link>
      <guid>https://dev.to/tspannhw/cloudera-sql-stream-builder-ssb-update-your-flank-stack-2393</guid>
      <description>&lt;h1&gt;
  &lt;a href="#cloudera-sql-stream-builder-ssb-released"&gt;
  &lt;/a&gt;
  Cloudera SQL Stream Builder (SSB) Released!
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://1.bp.blogspot.com/-Am_V_RWSuiI/YG3901XlOGI/AAAAAAAAc9k/RmmTN_rrFeQa8ib5z1QXPGcE_C83K6ReQCLcBGAsYHQ/s2048/showtables.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p0jwwSqk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-Am_V_RWSuiI/YG3901XlOGI/AAAAAAAAc9k/RmmTN_rrFeQa8ib5z1QXPGcE_C83K6ReQCLcBGAsYHQ/w640-h374/showtables.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CSA 1.3.0 is now available with *&lt;em&gt;Apache Flink 1.12 and SQL Stream Builder!   *&lt;/em&gt; Check out this white paper for some &lt;a href="https://www.cloudera.com/campaign/modern-stream-processing-using-streaming-sql.html?internal_Democra=SEC&amp;amp;internal_campaign=FY22-Q1_CC_AMER_Streaming%20SQL_WP-HP-_2021-03-15&amp;amp;cid=7012H000001hNS5QAM&amp;amp;internal_link=h01"&gt;details&lt;/a&gt;.    You can get full details on the Stream Processing and Analytics available from Cloudera &lt;a href="https://www.cloudera.com/products/cdf/stream-processing-and-analytics.html"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.cloudera.com/csa/1.3.0/ssb-overview/images/csa-ssb-streaming-sql.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZHxEmjS8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.cloudera.com/csa/1.3.0/ssb-overview/images/csa-ssb-streaming-sql.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.cloudera.com/csa/1.3.0/ssb-overview/images/csa-ssb-architecture.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z9zexxOX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.cloudera.com/csa/1.3.0/ssb-overview/images/csa-ssb-architecture.png" alt=""&gt;&lt;/a&gt;&lt;br&gt;
This is awesome way to query Kafka topics with continuous SQL that is deployed to scalable Flink nodes in YARN or K8.   We can also easily define functions in JavaScript to enhance, enrich and augment our data streams.   No Java to write, no heavy deploys or build scripts, we can build, test and deploy these advanced streaming applications all from your secure browser interface.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.cloudera.com/csa/1.3.0/ssb-using-ssb/topics/csa-ssb-using-virtual-tables.html"&gt;https://docs.cloudera.com/csa/1.3.0/ssb-using-ssb/topics/csa-ssb-using-virtual-tables.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.cloudera.com/csa/1.3.0/ssb-overview/topics/csa-ssb-intro.html"&gt;https://docs.cloudera.com/csa/1.3.0/ssb-overview/topics/csa-ssb-intro.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.cloudera.com/csa/1.3.0/ssb-overview/topics/csa-ssb-key-features.html"&gt;https://docs.cloudera.com/csa/1.3.0/ssb-overview/topics/csa-ssb-key-features.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.cloudera.com/csa/1.3.0/ssb-overview/topics/csa-ssb-architecture.html"&gt;https://docs.cloudera.com/csa/1.3.0/ssb-overview/topics/csa-ssb-architecture.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.cloudera.com/csa/1.3.0/ssb-quickstart/topics/csa-ssb-quickstart.html"&gt;https://docs.cloudera.com/csa/1.3.0/ssb-quickstart/topics/csa-ssb-quickstart.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.cloudera.com/csa/1.3.0/ssb-using-ssb/topics/csa-ssb-adding-kafka-data-source.html"&gt;https://docs.cloudera.com/csa/1.3.0/ssb-using-ssb/topics/csa-ssb-adding-kafka-data-source.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.cloudera.com/csa/1.3.0/ssb-using-ssb/topics/csa-ssb-using-virtual-tables.html"&gt;https://docs.cloudera.com/csa/1.3.0/ssb-using-ssb/topics/csa-ssb-using-virtual-tables.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.cloudera.com/csa/1.3.0/ssb-using-ssb/topics/csa-ssb-creating-virtual-kafka-source.html"&gt;https://docs.cloudera.com/csa/1.3.0/ssb-using-ssb/topics/csa-ssb-creating-virtual-kafka-source.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.cloudera.com/csa/1.3.0/ssb-using-ssb/topics/csa-ssb-creating-virtual-kafka-sink.html"&gt;https://docs.cloudera.com/csa/1.3.0/ssb-using-ssb/topics/csa-ssb-creating-virtual-kafka-sink.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.cloudera.com/csa/1.3.0/ssb-using-ssb/topics/csa-ssb-creating-virtual-webhook-sink.html"&gt;https://docs.cloudera.com/csa/1.3.0/ssb-using-ssb/topics/csa-ssb-creating-virtual-webhook-sink.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.cloudera.com/csa/1.3.0/ssb-using-ssb/topics/csa-ssb-managing-time.html"&gt;https://docs.cloudera.com/csa/1.3.0/ssb-using-ssb/topics/csa-ssb-managing-time.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.cloudera.com/csa/1.3.0/ssb-job-lifecycle/topics/csa-ssb-running-job-process.html"&gt;https://docs.cloudera.com/csa/1.3.0/ssb-job-lifecycle/topics/csa-ssb-running-job-process.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.cloudera.com/csa/1.3.0/ssb-job-lifecycle/topics/csa-ssb-job-management.html"&gt;https://docs.cloudera.com/csa/1.3.0/ssb-job-lifecycle/topics/csa-ssb-job-management.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.cloudera.com/csa/1.3.0/ssb-job-lifecycle/topics/csa-ssb-sampling-data.html"&gt;https://docs.cloudera.com/csa/1.3.0/ssb-job-lifecycle/topics/csa-ssb-sampling-data.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.cloudera.com/csa/1.3.0/ssb-job-lifecycle/topics/csa-ssb-advanced-job-management.html"&gt;https://docs.cloudera.com/csa/1.3.0/ssb-job-lifecycle/topics/csa-ssb-advanced-job-management.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.cloudera.com/csa/1.3.0/ssb-using-mv/topics/csa-ssb-using-mvs.html"&gt;https://docs.cloudera.com/csa/1.3.0/ssb-using-mv/topics/csa-ssb-using-mvs.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.cloudera.com/content/www/en-us/about/events/webinars/cloudera-sqlstream-builder.html"&gt;https://www.cloudera.com/content/www/en-us/about/events/webinars/cloudera-sqlstream-builder.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.cloudera.com/about/events/webinars/demo-jam-live-expands-nifi-kafka-flink.html"&gt;https://www.cloudera.com/about/events/webinars/demo-jam-live-expands-nifi-kafka-flink.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.cloudera.com/about/events/virtual-events/cloudera-emerging-technology-day.html"&gt;https://www.cloudera.com/about/events/virtual-events/cloudera-emerging-technology-day.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://1.bp.blogspot.com/-gZL92lVlypQ/YG30Ah6yCFI/AAAAAAAAc8o/o4vldhi__6s-uvYjTI_JhWdHPZxFLObTwCLcBGAsYHQ/s1200/PhotoFunia-1614701860.jpg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CG2u7eEU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-gZL92lVlypQ/YG30Ah6yCFI/AAAAAAAAc8o/o4vldhi__6s-uvYjTI_JhWdHPZxFLObTwCLcBGAsYHQ/w640-h458/PhotoFunia-1614701860.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example-queries"&gt;
  &lt;/a&gt;
  Example Queries:
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;SELECT&lt;/strong&gt; location, max(temp_f) as max_temp_f, avg(temp_f) as avg_temp_f,&lt;br&gt;&lt;br&gt;
                 min(temp_f) as min_temp_f&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;FROM&lt;/strong&gt; weather2 &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;GROUP BY&lt;/strong&gt; location&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SELECT&lt;/strong&gt;  &lt;strong&gt;HOP_END&lt;/strong&gt; (eventTimestamp, INTERVAL '1' SECOND, INTERVAL '30' SECOND) as        windowEnd,&lt;br&gt;&lt;br&gt;
       count(&lt;code&gt;close&lt;/code&gt;) as closeCount,&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   sum(cast(`close` as float)) as closeSum, avg(cast(`close` as float)) as closeAverage,   
   min(`close`) as closeMin,

   max(`close`) as closeMax,

   sum(case when `close` &amp;gt; 14 then 1 else 0 end) as stockGreaterThan14 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;FROM&lt;/strong&gt; stocksraw&lt;br&gt;&lt;br&gt;
&lt;strong&gt;WHERE&lt;/strong&gt; symbol = 'CLDR'&lt;br&gt;&lt;br&gt;
&lt;strong&gt;GROUP BY&lt;/strong&gt;  &lt;strong&gt;HOP&lt;/strong&gt; (eventTimestamp, INTERVAL '1' SECOND, INTERVAL '30' SECOND)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SELECT&lt;/strong&gt; scada2.uuid, scada2.systemtime, scada2.temperaturef, scada2.pressure, scada2.humidity, scada2.lux, scada2.proximity, &lt;/p&gt;

&lt;p&gt;scada2.oxidising,scada2.reducing , scada2.nh3, scada2.gasko,energy2.&lt;code&gt;current&lt;/code&gt;,                   &lt;/p&gt;

&lt;p&gt;energy2.voltage,energy2.&lt;code&gt;power&lt;/code&gt;,energy2.&lt;code&gt;total&lt;/code&gt;,energy2.fanstatus&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;FROM&lt;/strong&gt; energy2 &lt;strong&gt;JOIN&lt;/strong&gt; scada2 &lt;strong&gt;ON&lt;/strong&gt; energy2.systemtime = scada2.systemtime&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SELECT&lt;/strong&gt; symbol, uuid, ts, dt, &lt;code&gt;open&lt;/code&gt;, &lt;code&gt;close&lt;/code&gt;, high, volume, &lt;code&gt;low&lt;/code&gt;, &lt;code&gt;datetime&lt;/code&gt;, 'new-high' message, &lt;/p&gt;

&lt;p&gt;'nh' alertcode, CAST(CURRENT_TIMESTAMP AS BIGINT) alerttime &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;FROM&lt;/strong&gt; stocksraw st &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;WHERE&lt;/strong&gt; symbol is not null &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AND&lt;/strong&gt; symbol &amp;lt;&amp;gt; 'null' &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AND trim&lt;/strong&gt; (symbol) &amp;lt;&amp;gt; '' and &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CAST&lt;/strong&gt; (close as &lt;strong&gt;DOUBLE&lt;/strong&gt; ) &amp;gt; &lt;/p&gt;

&lt;p&gt;( &lt;strong&gt;SELECT&lt;/strong&gt;  &lt;strong&gt;MAX&lt;/strong&gt; (CAST(close as DOUBLE))&lt;br&gt;&lt;br&gt;
&lt;strong&gt;FROM&lt;/strong&gt; stocksraw s &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;WHERE&lt;/strong&gt; s.symbol = st.symbol);&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SELECT&lt;/strong&gt;   * &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;FROM&lt;/strong&gt; statusevents&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;WHERE&lt;/strong&gt; lower(description) like '%fail%'&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SELECT&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;sensor_id as device_id,&lt;/p&gt;

&lt;p&gt;HOP_END(sensor_ts, INTERVAL '1' SECOND, INTERVAL '30' SECOND) as windowEnd,&lt;/p&gt;

&lt;p&gt;count(*) as sensorCount,&lt;/p&gt;

&lt;p&gt;sum(sensor_6) as sensorSum,&lt;/p&gt;

&lt;p&gt;avg(cast(sensor_6 as float)) as sensorAverage,&lt;/p&gt;

&lt;p&gt;min(sensor_6) as sensorMin,&lt;/p&gt;

&lt;p&gt;max(sensor_6) as sensorMax,&lt;/p&gt;

&lt;p&gt;sum(case when sensor_6 &amp;gt; 70 then 1 else 0 end) as sensorGreaterThan60&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;FROM&lt;/strong&gt; iot_enriched_source&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;GROUP BY&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;sensor_id,&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HOP&lt;/strong&gt; (sensor_ts, INTERVAL '1' SECOND, INTERVAL '30' SECOND)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SELECT&lt;/strong&gt; title, description, pubDate, &lt;code&gt;point&lt;/code&gt;, &lt;code&gt;uuid&lt;/code&gt;, &lt;code&gt;ts&lt;/code&gt;, eventTimestamp&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;FROM&lt;/strong&gt; transcomevents&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#source-code"&gt;
  &lt;/a&gt;
  Source Code:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/tspannhw/CloudDemo2021"&gt;https://github.com/tspannhw/CloudDemo2021&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tspannhw/StreamingSQLDemos"&gt;https://github.com/tspannhw/StreamingSQLDemos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tspannhw/SmartTransit"&gt;https://github.com/tspannhw/SmartTransit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#example-sql-stream-builder-run"&gt;
  &lt;/a&gt;
  Example SQL Stream Builder Run
&lt;/h2&gt;

&lt;p&gt;We login then build our Kafka data source(s), unless they were predefined.&lt;/p&gt;

&lt;p&gt;Next we build a few virtual table sources for Kafka topics we are going to read from.   If they are JSON we can let SSB determine the schema for us.   Or we can connect to the Cloudera Schema Registry for it to determine the schema for AVRO data.&lt;/p&gt;

&lt;p&gt;We can then define virtual table syncs to Kafka or webhooks.&lt;/p&gt;

&lt;p&gt;We then run a SQL query with some easy to determine parameters and if we like the results we can create a materialized view.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://1.bp.blogspot.com/-VUPEWZfGyQk/YG39wJM_xMI/AAAAAAAAc9A/o1Ut7J1U8347_JlArz2QC7zqFbf2XWAqACLcBGAsYHQ/s2550/consolehistory.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fRFvzcz_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-VUPEWZfGyQk/YG39wJM_xMI/AAAAAAAAc9A/o1Ut7J1U8347_JlArz2QC7zqFbf2XWAqACLcBGAsYHQ/w640-h310/consolehistory.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://1.bp.blogspot.com/-Xwr-jaBJoTk/YG39wIIuWTI/AAAAAAAAc88/wm3xNXOZU_wk2_bnsod15H1E0r9Rz12eQCLcBGAsYHQ/s2048/consoleresultsstocks.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8Co7xHfB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-Xwr-jaBJoTk/YG39wIIuWTI/AAAAAAAAc88/wm3xNXOZU_wk2_bnsod15H1E0r9Rz12eQCLcBGAsYHQ/w640-h348/consoleresultsstocks.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://1.bp.blogspot.com/-534EsynXyNk/YG39wE5UpiI/AAAAAAAAc84/-o5CvUJ3Ov8rMf8m8fkTpbt3FVLCDbYrwCLcBGAsYHQ/s2048/consolerunningjobs.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wYKsfvQT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-534EsynXyNk/YG39wE5UpiI/AAAAAAAAc84/-o5CvUJ3Ov8rMf8m8fkTpbt3FVLCDbYrwCLcBGAsYHQ/w640-h356/consolerunningjobs.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://1.bp.blogspot.com/-MBOPxZPMHGY/YG39w96tifI/AAAAAAAAc9E/fMrz0uF5KoIDEo6Yj0vkpMB9yPGeXqDNwCLcBGAsYHQ/s2508/consolesqljobs.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BLibuAWT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-MBOPxZPMHGY/YG39w96tifI/AAAAAAAAc9E/fMrz0uF5KoIDEo6Yj0vkpMB9yPGeXqDNwCLcBGAsYHQ/w640-h320/consolesqljobs.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://1.bp.blogspot.com/-ecCB9ahVsgo/YG39xbCRSsI/AAAAAAAAc9I/l77rszPIIiEk_fqaZuj0JqCJpSYr52mxQCLcBGAsYHQ/s2558/consolevirtualtables.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3LiXUHHK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-ecCB9ahVsgo/YG39xbCRSsI/AAAAAAAAc9I/l77rszPIIiEk_fqaZuj0JqCJpSYr52mxQCLcBGAsYHQ/w640-h308/consolevirtualtables.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://1.bp.blogspot.com/-F2p32qx0UNo/YG39xxHIH6I/AAAAAAAAc9M/RP2e-jR95vAQR0tJQFWR1TERbdc3VrprgCLcBGAsYHQ/s3070/datasources.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iU01CY7l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-F2p32qx0UNo/YG39xxHIH6I/AAAAAAAAc9M/RP2e-jR95vAQR0tJQFWR1TERbdc3VrprgCLcBGAsYHQ/w640-h214/datasources.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://1.bp.blogspot.com/-Qb_d1hlFT_U/YG39yQ2QrKI/AAAAAAAAc9Q/MBKZIa0xC0Eq-SR2C2KXUu8Q5nAmM2KcgCLcBGAsYHQ/s1277/detectschema.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_MQmHYEw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-Qb_d1hlFT_U/YG39yQ2QrKI/AAAAAAAAc9Q/MBKZIa0xC0Eq-SR2C2KXUu8Q5nAmM2KcgCLcBGAsYHQ/w640-h466/detectschema.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://1.bp.blogspot.com/-9f1ZmZ06s4s/YG39y4Bbw-I/AAAAAAAAc9U/PCZZZkxrdz0gPGF5HxhL3q9GKMUI4LdzgCLcBGAsYHQ/s2554/materializedview1.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HLMcZfSK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-9f1ZmZ06s4s/YG39y4Bbw-I/AAAAAAAAc9U/PCZZZkxrdz0gPGF5HxhL3q9GKMUI4LdzgCLcBGAsYHQ/w640-h224/materializedview1.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://1.bp.blogspot.com/-LysJ6CKeuJE/YG39zfDlhlI/AAAAAAAAc9Y/lwnAL754pucWGnEaj_2X4s8u9kka3c8owCLcBGAsYHQ/s2522/materializedview2.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z-6Kcb4W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-LysJ6CKeuJE/YG39zfDlhlI/AAAAAAAAc9Y/lwnAL754pucWGnEaj_2X4s8u9kka3c8owCLcBGAsYHQ/w640-h230/materializedview2.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://1.bp.blogspot.com/-DD0p4cwLYnA/YG39z8j0XeI/AAAAAAAAc9c/o2k9I3bVhi4NBbAU29vKnDdjos9MErR9QCLcBGAsYHQ/s2616/materializedviewsandkeys.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8j8sTwIL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-DD0p4cwLYnA/YG39z8j0XeI/AAAAAAAAc9c/o2k9I3bVhi4NBbAU29vKnDdjos9MErR9QCLcBGAsYHQ/w640-h294/materializedviewsandkeys.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://1.bp.blogspot.com/-swJCtcQPo40/YG390Ui_hcI/AAAAAAAAc9g/HvAWo5v7YWYPEyYaTH7J4TIuYQgi5ouDQCLcBGAsYHQ/s2549/sconsole.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JqEk2XLA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-swJCtcQPo40/YG390Ui_hcI/AAAAAAAAc9g/HvAWo5v7YWYPEyYaTH7J4TIuYQgi5ouDQCLcBGAsYHQ/w640-h310/sconsole.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://1.bp.blogspot.com/-b6CrydBcLjo/YG391VWHQ0I/AAAAAAAAc9o/5m5WphxE3rYivLBtLsYn7T5RMMvZSljGACLcBGAsYHQ/s2048/ssbflinkdashboard.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JZm1QjQj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-b6CrydBcLjo/YG391VWHQ0I/AAAAAAAAc9o/5m5WphxE3rYivLBtLsYn7T5RMMvZSljGACLcBGAsYHQ/w640-h342/ssbflinkdashboard.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://1.bp.blogspot.com/-GVd2bKWrbeI/YG3910OUBkI/AAAAAAAAc9s/JThJcA7wuBQhiANl3QSIxwzMI93C4kCIACLcBGAsYHQ/s2048/stockquery.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nsLnQWm7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-GVd2bKWrbeI/YG3910OUBkI/AAAAAAAAc9s/JThJcA7wuBQhiANl3QSIxwzMI93C4kCIACLcBGAsYHQ/w640-h352/stockquery.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://1.bp.blogspot.com/-XwzsbvuEXZI/YG392WNH2wI/AAAAAAAAc9w/7YmrzJ-7xZkN9sabWB5Q4sAYhKC7ImF_wCLcBGAsYHQ/s2685/stockresults.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DRLvxw_i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-XwzsbvuEXZI/YG392WNH2wI/AAAAAAAAc9w/7YmrzJ-7xZkN9sabWB5Q4sAYhKC7ImF_wCLcBGAsYHQ/w640-h216/stockresults.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://1.bp.blogspot.com/-jcry9mGsCss/YG3920HaDpI/AAAAAAAAc90/NxwQsehf_AUSP6K1Pys8APdev5_TS8iaACLcBGAsYHQ/s1770/addKafkaSourceTopic.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xIIzaKfk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-jcry9mGsCss/YG3920HaDpI/AAAAAAAAc90/NxwQsehf_AUSP6K1Pys8APdev5_TS8iaACLcBGAsYHQ/w606-h640/addKafkaSourceTopic.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://1.bp.blogspot.com/-JsD2RigycaY/YG393Zh6BCI/AAAAAAAAc94/k6nrWsuML2wgPpLIuXUVM4Sgx1I8_KMswCLcBGAsYHQ/s2204/autogeneratedweathersql.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5eWuCwoh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-JsD2RigycaY/YG393Zh6BCI/AAAAAAAAc94/k6nrWsuML2wgPpLIuXUVM4Sgx1I8_KMswCLcBGAsYHQ/w640-h316/autogeneratedweathersql.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://1.bp.blogspot.com/-VTj4PXtk3Uc/YG3936P0i5I/AAAAAAAAc98/Z2LZnDD61EMeSUyi86-if_oJnF7C1Dl8wCLcBGAsYHQ/s1268/buildwebhooksink.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bhjyFa9l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-VTj4PXtk3Uc/YG3936P0i5I/AAAAAAAAc98/Z2LZnDD61EMeSUyi86-if_oJnF7C1Dl8wCLcBGAsYHQ/w640-h616/buildwebhooksink.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://1.bp.blogspot.com/-i3X4n50cFVg/YG394a0wTKI/AAAAAAAAc-A/qVXAp5JORKUEGl_eQdYSsJhxvKMiGvL7QCLcBGAsYHQ/s2048/consoleadvanced.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lNIUyIgX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-i3X4n50cFVg/YG394a0wTKI/AAAAAAAAc-A/qVXAp5JORKUEGl_eQdYSsJhxvKMiGvL7QCLcBGAsYHQ/w640-h342/consoleadvanced.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://1.bp.blogspot.com/-C_m-_PHl0hM/YG3949n-G1I/AAAAAAAAc-E/MOR-v194VeAS0KUcc0HJggFpsBHjMiPPgCLcBGAsYHQ/s2109/consolehelp.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SpTHrpkU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-C_m-_PHl0hM/YG3949n-G1I/AAAAAAAAc-E/MOR-v194VeAS0KUcc0HJggFpsBHjMiPPgCLcBGAsYHQ/s320/consolehelp.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://1.bp.blogspot.com/-RqDD3OWtAis/YG395eTNAyI/AAAAAAAAc-I/dPC3IKcIffsfVhoeId30MwN0AjtJs4ISACLcBGAsYHQ/s2259/consolelog.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qgqsfdQy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-RqDD3OWtAis/YG395eTNAyI/AAAAAAAAc-I/dPC3IKcIffsfVhoeId30MwN0AjtJs4ISACLcBGAsYHQ/w640-h240/consolelog.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://1.bp.blogspot.com/-A5AaV7X1AYg/YG39546Q2iI/AAAAAAAAc-M/gbwn55hjE6Y351FY7KTmlysDHmh0pZXowCLcBGAsYHQ/s2264/consolequeryhistory.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4wWT0Cfr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-A5AaV7X1AYg/YG39546Q2iI/AAAAAAAAc-M/gbwn55hjE6Y351FY7KTmlysDHmh0pZXowCLcBGAsYHQ/w640-h166/consolequeryhistory.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://1.bp.blogspot.com/-XFk8hgDR4AU/YG396fBo8yI/AAAAAAAAc-Q/kmitlxLkQQw3h_mSIPH0qjzKYNwz1LYLACLcBGAsYHQ/s1280/createstocks2sink.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KeWKDyJI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-XFk8hgDR4AU/YG396fBo8yI/AAAAAAAAc-Q/kmitlxLkQQw3h_mSIPH0qjzKYNwz1LYLACLcBGAsYHQ/w640-h584/createstocks2sink.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://1.bp.blogspot.com/-LPrzbRDbFEA/YG3966c-zyI/AAAAAAAAc-U/Tjcev41Hs3YRHaB7lFIcEFQgwEAve77ggCLcBGAsYHQ/s1456/customudf.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i9WQOFWN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-LPrzbRDbFEA/YG3966c-zyI/AAAAAAAAc-U/Tjcev41Hs3YRHaB7lFIcEFQgwEAve77ggCLcBGAsYHQ/w528-h640/customudf.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://1.bp.blogspot.com/-tN4alyCiznA/YG397QInoKI/AAAAAAAAc-Y/-8dxdtT8o30DRlFvve6RELcDLMW3KQz1QCLcBGAsYHQ/s2543/flinkdashboard.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Siz2rOsk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-tN4alyCiznA/YG397QInoKI/AAAAAAAAc-Y/-8dxdtT8o30DRlFvve6RELcDLMW3KQz1QCLcBGAsYHQ/w640-h282/flinkdashboard.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://1.bp.blogspot.com/-J_bIaz4UiiM/YG3974wCKSI/AAAAAAAAc-c/lNjIoXa9DoYlELBX4j43w0C3I8HP_xHtACLcBGAsYHQ/s2204/flinkdashboardrun.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I6aq8p83--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-J_bIaz4UiiM/YG3974wCKSI/AAAAAAAAc-c/lNjIoXa9DoYlELBX4j43w0C3I8HP_xHtACLcBGAsYHQ/w640-h266/flinkdashboardrun.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://1.bp.blogspot.com/-OjTOGz151vg/YG398WjXShI/AAAAAAAAc-g/ilyLwyq2TAUwh1djHXgbswxGzlKb4kAdQCLcBGAsYHQ/s2048/flinksqlmetrics.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aYdUIz90--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-OjTOGz151vg/YG398WjXShI/AAAAAAAAc-g/ilyLwyq2TAUwh1djHXgbswxGzlKb4kAdQCLcBGAsYHQ/w640-h384/flinksqlmetrics.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://1.bp.blogspot.com/-k99FfZ6MtRc/YG3988MEycI/AAAAAAAAc-k/6YK28onlEgAu55Ss49KOlkV4ZyuUtjyZwCLcBGAsYHQ/s2048/flinksqlqueryweather.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--riUKA3xf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-k99FfZ6MtRc/YG3988MEycI/AAAAAAAAc-k/6YK28onlEgAu55Ss49KOlkV4ZyuUtjyZwCLcBGAsYHQ/w640-h334/flinksqlqueryweather.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://1.bp.blogspot.com/-Gea03rCXcx0/YG399e63mGI/AAAAAAAAc-o/iGOI98Gg1sEzA09gJ0horB8I3egCI_eEQCLcBGAsYHQ/s2244/jobproperties.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3Bn4wFlK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-Gea03rCXcx0/YG399e63mGI/AAAAAAAAc-o/iGOI98Gg1sEzA09gJ0horB8I3egCI_eEQCLcBGAsYHQ/w640-h312/jobproperties.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://1.bp.blogspot.com/-tmSwclX-0wg/YG39-eLgkiI/AAAAAAAAc-w/iPhDtyFOoxEHOEuNoFkra5zWLhDZ4RQ-ACLcBGAsYHQ/s2471/kafkatopicsmm.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dYLEdPre--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-tmSwclX-0wg/YG39-eLgkiI/AAAAAAAAc-w/iPhDtyFOoxEHOEuNoFkra5zWLhDZ4RQ-ACLcBGAsYHQ/w640-h262/kafkatopicsmm.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://1.bp.blogspot.com/-SZLgCNV0QtM/YG39-4VqK3I/AAAAAAAAc-0/oCrGI6-hGX02YVEzhprQxO4nyoeOZegKQCLcBGAsYHQ/s2048/queryandsample.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LbMv6xLo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-SZLgCNV0QtM/YG39-4VqK3I/AAAAAAAAc-0/oCrGI6-hGX02YVEzhprQxO4nyoeOZegKQCLcBGAsYHQ/w640-h328/queryandsample.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://1.bp.blogspot.com/-XlcKoIKm8NQ/YG39_eVZcXI/AAAAAAAAc-4/Pnn3wsQgD1sSrzcb7eY1IKfkKt80GplTACLcBGAsYHQ/s2048/runningweatherquery.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Pjiv3Hp8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-XlcKoIKm8NQ/YG39_eVZcXI/AAAAAAAAc-4/Pnn3wsQgD1sSrzcb7eY1IKfkKt80GplTACLcBGAsYHQ/w640-h334/runningweatherquery.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://1.bp.blogspot.com/-DNGhOHAvQYA/YG39_zbPlTI/AAAAAAAAc-8/rk9AJz3KV_MdXpDXF4WOiMZcdJaMRKBpwCLcBGAsYHQ/s2048/runningweatherwithsamples.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uLZb7Il6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-DNGhOHAvQYA/YG39_zbPlTI/AAAAAAAAc-8/rk9AJz3KV_MdXpDXF4WOiMZcdJaMRKBpwCLcBGAsYHQ/w640-h340/runningweatherwithsamples.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://1.bp.blogspot.com/-319IpL5-CJA/YG3-AUbQJKI/AAAAAAAAc_A/uMO-gUpYO6ISpRZXOWhk-3LI4azs_veOwCLcBGAsYHQ/s2283/sinkvirtualtables.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KpF6Gflh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-319IpL5-CJA/YG3-AUbQJKI/AAAAAAAAc_A/uMO-gUpYO6ISpRZXOWhk-3LI4azs_veOwCLcBGAsYHQ/w640-h214/sinkvirtualtables.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://1.bp.blogspot.com/-rn5yfWGlKlI/YG3-A0TIEzI/AAAAAAAAc_E/kwtO9FYpwe8y5ajOpyZAZK7fYa4nh4r7QCLcBGAsYHQ/s2493/smmWeather.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fhUIM3xq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-rn5yfWGlKlI/YG3-A0TIEzI/AAAAAAAAc_E/kwtO9FYpwe8y5ajOpyZAZK7fYa4nh4r7QCLcBGAsYHQ/w640-h200/smmWeather.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://1.bp.blogspot.com/-ykxIFHm4ke8/YG3-BclPrWI/AAAAAAAAc_I/wzNtY1ab7AsC3ja1SYUbrc9sPExVRiVDQCLcBGAsYHQ/s1772/sqlconsoleeventTimeStamp.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--07dANRfe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-ykxIFHm4ke8/YG3-BclPrWI/AAAAAAAAc_I/wzNtY1ab7AsC3ja1SYUbrc9sPExVRiVDQCLcBGAsYHQ/w640-h418/sqlconsoleeventTimeStamp.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://1.bp.blogspot.com/-5wygHDLRggw/YG3-B6GeR3I/AAAAAAAAc_M/DaoGJqK3eBMTh8MKFULvNCi5TmNyzcLQACLcBGAsYHQ/s1100/sqlstreambuildercm.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mC3JKLaG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-5wygHDLRggw/YG3-B6GeR3I/AAAAAAAAc_M/DaoGJqK3eBMTh8MKFULvNCi5TmNyzcLQACLcBGAsYHQ/w640-h416/sqlstreambuildercm.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://1.bp.blogspot.com/-5gn85DtiFBA/YG3-CbqZ9GI/AAAAAAAAc_Q/9qIXywOTjRYREBLB4BxyVWdqKElMVuZVwCLcBGAsYHQ/s2445/ssb_outputkafka.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fAujhHDT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-5gn85DtiFBA/YG3-CbqZ9GI/AAAAAAAAc_Q/9qIXywOTjRYREBLB4BxyVWdqKElMVuZVwCLcBGAsYHQ/w640-h262/ssb_outputkafka.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://1.bp.blogspot.com/-bAsgpQXVkE8/YG3-CwsSsdI/AAAAAAAAc_U/DUaU5hUuwIU0m2JVB0m0-Aynryw7n8FCgCLcBGAsYHQ/s1447/ssb_rest.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v-RxVhe---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-bAsgpQXVkE8/YG3-CwsSsdI/AAAAAAAAc_U/DUaU5hUuwIU0m2JVB0m0-Aynryw7n8FCgCLcBGAsYHQ/w618-h640/ssb_rest.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://1.bp.blogspot.com/-Y9AiiMUFUdc/YG3-DZuGo8I/AAAAAAAAc_Y/CLVVcZQ7kfsFT3eEuCSn8Mr7T8oqYw8IQCLcBGAsYHQ/s2538/ssbjoboverview.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6QtYrKye--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-Y9AiiMUFUdc/YG3-DZuGo8I/AAAAAAAAc_Y/CLVVcZQ7kfsFT3eEuCSn8Mr7T8oqYw8IQCLcBGAsYHQ/w640-h274/ssbjoboverview.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://1.bp.blogspot.com/-UDGLSHFWIxY/YG3-EYDpHvI/AAAAAAAAc_g/sQN79JE619IjlR0A2t7iETF_gbs_TXryACLcBGAsYHQ/s1278/stocksrawsource.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CQ9qoKlK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-UDGLSHFWIxY/YG3-EYDpHvI/AAAAAAAAc_g/sQN79JE619IjlR0A2t7iETF_gbs_TXryACLcBGAsYHQ/w640-h468/stocksrawsource.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://1.bp.blogspot.com/-aSkhhjIY1N8/YG3-EwU-eDI/AAAAAAAAc_k/z7-nI49kfMg2QiuuRJk34tOUZorCAazwQCLcBGAsYHQ/s1826/stocksrawtostocks2.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VyMbIB5_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-aSkhhjIY1N8/YG3-EwU-eDI/AAAAAAAAc_k/z7-nI49kfMg2QiuuRJk34tOUZorCAazwQCLcBGAsYHQ/w640-h332/stocksrawtostocks2.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://1.bp.blogspot.com/-ogmfItjI1CQ/YG3-FgPfHDI/AAAAAAAAc_o/Cc0i3qpTNawrqzp-P_5S7N1OZinGoJ7LQCLcBGAsYHQ/s2048/streamingjobdetails.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Nr8u26YC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-ogmfItjI1CQ/YG3-FgPfHDI/AAAAAAAAc_o/Cc0i3qpTNawrqzp-P_5S7N1OZinGoJ7LQCLcBGAsYHQ/w640-h344/streamingjobdetails.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://1.bp.blogspot.com/-dS9_Bb--iBU/YG3-F5oIQUI/AAAAAAAAc_s/NQ0rwA9JkDMK9qxIi0hXG_mOdfLwfJcAwCLcBGAsYHQ/s2508/streamingsql.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EBQ70znZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-dS9_Bb--iBU/YG3-F5oIQUI/AAAAAAAAc_s/NQ0rwA9JkDMK9qxIi0hXG_mOdfLwfJcAwCLcBGAsYHQ/w640-h318/streamingsql.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://1.bp.blogspot.com/-5vaGfc7mn1I/YG3-GWAL9iI/AAAAAAAAc_w/D7R6uKg4kdQnL7Uwd56xOOhMxCZ2qWf4wCLcBGAsYHQ/s2544/virtualtables.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0VNdqshV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-5vaGfc7mn1I/YG3-GWAL9iI/AAAAAAAAc_w/D7R6uKg4kdQnL7Uwd56xOOhMxCZ2qWf4wCLcBGAsYHQ/w640-h224/virtualtables.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://1.bp.blogspot.com/-YyynjMGW6JQ/YG3-G42tDnI/AAAAAAAAc_0/uVE_I8Wv24UBGcU4trR60JKstofddb-sACLcBGAsYHQ/s2198/weatherFlinkMonitor.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wLqt0hBm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-YyynjMGW6JQ/YG3-G42tDnI/AAAAAAAAc_0/uVE_I8Wv24UBGcU4trR60JKstofddb-sACLcBGAsYHQ/w640-h296/weatherFlinkMonitor.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://1.bp.blogspot.com/-5GRqAm4jyGc/YG3-HU61d0I/AAAAAAAAc_4/wo2LYqoyIp44Jd5gZIlN7dc2kjDDivHpgCLcBGAsYHQ/s1253/weatherwebhook.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vO6azBBq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-5GRqAm4jyGc/YG3-HU61d0I/AAAAAAAAc_4/wo2LYqoyIp44Jd5gZIlN7dc2kjDDivHpgCLcBGAsYHQ/w640-h622/weatherwebhook.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://1.bp.blogspot.com/-KPUGrc6fkiY/YG3-HxFeQ3I/AAAAAAAAc_8/UbxSvvNkncUj0zIkNYDpI4QZ91-3YwrBQCLcBGAsYHQ/s1258/webhookSink.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BNjdNS8j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-KPUGrc6fkiY/YG3-HxFeQ3I/AAAAAAAAc_8/UbxSvvNkncUj0zIkNYDpI4QZ91-3YwrBQCLcBGAsYHQ/w640-h608/webhookSink.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Professionalize Your GitHub </title>
      <author>A.J. Romaniello</author>
      <pubDate>Wed, 07 Apr 2021 18:48:06 +0000</pubDate>
      <link>https://dev.to/ajrom/professionalize-your-github-4all</link>
      <guid>https://dev.to/ajrom/professionalize-your-github-4all</guid>
      <description>&lt;p&gt;Having a &lt;em&gt;professional&lt;/em&gt; looking GitHub profile is great in this age of online resumes, recruiters, and job search programs.&lt;/p&gt;

&lt;p&gt;Although some people who aren't familiar with GitHub may not know where to look to find the best information on your profile. &lt;/p&gt;

&lt;p&gt;In this guide I am going to give you a couple of good tips on how to &lt;em&gt;professionalize&lt;/em&gt; your GitHub profile and even organize it for yourself.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-we-are-covering"&gt;
  &lt;/a&gt;
  What We Are Covering
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="#Setting-Up-Your-Github-ReadMe"&gt;Setting Up Your GitHub README&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#creating-the-readme"&gt;Creating The ReadMe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#making-it-prettier"&gt;Making It Prettier&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#choosing-the-right-name"&gt;Choosing The Right Name&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-your-github-readme"&gt;
  &lt;/a&gt;
  Setting Up Your GitHub ReadMe
&lt;/h2&gt;

&lt;p&gt;If you have ever used GitHub before and created a repostiory, you should be familiar with the &lt;code&gt;README.md&lt;/code&gt; standard. This is usually a file that gives a brief overview of a project or directory withing a repository. &lt;/p&gt;

&lt;p&gt;A little while back GitHub allowed users to create a special "README" repository. Which gets featured on the users profile page before anything else!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-the-readme"&gt;
  &lt;/a&gt;
  Creating The ReadMe
&lt;/h3&gt;

&lt;p&gt;GitHub has made this very easy, you just simply name a repository after your account name. For example mine would be &lt;code&gt;aj-rom/aj-rom&lt;/code&gt; and then you add a &lt;code&gt;README.md&lt;/code&gt; file. &lt;/p&gt;

&lt;p&gt;GitHub will automatically detect this as a &lt;em&gt;special&lt;/em&gt; file and your ready to start! More information can be found on the GitHub documentation &lt;a href="https://docs.github.com/en/github/setting-up-and-managing-your-github-profile/managing-your-profile-readme"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You might be thinking:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Why is this better than a normal GitHub profile? It shows our pinned repositories and contribution history already.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Take a look at this random &lt;a href="https://github.com/abc"&gt;users profile&lt;/a&gt; and compare it to for example &lt;a href="https://github.com/aj-rom"&gt;mine&lt;/a&gt;. With this readme someone viewing your profile will have to read this first as well as it looks a lot better than the normal layout.&lt;/p&gt;

&lt;p&gt;If you have already begun making your own readme at this point hold on one second and keep reading!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#making-it-prettier"&gt;
  &lt;/a&gt;
  Making It Prettier
&lt;/h3&gt;

&lt;p&gt;There are a ton of ways to make a README better. You can use HTML and CSS within markdown files, embed videos, links, images, or anything you could on a static website within this.&lt;/p&gt;

&lt;p&gt;For example on my README, I am using a little extension called &lt;a href="https://github.com/anuraghazra/github-readme-stats"&gt;github-readme-stats&lt;/a&gt; which helps display your entire GitHub profile statistics in an awesome way. As well as mixing in some simply html code to hold &lt;code&gt;.svg&lt;/code&gt; files for my special links.&lt;/p&gt;

&lt;p&gt;This includes a variety of themes, implementation with &lt;a href="https://wakatime.com/dashboard"&gt;Wakatime&lt;/a&gt; to let you even display the time you spent on each repository and language as you develop them. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#choosing-the-right-name"&gt;
  &lt;/a&gt;
  Choosing The Right Name
&lt;/h2&gt;

&lt;p&gt;Having a name that mimics your actual name or is somewhat professional is a must. Many more people are likely to clone and contribute to projects that are under &lt;code&gt;john-smith/some-project&lt;/code&gt; rather than &lt;code&gt;L33tCoder123xX/some-project&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;As well as recruiters trying to find you, having something that resembles your names or initials is usually the best way to go.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#inviting-collaboration"&gt;
  &lt;/a&gt;
  Inviting Collaboration
&lt;/h2&gt;

&lt;p&gt;One way to increase traffic to your GitHub profile and repositories is by opening issues and creating projects. &lt;/p&gt;

&lt;p&gt;If you have a repository that is open-sourced, I highly recommend creating an auto-mated kanban style project. This will automatically move new issues into the todo column and allow you to label and assign new issues quickly and orderly.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-importance-of-labeling"&gt;
  &lt;/a&gt;
  The Importance of Labeling
&lt;/h3&gt;

&lt;p&gt;Another way to increase traffic and even direct this flow is through the use of labeling.&lt;/p&gt;

&lt;p&gt;Have a small feature that needs to be added or fixed but are gone for the weekend? Open up a new issue describe it and pointing to the correct location of what needs to be fixed. Then make sure to assign it correctly associated labels. &lt;/p&gt;

&lt;p&gt;(Some of the best for newcomers are 'good-first-issue')&lt;/p&gt;

&lt;p&gt;There are websites that will direct users to GitHub repositories based off the language of your repository and the issues you have open. So setting these up could lead to massive amounts of collaboration very quickly.&lt;/p&gt;

&lt;p&gt;This also can help you yourself stay organized by opening and closing issues automatically as well as getting used to the way that professionals use GitHub in large settings. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Thank you for your time reading, if you found this helpful you may also like one of my other articles:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/ajrom" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ELsSz-Mf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--0ZHbcmC7--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/569375/ef792d43-539b-4dd4-8d8d-f9e81284a33c.jpeg" alt="ajrom image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/ajrom/how-to-teach-yourself-to-do-anything-3jfd" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How To Teach Yourself To Do Anything&lt;/h2&gt;
      &lt;h3&gt;A.J. Romaniello „Éª Mar  1 „Éª 12 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>tutorial</category>
      <category>github</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Welcome Thread - v119</title>
      <author>dev.to staff</author>
      <pubDate>Wed, 07 Apr 2021 18:38:29 +0000</pubDate>
      <link>https://dev.to/thepracticaldev/welcome-thread-v119-1n9h</link>
      <guid>https://dev.to/thepracticaldev/welcome-thread-v119-1n9h</guid>
      <description>&lt;p&gt;&lt;a href="https://i.giphy.com/media/QYkX9IMHthYn0Y3pcG/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/QYkX9IMHthYn0Y3pcG/giphy.gif" alt="Spiderman hi"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#welcome-to-dev"&gt;
  &lt;/a&gt;
  Welcome to DEV!
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Leave a comment below to introduce yourself! You can talk about what brought you here, what you're learning, or just a fun fact about yourself.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reply to someone's comment, either with a question or just a hello. üëã &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Great to have you in the community!&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>welcome</category>
    </item>
    <item>
      <title>CSS Clip Path</title>
      <author>FollowAndrew</author>
      <pubDate>Wed, 07 Apr 2021 18:31:21 +0000</pubDate>
      <link>https://dev.to/wilsmex/css-clip-path-10pk</link>
      <guid>https://dev.to/wilsmex/css-clip-path-10pk</guid>
      <description>&lt;p&gt;CSS Clip Path for 'clipping mask' style effects&lt;/p&gt;

&lt;p&gt;Part 10 of the 21 CSS tips for 2021 Series&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.youtube.com/FollowAndrew?sub_confirmation=1"&gt;Subscribe To The Channel!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/rGuB76xdHa0"&gt;
&lt;/iframe&gt;
&lt;br&gt;
Watch the Video Tutorial on YouTube for a visual explanation!&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
