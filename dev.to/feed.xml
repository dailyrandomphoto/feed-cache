<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>What is Tailwind CSS</title>
      <author>Siddharth Chaudhary</author>
      <pubDate>Mon, 21 Jun 2021 17:35:12 +0000</pubDate>
      <link>https://dev.to/sidthedev/what-is-tailwind-css-co6</link>
      <guid>https://dev.to/sidthedev/what-is-tailwind-css-co6</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;A utility-first CSS framework packed with classes like &lt;strong&gt;flex&lt;/strong&gt;, &lt;strong&gt;pt-4&lt;/strong&gt;, &lt;strong&gt;text-center&lt;/strong&gt; and &lt;strong&gt;rotate-90&lt;/strong&gt; that can be composed to build any design, directly in your markup.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That's the description of Tailwind CSS given on the &lt;a href="https://tailwindcss.com"&gt;Tailwind CSS website&lt;/a&gt;. But what exactly is Tailwind CSS, and why should you use it? Today I'm going to explain to you exactly what Tailwind CSS is, core concepts, examples, and things you should be prepared for before using it.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-basic-idea-of-tailwind-css"&gt;
  &lt;/a&gt;
  The basic idea of Tailwind CSS
&lt;/h1&gt;

&lt;p&gt;With Tailwind CSS, you can style elements using prebuilt css utility classes.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="p-6 max-w-sm mx-auto bg-white rounded-xl shadow-md flex items-center space-x-4"&amp;gt;
  &amp;lt;div class="flex-shrink-0"&amp;gt;
    &amp;lt;img class="h-12 w-12" src="/img/logo.svg" alt="ChitChat Logo"&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;
    &amp;lt;div class="text-xl font-medium text-black"&amp;gt;ChitChat&amp;lt;/div&amp;gt;
    &amp;lt;p class="text-gray-500"&amp;gt;You have a new message!&amp;lt;/p&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Taken from the tailwindcss website&lt;/p&gt;

&lt;p&gt;As opposed to:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="chat-notification"&amp;gt;
  &amp;lt;div class="chat-notification-logo-wrapper"&amp;gt;
    &amp;lt;img class="chat-notification-logo" src="/img/logo.svg" alt="ChitChat Logo"&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div class="chat-notification-content"&amp;gt;
    &amp;lt;h4 class="chat-notification-title"&amp;gt;ChitChat&amp;lt;/h4&amp;gt;
    &amp;lt;p class="chat-notification-message"&amp;gt;You have a new message!&amp;lt;/p&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;style&amp;gt;
  .chat-notification {
    display: flex;
    max-width: 24rem;
    margin: 0 auto;
    padding: 1.5rem;
    border-radius: 0.5rem;
    background-color: #fff;
    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
  }
  .chat-notification-logo-wrapper {
    flex-shrink: 0;
  }
  .chat-notification-logo {
    height: 3rem;
    width: 3rem;
  }
  .chat-notification-content {
    margin-left: 1.5rem;
    padding-top: 0.25rem;
  }
  .chat-notification-title {
    color: #1a202c;
    font-size: 1.25rem;
    line-height: 1.25;
  }
  .chat-notification-message {
    color: #718096;
    font-size: 1rem;
    line-height: 1.5;
  }
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Taken from the tailwind css website&lt;/p&gt;

&lt;p&gt;Both examples above produce the same result, but it would take &lt;em&gt;much&lt;/em&gt; less time to write the first example, which uses Tailwind CSS.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#but-why-not-use-inline-styles"&gt;
  &lt;/a&gt;
  But why not use inline styles?
&lt;/h2&gt;

&lt;p&gt;Inline styles come with shortfalls. They are not responsive, and cannot take care of states such as &lt;code&gt;:hover&lt;/code&gt;, &lt;code&gt;:focus&lt;/code&gt;, etc. Tailwind CSS takes care of this.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-how-do-these-raw-hover-endraw-and-raw-focus-endraw-styles-work"&gt;
  &lt;/a&gt;
  So how do these &lt;code&gt;:hover&lt;/code&gt; and &lt;code&gt;:focus&lt;/code&gt; styles work?
&lt;/h2&gt;

&lt;p&gt;Easy. Just prefix any css class with &lt;code&gt;hover:&lt;/code&gt; and it will only work when the element is hovered. This is the same for focus (&lt;code&gt;focus:&lt;/code&gt;).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;button class="bg-red-500 p-2 rounded-lg hover:bg-red-600"&amp;gt;Button&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;The class bg-red-600 will only be applied when the button is hovered&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#and-responsive"&gt;
  &lt;/a&gt;
  And responsive?
&lt;/h2&gt;

&lt;p&gt;As easy as &lt;code&gt;hover:&lt;/code&gt; and &lt;code&gt;focus:&lt;/code&gt;. You simply need to prefix a utility with one of the responsive breakpoints below, and the class will only be applied when the user's screen is bigger than a minimum width of the breakpoint.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#list-of-breakpoints"&gt;
  &lt;/a&gt;
  List of breakpoints
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;code&gt;sm:&lt;/code&gt; - min width 640px&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;md:&lt;/code&gt; - min width 768px&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;lg:&lt;/code&gt; - min width 1024px&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;xl:&lt;/code&gt; - min width 1280px&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;2xl:&lt;/code&gt; - min width 1536px&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#what-does-the-file-size-look-like"&gt;
  &lt;/a&gt;
  What does the file size look like
&lt;/h1&gt;

&lt;p&gt;The full Tailwind CSS is &lt;strong&gt;HUGE&lt;/strong&gt;. It is a whopping &lt;em&gt;3566.2kB&lt;/em&gt;, making your website &lt;em&gt;really slow.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#but-how-can-we-fix-this"&gt;
  &lt;/a&gt;
  But how can we fix this?
&lt;/h2&gt;

&lt;p&gt;We can fix this easily by purging our css.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Think of Tailwind like a giant box of LEGO — you dump it all out on the floor and build what you want to build, then when you’re done you put all the pieces you didn’t use back into the box.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is what it says on the Tailwind CSS website.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-purging-css"&gt;
  &lt;/a&gt;
  What is purging css?
&lt;/h3&gt;

&lt;p&gt;Purging css is when we remove unused css classes, &lt;em&gt;clearly&lt;/em&gt; reducing the Tailwind CSS file size by large amounts.&lt;/p&gt;

&lt;p&gt;On one website we tested, the file size dropped to 10kb! 10kb from 3566.2kp! Don't tell me you're not impressed.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-can-i-start-using-tailwind-css"&gt;
  &lt;/a&gt;
  How can I start using Tailwind CSS
&lt;/h1&gt;

&lt;p&gt;We'll go through this in detail in another article. Until then, you can check the &lt;a href="https://tailwindcss.com"&gt;Tailwind CSS docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I hope this article helped you understand what Tailwind CSS is, its core concepts and why you should use it. Support me by buying me a coffee in the link below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://buymeacoffee.com/siddharthone"&gt;Buy me a coffee ☕️ ☕️&lt;/a&gt; &lt;/p&gt;

</description>
      <category>tailwindcss</category>
      <category>webdev</category>
      <category>css</category>
      <category>html</category>
    </item>
    <item>
      <title>What's the best programming language to learn first</title>
      <author>Vikram Aditya</author>
      <pubDate>Mon, 21 Jun 2021 17:25:49 +0000</pubDate>
      <link>https://dev.to/thevik/what-s-the-best-programming-language-to-learn-first-14ea</link>
      <guid>https://dev.to/thevik/what-s-the-best-programming-language-to-learn-first-14ea</guid>
      <description>&lt;p&gt;There is no right answer, of course. Choosing a first language will depend on what kind of projects you want to work on, who you want to work for, or how easy you want it to be. Hopefully, this guide will help give you a better idea of which one you should pursue.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#python"&gt;
  &lt;/a&gt;
  Python
&lt;/h4&gt;

&lt;p&gt;Python is always recommended if you’re looking for an easy and even fun programming language to learn first. Rather than having to jump into strict syntax rules, Python reads like English and is simple to understand for someone who’s new to programming. This allows you to obtain a basic knowledge of coding practices without having to obsess over smaller details that are often important in other languages.&lt;/p&gt;

&lt;p&gt;Python also is ideal for web development, graphic user interfaces (GUIs), and software development. In fact, it was used to build Instagram, YouTube, and Spotify, so it’s clearly in demand among employers in addition to having a faster onboarding.&lt;/p&gt;

&lt;p&gt;Though it has it’s advantages, Python is often thought of as a slow language that requires more testing and is not as practical for developing mobile apps as other languages.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#c-its-c-written-but-devto-makes-it-c-idk-why-"&gt;
  &lt;/a&gt;
  C ( its C# written but dev.to makes it C idk why )
&lt;/h4&gt;

&lt;p&gt;While C is one of the more difficult languages to learn, it’s still an excellent first language pick up because almost all programming languages are implemented in it. This means that once you learn C, it’ll be simple to learn more languages like C++ and C#.&lt;/p&gt;

&lt;p&gt;Because C is more “machine-level”, learning it is great for teaching you how a computer functions. Software Developer Joel Spolsky compares it to understanding basic anatomy before becoming a medical doctor, making it the best way to code efficiently.&lt;/p&gt;

&lt;p&gt;In this way, C is an exceptional choice to become a master coder and a talented developer from the get-go if you’re willing to take on the challenge.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#java"&gt;
  &lt;/a&gt;
  Java
&lt;/h4&gt;

&lt;p&gt;Java is an object-oriented and feature-heavy programming language that’s in high demand. It’s been built under the premise of “Write once, run anywhere,” meaning that it can be written on any device and work cross-platform.&lt;/p&gt;

&lt;p&gt;This makes it one of the most desired (yes, we mean high-paid) language skills. So, if you’re looking to learn a language that’s going to get you a great career, this might be the one, especially since top employers for Java programmers including Ebay, Amazon, and IBM.&lt;/p&gt;

&lt;p&gt;Additionally, Java is often used for Android and iOS app development, as it’s the basis of the Android operating system, which makes it one of the best choices if you want to build mobile apps.&lt;/p&gt;

&lt;p&gt;While it may not be as easy to pick up as Python, Java is a high-level language, and so it’s still relatively beginner-friendly. However, it has a slow startup and will take beginners much longer to deploy their first project.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#javascript"&gt;
  &lt;/a&gt;
  JavaScript
&lt;/h4&gt;

&lt;p&gt;JavaScript is another incredibly popular language. Many websites that you use every day rely on JavaScript including Twitter, Gmail, Spotify, Facebook, and Instagram according to General Assembly.&lt;/p&gt;

&lt;p&gt;Additionally, it’s a must-have when adding interactivity to websites because it communicates with HTML and CSS. This makes it essential for front-end development and consumer-facing websites while becoming increasingly important in back-end development and growing in demand all the time. Because of its popularity, JavaScript is also the leading the charge in test automation frameworks, being the backbone of frameworks like Protractor and Nightwatch.JS.&lt;/p&gt;

&lt;p&gt;There’s nothing to install with JavaScript since it’s already built into browsers, so it’s the easiest language to get started with in terms of set-up. The con here is that this means it’s interpreted differently across browsers (you’ll need to do some extra cross-browser testing) and may have deficiencies in responsive design compared to server-side scripts.&lt;/p&gt;

&lt;p&gt;Again, while it’s not the most difficult to learn, it certainly isn’t as easy as Python. If Javascript does seem difficult at first, try out this Javascript tutorial that’s so easy a cat could do it.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#i-have-a-instagram-theme-page-related-to-programming-you-can-follow-it-if-you-want-to-"&gt;
  &lt;/a&gt;
  I have a &lt;a href="https://www.instagram.com/gecko_code/"&gt;Instagram Theme Page&lt;/a&gt; related to programming, you can follow it if you want to :)
&lt;/h5&gt;

&lt;h4&gt;
  &lt;a href="#ruby"&gt;
  &lt;/a&gt;
  Ruby
&lt;/h4&gt;

&lt;p&gt;Ruby is similar to Python in that it’s one of the easiest languages for people with no prior programming experience to read. You don’t need to know a ton of commands or programming vocabulary to learn it, and it has a multitude of libraries and tools that come in handy.&lt;/p&gt;

&lt;p&gt;A big reason people like Ruby is because of the awesome full-stack framework, Ruby on Rails, which is becoming increasingly popular among startups and enterprise solutions. Airbnb, Groupon, Hulu, and Soundcloud are just a few of the websites that were built with Ruby on Rails, and Ruby has quite the active developer community today.&lt;/p&gt;

&lt;p&gt;The reason it’s so popular for small businesses, however, is often one of the many criticisms against it. Ruby can have the challenge of scalability across a large system and may have a hard time with performance on larger websites. Additionally, while Ruby is certainly easy to learn, you’ll find most of the opportunities come from learning Ruby on Rails, which may slow down your learning curve if you were just expecting to take the easy way out to create a website.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#so-whats-the-best-programming-language-to-learn"&gt;
  &lt;/a&gt;
  So, What’s the Best Programming Language to Learn?
&lt;/h4&gt;

&lt;p&gt;If you’re looking for something easy: Python&lt;br&gt;
If you want a solid foundation to make you a master developer: C&lt;br&gt;
If you’re looking for a job or want to make mobile apps: Java&lt;br&gt;
If you want to try front-end development: Javascript&lt;br&gt;
If you’re programming for your startup’s website: Ruby&lt;/p&gt;

&lt;p&gt;BTW I started with JavaScript also I have heard some people telling that you should not start with a language starting with C because its hard to learn as per you are just started.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>productivity</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Create Dark Mode functionality with pure JavaScript</title>
      <author>Mohcin Bounouara</author>
      <pubDate>Mon, 21 Jun 2021 17:09:44 +0000</pubDate>
      <link>https://dev.to/bn_geek/create-dark-mode-functionality-with-pure-javascript-332c</link>
      <guid>https://dev.to/bn_geek/create-dark-mode-functionality-with-pure-javascript-332c</guid>
      <description>&lt;p&gt;I was using front-end Framworks as Vue Js and jQuery, but I discover that I have some problems that I must fix in JavaScript basics (and I’m proud to fix and learn new things always) because at all you will use Js in your Frameworks based project necessarily.&lt;/p&gt;

&lt;p&gt;I decided to learn some principal in Js with deeply way because I’m not learned it correctly in the beginning, and I will share some simple Implementations as blog posts maybe it will help someone in somewhere.&lt;/p&gt;

&lt;p&gt;Let’s start with creating a feature that is very common in websites this days, “Dark Mode functionality” .&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-html-page-structure"&gt;
  &lt;/a&gt;
  The HTML page structure:
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Dark Mode&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt;
      &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt;
      &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css"&lt;/span&gt;
    &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;header&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;button&amp;gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fas fa-sun"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;main&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;article&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Pure Javascript Dark Mood&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"date"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;May 7, 2021&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/article&amp;gt;&lt;/span&gt;

      &lt;span class="nt"&gt;&amp;lt;article&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Pure Javascript Dark Mood&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"date"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;May 7, 2021&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/article&amp;gt;&lt;/span&gt;

      &lt;span class="nt"&gt;&amp;lt;article&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Pure Javascript Dark Mood&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"date"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;May 7, 2021&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/article&amp;gt;&lt;/span&gt;

      &lt;span class="nt"&gt;&amp;lt;article&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Pure Javascript Dark Mood&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"date"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;May 7, 2021&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/article&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/main&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#we-will-use-this-simple-css-style-for-the-page"&gt;
  &lt;/a&gt;
  We will use this simple CSS style for the page:
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;article&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#ccc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.darking-mode&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#374151&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The JavaScript function that will handle the click and switching between normal and dark mode, I will try to explain every line of code clearly. I used to comment my code so its already commented but I will try to explain it also.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// get the element to be clicked&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;buttonToBeClicked&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// addEventListener() method to execute the main function&lt;/span&gt;
&lt;span class="nx"&gt;buttonToBeClicked&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;darkMode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// our dark mode function&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;darkMode&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;//console.log('Clicked!!');&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;theBody&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;theBody&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;darking-mode&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;//console.log('switched to dark mode!');&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;darking-mode&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;icon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;i&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="c1"&gt;//console.log(icon);&lt;/span&gt;
     &lt;span class="nx"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fa-sun&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="nx"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fa-moon&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;icon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;i&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="nx"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fa-moon&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="nx"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fa-sun&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#function-explaining"&gt;
  &lt;/a&gt;
  Function explaining:
&lt;/h2&gt;

&lt;p&gt;I used an addEventListener() method to handle click to execute the function that will do the work.&lt;/p&gt;

&lt;p&gt;After that I stocked the body element in “theBody” variable.&lt;/p&gt;

&lt;p&gt;And I used “Element.classList” a property that return a live class “darking-mode” that is responsible on changing elements color and body background color.&lt;/p&gt;

&lt;p&gt;Finally I use an if statement to handle toggle fontawesome icons.&lt;/p&gt;

&lt;p&gt;The blog post has originally posted on my personal blog. Hope that will helps someone, somewhere.&lt;/p&gt;

</description>
      <category>javascript</category>
    </item>
    <item>
      <title>Estamos de volta!</title>
      <author>Iele Passos</author>
      <pubDate>Mon, 21 Jun 2021 17:00:02 +0000</pubDate>
      <link>https://dev.to/opendevufcg/estamos-de-volta-2ndk</link>
      <guid>https://dev.to/opendevufcg/estamos-de-volta-2ndk</guid>
      <description>&lt;p&gt;
&lt;a href="https://i.giphy.com/media/3oEjI99ZdyZRE9Dw5O/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/3oEjI99ZdyZRE9Dw5O/giphy.gif"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;É isso mesmo! Sentiram a nossa falta?&lt;/p&gt;

&lt;p&gt;Não há nada melhor do que poder tirar um tempo para descansar e refletir a respeito do rumo que queremos tomar, né?&lt;br&gt;
Como resultado dessa nossa "hibernação", definimos que teremos postagens constantes (1x por semana) com os mais variados temas feitas por membros e convidados da nossa comunidade.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#durante-esse-tempo-que-o-blog-esteve-parado-n%C3%B3s-n%C3%A3o-est%C3%A1vamos"&gt;
  &lt;/a&gt;
  Durante esse tempo que o blog esteve parado, nós não estávamos:
&lt;/h1&gt;

&lt;p&gt; &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#-criamos-o-andromedev"&gt;
  &lt;/a&gt;
  - Criamos o Andromedev!!🚀🚀🚀
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4QEOulRQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://svgshare.com/i/QTp.svg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4QEOulRQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://svgshare.com/i/QTp.svg"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Pensando em fortalecer a comunidade nesse período de pandemia, criamos o primeiro evento de mentoria organizado pela OpenDevUFCG  com o intuito de incentivar a participação de estudantes em projetos open source!&lt;/p&gt;

&lt;p&gt;O evento ocorreu em um período de nove semanas, onde estudantes colaboraram com projetos open source através de um sistema de mentoria. Cada projeto teve uma pessoa responsável, que tinha a missão de orientar a pessoa aprendiz durante o evento, ajudando a realizar as contribuições open source.&lt;/p&gt;

&lt;p&gt;Na inscrição, foram disponibilizados diversos projetos que conseguimos através de parcerias com laboratórios da universidade, organizações e empresas que estejam dispostas a ensinar alunos. Dentre elas, contamos com empresas de renome internacional, como a &lt;a href="https://www.redhat.com/pt-br"&gt;RedHat&lt;/a&gt; e a &lt;a href="https://vtex.com/br-pt/"&gt;VTEX&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Ao fim do evento, foi realizada uma apresentação dos resultados dos projetos participantes do evento, que está disponível em nosso &lt;a href="https://www.youtube.com/c/OpenDevUFCG/videos"&gt;canal do YouTube&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Ao todo, na edição de 2020, foram &lt;strong&gt;49&lt;/strong&gt; projetos, &lt;strong&gt;145&lt;/strong&gt; inscritos para aprendiz e &lt;strong&gt;22&lt;/strong&gt; organizações!&lt;/p&gt;

&lt;p&gt;Amasse? &lt;a href="https://andromedev.opendevufcg.org/"&gt;https://andromedev.opendevufcg.org/&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#-teve-hacktoberfest-online"&gt;
  &lt;/a&gt;
  - Teve Hacktoberfest online!
&lt;/h3&gt;

&lt;p&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--asyijcG0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://opendevufcg.org/hacktoberfest/assets/img/logo.svg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--asyijcG0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://opendevufcg.org/hacktoberfest/assets/img/logo.svg"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;O Hacktoberfest é um evento realizado ao longo de todo o mês de outubro, engajando estudantes e desenvolvedores em atividades e iniciativas voltadas ao open source ao redor do mundo todo.&lt;/p&gt;

&lt;p&gt;Com toda a situação causada pelo COVID-19, tivemos que repensar totalmente a estrutura do evento para conseguirmos engajar e passar conhecimentos sobre programação e cultura open source ao mesmo tempo que respeitamos às recomendações de isolamento social.&lt;/p&gt;

&lt;p&gt;Assim, fizemos o Hacktoberfest Home Edition!!&lt;br&gt;
O evento durou o MÊS INTEIRO!! É isso mesmo que você leu, foram 4 semanas abordando vários temas distintos através de Palestras e Workshops com vários convidados e membros da OpenDevUFCG. Falamos de conceitos iniciais, open source, análise de dados, frontend, design e muito mais, e o melhor, TUDO DE GRAÇA!&lt;/p&gt;

&lt;p&gt;Na edição online de 2020, tivemos o &lt;strong&gt;mês inteiro&lt;/strong&gt; de programação, &lt;strong&gt;10&lt;/strong&gt; palestras/minicursos, &lt;strong&gt;mais de 2.000&lt;/strong&gt; visualizações, &lt;strong&gt;mais de 900&lt;/strong&gt; minutos de conteúdo e parceria com a &lt;a href="https://vtex.com/br-pt/"&gt;VTEX&lt;/a&gt; e a &lt;a href="https://www.behance.net/ovnidesign"&gt;Ovni Design&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Quer saber mais? &lt;a href="https://opendevufcg.org/hacktoberfest/#about"&gt;https://opendevufcg.org/hacktoberfest/#about&lt;/a&gt;  &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#-nossa-comunidade-cresceu"&gt;
  &lt;/a&gt;
  - Nossa comunidade cresceu!!
&lt;/h3&gt;

&lt;p&gt;
&lt;a href="https://i.giphy.com/media/fgLKQtTw54Hk8bRaXD/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/fgLKQtTw54Hk8bRaXD/giphy.gif"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;No nosso discord, temos mais de &lt;strong&gt;370&lt;/strong&gt; membros, onde &lt;strong&gt;mais 14&lt;/strong&gt; pessoas entraram no CoreTeam;&lt;/li&gt;
&lt;li&gt;No nosso &lt;a href="https://www.instagram.com/opendevufcg/"&gt;Instagram&lt;/a&gt;, temos mais de &lt;strong&gt;600&lt;/strong&gt; seguidores;&lt;/li&gt;
&lt;li&gt;E em nosso &lt;a href="https://twitter.com/OpenDevUFCG"&gt;Twitter&lt;/a&gt; temos mais de &lt;strong&gt;300&lt;/strong&gt; seguidores!!&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#-agora-temos-um-perfil-na-open-collective"&gt;
  &lt;/a&gt;
  - Agora temos um perfil na Open Collective!!
&lt;/h3&gt;

&lt;p&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gCIL1mAA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://opensource.org/files/opencollective.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gCIL1mAA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://opensource.org/files/opencollective.png"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;A &lt;a href="https://opencollective.com/"&gt;Open Collective&lt;/a&gt; é uma ferramenta open source que permite que você gerencie suas finanças para que todos possam ver de onde vem o dinheiro e aonde ele vai. &lt;/p&gt;

&lt;p&gt;Ou seja, agora fica mais fácil patrocinar/apoiar/doar para a nossa comunidade e ver onde e como o dinheiro foi gasto!!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://opencollective.com/opendevufcg"&gt;&lt;strong&gt;Confira nosso perfil!&lt;/strong&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mas-o-que-ser%C3%A1-que-vem-ai"&gt;
  &lt;/a&gt;
  Mas o que será que vem ai??
&lt;/h2&gt;

&lt;p&gt;
&lt;a href="https://i.giphy.com/media/xGdvlOVSWaDvi/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/xGdvlOVSWaDvi/giphy.gif"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;Além dos posts semanais por aqui, teremos eventos, minicursos, novos projetos...boatos que vai ser tuudo!&lt;br&gt;
E para saber quando o quê vai acontecer é facinho facinho: Nos acompanhem em nossas redes!!&lt;br&gt;
&lt;a href="https://twitter.com/opendevufcg"&gt;Twitter&lt;/a&gt;, &lt;a href="https://www.instagram.com/opendevufcg"&gt;Instagram&lt;/a&gt; e, claro, no &lt;a href="https://github.com/OpenDevUFCG"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;




&lt;p&gt;Muito obrigada pela leitura!&lt;br&gt;
Meu nome é Iele Passos e sou contribuidora do OpenDevUFCG. Se desejar entrar em contato comigo, é só me mandar uma mensagem no Discord (iele#7381) ou no &lt;a href="https://www.linkedin.com/in/ielepassos/"&gt;LinkedIn&lt;/a&gt; e, se quiser ver um pouco do meu trabalho, dá uma olhada no meu &lt;a href="https://github.com/ielepassos"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Fiquem atentos: em breve, teremos novos artigos de contribuidores do OpenDevUFCG aqui no dev.to (inclusive meus hehehe)&lt;/p&gt;

</description>
      <category>ptbr</category>
      <category>opensource</category>
    </item>
    <item>
      <title>TIL: Rails rendering partial or block with layout</title>
      <author>Abhay Nikam</author>
      <pubDate>Mon, 21 Jun 2021 16:57:05 +0000</pubDate>
      <link>https://dev.to/abhaynikam13/til-rails-rendering-partial-or-block-with-layout-cn7</link>
      <guid>https://dev.to/abhaynikam13/til-rails-rendering-partial-or-block-with-layout-cn7</guid>
      <description>&lt;p&gt;&lt;a href="https://www.abhaynikam.me/today-i-learned/rails-rendering-partial-with-layout/"&gt;https://www.abhaynikam.me/today-i-learned/rails-rendering-partial-with-layout/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>todayilearned</category>
    </item>
    <item>
      <title>Headless CMS: Building apps with Nuxt and Sanity</title>
      <author>Joel Olawanle</author>
      <pubDate>Mon, 21 Jun 2021 16:25:09 +0000</pubDate>
      <link>https://dev.to/sanity-io/headless-cms-building-apps-with-nuxt-and-sanity-2ba1</link>
      <guid>https://dev.to/sanity-io/headless-cms-building-apps-with-nuxt-and-sanity-2ba1</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;Sanity is one of the most flexible platforms for building data-driven content solutions. This article explains what Sanity is all about and how to build a simple books list app. Sanity CMS stores our content, which will be editable in &lt;a href="https://www.sanity.io/studio"&gt;Sanity Studio&lt;/a&gt;. We will make this app with Nuxt and style it using pure CSS. &lt;/p&gt;

&lt;p&gt;This three-in-one article will show you how to: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Set up Sanity Studio &lt;/li&gt;
&lt;li&gt;Set up Sanity on Nuxt &lt;/li&gt;
&lt;li&gt;Deploy both Sanity Studio and the Nuxt app so the app can work online &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can see the deployed app &lt;a href="https://booksnote.netlify.app/"&gt;on Netlify&lt;/a&gt; and see the final code &lt;a href="http://on%20github/"&gt;on GitHub&lt;/a&gt;. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#requirementsprerequisites"&gt;
  &lt;/a&gt;
  Requirements/Prerequisites
&lt;/h1&gt;

&lt;p&gt;To follow this guide, you should have: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Basic understanding of HTML, CSS, and JavaScript &lt;/li&gt;
&lt;li&gt;At least little experience or knowledge of &lt;a href="https://vuejs.org/"&gt;Vue.js&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;Node and npm or yarn installed on your computer &lt;/li&gt;
&lt;li&gt;Basic knowledge of how the terminal works &lt;/li&gt;
&lt;li&gt;A &lt;a href="https://www.sanity.io/"&gt;Sanity.io&lt;/a&gt; account 
# What is Sanity?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;According to official &lt;a href="https://www.sanity.io/docs/a-short-introduction-to-sanity-io"&gt;Sanity documentation&lt;/a&gt;, Sanity.io  structured content platform enables you to manage your text, images, and other media with APIs. Sanity Studio helps you quickly set up a customizable editing environment. Sanity also gives you access to many APIs, libraries, and tooling that help you have all your content available as a single source of truth. &lt;/p&gt;

&lt;p&gt;One significant advantage of Sanity is its flexibility. You get the full privilege of setting up your dashboard and even the ability to customize it to your taste. You can invite new or add existing user accounts to access your projects by assigning different roles and access rights. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sanity-studio"&gt;
  &lt;/a&gt;
  Sanity studio
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.sanity.io/docs/sanity-studio"&gt;Sanity Studio&lt;/a&gt; is where you can edit and manage your content when using  Sanity. You set up your schemas in plain JavaScript then Sanity Studio builds the editing environment. &lt;/p&gt;

&lt;p&gt;This open-source CMS  connects to Sanity.io's datastore and is a single-page application written in React and published on npm. It also enables users to deploy  Sanity Studio to their server. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-started-with-sanitysetup"&gt;
  &lt;/a&gt;
  Getting started with Sanity/setup
&lt;/h2&gt;

&lt;p&gt;To get started, let's install the &lt;a href="https://www.npmjs.com/package/@sanity/cli"&gt;Sanity C&lt;/a&gt;LI globally. To do this, you first need to install Node and npm. &lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install -g @sanity/cli
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;As soon as the CLI finishes installing, it can create a new project. Run the following command wherever you store codes on your local computer. &lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sanity init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;If this is your first time, this will log you into Sanity and then you would be able to create a project, set up a dataset, and generate files which are necessary to run the editing environment locally. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Note:&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;If you don't have an account, Sanity will direct you on how to get one. Or, visit Sanity's website to create an account.&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;Once that is done, Sanity prompts you to create a new project. Tap &lt;strong&gt;Enter&lt;/strong&gt;. Name your project &lt;strong&gt;books-note&lt;/strong&gt; and choose the default dataset configuration by typing &lt;code&gt;Y&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Oecmltdl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_F7CFB39699BD1AAA7EC1C60D617ED97343D10788FF04D44E5E03B84C1B6A75F8_1622112420852_cl-1.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Oecmltdl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_F7CFB39699BD1AAA7EC1C60D617ED97343D10788FF04D44E5E03B84C1B6A75F8_1622112420852_cl-1.JPG" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, confirm the project path and choose a schema for your Studio. For this demo, you'll need to start with the "Clean project with no predefined schemas" option. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nsrYeAJx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_F7CFB39699BD1AAA7EC1C60D617ED97343D10788FF04D44E5E03B84C1B6A75F8_1622112502384_cl-2.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nsrYeAJx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_F7CFB39699BD1AAA7EC1C60D617ED97343D10788FF04D44E5E03B84C1B6A75F8_1622112502384_cl-2.JPG" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Start the Studio by first moving into the folder by running the following command in the terminal: &lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd studio
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;You can now start the studio with the following command:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sanity start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;After compiling, Sanity Studio will open on &lt;a href="http://localhost:3333"&gt;http://localhost:3333&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You can also use commands like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;sanity docs&lt;/code&gt; : This is used to open sanity’s documentation in the browser &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;sanity manage&lt;/code&gt; : This helps to open the project settings in your browser&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;sanity help&lt;/code&gt; : This is used to explore the CLI manual&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This project is clean and has no predefined schemas, so we have a dashboard like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--205o2eHS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_F7CFB39699BD1AAA7EC1C60D617ED97343D10788FF04D44E5E03B84C1B6A75F8_1622114993479_Capture.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--205o2eHS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_F7CFB39699BD1AAA7EC1C60D617ED97343D10788FF04D44E5E03B84C1B6A75F8_1622114993479_Capture.JPG" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-the-mad-lib-schema-from-scratch"&gt;
  &lt;/a&gt;
  Creating the mad lib schema from scratch
&lt;/h2&gt;

&lt;p&gt;A schema describes the different field types in a document. You can choose from various &lt;a href="https://www.sanity.io/docs/schema-types"&gt;types of schema&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;For this guide, we'll create a schema for a books note app, which will just have five fields and one schema. This will be simple for a beginner to understand before creating many schemas, requiring organizing. &lt;/p&gt;

&lt;p&gt;For now, when you open the Sanity file you created, the directory looks like this: &lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;├── README.md
├── config
├── node_modules
├── plugins
├── sanity-schema.txt
├── sanity.json
├── schemas // content model lives here
├── static
├── tsconfig.json
└── yarn.lock
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;When Sanity Studio starts, it looks for the schema in a file named &lt;code&gt;schema.js&lt;/code&gt; in your project's schemas folder. For now, since you don't have any schema, you will find something like this in your &lt;code&gt;schema.js&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="c1"&gt;// First, we must import the schema creator&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;createSchema&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;part:@sanity/base/schema-creator&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;// Then import schema types from any plugins that might expose them&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;schemaTypes&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;all:part:@sanity/base/schema-type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;// Then we give our schema to the builder and provide the result to Sanity&lt;/span&gt;
    &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;createSchema&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="c1"&gt;// We name our schema&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;default&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="c1"&gt;// Then proceed to concatenate our document type&lt;/span&gt;
      &lt;span class="c1"&gt;// to the ones provided by any plugins that are installed&lt;/span&gt;
      &lt;span class="na"&gt;types&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;schemaTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
        &lt;span class="cm"&gt;/* Your types here! */&lt;/span&gt;
      &lt;span class="p"&gt;]),&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All your schemas go into the types array by defining the schema's title, name, type, and others like a description. &lt;/p&gt;

&lt;p&gt;Finally, you will also define the fields. For our books schema, we will use something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Books&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;books&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;document&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Book Name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bookname&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Enter book name here&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Author&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;author&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Enter Author's name here&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Description&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;description&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Enter book name here&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;slug&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Slug&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;slug&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bookname&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;maxLength&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;96&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Book cover&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bookcover&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;image&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Upload appropriate book cover image here&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;hotspot&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Notes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mynotes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;array&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Type notes as you learn something new about this book here&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;of&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;block&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}],&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Save and check your browser, you will find something like this&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S-fWCsdj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_F7CFB39699BD1AAA7EC1C60D617ED97343D10788FF04D44E5E03B84C1B6A75F8_1622118523622_Captur1.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S-fWCsdj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_F7CFB39699BD1AAA7EC1C60D617ED97343D10788FF04D44E5E03B84C1B6A75F8_1622118523622_Captur1.JPG" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One last thing, lets load our studio with contents which we will be fetching into the app.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j64M2Fms--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_F7CFB39699BD1AAA7EC1C60D617ED97343D10788FF04D44E5E03B84C1B6A75F8_1622119573319_Captur2.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j64M2Fms--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_F7CFB39699BD1AAA7EC1C60D617ED97343D10788FF04D44E5E03B84C1B6A75F8_1622119573319_Captur2.JPG" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-nuxtjs"&gt;
  &lt;/a&gt;
  What is Nuxt.js
&lt;/h1&gt;

&lt;p&gt;Nuxt.js is a free, open-source, modern web application framework based on Vue.js, Node.js, webpack, and Babel, enabling us to create static pages, single-page applications (SPAs), and server-side rendered (SSR) applications, depending on our build’s purpose. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-a-nuxtjs-app"&gt;
  &lt;/a&gt;
  Setting up a Nuxt.js app
&lt;/h2&gt;

&lt;p&gt;We can create our Nuxt app using the scaffolding tool  &lt;code&gt;create-nuxt-app&lt;/code&gt;  or build from scratch. For this app, we will use the &lt;a href="https://nuxtjs.org/docs/2.x/get-started/installation/#using-create-nuxt-app"&gt;CLI&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;To get started, run the following using your package manager of choice: &lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-nuxt-app &amp;lt;project-name&amp;gt;
//or
yarn create nuxt-app &amp;lt;project-name&amp;gt;
//or
npm init nuxt-app &amp;lt;project-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Ensure you replace &lt;code&gt;&amp;lt;project-name&amp;gt;&lt;/code&gt; with the name of your project (app). &lt;/p&gt;

&lt;p&gt;Once installation is complete, Nuxt will present you with a series of questions to help configure your application for development, including name, Nuxt options, user interface (UI) framework, TypeScript, linter, testing framework, and the like. &lt;/p&gt;

&lt;p&gt;Pick what you love to use but ensure you select rendering mode "Universal (SSR / SSG)" and deployment target "Static (Static/JAMStack hosting)." &lt;/p&gt;

&lt;p&gt;Once you've completed your project, &lt;code&gt;cd&lt;/code&gt; into your new project and start a local development server by running &lt;code&gt;yarn dev&lt;/code&gt;. &lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd blog
yarn dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#connecting-sanity-with-nuxtjs-app"&gt;
  &lt;/a&gt;
  Connecting Sanity with Nuxt.js App
&lt;/h2&gt;

&lt;p&gt;To use Sanity data in Nuxt, you need to install Sanity's @sanity/nuxt plugin to your Nuxt project, and few dependencies, by running the following command in your project's root directory: &lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn add @nuxtjs/sanity @sanity/client @sanity/image-url
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;@nuxtjs/sanity&lt;/code&gt; — &lt;a href="https://sanity.nuxtjs.org/"&gt;nuxt/sanity&lt;/a&gt; enables us to access text, images, and other media with Nuxt and the Sanity headless CMS.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;@sanity/client&lt;/code&gt; — &lt;a href="https://www.npmjs.com/package/@sanity/client"&gt;Sanity Client&lt;/a&gt; is the official JavaScript client by Sanity. You can use it both in Node.js and modern browsers.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;@sanity/image-url&lt;/code&gt; — This &lt;a href="https://sanity.nuxtjs.org/helpers/images#using-sanityimage-url"&gt;helper library&lt;/a&gt; generates image URLs and performs helpful image transformations through the Sanity asset pipeline. Read more in the official &lt;a href="https://www.sanity.io/docs/image-url"&gt;docs&lt;/a&gt;. There is also an easier-to-install &lt;a href="https://sanity.nuxtjs.org/helpers/images"&gt;alternative&lt;/a&gt; that works for Nuxt.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once these packages are installed, we'll have to enable the module in our Nuxt configuration (&lt;code&gt;nuxt.config.js&lt;/code&gt;).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;buildModules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@nuxtjs/sanity/module&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To get started, we need to add the Sanity configuration. @nuxtjs/sanity looks for a sanity.json file in your project root directory. Just copy over the sanity.json from your CMS, and you're fully configured. You can learn more about this in the official &lt;a href="https://sanity.nuxtjs.org/getting-started/quick-start"&gt;documents&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Finally, we need to update the Cross-Origin Resource Sharing (CORS) origin for our app to work. Visit &lt;a href="https://www.sanity.io/teams"&gt;Sanity Teams&lt;/a&gt; and click on your Sanity project. On your project's dashboard, click on &lt;strong&gt;Settings → API settings,&lt;/strong&gt; then add your site address to the CORS origins field. For example, &lt;a href="http://localhost:3000"&gt;http://localhost:3000&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yaj-GSIf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_F7CFB39699BD1AAA7EC1C60D617ED97343D10788FF04D44E5E03B84C1B6A75F8_1622184705119_04.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yaj-GSIf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_F7CFB39699BD1AAA7EC1C60D617ED97343D10788FF04D44E5E03B84C1B6A75F8_1622184705119_04.JPG" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You're now good to go! &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#building-a-books-list-app"&gt;
  &lt;/a&gt;
  Building a books list app
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Es8_VRBo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_F7CFB39699BD1AAA7EC1C60D617ED97343D10788FF04D44E5E03B84C1B6A75F8_1622128392688_Travel%2Band%2BGuide%2BFacebook%2BCover.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Es8_VRBo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_F7CFB39699BD1AAA7EC1C60D617ED97343D10788FF04D44E5E03B84C1B6A75F8_1622128392688_Travel%2Band%2BGuide%2BFacebook%2BCover.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this app, we use two pages: the index page for all books and the slug page to display each book. We also added the about page, but it's not necessary for this tutorial. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#display-all-books-on-the-homepage"&gt;
  &lt;/a&gt;
  Display all books on the Homepage
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;pages&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;vue&lt;/span&gt;

    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;header&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;head&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Logo&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Books&lt;/span&gt; &lt;span class="nx"&gt;Note&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/b&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/header&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;section&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;body&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;top-label&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nx"&gt;You&lt;/span&gt; &lt;span class="nx"&gt;currently&lt;/span&gt; &lt;span class="nx"&gt;have&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;strong&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;books&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/strong&amp;gt; Books&lt;/span&gt;&lt;span class="err"&gt;!
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;books&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;book in books&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;book.id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;NuxtLink&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;link&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;book.slug.current&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;book&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt;
                    &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;$urlFor(book.bookcover)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
                    &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;book.bookname&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
                    &lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;lazy&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
                    &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;book-img&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
                  &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
                  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;book-info&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bookname&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/b&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;author&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;author&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;desc&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                      &lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/NuxtLink&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/section&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;footer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;NuxtLink&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/about&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;abt-icon&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;About&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/NuxtLink&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/footer&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/template&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;groq&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@nuxtjs/sanity&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;asyncData&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;$sanity&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;groq&lt;/span&gt;&lt;span class="s2"&gt;`*[_type == "books"]`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;books&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;$sanity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;books&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;According to official &lt;a href="https://www.sanity.io/docs/groq"&gt;Sanity documentation&lt;/a&gt;, Sanity uses Graph-Relational Object Queries (GROQ) to query data. GROQ is a declarative language designed to query collections of largely schema-less JSON documents.  &lt;/p&gt;

&lt;p&gt;In the above code, in the script section, the first thing we did was import the GROQ from &lt;code&gt;@nuxtjs/sanity&lt;/code&gt;. We then fetched all books from Sanity so we can loop the array using a &lt;code&gt;v-for directive&lt;/code&gt; (which you can find in the template section).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;asyncData&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;$sanity&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;groq&lt;/span&gt;&lt;span class="s2"&gt;`*[_type == "books"]`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;books&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;$sanity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;books&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this point, we have successfully  fetched all our books from Sanity and rendered them to our template section. However, if you attempt running this code, the image won't show and might even log an error in the console. &lt;/p&gt;

&lt;p&gt;Let's see how to display images in Nuxt from Sanity. You can do this using the &lt;code&gt;@sanity/image-url&lt;/code&gt;, which we installed earlier. The &lt;code&gt;@sanity/image-url&lt;/code&gt; is a plugin, and we register it globally in Nuxt since we use it in two different files. &lt;/p&gt;

&lt;p&gt;To register this plugin globally, you need to create a file in the plugins directory of your Nuxt project, then import &lt;code&gt;imageUrlBuilder&lt;/code&gt; from &lt;code&gt;@sanity/image-url&lt;/code&gt;. Finally, configure this plugin. &lt;/p&gt;

&lt;p&gt;We created a file and named it “&lt;code&gt;sanity-image-builder.js&lt;/code&gt;” in the plugins folder. Once you have created the file &lt;code&gt;plugins/sanity-image-builder.js&lt;/code&gt;, paste the code below into the file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;imageUrlBuilder&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@sanity/image-url&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;$sanity&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;inject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;builder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;imageUrlBuilder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$sanity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;urlFor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;format&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nx"&gt;inject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;urlFor&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;urlFor&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this, your image will work properly, but you will bind &lt;code&gt;src&lt;/code&gt; and use of &lt;code&gt;*$urlFor*&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt;
      &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;$urlFor(book.bookcover)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;book.bookname&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;lazy&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;book-img&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;Note:&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;You can give your file any name, but so you don't get confused when you use many plugins, this convention might be the best.&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;Finally, we use the slug and create a dedicated &lt;code&gt;_slug&lt;/code&gt; file in our pages folder to have dynamic routes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;NuxtLink&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;link&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;book.slug.current&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/NuxtLink&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This should Output something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rpINkXVH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_F7CFB39699BD1AAA7EC1C60D617ED97343D10788FF04D44E5E03B84C1B6A75F8_1622182291313_02.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rpINkXVH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_F7CFB39699BD1AAA7EC1C60D617ED97343D10788FF04D44E5E03B84C1B6A75F8_1622182291313_02.JPG" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-dynamic-routes-for-books"&gt;
  &lt;/a&gt;
  Create dynamic routes for books
&lt;/h2&gt;

&lt;p&gt;On our &lt;code&gt;index&lt;/code&gt; page, we rendered a &lt;code&gt;NuxtLink&lt;/code&gt; for each book in our dataset, using the slug value to set the URL for each book. This means if we create a blog post called "heroes only" and set the slug to &lt;code&gt;heroes-only&lt;/code&gt;, our Nuxt application should handle a request to the &lt;code&gt;page/heros-only&lt;/code&gt; and retrieve the corresponding book information from Sanity. &lt;/p&gt;

&lt;p&gt;Nuxt makes this possible by building in support for these kinds of pages. You create a new file in pages in the format &lt;code&gt;_slug.vue&lt;/code&gt;. In your page's &lt;code&gt;asyncData&lt;/code&gt; function, you can then use the &lt;code&gt;params&lt;/code&gt; argument to reference the slug. Let's try this and see if it will work:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;pages&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;_slug&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;vue&lt;/span&gt;

    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;asyncData&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;$sanity&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// { slug: "heros-only" }&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's now use the code below to query Sanity and fetch only content related to this &lt;code&gt;slug&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;pages&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;_slug&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;vue&lt;/span&gt;

    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;book&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;header&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;click&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;$router.back()&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Back&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;head&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt;
              &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;$urlFor(book.bookcover)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
              &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;book.bookname&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
              &lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;lazy&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
              &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;book-img&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;book-info&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bookname&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/b&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;author&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;author&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;desc&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/header&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;section&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;body&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;top-label&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nx"&gt;My&lt;/span&gt; &lt;span class="nx"&gt;Notes&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;info&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;book.mynotes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;SanityContent&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;blocks&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;book.mynotes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;info&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;No&lt;/span&gt; &lt;span class="nx"&gt;notes&lt;/span&gt; &lt;span class="nx"&gt;available&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/section&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;footer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;NuxtLink&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/about&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;abt-icon&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;About&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/NuxtLink&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/footer&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/template&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;groq&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@nuxtjs/sanity&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;SanityContent&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@nuxtjs/sanity/dist/components/sanity-content&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;components&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;SanityContent&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;asyncData&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;$sanity&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;groq&lt;/span&gt;&lt;span class="s2"&gt;`*[_type == "books" &amp;amp;&amp;amp; slug.current == "&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"][0]`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;book&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;$sanity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;book&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the code above, the only major difference is the query line where we check for both the &lt;code&gt;_type&lt;/code&gt; of books (meaning the book database ) and also the &lt;code&gt;slug&lt;/code&gt; which is unique to only one book.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;asyncData&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;$sanity&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;groq&lt;/span&gt;&lt;span class="s2"&gt;`*[_type == "books" &amp;amp;&amp;amp; slug.current == "&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"][0]`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;book&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;$sanity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;book&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We also use &lt;code&gt;block contents&lt;/code&gt;, though a simple one. You can learn more about Portable texts &lt;a href="https://www.sanity.io/guides/3-things-you-need-to-know-when-getting-started-with-portable-text"&gt;on&lt;/a&gt; Santiy's website. We imported &lt;code&gt;SanityContent&lt;/code&gt; from &lt;code&gt;@nuxtjs/sanity&lt;/code&gt;, making the process simple compared to using plugins, which also exists for images making the whole process of image rendering easier. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Note:&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;The approach also exists for images, but we decided to use both. You can check out the&lt;/em&gt; &lt;code&gt;*@nuxtjs/sanity*&lt;/code&gt; &lt;em&gt;image formatting docs&lt;/em&gt; &lt;a href="https://sanity.nuxtjs.org/helpers/images"&gt;&lt;em&gt;on&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Sanity's website.&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;After you  import &lt;code&gt;SanityContent&lt;/code&gt; from &lt;code&gt;@nuxtjs/sanity&lt;/code&gt;, you can now use it in that page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;info&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;book.mynotes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;SanityContent&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;blocks&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;book.mynotes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;info&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;No&lt;/span&gt; &lt;span class="nx"&gt;notes&lt;/span&gt; &lt;span class="nx"&gt;available&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We only used &lt;code&gt;SanityContent&lt;/code&gt; on line two. We used an &lt;code&gt;if-else&lt;/code&gt; statement to make the app more friendly. &lt;/p&gt;

&lt;p&gt;This should output something like this when you click on any book: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zoqkemPr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_F7CFB39699BD1AAA7EC1C60D617ED97343D10788FF04D44E5E03B84C1B6A75F8_1622182369876_03.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zoqkemPr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_F7CFB39699BD1AAA7EC1C60D617ED97343D10788FF04D44E5E03B84C1B6A75F8_1622182369876_03.JPG" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#styling-our-app"&gt;
  &lt;/a&gt;
  Styling our app
&lt;/h2&gt;

&lt;p&gt;We have explained how to do this without styling the app, so your results may not match what you see in the images above. To style this app, you can check out &lt;a href="https://github.com/olawanlejoel/books-note"&gt;this repository&lt;/a&gt; to get the styling we used for each page, component, and even the images. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#deploy-nuxt-app-to-netlify"&gt;
  &lt;/a&gt;
  Deploy Nuxt App To Netlify
&lt;/h1&gt;

&lt;p&gt;Finally, to round up this guide, let's deploy both Sanity Studio and our Nuxt.js app, so this is available online for everybody to access. &lt;/p&gt;

&lt;p&gt;Netlify is a Git-based workflow and serverless platform to build, deploy, and collaborate on web apps. This all-in-one platform automates modern web projects. You can use many other platforms instead, for example, Vercel, Cloudflare Pages, and more. &lt;/p&gt;

&lt;p&gt;To deploy to Netlify, we must first push our codes to GitHub. For this, we will use our terminal and some Git commands. In case you are not familiar with Git, you can check out this &lt;a href="https://dev.to/olawanle_joel/git-github-explained-like-i-m-five-58f2"&gt;series on DEV Community&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;First, let's create a repository on GitHub by clicking the New button or the plus on the top right corner. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qiSaZw_E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_F7CFB39699BD1AAA7EC1C60D617ED97343D10788FF04D44E5E03B84C1B6A75F8_1622183437814_04.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qiSaZw_E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_F7CFB39699BD1AAA7EC1C60D617ED97343D10788FF04D44E5E03B84C1B6A75F8_1622183437814_04.JPG" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then, fill in the necessary information and click "create repository." &lt;/p&gt;

&lt;p&gt;Next, open your terminal. Let's start by creating a new branch, then stage all our files so we can commit our changes using the following commands: &lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git init #initialize repository
git checkout -b main # create a main branch 
git add . # stage all files for this commit 
git commit -m "first commit" # commit the changes
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Once this completes, we can now push to the created remote repository using the following commands: &lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git branch -M main
git remote add origin https://github.com/olawanlejoel/books-note.git #this would be differnt based on your created repository
git push -u origin main
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;When you refresh your repository, your code should show up!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4sDr0Rvo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_F7CFB39699BD1AAA7EC1C60D617ED97343D10788FF04D44E5E03B84C1B6A75F8_1622183949626_04.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4sDr0Rvo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_F7CFB39699BD1AAA7EC1C60D617ED97343D10788FF04D44E5E03B84C1B6A75F8_1622183949626_04.JPG" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, let's deploy to Netlify. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://netlify.com/"&gt;Log in to Netlify or sign up&lt;/a&gt; if it's your first time with your GitHub account. Once that is successful, Netlify will redirect you to your team page, where you can get a repo from GitHub and deploy. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O3UIh4pW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_6C91798C13448244909037C6046123F9B02B69694614F12E40B9600F204F1C81_1620370035403_5.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O3UIh4pW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_6C91798C13448244909037C6046123F9B02B69694614F12E40B9600F204F1C81_1620370035403_5.JPG" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on "New site from Git." A new page will appear to choose the Git provider where your site's source code is hosted. In our case, we choose GitHub. Once it's authorized, you can now search for the GitHub repository. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5hYl32k8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_F7CFB39699BD1AAA7EC1C60D617ED97343D10788FF04D44E5E03B84C1B6A75F8_1622184178603_04.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5hYl32k8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_F7CFB39699BD1AAA7EC1C60D617ED97343D10788FF04D44E5E03B84C1B6A75F8_1622184178603_04.JPG" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you click on the repository, it brings you to a page where you set your site settings, change the build command to Nuxt generate, and click the "Deploy Site" button. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P_yFCmC8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_F7CFB39699BD1AAA7EC1C60D617ED97343D10788FF04D44E5E03B84C1B6A75F8_1622187469245_04.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P_yFCmC8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_F7CFB39699BD1AAA7EC1C60D617ED97343D10788FF04D44E5E03B84C1B6A75F8_1622187469245_04.JPG" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When your deployment is successful, you should get a URL for anyone to access your app. You can now deploy your Sanity Studio. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deploy-sanity-studio-and-update-the-cors-origin"&gt;
  &lt;/a&gt;
  Deploy sanity studio and update the CORS origin
&lt;/h2&gt;

&lt;p&gt;Sanity enables you to host your Studio, giving you a nice my-company.Sanity.studio URL. Since the Studio runs in a browser and communicates with the Sanity API, you can also host it yourself or on your favorite hosting service. &lt;/p&gt;

&lt;p&gt;To host with Sanity, run the following command in your studio folder. &lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sanity deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Once you run this command, Sanity asks you to choose a unique hostname for your Studio. &lt;/p&gt;

&lt;p&gt;Finally, we need to update the CORS origin for our app to work.  &lt;/p&gt;

&lt;p&gt;Visit &lt;a href="https://www.sanity.io/teams"&gt;https://www.sanity.io/teams&lt;/a&gt; and click on your Sanity project. On your project's dashboard, click on &lt;strong&gt;Settings → API settings,&lt;/strong&gt; then add your site address to the CORS origins field. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JCRmqQ4B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_F7CFB39699BD1AAA7EC1C60D617ED97343D10788FF04D44E5E03B84C1B6A75F8_1622187774270_04.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JCRmqQ4B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_F7CFB39699BD1AAA7EC1C60D617ED97343D10788FF04D44E5E03B84C1B6A75F8_1622187774270_04.JPG" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: Sometimes, this happens automatically. You can confirm using&lt;/em&gt; &lt;a href="https://www.sanity.io/teams"&gt;&lt;em&gt;https://www.sanity.io/teams&lt;/em&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Congratulations! Our application is now running smoothly online. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;In this guide, we built a book note application using Nuxt.js and Sanity. We used  Sanity Studio to edit our data. &lt;/p&gt;

&lt;p&gt;This guide will help you set up your own version of this project to improve and add more features and functions. &lt;/p&gt;

&lt;p&gt;Here are a few ideas to get you started: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a category schema and link to the books &lt;/li&gt;
&lt;li&gt;Add filter, sort, and search functionality, making use of categories &lt;/li&gt;
&lt;li&gt;Style the app using UI libraries like &lt;a href="https://vuetifyjs.com/en/"&gt;Vuetify&lt;/a&gt;, &lt;a href="https://bootstrap-vue.org/"&gt;BootstrapVue&lt;/a&gt;, or Tailwind &lt;/li&gt;
&lt;li&gt;Make specific schema fields required &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To get started making this or another Nuxt.js Sanity project, explore the resources below.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#useful-resources"&gt;
  &lt;/a&gt;
  Useful resources:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package/vue-sanity"&gt;vue-sanity - Composition API methods to incorporate Sanity into a Vue project.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.sanity.io/blog/headless-cms-explained"&gt;Headless CMS explained in 2 minutes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.sanity.io/guides/the-event-template"&gt;Get started with the Nuxt.js event website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sanity.nuxtjs.org/"&gt;Nuxt Sanity&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Happy coding!&lt;/p&gt;

</description>
      <category>nuxt</category>
      <category>javascript</category>
      <category>sanity</category>
      <category>headlesscms</category>
    </item>
    <item>
      <title>10 npm Commands that every developer must know</title>
      <author>Gurshehzad Singh</author>
      <pubDate>Mon, 21 Jun 2021 16:22:00 +0000</pubDate>
      <link>https://dev.to/gurshehzadsingh/10-npm-commands-that-every-developer-must-know-4gmn</link>
      <guid>https://dev.to/gurshehzadsingh/10-npm-commands-that-every-developer-must-know-4gmn</guid>
      <description>&lt;p&gt;&lt;strong&gt;NPM&lt;/strong&gt; stands for &lt;strong&gt;Node Package Manager&lt;/strong&gt; and it is the package manager for the Node JavaScript platform. It put modules in place so that node can find them, and manages dependency conflicts intelligently. Most commonly, it is used to publish, discover, install, and develop node programs.&lt;/p&gt;

&lt;p&gt;Some Important npm commands every developer should know are:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1) npm i&lt;/strong&gt;&lt;br&gt;
 Here i stands for &lt;em&gt;install&lt;/em&gt;. It installs all the packages &lt;br&gt;
 mentioned in package.json.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2) npm install -production&lt;/strong&gt;&lt;br&gt;
 It installs all the packages mentioned in package.json, except &lt;br&gt;
 the dev dependencies.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3) npm i lodash&lt;/strong&gt;&lt;br&gt;
 It installs a package with name of &lt;em&gt;"lodash"&lt;/em&gt;, you can use your &lt;br&gt;
 favorite package name.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4) npm install --save-dev lodash&lt;/strong&gt;&lt;br&gt;
 It installs the specific package as a dev dependency, in my case &lt;br&gt;
 the name is &lt;em&gt;"lodash"&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5) npm list&lt;/strong&gt;&lt;br&gt;
 It lists the versions and name of all dependencies in the current &lt;br&gt;
 directory.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6) npm update&lt;/strong&gt;&lt;br&gt;
 It updates all the production packages in the current directory.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7) npm install -g nodemon&lt;/strong&gt;&lt;br&gt;
 It installs a package globally on your machine, with -g flag. In &lt;br&gt;
 my case, nodemon will be installed globally.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8) npm remove lodash&lt;/strong&gt;&lt;br&gt;
 It uninstalls / removes a previously installed node module in the &lt;br&gt;
 current directory.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;9) npm -v&lt;/strong&gt;&lt;br&gt;
 It displays the npm version installed on your system.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;10) npm doctor&lt;/strong&gt;&lt;br&gt;
 It checks our environment so that our npm installation has what &lt;br&gt;
 it needs to manage our JavaScript packages.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>npm</category>
      <category>node</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Building a Reading List web app with Node, Preact, and Tailwind CSS</title>
      <author>Ingo Steinke</author>
      <pubDate>Mon, 21 Jun 2021 16:18:33 +0000</pubDate>
      <link>https://dev.to/ingosteinke/building-a-reading-list-web-app-with-node-preact-and-tailwind-css-44pa</link>
      <guid>https://dev.to/ingosteinke/building-a-reading-list-web-app-with-node-preact-and-tailwind-css-44pa</guid>
      <description>&lt;p&gt;&lt;strong&gt;This is a work in progress&lt;/strong&gt;, last updated on 21 June 2021. I will only highlight a few code examples and helpful links in this article. You can see the full code and commit messages &lt;a href="https://github.com/openmindculture/bookstack-reading-list-app"&gt;on GitHub&lt;/a&gt;. I will add a link to a live demo once (if ever) I have published a working draft.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#motivation"&gt;
  &lt;/a&gt;
  Motivation
&lt;/h2&gt;

&lt;p&gt;I finally wanted to take some time for proper research (and some lazy trial and error based on tutorials and example code) to set up a proper full-stack application.&lt;/p&gt;

&lt;p&gt;Beginning with a &lt;a href="https://github.com/openmindculture/tailwind-jit-mern"&gt;general example / starter setup&lt;/a&gt; useful for several projects, forking the actual side project (&lt;strong&gt;bookstack-reading-list-app&lt;/strong&gt;) once things get more specific.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-bother"&gt;
  &lt;/a&gt;
  Why bother?
&lt;/h2&gt;

&lt;p&gt;In the past, I had worked with legacy code or did not take the time for proper research, which even made me suspect I did not like React or even JavaScript single page applications at all. But as many other developers pointed out, there is more than one way to do things, especially when it comes to React.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#finding-out"&gt;
  &lt;/a&gt;
  Finding out
&lt;/h2&gt;

&lt;p&gt;When I am free to decide everything on my own (thus having to do so) I swing back and forth between joy of discovery and getting stressed out. So many technologies and buzzwords, so much apparent over-complexity.&lt;/p&gt;

&lt;p&gt;Fueled by my stress, I find the energy not to simply reproduce some outdated tutorials from 2018, but to try and build only what is actually reasonable now.&lt;/p&gt;

&lt;p&gt;Besides learning, experience, and hopefully some fun, the result should be an actual project to show, plus a scaffold that might save me some time in future projects. Time that I already invested when researching and building my side project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-build-an-spa-that-does-not-suck"&gt;
  &lt;/a&gt;
  How to Build an SPA that does not suck
&lt;/h2&gt;

&lt;p&gt;Trying to use &lt;a href="https://tailwindcss.com"&gt;Tailwind&lt;/a&gt;, &lt;a href="https://www.typescriptlang.org"&gt;TypeScript&lt;/a&gt;, and &lt;a href="https://reactjs.org"&gt;React&lt;/a&gt; in a proper way, or at least in a way that fits my experience and requirements seems a good way to make up my own mind about technology that seems to elicit a lot of controversy in the web developer community.&lt;/p&gt;

&lt;p&gt;Thanks to my friend &lt;a href="https://github.com/retinafunk"&gt;Andy Weisner (Retinafunk)&lt;/a&gt; for convincing me that Utility CSS can be nice and useful even (or especially) for experienced web developers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#slow-pace-applications"&gt;
  &lt;/a&gt;
  Slow Pace Applications
&lt;/h3&gt;

&lt;p&gt;Many single page applications turn out to be "slow pace applications" built with a back-end development mindset that fails to care about usability, accessibility, and page speed / web performance. Add arbitrary syntax rules like AirBnB's version of ES6, bloated syntax horror like ReactPropTypes or styled components, and try to "fix" the mess by adding pre-rendering which optimizes for largest content paint on the cost of first input delay and making built time so slow that it feels like developing a monolithic Java application.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href="https://twitter.com/merelyanna"&gt;Anna Backs&lt;/a&gt; and &lt;a href="https://twitter.com/merelyChristina"&gt;Christina Zenzes&lt;/a&gt; for the term "slow pace application" and for giving me back some hope that it's possible to write an SPA that does not suck!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#i-dont-create-react-app"&gt;
  &lt;/a&gt;
  I don't "Create React App"
&lt;/h2&gt;

&lt;p&gt;Originally intended to use tailwind with create-react-app,&lt;br&gt;
after trying to solve conflicts and incompatibilities,&lt;br&gt;
I rebased the starter on &lt;a href="https://github.com/retinafunk/tailwind-jit"&gt;retinafunk's tailwind-jit-starter&lt;/a&gt; and decided to drop old technology like webpack in favour of smaller, more elegant solutions, which in consequence lead to the decision to drop React in favour of &lt;a href="https://preactjs.com"&gt;preact&lt;/a&gt;, &lt;a href="https://dev.to/aalises/preact--typescript--parcel--redux-zero-rebuilding-the-qmenta-front-end-focusing-on-performance-and-minimalism-1lnp"&gt;focussing on performance and minimalism&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#zero-configuration-unless-"&gt;
  &lt;/a&gt;
  "Zero Configuration" unless ...
&lt;/h2&gt;

&lt;p&gt;After trying parcel, which claims to be a "zero configuration" bundler, we ended up using snowpack. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#parcel"&gt;
  &lt;/a&gt;
  Parcel 📦
&lt;/h3&gt;

&lt;p&gt;I started with parcel 1, after too many deprecation warnings of required node dependencies, tried parcel 2 although it is still labelled beta (but then again, open vpn used to be "beta" for ages, while working fine in production).&lt;/p&gt;

&lt;p&gt;At that step, my starter project had become a combination of at least three different projects, so copying and pasting from one tutorial is not guaranteed to work in another setup. I got a lot of warnings about missing types and missing support for the "experimental syntax 'jsx'".&lt;/p&gt;

&lt;p&gt;"Support for the experimental syntax 'jsx' isn't currently enabled"&lt;/p&gt;

&lt;p&gt;The suggestions how to fix were misleading in my case, as the crucial part was using .jsx or .tsx file extensions for every file that contains JSX. As I never actually used preact before, it was also unclear to that the seemingly unused import { h } from 'preact' actually makes sense once JSX is internally transpiled to an h() function.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#snowpack"&gt;
  &lt;/a&gt;
  Snowpack ❄️
&lt;/h3&gt;

&lt;p&gt;Switching from parcel to snowpack, we were able to simplify the setup according the snowpack's preact typescript template.&lt;/p&gt;

&lt;p&gt;Now the preact typescript server was running, we had to bring back our tailwind configuration from the original template&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;remove non-tailwind css&lt;/li&gt;
&lt;li&gt;configure postcss to use tailwind&lt;/li&gt;
&lt;li&gt;adapt build and include paths&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#frontend-app-based-on-3-templates"&gt;
  &lt;/a&gt;
  Frontend App based on 3 templates
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Preact Default using preact router created by&lt;br&gt;
&lt;code&gt;preact cli default&lt;/code&gt; ?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;snowpack preact type script starter&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;tailwind jit starter by retinafunk&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#next"&gt;
  &lt;/a&gt;
  next
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#finish-frontend-app"&gt;
  &lt;/a&gt;
  finish front-end app
&lt;/h3&gt;

&lt;p&gt;Cleanup, fix typescript warnings (missing types for components), configure production build, add tests and ensure accessibility and performance.&lt;/p&gt;

&lt;p&gt;"Could not find a declaration file for module" is another misleading error message, as we don't need to provide &lt;code&gt;.d.ts&lt;/code&gt; files when we can provide type information directly in our code.&lt;/p&gt;

&lt;p&gt;Converting preact default example code to typescript was easy. Functional components without any properties only need a definition as a function component. Once provided, our editors already tells us to rename the file to .tsx which does not break any import statement, as file extensions have to be left out anyway (so everything still works after implicit transpiling from tsx back to jsx internally).&lt;/p&gt;

&lt;p&gt;Simple property type definitions can be provided inline, without creating interfaces. Our TypeScript code is much more compact than the same definition written using React.PropTypes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;FunctionComponent&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;preact&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Profile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;FunctionComponent&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Profile&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also make sure the application will work in a sub folder as part of a monorepo, as some configurations were said to work "only in the root directory" of a project (which does not make sense, as I never save anything to "/", and any application should not care where its root folder is mounted).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#making-our-app-more-accessible-performing-and-search-engine-friendly-by-design"&gt;
  &lt;/a&gt;
  Making our app more accessible, performing, and search engine friendly by design:
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#purge-tailwind-css"&gt;
  &lt;/a&gt;
  purge tailwind css
&lt;/h2&gt;

&lt;p&gt;so that only styles are exported which are actually used,&lt;br&gt;
make sure purge finds all file,&lt;br&gt;
make sure not to write dynamic styles in an undectable way (add example),&lt;br&gt;
load css in html head, not in javascript, this might unblock load speed by allowing parallel download of css and javascript, and it also allows us to define styled static page elements outside of our (p)react app, like a footer with links to external or static resources. This also allows search engines which do not run javascript, to find some content apart from the noscript text, which we also want to change into something that our customers might find helpful on search engine result page.&lt;/p&gt;

&lt;p&gt;We can define "critical" ("above the fold") CSS (todo link) and load web fonts in the head as well. Our HTML markup now looks like this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;src/index.html&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Tailwind JIT MERN App Starter&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;style &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;/* critical "above the fold" styles to prevent layout shift */&lt;/span&gt;
    &lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'Alegreya'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#7fb71e&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"preconnect"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://fonts.gstatic.com"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://fonts.googleapis.com/css2?family=Alegreya:wght@400;700&amp;amp;display=swap"&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"index.css"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"module"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"index.js"&lt;/span&gt; &lt;span class="na"&gt;defer&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- add meta information like favicon, twitter cards etc. here --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"root"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;footer&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"bg-black text-white"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      Static footer content
      &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://example.com"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;example.com&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/footer&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;aside&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;noscript&amp;gt;&lt;/span&gt;You need to enable JavaScript to run this app.&lt;span class="nt"&gt;&amp;lt;/noscript&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/aside&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#you-need-to-enable-javascript-to-run-this-app"&gt;
  &lt;/a&gt;
  You need to enable JavaScript to run this app?
&lt;/h3&gt;

&lt;p&gt;This is technically true, but probably not helpful to anyone. There should at least be any information about the app, maybe even a statically rendered snapshot of some highlighted content, which will help real people and could benefit search engine optimization as well.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#looking-up-class-names"&gt;
  &lt;/a&gt;
  Looking up class names
&lt;/h3&gt;

&lt;p&gt;Styling my app, I had to look up Tailwind's class names instead of writing CSS directly, which I mostly know without looking up, but not all of the time.&lt;/p&gt;

&lt;p&gt;Do I still think it was a good idea to choose Tailwind? Yes, because the resulting code ist easieer to maintain, while hand-coded CSS can turn into a mess quite easily, even in a very small project.&lt;/p&gt;

&lt;p&gt;Es gibt so ein paar Dinge, die an Frontend Apps nerven. Frontend Routing = reload einer URL funktioniert nicht im Preview Server (und muss vermutlich auch an nginx / Apache / AWS irgendwie exportiert oder aber prerendered werden), und durch JSX oder falsches Minification funktioniert line break nicht mehr als whitespace character, so dass einige Elemente ungewollte aneinanderkleben. Aber das sind halt auch nur Details...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#test-and-story-driven-design"&gt;
  &lt;/a&gt;
  Test and Story Driven Design 🌲🌸
&lt;/h3&gt;

&lt;p&gt;Storybook: &lt;a href="https://storybook.js.org/docs/preact/get-started/install"&gt;https://storybook.js.org/docs/preact/get-started/install&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Test setup: todo&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;unit tests&lt;/li&gt;
&lt;li&gt;integration tests&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#web-components"&gt;
  &lt;/a&gt;
  Web Components
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://preactjs.com/guide/v10/web-components/"&gt;Preact's tiny size and standards-first approach make it a great choice for building web components.&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#go-fullstack"&gt;
  &lt;/a&gt;
  go full-stack
&lt;/h3&gt;

&lt;p&gt;Then add the back-end application. After moving our front-end code in a folder of its own, I learned that you can't simple make a script defined in a top-level package.json execute another script defined in another package.json which is inside a sub folder (is it not called directory anymore?)&lt;/p&gt;

&lt;p&gt;We will solve this using workspaces to create a so-called monorepo later. Once we are inside our sub folder, the front-end app still works as it used to, like when called by&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cd client &amp;amp;&amp;amp; yarn start&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#express-server"&gt;
  &lt;/a&gt;
  Express Server
&lt;/h2&gt;

&lt;p&gt;Jatin's tutorial suggests to set up Babel to use ES6 syntax in node, which I could not believe is still true in 2021, and luckily it isn't! But what about TypeScript, or do node (or deno) offer native typing without any extensions?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#es6-and-typescript-in-nodejs-without-babel"&gt;
  &lt;/a&gt;
  ES6 and TypeScript in NodeJS without Babel
&lt;/h2&gt;

&lt;p&gt;While deno supports TypeScript "out of the box", I was still curious how to use modern syntax in node. While the web is full of answers stating to "simply" start node with the &lt;code&gt;--harmony&lt;/code&gt;&lt;code&gt;flag, little was written about how to achieve this descriptively inside our&lt;/code&gt;package.json`.&lt;/p&gt;

&lt;p&gt;But no surprise, this is all just oudated code? Node already supports ES6 by default, and modern modules once we specify &lt;code&gt;"type": "module"&lt;/code&gt; in our &lt;code&gt;package.json&lt;/code&gt;? So what about types(cript) then?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#builtin-middleware"&gt;
  &lt;/a&gt;
  builtin middleware
&lt;/h3&gt;

&lt;p&gt;Any common use case is probably built into latest express core. Apart from &lt;code&gt;CORS&lt;/code&gt; (see below), a classic tutorial boilerplate code to install &lt;code&gt;bodyParser&lt;/code&gt; as an extra module is also obsolete for common cases. Thanks to &lt;a href="https://dev.to/taylorbeeston/you-probably-don-t-need-body-parser-in-your-express-apps-3nio"&gt;Taylor Beeston for pointing it out&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#connecting-both-apps-locally"&gt;
  &lt;/a&gt;
  Connecting both apps locally
&lt;/h2&gt;

&lt;p&gt;For al local development dsetup&lt;/p&gt;

&lt;p&gt;adding a fetch() method to the frontend. Copy and paste boilerplate code &lt;code&gt;const asJson = r =&amp;gt; r.json();&lt;/code&gt;. Reading the warning that &lt;code&gt;r&lt;/code&gt; implicitly "has the 'any' type" makes me wonder, what type to expect anyway. First google result:&lt;/p&gt;

&lt;p&gt;"The response of a fetch() request is a Stream object, which means that when we call the json() method, a Promise is returned since the reading of the stream will happen asynchronously."&lt;/p&gt;

&lt;p&gt;Still wondering, without any real TS experience, how to specify it? Simply write new Stream, or more simply, &lt;code&gt;asJson&amp;lt; r: stream&amp;gt;&lt;/code&gt; or rather &lt;code&gt;r: Stream&lt;/code&gt; as this is surely no simple type? But, not so quickly: "Cannot find name 'Stream'. Did you mean 'MSStream'"?&lt;/p&gt;

&lt;p&gt;Anscheinend ist es aber auch gar nicht üblich, jede Variable zu typen, wenn ich mir mal Code Examples mit TypeScript anschaue. Das implicit any scheint doch toleriert zu werden. &lt;/p&gt;

&lt;p&gt;Also don't forget CORS&lt;br&gt;
&lt;code&gt;res.header("Access-Control-Allow-Origin", "*");&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;and do we really need to restart the server after each change? Sure there is some sort of preview watcher available? Das war eine der beiden Aufgaben von nodemon, aber hier könnte man auch rollup einsetzen vgl. &lt;a href="https://hoangvvo.com/blog/node-es6-rollup"&gt;https://hoangvvo.com/blog/node-es6-rollup&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#production-grade"&gt;
  &lt;/a&gt;
  Production grade?
&lt;/h2&gt;

&lt;p&gt;A first glance at our simple server looks too naive in any possible way. While in a classic LAMPP stack we would probably use Apache or NGINX as a server and provide nothing but configuration to control some headers and rewrites and use a back-end language for the logic, it seems as if we wanted to reinvent the wheel when using node.&lt;/p&gt;

&lt;p&gt;Currently we only need to call one undefined or invalid route to make the server crash completely after putting out a detailled error message to a potential attacker.&lt;/p&gt;

&lt;p&gt;For a production setup we could use NGINX to serve both client and server app on the same domain, same (default public) port, routing all &lt;code&gt;/api&lt;/code&gt; requests to the backend, like &lt;a href="https://dev.to/asim_ansari7/deploy-a-react-node-app-to-production-on-aws-2gdf"&gt;Asim describes in the article on how to deploy a React + Node app to production on AWS&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#universal-shared-code"&gt;
  &lt;/a&gt;
  Universal / shared Code
&lt;/h2&gt;

&lt;p&gt;Why use back-end JavaScript at all? PHP has improved a lot in the past 10 years, and there are other popular languages like Go and Python, so why bother? We can avoid redundant code and share common business logic between front-end and back-end by using the same programming language inside the same repository (monorepo).&lt;/p&gt;

&lt;p&gt;What struck me was that I was not able to find much about how to avoid redundancy by providing a common data model instead of writing at least 2x, mongoose in the back-end and javascript in the front-end spa. Either nobody cares, or there is a good reason not to do it. I can imagine that this would introduce technical debt, coupling or even unintended downsides concerning front-end business logic. But why do I have to find out by trial and error?&lt;/p&gt;

&lt;p&gt;Hope to provide an answer and share my results of research and experiment after doing so, but maybe I will be just too lazy and give up. In a real-life customer project, I would not dare to try and rather stick to the proven ways for the sake of stability, but hey, this is one thing that side projects are for.&lt;/p&gt;

&lt;p&gt;It's probably not &lt;a href="https://stackoverflow.com/questions/36642065/data-models-and-business-logic-in-isomorphic-react-redux-express-mongo-app"&gt;"isomorphic" but "universal"&lt;/a&gt; btw.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#database"&gt;
  &lt;/a&gt;
  Database
&lt;/h2&gt;

&lt;p&gt;In Jatin's tutorial, shortly after stating that one reason for using MongoDB is to go full stack using only JavaScript, he suggests installing mongodb using homebrew on a mac.  While I understand that he was just talking about languages used (thus no SQL) I would not install anything natively at that point. So when npm does not offer mongo, why not try docker - that might even already be the solution how to manage that both locally for development now, and on aws in production later...&lt;/p&gt;

&lt;p&gt;Why do we even need a node server? We need a layer to ensure authentication and authorization, and probably simplify query syntax to provide either a REST API or a GraphQL middleware.&lt;/p&gt;

&lt;p&gt;We could also insert a proxy layer with haproxy, nginx, and ...cache (with the dotted logo) for load balancing and caching, but then again our backend should only provide light-weight JSON. Page rendering will be handled in the client. Assets should be hosted on a content delivery network.&lt;/p&gt;

&lt;p&gt;Also, if we use an existing cloud infrastructure like AWS, they will probably handle load balancing and caching in a better way than any hand-coded setup could do.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#architecture"&gt;
  &lt;/a&gt;
  Architecture
&lt;/h2&gt;

&lt;p&gt;So, after having started a proof of concept, we are ready to define our requirements. We want to build a partially isomorphic app without redundancy in data models, validation, formatting, and basic business logic.&lt;/p&gt;

&lt;p&gt;We want to adhere to standards and proven / best practices to prevent reinventing the wheel, using configuration and description over coding. Server security and stability, routing, RESTful communication should probably be available as standard solutions by now.&lt;/p&gt;

&lt;p&gt;Our app should be deployed in a distributed, scalable way to the "cloud", for example on Amazon Web Services.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#integrating-backend-stack"&gt;
  &lt;/a&gt;
  Integrating back-end stack
&lt;/h2&gt;

&lt;p&gt;After trying for several days (!) to use mongoose schemata, express and node together with TypeScript, I gave up for the moment, as literally no backend tutorial seems to use TS and it confused me a lot to get the types and interfaces right.&lt;/p&gt;

&lt;p&gt;As I want to concentrate on the front-end anyway, I will use TypeScript in the frontend only in the first version.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#installing-typescript"&gt;
  &lt;/a&gt;
  Installing typescript
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
yarn add -D typescript&lt;br&gt;
yarn add -D ts-node \@types/node \@types/express \@types/cors \@types/mongoose&lt;br&gt;
yarn tsc --init --target esnext --rootDir src --outDir build&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://stackoverflow.com/questions/57998762/run-nodemon-with-typescript-compiling"&gt;"Nodemon will detect and run .ts files with ts-node automatically now"&lt;/a&gt; triggered by the file extension, so we have to rename &lt;code&gt;server.js&lt;/code&gt; to &lt;code&gt;server.ts&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#react-annoyances"&gt;
  &lt;/a&gt;
  React Annoyances
&lt;/h2&gt;

&lt;p&gt;One of the most annoying misfeatures of typical react apps, in my personal view as an old-school web developer, is the concept of "Controlled Input".&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#controlled-input-wtf"&gt;
  &lt;/a&gt;
  Controlled Input WTF?!
&lt;/h3&gt;

&lt;p&gt;There are plenty of posts explaining what Controlled Input is and how to use it, but all of them fail to give me a valid reason WHY (actually they do, they want the SPA to be the "single source of truth" while in my view, the DOM should be the single source of truth at least for any user input.&lt;/p&gt;

&lt;p&gt;Controlled Components in my experience add a minimal delay i.e. sluggishness to the front-end and make working with form elements less straightforward and less accessible, as they basically throw away what the browser already has to offer only to rebuild it in an often worse way.&lt;/p&gt;

&lt;p&gt;Appealing about Preact, there is no virtual DOM, .... TODO eleborate and prove my point why we should not use Controlled Components, but in another article of its own ....&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#acknowledgements"&gt;
  &lt;/a&gt;
  Acknowledgements
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/retinafunk/tailwind-jit"&gt;Retinafunk's tailwind-jit-starter&lt;/a&gt; as well as Andy's support and suggestions saved me from abandoning tailwind before I even made it work.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Anna and Christina's talk "Slow Pace Application" (a follow-up to &lt;a href="https://www.youtube.com/watch?v=JdEFlBtdK9s"&gt;"Anleitung zum Unglücklichsein: How not to JavaScript"&lt;/a&gt; ("The Pursuit of Unhappiness: How not to JavaScript", one of the best talks about JavaScript performance optimization ever! Why does everybody else have to be so serious?)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/JdEFlBtdK9s"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;StackOverflow: while I'm still not happy about the smart Alecs that keep closing and downvoting my questions instead of deleting outdated "works for me" answers, I can't help to say that StackOverflow does hold some valuable answers to every day problems. Hopefully that will not change after the acquisition by Prosus, but if it does, we will get over it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;dev.to: without abitrary gatekeeping (like StackOverflow) nor pay-for-free-content (like medium.com), there is finally a community for in-depth coding discussion and exchange of ideas. Thanks for everyone who take their time to write and edit articles. Hope that I can add something, too.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;(as to the cover image) also a big shout out to all the friendly and open-minded people I met while travelling in the UK in 2018 and 2019, very lucky to have done this before Brexit and Covid, so I have some nice memories to remember while sitting at my home office desk. This article's cover image was taken in the little town of Settle in Yorkshire, UK and you can see it here in my &lt;a href="https://www.flickr.com/photos/fraktalisman/48553616282/in/album-72157710307925122/"&gt;flickr photostream&lt;/a&gt;  and &lt;a href="https://www.open-mind-culture.org/en/1500/travelling-by-train-by-bus-by-foot-to-experience-scotland-without-plane-nor-car/"&gt;read more about the trip in my blog&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;About me: I am Ingo Steinke, a creative web developer, creating sustainable software and websites. If you like my &lt;a href="https://www.ingo-steinke.com/#talks-events"&gt;talks&lt;/a&gt; and articles, feel free to &lt;a href="https://www.patreon.com/ingosteinke"&gt;support me on patreon&lt;/a&gt;, &lt;a href="https://www.buymeacoffee.com/ingosteinke"&gt;buy me a coffee&lt;/a&gt; or &lt;a href="https://www.ingo-steinke.com/#contact"&gt;hire me as a freelancer&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>devops</category>
      <category>showdev</category>
      <category>tailwindcss</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Provisioning an EC2 Instance with CloudFormation (part 1)</title>
      <author>Jenna Pederson</author>
      <pubDate>Mon, 21 Jun 2021 16:12:04 +0000</pubDate>
      <link>https://dev.to/aws/provisioning-an-ec2-instance-with-cloudformation-part-1-443f</link>
      <guid>https://dev.to/aws/provisioning-an-ec2-instance-with-cloudformation-part-1-443f</guid>
      <description>&lt;p&gt;As a full-stack developer, you don’t have time to deal with infrastructure, environment inconsistencies, manual testing, and manual deployment of your team’s web app. It’s time-consuming, frustrating, and requires yet another skill-set, especially since you’re part of a small development team at a budding startup.&lt;/p&gt;

&lt;p&gt;You know that as your app takes off, your infrastructure and processes need to scale with it. Inconsistencies between environments are creating problems down the pipeline, costing your small team time and money. Today, your build and deploy process is manual and done infrequently. Mistakes are made, bugs are introduced to production code when they are more difficult and expensive to fix and your customers ultimately suffer.&lt;/p&gt;

&lt;p&gt;It’s time to fix some of these gaps so you can deliver smaller changes more quickly, offer your customers a higher level of quality, and scale when you need to. You’ve decided to use infrastructure as code (IaC) to automate your infrastructure.&lt;/p&gt;

&lt;p&gt;Today, you have an Amazon EC2 instance hosting your web app and a Postgresql database running on the same instance. Sometimes the web app traffic impacts the database and vice versa. You want to manage the EC2 instance with IaC and start using a managed database instead of running it on the same instance. Since you’re already using AWS, you’ve decided on Amazon RDS for a managed Postgresql database. Because RDS is a managed service, you won’t have to do operating system patches or database patches — it’s all managed for you. And finally, you want to introduce a continuous integration/continuous deployment (CI/CD) pipeline to automate the build, test, and deploy phases of your release process.&lt;/p&gt;

&lt;p&gt;In the next three posts, you’ll learn how to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;automate the provisioning of your Amazon EC2 instance using AWS CloudFormation (this post, part 1),&lt;/li&gt;
&lt;li&gt;add an Amazon RDS Postgresql database to your stack with CloudFormation (part 2), and&lt;/li&gt;
&lt;li&gt;create an AWS CodePipeline with CloudFormation (part 3).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;To work through the examples in this post, you’ll need:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;an AWS account (you can create your account &lt;a href="https://aws.amazon.com/premiumsupport/knowledge-center/create-and-activate-aws-account/"&gt;here&lt;/a&gt; if you don’t already have one),&lt;/li&gt;
&lt;li&gt;the AWS CLI installed (you can find instructions for installing the AWS CLI &lt;a href="https://aws.amazon.com/cli/"&gt;here&lt;/a&gt;), and&lt;/li&gt;
&lt;li&gt;a key-pair to use for SSH (you can create a key-pair following &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html#having-ec2-create-your-key-pair"&gt;these instructions&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Unfamiliar with CloudFormation or feeling a little rusty? Check out my &lt;a href="https://jennapederson.com/blog/2021/5/10/introduction-to-aws-cloudformation/"&gt;Intro to CloudFormation post&lt;/a&gt; before getting started.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-the-cloudformation-template"&gt;
  &lt;/a&gt;
  Creating the CloudFormation Template
&lt;/h2&gt;

&lt;p&gt;I’m of the mindset of “Make it work. Make it right. Make it fast.” so we’ll iterate to get to our final template and and make it better at the end. At the end of this post, we’ll delete the stack we’ve created so that you don’t incur any charges and then you can (quickly) recreate the stack when we move on to the next post.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Make it work. Make it right. Make it fast. — Kent Beck&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Just want the code? Grab it &lt;a href="https://github.com/jennapederson/cloudformation-examples"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let’s get started!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-create-basic-amazon-ec2-instance"&gt;
  &lt;/a&gt;
  1. Create Basic Amazon EC2 Instance
&lt;/h3&gt;

&lt;p&gt;First, we’ll create a basic EC2 instance with CloudFormation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# 01_ec2.yaml&lt;/span&gt;
&lt;span class="na"&gt;AWSTemplateFormatVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;2010-09-09&lt;/span&gt;
&lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Part 1 - Build a webapp stack with CloudFormation&lt;/span&gt;

&lt;span class="na"&gt;Resources&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;WebAppInstance&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::EC2::Instance&lt;/span&gt;
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;ImageId&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ami-0d5eff06f840b45e9&lt;/span&gt; &lt;span class="c1"&gt;# ImageID valid only in us-east-1 region&lt;/span&gt;
      &lt;span class="na"&gt;InstanceType&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;t2.micro&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the template above, we have one resource with a type of AWS::EC2::Instance. We’ve hardcoded both the &lt;code&gt;ImageId&lt;/code&gt; (AMI) and &lt;code&gt;InstanceType&lt;/code&gt;. Note this &lt;code&gt;ImageId&lt;/code&gt; will only work in the us-east-1 region.&lt;/p&gt;

&lt;p&gt;To create the stack using this template, run the &lt;code&gt;create-stack&lt;/code&gt; command-line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;aws cloudformation create-stack &lt;span class="nt"&gt;--stack-name&lt;/span&gt; ec2-example &lt;span class="nt"&gt;--template-body&lt;/span&gt; file://01_ec2.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You now have an EC2 instance in the us-east-1 region! But we have no way to access this instance. We cannot SSH into it yet because we didn’t assign it a security group allowing SSH traffic or specify a key-pair name. There’s nothing running on HTTP or HTTPS ports yet, but even if there were, we wouldn’t be able to access that either. Let’s fix that now.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-enable-ssh-and-httphttps-traffic"&gt;
  &lt;/a&gt;
  2. Enable SSH and HTTP/HTTPS Traffic
&lt;/h3&gt;

&lt;p&gt;Now, we’ll update the CloudFormation template to add a security group resource that allows traffic in on port 22 for SSH and ports 80 and 443 for HTTP and HTTPS traffic. Here, we’ve allowed all IP addresses to access these ports, but you may want to lock this down further (especially the SSH rule) to IP addresses you trust.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# 02_ec2.yaml&lt;/span&gt;
&lt;span class="na"&gt;AWSTemplateFormatVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;2010-09-09&lt;/span&gt;
&lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Part 1 - Build a webapp stack with CloudFormation&lt;/span&gt;

&lt;span class="na"&gt;Resources&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;WebAppInstance&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::EC2::Instance&lt;/span&gt;
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;ImageId&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ami-0d5eff06f840b45e9&lt;/span&gt; &lt;span class="c1"&gt;# ImageID valid only in us-east-1 region&lt;/span&gt;
      &lt;span class="na"&gt;InstanceType&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;t2.micro&lt;/span&gt;
      &lt;span class="na"&gt;KeyName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;jenna&lt;/span&gt; &lt;span class="c1"&gt;# &amp;lt;-- Change to use your key-pair name&lt;/span&gt;
      &lt;span class="na"&gt;SecurityGroupIds&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="s"&gt;WebAppSecurityGroup&lt;/span&gt;

  &lt;span class="na"&gt;WebAppSecurityGroup&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::EC2::SecurityGroup&lt;/span&gt;
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;GroupName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Join&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;-'&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;webapp-security-group&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;dev&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt;
      &lt;span class="na"&gt;GroupDescription&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;Allow&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;HTTP/HTTPS&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;and&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;SSH&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;inbound&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;and&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;outbound&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;traffic'&lt;/span&gt;
      &lt;span class="na"&gt;SecurityGroupIngress&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;IpProtocol&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;tcp&lt;/span&gt;
          &lt;span class="na"&gt;FromPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80&lt;/span&gt;
          &lt;span class="na"&gt;ToPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80&lt;/span&gt;
          &lt;span class="na"&gt;CidrIp&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;0.0.0.0/0&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;IpProtocol&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;tcp&lt;/span&gt;
          &lt;span class="na"&gt;FromPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;443&lt;/span&gt;
          &lt;span class="na"&gt;ToPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;443&lt;/span&gt;
          &lt;span class="na"&gt;CidrIp&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;0.0.0.0/0&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;IpProtocol&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;tcp&lt;/span&gt;
          &lt;span class="na"&gt;FromPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;22&lt;/span&gt;
          &lt;span class="na"&gt;ToPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;22&lt;/span&gt;
          &lt;span class="na"&gt;CidrIp&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;0.0.0.0/0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Again, we’ve hardcoded some values in our template, but we’ll fix that up soon. Before updating the stack with this template, you’ll need to make one small change to use your key-pair name.&lt;/p&gt;

&lt;p&gt;You can update your stack using the &lt;code&gt;update-stack&lt;/code&gt; command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;aws cloudformation update-stack &lt;span class="nt"&gt;--stack-name&lt;/span&gt; ec2-example &lt;span class="nt"&gt;--template-body&lt;/span&gt; file://02_ec2.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now your EC2 instance should be accessible with SSH using your key-pair. To test this out, first navigate to your new stack in the AWS CloudFormation Console to find the instance you created.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VPP7mV-A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pk4u7yr1gcy2hf32wpf3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VPP7mV-A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pk4u7yr1gcy2hf32wpf3.png" alt="Resources in the CloudFormation stack"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then go to the instance and copy the public DNS for your instance.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Bl00CWiE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1fefp18k8en2i6x6x69h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bl00CWiE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1fefp18k8en2i6x6x69h.png" alt="EC2 instance details"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then, SSH into the instance like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ssh &lt;span class="nt"&gt;-i&lt;/span&gt; &lt;span class="s2"&gt;"YOUR_KEY_PAIR_NAME.pem"&lt;/span&gt; ec2-user@PUBLIC_DNS
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Your command will look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ssh &lt;span class="nt"&gt;-i&lt;/span&gt; &lt;span class="s2"&gt;"jenna.pem"&lt;/span&gt; ec2-user@ec2-18-212-186-244.compute-1.amazonaws.com
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Hint:&lt;/em&gt; You can also grab the command directly by viewing the "Connect" details at the top of the instance and copying the example command at the bottom of the "SSH client" tab.&lt;/p&gt;

&lt;p&gt;There is nothing being served on port 80 or 443 yet, so you won’t be able to test HTTP/HTTPS access yet.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-assign-an-ip-address-and-output-the-website-url"&gt;
  &lt;/a&gt;
  3. Assign an IP Address and Output the Website URL
&lt;/h3&gt;

&lt;p&gt;We also need to give our EC2 instance an elastic IP address (EIP). An elastic ip address is a static IP address that won’t change every time we re-provision the instance. We’ll also output the website URL.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# 03_ec2.yaml&lt;/span&gt;
&lt;span class="na"&gt;AWSTemplateFormatVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;2010-09-09&lt;/span&gt;
&lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Part 1 - Build a webapp stack with CloudFormation&lt;/span&gt;

&lt;span class="na"&gt;Resources&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;WebAppInstance&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::EC2::Instance&lt;/span&gt;
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;ImageId&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ami-0d5eff06f840b45e9&lt;/span&gt; &lt;span class="c1"&gt;# ImageID valid only in us-east-1 region&lt;/span&gt;
      &lt;span class="na"&gt;InstanceType&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;t2.micro&lt;/span&gt;
      &lt;span class="na"&gt;KeyName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;jenna&lt;/span&gt;
      &lt;span class="na"&gt;SecurityGroupIds&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="s"&gt;WebAppSecurityGroup&lt;/span&gt;

  &lt;span class="na"&gt;WebAppSecurityGroup&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::EC2::SecurityGroup&lt;/span&gt;
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;GroupName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Join&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;-'&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;webapp-security-group&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;dev&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt;
      &lt;span class="na"&gt;GroupDescription&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;Allow&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;HTTP/HTTPS&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;and&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;SSH&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;inbound&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;and&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;outbound&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;traffic'&lt;/span&gt;
      &lt;span class="na"&gt;SecurityGroupIngress&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;IpProtocol&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;tcp&lt;/span&gt;
          &lt;span class="na"&gt;FromPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80&lt;/span&gt;
          &lt;span class="na"&gt;ToPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80&lt;/span&gt;
          &lt;span class="na"&gt;CidrIp&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;0.0.0.0/0&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;IpProtocol&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;tcp&lt;/span&gt;
          &lt;span class="na"&gt;FromPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;443&lt;/span&gt;
          &lt;span class="na"&gt;ToPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;443&lt;/span&gt;
          &lt;span class="na"&gt;CidrIp&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;0.0.0.0/0&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;IpProtocol&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;tcp&lt;/span&gt;
          &lt;span class="na"&gt;FromPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;22&lt;/span&gt;
          &lt;span class="na"&gt;ToPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;22&lt;/span&gt;
          &lt;span class="na"&gt;CidrIp&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;0.0.0.0/0&lt;/span&gt;

  &lt;span class="na"&gt;WebAppEIP&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::EC2::EIP&lt;/span&gt;
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;Domain&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;vpc&lt;/span&gt;
      &lt;span class="na"&gt;InstanceId&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="s"&gt;WebAppInstance&lt;/span&gt;
      &lt;span class="na"&gt;Tags&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;Key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Name&lt;/span&gt;
          &lt;span class="na"&gt;Value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Join&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;-'&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;webapp-eip&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;dev&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt;

&lt;span class="na"&gt;Outputs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;WebsiteURL&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Sub&lt;/span&gt; &lt;span class="s"&gt;http://${WebAppEIP}&lt;/span&gt;
    &lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;WebApp URL&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this template update, we’ve created a resource AWS::EC2::EIP for an elastic IP address and assigned it to our EC2 instance. We also added the &lt;code&gt;Outputs&lt;/code&gt; section and out the website URL, which at this point is our elastic IP address.&lt;/p&gt;

&lt;p&gt;You can run the same &lt;code&gt;update-stack&lt;/code&gt; command from above (make sure to reference the right file name). When it completes (the EIP takes a few minutes to provision), your EC2 instance will have a static IP address and you’ll be able to see both the IP address and URL in the Outputs section of the CloudFormation stack in the Console.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qBmCMFAt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hkg9ndmp6bjp1ktnir1a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qBmCMFAt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hkg9ndmp6bjp1ktnir1a.png" alt="Outputs for the CloudFormation stack"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-make-the-template-dynamic"&gt;
  &lt;/a&gt;
  4. Make the Template Dynamic
&lt;/h3&gt;

&lt;p&gt;Now that we’ve made it work, the last task we have to do is to make it better. Remember that our template has hardcoded values for a number of configurations that should really be dynamic. We want these values to be dynamic for a few reasons. Maybe we want our development team to create a stack in their own AWS account for development purposes. And because it’s development, maybe we only want t2.micro instances, whereas in production we need t2.medium instances. We also might want to create this stack in other regions, so we’ll need to use the region-specific &lt;code&gt;ImageId&lt;/code&gt; (AMI).&lt;/p&gt;

&lt;p&gt;We can make our template more dynamic by using parameters and mappings. Let’s add them now!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# 04_ec2.yaml&lt;/span&gt;
&lt;span class="na"&gt;AWSTemplateFormatVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;2010-09-09&lt;/span&gt;
&lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Part 1 - Build a webapp stack with CloudFormation&lt;/span&gt;

&lt;span class="na"&gt;Parameters&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;AvailabilityZone&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::EC2::AvailabilityZone::Name&lt;/span&gt;
  &lt;span class="na"&gt;EnvironmentType&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;Specify&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;the&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Environment&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;type&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;of&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;the&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;stack.'&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;String&lt;/span&gt;
    &lt;span class="na"&gt;Default&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;dev&lt;/span&gt;
    &lt;span class="na"&gt;AllowedValues&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;dev&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;test&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;prod&lt;/span&gt;
  &lt;span class="na"&gt;AmiID&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::SSM::Parameter::Value&amp;lt;AWS::EC2::Image::Id&amp;gt;&lt;/span&gt;
    &lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;The&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;ID&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;of&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;the&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;AMI.'&lt;/span&gt;
    &lt;span class="na"&gt;Default&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2&lt;/span&gt;
  &lt;span class="na"&gt;KeyPairName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;String&lt;/span&gt;
    &lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;The name of an existing Amazon EC2 key pair in this region to use to SSH into the Amazon EC2 instances.&lt;/span&gt;

&lt;span class="na"&gt;Mappings&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;EnvironmentToInstanceType&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;dev&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;InstanceType&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;t2.nano&lt;/span&gt;
    &lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;InstanceType&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;t2.micro&lt;/span&gt;
    &lt;span class="na"&gt;prod&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;InstanceType&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;t2.small&lt;/span&gt;

&lt;span class="na"&gt;Resources&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;WebAppInstance&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::EC2::Instance&lt;/span&gt;
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;AvailabilityZone&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="s"&gt;AvailabilityZone&lt;/span&gt;
      &lt;span class="na"&gt;ImageId&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="s"&gt;AmiID&lt;/span&gt;
      &lt;span class="na"&gt;InstanceType&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!FindInMap&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;EnvironmentToInstanceType&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="nv"&gt;EnvironmentType&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;InstanceType&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
      &lt;span class="na"&gt;KeyName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="s"&gt;KeyPairName&lt;/span&gt;
      &lt;span class="na"&gt;SecurityGroupIds&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="s"&gt;WebAppSecurityGroup&lt;/span&gt;

  &lt;span class="na"&gt;WebAppSecurityGroup&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::EC2::SecurityGroup&lt;/span&gt;
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;GroupName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Join&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;-'&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;webapp-security-group&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="nv"&gt;EnvironmentType&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt;
      &lt;span class="na"&gt;GroupDescription&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;Allow&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;HTTP/HTTPS&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;and&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;SSH&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;inbound&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;and&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;outbound&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;traffic'&lt;/span&gt;
      &lt;span class="na"&gt;SecurityGroupIngress&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;IpProtocol&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;tcp&lt;/span&gt;
          &lt;span class="na"&gt;FromPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80&lt;/span&gt;
          &lt;span class="na"&gt;ToPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80&lt;/span&gt;
          &lt;span class="na"&gt;CidrIp&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;0.0.0.0/0&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;IpProtocol&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;tcp&lt;/span&gt;
          &lt;span class="na"&gt;FromPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;443&lt;/span&gt;
          &lt;span class="na"&gt;ToPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;443&lt;/span&gt;
          &lt;span class="na"&gt;CidrIp&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;0.0.0.0/0&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;IpProtocol&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;tcp&lt;/span&gt;
          &lt;span class="na"&gt;FromPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;22&lt;/span&gt;
          &lt;span class="na"&gt;ToPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;22&lt;/span&gt;
          &lt;span class="na"&gt;CidrIp&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;0.0.0.0/0&lt;/span&gt;

  &lt;span class="na"&gt;WebAppEIP&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::EC2::EIP&lt;/span&gt;
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;Domain&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;vpc&lt;/span&gt;
      &lt;span class="na"&gt;InstanceId&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="s"&gt;WebAppInstance&lt;/span&gt;
      &lt;span class="na"&gt;Tags&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;Key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Name&lt;/span&gt;
          &lt;span class="na"&gt;Value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Join&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;-'&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;webapp-eip&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="nv"&gt;EnvironmentType&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt;

&lt;span class="na"&gt;Outputs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;WebsiteURL&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Sub&lt;/span&gt; &lt;span class="s"&gt;http://${WebAppEIP}&lt;/span&gt;
    &lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;WebApp URL&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We’ve added parameters for &lt;code&gt;AvailabilityZone&lt;/code&gt;, &lt;code&gt;EnvironmentType&lt;/code&gt;, &lt;code&gt;AmiID&lt;/code&gt;, and &lt;code&gt;KeyPairName&lt;/code&gt;. &lt;code&gt;AvailabilityZone&lt;/code&gt; will pull from AWS::EC2::AvailabilityZone::Name. &lt;code&gt;EnvironmentType&lt;/code&gt; will be one of dev, test, or prod and default to dev. The &lt;code&gt;ImageId&lt;/code&gt; will be an AWS::SSM::Parameter::ValueAWS::EC2::Image::Id type. By using the public parameter &lt;code&gt;/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2&lt;/code&gt;, it will use the region-specific AMI, the value of which is stored in the AWS Systems Manager Parameter Store. In this case, we'll rely on the default value. And the &lt;code&gt;KeyPairName&lt;/code&gt; is the name of an existing key-pair.&lt;/p&gt;

&lt;p&gt;The other section we’ve added is the &lt;code&gt;Mappings&lt;/code&gt; section. We’ll use the &lt;code&gt;EnvironmentToInstanceType&lt;/code&gt; mapping to lookup the instance type for the selected environment.&lt;/p&gt;

&lt;p&gt;You can update the stack with this command, passing in the parameter values:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;aws cloudformation update-stack &lt;span class="nt"&gt;--stack-name&lt;/span&gt; ec2-example &lt;span class="nt"&gt;--template-body&lt;/span&gt; file://04_ec2.yaml &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--parameters&lt;/span&gt; &lt;span class="nv"&gt;ParameterKey&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;AvailabilityZone,ParameterValue&lt;span class="o"&gt;=&lt;/span&gt;us-east-1a &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nv"&gt;ParameterKey&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;EnvironmentType,ParameterValue&lt;span class="o"&gt;=&lt;/span&gt;dev &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nv"&gt;ParameterKey&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;KeyPairName,ParameterValue&lt;span class="o"&gt;=&lt;/span&gt;jenna
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now it will be easier to reuse this template for other environments and in other regions!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#delete-your-stack"&gt;
  &lt;/a&gt;
  Delete Your Stack
&lt;/h3&gt;

&lt;p&gt;Don’t forget to delete your stack so you don’t accrue charges. You can do that with the &lt;code&gt;delete-stack&lt;/code&gt; command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;aws cloudformation delete-stack &lt;span class="nt"&gt;--stack-name&lt;/span&gt; ec2-example
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#what-you-learned"&gt;
  &lt;/a&gt;
  What You Learned
&lt;/h3&gt;

&lt;p&gt;In this post, we created a CloudFormation template that provisions an EC2 instance in any region for your different environments, enables SSH, HTTP, and HTTPS inbound traffic, and we assigned a static IP address to the instance. We created and updated the stack from the command line using the AWS CLI. You can grab the final CloudFormation template created &lt;a href="https://github.com/jennapederson/cloudformation-examples"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the next post we'll add an Amazon RDS Postgresql database to our template and configure it for traffic from the EC2 instance.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Like what you read? Follow me here on &lt;a href="https://dev.to/jennapederson"&gt;Dev.to&lt;/a&gt; or on &lt;a href="https://twitter.com/jennapederson"&gt;Twitter&lt;/a&gt; to stay updated!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>cloudformation</category>
      <category>iac</category>
      <category>ec2</category>
    </item>
    <item>
      <title>6 Awesome Tools that turn code snippets to images</title>
      <author>Esther Agbaje</author>
      <pubDate>Mon, 21 Jun 2021 15:48:24 +0000</pubDate>
      <link>https://dev.to/estheragbaje/6-awesome-tools-that-turn-code-snippets-to-images-54fo</link>
      <guid>https://dev.to/estheragbaje/6-awesome-tools-that-turn-code-snippets-to-images-54fo</guid>
      <description>&lt;p&gt;You've probably seen images like this on Twitter, Instagram, blogs e.t.c. But have you ever wondered how these images are created?&lt;/p&gt;

&lt;p&gt;Well, today I'm going to be sharing 6 tools that can help you create beautiful code snippets, so you too can begin to share them online 💃💃💃&lt;br&gt;
 &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-snappifyio"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://snappify.io/"&gt;Snappify.io&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Snappify comes with 6 predefined styles to create aesthetic snapshots of your code without the need to spend hours of styling. You can also adjust the background and code theme to your needs if desired.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EMFWU-Lj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kjggdpr4b0mowtytta3p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EMFWU-Lj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kjggdpr4b0mowtytta3p.png" alt="Snappify"&gt;&lt;/a&gt;&lt;br&gt;
 &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-carbon"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://carbon.now.sh/"&gt;Carbon&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Create and share beautiful images of your source code using Carbon. With Carbon, you can customize your image by changing the syntax theme, background color/image, window theme, or padding.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XD0XMjV9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3qez20g434gncjrrxep6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XD0XMjV9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3qez20g434gncjrrxep6.png" alt="Carbon"&gt;&lt;/a&gt;&lt;br&gt;
 &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-rayso"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://ray.so/"&gt;Ray.so&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;With Ray.so, you can choose from a range of syntax colors, hide or show the background, and toggle between a dark and light window when creating images of your code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fCKVADq3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gr8k2yxrnc12zvnrswts.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fCKVADq3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gr8k2yxrnc12zvnrswts.png" alt="Ray"&gt;&lt;/a&gt;&lt;br&gt;
 &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-codekeep"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://codekeep.io/screenshot"&gt;CodeKeep&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;CodeKeep is a great way to create and share code snippets. You can also organize code snippets by creating labels and filtering snippets by label.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sM8ptDKg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2u6n86n3eyn8e08abb6o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sM8ptDKg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2u6n86n3eyn8e08abb6o.png" alt="CodeKeep"&gt;&lt;/a&gt;&lt;br&gt;
 &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-codeimg"&gt;
  &lt;/a&gt;
  5. &lt;a href="https://codeimg.io/"&gt;CodeImg&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;CodeImg enables you not only to create these code snippets but also change the dimensions of the output image to fit different platforms like Facebook, Twitter, Instagram, etc.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4MfMIGq---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xf9r7f7jiqexdgspvjcn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4MfMIGq---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xf9r7f7jiqexdgspvjcn.png" alt="CodeImg"&gt;&lt;/a&gt;&lt;br&gt;
 &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-instacode"&gt;
  &lt;/a&gt;
  6. &lt;a href="http://instaco.de/"&gt;InstaCode&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Instacode allows you to create Instagram-like images of your code snippet. You can also add filters or give these images a custom perspective by adjusting and rotating it. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kMubsY3k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p6jktl7a99euyqo9za8a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kMubsY3k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p6jktl7a99euyqo9za8a.png" alt="InstaCode"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I personally use and love Snappify &amp;amp; Carbon.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt; &lt;br&gt;
Do you know any other amazing tool used to create beautiful code snippets? Please share them below 💖&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>writing</category>
      <category>tooling</category>
    </item>
    <item>
      <title>Website chia sẻ thủ thuật facebook hữu ích nên tham khảo</title>
      <author>Joney</author>
      <pubDate>Mon, 21 Jun 2021 15:44:42 +0000</pubDate>
      <link>https://dev.to/jonynguyen/website-chia-s-th-thu-t-facebook-h-u-ich-nen-tham-kh-o-1gin</link>
      <guid>https://dev.to/jonynguyen/website-chia-s-th-thu-t-facebook-h-u-ich-nen-tham-kh-o-1gin</guid>
      <description>&lt;p&gt;Ngày nay việc người dùng mạng xã hội facebook đã trở nên vô cùng, vô cùng nhiều. Điều này tương ứng với việc người dùng bắt đầu tìm hiểu những điều liên quan đến nó. Thế nhưng việc hàng ngày bạn sử dụng Facebook vài giờ đồng hồ trên máy tính hay di động để giải trí, làm việc nhưng cũng chưa chắc đã biết hết những thủ thuật cần thiết để có thể sử dụng hiệu quả hơn. Chính vì vậy, việc tìm kiếm một Website chia sẻ thủ thuật facebook hữu ích là điều mà &lt;a href="https://dev.to/jonynguyen"&gt;jonynguyen&lt;/a&gt; trong dev.to muốn mang đến cho bạn nhằm giúp mọi người có những mẹo facebook hay nhất khi sử dụng mạng xã hội này&lt;/p&gt;

&lt;h2&gt;Trang web thủ thuật facebook hay và hữu ích cho bạn&lt;/h2&gt;

&lt;p&gt;Website Ở đây mà dev.to muốn chia sẻ đến mọi người có một cái tên khá dễ nghe là blog hỗ trợ có địa chỉ website tại &lt;a href="http://www.bloghotro.com"&gt;www.bloghotro.com&lt;/a&gt; giống như tên của nó là một dạng blog giúp đỡ cũng như hỗ trợ người dùng những vấn đề liên quan đến công nghệ, internet và cả những mạng xã hội như facebook. &lt;/p&gt;

&lt;p&gt;Trong giao diện của website này có một chuyên mục và nếu như mọi người muốn tìm hiểu thêm về &lt;a href="https://bloghotro.com/thu-thuat-facebook/"&gt;thủ thuật facebook&lt;/a&gt; thì có thể nhấn vào link này để chuyển trực tiếp. Và trong chủ đề bài viết này thì jonynguyen xin được chia sẻ đến mọi người một số thủ thuật ngắn gọn về facebook ở phía bên dưới nhé&lt;/p&gt;

&lt;h3&gt;Mẹo sử dụng Facebook hiệu quả hơn&lt;/h3&gt;

&lt;h4&gt;1. Lưu bài viết Facebook để xem sau:&lt;/h4&gt;

&lt;p&gt;Chế độ Save sẽ giúp bạn có thể lưu bài viết hoặc link bất cứ trên News Feed nếu như muốn xem lại.&lt;/p&gt;

&lt;p&gt;Bước 1:&lt;/p&gt;

&lt;p&gt;Tại bài viết hay link muốn lưu, chúng ta nhấn chọn vào biểu tượng mũi tên xổ xuống, và chọn Save link hoặc Save post.&lt;/p&gt;

&lt;p&gt;Lưu bài viết Facebook Lưu bài viết Facebook&lt;/p&gt;

&lt;p&gt;Bước 2:&lt;/p&gt;

&lt;p&gt;Tại giao diện Facebook, nhấn chọn biểu tượng 3 dấu gạch ngang và chọn mục Saved. Toàn bộ bài viết hoặc link sẽ được lưu tại mục Saved này. Mục All sẽ là toàn bộ bài viết, hình ảnh, video,.. được lưu. Nếu bạn muốn tìm theo từng mục có thể nhấn vào 8 mục bên nhỏ bên trên theo từng loại bài đã được lưu.&lt;/p&gt;

&lt;p&gt;Lưu bài viết Facebook Lưu bài viết Facebook Lưu bài viết Facebook&lt;/p&gt;

&lt;p&gt;Bước 3:&lt;/p&gt;

&lt;p&gt;Để xóa bài đã lưu, cũng tại giao diện Saved, chọn bài viết muốn bỏ lưu và nhấn biểu tượng 3 dấu chấm và chọn Unsave.&lt;/p&gt;

&lt;p&gt;Lưu bài viết Facebook Lưu bài viết Facebook&lt;/p&gt;

&lt;h4&gt;2. Chặn lời mời chơi game trên Facebook:&lt;/h4&gt;

&lt;p&gt;Chắc cũng không dễ chịu khi Facebook của bạn liên tục bị tấn công bằng những lời mời chơi game. Và cách chặn những lời mời chơi game cũng rất đơn giản.&lt;/p&gt;

&lt;p&gt;Bước 1:&lt;/p&gt;

&lt;p&gt;Tại giao diện Facebook, bạn nhấn chọn vào biểu tượng 3 dấu gạch ngang, chọn mục Settings. Tiếp đến chọn Account Settings.&lt;/p&gt;

&lt;p&gt;Chặn lời mời chơi game trên Facebook Chặn lời mời chơi game trên Facebook&lt;/p&gt;

&lt;p&gt;Bước 2:&lt;/p&gt;

&lt;p&gt;Sau đó, chọn mục Apps tại giao diện Settings. Tiếp theo, nhấn chọn phần Platform.&lt;/p&gt;

&lt;p&gt;Chặn lời mời chơi game trên Facebook Chặn lời mời chơi game trên Facebook&lt;/p&gt;

&lt;p&gt;Trong giao diện Platform, mục Game Invites and App Notifications, chúng ta chọn No. Nhấp chọn mục App and Wesites phần Edit, nhấn Turn off Platform.&lt;/p&gt;

&lt;p&gt;Chặn lời mời chơi game trên Facebook Chặn lời mời chơi game trên Facebook&lt;/p&gt;

&lt;h4&gt;3. Sử dụng video làm avatar Facebook:&lt;/h4&gt;

&lt;p&gt;Tính năng mới cập nhật này tạo nên sự thích thú rất lớn trong cộng đồng những người sử dụng &lt;a href="https://bloghotro.com/tag/facebook/"&gt;Facebook&lt;/a&gt;. Tuy nhiên, bạn chỉ có thể dùng ảnh động làm ảnh đại diện Facebook với bản trên di động mà thôi. Chúng ta thay ảnh GIF làm ảnh avatar Facebook như cách làm thông thường.&lt;/p&gt;

&lt;p&gt;Bạn có thể xem thêm cách làm chi tiết trong bài viết Cách dùng video làm Avatar cho Facebook trên iOS và &lt;a href="https://bloghotro.com/tag/android/"&gt;Android&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Sử dụng video làm avatar Facebook Sử dụng video làm avatar Facebook&lt;/p&gt;

&lt;h4&gt;4. Tắt tính năng tự động phát video Facebook:&lt;/h4&gt;

&lt;p&gt;Facebook đã tích hợp tính năng tự động phát video. Tuy nhiên, điều này lại gây phiên phức không nhỏ cho không ít cơ số người sử dụng khi video liên tục phát.&lt;/p&gt;

&lt;p&gt;Để tắt video tự động phát, bạn truy cập theo đường dẫn Settings &amp;gt; Video and Photos &amp;gt; Autoplay và chọn 1 trong 3 tùy chỉnh, gồm tự động chạy video qua kết nối di động và Wi-Fi, chỉ Wi-Fi (Just Wi-Fi) hoặc Không bao giờ (Never).&lt;/p&gt;

&lt;p&gt;Để biết thêm chi tiết từng bước làm, bạn hãy xem bài viết Cách vô hiệu hóa tính năng tự động chạy video trên Facebook.&lt;/p&gt;

&lt;p&gt;tự động phát video Facebook tự động phát video Facebook tự động phát video Facebook&lt;/p&gt;

&lt;h4&gt;5. Cập nhật nhanh những trang trên News Feed:&lt;/h4&gt;

&lt;p&gt;Khi sử dụng Facebook, số lượng trang bạn thích sẽ lên hàng trăm hoặc hàng nghìn trang. Chính vì thế, chúng ta sẽ có thể bỏ lỡ những tin tức nóng hổi từ bạn bè hoặc từ một fanpage nào đó. Vậy thì, nếu muốn ưu tiên cho những trang hay bạn bè quan tâm hãy thiết lập trong một mục riêng.&lt;/p&gt;

&lt;p&gt;Bước 1:&lt;/p&gt;

&lt;p&gt;Nhấp chọn biểu tượng 3 dấu gạch ngang, chọn Settings và chọn News Feed Preferences.&lt;/p&gt;

&lt;p&gt;Cập nhật nhanh những trang trên News Feed News Feed Preferences&lt;/p&gt;

&lt;p&gt;Bước 2:&lt;/p&gt;

&lt;p&gt;Tại giao diện Preferences, bạn có thể lựa chọn những trang hoặc bạn bè muốn quan tâm hơn trên Facebook, bằng cách tích chọn vào tài khoản hoặc fanpage đó rồi nhấn Done.&lt;/p&gt;

&lt;p&gt;News Feed Preferences News Feed Preferences&lt;/p&gt;

&lt;h4&gt;6. Ẩn danh sách bạn bè trên Facebook:&lt;/h4&gt;

&lt;p&gt;Để bảo mật toàn bộ thông tin bạn bè trên Facebook, chúng ta hoàn toàn có thể ẩn toàn bộ danh sách bạn bè mà mình đã kết bạn.&lt;/p&gt;

&lt;p&gt;Bạn thực hiện theo đường dẫn sau: tại giao diện trang cá nhân chọn Bạn bè &amp;gt; Chỉnh sửa quyền riêng tư (biểu tượng bút) &amp;gt; Danh sách bạn bè và chọn Chỉ mình tôi.&lt;/p&gt;

&lt;p&gt;Xem thêm cách làm trong bài viết Cách ẩn danh sách bạn bè với mọi người trên Facebook.&lt;/p&gt;

&lt;h4&gt;7. Cách ẩn các mối quan hệ Facebook:&lt;/h4&gt;

&lt;p&gt;Nếu bạn không muốn người khác quá tò mò về mình, chúng ta cũng có thể ẩn danh sách bạn bè hoặc ẩn các mối quan hệ trên Facebook.&lt;/p&gt;

&lt;p&gt;Bước 1:&lt;/p&gt;

&lt;p&gt;Tại trang tài khoản cá nhân Facebook, nhấn chọn mục Giới thiệu và chọn phần Gia đình và các mối quan hệ trong phần Tổng quan.&lt;/p&gt;

&lt;p&gt;Cách ẩn các mối quan hệ Facebook&lt;/p&gt;

&lt;p&gt;Bước 2:&lt;/p&gt;

&lt;p&gt;Tại mối quan hệ bạn muốn ẩn đi, nhấn chọn phần Chỉnh sửa.&lt;/p&gt;

&lt;p&gt;Cách ẩn các mối quan hệ Facebook&lt;/p&gt;

&lt;p&gt;Tại đây, chúng ta có thể điều chỉnh chế độ cho các mối quan hệ, như công khai, bạn bè hay chỉ mình bạn nhìn thấy.&lt;/p&gt;

&lt;h4&gt;8. Khôi phục tin nhắn đã xóa trên Facebook:&lt;/h4&gt;

&lt;p&gt;Với những tin nhắn hay bất cứ tài liệu, hình ảnh nào mà bạn vô tình đã xóa trên Facebook, chúng ta hoàn toàn có thể khôi phục lại nhờ bản sao lưu trên Facebook. Bản tải về các dữ liệu đã xóa sẽ gửi thông qua địa chỉ email và dưới dạng đuôi .zip.&lt;/p&gt;

&lt;p&gt;Bạn vào thực hiện theo đường dẫn sau: Cài đăt &amp;gt; Chung &amp;gt; Tải xuống bản sao sao lưu dữ liệu Facebook và thực hiện theo các bước hướng dẫn.&lt;/p&gt;

&lt;p&gt;Để biết rõ hơn về từng bước thực hiện, bạn có thể tham khảo bài viết Cách khôi phục tin nhắn đã bị xoá trên Facebook.&lt;/p&gt;

&lt;p&gt;Tổng kết&lt;/p&gt;

&lt;p&gt;Trên đây là những chia sẻ của dev.to về Website chia sẻ thủ thuật facebook hữu ích nên tham khảo. Mỗi một thủ thuật sẽ giúp bạn biết thêm những tính năng hay trên Facebook. Tuy nhiên, một điều quan trọng mà chúng ta phải nhớ đó là sử dụng những cách thức để tăng cường khả năng bảo mật của Facebook đấy nhé&lt;/p&gt;

</description>
      <category>bloghotro</category>
    </item>
    <item>
      <title>Use Pundit as a Rails Feature Flag System</title>
      <author>Steve Polito</author>
      <pubDate>Mon, 21 Jun 2021 15:38:35 +0000</pubDate>
      <link>https://dev.to/stevepolitodesign/use-pundit-as-a-rails-feature-flag-system-3152</link>
      <guid>https://dev.to/stevepolitodesign/use-pundit-as-a-rails-feature-flag-system-3152</guid>
      <description>&lt;p&gt;In this tutorial, I'll show you how to create a feature flag system in Rails using &lt;a href="https://github.com/varvet/pundit"&gt;pundit&lt;/a&gt; and a &lt;code&gt;features&lt;/code&gt; column on the &lt;code&gt;users&lt;/code&gt; table.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resources&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/stevepolitodesign/pundit-feature-flags"&gt;Source Code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#step-1-initial-setup"&gt;
  &lt;/a&gt;
  Step 1: Initial Setup
&lt;/h2&gt;

&lt;p&gt;This tutorial assumes you are using &lt;a href="https://github.com/heartcombo/devise"&gt;devise&lt;/a&gt; and have a &lt;code&gt;User&lt;/code&gt; model. However, you should still be able to follow along and implement this pattern even if that's not the case. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a &lt;code&gt;Post&lt;/code&gt; scaffold.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;rails g scaffold Post title:string user:references meta_description:text
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Add a &lt;code&gt;features&lt;/code&gt; column to the &lt;code&gt;users&lt;/code&gt; table by running the following command.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;rails g migration add_features_to_users features:jsonb 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Set a default value on the &lt;code&gt;features&lt;/code&gt; column.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AddFeaturesToUsers&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Migration&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;6.1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;change&lt;/span&gt;
    &lt;span class="n"&gt;add_column&lt;/span&gt; &lt;span class="ss"&gt;:users&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:features&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:jsonb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;default: &lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;What's Going On Here?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We add a &lt;a href="https://guides.rubyonrails.org/active_record_postgresql.html#json-and-jsonb"&gt;JSONB Column&lt;/a&gt; to our &lt;code&gt;users&lt;/code&gt; table. This will allow us to store multiple features in one column, compared to making a column for each feature.&lt;/li&gt;
&lt;li&gt;We add &lt;code&gt;default: {}&lt;/code&gt; simply to add a formatted default value to this column.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;Run the migrations.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;rails db:migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Set features on &lt;code&gt;User&lt;/code&gt; model.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;  
  &lt;span class="no"&gt;FEATURES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sx"&gt;%i[enable_post_meta_description]&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;freeze&lt;/span&gt;
  &lt;span class="n"&gt;store&lt;/span&gt; &lt;span class="ss"&gt;:features&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;accessors: &lt;/span&gt;&lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;FEATURES&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;What's Going On Here?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We create a &lt;code&gt;FEATURES&lt;/code&gt; constant that will store the names of our features as symbols by calling &lt;code&gt;%i&lt;/code&gt; on the array. We call &lt;code&gt;.freeze&lt;/code&gt; to ensure this constant cannot be updated anywhere else.&lt;/li&gt;
&lt;li&gt;We use &lt;a href="https://api.rubyonrails.org/classes/ActiveRecord/Store.html"&gt;ActiveRecord::Store&lt;/a&gt; to interface with the &lt;code&gt;features&lt;/code&gt; column. This will allow us to call &lt;code&gt;@user.enable_post_meta_description&lt;/code&gt; instead of &lt;code&gt;user.features.enable_post_meta_description&lt;/code&gt;. By passing &lt;code&gt;User::FEATURES&lt;/code&gt; into the &lt;code&gt;accessors&lt;/code&gt; parameter we can continue to add new features in the &lt;code&gt;FEATURES&lt;/code&gt; constant.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Setting a &lt;code&gt;features&lt;/code&gt; column on the &lt;code&gt;users&lt;/code&gt; table will allow us to enable/disable features on a per-user basis.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Enable the &lt;code&gt;enable_post_meta_description&lt;/code&gt; for a user. That way you have something to test.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;User.last.update(enable_post_meta_description: true)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-2-install-pundit-and-build-a-policy"&gt;
  &lt;/a&gt;
  Step 2: Install Pundit and Build a Policy
&lt;/h2&gt;

&lt;p&gt;Next, we'll need to install and configure &lt;a href="https://github.com/varvet/pundit"&gt;pundit&lt;/a&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Install &lt;a href="https://github.com/varvet/pundit"&gt;pundit&lt;/a&gt;.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;bundle add pundit
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Generate the base pundit files.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;rails g pundit:install
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Include pundit in the &lt;code&gt;ApplicationController&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ApplicationController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActionController&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Base&lt;/span&gt;
  &lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="no"&gt;Pundit&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-3-build-a-feature-flag-policy"&gt;
  &lt;/a&gt;
  Step 3: Build a Feature Flag Policy
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Generate a namespaced pundit policy.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;rails g pundit:policy feature/enable_post_meta_description
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Build the policy
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Feature::EnablePostMetaDescriptionPolicy&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationPolicy&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;ceate?&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;present?&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;enable_post_meta_description&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;permitted_attributes&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;enable_post_meta_description&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:user_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:meta_description&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:user_id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;What's Going On Here?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We generate a policy under the &lt;code&gt;feature&lt;/code&gt; namespace. This is not required, but it helps keep things organized and will allow us to add new policies for new features later. We also name this policy to match the name of the feature in the &lt;code&gt;User&lt;/code&gt; model.&lt;/li&gt;
&lt;li&gt;We build a &lt;code&gt;ceate?&lt;/code&gt; method that returns &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; based on whether or not that user has the &lt;code&gt;enable_post_meta_description&lt;/code&gt; feature set to true. We could have called the method &lt;code&gt;index?&lt;/code&gt;, &lt;code&gt;new?&lt;/code&gt;, &lt;code&gt;update?&lt;/code&gt;, &lt;code&gt;edit?&lt;/code&gt; or &lt;code&gt;destroy?&lt;/code&gt; but &lt;code&gt;create?&lt;/code&gt; makes the most sense in this context. We're building a policy that enables a user to &lt;strong&gt;create&lt;/strong&gt; a meta description on a post.
&lt;/li&gt;
&lt;li&gt;We used pundit's &lt;a href="https://github.com/varvet/pundit#strong-parameters"&gt;permitted_attributes&lt;/a&gt; method to return an array of paramters to be used in the &lt;code&gt;PostsController&lt;/code&gt;. This will allow us to conditionally permit the &lt;code&gt;meta_description&lt;/code&gt; parameter.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#step-4-implement-the-feature-flag"&gt;
  &lt;/a&gt;
  Step 4: Implement the Feature Flag
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Update the &lt;code&gt;post_params&lt;/code&gt; to hook into the &lt;code&gt;permitted_attributes&lt;/code&gt; method.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PostsController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationController&lt;/span&gt;
  &lt;span class="n"&gt;before_action&lt;/span&gt; &lt;span class="ss"&gt;:authenticate_user!&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;except: &lt;/span&gt;&lt;span class="sx"&gt;%i[ show index ]&lt;/span&gt; 
  &lt;span class="n"&gt;before_action&lt;/span&gt; &lt;span class="ss"&gt;:set_post&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;only: &lt;/span&gt;&lt;span class="sx"&gt;%i[ show edit update destroy ]&lt;/span&gt;

  &lt;span class="kp"&gt;private&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;post_params&lt;/span&gt;
      &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:post&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;permit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="no"&gt;Feature&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;EnablePostMetaDescriptionPolicy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current_user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;permitted_attributes&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;What's Going On Here?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We instantiate a new instance of the &lt;code&gt;Feature::EnablePostMetaDescriptionPolicy&lt;/code&gt; policy class and pass in the &lt;code&gt;current_user&lt;/code&gt; and &lt;code&gt;Post&lt;/code&gt; per pundit's API. Then we call &lt;code&gt;permitted_attributes&lt;/code&gt; to load the correct parameters based on whether the user has access to the &lt;code&gt;meta_description&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Note that we call &lt;code&gt;authenticate_user!&lt;/code&gt; before all actions except &lt;code&gt;show&lt;/code&gt; and &lt;code&gt;index&lt;/code&gt; since the &lt;code&gt;Feature::EnablePostMetaDescriptionPolicy&lt;/code&gt; relies on a user.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;Conditionally show the &lt;code&gt;meta_description&lt;/code&gt; in the post form partial.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# app/views/posts/_form.html.erb
&amp;lt;%= form_with(model: post) do |form| %&amp;gt;
  ...
  &amp;lt;% if Feature::EnablePostMetaDescriptionPolicy.new(current_user, post).create? %&amp;gt;
    &amp;lt;div class="field"&amp;gt;
      &amp;lt;%= form.label :meta_description %&amp;gt;
      &amp;lt;%= form.text_area :meta_description %&amp;gt;
    &amp;lt;/div&amp;gt; 
  &amp;lt;% end %&amp;gt;
  ...
&amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;What's Going On Here?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We wrap the &lt;code&gt;meta_description&lt;/code&gt; field in a new instance of the &lt;code&gt;Feature::EnablePostMetaDescriptionPolicy&lt;/code&gt; policy class. We call &lt;code&gt;create?&lt;/code&gt; which returns &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; based on whether the user has access to the &lt;code&gt;meta_description&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;




&lt;p&gt;Did you like this post? &lt;a href="https://twitter.com/stevepolitodsgn"&gt;Follow me on Twitter&lt;/a&gt; to get even more tips.&lt;/p&gt;

</description>
      <category>rails</category>
      <category>ruby</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
