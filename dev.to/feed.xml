<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Nebula Operator Kind, oneliner installer for Nebula K8s Operator Playground</title>
      <author>lisahui</author>
      <pubDate>Thu, 30 Sep 2021 08:54:38 +0000</pubDate>
      <link>https://dev.to/lisahui/nebula-operator-kind-oneliner-installer-for-nebula-k8s-operator-playground-27k8</link>
      <guid>https://dev.to/lisahui/nebula-operator-kind-oneliner-installer-for-nebula-k8s-operator-playground-27k8</guid>
      <description>&lt;p&gt;Nebula-Kind, an one-liner command to try K8s Operator based Nebula Graph Cluster on your machine, with the help of KIND (K8s in Docker)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nebulaoperatorkind"&gt;
  &lt;/a&gt;
  Nebula-Operator-Kind
&lt;/h2&gt;

&lt;p&gt;As a Cloud Native Distributed Database, Nebula Graph comes with an open-source K8s Operator to enable boostrap and maintain Nebula Graph Cluster from a K8s CRD.&lt;/p&gt;

&lt;p&gt;Normally it takes you some time to setup all the dependencies and control plane resources of the Nebula Operator. If you are as lazy as I am, this Nebula-Operator-Kind is made for you to quick start and play with Nebula Graph in KIND.&lt;/p&gt;

&lt;p&gt;Nebula-Operator-Kind is the one-liner for setup everything for you including:&lt;/p&gt;

&lt;p&gt;Docker&lt;br&gt;
K8s(KIND)&lt;br&gt;
PV Provider&lt;br&gt;
Nebula-Operator&lt;br&gt;
Nebula-Console&lt;br&gt;
nodePort for accessing the Cluster&lt;br&gt;
Kubectl for playing with KIND and Nebula Operator&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-to-use"&gt;
  &lt;/a&gt;
  How To Use
&lt;/h2&gt;

&lt;p&gt;Install Nebula-Operator-Kind:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;curl -sL nebula-kind.siwei.io/install.sh | bash
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will see this after it’s done&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bCI17jSy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://siwei.io/en/nebula-operator-kind/install_success.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bCI17jSy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://siwei.io/en/nebula-operator-kind/install_success.webp" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can connect to the cluster via ~/.nebula-kind/bin/console as below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;~/.nebula-kind/bin/console -u user -p password --address=127.0.0.1 --port=30000
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#more"&gt;
  &lt;/a&gt;
  More
&lt;/h2&gt;

&lt;p&gt;It’s in GitHub with more information you may be intrested in ;-), please try and feedback there~ &lt;a href="https://github.com/wey-gu/nebula-operator-kind"&gt;https://github.com/wey-gu/nebula-operator-kind&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Install on KubeSphere all-in-on cluster：&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;curl -sL nebula-kind.siwei.io/install-ks-1.sh | bash
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Install on existing K8s cluster:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;curl -sL nebula-kind.siwei.io/install-on-k8s.sh | bash
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>database</category>
      <category>opensource</category>
      <category>devops</category>
      <category>sql</category>
    </item>
    <item>
      <title>18 amazing 🤩 GitHub repositories that will help you 🪄 make a Beautiful Project</title>
      <author>Harry </author>
      <pubDate>Thu, 30 Sep 2021 08:50:18 +0000</pubDate>
      <link>https://dev.to/tu77y/18-amazing-github-repositories-that-will-help-you-make-a-beautiful-project-44e8</link>
      <guid>https://dev.to/tu77y/18-amazing-github-repositories-that-will-help-you-make-a-beautiful-project-44e8</guid>
      <description>&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Today I would like to give examples of good GitHub repositories that will help you implement complex animations, as well as useful functions in your projects.&lt;/p&gt;
&lt;p&gt;So let's get started &lt;/p&gt;

&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/10-awesome-github-repos-every-web-developer-should-know/&amp;amp;ved=2ahUKEwiw1e_qpqbzAhU78HMBHVvBAWkQFnoECBAQAQ&amp;amp;usg=AOvVaw1YdY91hlP3suK6HGMF0MXW"&gt;18 amazing 🤩 GitHub repositories that will help you 🪄 make a Beautiful Project&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Web Animation with CSS - Animation Property</title>
      <author>Suraj Vishwakarma</author>
      <pubDate>Thu, 30 Sep 2021 08:45:29 +0000</pubDate>
      <link>https://dev.to/basecampxd/web-animation-with-css-animation-property-bdb</link>
      <guid>https://dev.to/basecampxd/web-animation-with-css-animation-property-bdb</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;Continuing with the series of &lt;strong&gt;Web Animation with CSS&lt;/strong&gt;. Today we are going to learn more about animation using CSS. &lt;/p&gt;

&lt;p&gt;The last part of the series paved the way to start animating in web pages for beginners. You can read &lt;a href="https://dev.to/basecampxd/web-animation-with-css-2c5d"&gt;&lt;strong&gt;here&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So let's get started with today's topic.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#animation-direction"&gt;
  &lt;/a&gt;
  Animation Direction
&lt;/h2&gt;

&lt;p&gt;As the name suggests this property is used to alter the direction of animation. It has four values &lt;code&gt;normal&lt;/code&gt;, &lt;code&gt;reverse&lt;/code&gt;, &lt;code&gt;alternate&lt;/code&gt; and &lt;code&gt;alternate-reverse&lt;/code&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nl"&gt;animation-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;reverse&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#codepen-example"&gt;
  &lt;/a&gt;
  Codepen Example
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/surajsrv11/embed/BaZGYGj?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;In the above example, I have used the &lt;code&gt;animation-direction&lt;/code&gt; with the value &lt;code&gt;alternate&lt;/code&gt;. The animation first started as normal and for 2nd time it reversed. This happens alternately once &lt;code&gt;normal&lt;/code&gt; and other times &lt;code&gt;reverse&lt;/code&gt;. It becomes a sequence of animation looping again and again.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#animation-timing-function"&gt;
  &lt;/a&gt;
  Animation Timing Function
&lt;/h2&gt;

&lt;p&gt;The animation timing function helps you to control the animation speed curve. This curve defines the speed of animation transition at the different time frames. This curve helps you to make the transition smoothly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nl"&gt;animation-timing-function&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#codepen-example"&gt;
  &lt;/a&gt;
  CodePen Example
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/surajsrv11/embed/MWoxKpq?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;In the above Codepen, the ball is moving from top to bottom. The animation is not linear as the speed of transition changes. We have used &lt;code&gt;animation-timing-function&lt;/code&gt; with the value &lt;code&gt;ease&lt;/code&gt;. Using &lt;code&gt;ease&lt;/code&gt; value the animation has a slow start and end but fast in between slow and end. There is various value to animation timing function, you can learn more about it &lt;a href="https://www.w3schools.com/cssref/css3_pr_animation-timing-function.asp"&gt;&lt;strong&gt;here&lt;/strong&gt;&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;One such value of the animation-timing function is &lt;code&gt;cubic-bezier&lt;/code&gt;. It let you create your timing function to control your animation. It takes 4 numeric values between 0 and 1. You can visit &lt;a href="https://cubic-bezier.com/"&gt;&lt;strong&gt;Cubic Bezier&lt;/strong&gt;&lt;/a&gt; to create your animation timing function.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#animation-shorthand"&gt;
  &lt;/a&gt;
  Animation Shorthand
&lt;/h2&gt;

&lt;p&gt;Till now we have used lot of animation property to define animation such as &lt;code&gt;animation-direction&lt;/code&gt;, &lt;code&gt;animation-delay&lt;/code&gt;, &lt;code&gt;animation-timing-function&lt;/code&gt;, etc. You can use shorthand technique to define all animation related property into single property that is &lt;code&gt;animation&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;bounce&lt;/span&gt; &lt;span class="m"&gt;1s&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#codepen-example"&gt;
  &lt;/a&gt;
  CodePen Example
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/surajsrv11/embed/YzQgwJp?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#weekly-newsletter-of-surajondev"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.getrevue.co/profile/surajondev"&gt;Weekly Newsletter of SurajOnDev&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cL1qWSEE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/boivc5mdfzzs2kt0s5wg.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cL1qWSEE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/boivc5mdfzzs2kt0s5wg.PNG" alt="Weekly Newsletter of SurajOnDev"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-you-will-get"&gt;
  &lt;/a&gt;
  What you will get?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Read of the Week&lt;/strong&gt;: 5 best articles hand-picked by myself from different platforms. This article will be developer, self-growth, and productivity-oriented.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Tool of the Week&lt;/strong&gt;: A resource or tool link that will help in easing your work.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Our latest blog post&lt;/strong&gt;: Latest 3 blog post from SurajOnDev that is me.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Free eBook and Resources&lt;/strong&gt;: Occasionally you will get free eBook that are by developers and for developers.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Frequency&lt;/strong&gt;: Weekly&lt;br&gt;
&lt;strong&gt;Subscribe Here&lt;/strong&gt;:  &lt;a href="https://tripetto.app/run/4OQIUAO89L"&gt;Weekly Newsletter of SurajOnDev&lt;/a&gt;&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#last-note"&gt;
  &lt;/a&gt;
  Last Note
&lt;/h1&gt;

&lt;p&gt;Now with these properties of CSS, you can have more control over your animation.&lt;/p&gt;

&lt;p&gt;I highly recommend you to read our previous blog post of this series &lt;a href="https://dev.to/basecampxd/web-animation-with-css-2c5d"&gt;Web Animation with CSS - Learn the Basics&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thank You for reading the blog post.&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Droplet Loader NFT</title>
      <author>Gorilla Surf</author>
      <pubDate>Thu, 30 Sep 2021 08:40:45 +0000</pubDate>
      <link>https://dev.to/nftmake/droplet-loader-nft-4llg</link>
      <guid>https://dev.to/nftmake/droplet-loader-nft-4llg</guid>
      <description>&lt;p&gt;Something pretty because I love pretty things.&lt;/p&gt;

&lt;p&gt;You can buy the iNFT on BeyondNFT &lt;a href="https://beyondnft.io/explore/0x8747ad5ec5c6d68962b6c0ea8029cde01da7634f/49/0xbd51bc1e80aca4e902eb0d4be69ab5b52be6152a"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/chrisgannon/embed/ExjmQOm?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>codepen</category>
    </item>
    <item>
      <title>Modernizing Amazon database infrastructure - migrating from Oracle to AWS | AWS White Paper Summary </title>
      <author>Haytham Mostafa</author>
      <pubDate>Thu, 30 Sep 2021 08:40:20 +0000</pubDate>
      <link>https://dev.to/awsmenacommunity/modernizing-amazon-database-infrastructure-migrating-from-oracle-to-aws-aws-white-paper-summary-ej7</link>
      <guid>https://dev.to/awsmenacommunity/modernizing-amazon-database-infrastructure-migrating-from-oracle-to-aws-aws-white-paper-summary-ej7</guid>
      <description>&lt;h1&gt;
  &lt;a href="#1-challenges-with-using-oracle-databases"&gt;
  &lt;/a&gt;
  1. Challenges with using Oracle databases
&lt;/h1&gt;

&lt;p&gt;Amazon started facing a number of challenges with using Oracle databases to scale its services. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#11-complex-database-engineering-required-to-scale"&gt;
  &lt;/a&gt;
  1.1   Complex database engineering required to scale
&lt;/h2&gt;

&lt;p&gt;• Hundreds of hours spent each year trying to scale the Oracle databases horizontally. &lt;br&gt;
• Database shards was used to handle the additional service throughputs and manage the growing data volumes but in doing so increased the database administration workloads.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#12-complex-expensive-and-errorprone-database-administration"&gt;
  &lt;/a&gt;
  1.2   Complex, expensive, and error-prone database administration
&lt;/h2&gt;

&lt;p&gt;Hundreds of hours spent each month monitoring database performance, upgrading, database backups and patching the operating system for each instance and shard. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#13-inefficient-and-complex-hardware-provisioning"&gt;
  &lt;/a&gt;
  1.3   Inefficient and complex hardware provisioning
&lt;/h2&gt;

&lt;p&gt;• Database and the infrastructure teams expended substantial time forecasting demand and planning hardware capacity to meet it. &lt;br&gt;
• After forecasting, hundreds of hours spent in purchasing, installing, and testing the hardware.&lt;br&gt;
•  Additionally, teams had to maintain a sufficiently large pool of spare infrastructure to fix any hardware issues and perform preventive maintenance. &lt;br&gt;
• The high licensing costs were just some of the compelling reasons for the Amazon consumer and digital business to migrate the persistence layer of all its services to AWS.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-aws-services"&gt;
  &lt;/a&gt;
  2. AWS Services
&lt;/h1&gt;

&lt;p&gt;Overview about the key AWS database Services. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#21-purposebuilt-databases"&gt;
  &lt;/a&gt;
  2.1   Purpose-built databases
&lt;/h2&gt;

&lt;p&gt;• Amazon expects all its services be globally available, operate with microsecond to millisecond latency, handle millions of requests per second, operate with near zero downtime, cost only what is needed, and be managed efficiently by offering a range of purpose-built databases.&lt;br&gt;
The three key database services to host the persistence layer of their services: &lt;br&gt;
&lt;a href="https://aws.amazon.com/dynamodb"&gt;Amazon DynamoDB&lt;/a&gt; &lt;br&gt;
&lt;a href="https://aws.amazon.com/rds/aurora/?aurora-whats-new.sort-by=item.additionalFields.postDateTime&amp;amp;aurora-whats-new.sort-order=desc"&gt;Amazon Aurora&lt;/a&gt; &lt;br&gt;
&lt;a href="https://aws.amazon.com/rds/"&gt;Amazon Relational Database Service (Amazon RDS) for MySQL or PostgreSQL&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#22-other-aws-services-used-in-implementation"&gt;
  &lt;/a&gt;
  2.2   Other AWS Services used in implementation
&lt;/h2&gt;

&lt;p&gt;• &lt;a href="https://aws.amazon.com/s3"&gt;Amazon Simple Storage Service (Amazon S3)&lt;/a&gt; &lt;br&gt;
• &lt;a href="https://aws.amazon.com/dms"&gt;AWS Database Migration Service&lt;/a&gt;&lt;br&gt;
• &lt;a href="https://aws.amazon.com/ec2"&gt;Amazon Elastic Compute Cloud (Amazon EC2)&lt;/a&gt; &lt;br&gt;
• &lt;a href="https://aws.amazon.com/emr"&gt;Amazon EMR&lt;/a&gt;&lt;br&gt;
• &lt;a href="https://aws.amazon.com/glue"&gt;AWS Glue&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#23-picking-the-right-database"&gt;
  &lt;/a&gt;
  2.3   Picking the right database
&lt;/h2&gt;

&lt;p&gt;• Pick the most appropriate database based on scale, complexity, and features of its service.&lt;br&gt;
• Business units running services that use relatively static schemas, perform complex table lookups, and experience high service throughputs picked Amazon Aurora. &lt;br&gt;
•  Business units using operational data stores that had moderate read and write traffic, and relied on the features of relational databases selected Amazon RDS for PostgreSQL or MySQL.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-challenges-during-migration"&gt;
  &lt;/a&gt;
  3. Challenges during migration
&lt;/h1&gt;

&lt;p&gt;The key challenges faced by Amazon during the transformation journey.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#31-diverse-application-architectures-inherited"&gt;
  &lt;/a&gt;
  3.1   Diverse application architectures inherited
&lt;/h2&gt;

&lt;p&gt;• Amazon has been defined by a culture of decentralized ownership that offered engineers the freedom to make design decisions that would deliver value to their customers. This freedom proliferated a wide range of design patterns and frameworks across teams. Another source of diversity was infrastructure management and its impact on service architectures.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#32-distributed-and-geographically-dispersed-teams"&gt;
  &lt;/a&gt;
  3.2   Distributed and geographically dispersed teams
&lt;/h2&gt;

&lt;p&gt;• Amazon operates in a range of customer business segments in multiple geographies which operate independently. &lt;br&gt;
• Managing the migration program across this distributed workforce posed challenges including effectively communicating the program vision and mission, driving goal alignment with business and technical leaders across these businesses, defining and setting acceptable yet ambitious goals for each business units, and dealing with conflicts. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#33-interconnected-and-highly-interdependent-services"&gt;
  &lt;/a&gt;
  3.3   Interconnected and highly interdependent services
&lt;/h2&gt;

&lt;p&gt;Amazon operates a vast set of microservices that are interconnected and use common databases. Migrating interdependent and interconnected services and their underlying databases required finely coordinated movement between teams. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#34-gap-in-skills"&gt;
  &lt;/a&gt;
  3.4   Gap in skills
&lt;/h2&gt;

&lt;p&gt;As Amazon engineers used Oracle databases, they developed expertise over the years in operating, maintaining, and optimizing them. Most service teams shared databases that were managed by a shared pool of database engineers and the migration to AWS was a paradigm shift for them. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#35-competing-initiatives"&gt;
  &lt;/a&gt;
  3.5   Competing initiatives
&lt;/h2&gt;

&lt;p&gt;Lastly, each business unit was grappling with competing initiatives. In certain situations, competing priorities created resource conflicts that required intervention from the senior leadership. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#4-people-processes-and-tools"&gt;
  &lt;/a&gt;
  4. People, processes, and tools
&lt;/h1&gt;

&lt;p&gt;The following three sections discuss how three levers were engaged to drive the project forward. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#41-people"&gt;
  &lt;/a&gt;
  4.1   People
&lt;/h2&gt;

&lt;p&gt;One of the pillars of success was founding the Center of Excellence (CoE). &lt;br&gt;
The CoE was staffed with experienced enterprise program managers.&lt;br&gt;
The leadership team ensured that these program managers had a combination of technical knowledge and program management capabilities. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#42-processes-and-mechanisms"&gt;
  &lt;/a&gt;
  4.2   Processes and mechanisms
&lt;/h2&gt;

&lt;p&gt;This section elaborates on the processes and mechanisms established by the CoE and their impact on the outcome of the project. &lt;br&gt;
&lt;strong&gt;Goal setting and leadership review&lt;/strong&gt; &lt;br&gt;
It was realized early in the project that the migration would require attention from senior leaders. They used the review meeting to highlight systemic risks, recurrent issues, and progress.&lt;br&gt;
&lt;strong&gt;Establishing a hub-and-spoke model&lt;/strong&gt; &lt;br&gt;
It would be arduous to individually track the status of each migration. Therefore, they established a hub-and-spoke model where service teams nominated a team member, typically a technical program manager, who acted as the spoke and the CoE program managers were the hub.&lt;br&gt;
&lt;strong&gt;Training and guidance&lt;/strong&gt; &lt;br&gt;
A key objective for the CoE was to ensure that Amazon engineers were comfortable moving their services to AWS. To achieve this, it was essential to train these teams on open source and AWS native databases, and cloud-based design patterns.&lt;br&gt;
&lt;strong&gt;Establishing product feedback cycles with AWS&lt;/strong&gt; &lt;br&gt;
This feedback mechanism was instrumental in helping AWS rapidly test and release features to support internet scale workloads. This feedback mechanism also enabled AWS to launch product features essential for its other customers operating similar sized workloads. &lt;br&gt;
&lt;strong&gt;Establishing positive reinforcement&lt;/strong&gt; &lt;br&gt;
To ensure that teams make regular progress towards goals, it is important to promote and reinforce positive behaviors, recognize teams, and celebrate their progress. The CoE established multiple mechanisms to achieve this.&lt;br&gt;
&lt;strong&gt;Risk management and issue tracking&lt;/strong&gt; &lt;br&gt;
Enterprise scale projects involving large numbers of teams across geographies are bound to face issues and setbacks.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#43-tools"&gt;
  &lt;/a&gt;
  4.3   Tools
&lt;/h2&gt;

&lt;p&gt;Due to the complexity of the project management process, the CoE decided to invest in tools that would automate the project management and tracking.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#5-common-migration-patterns-and-strategies"&gt;
  &lt;/a&gt;
  5. Common migration patterns and strategies
&lt;/h1&gt;

&lt;p&gt;The following section describes the migration of four systems used in Amazon from Oracle to AWS. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#51-migrating-to-amazon-dynamodb-flash"&gt;
  &lt;/a&gt;
  5.1   Migrating to Amazon DynamoDB – FLASH
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Overview of FLASH&lt;/strong&gt; &lt;br&gt;
• Set of critical services called the Financial Ledger and Accounting Systems Hub (FLASH).&lt;br&gt;
• Enable various business entities to post financial transactions to Amazon’s sub-ledger.&lt;br&gt;
• It supports four categories of transactions compliant with Generally Accepted Accounting Principles (GAAP)—account receivables, account payables, remittances, and payments. &lt;br&gt;
• FLASH aggregates these sub-ledger transactions and populates them to Amazon’s general ledger for financial reporting, auditing, and analytics. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yBDe5UTR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/off6apeqwwplwnv49l56.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yBDe5UTR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/off6apeqwwplwnv49l56.png" alt="FLASH"&gt;&lt;/a&gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; &lt;em&gt;Data flow diagram of FLASH&lt;/em&gt; &amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&lt;br&gt;
&lt;strong&gt;Challenges with operating FLASH services on Oracle&lt;/strong&gt; &lt;br&gt;
FLASH is a high-throughput, complex, and critical system at Amazon. It experienced many challenges while operating on Oracle databases. &lt;br&gt;
&lt;strong&gt;a.    Poor latency&lt;/strong&gt; &lt;br&gt;
The poor service latency despite having performed extensive database optimization.&lt;br&gt;
&lt;strong&gt;b.    Escalating database costs&lt;/strong&gt; &lt;br&gt;
Each year, the database hosting costs were growing by at least 10%, and the FLASH team was unable to circumvent the excessive database administration overhead associated with this growth. &lt;br&gt;
&lt;strong&gt;c.    Difficult to achieve scale&lt;/strong&gt; &lt;br&gt;
As FLASH used a monolithic Oracle database service, the interdependencies between the various components of the FLASH system were preventing efficient scaling of the system. &lt;br&gt;
&lt;strong&gt;Reasons to choose Amazon DynamoDB as the persistence layer&lt;/strong&gt; &lt;br&gt;
a.  Easier to scale &lt;br&gt;
b.  Easier change management &lt;br&gt;
c.  Speed of transactions &lt;br&gt;
d.  Easier database management &lt;br&gt;
&lt;strong&gt;Challenges and design considerations during refactoring&lt;/strong&gt; &lt;br&gt;
The FLASH team faced the following challenges during the re-design of its services on DynamoDB: &lt;br&gt;
&lt;strong&gt;a.    Time stamping transactions and indexed ordering&lt;/strong&gt; &lt;br&gt;
After a timestamp was assigned, these transactions were logged in a S3 bucket for durable backup. DynamoDB Streams along with Amazon Kinesis Client Libraries were used to ensure exactly-once, ordered indexing of records. When enabled, DynamoDB Streams captures a time-ordered sequence of item-level modifications in a DynamoDB table and durably stores the information for up to 24 hours. Applications can access a series of stream records, which contain an item change, from a DynamoDB stream in near real time. &lt;br&gt;
After a transaction appears on the DynamoDB stream, it is routed to a Kinesis stream and indexed.&lt;br&gt;
&lt;strong&gt;b.    Providing data to downstream services&lt;/strong&gt; &lt;br&gt;
• Enable financial analytics. &lt;br&gt;
• FLASH switched the model to an event-sourcing model where an S3 backup of commit logs was created continuously. &lt;br&gt;
• The use of unstructured and disparate tables was eliminated for analytics and data processing. &lt;br&gt;
• The team created a single source of truth and converged all the data models to the core event log/journal, to ensure deterministic data processing.&lt;br&gt;
•  Amazon S3 was used as an audit trail of all changes to the DynamoDB journal table. &lt;br&gt;
• &lt;a href="https://aws.amazon.com/sns/?whats-new-cards.sort-by=item.additionalFields.postDateTime&amp;amp;whats-new-cards.sort-order=desc"&gt;Amazon SNS&lt;/a&gt; was used to publish these commit logs in batches for downstream consumption. &lt;br&gt;
• The artifact creation was coordinated using &lt;a href="https://aws.amazon.com/sqs/"&gt;Amazon SQS&lt;/a&gt;. The entire system is SOX compliant. &lt;br&gt;
• These data batches were delivered to the general ledger for financial reporting and analysis. &lt;br&gt;
&lt;strong&gt;c.    Archiving historical data&lt;/strong&gt; &lt;br&gt;
FLASH used a common data model and columnar format for ease of access and migrated historical data to Amazon S3 buckets that are accessible by Amazon Athena. Amazon Athena was ideal as it allows for a query-as-you-go model which works well as this data is queried on average once every two years. Also, because Amazon Athena is serverless.&lt;br&gt;
&lt;strong&gt;Performing data backfill&lt;/strong&gt; &lt;br&gt;
&lt;a href="https://aws.amazon.com/dms/"&gt;AWS DMS&lt;/a&gt; was used to ensure reliable and secure data transfer. It is also SOX compliant from source to target, provided the team granular insights during the process. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pR2brmZh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9n6t7hhi5y5b29rf5jjl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pR2brmZh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9n6t7hhi5y5b29rf5jjl.png" alt="DMS"&gt;&lt;/a&gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; &lt;em&gt;Lift and shift using AWS DMS and RDS&lt;/em&gt; &amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&lt;br&gt;
&lt;strong&gt;Benefits&lt;/strong&gt; &lt;br&gt;
• Rearchitecting the FLASH system to work on AWS database services improved its performance. &lt;br&gt;
• Although FLASH provisioned more compute and larger storage, the database operating costs have remained flat or reduced despite processing higher throughputs. &lt;br&gt;
• The migration reduced administrative overhead enabling focus on optimizing the application. &lt;br&gt;
• Automatic scaling has also allowed the FLASH team to reduce costs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#52-migration-to-amazon-dynamodb-items-and-offers"&gt;
  &lt;/a&gt;
  5.2   Migration to Amazon DynamoDB – Items and Offers
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Overview of Items and Offers&lt;/strong&gt; &lt;br&gt;
• A system manages three components associated with an item – item information, offer information, and relationship information.&lt;br&gt;
• A key service within the Items and Offers system is the Item Service which updates the item information.&lt;br&gt;
&lt;strong&gt;Challenges faced when operating Item Service on Oracle databases&lt;/strong&gt; &lt;br&gt;
The Item Service team was facing many challenges when operating on Oracle databases.&lt;br&gt;
&lt;strong&gt;Challenging to administer partitions&lt;/strong&gt; &lt;br&gt;
The Item data was partitioned using hashing, and partition maps were used to route requests to the correct partition. These partitioned databases were becoming difficult to scale and manage.&lt;br&gt;
&lt;strong&gt;Difficult to achieve high availability&lt;/strong&gt; &lt;br&gt;
To optimize space utilization by the databases, all tables were partitioned and stored across 24 databases. &lt;br&gt;
&lt;strong&gt;Reaching scaling limits&lt;/strong&gt; &lt;br&gt;
Due to the preceding challenges of operating the Items and Offers system on Oracle databases, the team was not able to support the growing service throughputs.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_fr_oy3p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0dj7frnv3w0t2u09min5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_fr_oy3p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0dj7frnv3w0t2u09min5.png" alt="Item"&gt;&lt;/a&gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; &lt;em&gt;Scale of the Item Service&lt;/em&gt; &amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&lt;br&gt;
&lt;strong&gt;Reasons for choosing Amazon DynamoDB&lt;/strong&gt; &lt;br&gt;
Amazon DynamoDB was the best suited persistence layer for IMS. It offered an ideal combination of features suited for easily operating a highly available and large-scale distributed system like IMS.&lt;br&gt;
&lt;strong&gt;a.    Automated database management&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;b.    Automatic scaling&lt;/strong&gt; &lt;br&gt;
&lt;strong&gt;c.    Cost effective and secure&lt;/strong&gt;&lt;br&gt;
The following figure displays one of the index tables on Oracle that stored SKU to ASIN mappings.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_kr8SYh8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rz34ythkr39nfmsui1bs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_kr8SYh8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rz34ythkr39nfmsui1bs.png" alt="Oracle"&gt;&lt;/a&gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; &lt;em&gt;Table structure of Item Service on Oracle&lt;/em&gt; &amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&lt;br&gt;
The following figure shows the equivalent table represented in DynamoDB. All other Item Service schemas were redesigned using similar principles.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WsqJq_PH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/szsy8ezndrsermo2ee16.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WsqJq_PH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/szsy8ezndrsermo2ee16.png" alt="DynamoDB"&gt;&lt;/a&gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; &lt;em&gt;Table structure of Item Service on DynamoDB&lt;/em&gt; &amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&lt;br&gt;
&lt;strong&gt;Execution&lt;/strong&gt; &lt;br&gt;
After building the new data model, the next challenge was performing the migration. The Item Service team devised a two-phased approach to achieve the migration — live migration and &lt;br&gt;
backfill.&lt;br&gt;
&lt;strong&gt;i.    Live migration&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Transition the main store from Oracle to DynamoDB without any failures and actively migrate all the data being processed by the application.&lt;/li&gt;
&lt;li&gt;The item Service team used three stages to achieve the goal:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;a. The copy mode: Validate the correctness, scale, and performance of DynamoDB.&lt;br&gt;
b. The compatibility mode: Allowed the Item Service team to pause the migration should issues arise.&lt;br&gt;
c. The move mode: After the move mode, the Item Service team began the backfill phase of migration that would make DynamoDB the single main database and deprecate Oracle.&lt;br&gt;
&lt;strong&gt;ii.   Backfill&lt;/strong&gt; &lt;br&gt;
• AWS DMS was used to backfill records that were not migrated by the application write logic. &lt;br&gt;
• Oracle source tables were partitioned across 24 databases and the destination store on DynamoDB was elastically scalable. &lt;br&gt;
• The migration has scaled by running multiple AWS DMS replication instances per table and each instance had parallel loads configured. &lt;br&gt;
• To handle AWS DMS replication errors, the process automated by creating a library using the AWS DMS SDK. &lt;br&gt;
• Finally, fine tune configurations on AWS DMS and Amazon DynamoDB to maximize the throughput and minimize cost. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VaIOle-e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/76oiw5je6m5ze2roznis.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VaIOle-e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/76oiw5je6m5ze2roznis.png" alt="IMS"&gt;&lt;/a&gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; &lt;em&gt;Backfill process of IMS&lt;/em&gt; &amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&lt;br&gt;
&lt;strong&gt;Benefits&lt;/strong&gt; &lt;br&gt;
After the migration, the availability of Item Service has improved, ensuring consistent performance and significantly reduced the operational workload for the team. Also, the team used the point-in-time recovery feature to simplify backup and restore operations. The team received these benefits at a lower overall cost than previously, due to dynamic automatic scaling capacity feature. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#53-migrating-to-aurora-for-postgresql-amazon-fulfillment-technologies-aft"&gt;
  &lt;/a&gt;
  5.3   Migrating to Aurora for PostgreSQL – Amazon Fulfillment Technologies (AFT)
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Overview of AFT&lt;/strong&gt; &lt;br&gt;
The Amazon Fulfillment Technologies (AFT) business unit builds and maintains the dozens of services that facilitate all fulfillment activities. A set of services called the Inventory Management Services facilitate inventory movement and are used by all other major services to perform critical functions within the FC.&lt;br&gt;
&lt;strong&gt;Challenges faced operating AFT on Oracle databases&lt;/strong&gt; &lt;br&gt;
The AFT team faced many challenges operating its services on Oracle databases in the past. &lt;br&gt;
&lt;strong&gt;a.    Difficult to scale&lt;/strong&gt; &lt;br&gt;
All the services were becoming difficult to scale and were facing availability issues during peak throughputs due to both hardware and software limitations. &lt;br&gt;
&lt;strong&gt;b.    Complex hardware management&lt;/strong&gt; &lt;br&gt;
Hardware management was also becoming a growing concern due to the custom hardware requirements required from these Oracle clusters.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JuLtYTGd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h0v2xqkjlvbcr8yv02tk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JuLtYTGd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h0v2xqkjlvbcr8yv02tk.png" alt="AFT"&gt;&lt;/a&gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; &lt;em&gt;Databases services used by AFT&lt;/em&gt; &amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&lt;br&gt;
&lt;strong&gt;Reasons for choosing Amazon Aurora for PostgreSQL&lt;/strong&gt; &lt;br&gt;
Picking Amazon Aurora for three primary reasons. &lt;br&gt;
a.  Static schemas and relational lookups. &lt;br&gt;
b.  Ease of scaling and feature parity. &lt;br&gt;
c.  Automated administration. &lt;/p&gt;

&lt;p&gt;Before the migration, the team decided to re-platform the services rather than rearchitect them. Re-platforming accelerated the migration by preserving the existing architecture while minimizing service disruptions.&lt;br&gt;
&lt;strong&gt;Migration strategy and challenges:&lt;/strong&gt; &lt;br&gt;
The migration to Aurora was performed in three phases:&lt;br&gt;
&lt;strong&gt;a.    Preparation phase&lt;/strong&gt; &lt;br&gt;
• Separate production and non-production accounts to ensure secure and reliable deployment. &lt;br&gt;
• Aurora offers fifteen near real-time read replicas while a central node manages all writes.&lt;br&gt;
• Aurora uses SSL (AES-256) to secure connections between the database and the application.&lt;br&gt;
Important differences to note are:&lt;br&gt;
i.  How Oracle and PostgreSQL treat time zones differently.&lt;br&gt;
ii. Oracle and PostgreSQL 9.6 is different partitioning strategies and their implementations.&lt;br&gt;
&lt;strong&gt;b.    Migration phase&lt;/strong&gt; &lt;br&gt;
&lt;a href="https://aws.amazon.com/dms/schema-conversion-tool/"&gt;AWS SCT&lt;/a&gt; was used to convert the schemas from Oracle to PostgreSQL. Subsequently DMS performed a full load and ongoing Change Data Capture (CDC) replication to move real-time transactional data.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KiFfzUfR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/36s9pwoqr612zyf4mvmm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KiFfzUfR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/36s9pwoqr612zyf4mvmm.png" alt="SCT"&gt;&lt;/a&gt; &amp;gt;&amp;gt;&amp;gt; &lt;em&gt;Steps in the migration of schemas using AWS SCT and AWS DMS&lt;/em&gt; &amp;lt;&amp;lt;&amp;lt;&lt;br&gt;
The maxFileSize parameter specifies the maximum size (in KB) of any CSV file used to transfer data to PostgreSQL. It was observed that setting maxFileSize to 1.1 GB significantly improved migration speed. Since version 2.x AWS DMS has been to increase this parameter to 30 GB.&lt;br&gt;
&lt;strong&gt;c.    Post-migration phase&lt;/strong&gt; &lt;br&gt;
Monitoring the health of the database becomes paramount in this phase.One important activity that must occur in PostgreSQL is vacuuming. Aurora PostgreSQL sets auto-vacuum settings according to instance size by default, but one size does not always fit all different workloads, so it is important to ensure auto-vacuum is working properly as expected. &lt;br&gt;
&lt;strong&gt;Benefits&lt;/strong&gt; &lt;br&gt;
• After migrating to Amazon Aurora, provisioning additional capacity is achieved through a few simple mouse clicks or API calls reducing the scaling effort by as much as 95%.&lt;br&gt;
• High availability is another key benefit of Amazon Aurora.&lt;br&gt;
• The business unit is no longer limited by the input/output operations.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#54-migrating-to-amazon-aurora-buyer-fraud-detection"&gt;
  &lt;/a&gt;
  5.4   Migrating to Amazon Aurora – buyer fraud detection
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Overview&lt;/strong&gt; &lt;br&gt;
Amazon retail websites operate a set of services called Transaction Risk Management Services (TRMS) to protect brands, sellers, and consumers from transaction fraud by actively detecting and preventing it. The Buyer Fraud Service applies machine learning algorithms over real-time and historical data to detect and prevent fraudulent activity.&lt;br&gt;
Challenges of operating on oracle &lt;br&gt;
The Buyer Fraud Service team faced three challenges operating its services using on-premises Oracle databases. &lt;br&gt;
&lt;strong&gt;a.    Complex error-prone database administration&lt;/strong&gt; &lt;br&gt;
The Buyer Fraud Service business unit shared an Oracle cluster of more than one hundred databases with other fraud detection services at Amazon.&lt;br&gt;
&lt;strong&gt;b.    Poor latency&lt;/strong&gt; &lt;br&gt;
To maintain performance at scale, Oracle databases were horizontally partitioned. As application code required new database shards to handle the additional throughput, each shard added incremental workload on the infrastructure in terms of backups, patching, and performance. &lt;br&gt;
&lt;strong&gt;c.    Complication hardware provisioning&lt;/strong&gt; &lt;br&gt;
After capacity planning, the hardware business unit coordinated suppliers, vendors, and Amazon finance business units to purchase the hardware and prepare for installation and testing.&lt;br&gt;
Application design and migration strategy &lt;br&gt;
The Buyer Fraud Service business unit decided to migrate its databases from Oracle to Amazon Aurora. The team chose to re-factor the service to accelerate the migration and minimize service disruption. The migration was accomplished in two phases: &lt;br&gt;
&lt;strong&gt;i.    Preparation phase&lt;/strong&gt; &lt;br&gt;
• Amazon Aurora clusters were launched to replicate the existing Oracle databases. &lt;br&gt;
• A shim layer has built to perform simultaneous r/w operations to both database engines. &lt;br&gt;
• The business unit migrated the initial data, and used AWS DMS to establish active replication from Oracle to Aurora. &lt;br&gt;
• Once the migration was complete, AWS DMS was used to perform a row-by-row validation and a sum count to ensure that the replication was accurate.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sJ_fUwX0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5obu46rwwilvsipz7erj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sJ_fUwX0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5obu46rwwilvsipz7erj.png" alt="SHIM"&gt;&lt;/a&gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt; &lt;em&gt;Dual write mode of the Buyer Fraud Service using SHIM layer&lt;/em&gt; &amp;lt;&amp;lt;&amp;lt;&amp;lt;&lt;br&gt;
&lt;strong&gt;ii.   Execution phase&lt;/strong&gt; &lt;br&gt;
Buyer Fraud Service began load testing the Amazon Aurora databases to evaluate read/write latencies and simulate peak throughput events such as Prime Day. Results from these load tests indicated that Amazon Aurora could handle twice the throughput of the legacy infrastructure. &lt;br&gt;
&lt;strong&gt;Benefits&lt;/strong&gt; &lt;br&gt;
• Performance, scalability, availability, hardware management, cloud-based automation, and cost. &lt;br&gt;
• AWS manages patching, maintenance, backups, and upgrades improved the application performance.&lt;br&gt;
• The migration has also lowered the cost of delivering the same performance as before.&lt;br&gt;
• The improved performance of Amazon Aurora has allowed to handle high throughput.&lt;br&gt;
• Buyer Fraud service was able to scale its largest workloads, support strict latency requirements with no impact to snapshot backups.&lt;br&gt;
• Hardware management has gotten exponentially easier with new hardware being commissioned in minutes instead of months.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#6-organizationwide-benefits"&gt;
  &lt;/a&gt;
  6. Organization-wide benefits
&lt;/h1&gt;

&lt;p&gt;• Services that migrated to DynamoDB, saw significant performance improvements such as a 40% drop in 99th percentile latency, OS patching, database maintenance and software upgrades.&lt;br&gt;
• Additionally, the elastic capacity of preconfigured database hosts on AWS has eliminated administrative overhead to scale by allowing for capacity provisioning. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#7-postmigration-operating-model"&gt;
  &lt;/a&gt;
  7. Post-migration operating model
&lt;/h1&gt;

&lt;p&gt;This section discusses key changes in the operating model for service teams and its benefits. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#71-distributed-ownership-of-databases"&gt;
  &lt;/a&gt;
  7.1   Distributed ownership of databases
&lt;/h2&gt;

&lt;p&gt;• The migration transformed the operating model to one focused on distributed ownership. &lt;br&gt;
• Individual teams now control every aspect of their infrastructure including capacity provisioning, forecasting and cost allocation. &lt;br&gt;
• Each team also had the option to launch Reserved or On-Demand Instances to optimize costs based on the nature of demand. &lt;br&gt;
• The CoE developed heuristics to identify the optimal ratio of On-Demand to Reserved Instances based on service growth, cyclicality, and price discounts. &lt;br&gt;
• Focusing on innovation on behalf of customers. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#72-career-growth"&gt;
  &lt;/a&gt;
  7.2   Career growth
&lt;/h2&gt;

&lt;p&gt;The migration presented an excellent opportunity to advance the career paths of scores of database engineers. These engineers who exclusively managed Oracle databases in data centers were offered new avenues of growth and development in the rapidly growing field of cloud services, NoSQL databases, and open-source databases.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>database</category>
    </item>
    <item>
      <title>Lambda Functions in Dart</title>
      <author>Baransel</author>
      <pubDate>Thu, 30 Sep 2021 08:10:33 +0000</pubDate>
      <link>https://dev.to/baransel/lambda-functions-in-dart-4f70</link>
      <guid>https://dev.to/baransel/lambda-functions-in-dart-4f70</guid>
      <description>&lt;p&gt;&lt;em&gt;Every function in dart is an object.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Functions that we use very often &lt;em&gt;without a name&lt;/em&gt; are also called lambda functions.&lt;/p&gt;

&lt;p&gt;You can see usage example and output below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CvPZloGH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://baransel.dev/post/dart-lambda-functions/code.png" class="article-body-image-wrapper"&gt;&lt;img alt="Lambda Function Example Code" src="https://res.cloudinary.com/practicaldev/image/fetch/s--CvPZloGH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://baransel.dev/post/dart-lambda-functions/code.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Follow my blog for more &lt;a href="https://baransel.dev/"&gt;baransel.dev&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>dart</category>
      <category>flutter</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>My Top Vue.js Interview Questions</title>
      <author>Michael Hoffmann</author>
      <pubDate>Thu, 30 Sep 2021 07:48:35 +0000</pubDate>
      <link>https://dev.to/mokkapps/my-top-vue-js-interview-questions-4ki5</link>
      <guid>https://dev.to/mokkapps/my-top-vue-js-interview-questions-4ki5</guid>
      <description>&lt;p&gt;This article summarizes a list of Vue.js interview questions that I would ask candidates and that I get often asked in interviews.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of Contents&lt;a href="#table-of-contents"&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#1-what-is-vuejs"&gt;1. What is Vue.js?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2-what-are-some-of-the-main-features-of-vuejs"&gt;2. What are some of the main features of Vue.js?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#3-why-would-you-choose-vue-instead-of-react-or-angular"&gt;3. Why would you choose Vue instead of React or Angular?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#4-what-is-an-sfc"&gt;4. What is an SFC?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#5-what-are-computed-properties"&gt;5. What are computed properties?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#6-what-are-watchers"&gt;6. What are watchers?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#7-what-is-the-difference-between-registering-a-component-locally-and-globally"&gt;7. What is the difference between registering a component locally and globally?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#8-what-are-some-of-the-most-important-directives-in-vue"&gt;8. What are some of the most important directives in Vue?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#9-what-is-the-vue-application-instance"&gt;9. What is the Vue application instance?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#10-what-is-the-difference-between-one-way-data-flow-and-two-way-data-binding"&gt;10. What is the difference between one-way data flow and two-way data binding?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#11-what-is-the-difference-between-a-slot-and-a-scoped-slot"&gt;11. What is the difference between a slot and a scoped slot?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#12-how-does-vue-know-when-it-should-rerender"&gt;12. How does Vue know when it should rerender?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#13-how-can-code-be-reused-between-components"&gt;13. How can code be reused between components?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#14-how-to-optimize-vuejs-performance"&gt;14. How to optimize Vue.js performance?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#15-which-lifecycles-and-corresponding-hooks-are-available-in-vue"&gt;15. Which lifecycles and corresponding hooks are available in Vue?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#1-what-is-vuejs"&gt;
  &lt;/a&gt;
  1. What is Vue.js?&lt;a href="#1-what-is-vuejs"&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://vuejs.org"&gt;Vue&lt;/a&gt; is a progressive framework for building user interfaces that was designed to be incrementally adoptable. Its core library is focused exclusively on the view layer so that it can easily be integrated with other projects or libraries.&lt;/p&gt;

&lt;p&gt;But in contrast to &lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt;, Vue provides companion libraries for routing and state management which are all officially supported and kept up-to-date with the core library.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-what-are-some-of-the-main-features-of-vuejs"&gt;
  &lt;/a&gt;
  2. What are some of the main features of Vue.js?&lt;a href="#2-what-are-some-of-the-main-features-of-vuejs"&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Virtual DOM: Vue uses a &lt;a href="https://vuejs.org/v2/guide/render-function.html#The-Virtual-DOM"&gt;Virtual DOM&lt;/a&gt;, similar to other frameworks such as React, Ember, etc.&lt;/li&gt;
&lt;li&gt;Components: Components are the basic building block for reusable elements in Vue applications.&lt;/li&gt;
&lt;li&gt;Templates: Vue uses HTML-based templates.&lt;/li&gt;
&lt;li&gt;Routing: Vue provide it’s &lt;a href="https://router.vuejs.org/"&gt;own router&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Built-in &lt;a href="https://v3.vuejs.org/api/directives.html"&gt;directives&lt;/a&gt;: For example, v-if or v-for&lt;/li&gt;
&lt;li&gt;Lightweight: Vue is a lightweight library compared to other frameworks.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#3-why-would-you-choose-vue-instead-of-react-or-angular"&gt;
  &lt;/a&gt;
  3. Why would you choose Vue instead of React or Angular?&lt;a href="#3-why-would-you-choose-vue-instead-of-react-or-angular"&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Vue.js combines the best parts of Angular and React. Vue.js is a more flexible, less opinionated solution than Angular but it’s still a framework and not a UI library like React&lt;/p&gt;

&lt;p&gt;I recently decided to focus my freelancer career on &lt;a href="https://vuejs.org"&gt;Vue.js&lt;/a&gt;, you can read more about this decision in the &lt;a href="https://www.mokkapps.de/blog/why-i-picked-vue-js-as-my-freelancer-niche/"&gt;corresponding blog post&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-what-is-an-sfc"&gt;
  &lt;/a&gt;
  4. What is an SFC?&lt;a href="#4-what-is-an-sfc"&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Vue &lt;a href="https://v3.vuejs.org/guide/single-file-component.html"&gt;Single File Components&lt;/a&gt; (aka &lt;code&gt;*.vue&lt;/code&gt; files, abbreviated as SFC) is a special file format that allows us to encapsulate the template (&lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt;), logic (&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;), and styling (&lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt;) of a Vue component in a single file.&lt;/p&gt;

&lt;p&gt;Vue SFC is a framework-specific file format and must be pre-compiled by &lt;a href="https://github.com/vuejs/vue-next/tree/master/packages/compiler-sfc"&gt;@vue/compiler-sfc&lt;/a&gt; into standard JavaScript and CSS. A compiled SFC is a standard JavaScript (ES) module.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-what-are-computed-properties"&gt;
  &lt;/a&gt;
  5. What are computed properties?&lt;a href="#5-what-are-computed-properties"&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://v3.vuejs.org/guide/computed.html#computed-properties"&gt;Computed properties&lt;/a&gt; should be used to remove as much logic as possible from the templates as otherwise the template gets bloated and is harder to maintain. If you have complex logic including reactive data in your template you should use a computed property instead.&lt;/p&gt;

&lt;p&gt;Instead of methods, computed properties are cached based on their reactive dependencies. A computed property will only re-evaluate when some of its reactive dependencies have changed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-what-are-watchers"&gt;
  &lt;/a&gt;
  6. What are watchers?&lt;a href="#6-what-are-watchers"&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://v3.vuejs.org/guide/computed.html#watchers"&gt;Watchers&lt;/a&gt; should be used when asynchronous or expensive operations need to be executed in response to changing data.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-what-is-the-difference-between-registering-a-component-locally-and-globally"&gt;
  &lt;/a&gt;
  7. What is the difference between registering a component locally and globally?&lt;a href="#7-what-is-the-difference-between-registering-a-component-locally-and-globally"&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;If a component is &lt;a href="https://v3.vuejs.org/guide/component-registration.html#global-registration"&gt;registered globally&lt;/a&gt; it can be used in the template of any component instance within this application:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Vue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createApp&lt;/span&gt;&lt;span class="p"&gt;({});&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;component-a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/* ... */&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Global registration can unnecessarily increase your JavaScript bundle if you are using build systems like Webpack. If you stop using a component in your code, it will still be included in the final build.&lt;/p&gt;

&lt;p&gt;To avoid this, we can &lt;a href="https://v3.vuejs.org/guide/component-registration.html#local-registration"&gt;register components locally&lt;/a&gt; by defining them in the component where it is needed:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ComponentA&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./ComponentA.vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;components&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;ComponentA&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that locally registered components are not available in subcomponents.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-what-are-some-of-the-most-important-directives-in-vue"&gt;
  &lt;/a&gt;
  8. What are some of the most important directives in Vue?&lt;a href="#8-what-are-some-of-the-most-important-directives-in-vue"&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://v3.vuejs.org/api/directives.html#v-if"&gt;v-if&lt;/a&gt; adds or removes DOM elements based on the given expression.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://v3.vuejs.org/api/directives.html#v-else"&gt;v-else&lt;/a&gt; displays content only when the expression adjacent v-if resolves to false.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://v3.vuejs.org/api/directives.html#v-show"&gt;v-show&lt;/a&gt; is similar to v-if, but it renders all elements to the DOM and then uses the CSS display property to show/hide elements.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://v3.vuejs.org/api/directives.html#v-for"&gt;v-for&lt;/a&gt; allows us to loop through items in an array or object.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://v3.vuejs.org/api/directives.html#v-model"&gt;v-model&lt;/a&gt; is used for two-way data bindings.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://v3.vuejs.org/api/directives.html#v-on"&gt;v-on&lt;/a&gt; attaches an event listener to the element.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://v3.vuejs.org/api/directives.html#v-model"&gt;Here&lt;/a&gt; you can find all available directives.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-what-is-the-vue-application-instance"&gt;
  &lt;/a&gt;
  9. What is the Vue application instance?&lt;a href="#9-what-is-the-vue-application-instance"&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The &lt;a href="https://v3.vuejs.org/guide/instance.html#creating-an-application-instance"&gt;application instance&lt;/a&gt; is used to register &lt;em&gt;globals&lt;/em&gt; that can then be used by components within that application. An application instance is created with the &lt;code&gt;createApp&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Vue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createApp&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="cm"&gt;/* options */&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In Vue 2 this was called &lt;a href="https://vuejs.org/v2/guide/instance.html"&gt;Vue instance&lt;/a&gt; and created this way:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;vm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Vue&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="c1"&gt;// options&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#10-what-is-the-difference-between-oneway-data-flow-and-twoway-data-binding"&gt;
  &lt;/a&gt;
  10. What is the difference between one-way data flow and two-way data binding?&lt;a href="#10-what-is-the-difference-between-one-way-data-flow-and-two-way-data-binding"&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="///static/1092c69ce0c1b6d0194e787a58dc09ab/d9c39/data-binding.jpg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q6h8zS4H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.mokkapps.de/static/1092c69ce0c1b6d0194e787a58dc09ab/15ec7/data-binding.jpg" alt="One-Way &amp;amp; Two-Way Data Binding" title="One-Way &amp;amp; Two-Way Data Binding"&gt;&lt;/a&gt;One-Way &amp;amp; Two-Way Data Binding&lt;/p&gt;

&lt;p&gt;Vue uses a one-way data flow. Parents can pass data to child components using a prop and bind the data using the &lt;a href="https://vuejs.org/v2/api/#v-bind"&gt;v-bind directive&lt;/a&gt;. When the parent component updates the prop value, it’s automatically updated in the child component. You should avoid mutating the property inside the child component and it will not affect the property in the parent component (unless it’s an array or object). Using &lt;a href="https://vuejs.org/v2/api/#v-bind"&gt;Events&lt;/a&gt; the child component can communicate back to the parent.&lt;/p&gt;

&lt;p&gt;Vue provides the &lt;a href="https://vuejs.org/v2/api/#v-model"&gt;v-model directive&lt;/a&gt; for two-way data binding of form inputs. &lt;code&gt;v-model&lt;/code&gt; is just syntax sugar for &lt;code&gt;v-bind&lt;/code&gt; combined with &lt;code&gt;v-on:input&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#11-what-is-the-difference-between-a-slot-and-a-scoped-slot"&gt;
  &lt;/a&gt;
  11. What is the difference between a slot and a scoped slot?&lt;a href="#11-what-is-the-difference-between-a-slot-and-a-scoped-slot"&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;A &lt;a href="https://v3.vuejs.org/guide/component-slots.html#slots"&gt;slot&lt;/a&gt; is a placeholder in a child component that is filled with content passed from the parent. Content of a regular slot is compiled in the parent’s scope and then passed to the child component.&lt;/p&gt;

&lt;p&gt;Scoped slots are needed if the slot content needs to have access to data only available in the child component. We can bind attributes a &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt;, these elements are called &lt;strong&gt;slot props&lt;/strong&gt;. Now, in the parent scope, we can use &lt;code&gt;v-slot&lt;/code&gt; with a value to define a name for the slot props we’ve been provided:&lt;/p&gt;

&lt;p&gt;&lt;a href="///static/4a5efa364ae5e8b1e637c66a2a149f1c/3e6fe/scoped-slot.jpg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z_EqZJe6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.mokkapps.de/static/4a5efa364ae5e8b1e637c66a2a149f1c/15ec7/scoped-slot.jpg" alt="Vue Scoped Slot" title="Vue Scoped Slot"&gt;&lt;/a&gt;Vue Scoped Slot&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#12-how-does-vue-know-when-it-should-rerender"&gt;
  &lt;/a&gt;
  12. How does Vue know when it should rerender?&lt;a href="#12-how-does-vue-know-when-it-should-rerender"&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The following explanation is based on &lt;a href="https://v3.vuejs.org/guide/reactivity-fundamentals.html#reactivity-fundamentals"&gt;Vue 3’s Reactivity&lt;/a&gt;. &lt;a href="https://www.sitepoint.com/vue-3-reactivity-system/"&gt;This article&lt;/a&gt; describes how Vue 2 implemented reactivity.&lt;/p&gt;

&lt;p&gt;Vue uses an unobtrusive reactivity system which is one its most distinct features.&lt;/p&gt;

&lt;p&gt;But what is reactivity? Reactivity is a programming paradigm that allows us to adjust to changes in a declarative manner.&lt;/p&gt;

&lt;p&gt;The official documentation uses an Excel spreadsheet to demonstrate reactivity:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://v3.vuejs.org/images/reactivity-spreadsheet.mp4"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nS_8if6X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.mokkapps.de/static/ca7df137f80eb95ed239e6ca1d5150a1/15ec7/reactivity-video-thumbnail.jpg" alt="Vue Reactivity Spreadsheet Video" title="Vue Reactivity Spreadsheet Video"&gt;Vue Reactivity Spreadsheet Video&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, we get the SUM if we put the number 2 in the first cell and number 3 in the second cell. The reactive part happens if we update the first number and the SUM automatically gets updated too.&lt;/p&gt;

&lt;p&gt;Unfortunately, JavaScript variables are not reactive by default:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;value1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;value2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;value2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 5&lt;/span&gt;
&lt;span class="nx"&gt;value1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Still 5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Therefore, Vue 3 added an abstraction on &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy"&gt;JavaScript Proxy&lt;/a&gt; to be able to achieve the reactiveness.&lt;/p&gt;

&lt;p&gt;In Vue 3, we can easily declare a reactive state using the &lt;code&gt;reactive&lt;/code&gt; method&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;reactive&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// reactive state&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;reactive&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or create standalone reactive values as &lt;code&gt;refs&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 0&lt;/span&gt;

&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#13-how-can-code-be-reused-between-components"&gt;
  &lt;/a&gt;
  13. How can code be reused between components?&lt;a href="#13-how-can-code-be-reused-between-components"&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;In Vue 2 and 3 we can use &lt;a href="https://vuejs.org/v2/guide/mixins.html"&gt;Mixins&lt;/a&gt; to reuse code between components.&lt;/p&gt;

&lt;p&gt;Since Vue 3 the framework provides the &lt;a href="https://v3.vuejs.org/guide/composition-api-introduction.html#why-composition-api"&gt;Composition API&lt;/a&gt; that resolves the &lt;a href="https://v3.vuejs.org/guide/composition-api-introduction.html#why-composition-api"&gt;Mixins drawbacks&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#14-how-to-optimize-vuejs-performance"&gt;
  &lt;/a&gt;
  14. How to optimize Vue.js performance?&lt;a href="#14-how-to-optimize-vuejs-performance"&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Use &lt;a href="https://v3.vuejs.org/guide/ssr/routing.html#code-splitting"&gt;code splitting&lt;/a&gt; (also known as lazy loading) to reduce the size of assets that need to be downloaded by the browser for the initial render. Essentially, it helps to load just the parts of the initial screen that are currently needed. All other parts of the application are downloaded when they are needed and requested:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// the MyUser component is dynamically loaded if the `/user route is visited:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;routes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/user&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./components/MyUser.vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#15-which-lifecycles-and-corresponding-hooks-are-available-in-vue"&gt;
  &lt;/a&gt;
  15. Which lifecycles and corresponding hooks are available in Vue?&lt;a href="#15-which-lifecycles-and-corresponding-hooks-are-available-in-vue"&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Each Vue component instance goes through a series of initialization steps when it’s created. For example, it needs to set up data observation, compile the template, mount the instance to the DOM, and update the DOM when data changes. Along the way, it also runs functions called &lt;a href="https://v3.vuejs.org/guide/instance.html#lifecycle-hooks"&gt;lifecycle hooks&lt;/a&gt;, which allows us to execute custom code at specific stages.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Creation hooks (&lt;code&gt;beforeCreate&lt;/code&gt; and &lt;code&gt;created&lt;/code&gt;) allow us to perform actions before the component has even been added to the DOM. These hooks are also executed during server-side rendering. The &lt;code&gt;created&lt;/code&gt; hook is the perfect lifecycle hook to trigger HTTP requests and populate any initial data that the component needs.&lt;/li&gt;
&lt;li&gt;Mounting hooks (&lt;code&gt;beforeMount&lt;/code&gt;, &lt;code&gt;mounted&lt;/code&gt;) are often the most-used hooks and allow us to access the component immediately before and after the first render. The &lt;code&gt;mounted&lt;/code&gt; hook is an ideal time to integrate 3rd party libraries or to access the DOM.&lt;/li&gt;
&lt;li&gt;Updating hooks (&lt;code&gt;beforeUpdate&lt;/code&gt;, &lt;code&gt;updated&lt;/code&gt;) are called whenever a reactive property used by the component changes, or something else causes it to re-render. In the &lt;code&gt;updated&lt;/code&gt; hook the DOM and the model are in-sync while in the &lt;code&gt;beforeUpdate&lt;/code&gt; hook only the model is updated but not the DOM.&lt;/li&gt;
&lt;li&gt;Destruction hooks (&lt;code&gt;beforeDestroy&lt;/code&gt;, &lt;code&gt;destroyed&lt;/code&gt;) allow us to perform actions when the component is destroyed, such as cleanup or sending analytics. In the &lt;code&gt;beforeDestroy&lt;/code&gt; hook we still have access to the Vue instance and can, for example, emit events. &lt;code&gt;destroyed&lt;/code&gt; is the ideal place for a final cleanup, e.g. removing event listeners. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Below is a diagram for the instance lifecycle:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v8tgs_KK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.mokkapps.de/d2f8a1b763c9d39f7511b5767b3dce79/vue-lifecycle.svg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v8tgs_KK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.mokkapps.de/d2f8a1b763c9d39f7511b5767b3dce79/vue-lifecycle.svg" alt="Vue Instance Lifecycle Diagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There exists an additional interesting lifecycle hook called &lt;a href="https://v3.vuejs.org/api/options-lifecycle-hooks.html#unmounted"&gt;errorCaptured&lt;/a&gt; which is called when an error from any descendent component is captured.&lt;/p&gt;

&lt;p&gt;This hook receives three arguments: the error, the component instance that triggered the error, and a string containing information on where the error was captured. The hook can return false to stop the error from propagating further.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion&lt;a href="#conclusion"&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;With these interview questions, you should be well-prepared for any upcoming job interviews. Let me know in the comments if you would ask any other important questions about Vue.&lt;/p&gt;

&lt;p&gt;If you liked this article, follow me on &lt;a href="https://twitter.com/mokkapps"&gt;Twitter&lt;/a&gt; to get notified about new blog posts and more content from me.&lt;/p&gt;

&lt;p&gt;Alternatively (or additionally), you can also &lt;a href="https://mokkapps.de/newsletter"&gt;subscribe to my newsletter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>vue</category>
      <category>interview</category>
      <category>career</category>
    </item>
    <item>
      <title>4 Useful React Tricks I Bet You Didn't Know Before (Some Are Too Trivial But Useful)</title>
      <author>Mohmed Ishak</author>
      <pubDate>Thu, 30 Sep 2021 07:35:40 +0000</pubDate>
      <link>https://dev.to/ishakmohmed/4-useful-react-tricks-i-bet-you-didn-t-know-before-some-are-too-trivial-but-useful-4om8</link>
      <guid>https://dev.to/ishakmohmed/4-useful-react-tricks-i-bet-you-didn-t-know-before-some-are-too-trivial-but-useful-4om8</guid>
      <description>&lt;p&gt;Hello, React devs! Think you know React? You probably do, but there are a couple of cool tricks only a handful of React devs would know which I'm about to share with you. If any of these tips are new to you, you owe me a like.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-use-jsx-extension-for-react-components"&gt;
  &lt;/a&gt;
  [1] Use JSX Extension For React Components
&lt;/h3&gt;

&lt;p&gt;To be honest, I don't know if .jsx extension for components make your React app faster, but it certainly helps to differentiate component files and other files in your project directory. Plus, in VS Code, you'll see a React logo beside .jsx files instead of JavaScript logo so you can be assured that you're a React developer at all times.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UUz7ECqr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/njtajaw0x6mpoeitlst2.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UUz7ECqr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/njtajaw0x6mpoeitlst2.PNG" alt="Mohmed Ishak"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#2-save-one-line-of-code"&gt;
  &lt;/a&gt;
  [2] Save One Line of Code
&lt;/h3&gt;

&lt;p&gt;Save one line of code by removing the following line because it's unnecessary to import React from React 17 onwards.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-modularize-components"&gt;
  &lt;/a&gt;
  [3] Modularize Components
&lt;/h3&gt;

&lt;p&gt;So, you have structured your React project well with descriptive files and folders, but what about individual components? I bet they look like the following picture.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZgXq7H1n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zlrntfpzmz8t0ptgd312.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZgXq7H1n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zlrntfpzmz8t0ptgd312.PNG" alt="Mohmed Ishak"&gt;&lt;/a&gt;&lt;br&gt;
The problem is that you're writing your JSX expressions one after another and the codes look like a long, boring article. What you need to do instead is you need to separate groups of related JSX expressions to individual methods and compose those methods together in the return statement (which is responsible for displaying UI on the screen).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Cart&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;loadAllProducts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Card&lt;/span&gt;
            &lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;))}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;loadCheckout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Checkout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;loadAllProducts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;loadCheckout&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;See what I did there? Instead of cramming all my JSX expressions after the return keyword, I wrote individual, meaningful methods before the return keyword and composed them afterwards. With this, you can clearly see all the working parts in a component.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-weird-hack-to-reload-component"&gt;
  &lt;/a&gt;
  [4] Weird Hack to Reload Component
&lt;/h3&gt;

&lt;p&gt;There are various ways to reload your component but sometimes, you'll get stuck because you might perceive useState() and useEffect() Hooks to run a certain way and they wouldn't which could leave you frustrated. Thankfully, there's a way to reload your component whenever you want to using the following technique.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;reload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setReload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// a bunch of codes go here...&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;showRemoveFromCart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;removeFromCart&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;removeFromCart&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;
          &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// remove the product from cart&lt;/span&gt;
            &lt;span class="nx"&gt;setReload&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;reload&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="p"&gt;}}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nx"&gt;Remove&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="nx"&gt;cart&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="c1"&gt;// return...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is a demo component which isn't fully implemented. Anyway,  you need to pass two arguments just like in this function. In this case, one is reload and another is a function to set the reload value. If it doesn't make sense don't worry, because all you need to do is, whenever you want this component to be re-rendered, use the setReload() method (you can name it anything you want) and flip the value of reload argument just like I did in showRemoveFromCart() method. Your component will refresh immediately.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Génération de code source C# en se basant sur des attributs</title>
      <author>Younup</author>
      <pubDate>Thu, 30 Sep 2021 07:08:40 +0000</pubDate>
      <link>https://dev.to/younup/generation-de-code-source-c-en-se-basant-sur-des-attributs-faa</link>
      <guid>https://dev.to/younup/generation-de-code-source-c-en-se-basant-sur-des-attributs-faa</guid>
      <description>&lt;h1&gt;
  &lt;a href="#g%C3%A9n%C3%A9ration-de-code-source-c-en-se-basant-sur-des-attributs"&gt;
  &lt;/a&gt;
  Génération de code source C# en se basant sur des attributs
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#ce-que-lon-va-d%C3%A9couvrir"&gt;
  &lt;/a&gt;
  Ce que l'on va découvrir
&lt;/h2&gt;

&lt;p&gt;Nous allons voir comment :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Régler son environnement pour créer et déboguer un générateur de code C#.&lt;/li&gt;
&lt;li&gt;Développer un générateur de code qui se base sur des annotations pour générer une classe pendant la phase de build.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#pr%C3%A9requis"&gt;
  &lt;/a&gt;
  Prérequis
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Visual Studio 2019 16.10+&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Et pour le debug :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Charge de travail "Développement d'extensions pour Visual Studio"&lt;/li&gt;
&lt;li&gt;Composant individuel "SDK .NET Compiler Platform"&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#cr%C3%A9er-un-projet-de-g%C3%A9n%C3%A9ration-de-code"&gt;
  &lt;/a&gt;
  Créer un projet de génération de code
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#le-projet"&gt;
  &lt;/a&gt;
  Le projet
&lt;/h3&gt;

&lt;p&gt;Créer un projet de type "bibliothèque de code" (library) en .NET Standard 2.0.&lt;/p&gt;

&lt;p&gt;Ajouter les références suivantes via nuget :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Microsoft.CodeAnalysis.CSharp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Microsoft.CodeAnalysis.Analyzers&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; : Les versions de ces packages sont liées à une version du SDK dotnet précise. Pour assurer le bon fonctionnement du générateur, bien vérifier que le SDK installé est la dernière version avant d'installer les packages. Une fois les packages installés, ne pas les mettre à jour sans mettre également le SDK à jour.&lt;/p&gt;

&lt;p&gt;Il faudra également éditer le fichier projet pour ajouter dans le nœud &lt;code&gt;PropertyGroup&lt;/code&gt; (celui qui contient &lt;code&gt;TargetFramework&lt;/code&gt;) une balise &lt;code&gt;IsRoslynComponent&lt;/code&gt; qui prendra la valeur &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Pour un résultat ressemblant à :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;Project&lt;/span&gt; &lt;span class="na"&gt;Sdk=&lt;/span&gt;&lt;span class="s"&gt;"Microsoft.NET.Sdk"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;PropertyGroup&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;TargetFramework&amp;gt;&lt;/span&gt;netstandard2.0&lt;span class="nt"&gt;&amp;lt;/TargetFramework&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;IsRoslynComponent&amp;gt;&lt;/span&gt;true&lt;span class="nt"&gt;&amp;lt;/IsRoslynComponent&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;LangVersion&amp;gt;&lt;/span&gt;9.0&lt;span class="nt"&gt;&amp;lt;/LangVersion&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/PropertyGroup&amp;gt;&lt;/span&gt;
[...]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; : La version minimum du langage nécessaire pour utiliser les générateurs de code est la version &lt;code&gt;9.0&lt;/code&gt;. Il faudra donc que tous les projets concernés (ceux exposant des générateurs ou ceux qui les consomment utilisent a minima cette version du langage).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#le-template"&gt;
  &lt;/a&gt;
  Le template
&lt;/h3&gt;

&lt;p&gt;Maintenant que notre projet est configuré pour se comporter comme un projet de générateur de code, il nous reste plus qu'à en créer un exemple.&lt;/p&gt;

&lt;p&gt;Le template de base est le suivant :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Microsoft.CodeAnalysis&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Microsoft.CodeAnalysis.CSharp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Microsoft.CodeAnalysis.CSharp.Syntax&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Microsoft.CodeAnalysis.Text&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;MyGeneratorNameSpace&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Generator&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyGenerator&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ISourceGenerator&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GeneratorInitializationContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GeneratorExecutionContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Deux éléments sont particulièrement importants ici :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;L'attribut &lt;code&gt;[Generator]&lt;/code&gt; qui indique que cette classe devra être exécutée comme générateur de code&lt;/li&gt;
&lt;li&gt;L'interface implémentée &lt;code&gt;ISourceGenerator&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;La méthode &lt;code&gt;Initialize&lt;/code&gt; est exécutée pendant que le générateur parcourt le code.&lt;/p&gt;

&lt;p&gt;La méthode &lt;code&gt;Execute&lt;/code&gt; est exécutée une fois que le code a fini d'être parcouru, c'est ici que le code sera effectivement généré.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#r%C3%A9f%C3%A9rencer-un-g%C3%A9n%C3%A9rateur-de-code"&gt;
  &lt;/a&gt;
  Référencer un générateur de code
&lt;/h3&gt;

&lt;p&gt;Pour référencer un générateur de code dans un projet, il est nécessaire d'éditer le fichier &lt;code&gt;.csproj&lt;/code&gt; manuellement.&lt;/p&gt;

&lt;p&gt;Nous allons ajouter un nœud &lt;code&gt;ItemGroup&lt;/code&gt; contenant une référence de projet.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ItemGroup&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;ProjectReference&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"path-to-sourcegenerator-project.csproj"&lt;/span&gt; 
                      &lt;span class="na"&gt;OutputItemType=&lt;/span&gt;&lt;span class="s"&gt;"Analyzer"&lt;/span&gt;
                      &lt;span class="na"&gt;ReferenceOutputAssembly=&lt;/span&gt;&lt;span class="s"&gt;"false"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ItemGroup&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Cela ressemble à une référence de projet classique avec deux attributs supplémentaires obligatoires:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;OutputTypeItem&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ReferenceOutputAssembly&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Le second doit prendre la valeur &lt;code&gt;true&lt;/code&gt; si vous référencez des types qui sont compris dans l'assembly contenant le générateur de code ; sinon, &lt;code&gt;false&lt;/code&gt; permet de ne pas avoir de dépendance à l'assembly contenant le générateur de code dans les assemblys le référençant.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hello-world"&gt;
  &lt;/a&gt;
  Hello World
&lt;/h2&gt;

&lt;p&gt;Maintenant que nous avons vu la théorie, passons à la pratique pour mettre en place un projet console qui référencera un projet de générateur de code qui nous affichera un HelloWorld ainsi que la liste des arbres syntaxiques connus.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#la-solution"&gt;
  &lt;/a&gt;
  La solution
&lt;/h3&gt;

&lt;p&gt;Nous allons nous atteler à créer notre solution &lt;code&gt;HelloWorld&lt;/code&gt;, celle-ci contiendra :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;un projet console .NET 5.0&lt;/li&gt;
&lt;li&gt;un projet de type bibliothèque ciblant .NET Standard 2.0&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Si l'on applique ce que l'on a précédemment évoqué, les deux fichiers projets auront un contenu similaire à :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!--HelloGeneratedWorld.csproj (notre application console)--&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;Project&lt;/span&gt; &lt;span class="na"&gt;Sdk=&lt;/span&gt;&lt;span class="s"&gt;"Microsoft.NET.Sdk"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;PropertyGroup&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;OutputType&amp;gt;&lt;/span&gt;Exe&lt;span class="nt"&gt;&amp;lt;/OutputType&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;TargetFramework&amp;gt;&lt;/span&gt;net5.0&lt;span class="nt"&gt;&amp;lt;/TargetFramework&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/PropertyGroup&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;ItemGroup&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;ProjectReference&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"..\SourceGenerators\SourceGenerators.csproj"&lt;/span&gt;
                      &lt;span class="na"&gt;OutputItemType=&lt;/span&gt;&lt;span class="s"&gt;"Analyzer"&lt;/span&gt;
                      &lt;span class="na"&gt;ReferenceOutputAssembly=&lt;/span&gt;&lt;span class="s"&gt;"false"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/ItemGroup&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/Project&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!--SourceGEnerators.csproj (notre librairie .NET Standard)--&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;Project&lt;/span&gt; &lt;span class="na"&gt;Sdk=&lt;/span&gt;&lt;span class="s"&gt;"Microsoft.NET.Sdk"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;PropertyGroup&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;TargetFramework&amp;gt;&lt;/span&gt;netstandard2.0&lt;span class="nt"&gt;&amp;lt;/TargetFramework&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;IsRoslynComponent&amp;gt;&lt;/span&gt;true&lt;span class="nt"&gt;&amp;lt;/IsRoslynComponent&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;LangVersion&amp;gt;&lt;/span&gt;9.0&lt;span class="nt"&gt;&amp;lt;/LangVersion&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/PropertyGroup&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;ItemGroup&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;PackageReference&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"Microsoft.CodeAnalysis.Analyzers"&lt;/span&gt; &lt;span class="na"&gt;Version=&lt;/span&gt;&lt;span class="s"&gt;"3.3.2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;PrivateAssets&amp;gt;&lt;/span&gt;all&lt;span class="nt"&gt;&amp;lt;/PrivateAssets&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;IncludeAssets&amp;gt;&lt;/span&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;span class="nt"&gt;&amp;lt;/IncludeAssets&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/PackageReference&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;PackageReference&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"Microsoft.CodeAnalysis.CSharp"&lt;/span&gt; &lt;span class="na"&gt;Version=&lt;/span&gt;&lt;span class="s"&gt;"3.11.0"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/ItemGroup&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/Project&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Nous allons nous inspirer &lt;a href="https://devblogs.microsoft.com/dotnet/introducing-c-source-generators/"&gt;d'un billet de blog&lt;/a&gt; par Philippe Carter introduisant les générateurs de source.&lt;/p&gt;

&lt;p&gt;Le code de génération de notre &lt;code&gt;HelloWorld&lt;/code&gt; mis au goût du jour est donc le suivant :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="c1"&gt;// HelloWorldGenerator.cs&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Text&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Microsoft.CodeAnalysis&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Microsoft.CodeAnalysis.Text&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;SourceGenerators&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Generator&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyGenerator&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ISourceGenerator&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GeneratorInitializationContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GeneratorExecutionContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// begin creating the source we'll inject into the users compilation&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;sourceBuilder&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;StringBuilder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;@"
using System;
namespace HelloWorldGenerated
{
    public static class HelloWorld
    {
        public static void SayHello() 
        {
            Console.WriteLine(""Hello from generated code!"");
            Console.WriteLine(""The following syntax trees existed in the compilation that created this program:"");
"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="c1"&gt;// using the context, get a list of syntax trees in the users compilation&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;syntaxTrees&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Compilation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SyntaxTrees&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="c1"&gt;// add the filepath of each tree to the class we're building&lt;/span&gt;
            &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SyntaxTree&lt;/span&gt; &lt;span class="n"&gt;tree&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;syntaxTrees&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;sourceBuilder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AppendLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;$@"Console.WriteLine(@"" - &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FilePath&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"");"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="c1"&gt;// finish creating the source to inject&lt;/span&gt;
            &lt;span class="n"&gt;sourceBuilder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;@"
        }
    }
}"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="c1"&gt;// inject the created source into the users compilation&lt;/span&gt;
            &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddSource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"helloWorldGenerator"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SourceText&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;From&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sourceBuilder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;Encoding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UTF8&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Et son utilisation dans notre application console :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Program.cs&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;HelloGeneratedWorld&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Program&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello World!"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;HelloWorldGenerated&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HelloWorld&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;SayHello&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Votre solution devrait ressembler à la capture ci-dessous :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3byGPDKr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/izwk7yt4zqolvt8h05m3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3byGPDKr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/izwk7yt4zqolvt8h05m3.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Si vous avez appliqué les instructions, sans avoir lancé le débogage (ou la compilation) de l'application console, Visual Studio doit vous indiquer qu'il ne connait pas les types !&lt;/p&gt;

&lt;p&gt;C'est normal, même si contre-intuitif et pas forcément pratique.&lt;/p&gt;

&lt;p&gt;De ce que j'ai pu constater, la génération de code se fait à deux principaux moments :&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Au chargement du projet référençant le générateur&lt;/li&gt;
&lt;li&gt;A la compilation&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Ce qui veut dire... Que lancer la compilation dans cet état ne renverra pas d'erreur, et mieux que ça, vous affichera les arbres syntaxiques connus par le générateur&lt;/p&gt;

&lt;p&gt;Par exemple :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Hello World!
Hello from generated code!
The following syntax trees existed in the compilation that created this program:
 - C:\SourceGenerators\Examples\HelloGeneratedWorld\Program.cs
 - C:\SourceGenerators\Examples\HelloGeneratedWorld\obj\Debug\net5.0\.NETCoreApp,Version=v5.0.AssemblyAttributes.cs
 - C:\SourceGenerators\Examples\HelloGeneratedWorld\obj\Debug\net5.0\HelloGeneratedWorld.AssemblyInfo.cs
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;La solution complète prête à être utilisée est disponible dans ce &lt;a href="https://github.com/sidewinder94/HelloSourceGenerators"&gt;dépôt Github&lt;/a&gt; dans la branche HelloWorld.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; : J'utilisais le SDK .NET 5.0.400 quand j'ai créé le projet, si vous avez une version différente, vous pourriez être amenés à devoir changer la version des packages nuget du projet &lt;code&gt;SourceGenerators&lt;/code&gt; pour que tout fonctionne correctement.&lt;/p&gt;

&lt;p&gt;Pour illustrer la note concernant la propriété &lt;code&gt;ReferenceOutputAssembly&lt;/code&gt;, une capture du dossier de sortie après un premier debug :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HZNn030T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oqrz285qm8o3j7iw3m7h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HZNn030T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oqrz285qm8o3j7iw3m7h.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On ne trouve pas d'assembly &lt;code&gt;SourceGenerators&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#un-cran-plus-loin-analysons-les-arbres-syntaxiques"&gt;
  &lt;/a&gt;
  Un cran plus loin : analysons les arbres syntaxiques
&lt;/h2&gt;

&lt;p&gt;Cette section est basée sur ma propre question/réponse disponible sur &lt;a href="https://stackoverflow.com/a/65126680/2245256"&gt;StackOverflow&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Nous allons dans un premier temps, introduire le problème :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CustomAttribute&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Attribute&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="p"&gt;[...]&lt;/span&gt;
   &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;CustomAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;[...]&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nf"&gt;Custom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Class2&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Class1&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;M1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Class2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;M2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Class2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;partial&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Class2&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;[...]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;L'idée est d'avoir un attribut que nous allons pouvoir placer sur une classe afin de générer de générer du code pour dans une autre classe qui sera partielle et qui contiendra une instance de la &lt;code&gt;Class1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;L'idée est de générer un &lt;code&gt;partial&lt;/code&gt; qui ressemblera à :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;partial&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Class2&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;M1&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_wrapper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;M1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;M2&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_wrapper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;M2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Maintenant que l'objectif est posé, voyons comment nous allons pouvoir :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;trouver quelles classes sont marquées par ces attributs,&lt;/li&gt;
&lt;li&gt;lister les méthodes, leurs types de retours et leurs paramètres,&lt;/li&gt;
&lt;li&gt;générer la source pour le &lt;code&gt;partial&lt;/code&gt; pour les classes identifiées.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Nous allons tout rédiger dans la méthode &lt;code&gt;Execute&lt;/code&gt; du générateur.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#exclure-les-arbres-qui-ne-contiennent-aucune-classe-annot%C3%A9e"&gt;
  &lt;/a&gt;
  Exclure les arbres qui ne contiennent aucune classe annotée
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;treesWithlassWithAttributes&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; 
    &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Compilation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SyntaxTrees&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;st&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; 
            &lt;span class="n"&gt;st&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetRoot&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;DescendantNodes&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OfType&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ClassDeclarationSyntax&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; 
                    &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;DescendantNodes&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OfType&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;AttributeSyntax&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()&lt;/span&gt;
                        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;()));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;En lisant cet extrait, on se rend compte tout de suite que LinQ va être un de nos meilleurs amis et que la navigation fonctionne un peu comme LinQToXML.&lt;/p&gt;

&lt;p&gt;Par étapes :&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;On recherche et parcourt les nœuds de type déclaration de classe.&lt;/li&gt;
&lt;li&gt;On recherche les nœuds qui appartiennent à la classe des nœuds de type attribut.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Et on ne retourne que les arbres syntaxiques qui ont donc des classes possédant au moins un attribut.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#retirer-les-classes-qui-ne-sont-pas-annot%C3%A9es"&gt;
  &lt;/a&gt;
  Retirer les classes qui ne sont pas annotées
&lt;/h3&gt;

&lt;p&gt;Rien n'empêche en C# d'avoir plusieurs classes définies dans le même fichier.&lt;/p&gt;

&lt;p&gt;Cette étape consiste donc à exclure toutes les classes des arbres syntaxiques retenus qui n'ont pas d'attributs.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;declaredClass&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tree&lt;/span&gt;
                    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetRoot&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;DescendantNodes&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OfType&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ClassDeclarationSyntax&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()&lt;/span&gt;
                    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;DescendantNodes&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;OfType&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;AttributeSyntax&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;().&lt;/span&gt;&lt;span class="nf"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ici, &lt;code&gt;tree&lt;/code&gt; correspond à un des arbres syntaxiques sélectionnés précédemment.&lt;/p&gt;

&lt;p&gt;Nous descendons une fois encore pour sélectionner les nœuds de type déclaration de classe, mais uniquement ceux qui sont décorés par des attributs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#retirer-les-classes-qui-ne-sont-pas-annot%C3%A9es-par-notre-attribut"&gt;
  &lt;/a&gt;
  Retirer les classes qui ne sont pas annotées par notre attribut
&lt;/h3&gt;

&lt;p&gt;Nous allons commencer par initialiser un modèle &lt;strong&gt;sémantique&lt;/strong&gt; correspondant à notre arbre syntaxique.&lt;/p&gt;

&lt;p&gt;Ceci va nous permettre notamment :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;de rechercher des types,&lt;/li&gt;
&lt;li&gt;d'obtenir facilement des informations sur les types sans avoir à parcourir l'arbre syntaxique.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cela se fait simplement :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;semanticModel&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Compilation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetSemanticModel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Maintenant que notre modèle est initialisé, retournons à nos moutons :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;nodes&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;declaredClass&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;DescendantNodes&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OfType&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;AttributeSyntax&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FirstOrDefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;DescendantTokens&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dt&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;IsKind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SyntaxKind&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IdentifierToken&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
        &lt;span class="p"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;semanticModel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetTypeInfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Parent&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="n"&gt;attributeSymbol&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nf"&gt;DescendantTokens&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nf"&gt;Where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dt&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;IsKind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SyntaxKind&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IdentifierToken&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nf"&gt;ToList&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; : &lt;code&gt;attributeSymbol&lt;/code&gt; est une variable définie au début de ma méthode &lt;code&gt;Execute&lt;/code&gt; qui contient le &lt;code&gt;Type&lt;/code&gt; de l'attribut qui nous intéresse.&lt;/p&gt;

&lt;p&gt;Nous repartons donc de la déclaration de notre classe dans notre arbre syntaxique, pour rechercher les attributs.&lt;/p&gt;

&lt;p&gt;On va ensuite sélectionner la première déclaration d'attribut qui a un &lt;code&gt;IdentifierToken&lt;/code&gt; dont le nœud parent est du type de l'attribut (on notera la comparaison par nom : l'API sémantique ne permet pas d'obtenir un &lt;code&gt;Type&lt;/code&gt;, d'où la comparaison par le nom).&lt;/p&gt;

&lt;p&gt;Pour l'étape suivante, nous aurons besoin des &lt;code&gt;IdentifiersToken&lt;/code&gt;. Nous allons donc nous appuyer sur l'opérateur "Elvis" (&lt;code&gt;?.&lt;/code&gt;) pour propager les valeurs nulles éventuelles, ce qui nous permettra de passer directement à l'itération suivante de notre boucle.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#r%C3%A9cup%C3%A9rer-le-type-de-classe-utilis%C3%A9-comme-param%C3%A8tre-de-lattribut"&gt;
  &lt;/a&gt;
  Récupérer le type de classe utilisé comme paramètre de l'attribut
&lt;/h3&gt;

&lt;p&gt;L'étape précédente nous a permis d'obtenir, dans la variable &lt;code&gt;nodes&lt;/code&gt;, les &lt;code&gt;IdentifiersToken&lt;/code&gt; correspondant à l'utilisation de l'attribut.&lt;/p&gt;

&lt;p&gt;Un premier identifiant représentant le nom de l'attribut, puis un second qui correspond au nom de la classe passée en paramètre.&lt;/p&gt;

&lt;p&gt;Pour obtenir les détails de la classe qui nous intéresse sans avoir à reparcourir tous nos arbres syntaxiques, nous allons à nouveau nous appuyer sur le modèle sémantique que nous avons initialisé plus tôt.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;relatedClass&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;semanticModel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetTypeInfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Last&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;Parent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Puisque nous avons maintenant obtenu le nom de la classe, il est possible de commencer a générer le code lié à cette classe.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; : Le nom de la classe peut être obtenu avec &lt;code&gt;relatedClass.Type.Name&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lister-toutes-les-m%C3%A9thodes-pr%C3%A9sentes-dans-la-classe"&gt;
  &lt;/a&gt;
  Lister toutes les méthodes présentes dans la classe
&lt;/h3&gt;

&lt;p&gt;Nous allons maintenant lister toutes les méthodes de la classe annotée (celle sur laquelle nous sommes en train de travailler au travers de l'arbre syntaxique, pas celle que nous venons de trouver dans le modèle syntaxique).&lt;/p&gt;

&lt;p&gt;La première étape est relativement simple : lister tous les membres de la classe qui sont de type &lt;code&gt;MethodDeclaration&lt;/code&gt; :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;IEnumerable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MethodDeclarationSyntax&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;classMethod&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;declaredClass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Members&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;IsKind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SyntaxKind&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MethodDeclaration&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="n"&gt;OfType&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MethodDeclarationSyntax&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Pour notre cas, il va être nécessaire de caster explicitement vers le type &lt;code&gt;MethodDeclarationSyntax&lt;/code&gt;. Le type de base stocké dans la collection &lt;code&gt;Members&lt;/code&gt; est typé moins spécifiquement et n'expose pas les propriétés dont nous aurons besoin :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;methodDeclaration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Modifiers&lt;/span&gt; &lt;span class="c1"&gt;//public, static, etc...&lt;/span&gt;
&lt;span class="n"&gt;methodDeclaration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Identifier&lt;/span&gt; &lt;span class="c1"&gt;// Plutôt évident =&amp;gt; le nom&lt;/span&gt;
&lt;span class="n"&gt;methodDeclaration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ParameterList&lt;/span&gt; &lt;span class="c1"&gt;// La liste des paramètres, incluant type, nom, valeurs par défaut&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Le reste de l'étape consiste juste à créer une chaine représentant la classe partielle dont j'avais besoin.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#la-solution-finale"&gt;
  &lt;/a&gt;
  La solution finale
&lt;/h3&gt;

&lt;p&gt;Voici donc la solution complète après avoir suivi toutes ces étapes :&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; : Dans le code suivant, &lt;code&gt;RelatedModelAttribute&lt;/code&gt; correspond au &lt;code&gt;CustomAttribute&lt;/code&gt; des exemples ci-dessus.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; : Ce code fait partie d'un de mes &lt;a href="https://github.com/sidewinder94/speedify-cli-wrapper/blob/master/SpeedifyCliWrapper.SourceGenerators/ModuleModelGenerator.cs"&gt;projets sur GitHub&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Microsoft.CodeAnalysis&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Microsoft.CodeAnalysis.CSharp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Microsoft.CodeAnalysis.CSharp.Syntax&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Microsoft.CodeAnalysis.Text&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;SpeedifyCliWrapper.SourceGenerators.Annotations&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Linq&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Text&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;SpeedifyCliWrapper.SourceGenerators&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Generator&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ModuleModelGenerator&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ISourceGenerator&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GeneratorExecutionContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;attributeSymbol&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Compilation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetTypeByMetadataName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RelatedModelAttribute&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;FullName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;classWithAttributes&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Compilation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SyntaxTrees&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;st&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;st&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetRoot&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;DescendantNodes&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;OfType&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ClassDeclarationSyntax&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()&lt;/span&gt;
                    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;DescendantNodes&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;OfType&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;AttributeSyntax&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;().&lt;/span&gt;&lt;span class="nf"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;()));&lt;/span&gt;

            &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SyntaxTree&lt;/span&gt; &lt;span class="n"&gt;tree&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;classWithAttributes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;semanticModel&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Compilation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetSemanticModel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

                &lt;span class="k"&gt;foreach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;declaredClass&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;tree&lt;/span&gt;
                    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetRoot&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;DescendantNodes&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OfType&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ClassDeclarationSyntax&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()&lt;/span&gt;
                    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;DescendantNodes&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;OfType&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;AttributeSyntax&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;().&lt;/span&gt;&lt;span class="nf"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;nodes&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;declaredClass&lt;/span&gt;
                    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;DescendantNodes&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OfType&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;AttributeSyntax&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()&lt;/span&gt;
                    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FirstOrDefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;DescendantTokens&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dt&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;IsKind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SyntaxKind&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IdentifierToken&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;semanticModel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetTypeInfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Parent&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="n"&gt;attributeSymbol&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                    &lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nf"&gt;DescendantTokens&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                    &lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nf"&gt;Where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dt&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;IsKind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SyntaxKind&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IdentifierToken&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                    &lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nf"&gt;ToList&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

                    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nodes&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;

                    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;relatedClass&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;semanticModel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetTypeInfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Last&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;Parent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

                    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;generatedClass&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GenerateClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;relatedClass&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

                    &lt;span class="k"&gt;foreach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MethodDeclarationSyntax&lt;/span&gt; &lt;span class="n"&gt;classMethod&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;declaredClass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Members&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;IsKind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SyntaxKind&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MethodDeclaration&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="n"&gt;OfType&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MethodDeclarationSyntax&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;())&lt;/span&gt;
                    &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GenerateMethod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;declaredClass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Identifier&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;relatedClass&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;classMethod&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;ref&lt;/span&gt; &lt;span class="n"&gt;generatedClass&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;

                    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;CloseClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;generatedClass&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

                    &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddSource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;$"&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;declaredClass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Identifier&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s"&gt;_&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;relatedClass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SourceText&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;From&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;generatedClass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;Encoding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UTF8&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GeneratorInitializationContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// Nothing to do here&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;GenerateMethod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SyntaxToken&lt;/span&gt; &lt;span class="n"&gt;moduleName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TypeInfo&lt;/span&gt; &lt;span class="n"&gt;relatedClass&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MethodDeclarationSyntax&lt;/span&gt; &lt;span class="n"&gt;methodDeclaration&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;ref&lt;/span&gt; &lt;span class="n"&gt;StringBuilder&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;signature&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;$"&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;methodDeclaration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Modifiers&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;relatedClass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;methodDeclaration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Identifier&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s"&gt;("&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;parameters&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;methodDeclaration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ParameterList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Skip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="n"&gt;signature&lt;/span&gt; &lt;span class="p"&gt;+=&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;", "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="s"&gt;")"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;methodCall&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;$"return this._wrapper.&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;moduleName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s"&gt;.&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;methodDeclaration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Identifier&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s"&gt;(this, &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;", "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Identifier&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;()))}&lt;/span&gt;&lt;span class="s"&gt;);"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AppendLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;@"
        "&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;signature&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="s"&gt;@"
        {
            "&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;methodCall&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="s"&gt;@"
        }"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="n"&gt;StringBuilder&lt;/span&gt; &lt;span class="nf"&gt;GenerateClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TypeInfo&lt;/span&gt; &lt;span class="n"&gt;relatedClass&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;sb&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;StringBuilder&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

            &lt;span class="n"&gt;sb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;@"
using System;
using System.Collections.Generic;
using SpeedifyCliWrapper.Common;

namespace SpeedifyCliWrapper.ReturnTypes
{
    public partial class "&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;relatedClass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="n"&gt;sb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;@"
    {"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;sb&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;CloseClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;StringBuilder&lt;/span&gt; &lt;span class="n"&gt;generatedClass&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;generatedClass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="s"&gt;@"    }
}"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#astuces-bonus"&gt;
  &lt;/a&gt;
  Astuces bonus
&lt;/h2&gt;

&lt;p&gt;Le code généré n'est pas facilement consultable ni facile à découvrir.&lt;/p&gt;

&lt;p&gt;Il est cependant possible d'expliciter le chemin de sortie des fichiers générés. Cela pose un second problème : si le chemin de la génération n'est pas ignoré, le compilateur va essayer de les compiler en plus de ceux qui sont générés à la volée par le générateur de code. Il faut donc ignorer le dossier de sortie.&lt;/p&gt;

&lt;p&gt;Ces modifications sont à effectuer dans les fichiers projets référençant le générateur de code.&lt;/p&gt;

&lt;p&gt;Pour indiquer le dossier où l'on veut que les fichiers générés soient stockés, il faut ajouter un nœud &lt;code&gt;CompilerGeneratedFilesOutputPath&lt;/code&gt; dans un &lt;code&gt;PropertyGroup&lt;/code&gt; (celui par défaut contenant les frameworks cibles fonctionne parfaitement).&lt;/p&gt;

&lt;p&gt;La valeur du nœud indique le chemin de sortie&lt;/p&gt;

&lt;p&gt;Exemple :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;PropertyGroup&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;TargetFrameworks&amp;gt;&lt;/span&gt;net5.0;netstandard2.1&lt;span class="nt"&gt;&amp;lt;/TargetFrameworks&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;GeneratePackageOnBuild&amp;gt;&lt;/span&gt;true&lt;span class="nt"&gt;&amp;lt;/GeneratePackageOnBuild&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;EmitCompilerGeneratedFiles&amp;gt;&lt;/span&gt;true&lt;span class="nt"&gt;&amp;lt;/EmitCompilerGeneratedFiles&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;CompilerGeneratedFilesOutputPath&amp;gt;&lt;/span&gt;Generated&lt;span class="nt"&gt;&amp;lt;/CompilerGeneratedFilesOutputPath&amp;gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!--Ajouter cette ligne--&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/PropertyGroup&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Pour la seconde partie du problème, ignorer ce dossier de sortie, il faut ajouter une ligne indiquant que tous les fichiers contenus dans ce dossier ne font pas partie de la compilation.&lt;/p&gt;

&lt;p&gt;Il s'agit d'un classique nœud &lt;code&gt;None&lt;/code&gt;, dans un &lt;code&gt;ItemGroup&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Il suffit donc de rajouter l'extrait XML suivant dans le fichier &lt;code&gt;csproj&lt;/code&gt; pour ignorer tous les fichiers présents dans le dossier de sortie :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ItemGroup&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;None&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"Generated\**"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ItemGroup&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#pour-aller-plus-loin"&gt;
  &lt;/a&gt;
  Pour aller plus loin
&lt;/h2&gt;

&lt;p&gt;Un autre exemple de générateur de codes utile serait pour la génération de tests unitaires qui peuvent être nécessaires mais extrêmement répétitifs (si votre politique de TU vous demande de tester les accesseurs par exemple). Un très bon article (en anglais) de Jonathan Allen indique comment mettre en place une telle solution : &lt;a href="https://www.infoq.com/articles/CSharp-Source-Generator/"&gt;"&lt;em&gt;Building a Source Generator for C#&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>csharp</category>
    </item>
    <item>
      <title>Hacktoberfest-where tech becomes fun!</title>
      <author>SarveshD7</author>
      <pubDate>Thu, 30 Sep 2021 07:01:05 +0000</pubDate>
      <link>https://dev.to/sarveshd7/hacktoberfest-where-tech-becomes-fun-bj9</link>
      <guid>https://dev.to/sarveshd7/hacktoberfest-where-tech-becomes-fun-bj9</guid>
      <description>&lt;p&gt;Happy Hacktoberfest, everybody!&lt;br&gt;
Hacktoberfest? Haven't heard of it? No worries. Well, honestly speaking I also got to know about it very recently. As they say, 'It's better late than never'.&lt;br&gt;
The month of October is nearing and so is the best time to get into open source and win amazing rewards.&lt;/p&gt;

&lt;p&gt;Hacktoberfest is an open-source festival where developers from all over the world contribute to open-source projects.&lt;br&gt;
Let’s first start by understanding about open-source projects. First of all what is open-source? Open-source is a software for which the original source code is made freely available and may be redistributed and modified. Nowadays many companies around the globe make their code base open source i.e., people can propose changes in the code, fix bugs, etc. in order to bring about a better version of the program. Some famous names which have their code base open source are Android, VLC Media Player, Mozilla Firefox and many more. Not just companies but many developers also collaborating on developing open source softwares, so that others can also contribute to it.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dxXxTJwU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kbxi06d6f8uj0vewpxuk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dxXxTJwU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kbxi06d6f8uj0vewpxuk.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hacktoberfest is a month-long event which is conducted annually in October and is powered by Digital Ocean, a popular American Cloud Computing company.&lt;/p&gt;

&lt;p&gt;You can sign up anytime between October 1 and October 31. So, its October, you have signed up for Hacktoberfest, but what do you actually have to do?? &lt;br&gt;
Basically, once you’ve signed up for the fest you need to go on  GitHub and contribute to open-source projects on the platform. You don’t need to be a coding expert, the pull request can even be a bug fix, an improvement in the code or even a documentation change.But, what's a pull request? A pull request is an event in Git where a contributor asks a maintainer of a Git repository to review code they want to merge into a project.                                                                   &lt;/p&gt;

&lt;p&gt;There are many repositories on GitHub. But, only those tagged with Hactoberfest can reward you points or are valid for Hacktoberfest. A repository/project is considered to be participating in Hacktoberfest if the 'Hacktoberfest' topic is present and is accepting public contributions via pull requests. An individual pull request can also be opted-in directly by adding the 'Hacktoberfest-accepted' label. A pull request is considered approved once it has an overall approving review from maintainers, or has been merged by maintainers, or has been given the 'Hacktoberfest-accepted' label. Once four of your pull requests gets merged into the code base i.e., four of your change proposals get accepted you become eligible to win the limited edition Hacktoberfest T-shirt, stickers and Digital Ocean rewards. This year, the first 50,000 participants can earn a T-shirt. Another initiative by Hacktoberfest is '&lt;strong&gt;TREES NOT TEES&lt;/strong&gt;'. Rather than receive t-shirts as swag, you can choose to have a tree planted in your name and help make Hacktoberfest 2021 more carbon neutral. The recognition and exposure you get by participating in such fests and contributing to open-source projects is like another feather in your cap. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#"&gt;
  &lt;/a&gt;
  &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LuH75eNK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jsct7s045gi4xnzixwbn.png" alt="image"&gt;
&lt;/h1&gt;

&lt;p&gt;So what are you waiting for? Get on your toes and let's contribute to the open-source community!&lt;br&gt;
&lt;strong&gt;Happy Hacking!&lt;/strong&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>8+ Reinforcement Learning Project Ideas</title>
      <author>Joy</author>
      <pubDate>Thu, 30 Sep 2021 07:00:29 +0000</pubDate>
      <link>https://dev.to/joooyz/7-reinforcement-learning-project-ideas-14fm</link>
      <guid>https://dev.to/joooyz/7-reinforcement-learning-project-ideas-14fm</guid>
      <description>&lt;p&gt;This blog post is a compilation of reinforcement learning (RL) project ideas to check out. I've tried to select projects covering a range of different difficulties, concepts, and algorithms in RL.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-solve-toy-problems-with-openai-gym-beginnerfriendly"&gt;
  &lt;/a&gt;
  1. Solve toy problems with &lt;a href="https://gym.openai.com/"&gt;OpenAI Gym&lt;/a&gt; (beginner-friendly)
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WcgPuTPb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bh9xo8mqizlidg1l1172.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WcgPuTPb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bh9xo8mqizlidg1l1172.JPG" alt="Cartpole" title="Cartpole environment from OpenAI Gym"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://gym.openai.com/"&gt;OpenAI Gym&lt;/a&gt; has become the de facto standard for reinforcement learning frameworks among researchers and practitioners. Solving toy problems from the gym library will help familiarize you with this popular framework. Good starting points include &lt;a href="https://gym.openai.com/envs/CartPole-v1/"&gt;Cartpole&lt;/a&gt;, &lt;a href="https://gym.openai.com/envs/LunarLander-v2/"&gt;Lunar Lander&lt;/a&gt; and &lt;a href="https://gym.openai.com/envs/Taxi-v3/"&gt;Taxi&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you're interested in a step-by-step walkthrough, check out our &lt;a href="https://www.gocoder.one/blog/rl-tutorial-with-openai-gym"&gt;introductory Q-learning tutorial with Taxi&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-play-atari-games-from-pixel-input-with-openai-gym"&gt;
  &lt;/a&gt;
  2. Play Atari games from pixel input with &lt;a href="https://gym.openai.com/envs/#atari"&gt;OpenAI Gym&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ynh3oI6B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eoqwtm3ahn9vz1v9chop.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ynh3oI6B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eoqwtm3ahn9vz1v9chop.jpg" alt="Atari environments" title="Atari environments from OpenAI Gym"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;OpenAI Gym also contains a suite of &lt;a href="https://gym.openai.com/envs/#atari"&gt;Atari game environments&lt;/a&gt; as part of its Arcade Learning Environment (ALE) framework. Examples include &lt;a href="https://gym.openai.com/envs/Breakout-v0/"&gt;Breakout&lt;/a&gt;, &lt;a href="https://gym.openai.com/envs/MontezumaRevenge-v0/"&gt;Montezuma Revenge&lt;/a&gt;, and &lt;a href="https://gym.openai.com/envs/SpaceInvaders-v0/"&gt;Space Invaders&lt;/a&gt;. Environment observations are available in the form of screen input or RAM (direct observation of the Atari 2600's 1024 bits of memory).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Additional resources:&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/simoninithomas/Deep_reinforcement_learning_Course/blob/master/Deep%20Q%20Learning/Space%20Invaders/DQN%20Atari%20Space%20Invaders.ipynb"&gt;Jupyter notebook tutorial for Space Invaders&lt;/a&gt; by Thomas Simonini&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#3-simulate-control-tasks-with-pybullet"&gt;
  &lt;/a&gt;
  3. Simulate control tasks with &lt;a href="https://github.com/bulletphysics/bullet3"&gt;PyBullet&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e1FocNQo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7c2gzfd980o43q6qsddf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e1FocNQo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7c2gzfd980o43q6qsddf.png" alt="PyBullet" title="PyBullet environment examples"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Gym provides a library of continuous physics simulations in the form of its &lt;a href="https://gym.openai.com/envs/#mujoco"&gt;MuJoCo&lt;/a&gt; environments. Since MuJoCo requires a paid license, I recommend checking out &lt;a href="https://github.com/bulletphysics/bullet3"&gt;PyBullet&lt;/a&gt; as a free open-source alternative. Using PyBullet/MuJoCo, you can teach a variety of robots to walk, run, or swim.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-create-your-own-reinforcement-learning-environment-with-unity-mlagents-beginnerfriendly"&gt;
  &lt;/a&gt;
  4. Create your own reinforcement learning environment with &lt;a href="https://github.com/Unity-Technologies/ml-agents"&gt;Unity ML-Agents&lt;/a&gt; (beginner-friendly)
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ozfBHUxc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8c0yn02hrgnf3iuxqsh1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ozfBHUxc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8c0yn02hrgnf3iuxqsh1.png" alt="Unity ML-Agents" title="Unity ML-Agents example environments"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/Unity-Technologies/ml-agents"&gt;Unity ML-Agents&lt;/a&gt; is a relatively new add-on to the Unity game engine. It allows game developers to train intelligent NPCs for games and enables researchers to create graphics- and physics-rich RL environments. Project ideas to explore include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Experimenting with algorithms like PPO, SAC, GAIL, and Self-Play provided out-of-the-box&lt;/li&gt;
&lt;li&gt;Training agents in a library of 18+ environments including &lt;a href="https://github.com/Unity-Technologies/ml-agents/tree/dodgeball-env"&gt;Dodgeball&lt;/a&gt;, Soccer, and classic control problems&lt;/li&gt;
&lt;li&gt;Creating your own custom 3D RL environment&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Additional resources:&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.gocoder.one/blog/hands-on-introduction-to-deep-reinforcement-learning"&gt;Build a 3D Volleyball RL environment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.immersivelimit.com/tutorials/reinforcement-learning-penguins-part-1-unity-ml-agents"&gt;Reinforcement Learning Penguins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://learn.unity.com/course/ml-agents-hummingbirds"&gt;Unity Hummingbirds Course&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#5-race-selfdriving-cars-with-aws-deepracer-beginnerfriendly"&gt;
  &lt;/a&gt;
  5. Race self-driving cars with &lt;a href="https://aws.amazon.com/deepracer/"&gt;AWS DeepRacer&lt;/a&gt; (beginner-friendly)
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PRAe31EC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3h9x75fnhqg9m3wfbz5t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PRAe31EC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3h9x75fnhqg9m3wfbz5t.png" alt="AWS DeepRacer" title="AWS DeepRacer simulation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/deepracer/"&gt;AWS DeepRacer&lt;/a&gt; is a 3D racing simulator designed to help developers get started with RL using Amazon SageMaker. You'll need to pay for training and evaluating your model on AWS. It features monthly competitive races as part of the &lt;a href="https://aws.amazon.com/deepracer/league/"&gt;AWS DeepRacer league&lt;/a&gt;, which awards prizes and the chance to compete at re:Invent.&lt;/p&gt;

&lt;p&gt;DeepRacer also gives you the option of purchasing a physical 1/18th scale race car for USD399 that will allow you to deploy your model in the real-world.&lt;/p&gt;

&lt;p&gt;Some other open-source projects relating to autonomous driving to check out:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/microsoft/AirSim"&gt;AirSim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/carla-simulator/carla"&gt;CARLA&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#6-mine-diamonds-in-minecraft-with-minerl"&gt;
  &lt;/a&gt;
  6. Mine diamonds in Minecraft with &lt;a href="https://minerl.io/"&gt;MineRL&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qFxziMlh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0f297v2xbl4kfj9ixmec.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qFxziMlh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0f297v2xbl4kfj9ixmec.png" alt="MineRL" title="MineRL dataset example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://minerl.io/"&gt;MineRL&lt;/a&gt; contains an imitation learning dataset of over 60 million frames of recorded human player data in Minecraft. The goal is to train agents that can navigate an open world and overcome inherent challenges such as tasks with lots of hierarchy and sparse rewards.&lt;/p&gt;

&lt;p&gt;MineRL is currently running two competition tracks as part of NeurIPS 2021:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://minerl.io/diamond/"&gt;Diamond&lt;/a&gt;: Obtain a diamond provided a fixed limit of raw pixel sample data and time training&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://minerl.io/basalt/"&gt;BASALT&lt;/a&gt;:  Solve almost-lifelike tasks (e.g. build a house, search for a cave)&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#7-join-the-community-at-aiarena-building-agents-for-starcraft-ii"&gt;
  &lt;/a&gt;
  7. Join the community at &lt;a href="https://aiarena.net/"&gt;AIArena&lt;/a&gt; building agents for StarCraft II
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GteKbQIL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tyxd21t0ehjoj2gs619i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GteKbQIL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tyxd21t0ehjoj2gs619i.png" alt="AI Arena" title="AI Arena StarCraft II stream"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you're looking to train agents to play highly complex mainstream games, you should check out &lt;a href="https://aiarena.net/"&gt;AIArena&lt;/a&gt;. They run regular streams and ladders for a community of researchers, practitioners, and hobbyists building deep learning agents for StarCraft II.&lt;/p&gt;

&lt;p&gt;Some other games with RL frameworks you might be interested in:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rlgym.github.io/"&gt;Rocket League&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://leaguesandbox.github.io/"&gt;League of Legends&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://games.mau.se/research/the-dota2-5v5-ai-competition/"&gt;Dota 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#8-build-a-chess-bot-with-openspiel"&gt;
  &lt;/a&gt;
  8. Build a Chess Bot with &lt;a href="https://github.com/deepmind/open_spiel"&gt;OpenSpiel&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--si8lD5G8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5s6qop66ghgiwbiciqlm.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--si8lD5G8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5s6qop66ghgiwbiciqlm.jpg" alt="OpenSpiel" title="Image credit: DeepMind"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/deepmind/open_spiel/"&gt;OpenSpiel&lt;/a&gt; by DeepMind is worth taking a look at if you've been inspired by programs like &lt;a href="https://stockfishchess.org/"&gt;StockFish&lt;/a&gt; or AlphaGo. It contains a collection of environments and algorithms for general RL and planning/search in a variety of games including Chess, Go, Backgammon, and more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bonus-ideas"&gt;
  &lt;/a&gt;
  Bonus ideas
&lt;/h2&gt;

&lt;p&gt;Here are some additional project ideas that are also worth checking out:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Predict stock prices with &lt;a href="https://github.com/tensortrade-org/tensortrade"&gt;TensorTrade&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Train cooperative agents with &lt;a href="https://www.pettingzoo.ml/"&gt;PettingZoo&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Build a Poker bot with &lt;a href="https://github.com/datamllab/rlcard"&gt;RLCard&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Join an &lt;a href="https://www.gocoder.one/blog/ai-game-competitions-list"&gt;AI Programming competition&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#closing-remarks"&gt;
  &lt;/a&gt;
  Closing remarks
&lt;/h2&gt;

&lt;p&gt;There's a huge range of exciting projects to explore in reinforcement learning. This list is by no means comprehensive, but I hope it's given you some inspiration for your own RL project!&lt;/p&gt;

</description>
      <category>machinelearning</category>
      <category>datascience</category>
      <category>beginners</category>
      <category>deeplearning</category>
    </item>
    <item>
      <title>Beginner's guide to Hacktoberfest 2021</title>
      <author>Ayushi Rawat </author>
      <pubDate>Thu, 30 Sep 2021 06:58:13 +0000</pubDate>
      <link>https://dev.to/ayushi7rawat/beginner-s-guide-to-hacktoberfest-2021-24d1</link>
      <guid>https://dev.to/ayushi7rawat/beginner-s-guide-to-hacktoberfest-2021-24d1</guid>
      <description>&lt;p&gt;Hi there,&lt;/p&gt;

&lt;p&gt;Buckle up folks, Hacktoberfest is round the corner and registrations are now open. Hacktoberfest will be hosted by Digital Ocean for the 8th year in a row in partnership with GitHub and other companies, yes you read it right. In this article, I will share, how to participate in Hacktoberfest 2021 and other important details that you must know before you start contributing. &lt;/p&gt;

&lt;p&gt;You can refer to my &lt;strong&gt;YouTube video Tutorial&lt;/strong&gt; to see a working tutorial for better understanding and a step-by-step guide of the same. &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/xBPFzXa9Fio"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-will-be-covered-in-this-blog"&gt;
  &lt;/a&gt;
  What will be covered in this Blog
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="n"&gt;What&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;Hacktoberfest&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt;
&lt;span class="mf"&gt;2.&lt;/span&gt; &lt;span class="n"&gt;How&lt;/span&gt; &lt;span class="n"&gt;does&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="n"&gt;work&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt; 
&lt;span class="mf"&gt;3.&lt;/span&gt; &lt;span class="n"&gt;How&lt;/span&gt; &lt;span class="n"&gt;can&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;Join&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt;
&lt;span class="mf"&gt;4.&lt;/span&gt; &lt;span class="n"&gt;When&lt;/span&gt; &lt;span class="n"&gt;can&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;join&lt;/span&gt;
&lt;span class="mf"&gt;5.&lt;/span&gt; &lt;span class="n"&gt;How&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;earn&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;Swag&lt;/span&gt; &lt;span class="n"&gt;kit&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt;
&lt;span class="mf"&gt;6.&lt;/span&gt; &lt;span class="n"&gt;Rules&lt;/span&gt;
&lt;span class="mf"&gt;7.&lt;/span&gt; &lt;span class="n"&gt;What&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;do&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;
&lt;span class="mf"&gt;8.&lt;/span&gt; &lt;span class="n"&gt;FAQs&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Let's get started!&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-hacktoberfest-"&gt;
  &lt;/a&gt;
  What is Hacktoberfest ?
&lt;/h2&gt;

&lt;p&gt;Hacktoberfest is a month-long challenge. It happens every year in the month of October. &lt;/p&gt;

&lt;p&gt;Hacktoberfest is open to everyone and it marks the celebration of Open Source. It's the biggest Open Source event that encourages newbies to participate in Open Source and create their 1st meaningful PR. &lt;/p&gt;

&lt;p&gt;If you wish to know about it in detail, you can refer to this video, where I have covered everything. &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/N7mCkGjX6vk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-does-it-work"&gt;
  &lt;/a&gt;
  How does it work?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Maintainers determine if their open-source projects participate.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://hacktoberfest.digitalocean.com/resources/qualitystandards"&gt;Quality pull requests&lt;/a&gt; submitted on GitHub and GitLab are rewarded.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://hacktoberfest.digitalocean.com/resources/maintainers"&gt;Engaged maintenance&lt;/a&gt; of Hacktoberfest tagged repositories are rewarded.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-can-you-join"&gt;
  &lt;/a&gt;
  How can you Join?
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#step-1"&gt;
  &lt;/a&gt;
  Step - 1:
&lt;/h3&gt;

&lt;p&gt;Create a GitHub account, if you don't already have one. Need help? Here are some resources to help you set up your GitHub account:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ayushirawat.com/what-is-git-and-github-or-git-vs-github"&gt;https://ayushirawat.com/what-is-git-and-github-or-git-vs-github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/playlist?list=PLjaO05BrsbIPUT76gpBmUxV7YSPWFephT"&gt;https://www.youtube.com/playlist?list=PLjaO05BrsbIPUT76gpBmUxV7YSPWFephT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/playlist?list=PLseEp7p6EwiZgLPknY4ITJxfoo75wqxph"&gt;https://www.youtube.com/playlist?list=PLseEp7p6EwiZgLPknY4ITJxfoo75wqxph&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#step-2"&gt;
  &lt;/a&gt;
  Step - 2:
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Register for Hacktoberfest&lt;/strong&gt;: Navigate to &lt;a href="https://hacktoberfest.digitalocean.com/register"&gt;the Hacktoberfest registration page&lt;/a&gt; and follow the instructions. But, read the rules carefully before you do and then sign In using your GitHub credentials.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ojDT_I8m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632976938514/zzAIWsuXz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ojDT_I8m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632976938514/zzAIWsuXz.png" alt="hacktoberfest-register.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-3"&gt;
  &lt;/a&gt;
  Step - 3:
&lt;/h3&gt;

&lt;p&gt;Find good projects worth contributing on the GitHub page. You can type &lt;strong&gt;label:hactoberfest is:issue is:open&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can add a language label of your choice to filter open issues. If you are a beginner and can’t find good issues then there’s tag label:good first issue which filters out issues for beginners who want to contribute.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here's something beginner-friendly for you:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.firsttimersonly.com/"&gt;https://www.firsttimersonly.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mungell/awesome-for-beginners"&gt;https://github.com/mungell/awesome-for-beginners&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#step-4"&gt;
  &lt;/a&gt;
  Step - 4:
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Submit PRs:&lt;/strong&gt; Try and submit at least 4 PRs and wait for it to be verified. Make sure to submit quality PRs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when-can-you-join"&gt;
  &lt;/a&gt;
  When can you join
&lt;/h2&gt;

&lt;p&gt;Registrations are now open but you can sign up anytime between October 1 and October 31 in any time zone. Just be sure to sign up on the official Hacktoberfest website for your pull requests to count.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8uYFeWLF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632978391674/a-vDShPna.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8uYFeWLF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632978391674/a-vDShPna.jpeg" alt="Screenshot_2.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-earn-a-swag-kit"&gt;
  &lt;/a&gt;
  How to earn a Swag kit:
&lt;/h2&gt;

&lt;p&gt;For your PR to count it must be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Submitted in a public repo, AND the PR is labelled as &lt;code&gt;hacktoberfest-accepted&lt;/code&gt; by a maintainer. or&lt;/li&gt;
&lt;li&gt;Submitted in a repo labelled 'hacktoberfest' , AND Merged, OR Approved&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can opt not to receive a t-shirt and stickers and you can choose to have a tree planted in your name and help make Hacktoberfest 2021 more carbon neutral.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bD7J-fPi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632976964796/GucImZLwe.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bD7J-fPi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632976964796/GucImZLwe.jpeg" alt="Screenshot_4.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Let's have a look at my swag kit from Hacktoberfest 2020. you get some awesome goodies which include A limited-edition T-shirt for &lt;em&gt;**FREE!*&lt;/em&gt;* and some stickers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--21ovMxPA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632976984107/UwLuWyFsW.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--21ovMxPA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632976984107/UwLuWyFsW.jpeg" alt="500079800676_70652.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;T-shirts are awarded on a first-come, first-serve basis to the first 55,000 participants who successfully completed the Hacktoberfest challenge. You will be receiving mail when you have completed the challenge. Further details will be provided with the mail itself.&lt;/p&gt;

&lt;p&gt;In past years, shirts have arrived in December or January, depending on how far you live from San Francisco. The Digital Ocean team should eventually contact you asking for your shirt size and shipping address. (Keep in mind they are shipping thousands of shirts so this process will take a while.) &lt;/p&gt;

&lt;p&gt;Don’t miss this opportunity. Start contributing to open source and get a limited edition T-shirt for Free! &lt;/p&gt;

&lt;p&gt;Refer &lt;a href="https://hacktoberfestswaglist.com/"&gt;Hackoberfest wesbite for more&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Got anything to add? mention in the comment box below and I will update the list.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rules"&gt;
  &lt;/a&gt;
  Rules
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Pull requests can be submitted to any opted-in repository on GitHub or GitLab.&lt;/li&gt;
&lt;li&gt;The pull request must contain commits you made yourself.&lt;/li&gt;
&lt;li&gt;If a maintainer reports your pull request as 'spam' or 'invalid', it will not be counted toward your participation in Hacktoberfest.&lt;/li&gt;
&lt;li&gt;If a maintainer reports behaviour that’s not in line with the project’s code of conduct, you will be ineligible to participate.&lt;/li&gt;
&lt;li&gt;To get a shirt, you must make four approved pull requests (PRs) on opted-in projects between October 1-31 in any time zone.&lt;/li&gt;
&lt;li&gt;This year, the first 55,000 participants can earn a T-shirt.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-not-to-do"&gt;
  &lt;/a&gt;
  What not to do!
&lt;/h2&gt;

&lt;p&gt;In line with Hacktoberfest value “quantity is fun, quality is key”, here are examples of the PRs that we consider to be low-quality contributions (which are discouraged):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;PRs that are automated (e.g. scripted opening PRs to remove whitespace/optimize images)&lt;/li&gt;
&lt;li&gt;PRs that are disruptive (e.g. taking someone else’s branch/commits and making a PR)&lt;/li&gt;
&lt;li&gt;PRs that are regarded by a project maintainer as a hindrance vs. helping&lt;/li&gt;
&lt;li&gt;Something that’s clearly an attempt to simply +1 your PR count for October&lt;/li&gt;
&lt;li&gt;Last but not least, one PR to fix a typo is fine. 5 PRs to remove stray whitespace… it’s not.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#pro-tip"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Pro tip:&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;You can join the Hacktoberfest discord server to connect with the community and network with other open-source enthusiasts, ask questions and find projects. &lt;a href="https://discord.com/invite/hacktoberfest"&gt;click the link to navigate&lt;/a&gt; to the server.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wy95ryAb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632977018318/lU6GvIzh4.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wy95ryAb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632977018318/lU6GvIzh4.jpeg" alt="Screenshot_3.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#faqs"&gt;
  &lt;/a&gt;
  FAQs
&lt;/h2&gt;

&lt;p&gt;Let's look at some FAQs:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q.*What if my pull requests aren’t accepted*&lt;/strong&gt;&lt;em&gt;?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A: Even if your pull requests aren’t accepted, as long as you open at least 4 pull requests, you’ll earn the shirt.&lt;/p&gt;

&lt;p&gt;Have more FAQs unanswered, &lt;a href="https://hacktoberfest.digitalocean.com/faq"&gt;check the FAQ section for the same&lt;/a&gt;. FAQs are divided into 6 categories:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;General&lt;/li&gt;
&lt;li&gt;Rules&lt;/li&gt;
&lt;li&gt;Events&lt;/li&gt;
&lt;li&gt;Maintainers&lt;/li&gt;
&lt;li&gt;Swag &amp;amp; Shipping&lt;/li&gt;
&lt;li&gt;Troubleshooting&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y2acUNE9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632977465473/gi-BeC7H-.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y2acUNE9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632977465473/gi-BeC7H-.jpeg" alt="Screenshot_1.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also check out &lt;a href="https://hacktoberfest.digitalocean.com/events"&gt;the list of ongoing events of Hacktoberfest 2021&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cJQDCtGY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632977481522/o16sae6Aj.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cJQDCtGY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632977481522/o16sae6Aj.jpeg" alt="Screenshot_8.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Interested to hear about my Hacktoberfest experience of 2020? You wouldn't wanna miss it, so. stay tuned for my upcoming blog. &lt;/p&gt;

&lt;p&gt;That's all for this article and with that, it's a wrap! I hope you found the article useful. Thank you for reading, If you have reached so far, please like the article, It will encourage me to write more such articles. Do share your valuable suggestions, I appreciate your honest feedback!&lt;/p&gt;

&lt;p&gt;I create content about &lt;strong&gt;Career, Blogging, Programming, and Productivity&lt;/strong&gt;, If this is something that interests you, please share the article with your friends and connections. You can also subscribe to my newsletter to get updates every time I write something!&lt;/p&gt;

&lt;p&gt;I would strongly recommend you to Check out the &lt;a href="https://www.youtube.com/watch?v=jAOkWehMF6E"&gt;YouTube video&lt;/a&gt; of the same and &lt;strong&gt;don't forget to subscribe to my Channel&lt;/strong&gt;. I would love to connect with you at &lt;a href="https://twitter.com/ayushi7rawat"&gt;Twitter&lt;/a&gt; | &lt;a href="https://www.linkedin.com/in/ayushi7rawat/"&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You should definitely check out my other Blogs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ayushirawat.com/python-39-all-you-need-to-know"&gt;Python 3.9: All You need to know&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ayushirawat.com/github-cli-10-all-you-need-to-know"&gt;GitHub CLI 1.0: All you need to know&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ayushirawat.com/how-to-make-your-own-google-chrome-extension-1"&gt;How to make your own Google Chrome Extension&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ayushirawat.com/run-javascript-from-python"&gt;Run Javascript from Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ayushirawat.com/automate-whatsapp-using-python"&gt;Automate WhatsApp using Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ayushirawat.com/automate-cowin-vaccine-slots-availablity-using-python"&gt;Automate Cowin Vaccine slots Availability using Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ayushirawat.com/what-is-competitive-programming-or-beginners-guide"&gt;What is Competitive Programming&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#resources-amp-credits"&gt;
  &lt;/a&gt;
  Resources &amp;amp; Credits:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hacktoberfest.digitalocean.com/"&gt;https://hacktoberfest.digitalocean.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hacktoberfestswaglist.com/"&gt;https://hacktoberfestswaglist.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hacktoberfest.digitalocean.com/events"&gt;https://hacktoberfest.digitalocean.com/events&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tree-nation.com/profile/digitalocean"&gt;https://tree-nation.com/profile/digitalocean&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Happy Contributing, See you in my next Blog article, Take care!!&lt;/p&gt;

</description>
      <category>hacktoberfest</category>
      <category>github</category>
      <category>opensource</category>
      <category>computerscience</category>
    </item>
  </channel>
</rss>
