<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>I want help with this problem</title>
      <author>Mohamed Hisham Abdelzaher</author>
      <pubDate>Sun, 15 Aug 2021 21:23:22 +0000</pubDate>
      <link>https://dev.to/mh0386/i-want-help-with-this-problem-4n5j</link>
      <guid>https://dev.to/mh0386/i-want-help-with-this-problem-4n5j</guid>
      <description>&lt;p&gt;&lt;a href="https://app.codesignal.com/arcade/intro/level-1/s5PbmwxfECC52PWyQ"&gt;https://app.codesignal.com/arcade/intro/level-1/s5PbmwxfECC52PWyQ&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>challenge</category>
      <category>help</category>
      <category>cpp</category>
    </item>
    <item>
      <title>I want help with this problem</title>
      <author>Mohamed Hisham Abdelzaher</author>
      <pubDate>Sun, 15 Aug 2021 21:08:01 +0000</pubDate>
      <link>https://dev.to/mh0386/i-want-help-with-this-problem-402a</link>
      <guid>https://dev.to/mh0386/i-want-help-with-this-problem-402a</guid>
      <description>&lt;p&gt;&lt;a href="https://app.codesignal.com/arcade/code-arcade/intro-gates/SZB5XypsMokGusDhX"&gt;https://app.codesignal.com/arcade/code-arcade/intro-gates/SZB5XypsMokGusDhX&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>challenge</category>
      <category>help</category>
      <category>cpp</category>
    </item>
    <item>
      <title>Last Week I Wrote Some jQuery (and no one fired me ü§ì)</title>
      <author>Dekel</author>
      <pubDate>Sun, 15 Aug 2021 20:40:42 +0000</pubDate>
      <link>https://dev.to/dekel/last-week-i-wrote-some-jquery-and-no-one-fired-me-3iao</link>
      <guid>https://dev.to/dekel/last-week-i-wrote-some-jquery-and-no-one-fired-me-3iao</guid>
      <description>&lt;p&gt;Short disclaimer - Yes. The title of this post is a bit of a clickbait. Not 100%, but you can definitely read it as one. I‚Äôm not your standard full-time employee, so it‚Äôs gonna be a bit hard to fire me, but I still decided to write some jQuery code, and everyone was happy with it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#so-lets-rewind-a-bit"&gt;
  &lt;/a&gt;
  So, let‚Äôs rewind a bit
&lt;/h3&gt;

&lt;p&gt;I started using jQuery ~15 years ago (around the time it was released). It was the ‚Äúgo-to‚Äù for everything you needed to do, and I think it‚Äôs safe to assume that almost every website back in the day included the &lt;code&gt;&amp;lt;script src="jquery.js"&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt; line in it. It was even before the days of &lt;code&gt;cdnjs&lt;/code&gt; (where the standard for using jquery became &lt;code&gt;&amp;lt;script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js" integrity="sha512-894YE6QWD5I59HgZOGReFYm4dnWc1Qt5NtvYSaNcOP+u1T9qYdvdihz0PPSiiqn/+/3e7Jo4EaG7TubfWGUrMQ==" crossorigin="anonymous" referrerpolicy="no-referrer"&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt; and all javascript content was served directly from the websites you built without using any cdn).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.jquery.com"&gt;jQuery&lt;/a&gt; was used originally to make it easy for developers to write code that just works. Unlike today, back in the day browsers had different standards and in order for your code to run smoothly (or just work?) on different browsers - there were many things you needed to learn and remember how to do, and some of the standard things that we have today (&lt;code&gt;document.querySelector&lt;/code&gt;) weren‚Äôt available (or didn‚Äôt work as expected). Using jQuery provided a very easy and standard way to access elements (DOM manipulation), work with events and know that everything will work, regardless of the browser your users used to access your website.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C0imRuXA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1cggt4n378h9e8xqn4v6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C0imRuXA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1cggt4n378h9e8xqn4v6.png" alt="image"&gt;&lt;/a&gt;Photo by &lt;a href="https://pixabay.com/users/pexels-2286921/"&gt;@Pexels&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#jquery-ui"&gt;
  &lt;/a&gt;
  jQuery UI
&lt;/h3&gt;

&lt;p&gt;Following the wide usage of jQuery - another lib was released, called &lt;a href="https://jqueryui.com/"&gt;jQuery-UI&lt;/a&gt;. According to the website:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;jQuery UI is a curated set of user interface interactions, effects, widgets, and themes built on top of the jQuery JavaScript Library.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Some of the features that jQuery-UI provides are easy to use APIs for &lt;a href="https://jqueryui.com/draggable/"&gt;draggable&lt;/a&gt; elements, which are super easy and can save us a lot of time if we need to handle everything that is related to drag&amp;amp;drop.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fKaSzI2L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1s796w40abxlj53kulq3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fKaSzI2L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1s796w40abxlj53kulq3.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#back-to-last-week"&gt;
  &lt;/a&gt;
  Back To Last Week
&lt;/h3&gt;

&lt;p&gt;So last week I needed to create the following interface:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A simple page that shows a container (a rectangle with some background image).&lt;/li&gt;
&lt;li&gt;Inside the container we need to display circles (we have a list of the x/y position of each circle).&lt;/li&gt;
&lt;li&gt;Each circle can be dragged, but only on the Y-axis.&lt;/li&gt;
&lt;li&gt;The dragging/dropping can be only inside the container.&lt;/li&gt;
&lt;li&gt;When finished - we need to save (console.log, for now) the new positions of the circles.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Since it was a POC I decided it‚Äôs best to do ‚Äúquick-n-dirty‚Äù work with jQuery, which eventually took ~3 hours. The jQuery-UI lib with the draggable API saved me a lot of time, and since it was a POC I didn‚Äôt really care if it would be written using some up-to-date framework (react/vue).&lt;br&gt;
One of the nice things about the draggable API of jQuery-UI is that the &lt;code&gt;axis&lt;/code&gt; (which gave me a quick solution for the Y-axis only dragging) and the &lt;code&gt;containment&lt;/code&gt; (which provides a way to hold the dragged circles inside the container):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#container span&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;draggable&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;axis&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;y&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;containment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;parent&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;iframe src="https://jsfiddle.net/wrd9mfkz//embedded/result,html,js,css//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The final version also contains an option to upload the image/the dataset (the positions of the circles) and a few more things, but for this post I included this version of the code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h3&gt;

&lt;p&gt;Working with jQuery might not be the first choice of most people (and probably also not my first choice for most projects), but it really depends on which project you are currently working on. Yes, sometimes it‚Äôs better to just write vanilla javascript, and in case you need something that is a bit more than ~20-30-40 lines of code and is more complex - it‚Äôs probably better to use one of the standard and up-to-date frameworks, but you shouldn‚Äôt be afraid to use everything that you have in your disposable to provide fast solutions.&lt;/p&gt;


&lt;p&gt;Thinking about what someone will do with your code is not something you should ignore, but if you work on something that is only a POC and you just need to understand if there is a future for that code and someone will actually use it - before over engineer and start a project that will take a week - it‚Äôs ok to do something that is ‚Äúquick and dirty‚Äù just to get a feeling and understand how and what to do from here. &lt;/p&gt;

Cover photo by &lt;a href="https://pixabay.com/users/viarami-13458823/"&gt;Markus Winkler @ pixabay&lt;/a&gt;

</description>
      <category>discuss</category>
      <category>javascript</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Introduction to JavaScript Bitwise Operators</title>
      <author>ISIAKA ABDULAHI AKINKUNMI</author>
      <pubDate>Sun, 15 Aug 2021 20:37:12 +0000</pubDate>
      <link>https://dev.to/isiakaabd/introduction-to-javascript-bitwise-operators-4i5e</link>
      <guid>https://dev.to/isiakaabd/introduction-to-javascript-bitwise-operators-4i5e</guid>
      <description>&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h3&gt;

&lt;p&gt;Recently on twitter, a tweep asked how to determine if a number is even or odd. I hurriedly answered using modulus. Yeah, my answer was right, but any other approach? I was hinted about bitwise operator. JavaScript operates using different type of operator which includes &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Assignment operators&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Arithmetic operators&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ternary operators&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Logical operators&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Comparison operators&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Typeof operator&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Bitwise operators&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;We commonly use most of these operators in our routine but sparingly use bitwise operator especially if you just getting started with &lt;em&gt;JavaScript&lt;/em&gt;.&lt;br&gt;
This article will elucidate on different bitwise operators, how we can use it and  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#whats-bitwise"&gt;
  &lt;/a&gt;
  What's bitwise?
&lt;/h3&gt;

&lt;p&gt;Bitwise is¬†a level of operations that involves working with individual bits, which are the smallest units of data in a computer. a bit can be &lt;code&gt;0&lt;/code&gt; or &lt;code&gt;1&lt;/code&gt;. All bitwise operations are performed with &lt;code&gt;32bits&lt;/code&gt; binary numbers and later converted to 64bits(&lt;em&gt;javaScript&lt;/em&gt; works with &lt;code&gt;64bits&lt;/code&gt;).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In this article, we will make use of  &lt;code&gt;ES6&lt;/code&gt; &lt;em&gt;arrow function&lt;/em&gt; syntax and conversion to decimal(base 10) will follow the example below:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jI0yZuzl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jkt2j7hkxj5cqzetz2r5.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jI0yZuzl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jkt2j7hkxj5cqzetz2r5.PNG" alt="base 10"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Conversion of integers to bit will be done using the binary operation as illustrated below, Writing of the bits begins from the lasts bit to the first as pointed by the arrow:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--djs57p2z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/14kwd6oynej6wzrxlfzu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--djs57p2z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/14kwd6oynej6wzrxlfzu.png" alt="base2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YaSgrSy8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hbz7o9hqssz43jx0366b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YaSgrSy8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hbz7o9hqssz43jx0366b.png" alt="bits"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;From the above snippets, we can conclude that numbers that has the last bit as &lt;code&gt;0&lt;/code&gt;  are &lt;code&gt;even&lt;/code&gt; while integer with last bit as &lt;code&gt;1&lt;/code&gt; are &lt;code&gt;odd&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;Converting 12 to bit , we have&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;000000000000000000000000000001100
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But for simplicity sake, we remove the preceding &lt;code&gt;0s&lt;/code&gt; and our bits are&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  1100

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#types-of-bitwise-operators"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Types of Bitwise Operators&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;&amp;amp;&lt;/code&gt;¬†‚Äî¬†AND&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;|&lt;/code&gt;¬†‚Äî OR&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;~&lt;/code&gt; ‚Äî¬†NOT&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;^&lt;/code&gt;¬†‚Äî¬† XOR&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;¬†‚Äî¬†Left Shift&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;¬†‚Äî¬†Sign-Propagating Right Shift&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;¬†‚Äî¬†Zero-Fill Right Shift&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Lets get started&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;&amp;amp;&lt;/code&gt; - &lt;code&gt;AND&lt;/code&gt; OPERATOR&lt;/strong&gt; : This return  &lt;code&gt;1&lt;/code&gt; if the corresponding bits of  &lt;code&gt;operands&lt;/code&gt; are &lt;code&gt;1&lt;/code&gt; and return &lt;code&gt;0&lt;/code&gt;  if they differs. &lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#below-is-a-table-for-comparison"&gt;
  &lt;/a&gt;
  Below is a table for comparison
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E4-2jvwV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xyci7cby0bgzcswx6q62.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E4-2jvwV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xyci7cby0bgzcswx6q62.png" alt="AND"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#example-1-the-example-below-is-a-raw-function-endraw-that-computes-the-raw-and-endraw-operator"&gt;
  &lt;/a&gt;
  Example 1: The example below is a &lt;code&gt;function&lt;/code&gt; that computes the &lt;code&gt;AND&lt;/code&gt; operator.
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FgIagA_J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fe79gf8lxgzbkdtn4or3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FgIagA_J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fe79gf8lxgzbkdtn4or3.png" alt="AND"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Common interview question is to determine if a number is even or odd, JavaScript Bitwise AND can be used.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5&gt;
  &lt;a href="#example-2-determine-if-a-number-is-even-or-odd"&gt;
  &lt;/a&gt;
  Example 2 : Determine if a number is even or odd
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eMmJUKp---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1epnsetx68icoeo2efza.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eMmJUKp---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1epnsetx68icoeo2efza.png" alt="even"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Explanation&lt;/strong&gt; &lt;br&gt;
As I said earlier, &lt;code&gt;Even&lt;/code&gt; Numbers when converted to &lt;code&gt;bits&lt;/code&gt; ends with &lt;code&gt;0&lt;/code&gt;, &lt;em&gt;JavaScript&lt;/em&gt; compares the last bit and discard the remaining. Therefore,  &lt;code&gt;0 &amp;amp; 1&lt;/code&gt;  will return &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5&gt;
  &lt;a href="#example-3-the-below-code-checks-for-raw-odd-endraw-number"&gt;
  &lt;/a&gt;
  Example 3: The below code checks for &lt;code&gt;odd&lt;/code&gt; Number
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VvvGZ30B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/530dcn0vyyjl6h0h0xkk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VvvGZ30B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/530dcn0vyyjl6h0h0xkk.png" alt="odd"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Explanation&lt;/strong&gt; &lt;br&gt;
This check if the last &lt;code&gt;bit&lt;/code&gt; is &lt;code&gt;1&lt;/code&gt;, then compare   &lt;code&gt;1 &amp;amp; 1&lt;/code&gt;  and return &lt;code&gt;true&lt;/code&gt; otherwise return &lt;code&gt;false&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;|&lt;/code&gt; - &lt;code&gt;OR&lt;/code&gt; OPERATOR&lt;/strong&gt; : This return &lt;code&gt;1&lt;/code&gt; if any of the corresponding operand's &lt;code&gt;bit&lt;/code&gt; is &lt;code&gt;1&lt;/code&gt;and return &lt;code&gt;0&lt;/code&gt; is the  operand's bits are &lt;code&gt;0&lt;/code&gt;. &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Below is a table illustrating different bits combination&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WlxzcGT9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zsgje7ozee7tg6j6vgem.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WlxzcGT9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zsgje7ozee7tg6j6vgem.png" alt="OR"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#example-4-the-below-code-takes-two-raw-operands-endraw-as-arguments-and-perform-the-raw-or-endraw-bitwise-operation"&gt;
  &lt;/a&gt;
  Example 4 : The below code takes two &lt;code&gt;operands&lt;/code&gt; as arguments and perform the &lt;code&gt;OR&lt;/code&gt; bitwise operation.
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8wx7ZRMe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gv54ar2zkskd13wwlfa1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8wx7ZRMe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gv54ar2zkskd13wwlfa1.png" alt="Bitwise OR"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;~&lt;/code&gt; &lt;code&gt;NOT&lt;/code&gt; Operator&lt;/strong&gt; : This accepts only one &lt;code&gt;operand&lt;/code&gt;(unary operator). &lt;code&gt;~&lt;/code&gt; performs &lt;code&gt;NOT&lt;/code&gt; operator on every &lt;code&gt;bit&lt;/code&gt;. &lt;code&gt;bits&lt;/code&gt; that are &lt;code&gt;1&lt;/code&gt; become &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;bits&lt;/code&gt; that are &lt;code&gt;0&lt;/code&gt; turn to &lt;code&gt;1&lt;/code&gt;, forming the ones' complement of the given binary value.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#example-5-the-raw-function-endraw-below-performs-raw-not-endraw-operation"&gt;
  &lt;/a&gt;
  Example 5 : The &lt;code&gt;function&lt;/code&gt; below performs &lt;code&gt;NOT&lt;/code&gt; operation
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xqu1NjSU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eeg7iio28kwvb6q5a2w3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xqu1NjSU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eeg7iio28kwvb6q5a2w3.png" alt="bitwiseNOT"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Explanation&lt;/strong&gt; &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As we said earlier, ~ operator turns the bit from zero to one and vice-versa.&lt;br&gt;
 &lt;code&gt;~ 8&lt;/code&gt; becomes &lt;code&gt;1111111111111111111111111111011&lt;/code&gt; (-9 in decimal) &lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#few-things-to-note"&gt;
  &lt;/a&gt;
  Few things to note:
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The first bit by the left is called the &lt;code&gt;sign bit&lt;/code&gt;. The &lt;code&gt;sign bit&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt; for positive integer and  &lt;code&gt;1&lt;/code&gt;   for negative  integer.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The remaining &lt;code&gt;31bits&lt;/code&gt; are used to represent integer. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the maximum &lt;code&gt;32bits&lt;/code&gt; integer that can be represented can be calculated as  &lt;code&gt;2^31 - 2^0 = 2147483647&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;While the minimum is &lt;code&gt;-(2^31) = - 2147483648&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Bitwise operators convert their operands to 32-bit signed integers in¬†two‚Äôs complement¬†format.  when the¬†NOT operator is used on an integer, the resulting value is the two‚Äôs complement of the integer as shown below&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fJnSQHJQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6kz61hcbyhd1jzs2iph6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fJnSQHJQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6kz61hcbyhd1jzs2iph6.png" alt="noToPERATOR"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;^&lt;/code&gt; - &lt;code&gt;XOR&lt;/code&gt; OPERATOR&lt;/strong&gt; : Also called (exclusive-Or), it returns &lt;code&gt;0&lt;/code&gt; if the operand's bit are the same &lt;code&gt;(0 or 1)&lt;/code&gt; and if different return &lt;code&gt;1&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3skU81JC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aw457v90o2zvex7wssxl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3skU81JC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aw457v90o2zvex7wssxl.png" alt="XOR"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#example-6-the-raw-function-endraw-below-performs-raw-xor-endraw-operation"&gt;
  &lt;/a&gt;
  Example 6 : The &lt;code&gt;function&lt;/code&gt; below performs  &lt;code&gt;XOR&lt;/code&gt; operation
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OuykJpWJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3iyvyqxjs6zbo4x7cpp4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OuykJpWJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3iyvyqxjs6zbo4x7cpp4.png" alt="XOR"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; - &lt;code&gt;Left shift&lt;/code&gt; OPERATOR&lt;/strong&gt; : This takes two &lt;code&gt;operands&lt;/code&gt;, the &lt;code&gt;first&lt;/code&gt; is an &lt;code&gt;integer&lt;/code&gt; to be converted to &lt;code&gt;bits&lt;/code&gt; while the &lt;code&gt;second&lt;/code&gt; &lt;code&gt;operand&lt;/code&gt; is the number of &lt;code&gt;bits&lt;/code&gt; of the &lt;code&gt;first&lt;/code&gt; &lt;code&gt;operand&lt;/code&gt; to be shifted away from the &lt;code&gt;left&lt;/code&gt; and added to the &lt;code&gt;right&lt;/code&gt;.
##### Example 7 : The &lt;code&gt;function&lt;/code&gt; below performs  &lt;code&gt;Left shift&lt;/code&gt; operation &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yVq8GV2z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/80bf83o9qxigda7e6jr2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yVq8GV2z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/80bf83o9qxigda7e6jr2.png" alt="checkLeftShift"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; - &lt;code&gt;Sign-propagating right shift&lt;/code&gt; OPERATOR&lt;/strong&gt;: This takes two &lt;code&gt;operands&lt;/code&gt;, the &lt;code&gt;first&lt;/code&gt; is an integer to be converted to bits while the &lt;code&gt;second&lt;/code&gt; &lt;code&gt;operand&lt;/code&gt; is the number of &lt;code&gt;bits&lt;/code&gt; of the first &lt;code&gt;operand&lt;/code&gt; to be shifted away from the &lt;code&gt;right&lt;/code&gt; and also discarded from the &lt;code&gt;left&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#example-8-the-raw-function-endraw-below-performs-raw-signpropagating-right-shift-endraw-operation"&gt;
  &lt;/a&gt;
  Example 8 : The &lt;code&gt;function&lt;/code&gt; below performs  &lt;code&gt;Sign-propagating right shift&lt;/code&gt; operation.
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B99MZFIJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ocfagl285xcekd8fj8up.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B99MZFIJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ocfagl285xcekd8fj8up.png" alt="checkRightShift"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; - &lt;code&gt;Zero-fill right shift&lt;/code&gt;&lt;/strong&gt; : This behaves  like the sign-propagating right shift (&amp;gt;&amp;gt;) operator. The difference is that &lt;code&gt;bits&lt;/code&gt; are shifted in from the left.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#example-9-the-raw-function-endraw-below-performs-raw-zerofill-right-shift-endraw-operation"&gt;
  &lt;/a&gt;
  Example 9 : The &lt;code&gt;function&lt;/code&gt; below performs  &lt;code&gt;Zero-fill right shift&lt;/code&gt; operation.
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7Bbn8-Be--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r7mv9kevdd92df5c4hqi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7Bbn8-Be--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r7mv9kevdd92df5c4hqi.png" alt="Zero-fill"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thanks for Reading!!!!&lt;/strong&gt;&lt;br&gt;
If you enjoy this and wish to get Notified when I published new articles, click &lt;a href="https://mailchi.mp/4f641d33a5ee/subscribe-ti-my"&gt;here&lt;/a&gt; to subscribe.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>operations</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Standards to get into a recruitment process from a developer perspective</title>
      <author>Rolando Barbella</author>
      <pubDate>Sun, 15 Aug 2021 20:01:44 +0000</pubDate>
      <link>https://dev.to/rolandobarbella/standards-to-get-into-a-recruitment-process-from-a-developer-perspective-571h</link>
      <guid>https://dev.to/rolandobarbella/standards-to-get-into-a-recruitment-process-from-a-developer-perspective-571h</guid>
      <description>&lt;p&gt;Software developer is a career famous for having a lot of opportunities in the market, where many companies are looking to fill their multiple positions from arguably a ‚Äúsmall‚Äù pool of talent.&lt;/p&gt;

&lt;p&gt;But, have you ever thought? Is it true the number of good developers is so little? I have seen opinions, where they believe less than 10% are actually good enough, even people who say less than 5%! or perhaps the recruitment process in many companies is neither the most efficient nor fair?? From what I have experienced, also from the opinion of many others, the hiring process seems somehow broken. Probably the biggest problem with software recruitment is how companies qualify skills from candidates, I have experience, also heard some interesting stories regarding the way they try to do this, from the nonreal life algorithm puzzle, to rejections due to the developer not adding eslint to the takeaway home exercise.&lt;/p&gt;

&lt;p&gt;Let‚Äôs break down some of the different way companies ‚Äúmakes sure‚Äù a developer has the right skills:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-algorithm-puzzle-kata"&gt;
  &lt;/a&gt;
  The algorithm puzzle Kata
&lt;/h2&gt;

&lt;p&gt;Usually, this test gets sent on an email that contains a link that will redirect you to a coding interview platform like &lt;a href="https://try.codility.com/tour-our-platform/?utm_campaign=11359522028&amp;amp;utm_source=google&amp;amp;utm_medium=cpc&amp;amp;utm_term=codility.&amp;amp;hsa_grp=117156044811&amp;amp;hsa_ad=474985855843&amp;amp;hsa_kw=codility.&amp;amp;hsa_acc=2935819322&amp;amp;hsa_src=g&amp;amp;hsa_mt=e&amp;amp;hsa_ver=3&amp;amp;hsa_net=adwords&amp;amp;hsa_cam=1711337403&amp;amp;hsa_tgt=kwd-1295640834685"&gt;codility&lt;/a&gt;, right away, before starting the test, you will see some instructions similar to the following:‚Ä®&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-few-things-before-you-start"&gt;
  &lt;/a&gt;
  A few things before you start:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;This assessment consists of¬†4¬†tests.¬†It will take approximately¬†80¬†minutes to complete.&lt;/li&gt;
&lt;li&gt;The assessment is timed. A timer is shown per test or per question.&lt;/li&gt;
&lt;li&gt;Please allow the use of your camera/webcam and do not leave full-screen mode. Snapshots will be taken of you periodically during the assessment. These measures are taken to ensure fairness for everyone.&lt;/li&gt;
&lt;li&gt;Your assessment contains one or more coding tests. You may leave full-screen mode while working on the coding test. Full-screen will be re-enabled after you finish the coding test.&lt;/li&gt;
&lt;li&gt;Turn on your speakers or headphones (to play audio).&lt;/li&gt;
&lt;li&gt;You are free to use a calculator, pen and paper.&lt;/li&gt;
&lt;li&gt;We recommend completing the assessment in one go.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From all these things, probably the more interesting one, is when they say ‚ÄúPlease allow the use of your camera/webcam and do not leave full-screen mode. Snapshots will be taken off you periodically during the assessment. These measures are taken to ensure fairness for everyone‚Äù. This translate as ‚Äúyou can‚Äôt cheat‚Äù, right? Well, I find this unfair, even somehow rude, we as developers, search for information, ‚Äúanswers‚Äù, opinions, etc, all the time, is part of our daily job, some people say, it is even a skill! Also, why would I allow anyone to take snapshots of me because the company can not simply trust its own process? &lt;/p&gt;

&lt;p&gt;An important aspect to mention, is once you see the challenge, most of the time, it is a not real-life scenario problem, from a messy piece of data you need to somehow loop in different ways to finally get the expected result, to the ones that require to apply complex regular expressions, I can honestly say have almost never written complex regex without googling, it is just not every day ( or even a monthly ) task for me to remember, apart from not being fun at all. &lt;/p&gt;

&lt;p&gt;Another characteristic to notice from these automated tests is the expected result, if you make the unit test(s) pass, a real person will then review the solution at some point, however, if it fails, you can probably get an automatic rejection without even having the opportunity of someone looking at the code, even if the solution is 99% close. Now, how do I know this? I actually did an experiment, can not exactly remember what was the challenge about, but let‚Äôs say after applying the corresponding logic to the exercise, the expected output was to return a string like ‚ÄúHello world‚Äù, I on purpose did something like ‚ÄúHello world   ‚Äù (notice the extra space after the word world), the unit test(s) fail off course, I still submit the code like that though, not long after, a rejection was made, even though it was 99% close to the solution, there is a high probability no one reviewed the code. This is another reason why I do not believe in companies that tried to automate their recruitment process this way, the lack of human understanding is not a very good sign. &lt;/p&gt;

&lt;p&gt;In regards to the code interview platforms, usually, they try somehow to offer an experience close to what you get in a text editor but inside the browser, however, is not even close to what you feel when coding with VS Code or even something like &lt;a href="https://codesandbox.io/"&gt;code sandbox&lt;/a&gt;, this adds a not need it a layer of difficulty to the test&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-take-away-coding-task"&gt;
  &lt;/a&gt;
  The take away coding task
&lt;/h2&gt;

&lt;p&gt;I have done a few of these, they‚Äôre somehow fair, the majority do represent a real-life problem, or a mini-app from what you can possibly be doing during the job. The problem sometimes is that you don‚Äôt know exactly what do they expect, the README file might not be the best, some of them mention ‚Äúproduction code‚Äù, but each company have a different idea of the so-called ‚Äúproduction code‚Äù term or ‚Äúscalability‚Äù, others might expect the opposite, they want you to just focus on a straight solution without overdoing, you sometimes wonder what direction to take, this is mainly because the instructions are not well defined, therefore it is recommended it to email back asking any question if you don‚Äôt feel something is clear enough, otherwise you might delivery something different from their assumptions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#this-test-should-not-take-you-more-than-2-hours"&gt;
  &lt;/a&gt;
  This test should not take you more than 2 hours
&lt;/h3&gt;

&lt;p&gt;Unfortunately, some of these tasks can come with a time indication that does not seem to represent the reality of what you need to do, I‚Äôm not the only one who has seen a weekend test with a 2 hrs expectation. When I was a Jr dev, I use to think, ‚Äúam I that slow?‚Äù, ‚Äúthe good developers can do it in this time frame but not me?‚Äù, A lot of the time, it was a wrong estimation from their side, especially when they ask for ‚Äúbest standard‚Äù, ‚Äúproduction code‚Äù, ‚Äúgood file structure‚Äù, ‚Äútesting‚Äù, etc&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-white-board-test"&gt;
  &lt;/a&gt;
  The white board test
&lt;/h2&gt;

&lt;p&gt;Arguably the least favorite one, you spend your career writing test in front of a computer, now time to go back to school, write on a physical board in front of some people you probably don‚Äôt know, the candidate is supposed to explain his approach while writing also. &lt;/p&gt;

&lt;p&gt;I have not been so unlucky to do many of these, but on one occasion a company made me do a whiteboard test which I could not quite solve, at the end of the test, the interviewers almost walk away from the room without explaining what I was supposed to do, I ask them if they could please tell me what was the ‚Äúright‚Äô approach for the problem. When they tried to explain it, they were not sure either on how to solve it, meaning they did not quite understand their own test, believe it or not.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#live-pair-programming-test"&gt;
  &lt;/a&gt;
  Live pair programming test
&lt;/h2&gt;

&lt;p&gt;Like the title points out, the interviewer and candidate work on a problem to solve, it can be quite intimidating, not sure many people like being look at while coding, especially when you don‚Äôt know the other person well ( it is hard to show your best potential here ), some interviewers might not be "compassionate" enough, where they just stare at the screen while you are coding without trying to make the atmosphere a bit more relaxing, also, if it is a real pair programming, the interviewer should somehow help the candidate out a bit, or give them a little push forward if they seem nervous, especially knowing the interviewer is familiar with the code, she/he knows the test well, is not a surprise for them. If the interviewer want‚Äôs to imagine how this person behaves, acts, and code in a real app scenario, then the candidate should be allowed to google as well, if we do it in our everyday job, why would you not do it in a test?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#history"&gt;
  &lt;/a&gt;
  History
&lt;/h2&gt;

&lt;p&gt;Now, who are the persons behind this process?? Well, the answer is none other than the Sr devs who have previously face a similar recruitment process, they just continue with the trend today. &lt;/p&gt;

&lt;p&gt;How did all this started? Hard to know, but looking at the past, they are some clues‚Ä®&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#google"&gt;
  &lt;/a&gt;
  Google
&lt;/h3&gt;

&lt;p&gt;The giant company ( maybe a couple of others as well ) were famous for doing the whiteboard test some years ago, not sure what is their process now, but back then a lot of developers ‚Äúdream‚Äù of getting a job in one of these companies, due to this, a book called Cracking the coding interview came out, becoming very popular, all sort of companies from 2 person startups to mediums ones became to copy the Google approach, if they did not do the whiteboard test, at least asked about the famous Big O theory explained deeply in the mentioned book. What these other companies did not do, is ask themself, are we Google? are we that big? do we faced the same type of challenges? I guess you know the answer, if you are not Google or Facebook, why would you qualify people so similar to them?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fizz-buzz"&gt;
  &lt;/a&gt;
  Fizz buzz
&lt;/h3&gt;

&lt;p&gt;Probably the most famous coding test ever to be made, when you do a search on Fizz buzz, the following definition is found : ‚ÄúThe "Fizz-Buzz test" is an interview question designed to help filter out the 99.5% of programming job candidates who can't seem to program their way out of a wet paper bag‚Äù, wow, some big words are written here, ‚Äú99.5% who fails on this test can‚Äôt write code‚Äù, boy, how did they end up with this conclusion? Where was this experiment made? &lt;/p&gt;

&lt;p&gt;From stories I heard and read, a few Sr dev got rejected after falling the test, some people argue saying things like: ‚Äúhow can she/he be a Sr dev, charge that type of money if she/he does not know how to solve a simple exercise like this?‚Äù&lt;/p&gt;

&lt;p&gt;To explain more or less what happen in some of those rejections, I will like to compare it to a sport call baseball, yes baseball. When a hitter faces a pitcher in a professional level, the player usually has his swing timed to hit a ball which is throw at a velocity between 80 and 105 miles per hour ( very hard ), however, they are some ‚Äúfunny‚Äù situations, in random occasions when a team almost runs out of pitchers, after a long game, they tend to bring a position player to throw ( a non pitcher ), the new ‚Äúpitcher‚Äù tends to throw the ball at a velocity between 50 and 70 miles per hour, this sometimes takes the hitter to a situation were he‚Äôs completely out of balance, he‚Äôs mind and body are used to much bigger challanges, but now, they are being surprised, resulting sometimes in a fail at bat for the player. Now, does this means the hitter is not good enough? Or he did not deserve to make the team after even decades of hard work?, absolutely not! As a fact, this type of situations last very little ( one inning or less ), the player then is taken out of the game, because if the ‚Äúslow‚Äù arm pitcher is left throwing longer, the opponent hitters will make the adjustment sooner than later and massacre whatever he pitches.&lt;/p&gt;

&lt;p&gt;On the other hand, others candidates did pass the test, but the reason why, was not always because they had better thinking or skills, no! You see, the test got so popular, that many companies were testing candidates this way, to the point that many knew the Fizz buzz quiz could come, so of course they came prepare! I sometimes wonder how many wrong hires happened after doing this, or how many good hires were actually missed.&lt;/p&gt;

&lt;p&gt;At the end, the Fizz buzz trend did more harm to the recruitment process than any good.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-the-solution"&gt;
  &lt;/a&gt;
  What is the solution?
&lt;/h2&gt;

&lt;p&gt;I have made some arguments on why I think the recruitment process is not great, but, how can we do it better? I can only offer some thoughts that might make a difference.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;What ever type of test you do, it is always best to set a challenge that represent a common task your team does on a daily basis, the word common does not necessary means easy, I believe when we hire someone to help our team, is to ‚Äúpush‚Äù the product forward by building features, improving code, finally, solving some hard problems, but, for some reason, most focus on testing the hard problem part, this problems are usually not the most frequents, when they appear, usually the person  search, dig, ask for help, until the solution is find. If your company have to many hard problems, then, they might be some bad decisions made some where else, by the way, who made those decision? The same person who pass the 4 tricky kata interview?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There is also ways of qualifying someone by just having a technical chat, specially if they already on a senior level. Many topics, fundamentals, approaches, etc, can be discuss by just talking with the person, but, not asking  the obscure, edge case, like the famous &lt;a href="https://github.com/getify"&gt;Kyle Simpson&lt;/a&gt; once said ‚ÄúI‚Äôve forgotten more JavaScript than most people ever learn‚Äù but off course that does not mean he doesn‚Äôt  know enough Javascript to find a job in any good company&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Take a way test are not so bad, but please remember is a test, something that can showcase skills, logic, but always small ( 2 or 3 features max ), try assigning something that can be interesting and fun. Remember candidates are doing this in their spare time when they might feel tired, they could also be doing other test with different companies, appreciate their time and effort&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you are going to do a live pair programming test, try to be as kind and friendly as possible, make the first move if you notice the candidate is somehow a bit unsure on where to start&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It might sound obvious, but the test should be something members of your team can solve with confidence, otherwise you might have to review the recruitment applied in the pass&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Personally I do not participate in process that involve algorithm puzzle kata neither white board tests, more than happy to face a well done take away test, a "friendly" pair programming, and off course a technical chat about different interesting and challenging topics&lt;/p&gt;

&lt;p&gt;Before getting into a recruitment process, make sure to ask what type of process they fallow, how many stages they do? how do they test technical skills?  look at recent interview reviews in Glasssdor, do they even bother to give feedback to the candidates? the more you find out, the better, If they don‚Äôt meet with your standard, is better not to get involve, you will be saving a lot of hassle, be patientan, the right opportunity will eventually come. On the other hand, If they do meet with your standards, and you decide to participate, please add your experience in &lt;a href="https://www.glassdoor.com/index.htm"&gt;Glassdor&lt;/a&gt;, so it can be public for everyone, the more open, transparent this process are, the better community we will be able to build and offer&lt;/p&gt;

</description>
      <category>interview</category>
      <category>recruitment</category>
      <category>hiringprocess</category>
      <category>tests</category>
    </item>
    <item>
      <title>Simplified: Object-oriented Programming Python</title>
      <author>Tito</author>
      <pubDate>Sun, 15 Aug 2021 19:42:39 +0000</pubDate>
      <link>https://dev.to/titusnjuguna/simplified-object-oriented-programming-python-3l12</link>
      <guid>https://dev.to/titusnjuguna/simplified-object-oriented-programming-python-3l12</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yQO2tA1L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.fs.teachablecdn.com/ySDOMxZwTAio4hQ6k68G" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yQO2tA1L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.fs.teachablecdn.com/ySDOMxZwTAio4hQ6k68G" alt="python o.o.p"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Before diving into O.O.P, I wish to pass a special appreciation  to &lt;a href=""&gt;Lux Tech Academy&lt;/a&gt; and more to its Founder &lt;a href="https://dev.to/grayhat"&gt;Harun&lt;/a&gt;, for the opportunity to learn and network through a four-weeks Python 2021 Boot camp. The boot camp had weekly segments as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Week 1: Introduction to Python And Technical Writing&lt;/li&gt;
&lt;li&gt;Week 2: Advance Python concepts&lt;/li&gt;
&lt;li&gt;Week 3: Introduction to Web Development (Flask And FastAPI)&lt;/li&gt;
&lt;li&gt;Week 4: Introduction To Data Science&lt;/li&gt;
&lt;li&gt;Week 5 to Up-to-date: Peer Learning And Mentorship&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is a great experience and Would encourage you to apply for the next cohort.&lt;/p&gt;

&lt;p&gt;In this article, I will give general definition,syntax  and  codes of each O.O.P principles . Intermediate and Real-life application of O.O.P will be covered in upcoming series&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-objectoriented-programming"&gt;
  &lt;/a&gt;
  What is Object-oriented Programming?
&lt;/h2&gt;

&lt;p&gt;Just like the name suggests,Object-oriented programming is a technique in computer programming that represents data and methods as 'objects'. They ensure creation of neat and reusable code such that the program is divided into self-contained objects or several mini-programs.&lt;br&gt;
The object has two characteristics:Attributes ,Behavior&lt;br&gt;
Consider an example of a car&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Attributes of the car : color, year of manufacture, Manufacturer&lt;/li&gt;
&lt;li&gt;Behavior/Characteristics : Hoots, brakes, accelerates&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In python , Object-oriented programming follows these principles: Class, Object, Method, Inheritance, Polymorphism, Data Abstraction, and Encapsulation.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#principles-of-objectoriented-programming"&gt;
  &lt;/a&gt;
  Principles of Object-Oriented Programming
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;1. Class&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;
    A Class is like an object constructor, or a "blueprint" for  
    creating objects,by defining the common attributes and 
    behavior.
    In Python, a class is defined using a keyword 'class'. Lets  define a car

 
```python
class Car:
  #class attributes
  Color="Red"
  YOM = "2015"
  Model = "Mazda"
pass
```


Congratulations for defining a class,but you will realize the end goal of any program is a result.Unfortunately , the class defined will run smoothly but will give no result. We will handle this in objects
The example above is a class  in a simplest form, and is not really useful in real life applications. In real-life application , a class needs to be dynamic.
Therefore, I will introduce '__init__()' function,which is always executed when the class is being initiated(&lt;a href="https://dev.to/titusnjuguna/understanding-functions-in-python-40f8"&gt;To Understand more on functions &lt;/a&gt;). For simplified definition,
Lets consider a dog,which according to scientific classification belongs to the species &lt;a href="https://en.wikipedia.org/wiki/Dog"&gt;Canis lupus&lt;/a&gt;, now as you go down the scientific classification you will realize subspecies have different attributes e.g color,weight,height etal
With these information lets define a class dog.


```python
class Dog:
   species = 'Canis lupus'
   def __init__(self,color,weight,height):
      self.color = color
      self.weight = weight
      self.height = height
```




```python
class Car:
    def __init__(self,color,YOM,model):
       self.color = color
       self.YOM = YOM
       self.model = model

```


Just like the car definition, the code will run but there is no end result.
To solve this, allow me to introduce instantiation in the next concept of O.O.P,objects.
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.Object&lt;/strong&gt;&lt;br&gt;
   To access the attributes of a class, we need to create an instance(event) out of the class.Out of this we can simply define an object as an instance of a class.&lt;br&gt;
Considering the car example, take the following instance:&lt;br&gt;
** Car1 ; color:white,YOM:2015,model:Toyota&lt;br&gt;
** Car2 ; color:blue,YOM:2012, model:Audi&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Car&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;YOM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
       &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;
       &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;YOM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;YOM&lt;/span&gt;
       &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;
&lt;span class="n"&gt;Car1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Car&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'white'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'2015'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'Toyota'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;       
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'This is a &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Car1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;,&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Car1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;,manufactured in &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Car1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;YOM&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Result:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;white&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Toyota&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;manufactured&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;2015&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example, Car1 is an object.Through it we can access all the attributes of class Car.Instantiating is basically:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;Car1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Car&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Go ahead and try creating an object out of Car2  as described above in &lt;a href="https://colab.research.google.com/drive/1r1S94i_Q0WdcdGVCXfIlgsEIW1YALfm1#scrollTo=c5HIOxO6hfgp"&gt;Google Colab&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;3.Method&lt;/strong&gt;&lt;br&gt;
Recall on definition of a class, we mentioned that an object has two properties: an attribute and behavior. Now in a simpler term, a method is a way of defining behavior of an object.&lt;br&gt;
From the Car example, we can say a car has the following behaviors: it hoots,it accelerates, it brakes etal&lt;br&gt;
Therefore lets create a method out of it&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Car&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;YOM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
       &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;
       &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;YOM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;YOM&lt;/span&gt;
       &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;
&lt;span class="c1"&gt;#method
&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hoot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
       &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Pipippipi'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To access the method , we will have to create an instance&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;Car3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Car&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Blue'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'2018'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'Mazda'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Car3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hoot&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'The &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Car3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;,&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Car3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;YOM&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;,&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Car3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; is hooting &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Car3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hoot&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Result:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;white&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2016&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Mazda&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;hooting&lt;/span&gt; &lt;span class="n"&gt;Pipippipi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Addition&lt;br&gt;
Methods can be classified  into 3:&lt;br&gt;
   &lt;strong&gt;- Instance Method&lt;/strong&gt;&lt;br&gt;
   &lt;strong&gt;- Class Method&lt;/strong&gt;&lt;br&gt;
   &lt;strong&gt;- Static Method&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I will go deeper into this methods and their applications in my next post.Kindly keep in touch.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4.Inheritance&lt;/strong&gt;&lt;br&gt;
Think of inheritance in the following terms, parent class and a child class.In real-life scenario, a child can partially or fully inherit some attributes and behaviors from their parents.&lt;br&gt;
Now programming scenario,Inheritance allows us to define a child class that inherits all the methods and properties from parent class.&lt;br&gt;
&lt;strong&gt;NOTE:&lt;/strong&gt; A child class can inherit some methods and properties by using &lt;em&gt;Parent_class_name.&lt;strong&gt;init&lt;/strong&gt;()&lt;/em&gt; function . Additionally, it can inherit all the methods and properties from parent class Use the &lt;em&gt;super().&lt;strong&gt;init&lt;/strong&gt;()&lt;/em&gt; Function. We will handle both in the following examples respectively.&lt;br&gt;
Example 1: Partial inheritance&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#Parent Class
&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lname&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;firstname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fname&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lastname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lname&lt;/span&gt;
  &lt;span class="c1"&gt;#method
&lt;/span&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;printname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;firstname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lastname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#child class
&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lname&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Example 2 : Full inheritance&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lname&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;firstname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fname&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lastname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lname&lt;/span&gt;
  &lt;span class="c1"&gt;#method
&lt;/span&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;printname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;firstname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lastname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lname&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;graduationyear&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2019&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;5.Polymorphism&lt;/strong&gt;&lt;br&gt;
Imagine, you have been tasked to create a program that calculate area of any shape provided by user.Now this is the perfect situation to introduce polymorphism, which simply means different form.&lt;br&gt;
In the programming world, Polymorphism refers to the ability of the function with the same name to carry different functionality altogether. It creates a structure that can use many forms of objects.&lt;br&gt;
Example(Polymorphism with Class Methods)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;whale&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;swim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"The whale is swimming."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;swim_backwards&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"The whale cannot swim backwards, but can sink backwards."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;skeleton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"The whale's skeleton is made of cartilage."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Starfish&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;swim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"The Starfish is swimming."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;swim_backwards&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"The Starfish can swim backwards."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;skeleton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"The Starfish's skeleton is made of bone."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;waza&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;whale&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;herod&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Starfish&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;fish&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;waza&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;herod&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;fish&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;swim&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;fish&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;swim_backwards&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;fish&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;skeleton&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;whale&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;swimming&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;whale&lt;/span&gt; &lt;span class="n"&gt;cannot&lt;/span&gt; &lt;span class="n"&gt;swim&lt;/span&gt; &lt;span class="n"&gt;backwards&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;but&lt;/span&gt; &lt;span class="n"&gt;can&lt;/span&gt; &lt;span class="n"&gt;sink&lt;/span&gt; &lt;span class="n"&gt;backwards&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;whale&lt;/span&gt;&lt;span class="s"&gt;'s skeleton is made of cartilage.
The Starfish is swimming.
The Starfish can swim backwards.
The Starfish'&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;skeleton&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;made&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;bone&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;6.Data Abstraction&lt;/strong&gt;&lt;br&gt;
For easy understanding, consider your T.V remote, the '+' button,which is used to increase the volume.You can use the button but you cannot see how operations are carried out. This is a perfect example of abstraction.&lt;br&gt;
In Python, data abstraction can be defined as ,hiding all the irrelevant data/process of an application in order to reduce complexity and increase the efficiency of the program.&lt;br&gt;
If you have worked with Django Framework, consider when creating a model:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;student&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This a perfect example of abstraction.&lt;br&gt;
In future posting i will further discuss Abstract Methods and Classes.Keep in touch&lt;br&gt;
&lt;strong&gt;7.Encapsulation&lt;/strong&gt;&lt;br&gt;
Encapsulation is an Object Oriented Programming concept that binds together the data and functions that manipulate the data, and that keeps both safe from outside interference and misuse. Data encapsulation led to the important OOP concept of data hiding.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#referee"&gt;
  &lt;/a&gt;
  Referee
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.pythontutorial.net/python-oop/"&gt;https://www.pythontutorial.net/python-oop/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.analyticsvidhya.com/blog/2020/11/basic-concepts-object-oriented-programming-types-methods-python/"&gt;https://www.analyticsvidhya.com/blog/2020/11/basic-concepts-object-oriented-programming-types-methods-python/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.w3schools.com/python/python_inheritance.asp"&gt;https://www.w3schools.com/python/python_inheritance.asp&lt;/a&gt;
-&lt;a href="http://rubyblog.pro/2017/01/object-oriented-programming-encapsulation-inheritance"&gt;http://rubyblog.pro/2017/01/object-oriented-programming-encapsulation-inheritance&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.askpython.com/python/oops/polymorphism-in-python"&gt;https://www.askpython.com/python/oops/polymorphism-in-python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.mygreatlearning.com/blog/abstraction-in-python/"&gt;https://www.mygreatlearning.com/blog/abstraction-in-python/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>python</category>
      <category>oop</category>
      <category>beginners</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>Full-Stack App with VueJs and Flask</title>
      <author>Bek Brace</author>
      <pubDate>Sun, 15 Aug 2021 19:28:18 +0000</pubDate>
      <link>https://dev.to/bekbrace/full-stack-app-with-vuejs-and-flask-3d32</link>
      <guid>https://dev.to/bekbrace/full-stack-app-with-vuejs-and-flask-3d32</guid>
      <description>&lt;p&gt;This is a game library full-stack web app using VueJs for Frontend design and Flask for backend server&lt;br&gt;
Vue is a progressive open-source JavaScript framework for building UI&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/lenV5aVOMp8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;The word "progressive" means its implemented as additional markup to html. it basically a template model bound to a data model.&lt;/p&gt;

&lt;p&gt;If the model is updated the browsers html is updated, that is it reacts to model updates. Vue js in an example of progressive framework.&lt;/p&gt;

&lt;p&gt;Vue is not created by a Big companies such as Google for Angular or Facebook for React; but it was created by an independent software developer called Evan You.&lt;/p&gt;

&lt;p&gt;Comparable to React and Angular, it's much more approachable, and easy to grasb, so beginners can get up and running quickly.&lt;/p&gt;

&lt;p&gt;It's also as powerful as react and angular, so it provides all the features you'll need to create modern front-end applications.&lt;/p&gt;

&lt;p&gt;There are severl Vue version, but the main versions are Vue2 and Vue3. And in this tutprial we will work with Vue2&lt;/p&gt;

&lt;p&gt;&lt;a href="https://vuejs.org/v2/guide/index.html"&gt;https://vuejs.org/v2/guide/index.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Vue provides a way to build components that encapsulate state in your javascript in a reactive way to your HTML template using what's called Declarative rendering where you can render data to the browser with straightforward template syntax, it reminds of jinja2 or the django template language with these double curly braces, where you can plug any variables and it gets to be rendered in the DOM, so the same data input will always produce the same output rendered in the DOM.&lt;/p&gt;

&lt;p&gt;FLASK&lt;/p&gt;

&lt;p&gt;&lt;a href="https://flask.palletsprojects.com/en/2.0.x/"&gt;https://flask.palletsprojects.com/en/2.0.x/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Flask is a Python microframework like Pyramid, bottle or CherryPy, and with it we'll build a a RESTful API today, I also have a tutorial to show you how to create a restful API in Flask in two different ways. And I have a crash course on Flask, you can check it out if you like&lt;/p&gt;

&lt;p&gt;The good thing about microframeworks like Flask, is we don't have out of the box tools and features like in Django or TurboGears, so you will have to build everything manually which is a great thing for learning and self-improvement as a developer in my opinion.&lt;/p&gt;

&lt;p&gt;Shoutout to Michael Hermann, for letting me use his code base to create this tutorial&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/mikeherman"&gt;https://twitter.com/mikeherman&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mherman.org"&gt;https://mherman.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Github Link : &lt;a href="https://github.com/BekBrace/VueJS-Flask-Full-Stack-Application"&gt;https://github.com/BekBrace/VueJS-Flask-Full-Stack-Application&lt;/a&gt;&lt;br&gt;
Website : &lt;a href="https://bkbrace.com"&gt;https://bkbrace.com&lt;/a&gt;&lt;br&gt;
Peace out,&lt;br&gt;
Bek&lt;/p&gt;

</description>
      <category>vue</category>
      <category>python</category>
      <category>javascript</category>
      <category>programming</category>
    </item>
    <item>
      <title>What is nohup in Linux?</title>
      <author>Kedar.K</author>
      <pubDate>Sun, 15 Aug 2021 19:23:29 +0000</pubDate>
      <link>https://dev.to/kedark/what-is-nohup-in-linux-1fej</link>
      <guid>https://dev.to/kedark/what-is-nohup-in-linux-1fej</guid>
      <description>&lt;p&gt;When we execute a command in Linux, it creates our process in the background and assigns a unique process id. This process can end in three ways.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The task assigned is completed&lt;/li&gt;
&lt;li&gt;You kill the process explicitly&lt;/li&gt;
&lt;li&gt;You log off, or in the case of SSH, the connection drops, and the session is terminated&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Imagine you are running a critical process, and you might need to log off urgently or the connection drops, the process stops immediately, and you might lose your work.&lt;/p&gt;

&lt;p&gt;To avoid this, we can use the &lt;code&gt;nohup&lt;/code&gt; command. &lt;code&gt;nohup&lt;/code&gt; in Linux executes other commands specified in the arguments. This command ignores all SIGHUP (hangup) signals. SIGHUP is sent to a process when its controlling terminal is closed.&lt;/p&gt;

&lt;p&gt;To understand better, let's see the syntax.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;nohup COMMAND [ARGS]&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#running-command-in-the-foreground"&gt;
  &lt;/a&gt;
  Running command in the foreground
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;nohup&lt;/code&gt; will run in the foreground, and the output of the command will be stored in the &lt;code&gt;nohup.out&lt;/code&gt; file. &lt;code&gt;nohup&lt;/code&gt; command will create this file in the current directory. If the user doesn't have sufficient permissions to write a file in the current directory, &lt;code&gt;nohup&lt;/code&gt; will generate the output file in the home directory.&lt;/p&gt;

&lt;p&gt;Let's look at example output.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;root@kedar:/# MYCOMMAND="echo 'My name is Kedar.'"

root@kedar:/# nohup $MYCOMMAND
nohup: ignoring input and appending output to 'nohup.out'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we &lt;code&gt;cat&lt;/code&gt; the contents of the output file, we see this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;root@kedar:/# cat nohup.out 
'My name is Kedar'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have used a small command, so it executes immediately. For an extensive process, you can log out at this point, and the process will still run.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#running-command-in-the-background"&gt;
  &lt;/a&gt;
  Running command in the background.
&lt;/h3&gt;

&lt;p&gt;Well, we can also run this command background. To run it in the background, we use the &lt;code&gt;&amp;amp;&lt;/code&gt; operator.&lt;/p&gt;

&lt;p&gt;If we run the same command in the background, we get the following output.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;root@kedar:/# MYCOMMAND="echo 'My name is Kedar.'"
root@kedar:/# nohup $MYCOMMAND &amp;amp;
[1] 24
root@kedar:/# nohup: ignoring input and appending output to 'nohup.out'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The integer you see in the output is a process id. &lt;/p&gt;

&lt;p&gt;You can also kill this background process using process id.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;kill -9 24&lt;/code&gt;&lt;/p&gt;




&lt;p&gt;That's all for this post, guys. Hopefully, now you have an idea about the &lt;code&gt;nohup&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;if you enjoyed it, don't forget to ‚ù§ or üîñ.&lt;/p&gt;

&lt;p&gt;Happy learning.&lt;/p&gt;

</description>
      <category>linux</category>
      <category>bash</category>
      <category>computerscience</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Operating Systems Interview Preparation Notes</title>
      <author>Abhinandan Sharma</author>
      <pubDate>Sun, 15 Aug 2021 19:08:10 +0000</pubDate>
      <link>https://dev.to/abhi824/operating-systems-interview-preparation-notes-408l</link>
      <guid>https://dev.to/abhi824/operating-systems-interview-preparation-notes-408l</guid>
      <description>&lt;p&gt;If you are struggling with the right track and a 10-min read for Operating systems from begin to end, you're at right place. Even I am not sure where to start, but we would figure it and if you are reading this, I have successfully completed these notes or at least am on right track.&lt;/p&gt;

&lt;p&gt;Let's start our struggle for OS:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-track"&gt;
  &lt;/a&gt;
  The Track
&lt;/h3&gt;

&lt;p&gt;I found many resources to learn, let's just list all:&lt;br&gt;
[Galvin Concise PPTs)[&lt;a href="https://www.os-book.com/OS9/slide-dir/index.html%5D:"&gt;https://www.os-book.com/OS9/slide-dir/index.html]:&lt;/a&gt; These were great but I felt that these are a little bit too much, so here are the chapters we would do:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Processes&lt;/li&gt;
&lt;li&gt;Threads&lt;/li&gt;
&lt;li&gt;Process Synchronization&lt;/li&gt;
&lt;li&gt;CPU Scheduling Algorithms&lt;/li&gt;
&lt;li&gt;Deadlocks&lt;/li&gt;
&lt;li&gt;Main memory&lt;/li&gt;
&lt;li&gt;Virtual memory&lt;/li&gt;
&lt;li&gt;Virtual Machines&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;I am skipping introduction of OS for now as it was not that important, this is going to be a fast article which works like a last night dose.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#processes"&gt;
  &lt;/a&gt;
  Processes
&lt;/h4&gt;

&lt;p&gt;Processes are a program in execution. It has its own memory which is divided into four parts: Text, Data, Heap and Stack.&lt;/p&gt;

&lt;p&gt;Brief explanation about these &lt;br&gt;
Text: Stores the compiled program code. &lt;/p&gt;

&lt;p&gt;Data: stores global and static variables&lt;/p&gt;

&lt;p&gt;Heap: Stores dynamically allocated data&lt;/p&gt;

&lt;p&gt;Stack: Stores local variables.&lt;/p&gt;

&lt;p&gt;Process, as the name suggests, have different states (just like making a joint). Here is a diagram which says it all:&lt;/p&gt;

&lt;p&gt;Diagram&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sMLRigVY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/crkkcao6l865874kz3sw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sMLRigVY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/crkkcao6l865874kz3sw.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Process Control Block(PCB)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It is a data structure that stores all information about a process. &lt;/p&gt;

&lt;p&gt;It contains these:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Process State: We already saw these&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Process ID: self-explanatory&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CPU registers and Program Counter: It is basically a pointer to next instruction to be executed.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CPU scheduling information: priority and pointers to scheduling queues(will see later)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Memory management information: self-explanatory&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Accounting Information: CPU time consumed, limits, etc.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I/o Status information: Devices allocated, open file tables, etc.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Process Scheduling Queues&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This handles the order of execution of the process. We have different queues for different states. When the state of a process is changed, it is simply detached from the current queue and added to it's new state's queue. &lt;/p&gt;

&lt;p&gt;This says it all&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Hc8xQqKV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qqewgpq5wacqfg6eaz1v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Hc8xQqKV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qqewgpq5wacqfg6eaz1v.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Please note that we are not actually studying scheduling algorithms, we are just assuming that we have some given order and how the processes are executed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Schedulers&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There are three types of schedulers, long term, short term and mid term schedulers. &lt;/p&gt;

&lt;p&gt;Brief explanation&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Long term Schedulers: These are responsible for sending a process from new to ready queue. It has to maintain degree of multi programming which is simply this: Average rate of incoming = average rate of outgoing. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Short term schedulers/ CPU schedulers: From ready queue to running queue. (I think it's clear)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Mid term schedulers: These are special type of schedulers with a unique functionality: when a process is paused(maybe it needs some input) it, &lt;strong&gt;swaps in&lt;/strong&gt; the process and allocates this position to some other process and when it arrives again, &lt;strong&gt;swaps out&lt;/strong&gt; the other process and resume the previous process.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Scheduling Algorithms&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Terminology&lt;br&gt;
&lt;strong&gt;Arrival Time&lt;/strong&gt;: Time at which process arrives in ready queue&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Completion Time&lt;/strong&gt;: Time at which process completes its execution.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Burst Time&lt;/strong&gt;: Time required by process for CPU execution&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Turn Around Time&lt;/strong&gt;: Time difference between completion and arrival time.(How it's different from burst time?)(Add waiting time here as well)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Waiting Time&lt;/strong&gt;: Turnaround time-burst time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Throughput&lt;/strong&gt;: Total number of processes completed per unit time. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Non-preemptive Algorithms&lt;/strong&gt;: Once a processes is in ready queue we cannot pause it's execution until it's completely executed. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Preemptive Algorithms&lt;/strong&gt;: Opposite of non-preemptive. Period.&lt;/p&gt;

&lt;p&gt;Let's start with algorithms.&lt;/p&gt;

&lt;p&gt;First Come First Serve(FCFS)&lt;br&gt;
Widely used in college admissions, this algorithm is just what it says. Whichever process arrives first, it will execute the process first and then jump to second process. (Non-preemptive Algorithm)&lt;/p&gt;

&lt;p&gt;Here is a simple C++ code&lt;br&gt;
You seriously opened this? Please try this yourself. It is very simple just a sort will do the work.&lt;/p&gt;

&lt;p&gt;This gag diagram will help you understand FCFS:&lt;/p&gt;

&lt;p&gt;Gag diagram&lt;br&gt;
Processes:&lt;br&gt;
Processes  | Burst Time&lt;/p&gt;

&lt;p&gt;P1         | 7&lt;/p&gt;

&lt;p&gt;P2         | 3&lt;/p&gt;

&lt;p&gt;P3         | 10&lt;/p&gt;

&lt;p&gt;P4         | 5&lt;/p&gt;

&lt;p&gt;Gag Diagram:&lt;/p&gt;

&lt;p&gt;Average waiting time:&lt;/p&gt;

&lt;p&gt;Average turnaround time:&lt;/p&gt;

&lt;p&gt;Why FCFS is not that good?&lt;br&gt;
It's kind of obvious. If the arrival time of a process which takes a lot of time than others is less, it will slow down the operating system. &lt;/p&gt;

&lt;p&gt;Shortest Job First(SJS)&lt;br&gt;
Just sort the jobs according to their burst times. And we schedule the jobs according to that order only. It is a non-preemptive algorithm but there does exists a preemptive algorithm for SJS as well.&lt;/p&gt;

&lt;p&gt;C++ Code for non-preemptive SJS&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#include&amp;lt;bits/stdc++.h&amp;gt;
using namespace std;
#define int long long int
int32_t main()
{
    int n;cin&amp;gt;&amp;gt;n;
    vector&amp;lt;pair&amp;lt;int,int&amp;gt;&amp;gt; times(n);
    vector&amp;lt;pair&amp;lt;int,int&amp;gt;&amp;gt; duration(n);
    // vector&amp;lt;Time&amp;gt;a;
    for(int i=0;i&amp;lt;n;i++)
    {
        cin&amp;gt;&amp;gt;times[i].first&amp;gt;&amp;gt;times[i].second;
        duration[i].second=i;
        duration[i].first=times[i].second-times[i].first;
    }

    sort(duration.begin(),duration.end());

    // Order of jobs is the duration.second order
    // Now we need to find turnaround time, waiting time and
    // Completion time for every process
    int total_waiting_time=0;
    int total_turnaround_time=0;
    int t=0;
    for(int i=0;i&amp;lt;n;i++)
    {
        cout&amp;lt;&amp;lt;"Process "&amp;lt;&amp;lt;duration[i].second+1&amp;lt;&amp;lt;" in ready queue now!\n";
        t=max(times[duration[i].second].first,t);
        t+=duration[i].first;
        int turnaround_time=t-times[duration[i].second].first;
        total_turnaround_time+=turnaround_time;
        cout&amp;lt;&amp;lt;"Turn Around Time: "&amp;lt;&amp;lt;turnaround_time&amp;lt;&amp;lt;"\n";
        int waiting_time=turnaround_time-duration[i].first;
        total_waiting_time+=waiting_time;
        cout&amp;lt;&amp;lt;"Waiting Time: "&amp;lt;&amp;lt;waiting_time&amp;lt;&amp;lt;"\n";
    }
    double avg_turnaround_time=(double)total_turnaround_time/n;
    double avg_waiting_time=(double)total_waiting_time/n;
    cout&amp;lt;&amp;lt;"Average Waiting Time: "&amp;lt;&amp;lt;avg_waiting_time&amp;lt;&amp;lt;"\n";
    cout&amp;lt;&amp;lt;"Average Turn Around Time: "&amp;lt;&amp;lt;avg_turnaround_time&amp;lt;&amp;lt;"\n";


    return 0;
}
~~~~~


This gag diagram will help you understand SJS:

Gag diagram
Processes:
Processes  | Burst Time

P1         | 7

P2         | 3

P3         | 10

P4         | 5

Gag Diagram:

Average waiting time:

Average turnaround time:





Disadvantages of SJS
Here we have certain time when our CPU is idle. Being idle is the worst thing we can have!(In general as well, that's why I am writing this).


It has a preemptive way also. In this, the trick is to fill those gaps which we were making. Whenever we are idle, we assign computer another process which can be filled.

C++ code for preemptive code
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;To be updated&lt;br&gt;
~&lt;del&gt;&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;This gag diagram will help you understand preemptive version of SJS:&lt;/p&gt;

&lt;p&gt;Gag diagram&lt;br&gt;
Processes:&lt;br&gt;
Processes  | Burst Time&lt;/p&gt;

&lt;p&gt;P1         | 7&lt;/p&gt;

&lt;p&gt;P2         | 3&lt;/p&gt;

&lt;p&gt;P3         | 10&lt;/p&gt;

&lt;p&gt;P4         | 5&lt;/p&gt;

&lt;p&gt;Gag Diagram:&lt;/p&gt;

&lt;p&gt;Average waiting time:&lt;/p&gt;

&lt;p&gt;Average turnaround time:&lt;/p&gt;

&lt;p&gt;Round Robin Algorithm&lt;/p&gt;

&lt;p&gt;In this algorithm, we have fixed time slots and we execute the processes sequentially in the order given and switch between processes after every fixed time. This gag diagram will help you understand:&lt;/p&gt;

&lt;p&gt;Gag diagram&lt;br&gt;
Processes:&lt;br&gt;
Processes  | Burst Time&lt;/p&gt;

&lt;p&gt;P1         | 7&lt;/p&gt;

&lt;p&gt;P2         | 3&lt;/p&gt;

&lt;p&gt;P3         | 10&lt;/p&gt;

&lt;p&gt;P4         | 5&lt;/p&gt;

&lt;p&gt;Gag Diagram:&lt;/p&gt;

&lt;p&gt;Average waiting time:&lt;/p&gt;

&lt;p&gt;Average turnaround time:&lt;/p&gt;

&lt;p&gt;C++ Code&lt;br&gt;
TBU&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Process synchronization&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Processes categorized on basis of synchronization &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Independent Process : Execution of one process does not affects the execution of other processes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Cooperative Process : Execution of one process affects the execution of other processes.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Process synchronization problem arises in the case of Cooperative process also because resources are shared in Cooperative processes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Race Condition&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When more than one processes are executing the same code or accessing the same memory or any shared variable in that condition there is a possibility that the output or the value of the shared variable is wrong so for that all the processes doing the race to say that my output is correct this condition known as a race condition. Several processes access and process the manipulations over the same data concurrently, then the outcome depends on the particular order in which the access takes place.&lt;/p&gt;

&lt;p&gt;Example&lt;br&gt;
Suppose we have two operations, cnt++ and cnt--, from two different processes acting on a global variable cnt.&lt;/p&gt;

&lt;p&gt;++ Operation :&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;int reg=cnt;
reg=reg-1;
cnt=reg;
~~~~~

-- Operation:

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;int reg2=cnt;&lt;br&gt;
reg2=reg2-1;&lt;br&gt;
cnt=reg2;&lt;br&gt;
~&lt;del&gt;&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;Now, we need to do these operation in this order:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;int reg=cnt;
reg=reg-1;
cnt=reg;
int reg2=cnt;
reg2=reg2-1;
cnt=reg2;
~~~~~

But as the resource is shared, it can happen in any order, maybe this one as well:

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;int reg=cnt;&lt;br&gt;
reg=reg-1;&lt;br&gt;
int reg2=cnt;&lt;br&gt;
cnt=reg;&lt;br&gt;
reg2=reg2-1;&lt;br&gt;
cnt=reg2;&lt;br&gt;
~&lt;del&gt;&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;This will lead to cnt's final value as 4 if initial value is 5.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Critical Section&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Critical section is a code segment which can be accessed by only one process at a time. This code segment is common in many processes and if many processes run simultaneously, we would have a hard time finding the process containing the error, if it happens.&lt;/p&gt;

&lt;p&gt;Any solution to critical section should must satisfy these rules.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Mutual Exclusion : If a process is executing in its critical section, then no other process is allowed to execute in the critical section.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Progress : If no process is executing in the critical section and other processes are waiting outside the critical section, then only those processes that are not executing in their remainder section can participate in deciding which will enter in the critical section next, and the selection can not be postponed indefinitely.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Bounded Waiting : A bound must exist on the number of times that other processes are allowed to enter their critical sections after a process has made a request to enter its critical section and before that request is granted.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here is what critical section looks like&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9lejTWbH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/20dzuo5i1gsw809rffs3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9lejTWbH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/20dzuo5i1gsw809rffs3.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Peterson's Solution&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As we saw earlier, we need a solution for critical section of code, as it can lead to anomalies. This solution should satisfy the rules we mentioned before.&lt;/p&gt;

&lt;p&gt;Simple Psuedo code&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;int turn;
bool flag[2];
do{
    flag[i]=1;
    turn=j;
    while(flag[j]&amp;amp;&amp;amp;turn==j);
    /////////////////////
    // Critical section//
    /////////////////////
    flag[i]=0;
    ///////////////////////
    // Remainder section///
    ///////////////////////

}
while(1)
~~~~~ 



How it works
Before actually seeing how it works, please have another look of the things we want it to satisfy.
These 3 rules:

1. Mutual exclusion
2. Progress
3. Bounded Waiting

Peterson solution simply assigns a turn and a flag to each process. Initially flag is 0 in all processes and turn is either 0 or 1. Flag array's on index means that this process is waiting for its turn now. And would work only if the initial process has completed it's execution. We have the while loop for this in the code. Please have a look at the code now and if you still find any difficulty, please post in comments.



**Semaphores**

Semaphore is nothing but an integer variable, and this can be changed by using only these two operations:

1. Wait: It is like a decrement operation. 

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;wait(S){&lt;br&gt;
   while(S&amp;lt;=0);&lt;br&gt;
   S--;&lt;br&gt;
} &lt;br&gt;
~&lt;del&gt;&lt;/del&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Signal:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Signal(S){
   S++
} 
~~~~~

Semaphores can be counting or binary(0 or 1). 

Binary Semaphores are generally called **mutex locks** as they provide mutual exclusion.  

Counting Semaphores are used to control access to given resource for multiple processes.

Use of semaphores in handling critical section of N processes
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Shared data: semaphore mutex// Initially mutex=1&lt;br&gt;
Process p[i]:&lt;br&gt;
do{&lt;br&gt;
   wait(mutex);&lt;br&gt;
   ////////////////////////&lt;br&gt;
   ////critical section////&lt;br&gt;
   ////////////////////////&lt;br&gt;
   signal(mutex);&lt;br&gt;
   ////////////////////////&lt;br&gt;
   ////remainder section///&lt;br&gt;
   ////////////////////////&lt;br&gt;
}while(1);&lt;br&gt;
~&lt;del&gt;&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;How does this work?&lt;br&gt;
Whenever a process arrives we wait for the semaphore to turn to 1. Initially semaphore is 1 already so Process P1 has no wait and executes the critical section. But if second process comes now, wait function runs a while loop which kind of halt the process. Now when the first process finishes, second process continues and so on.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Busy Waiting problem's solution&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;problem with semaphores&lt;br&gt;
Unbounded Wait time is the main problem here.&lt;/p&gt;

&lt;p&gt;How we achieve busy waiting problem&lt;br&gt;
What we do is simple to achieve bounded wait time. We are currently holding suppose n processes due to 1 process which is running. We simply can just block the processes which are in waiting. Like, we can contain them in a list. Okay, to be very honest, I truly don't understand how blocking the processes make them bounded. Would update this when I find this. Please write on comments if you know this.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#deadlocks"&gt;
  &lt;/a&gt;
  Deadlocks
&lt;/h4&gt;

&lt;p&gt;To be updated&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#threads"&gt;
  &lt;/a&gt;
  Threads
&lt;/h4&gt;

&lt;p&gt;To be updated&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#memory-management"&gt;
  &lt;/a&gt;
  Memory Management
&lt;/h4&gt;

&lt;p&gt;To be updated&lt;/p&gt;

</description>
      <category>operatingsystem</category>
    </item>
    <item>
      <title>Using Arch Linux</title>
      <author>Shubham Patil</author>
      <pubDate>Sun, 15 Aug 2021 18:34:23 +0000</pubDate>
      <link>https://dev.to/shubhampatilsd/using-arch-linux-3k12</link>
      <guid>https://dev.to/shubhampatilsd/using-arch-linux-3k12</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This is an article originally from Medium. I have decided to switch from Medium to dev.to and import all my posts from there.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kMxbTQ9h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2A29xBcvaVTSai6MfH.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kMxbTQ9h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2A29xBcvaVTSai6MfH.png" alt="arch linux logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So I‚Äôve been wishing to switch to Linux for about a year and a half now. There was just something intriguing about Linux that made me want to use it.&lt;/p&gt;

&lt;p&gt;I used to use a 2019 Macbook Air (I still do but not very often), but the speed of the thing kills me. Sometimes I have a couple VS Code and browser windows open and it just starts lagging a lot. Not to mention the keyboard, which (due to my fault) ended up requiring a certified Apple Repair Store to fix an arrow key. The reason is not &lt;em&gt;entirely&lt;/em&gt; me being dumb because I noticed that the key was sticky. This article is not going to be about the performance of the Mac but it was one of the reasons I wanted to switch to Linux.&lt;/p&gt;

&lt;p&gt;My first experience with Linux was installing Ubuntu on a Lenovo Ideapad 310 about a year ago. That laptop got very slow due to it‚Äôs drive being a hard drive, not an SSD.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ymAZdwkS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/600/0%2A7byOduTCH4j8rd5F" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ymAZdwkS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/600/0%2A7byOduTCH4j8rd5F" alt="Lenovo Ideapad 310"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OY24fYTC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2ABlx6ItiidZ8jyQoo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OY24fYTC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2ABlx6ItiidZ8jyQoo.png" alt="Ubuntu logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When I first installed it, I encountered an error that basically left me unable to install the operating system. I decided to re-download and re-flash the¬†&lt;code&gt;.iso&lt;/code&gt; onto the USB drive and try installing it again. This time, it actually worked!&lt;/p&gt;

&lt;p&gt;Ubuntu was very fascinating for me and it sparked an intrigue in me for Linux. I then tried multiple distros (all of them being Debian based), and finally just settled on Ubuntu.&lt;/p&gt;

&lt;p&gt;However, I didn‚Äôt really use this laptop much and didn‚Äôt use Linux commonly. I kept using my Macbook for a year or so until the golden opportunity to use Linux arose: building a PC.&lt;/p&gt;

&lt;p&gt;If you are interested, here is the part list (&lt;a href="https://pcpartpicker.com/list/rqZgW3"&gt;here is the link&lt;/a&gt; if you want to modify it):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_3qpoASR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2ATqCSY7VPd4mRTLCcEnueeg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_3qpoASR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2ATqCSY7VPd4mRTLCcEnueeg.png" alt="pcpartpicker part list for pc"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All in all, the entire PC came for about $808 including tax!&lt;/p&gt;

&lt;p&gt;So when the PC came, I assembled it (which took more than seven hours because this was the first time I did it) and went to sleep at 12 AM with the PC 98% complete (I had to change the PCIE slot of the WIFI card).&lt;/p&gt;

&lt;p&gt;In the next day or two, I opened up my Macbook and started searching on how to install Arch Linux. I was really hesitant about which distro of Linux to install.&lt;/p&gt;

&lt;p&gt;If you didn‚Äôt know already, a distro is kind of like a flavor of Linux. Think of it like ice cream. There are different flavors like chocolate, strawberry and vanilla, each having their own pros and cons.&lt;/p&gt;

&lt;p&gt;I had a choice of Debian based distros or Arch based distros. The former being stuff like &lt;a href="https://ubuntu.com/"&gt;Ubuntu&lt;/a&gt;, &lt;a href="https://www.debian.org/"&gt;Debian&lt;/a&gt;, &lt;a href="https://pop.system76.com/"&gt;PopOS&lt;/a&gt;, &lt;a href="https://linuxmint.com/"&gt;Linux Mint&lt;/a&gt; etc. etc. For the latter, I had options like &lt;a href="https://archlinux.org/"&gt;Arch&lt;/a&gt;, &lt;a href="https://manjaro.org/"&gt;Manjaro&lt;/a&gt;, &lt;a href="https://arcolinux.com/"&gt;Arco&lt;/a&gt; and &lt;a href="https://garudalinux.org/"&gt;Garuda&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The main reason I went with plain Arch is because the experience of setting everything up myself was really intriguing. I also thought about package availability. When it comes to installing applications, Linux is different than macOS or Windows. Power users of either two operating systems equally hate their ‚ÄúApp stores‚Äù and normally install programs through the application developer‚Äôs website. On Linux however, these ‚Äúapp stores‚Äù are actually quite good and are basically the de-facto way for users to install programs. Linux distros have something called a package manager which is an interface into these ‚Äúapp stores.‚Äù&lt;/p&gt;

&lt;p&gt;On top of having packages, Arch Linux has something called the AUR, which is a set of programs that were adapted to run on Arch Linux by the Arch Linux community. This was cool because instead of going to the application developer‚Äôs website for programs not in the official Arch package list (which in most cases you would have to install the application manually), I could just install it like a normal package!&lt;/p&gt;

&lt;p&gt;In the Linux community there is a bit of negative stigma surrounding the Arch Linux installation process in the form of the installation difficulty. I admit that if you are not comfortable using the command line/the Bash shell, you should definitely not install Arch Linux and instead go with a GUI option other than Arch like Ubuntu or Manjaro and learn the terminal from there. The Arch Installation process relies heavily on terminal usage and if you don‚Äôt know how to use it, you could seriously mess up your computer‚Äôs existing installation or have to restart the entire installation from Step One.&lt;/p&gt;

&lt;p&gt;Now that I chose Arch to be my distro, I actually had to install it. For this, I used the &lt;a href="https://wiki.archlinux.org/title/Installation_guide"&gt;official Arch wiki page‚Äôs installation guide&lt;/a&gt; and this &lt;a href="https://itsfoss.com/install-arch-linux/"&gt;guide from It‚Äôs FOSS&lt;/a&gt;. I also got guidance from a couple Discord servers I was a part of to see if I was really doing things the right way.&lt;/p&gt;

&lt;p&gt;I didn‚Äôt make a &lt;code&gt;swap&lt;/code&gt; partition as my computer had enough resources for that and I didn‚Äôt make a &lt;code&gt;home&lt;/code&gt; partition as well because creating a user later would account for that.&lt;/p&gt;

&lt;p&gt;Note: for the step that used &lt;code&gt;pacstrap&lt;/code&gt;, I installed &lt;code&gt;network-manager&lt;/code&gt; as well because that would help me do WIFI related stuff post-installation.&lt;/p&gt;

&lt;p&gt;After installing Arch Linux, I simply rebooted the computer, took out the USB drive I had the¬†.iso on, and arrived at a &lt;code&gt;tty&lt;/code&gt; screen with a user and password prompt. For this, I entered the username &lt;code&gt;root&lt;/code&gt; and the password, which I setup when installing Arch Linux.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1JnqhctZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2ABztBnNaCH-zYHFDE" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1JnqhctZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2ABztBnNaCH-zYHFDE" alt="arch linux login screen"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From here, I made my own user with the &lt;a href="https://linuxize.com/post/how-to-create-users-in-linux-using-the-useradd-command/#how-to-add-a-new-user-and-create-home-directory"&gt;useradd&lt;/a&gt; command, which created it‚Äôs own &lt;code&gt;/home/USERNAME&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZvJ_hK7j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2AnEvY1TeFfWhUHjwG.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZvJ_hK7j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2AnEvY1TeFfWhUHjwG.png" alt="dwm demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now I had to get a ‚ÄúGUI‚Äù up and running. I had used KDE and GNOME on my old laptop before but I wanted to try something called a tiling window manager. If you didn‚Äôt know, tiling window managers basically automatically resize windows based on available space, so instead of having a bunch of windows overlapping each other like macOS or Windows, all of them are on the screen and visible to the user. For this, I was going to use &lt;a href="https://dwm.suckless.org/"&gt;a tiling window manager called &lt;code&gt;dwm&lt;/code&gt;&lt;/a&gt; .&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--chB7-PWN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AXuk6sC4OP6zD9sWkl0_bxA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--chB7-PWN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AXuk6sC4OP6zD9sWkl0_bxA.png" alt="dwm logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;dwm&lt;/code&gt; is a bit different than &lt;a href="https://i3wm.org/"&gt;another tiling window manager called i3&lt;/a&gt; because you edit the source code (which is a header file utilized by the C language) directly to tweak and customize it.&lt;/p&gt;

&lt;p&gt;Along with &lt;code&gt;dwm&lt;/code&gt;, I installed &lt;code&gt;dmenu&lt;/code&gt; which basically is like Spotlight except that it only opens applications that are in the &lt;code&gt;PATH&lt;/code&gt; environment variable. The applications themselves are just scripts running, so when I launch an application through &lt;code&gt;dmenu&lt;/code&gt;, it‚Äôs really just executing a script to launch that program. I didn‚Äôt really customize &lt;code&gt;dmenu&lt;/code&gt; except loading in a custom font.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7rzLt4qf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2AuSEjF8-DTK_qrKPU.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7rzLt4qf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2AuSEjF8-DTK_qrKPU.png" alt="suckless terminal demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For my terminal, I decided to use the Suckless Terminal, also known as &lt;code&gt;st&lt;/code&gt;. I mainly chose this because I heard it was nice and I wasn‚Äôt ready to try out stuff like &lt;code&gt;alacritty&lt;/code&gt; or &lt;code&gt;terminator&lt;/code&gt; just yet (those are other terminal emulators by the way).&lt;/p&gt;

&lt;p&gt;Oh yeah I forgot to mention something similar about two of the Suckless projects mentioned (&lt;code&gt;dwm&lt;/code&gt; and &lt;code&gt;st&lt;/code&gt;): they can‚Äôt be installed with a package manager. In essence, because of the concept of editing the source code directly, we have to manually install these tools. You can do that by running &lt;code&gt;sudo make clean install&lt;/code&gt; after tweaking the source code (a file called &lt;code&gt;config.h&lt;/code&gt; mostly). Notice how we couldn‚Äôt use a package manager (by default the package manager on Arch is &lt;code&gt;pacman&lt;/code&gt;) to install this.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: For&lt;/em&gt; &lt;code&gt;dmenu&lt;/code&gt;&lt;em&gt;, you can install it with a package manager&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;To modify &lt;code&gt;st&lt;/code&gt; terminal, you need to install things called patches, which essentially are¬†&lt;code&gt;.diff&lt;/code&gt; files that you need to patch to the source code to add new features. For example, a patch you chose could add scrolling to the &lt;code&gt;st&lt;/code&gt; terminal, and you would have to run a command to merge those changes to the actual source code. &lt;a href="https://www.youtube.com/watch?v=fBrc_xgwQE8"&gt;This video&lt;/a&gt; is an excellent tutorial on patching the terminal.&lt;/p&gt;

&lt;p&gt;For the prompt on my terminal, I decided to use something called Starship Prompt. It is an excellent cross-platform prompt which is really colorful and gives you a lot of data about the current directory you are in, which I find very helpful, especially for &lt;code&gt;git&lt;/code&gt;. It is really fast (it‚Äôs written in Rust, which is a speedy programming language). You can find more about the prompt on &lt;a href="https://starship.rs/"&gt;their website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OOUnUhLA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AedLlBPb5kgVGTKiMOQOdZg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OOUnUhLA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AedLlBPb5kgVGTKiMOQOdZg.png" alt="starship prompt demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To get those special symbols in the prompt, I used the FiraCode Nerd Font, which gives the ability to use these special symbols. You can download it &lt;a href="https://www.nerdfonts.com/font-downloads"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So remember those community package repositories I mentioned earlier? That is called the Arch User Repository, more commonly known as the AUR. To install a package from the AUR manually would consist of cloning repos from the AUR and running &lt;code&gt;makepkg&lt;/code&gt; or whatever, which is highly inconvenient compared to a package manager.&lt;/p&gt;

&lt;p&gt;This is why I installed an AUR helper called &lt;code&gt;paru&lt;/code&gt;. If you don‚Äôt know what an AUR helper is, it basically eases the process of installing packages from the Arch User Repository. First, to get all the tools needed to actually install the tool, I ran &lt;code&gt;sudo pacman -S --needed base-devel&lt;/code&gt; in my terminal so we can use the required command line utilities to install it. To actually install it though, I basically did a &lt;code&gt;git clone [https://aur.archlinux.org/paru.git](https://aur.archlinux.org/paru.git)&lt;/code&gt;. This makes a directory on our machine that contains the &lt;code&gt;git&lt;/code&gt; repository for &lt;code&gt;paru&lt;/code&gt;. I went into the directory of &lt;code&gt;paru&lt;/code&gt; by running &lt;code&gt;cd paru&lt;/code&gt;. Then I ran &lt;code&gt;makepkg -si&lt;/code&gt;, to install &lt;code&gt;paru&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In summary, I ran these commands to install &lt;code&gt;paru&lt;/code&gt; (&lt;a href="https://itsfoss.com/paru-aur-helper/"&gt;this guide&lt;/a&gt; helped me):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo pacman -S --needed base-devel
git clone https://aur.archlinux.org/paru.git
cd parumakepkg -si
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, I could install AUR packages similar to installing them with &lt;code&gt;pacman&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;If you want to find how to use &lt;code&gt;paru&lt;/code&gt; you can check the guide I linked above as it gives you the basic commands you need to use it.&lt;/p&gt;

&lt;p&gt;One of the main packages I installed was VSCode. The package in the AUR was named &lt;code&gt;visual-studio-code-bin&lt;/code&gt; and I installed it by running &lt;code&gt;paru -S visual-studio-code-bin&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Installing AUR packages takes a bit more time than installing packages with &lt;code&gt;pacman&lt;/code&gt; so don‚Äôt fret if it‚Äôs running scripts for a minute or so.&lt;/p&gt;

&lt;p&gt;To set my desktop wallpaper with a tool called &lt;code&gt;nitrogen&lt;/code&gt;. This package is in the base Arch repos so you don‚Äôt have to worry about using &lt;code&gt;paru&lt;/code&gt;. I ran &lt;code&gt;sudo pacman -S nitrogen&lt;/code&gt; in my terminal to install the package.&lt;/p&gt;

&lt;p&gt;To set the wallpaper, I ran the command: &lt;code&gt;nitrogen&lt;/code&gt;. However, there is one more step to get your wallpapers running. &lt;code&gt;nitrogen&lt;/code&gt; only checks for images in the certain directories that you tell it to. By default it‚Äôs set to the &lt;code&gt;Desktop&lt;/code&gt; directory. You can edit these directories manually.&lt;/p&gt;

&lt;p&gt;To do this, press the ‚ÄúPreferences‚Äù button in the bottom right.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1j-Vw9LG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2ABkNG1ZLVBzkhND7V5rStnA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1j-Vw9LG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2ABkNG1ZLVBzkhND7V5rStnA.png" alt="nitrogen preferences button"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then, set the directories with the ‚ÄúAdd‚Äù and ‚ÄúDelete‚Äù button in the directories section in the GUI that pops up.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vyWsQYvk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AhPkzeMOhoaKfgu2r4kY2sw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vyWsQYvk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AhPkzeMOhoaKfgu2r4kY2sw.png" alt="directory list/add screen in nitrogen"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you press the ‚ÄúAdd‚Äù button, a file manager will popup so you can navigate to the directory containing your wallpapers!&lt;/p&gt;

&lt;p&gt;That‚Äôs all well and all, but the wallpaper won‚Äôt stay after you restart the computer or simply end your &lt;code&gt;dwm&lt;/code&gt; session by pressing &lt;code&gt;Alt + Shift + Q&lt;/code&gt;. For this, I needed to run &lt;code&gt;nitrogen --restore&lt;/code&gt;. It‚Äôs not great to run that every time you start your &lt;code&gt;dwm&lt;/code&gt; session, so I had to figure out a way to do it on auto start.&lt;/p&gt;

&lt;p&gt;To run commands on auto start, I installed a patch for &lt;code&gt;dwm&lt;/code&gt; (like the &lt;code&gt;st&lt;/code&gt; terminal) which ran a script called &lt;code&gt;autostart.sh&lt;/code&gt; in the &lt;code&gt;~/.dwm/&lt;/code&gt; directory which ran every time I started &lt;code&gt;dwm&lt;/code&gt;. This enabled me to put &lt;code&gt;nitrogen --restore &amp;amp;&lt;/code&gt; in that &lt;code&gt;autostart.sh&lt;/code&gt; file (If you were wondering what the ampersand [the &lt;code&gt;&amp;amp;&lt;/code&gt;] is doing there, it basically tells your shell to do the task in the background).&lt;/p&gt;

&lt;p&gt;If you have been using &lt;code&gt;dwm&lt;/code&gt; for sometime, you might be wondering why I don‚Äôt use the¬†&lt;code&gt;.xinitrc&lt;/code&gt; file. For those of you who have no clue what I‚Äôm talking about, let me explain. Since I‚Äôm using Arch Linux and I started from scratch, when I boot up my computer, it just plops me in the command line. This is extremely fast and when I want to start up &lt;code&gt;dwm&lt;/code&gt;, I just run &lt;code&gt;startx&lt;/code&gt; in the command line.&lt;/p&gt;

&lt;p&gt;This &lt;code&gt;startx&lt;/code&gt; command already has a file to execute commands when &lt;code&gt;dwm&lt;/code&gt; starts called¬†&lt;code&gt;.xinitrc&lt;/code&gt;. I didn‚Äôt opt to use that just so that if I ever stop using &lt;code&gt;startx&lt;/code&gt; and start using a login screen (more formally known as a display manager), I can still do all the things on autostart without having to patch &lt;code&gt;dwm&lt;/code&gt; with the &lt;code&gt;autostart.sh&lt;/code&gt; thing.&lt;/p&gt;

&lt;p&gt;This whole &lt;code&gt;autostart.sh&lt;/code&gt; thing allowed me to setup update my status bar in &lt;code&gt;dwm&lt;/code&gt; really efficiently. In that &lt;code&gt;dwm&lt;/code&gt; folder, I had another file called &lt;code&gt;changebar.sh&lt;/code&gt; which basically was the script to change the status bar in &lt;code&gt;dwm&lt;/code&gt;. If you didn‚Äôt know what the status bar in &lt;code&gt;dwm&lt;/code&gt; is, it is in the top right.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6j4quDFz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2ADdCd9jVC-gFgSl3T9rAz1A.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6j4quDFz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2ADdCd9jVC-gFgSl3T9rAz1A.png" alt="my customized status bar in dwm"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By default, this is set to something like &lt;code&gt;dwm VERSION_NUMBER&lt;/code&gt;¬†, but I customized it with the &lt;code&gt;changebar.sh&lt;/code&gt; file and a command that was &lt;code&gt;xsetroot -name "whatever you want in the status bar"&lt;/code&gt;. Also, if you were wondering how I customized the color of the top bar and everything else, check out &lt;a href="https://www.youtube.com/watch?v=lC-WzV7rJpQ"&gt;this video&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is where I use &lt;code&gt;changebar.sh&lt;/code&gt;. In my &lt;code&gt;autostart.sh&lt;/code&gt; file, I have this code written out:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="k"&gt;while &lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;  
        /home/shubhampatil/.dwm/changebar.sh  
        &lt;span class="nb"&gt;sleep &lt;/span&gt;5s  
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This basically enters a while loop that goes on forever, activating that &lt;code&gt;changebar.sh&lt;/code&gt; script and sleeps 5 seconds later.&lt;/p&gt;

&lt;p&gt;You might be wondering what is in that &lt;code&gt;changebar.sh&lt;/code&gt; file. Well, here it is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;VOLUME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;amixer sget Master | &lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="s1"&gt;'Front Left:'&lt;/span&gt; | &lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="nb"&gt;sed&lt;/span&gt; &lt;span class="s1"&gt;'s/\[^\\\[\]\*\\\[\\(\[0-9\]\\{1,3\\}%\\).\*\\(on\\|off\\).\*/\\2 \\1/'&lt;/span&gt; | &lt;span class="nb"&gt;sed&lt;/span&gt; &lt;span class="s1"&gt;'s/off/M/'&lt;/span&gt; | &lt;span class="nb"&gt;sed&lt;/span&gt; &lt;span class="s1"&gt;'s/on //'&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;  
&lt;span class="nv"&gt;TIME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;date&lt;/span&gt; &lt;span class="s1"&gt;'+%a %D | Ôôè  %I:%M %p'&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;  
xsetroot &lt;span class="nt"&gt;-name&lt;/span&gt; &lt;span class="s2"&gt;"| üîä &lt;/span&gt;&lt;span class="nv"&gt;$VOLUME&lt;/span&gt;&lt;span class="s2"&gt; | Ôóµ &lt;/span&gt;&lt;span class="nv"&gt;$TIME&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;br&gt;
bash&lt;/p&gt;

&lt;p&gt;This basically gets the current volume and gets the current time and displays it in the status bar.&lt;/p&gt;

&lt;p&gt;Now, let me talk about volume control with &lt;code&gt;dwm&lt;/code&gt;. For this, I had to edit the source code for &lt;code&gt;dwm&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;config.h&lt;/code&gt; file in the source code, I added this at the top of the file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="cp"&gt;#include &amp;lt;X11/XF86keysym.h&amp;gt;
&lt;/span&gt;
&lt;span class="cm"&gt;/* volume keys*/&lt;/span&gt;

&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;upvol&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;"sh"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"-c"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"amixer sset Master unmute; amixer set Master 5%+; /home/shubhampatil/.dwm/changebar.sh"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="nb"&gt;NULL&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;downvol&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;"sh"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"-c"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"amixer sset Master unmute; amixer set Master 5%-; /home/shubhampatil/.dwm/changebar.sh"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="nb"&gt;NULL&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;  

&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;mutevol&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;"sh"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"-c"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"amixer set Master toggle; /home/shubhampatil/.dwm/changebar.sh"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="nb"&gt;NULL&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, I added the lines&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;XF86XK_AudioLowerVolume&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;spawn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{.&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;downvol&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;XF86XK_AudioMute&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;spawn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{.&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mutevol&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;XF86XK_AudioRaiseVolume&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;spawn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{.&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;upvol&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To the &lt;code&gt;keys[]&lt;/code&gt; array in the &lt;code&gt;config.h&lt;/code&gt; file. After that, I just ran &lt;code&gt;sudo make clean install&lt;/code&gt; again in the &lt;code&gt;dwm&lt;/code&gt; source code directory, restarted &lt;code&gt;dwm&lt;/code&gt;, and it worked! Now, whenever I pressed the volume up/down/mute keys on my keyboard, it would change the volume output of the sound.&lt;/p&gt;

&lt;p&gt;One more thing about my computer: time. I found out that the clock on my computer got a minute out of sync with the rest of my devices.&lt;/p&gt;

&lt;p&gt;To combat this, I installed a package called &lt;code&gt;ntp&lt;/code&gt;(Network Time Protocol), which allowed me to sync my clock to servers on the internet that had the correct time.&lt;/p&gt;

&lt;p&gt;This package I installed generated a¬†&lt;code&gt;.conf&lt;/code&gt; file, which allowed me to change the default servers to &lt;code&gt;pool.ntp.org&lt;/code&gt;‚Äòs servers.&lt;/p&gt;

&lt;p&gt;My config file looks like this (located at &lt;code&gt;/etc/ntpd.config&lt;/code&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight conf"&gt;&lt;code&gt;&lt;span class="c"&gt;# Please consider joining the pool:  
#  
# http://www.pool.ntp.org/join.html 
#  
# For additional information see:  
# - https://wiki.archlinux.org/index.php/Network_Time_Protocol_daemon  
# - [http://support.ntp.org/bin/view/Support/GettingStarted](http://support.ntp.org/bin/view/Support/GettingStarted)  
# - the ntp.conf man page
&lt;/span&gt;
&lt;span class="c"&gt;#  NTP pool server setup  
&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;.&lt;span class="n"&gt;pool&lt;/span&gt;.&lt;span class="n"&gt;ntp&lt;/span&gt;.&lt;span class="n"&gt;org&lt;/span&gt;  
&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;.&lt;span class="n"&gt;pool&lt;/span&gt;.&lt;span class="n"&gt;ntp&lt;/span&gt;.&lt;span class="n"&gt;org&lt;/span&gt;  
&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;.&lt;span class="n"&gt;pool&lt;/span&gt;.&lt;span class="n"&gt;ntp&lt;/span&gt;.&lt;span class="n"&gt;org&lt;/span&gt;  
&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;.&lt;span class="n"&gt;pool&lt;/span&gt;.&lt;span class="n"&gt;ntp&lt;/span&gt;.&lt;span class="n"&gt;org&lt;/span&gt;

&lt;span class="c"&gt;# By default, the server allows:  
# - all queries from the local host  
# - only time queries from remote hosts, protected by rate limiting and kod  
&lt;/span&gt;&lt;span class="n"&gt;restrict&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt; &lt;span class="n"&gt;kod&lt;/span&gt; &lt;span class="n"&gt;limited&lt;/span&gt; &lt;span class="n"&gt;nomodify&lt;/span&gt; &lt;span class="n"&gt;nopeer&lt;/span&gt; &lt;span class="n"&gt;noquery&lt;/span&gt; &lt;span class="n"&gt;notrap&lt;/span&gt;  
&lt;span class="n"&gt;restrict&lt;/span&gt; &lt;span class="m"&gt;127&lt;/span&gt;.&lt;span class="m"&gt;0&lt;/span&gt;.&lt;span class="m"&gt;0&lt;/span&gt;.&lt;span class="m"&gt;1&lt;/span&gt;  
&lt;span class="n"&gt;restrict&lt;/span&gt; ::&lt;span class="m"&gt;1&lt;/span&gt;

&lt;span class="c"&gt;# Location of drift file  
&lt;/span&gt;&lt;span class="n"&gt;driftfile&lt;/span&gt; /&lt;span class="n"&gt;var&lt;/span&gt;/&lt;span class="n"&gt;lib&lt;/span&gt;/&lt;span class="n"&gt;ntp&lt;/span&gt;/&lt;span class="n"&gt;ntp&lt;/span&gt;.&lt;span class="n"&gt;drift&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can find more info about this &lt;code&gt;pool.ntp.org&lt;/code&gt; stuff at &lt;a href="https://www.ntppool.org/en/use.html"&gt;https://www.ntppool.org/en/use.html&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I then had to setup my printer. Printer support with Linux is sort of complicated. I had to install the &lt;code&gt;cups&lt;/code&gt; package. Then, I ran &lt;code&gt;sudo systemctl enable cups&lt;/code&gt; and &lt;code&gt;sudo systemctl start cups&lt;/code&gt;. The former made it so that the &lt;code&gt;cups&lt;/code&gt; service would be enabled on startup. The latter basically started it right now.&lt;/p&gt;

&lt;p&gt;Then, I went to &lt;code&gt;localhost:631&lt;/code&gt; in my browser to configure my printer. I went to add my pritner but discovered that the driver for my printer wasn‚Äôt present. To get these drivers, I had to install the &lt;code&gt;hplip&lt;/code&gt; package, since I was using an HP printer. After that, the printing functionality worked properly. To find more about printer setup on Linux, I would recommend you to &lt;a href="https://www.youtube.com/watch?v=En2DJAMpwmY"&gt;watch this video&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Using raw Arch Linux or Gentoo (another Linux distribution) is very different from something like Ubuntu or Manjaro. Not everything is pre-setup like you expect. Even if you install a GUI (called desktop environments) like Gnome or KDE Plasma, you will have to install some packages to get the printer setup correctly, for example. Overall, I‚Äôm glad that I tried Arch Linux, and if you‚Äôre comfortable with the Linux command line, I would suggest it too. Although, if you‚Äôre not comfortable using the command line just yet, I would suggest something like Ubuntu or PopOS!. If you‚Äôre an ‚Äúintermediate‚Äù Linux user, and really want to try out Arch, I would suggest using Garuda Linux or Manjaro Linux. I am by no means an expert at Linux and I do have a lot to learn but I decided to jump in the deep end to challenge myself. In the end, Linux is still Linux so don‚Äôt feel bad about using something like Ubuntu versus raw Arch.&lt;/p&gt;

&lt;p&gt;Another difference I am yet to call out is the nature of Arch Linux‚Äôs updates. Arch is something that has a rolling release cycle. This means all the packages that make up your install are updated on an on-going basis, instead of the operating system itself with all the packages being updated every 6 months (like Ubuntu). The latter method is called a stable release cycle. To find out if you are better suited for rolling release distro or a stable release distro, check out &lt;a href="https://www.youtube.com/watch?v=212yJEH8-iA"&gt;this video&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;By &lt;a href="https://medium.com/@shubhampatilsd"&gt;Shubham Patil&lt;/a&gt; on &lt;a href="https://medium.com/p/f4b0d8237947"&gt;August 15, 2021&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/@shubhampatilsd/using-arch-linux-f4b0d8237947"&gt;Canonical link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Exported from &lt;a href="https://medium.com"&gt;Medium&lt;/a&gt; on August 15, 2021.&lt;/p&gt;

</description>
      <category>linux</category>
      <category>archlinux</category>
      <category>linuxsetup</category>
      <category>ricing</category>
    </item>
    <item>
      <title>The road to MLops - A complete walkthrough of ML systems development lifecycle and need for MLOps</title>
      <author>Emma Donery</author>
      <pubDate>Sun, 15 Aug 2021 18:25:50 +0000</pubDate>
      <link>https://dev.to/emma_donery/the-road-to-mlops-a-complete-walkthrough-of-ml-systems-development-lifecycle-and-need-for-mlops-43gn</link>
      <guid>https://dev.to/emma_donery/the-road-to-mlops-a-complete-walkthrough-of-ml-systems-development-lifecycle-and-need-for-mlops-43gn</guid>
      <description>&lt;h1&gt;
  &lt;a href="#what-is-mlops"&gt;
  &lt;/a&gt;
  WHAT IS MLOPS?
&lt;/h1&gt;

&lt;p&gt;MLOps is a set of practices that combines Machine Learning, DevOps and data engineering. MLOps aims to deploy and maintain ML systems in production reliably and efficiently.&lt;/p&gt;

&lt;p&gt;In other words, It is an engineering discipline that aims to unify ML systems development(dev) and ML systems deployment(ops) to standardize and streamline the continuous delivery of high-performing models in production.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-mlops-why-does-it-matter"&gt;
  &lt;/a&gt;
  Why MLOps? Why Does it Matter?
&lt;/h2&gt;

&lt;p&gt;MLOps is fundamental. Machine learning helps individuals and businesses deploy solutions that unlock previously untapped sources of revenue, save time, and reduce cost by creating more efficient workflows, leveraging data analytics for decision-making, and improving customer experience. &lt;/p&gt;

&lt;p&gt;These goals are hard to accomplish without a solid framework to follow. Automating model development and deployment with MLOps means faster go-to-market times and lower operational costs. It helps managers and developers be more agile and strategic in their decisions.&lt;/p&gt;

&lt;p&gt;MLOps serves as the map to guide individuals, small teams, and even businesses to achieve their goals no matter their constraints, be it sensitive data, fewer resources, small budget, and so on.  &lt;/p&gt;

&lt;p&gt;You decide how big you want your map to be because MLOps are practices that are not written in stone. You can experiment with different settings and only keep what works for you.&lt;/p&gt;

&lt;p&gt;MLOps was born at the intersection of DevOps, Data Engineering, and Machine Learning, and it‚Äôs a similar concept to DevOps, but the execution is different.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rUzc6dGo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.builtin.com/sites/www.builtin.com/files/styles/ckeditor_optimize/public/inline-images/national/3_mlops.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rUzc6dGo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.builtin.com/sites/www.builtin.com/files/styles/ckeditor_optimize/public/inline-images/national/3_mlops.png" alt="alt text for accessibility"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MLOps aims to unify the release cycle for machine learning and software application release.&lt;/li&gt;
&lt;li&gt;MLOps enables automated testing of machine learning artifacts (e.g. data validation, ML model testing, and ML model integration testing)&lt;/li&gt;
&lt;li&gt;MLOps enables the application of agile principles to machine learning projects.&lt;/li&gt;
&lt;li&gt;MLOps enables supporting machine learning models and datasets to build these models as first-class citizens within CI/CD systems.&lt;/li&gt;
&lt;li&gt;MLOps reduces technical debt across machine learning models.&lt;/li&gt;
&lt;li&gt;MLOps must be a language-, framework-, platform-, and infrastructure-agnostic practice. &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-key-phases-of-mlops-are"&gt;
  &lt;/a&gt;
  The key phases of MLOps are:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Data gathering&lt;/li&gt;
&lt;li&gt;Data analysis&lt;/li&gt;
&lt;li&gt;Data transformation/preparation&lt;/li&gt;
&lt;li&gt;Model training &amp;amp; development &lt;/li&gt;
&lt;li&gt;Model validation &lt;/li&gt;
&lt;li&gt;Model serving &lt;/li&gt;
&lt;li&gt;Model monitoring &lt;/li&gt;
&lt;li&gt;Model re-training.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#devops-vs-mlops"&gt;
  &lt;/a&gt;
  DevOps vs MLOps
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wFwnSJK8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/neptune.ai/wp-content/uploads/MLOps-DevOps.png%3Fresize%3D896%252C432%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wFwnSJK8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/neptune.ai/wp-content/uploads/MLOps-DevOps.png%3Fresize%3D896%252C432%26ssl%3D1" alt="alt text for accessibility"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Unlike DevOps, MLOps is much &lt;strong&gt;more experimental in nature&lt;/strong&gt;. Data Scientists and ML/DL engineers have to tweak various features ‚Äì hyperparameters, parameters, and models ‚Äì while also keeping track of and managing the data and the code base for reproducible results. Besides all the efforts and tools, the ML/DL industry still struggles with the reproducibility of experiments. This topic is out of the scope of this article, so for more information check the reproducibility subsection in references at the end.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Hybrid team composition:&lt;/strong&gt; the team needed to build and deploy models in production won‚Äôt be composed of software engineers only. In an ML project, the team usually includes data scientists or ML researchers, who focus on exploratory data analysis, model development, and experimentation. They might not be experienced software engineers who can build production-class services.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Testing:&lt;/strong&gt; testing an ML system involves model validation, model training, and so on ‚Äì in addition to the conventional code tests, such as unit testing and integration testing. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Automated Deployment:&lt;/strong&gt; you can‚Äôt just deploy an offline-trained ML model as a prediction service. You‚Äôll need a multi-step pipeline to automatically retrain and deploy a model. This pipeline adds complexity because you need to automate the steps that data scientists do manually before deployment to train and validate new models.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Production performance degradation of the system&lt;/strong&gt; due to evolving data profiles or simply Training-Serving Skew: ML models in production can have reduced performance not only due to suboptimal coding but also due to constantly evolving data profiles. Models can decay in more ways than conventional software systems, and you need to plan for it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Monitoring:&lt;/strong&gt; models in production need to be monitored. Similarly, the summary statistics of data that built the model need to be monitored so that you can refresh the model when needed. These statistics can and will change over time, you need notifications or a roll-back process when values deviate from your expectations.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;MLOps and DevOps are similar when it comes to continuous integration of source control, unit testing, integration testing, and continuous delivery of the software module or the package. &lt;/p&gt;

&lt;p&gt;However, in ML there are a few notable differences:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Continuous Integration (CI)&lt;/em&gt; is no longer only about testing and validating code and components, but also testing and validating data, data schemas, and models.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Continuous Deployment (CD)&lt;/em&gt; is no longer about a single software package or service, but a system (an ML training pipeline) that should automatically deploy another service (model prediction service) or roll back changes from a model.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Continuous Testing (CT)&lt;/em&gt; is a new property, unique to ML systems, that‚Äôs concerned with automatically retraining and serving the models.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kp-bziT---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/neptune.ai/wp-content/uploads/ML-process.png%3Fresize%3D1024%252C389%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kp-bziT---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/neptune.ai/wp-content/uploads/ML-process.png%3Fresize%3D1024%252C389%26ssl%3D1" alt="alt text for accessibility"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#mlops-best-practices"&gt;
  &lt;/a&gt;
  MLOps best practices
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#team"&gt;
  &lt;/a&gt;
  Team
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Use A Collaborative Development Platform&lt;/li&gt;
&lt;li&gt;Work Against a Shared Backlog&lt;/li&gt;
&lt;li&gt;Communicate, Align, and Collaborate With Others&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#data"&gt;
  &lt;/a&gt;
  Data
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Use Sanity Checks for All External Data Sources&lt;/li&gt;
&lt;li&gt;Track, identify, and account for changes in data sources.&lt;/li&gt;
&lt;li&gt;Write Reusable Scripts for Data Cleaning and Merging&lt;/li&gt;
&lt;li&gt;Combine and modify existing features to create new features in human¬≠-understandable ways&lt;/li&gt;
&lt;li&gt;Ensure Data Labelling is Performed in a Strictly Controlled Process&lt;/li&gt;
&lt;li&gt;Make Data Sets Available on Shared Infrastructure (private or public)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#objective-metrics-amp-kpis"&gt;
  &lt;/a&gt;
  Objective (Metrics &amp;amp; KPIs)
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Don‚Äôt overthink which objective you choose to directly optimize, track multiple metrics at first.&lt;/li&gt;
&lt;li&gt;Choose a simple, observable and attributable metric for your first objective&lt;/li&gt;
&lt;li&gt;Set Governance Objectives&lt;/li&gt;
&lt;li&gt;Enforce Fairness and Privacy&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#model"&gt;
  &lt;/a&gt;
  Model
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Keep the first model simple and get the infrastructure right&lt;/li&gt;
&lt;li&gt;Starting with an interpretable model makes debugging easier.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#training"&gt;
  &lt;/a&gt;
  Training
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Capture the Training Objective in a Metric that is Easy to Measure and Understand&lt;/li&gt;
&lt;li&gt;Actively Remove or Archive Features That are Not Used
Peer Review Training Scripts&lt;/li&gt;
&lt;li&gt;Enable Parallel Training Experiments&lt;/li&gt;
&lt;li&gt;Automate Hyper-Parameter Optimisation&lt;/li&gt;
&lt;li&gt;Continuously Measure Model Quality and Performance&lt;/li&gt;
&lt;li&gt;Use Versioning for Data, Model, Configurations and Training Scripts&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Run Automated Regression Tests&lt;/li&gt;
&lt;li&gt;Use Static Analysis to Check Code Quality&lt;/li&gt;
&lt;li&gt;Use Continuous Integration&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#deployment"&gt;
  &lt;/a&gt;
  Deployment
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Plan to launch and iterate.&lt;/li&gt;
&lt;li&gt;Automate Model Deployment&lt;/li&gt;
&lt;li&gt;Continuously Monitor the Behaviour of Deployed Models&lt;/li&gt;
&lt;li&gt;Enable Automatic Rollbacks for Production Models&lt;/li&gt;
&lt;li&gt;When performance plateaus, look for qualitatively new sources of information to add rather than refining existing signals.&lt;/li&gt;
&lt;li&gt;Enable Shadow Deployment&lt;/li&gt;
&lt;li&gt;Keep ensembles simple&lt;/li&gt;
&lt;li&gt;Log Production Predictions with the Model‚Äôs Version, Code Version and Input Data&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#how-to-implement-mlops"&gt;
  &lt;/a&gt;
  How to implement MLOps
&lt;/h1&gt;

&lt;p&gt;There are 3 ways you can go about implementing MLOps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MLOps level 0 (Manual process)&lt;/li&gt;
&lt;li&gt;MLOps level 1 (ML pipeline automation)&lt;/li&gt;
&lt;li&gt;MLOps level 2 (CI/CD pipeline automation)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#mlops-level-0"&gt;
  &lt;/a&gt;
  MLOps level 0
&lt;/h2&gt;

&lt;p&gt;This is typical for companies that are just starting out with ML. An entirely manual ML workflow and the data-scientist-driven process might be enough if your models are rarely changed or trained.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qoj07fo0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cloud.google.com/architecture/images/mlops-continuous-delivery-and-automation-pipelines-in-machine-learning-2-manual-ml.svg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qoj07fo0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cloud.google.com/architecture/images/mlops-continuous-delivery-and-automation-pipelines-in-machine-learning-2-manual-ml.svg" alt="alt text for accessibility"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Characteristics&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Manual, script-driven, and interactive process:&lt;/strong&gt; every step is manual, including data analysis, data preparation, model training, and validation. It requires manual execution of each step and manual transition from one step to another.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Disconnect between ML and operations:&lt;/strong&gt; the process separates data scientists who create the model, and engineers who serve the model as a prediction service. The data scientists hand over a trained model as an artifact for the engineering team to deploy on their API infrastructure.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Infrequent release iterations:&lt;/strong&gt; the assumption is that your data science team manages a few models that don‚Äôt change frequently‚Äîeither changing model implementation or retraining the model with new data. A new model version is deployed only a couple of times per year.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;No Continuous Integration (CI):&lt;/strong&gt; because few implementation changes are assumed, you ignore CI. Usually, testing the code is part of the notebooks or script execution.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;No Continuous Deployment (CD):&lt;/strong&gt; because there aren‚Äôt frequent model version deployments, CD isn‚Äôt considered.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Deployment refers to the prediction service&lt;/strong&gt; (i.e. a microservice with REST API)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Lack of active performance monitoring:&lt;/strong&gt; the process doesn‚Äôt track or log model predictions and actions.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The engineering team might have their own complex setup for API configuration, testing, and deployment, including security, regression, and load + canary testing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Challange&lt;/strong&gt;&lt;br&gt;
In practice, models often break when they‚Äôre deployed in the real world. Models fail to adapt to changes in the dynamics of the environment or changes in the data that describes the environment.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to address the challenge&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Actively monitor the quality of your model in production: Monitoring lets you detect performance degradation and model staleness. It acts as a cue to a new experimentation iteration and (manual) retraining of the model on new data.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Frequently retrain your production models: To capture the evolving and emerging patterns, you need to retrain your model with the most recent data. For example, if your app recommends fashion products using ML, its recommendations should adapt to the latest trends and products.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Continuously experiment with new implementations to produce the model: To harness the latest ideas and advances in technology, you need to try out new implementations such as feature engineering, model architecture, and hyperparameters. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;NB:&lt;/strong&gt; it‚Äôs good to use MLOps practices for CI/CD and CT. By deploying an ML training pipeline, you can enable CT, and you can set up a CI/CD system to rapidly test, build, and deploy new implementations of the ML pipeline&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mlops-level-1"&gt;
  &lt;/a&gt;
  MLOps level 1
&lt;/h2&gt;

&lt;p&gt;The goal of MLOps level 1 is to perform continuous training (CT) of the model by automating the ML pipeline. This way, you achieve continuous delivery of model prediction service. &lt;/p&gt;

&lt;p&gt;This scenario may be helpful for solutions that operate in a constantly changing environment and need to proactively address shifts in customer behavior, price rates, and other indicators.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qjE3el3i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cloud.google.com/architecture/images/mlops-continuous-delivery-and-automation-pipelines-in-machine-learning-3-ml-automation-ct.svg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qjE3el3i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cloud.google.com/architecture/images/mlops-continuous-delivery-and-automation-pipelines-in-machine-learning-3-ml-automation-ct.svg" alt="alt text for accessibility"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Characteristics&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Rapid experiment:&lt;/strong&gt; ML experiment steps are orchestrated and done automatically. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;CT of the model in production:&lt;/strong&gt; the model is automatically trained in production, using fresh data based on live pipeline triggers.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Experimental-operational symmetry:&lt;/strong&gt; the pipeline implementation that‚Äôs used in the development or experiment environment is used in the preproduction and production environment, which is a key aspect of MLOps practice for unifying DevOps.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Modularized code for components and pipelines:&lt;/strong&gt; to construct ML pipelines, components need to be reusable, composable, and potentially shareable across ML pipelines (i.e. using containers).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Continuous delivery of models:&lt;/strong&gt; the model deployment step, which serves the trained and validated model as a prediction service for online predictions, is automated.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Pipeline deployment:&lt;/strong&gt; in level 0, you deploy a trained model as a prediction service to production. For level 1, you deploy a whole training pipeline, which automatically and recurrently runs to serve the trained model as the prediction service.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Additional components&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Data and model validation:&lt;/strong&gt; the pipeline expects new, live data to produce a new model version that‚Äôs trained on the new data. Therefore, automated data validation and model validation steps are required in the production pipeline.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Feature store:&lt;/strong&gt; a feature store is a centralized repository where you standardize the definition, storage, and access of features for training and serving.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Metadata management:&lt;/strong&gt; information about each execution of the ML pipeline is recorded in order to help with data and artifacts lineage, reproducibility, and comparisons. It also helps you debug errors and anomalies&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;ML pipeline triggers:&lt;/strong&gt; you can automate ML production pipelines to retrain models with new data, depending on your use case:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;On-demand&lt;/li&gt;
&lt;li&gt;On a schedule&lt;/li&gt;
&lt;li&gt;On availability of new training data&lt;/li&gt;
&lt;li&gt;On model performance degradation&lt;/li&gt;
&lt;li&gt;On significant changes in the data distribution (evolving data profiles).&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Challenges&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;This setup is suitable when you deploy new models based on new data, rather than based on new ML ideas.&lt;/p&gt;

&lt;p&gt;However, you need to try new ML ideas and rapidly deploy new implementations of the ML components. If you manage many ML pipelines in production, you need a CI/CD setup to automate the build, test, and deployment of ML pipelines.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mlops-level-2"&gt;
  &lt;/a&gt;
  MLOps level 2
&lt;/h2&gt;

&lt;p&gt;For a rapid and reliable update of pipelines in production, you need a robust automated CI/CD system. With this automated CI/CD system, your data scientists rapidly explore new ideas around feature engineering, model architecture, and hyperparameters. &lt;/p&gt;

&lt;p&gt;This level fits tech-driven companies that have to retrain their models daily, if not hourly, update them in minutes, and redeploy on thousands of servers simultaneously. Without an end-to-end MLOps cycle, such organizations just won‚Äôt survive.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u5JjRAF4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cloud.google.com/architecture/images/mlops-continuous-delivery-and-automation-pipelines-in-machine-learning-4-ml-automation-ci-cd.svg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u5JjRAF4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cloud.google.com/architecture/images/mlops-continuous-delivery-and-automation-pipelines-in-machine-learning-4-ml-automation-ci-cd.svg" alt="alt text for accessibility"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This MLOps setup includes the following components:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Source control&lt;/li&gt;
&lt;li&gt;Test and build services&lt;/li&gt;
&lt;li&gt;Deployment services&lt;/li&gt;
&lt;li&gt;Model registry&lt;/li&gt;
&lt;li&gt;Feature store&lt;/li&gt;
&lt;li&gt;ML metadata store&lt;/li&gt;
&lt;li&gt;ML pipeline orchestrator.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Characteristics&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Development and experimentation:&lt;/em&gt; you iteratively try out new ML algorithms and new modeling where the experiment steps are orchestrated. The output of this stage is the source code of the ML pipeline steps, which are then pushed to a source repository.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Pipeline continuous integration:&lt;/strong&gt; you build source code and run various tests. The outputs of this stage are pipeline components (packages, executables, and artifacts) to be deployed in a later stage.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Pipeline continuous delivery:&lt;/strong&gt; you deploy the artifacts produced by the CI stage to the target environment. The output of this stage is a deployed pipeline with the new implementation of the model.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Automated triggering:&lt;/strong&gt; the pipeline is automatically executed in production based on a schedule or in response to a trigger. The output of this stage is a newly trained model that is pushed to the model registry.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Model continuous delivery:&lt;/strong&gt; you serve the trained model as a prediction service for the predictions. The output of this stage is a deployed model prediction service.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Monitoring:&lt;/strong&gt; you collect statistics on model performance based on live data. The output of this stage is a trigger to execute the pipeline or to execute a new experiment cycle.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;NB:&lt;/strong&gt; The data analysis step is still a manual process for data scientists before the pipeline starts a new iteration of the experiment. The model analysis step is also a manual process.&lt;/p&gt;

</description>
      <category>machinelearning</category>
      <category>artificialintelligence</category>
      <category>python</category>
      <category>datascience</category>
    </item>
    <item>
      <title>Tips for CKAD Exam</title>
      <author>Aditya Kanekar</author>
      <pubDate>Sun, 15 Aug 2021 18:22:27 +0000</pubDate>
      <link>https://dev.to/adityakanekar/tips-for-ckad-exam-58gn</link>
      <guid>https://dev.to/adityakanekar/tips-for-ckad-exam-58gn</guid>
      <description>&lt;p&gt;In the last post I talked about &lt;a href="https://dev.to/adityakanekar/how-to-prepare-for-ckad-exam-3a85"&gt;How to prepare for CKAD exam&lt;/a&gt;. In this post we will talk about tips and tricks for passing the CKAD exam.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup-your-kubernetes-environment"&gt;
  &lt;/a&gt;
  Setup your Kubernetes environment
&lt;/h2&gt;

&lt;p&gt;Before starting the exam, spend few mins to setup the environment which will help you save time later. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setup-autocompletion"&gt;
  &lt;/a&gt;
  Setup autocompletion
&lt;/h3&gt;

&lt;p&gt;Ref - &lt;a href="https://kubernetes.io/docs/reference/kubectl/cheatsheet/"&gt;https://kubernetes.io/docs/reference/kubectl/cheatsheet/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Run following statements on the shell to setup autocompletion for kubectl commands,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;source &amp;lt;(kubectl completion bash) 

# Only if you want to add this to your bashrc profile
echo "source &amp;lt;(kubectl completion bash)" &amp;gt;&amp;gt; ~/.bashrc

alias k=kubectl
complete -F __start_kubectl k
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you can execute commands on shell using alias &lt;strong&gt;k&lt;/strong&gt; instead of &lt;strong&gt;kubectl&lt;/strong&gt; e.g.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;k get pods
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also you can now press tab after writing first 2-3 letters of your sub commands to complete the command. This will save you sometime in the exam, remember the time is limited and saving time typing each command will add up to a significant saving in time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setup-alias-for-frequently-used-commands"&gt;
  &lt;/a&gt;
  Setup alias for frequently used commands
&lt;/h3&gt;

&lt;p&gt;Setup alias or environment variables for frequently used commands, I personally used following alias's and environment variables.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;alias kg='k get po -o wide --show-labels'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Environment variables&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dr='--dry-run=client -o yaml'
fd='--force --grace-period=0'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first command can be used with &lt;strong&gt;k run&lt;/strong&gt; command to generate yaml definition like,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;k run nginx --image=nginx $dr &amp;gt; nginx.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The second command can be used with &lt;strong&gt;k delete po&lt;/strong&gt; to delete pod's quickly. As part of the exams, there will be lot of questions which will require to create/delete pods. To delete pod quickly you can use the second environment variable like,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;k delete po nginx $fd 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#use-imperative-commands"&gt;
  &lt;/a&gt;
  Use imperative commands
&lt;/h2&gt;

&lt;p&gt;It's difficult to create the YAML definition files required for deploying resources like PODs, Deployments, ReplicaSets etc. by creating YAML definition files manually. Copying the files manually from the Kubernetes documentation is one way, but its time consuming and exam time is limited. &lt;/p&gt;

&lt;p&gt;There is a better way for creating these complex YAML definition files using kubectl imperative commands. I am listing down few commands for creating resources like POD, Deployments, Service etc.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-pod"&gt;
  &lt;/a&gt;
  Create POD
&lt;/h3&gt;

&lt;p&gt;Ref - &lt;a href="https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#run"&gt;https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#run&lt;/a&gt;&lt;br&gt;
Use the below command to generate the Pod definition file,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;k run &amp;lt;pod-name&amp;gt; --image=&amp;lt;image-name&amp;gt; --dry-run=client -o yaml &amp;gt; &amp;lt;file-name&amp;gt;.yaml

#or if you setup the environment variable simply run

k run &amp;lt;pod-name&amp;gt; --image=&amp;lt;image-name&amp;gt; $dr &amp;gt; &amp;lt;file-name&amp;gt;.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Following command demonstrates how you can use different option to quickly create a Pod or YAML definition file without creating the YAML file at all,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;k run nginx --image=nginx --labels tier=webserver --env="key=value" --port=8080 --requests="cpu=200m,memory=256Mi" --limits="cpu=250m,memory=512Mi" --command -- echo "test" 

# If you want to save the definition to a file then use
k run nginx --image=nginx --dry-run=client -o yaml --labels tier=webserver --env="key=value" --port=8080 --requests="cpu=200m,memory=256Mi" --limits="cpu=250m,memory=512Mi" --command -- echo "test" &amp;gt; nginx.yaml

k apply -f nginx.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make sure to use '--dry-run=client -o yaml' before command, also you can use the environment variable $dr with this command. Also if you want to expose the pod as a service you can suffix &lt;strong&gt;--expose&lt;/strong&gt; to expose the Pod as a service.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-deployment"&gt;
  &lt;/a&gt;
  Create Deployment
&lt;/h3&gt;

&lt;p&gt;To create deployment definition or deployment run command below,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;k create deploy &amp;lt;deployment-name&amp;gt; --image=&amp;lt;image&amp;gt; --replicas=4  $dr &amp;gt; &amp;lt;filename&amp;gt;.yaml

# Nginx deployment sample
k create deploy nginx --image=nginx --replicas=4 $dr &amp;gt; nginx.yaml

k apply -f nginx.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#exposing-service"&gt;
  &lt;/a&gt;
  Exposing Service
&lt;/h3&gt;

&lt;p&gt;To expose the deployment as a service run below command,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;k expose deployment nginx --image=nginx --replicas=4 --port=8080 --target-port=8080 --name=nginx-service --type=ClusterIP $dr &amp;gt; service.yaml

# for pod
k expose pod nginx --image=nginx --replicas=4 --port=8080 --target-port=8080 --name=nginx-service --type=ClusterIP $dr &amp;gt; service.yaml

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To create a NodePort service however you will have to run the above command and add nodePort in the YAML file. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#small-but-significant-things"&gt;
  &lt;/a&gt;
  Small but significant things
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#testing-your-deployments"&gt;
  &lt;/a&gt;
  Testing your deployments
&lt;/h3&gt;

&lt;p&gt;Always make sure to test the deployments, to be sure to not miss on any requirements. To test the deployments you can run temporary pods by running below command,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;k run temp --image=nginx:alpine --restart=Never --rm -i -- curl -m 5 nginx-service:8080

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the service is in a different namespace you can specify namespace like,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;k run temp --image=nginx:alpine --restart=Never --rm -i -- curl -m 5 nginx-service:8080 -n 
&amp;lt;namespace&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or specify the name as . like,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;k run temp --image=nginx:alpine --restart=Never --rm -i -- curl -m 5 nginx-service.&amp;lt;namespace&amp;gt;:8080
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#get-cpumemory-usage-for-nodepod"&gt;
  &lt;/a&gt;
  Get CPU/Memory usage for node/pod
&lt;/h3&gt;

&lt;p&gt;To get the CPU/Memory usage by node/pod run,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;k top node

#for pods run
k top pod
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#using-init-containers"&gt;
  &lt;/a&gt;
  Using Init Containers
&lt;/h3&gt;

&lt;p&gt;Init containers run un before the app containers are started. You can learn more about Init Containers &lt;a href="https://kubernetes.io/docs/concepts/workloads/pods/init-containers/"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#multicontainer-pod-or-sidecar"&gt;
  &lt;/a&gt;
  Multi-Container Pod or Sidecar
&lt;/h3&gt;

&lt;p&gt;Multi-container POD is simply a mode with more than one containers. Following YAML shows example of a multi-container POD also called as Sidecar,&lt;br&gt;
Ref - &lt;a href="https://kubernetes.io/docs/tasks/access-application-cluster/communicate-containers-same-pod-shared-volume/"&gt;https://kubernetes.io/docs/tasks/access-application-cluster/communicate-containers-same-pod-shared-volume/&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;apiVersion: v1
kind: Pod
metadata:
  name: two-containers
spec:

  restartPolicy: Never

  volumes:
  - name: shared-data
    emptyDir: {}

  containers:

  - name: nginx-container
    image: nginx
    volumeMounts:
    - name: shared-data
      mountPath: /usr/share/nginx/html

  - name: debian-container
    image: debian
    volumeMounts:
    - name: shared-data
      mountPath: /pod-data
    command: ["/bin/sh"]
    args: ["-c", "echo Hello from the debian container &amp;gt; /pod-data/index.html"]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#reading-logs-from-pod"&gt;
  &lt;/a&gt;
  Reading logs from Pod
&lt;/h2&gt;

&lt;p&gt;To read logs from POD run,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;k logs &amp;lt;pod_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To see running logs run,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;k logs -f &amp;lt;pod_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To read logs from multi-container Pod,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;k logs -f &amp;lt;pod_name&amp;gt; -c &amp;lt;container_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#making-changes-to-the-existing-deployments"&gt;
  &lt;/a&gt;
  Making changes to the existing deployments
&lt;/h2&gt;

&lt;p&gt;You can make changes to the existing deployments by simply editing them like,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;k edit pod &amp;lt;pod_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will open the Pod definition (YAML) in Vim editor. Some changes can be done without recreating the pod but changes like changing the image name for example, requires you to delete and recreate the Pod. The trick to make such changes are to edit the Pod and try to save the changes, this will prompt you to create a new temporary file, just hit ':wq' to save the changes to the file. You can then delete the old pod and use this temporary file to apply the changes. The trick here is to save as much time as possible to cover all the questions.&lt;/p&gt;

&lt;p&gt;So thats it for this post, I will keep updating this post with more information. Till then, happy practicing!&lt;/p&gt;

</description>
      <category>ckad</category>
      <category>kubernetes</category>
    </item>
  </channel>
</rss>
