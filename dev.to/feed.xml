<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>I made a VS Code theme!</title>
      <author>Virej Dasani</author>
      <pubDate>Thu, 15 Apr 2021 08:32:04 +0000</pubDate>
      <link>https://dev.to/virejdasani/i-made-a-vs-code-theme-1d5c</link>
      <guid>https://dev.to/virejdasani/i-made-a-vs-code-theme-1d5c</guid>
      <description>&lt;h3&gt;
  &lt;a href="#i-always-wanted-to-have-my-own-theme-for-my-favorite-code-editor-visual-studio-code-so-i-made-one"&gt;
  &lt;/a&gt;
  I always wanted to have my own theme for my favorite code editor, Visual Studio Code, so I made one!
&lt;/h3&gt;

&lt;h1&gt;
  &lt;a href="#meet-hydroxy"&gt;
  &lt;/a&gt;
  Meet &lt;a href="https://marketplace.visualstudio.com/items?itemName=VirejDasani.hydroxy"&gt;Hydroxy&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5iYXT11v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yk5jywjuh85wqe3ypcr0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5iYXT11v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yk5jywjuh85wqe3ypcr0.png" alt="Hydroxy Screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Hydroxy Original (above)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VZLNxkBp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/adkhm3rov2qdxdmxb35p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VZLNxkBp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/adkhm3rov2qdxdmxb35p.png" alt="Hydroxy Screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Hydroxy Alt Colors (above)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#-hydroxy-is-available-to-download-on-the-visual-studio-marketplace-or-directly-from-the-extensions-tab-inside-vs-code"&gt;
  &lt;/a&gt;
  - Hydroxy is available to download on the &lt;a href="https://marketplace.visualstudio.com/items?itemName=VirejDasani.hydroxy"&gt;Visual Studio marketplace&lt;/a&gt; or directly from the extensions tab inside VS Code.
&lt;/h3&gt;

&lt;p&gt;You can also check out &lt;a href="https://github.com/virejdasani/HydroxyTheme"&gt;Hydroxy on GitHub&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#heres-how-i-made-it"&gt;
  &lt;/a&gt;
  Here's how I made it
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;I found &lt;a href="https://www.youtube.com/watch?v=QCqWzb-9Sy8"&gt;this&lt;/a&gt; YouTube video. It pretty much shows you step by step how you can make your own VS Code theme!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A rating on the &lt;a href="https://marketplace.visualstudio.com/items?itemName=VirejDasani.hydroxy"&gt;Visual Studio marketplace&lt;/a&gt; and any feedback is highly appreciated!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Check out some of my other projects and follow my socials from &lt;a href="https://virejdasani.github.io/virej/"&gt;my website&lt;/a&gt;!&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>vscode</category>
      <category>javascript</category>
      <category>hydroxy</category>
      <category>html</category>
    </item>
    <item>
      <title>SOA vs Microservices</title>
      <author>Priyanshi Sharma</author>
      <pubDate>Thu, 15 Apr 2021 08:20:36 +0000</pubDate>
      <link>https://dev.to/priyanshi_sharma/soa-vs-microservices-59m4</link>
      <guid>https://dev.to/priyanshi_sharma/soa-vs-microservices-59m4</guid>
      <description>&lt;p&gt;&lt;a href="https://www.decipherzone.com/blog-detail/soa-vs-microservices"&gt;SOA (Service oriented architecture) and Microservices&lt;/a&gt; are two different architectures for web application development. Service Oriented architecture focuses on reusing services and components throughout the web application to reduce the amount of effort to write code by reducing redundancy. The services are code and data integrations to build and execute a functionality; for example- syncing an email, validating a logged-in user with cookies, sending notifications. Whereas on the contrary microservices architecture focuses on high reliability and availability of the application even if redundancy in data resources and code has to be adapted. Every functionality in the web application is developed as a service that gets containerized and hosted on a separate server instance. Such an approach enhances the agility of web applications and it keeps on working even if some of the services fail.&lt;/p&gt;

&lt;p&gt;In &lt;a href="https://www.decipherzone.com/blog-detail/service-oriented-architecture"&gt;SOA&lt;/a&gt; the whole backend system application is divided into three parts i.e. controller, services and business logic. The whole backend system is hosted on a single server instance and the services in the backend system can communicate with each other directly, however to the external world (frontend and third-party apps) these services are made available via API calls. Whereas in microservices architecture these services are developed and deployed as separate applications on their own server instances. The communication between services is also done via APIs in a microservices architecture.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when-to-use-soaservice-oriented-architecture"&gt;
  &lt;/a&gt;
  &lt;strong&gt;When to use SOA(Service Oriented Architecture)?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Service oriented architecture should be used whenever you are building a web application with the following aspirations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; Whose users can bear the downtime?&lt;/li&gt;
&lt;li&gt; When a web application is required in comparatively less budget than highly resilient web apps. &lt;/li&gt;
&lt;li&gt; When the business owner wants to save server and device maintenance cost by migrating every enterprise application on the cloud. &lt;/li&gt;
&lt;li&gt; A large web application needs to be developed in a shorter time frame. &lt;/li&gt;
&lt;li&gt; When Single points of failure are tolerable. &lt;/li&gt;
&lt;li&gt; When Data redundancy is tolerable. &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#advantages-and-benefits-of-soa-architecture"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;a href="https://www.decipherzone.com/blog-detail/service-oriented-architecture"&gt;Advantages and Benefits of SOA architecture&lt;/a&gt;&lt;/strong&gt;
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt; Since SOA focuses on reusing services throughout the web application so the speed of development is faster. &lt;/li&gt;
&lt;li&gt; Faster development speed consequences in less cost of web application development. &lt;/li&gt;
&lt;li&gt; The code written in SOA is easily readable and manageable. &lt;/li&gt;
&lt;li&gt; The deployment is easier in SOA because web applications are deployed only on a single server instance. &lt;/li&gt;
&lt;li&gt; The cost of servers to run web applications developed in SOA is very less. &lt;/li&gt;
&lt;li&gt; Businesses don’t need to provide support for multiple versions of an application because the rollout of new applications is done on a production server instance so it becomes available to everyone at the same time. &lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#disadvantages-of-service-oriented-architecture"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Disadvantages of Service Oriented Architecture&lt;/strong&gt;
&lt;/h2&gt;

&lt;ol&gt; 
&lt;li&gt; The extreme reusability of data and services results in extreme dependability which often becomes a single point of failure for the whole web application.&lt;/li&gt;

&lt;li&gt; A Large server instance is required to host the web application which imposes hardware limitations such as data bus and network communication bandwidth. &lt;/li&gt;

&lt;li&gt; The deployment of such bulky web applications built over SOA takes a lot of time to deploy and stabilize the release. It’s the main reason why the deployment of such web applications is scheduled on weekends. &lt;/li&gt;

&lt;li&gt; The web application development in SOA becomes dependent on a single programming language or a framework. It often happens in the development process that an open-source functionality or a better implementation is available in another programming language but the development teams cannot consume it within their application. In such scenarios, the development teams also have to develop that functionality which consequently increases the development cost and time. &lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#why-microservices-architecture"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;a href="https://www.decipherzone.com/blog-detail/why-microservices-architecture"&gt;Why microservices architecture?&lt;/a&gt;&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;Microservices architecture works on the principle to decentralize everything within the web application. Microservices architecture offers high resilience and availability by adapting to the redundancy of server instances and data duplication. This redundancy and duplication reduce the cost efficiency of the web application development and deployment process. Since services are deployed as separate applications on their own server instances with backup containers ready to run in case there is a spike in service call requests, the failure threshold gets pushed up. The high availability of hardware resources enables applications to offer high resilience. The workload on applications being distributed over independent services enables high availability because the web application will not fail even if some of the services stop working. The cross-region replication protects the data from hazards and offers low latency.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when-to-use-microservices-architecture"&gt;
  &lt;/a&gt;
  &lt;strong&gt;When to use microservices architecture?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Microservices architecture should be used whenever you are building a web application with the following aspirations:&lt;/p&gt;

&lt;ul&gt; 

&lt;li&gt; When zero downtime is desirable.  &lt;/li&gt;
&lt;li&gt; When web application development and deployment cost is less of a concern than high resilience and availability.  &lt;/li&gt;
&lt;li&gt; When single points of failure aren’t tolerable.  &lt;/li&gt;
&lt;li&gt; When you have ample time to develop a web application.  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#benefits-of-microservices-architecture"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;a href="https://www.decipherzone.com/blog-detail/benefits-microservices-architecture"&gt;Benefits of Microservices Architecture&lt;/a&gt;&lt;/strong&gt;
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt; Microservices architecture offers high availability, reliability, resilience and low latency(when application requests are redirected to the closest deployment server). &lt;/li&gt; 

&lt;li&gt; Applications are agile, nimble and easy to scale up. &lt;/li&gt;

&lt;li&gt; The web applications become programming language and framework independent as each and every service can be developed independently. &lt;/li&gt;

&lt;li&gt; The deployment process is smoother as it is done service by service so there is usually no web application downtime. &lt;/li&gt;

&lt;li&gt; The selection of server instances and cloud hosting plans is correlated to the use case and usage frequency of service hence, the dependability on a large server instance is eliminated. &lt;/li&gt;

&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#disadvantages-of-microservices-architecture"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;a href="https://www.decipherzone.com/blog-detail/what-are-microservices"&gt;Disadvantages of microservices architecture&lt;/a&gt;&lt;/strong&gt;
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt; The development process is extremely time-consuming and tedious due to the complex structure and deployment is also of the same nature because new feature deployments have to be done service by service. &lt;/li&gt;

&lt;li&gt; Additional infrastructure to observe, monitor and secure the service deployments is required. &lt;/li&gt;

&lt;li&gt; The development and deployment are comparatively very high than the web applications developed over SOA. &lt;/li&gt;

&lt;li&gt; You have to hire developers with a comparatively bigger skillset. &lt;/li&gt;

&lt;/ol&gt;

&lt;p&gt;Source: &lt;a href="https://www.decipherzone.com/blog"&gt;Decipher&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>react</category>
      <category>javascript</category>
      <category>node</category>
    </item>
    <item>
      <title>$200 of free AWS credits up for grabs 👀</title>
      <author>lee</author>
      <pubDate>Thu, 15 Apr 2021 08:19:26 +0000</pubDate>
      <link>https://dev.to/leewynne/200-of-free-aws-credits-up-for-grabs-4pj7</link>
      <guid>https://dev.to/leewynne/200-of-free-aws-credits-up-for-grabs-4pj7</guid>
      <description>&lt;p&gt;Hey Dev community, we are giving away $200 of free AWS credits over at &lt;a href="https://www.theelastic.guru/teamelasticguru/200-of-free-aws-credits-up-for-grabs-5hka"&gt;The Elastic Guru&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We are an up and coming AWS community supported and powered by &lt;a href="https://www.forem.com/discover"&gt;Forem&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here is Karissa from AWS with a tweet about it:&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nXTm5XQa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/Ey93bB0VoAAglTp.png" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--OUO2LW3n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1347321906198843392/_sNDLCJY_normal.jpg" alt="Karissa Wood profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Karissa Wood
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @karissa_wood_
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      💰Want to receive $200 in AWS credits? All you need to do is introduce yourself in the &lt;a href="https://twitter.com/theelasticguru"&gt;&lt;/a&gt;&lt;a href="https://twitter.com/theelasticguru"&gt;@theelasticguru&lt;/a&gt; welcome thread and include the text &lt;a href="https://twitter.com/hashtag/freeAWScredits"&gt;&lt;/a&gt;&lt;a href="https://twitter.com/hashtag/freeAWScredits"&gt;#freeAWScredits&lt;/a&gt;. &lt;br&gt;&lt;br&gt;👉OR share this post on Twitter with the hashtag &lt;a href="https://twitter.com/hashtag/freeAWScredits"&gt;&lt;/a&gt;&lt;a href="https://twitter.com/hashtag/freeAWScredits"&gt;#freeAWScredits&lt;/a&gt; and tag &lt;a href="https://twitter.com/theelasticguru"&gt;&lt;/a&gt;&lt;a href="https://twitter.com/theelasticguru"&gt;@theelasticguru&lt;/a&gt;. 🥳&lt;br&gt;&lt;br&gt;&lt;a href="https://twitter.com/hashtag/awscommunity"&gt;#awscommunity&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/awsusergroups"&gt;#awsusergroups&lt;/a&gt; &lt;a href="https://t.co/DwkDBKu0cp"&gt;twitter.com/theelasticguru…&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      22:05 PM - 14 Apr 2021
    &lt;/div&gt;

      &lt;div class="ltag__twitter-tweet__quote"&gt;
        &lt;div class="ltag__twitter-tweet__quote__header"&gt;
          &lt;span class="ltag__twitter-tweet__quote__header__name"&gt;
            The Elastic Guru
          &lt;/span&gt;
          @theelasticguru
        &lt;/div&gt;
        $200 of free AWS credits up for grabs! 👀 #theElasticGuru #awscommunity #awsheroes #awscloud #cloudcomputing #awstraining #awseducate #Kubernetes  https://t.co/s1lcPmRXfC
      &lt;/div&gt;

    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1382454923661516800" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1382454923661516800" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1382454923661516800" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Hope to see you there. Any social sharing of our giveaway would be much appreciated 😇&lt;/p&gt;

</description>
      <category>aws</category>
      <category>awsheroes</category>
    </item>
    <item>
      <title>Solution: Fibonacci Number</title>
      <author>seanpgallivan</author>
      <pubDate>Thu, 15 Apr 2021 08:13:58 +0000</pubDate>
      <link>https://dev.to/seanpgallivan/solution-fibonacci-number-32a</link>
      <guid>https://dev.to/seanpgallivan/solution-fibonacci-number-32a</guid>
      <description>&lt;p&gt;&lt;em&gt;This is part of a series of Leetcode solution explanations (&lt;a href="https://dev.to/seanpgallivan/leetcode-solutions-index-57fl"&gt;index&lt;/a&gt;). If you liked this solution or found it useful,&lt;/em&gt; &lt;strong&gt;&lt;em&gt;please like&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;this post and/or&lt;/em&gt; &lt;strong&gt;&lt;em&gt;upvote&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;&lt;a href="https://leetcode.com/problems/fibonacci-number/discuss/1159381"&gt;my solution post on Leetcode's forums&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#leetcode-problem-509-easy-fibonacci-number"&gt;
  &lt;/a&gt;
  &lt;a href="https://leetcode.com/problems/fibonacci-number/"&gt;Leetcode Problem #509 (&lt;em&gt;Easy&lt;/em&gt;): Fibonacci Number&lt;/a&gt;
&lt;/h4&gt;




&lt;h4&gt;
  &lt;a href="#description"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Description:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The &lt;strong&gt;Fibonacci numbers&lt;/strong&gt;, commonly denoted &lt;code&gt;F(n)&lt;/code&gt; form a sequence, called the &lt;strong&gt;Fibonacci sequence&lt;/strong&gt;, such that each number is the sum of the two preceding ones, starting from &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt;. That is,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;F(0) = 0&lt;/code&gt;, &lt;code&gt;F(1) = 1&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;F(n) = F(n - 1) + F(n - 2)&lt;/code&gt;, for &lt;code&gt;n &amp;gt; 1&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Given &lt;code&gt;n&lt;/code&gt;, calculate &lt;code&gt;F(n)&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Examples:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 1:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;n = 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Explanation:&lt;/td&gt;
&lt;td&gt;F(2) = F(1) + F(0) = 1 + 0 = 1.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 2:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;n = 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Explanation:&lt;/td&gt;
&lt;td&gt;F(3) = F(2) + F(1) = 1 + 1 = 2.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 3:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;n = 4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Explanation:&lt;/td&gt;
&lt;td&gt;F(4) = F(3) + F(2) = 2 + 1 = 3.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#constraints"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Constraints:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;0 &amp;lt;= n &amp;lt;= 30&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#idea"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Idea:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;The naive idea here would be to create an array of Fibonacci numbers by doing as the directions indicate: adding the two previous numbers together to find the next number.&lt;/p&gt;

&lt;p&gt;But we can find the answer here in &lt;strong&gt;O(1) space&lt;/strong&gt; by instead just keeping track of only the previous two numbers (&lt;strong&gt;a, b&lt;/strong&gt;) and rolling over the variable contents in a circular pattern.&lt;/p&gt;

&lt;p&gt;Since our rolling loop can only begin on the third number or later, we'll first have to deal with the early &lt;strong&gt;n&lt;/strong&gt;-value edge cases with a special &lt;strong&gt;return&lt;/strong&gt; statement.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Update:&lt;/em&gt;&lt;/strong&gt; Apparently there's a mathematical formula for Fibonacci numbers: &lt;strong&gt;Binet's formula&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Binet's formula for the &lt;strong&gt;n&lt;/strong&gt;'th Fibonacci number:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sV-btww6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wikimedia.org/api/rest_v1/media/math/render/svg/57459135cb5773799fab490a49311b3725df94fd" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sV-btww6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wikimedia.org/api/rest_v1/media/math/render/svg/57459135cb5773799fab490a49311b3725df94fd" alt="Binet's Formula"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This formula can compute the solution in &lt;strong&gt;O(1) time&lt;/strong&gt; as well as &lt;strong&gt;O(1) space&lt;/strong&gt;.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Implementation:&lt;/em&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;There are only minor differences betwen the code of all four languages.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#javascript-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Javascript Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#w-binets-formula"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;w/ Binet's formula:&lt;/em&gt;&lt;/strong&gt;
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;fib&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;sqrt5&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;sqrt5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;sqrt5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;sqrt5&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#w-on-iteration"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;w/ O(N) iteration:&lt;/em&gt;&lt;/strong&gt;
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;fib&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#python-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Python Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#w-binets-formula"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;w/ Binet's formula:&lt;/em&gt;&lt;/strong&gt;
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;sqrt5&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nb"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;sqrt5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nb"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;sqrt5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nb"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;sqrt5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#w-on-iteration"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;w/ O(N) iteration:&lt;/em&gt;&lt;/strong&gt;
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;
        &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#java-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Java Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#w-binets-formula"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;w/ Binet's formula:&lt;/em&gt;&lt;/strong&gt;
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;fib&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;sqrt5&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sqrt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;)((&lt;/span&gt;&lt;span class="nc"&gt;Math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;pow&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;sqrt5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nc"&gt;Math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;pow&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;sqrt5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nc"&gt;Math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;pow&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;sqrt5&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#w-on-iteration"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;w/ O(N) iteration:&lt;/em&gt;&lt;/strong&gt;
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;fib&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#c-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;C++ Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#w-binets-formula"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;w/ Binet's formula:&lt;/em&gt;&lt;/strong&gt;
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;sqrt5&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;sqrt5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;sqrt5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;sqrt5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#w-on-iteration"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;w/ O(N) iteration:&lt;/em&gt;&lt;/strong&gt;
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>algorithms</category>
      <category>javascript</category>
      <category>java</category>
      <category>python</category>
    </item>
    <item>
      <title>Why you should make your site accessible</title>
      <author>kaspera</author>
      <pubDate>Thu, 15 Apr 2021 08:03:05 +0000</pubDate>
      <link>https://dev.to/kaspera/why-you-should-make-your-site-accessible-om6</link>
      <guid>https://dev.to/kaspera/why-you-should-make-your-site-accessible-om6</guid>
      <description>&lt;p&gt;When creating websites, it’s easy to think of all users as the same. You often forget that not all users can navigate a website with the same ease as oneself. That’s where accessibility comes into play.&lt;/p&gt;

&lt;p&gt;But what is accessibility? As Victor Tsaran, a Technology Program Manager at Google, who also happens to be blind, puts it:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“Accessibility is really about making sure that the content and the websites we create are useable to people with various impairments or abilities.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;- Victor Tsaran, Technology Program Manager at Google&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Your mind might automatically jump to a user who has difficulty using a regular keyboard, mouse, or touch screen. That can be one case, yes. But accessibility also covers all from users with ADHD, who has difficulty focusing, to a person trying to read a screen in direct sunlight.&lt;/p&gt;

&lt;p&gt;There are many categories when it comes to accessibility concerns, but the four main areas are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Vision (People with limited vision, low vision, or blindness).&lt;/li&gt;
&lt;li&gt;Motor/dexterity (People who have difficulty or can’t use a mouse / touch screen).&lt;/li&gt;
&lt;li&gt;Auditory (People who have difficulty hearing or are deaf).&lt;/li&gt;
&lt;li&gt;Cognitive (People with ADHD, dyslexia, autism, etc.).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You might already be out of breath thinking, “Pew, isn’t that a lot of work for just a few people?”.&lt;/p&gt;

&lt;p&gt;Yes. However, all people should be able to access the web, which is why there are also laws &amp;amp; policies for this in place. You can view your country’s law or policy &lt;a href="https://www.w3.org/WAI/policies/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now, this isn’t all stick and no carrot. The fruit of your labor also benefits users without any impairment or disability.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DBz1pdbF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2kxcvxewejhqm7xsvj3e.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DBz1pdbF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2kxcvxewejhqm7xsvj3e.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What if told that making your site accessible benefits all users. Not only that, but it can also have a direct impact on your conversion rate and your SEO rankings.&lt;/p&gt;

&lt;p&gt;Sounds too good to be true? Let me explain.&lt;/p&gt;

&lt;p&gt;Say you’re optimizing your content for vision accessibility; what do you do? You make your content easier to digest by:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Making sure you have a nice font size for your body text (E.g., 16px).&lt;/li&gt;
&lt;li&gt;Ensuring that the font is easy to read and is not disturbing (sorry, Comic Sans).&lt;/li&gt;
&lt;li&gt;Setting a good line-height (E.g., 150%).&lt;/li&gt;
&lt;li&gt;Leaving plenty of white space between paragraphs.&lt;/li&gt;
&lt;li&gt;Selecting the correct contrast for your text (light text on a light background is a no-go).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By optimizing your content, you will increase &lt;a href="https://backlinko.com/hub/seo/dwell-time"&gt;dwell time&lt;/a&gt; and reduce &lt;a href="https://backlinko.com/hub/seo/bounce-rate"&gt;bounce rate&lt;/a&gt; and &lt;a href="https://backlinko.com/hub/seo/pogosticking"&gt;pogo sticking&lt;/a&gt;, which all are part of &lt;a href="https://backlinko.com/google-ranking-factors"&gt;Google’s ranking factors&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Don’t think good typography matters? See if you can find an old website from the early 2000s. Back then, the font and font size of choice was 11px Verdana. Try reading this today, and you will properly be rubbing your eyes afterward.&lt;/p&gt;

&lt;p&gt;Speaking of old websites, remember when we couldn’t get enough animated gifs, &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/marquee#examples"&gt;marquee-elements&lt;/a&gt;, and cheesy background images? Do you know why this trend eventually died? Because they were distracting. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7fbWspw_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6rz8uytdnrdr321ao8o2.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7fbWspw_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6rz8uytdnrdr321ao8o2.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I also claimed that making your website more accessible could directly impact your conversion rate. How?&lt;/p&gt;

&lt;p&gt;Well, the obvious answer is, of course, that the more users who can actually access and use your site, the more likely a conversion is to happen. But this isn’t what I had in mind. Let’s look at optimizing for cognitive accessibility.&lt;/p&gt;

&lt;p&gt;Cognitive accessibility covers many topics but generally speaking, it’s about minimizing distractions.&lt;/p&gt;

&lt;p&gt;To minimize distractions, you should find out what your page’s primary goal is and then remove unnecessary elements (“fluff”) that can distract the user from achieving this goal.&lt;/p&gt;

&lt;p&gt;To illustrate this, I’ve created my very own eCommerce store, TacoTsunami.com, where I sell an organic all-in-one taco kit. &lt;/p&gt;

&lt;p&gt;My main goal? To sell my amazing taco kits! 🌮&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GtjAvMqd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n8o2fwlho1rdh6clyjxe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GtjAvMqd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n8o2fwlho1rdh6clyjxe.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here’s my current store. It’s not converting all that well. That’s because a lot is going on here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I want to sell my Taco kit (“Add to cart”-button).&lt;/li&gt;
&lt;li&gt;If they don’t want to buy now, I want them to at least save it for later (“Add to wishlist”-button).&lt;/li&gt;
&lt;li&gt;I want everyone to know about our new, awesome club! (“CHECK OUT OUR NEW TACO CLUB!”-text)&lt;/li&gt;
&lt;li&gt;I want them to sign up for our free newsletter (“Sign up for our newsletter”-box)&lt;/li&gt;
&lt;li&gt;I also want them to like this product on Facebook so all their friends can see it! (The “Like”-button)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That’s five different “calls to action” – on one single page! 😱&lt;/p&gt;

&lt;p&gt;It’s messy, and it distracts the users from our real goal – to sell our awesome taco kit.&lt;/p&gt;

&lt;p&gt;Now let’s try to remove all the fluff like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B3ITBZZK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qwr7s9gxlknrme2vbnvb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B3ITBZZK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qwr7s9gxlknrme2vbnvb.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There can’t be any doubt about what action we want the user to take. Removing distractions not only makes your site more accessible to people with cognitive impairments but also improves your conversion rate.&lt;/p&gt;

&lt;p&gt;As Victor puts it:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“Improving the experience for users with cognitive impairments makes it a so much better experience for everybody else.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;-Victor Tsaran, Technology Program Manager at Google&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Agreed, Victor 👍&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-alertdesk-to-keep-track-of-your-pages-accessibility"&gt;
  &lt;/a&gt;
  ♿ Use Alertdesk to keep track of your pages’ accessibility
&lt;/h2&gt;

&lt;p&gt;Alertdesk automatically checks your pages’ accessibility daily – both from a Mobile and a Desktop perspective.&lt;/p&gt;

&lt;p&gt;Our accessibility reports help you to see what needs fixing on how to do it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.alertdesk.com/?utm_source=devto&amp;amp;utm_medium=organic&amp;amp;utm_campaign=article&amp;amp;utm_content=why-you-should-make-your-site-accessible"&gt;Start tracking your accessibility today with Alertdesk. Try us free for 14 days.&lt;/a&gt;&lt;/p&gt;

</description>
      <category>ux</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>development</category>
    </item>
    <item>
      <title>10 Signs of a good Ruby on Rails Developer</title>
      <author>Pramod Shinde</author>
      <pubDate>Thu, 15 Apr 2021 08:02:38 +0000</pubDate>
      <link>https://dev.to/pramodshinde7/10-signs-of-a-good-ruby-on-rails-developer-2nc4</link>
      <guid>https://dev.to/pramodshinde7/10-signs-of-a-good-ruby-on-rails-developer-2nc4</guid>
      <description>&lt;p&gt;I have been working as Ruby on Rails developer since last five years with Josh Software, I felt that I should write down my learnings about the best practices followed by the RoR developer. How I learned …? of course to learn something you need to commit the mistakes, thats how we learn right?&lt;/p&gt;

&lt;p&gt;Let’s see, What all you should follow to be a ‘Good’ Ruby on Rails developer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-your-migrations-are-thoughtful-"&gt;
  &lt;/a&gt;
  1. Your migrations are “thoughtful” …
&lt;/h2&gt;

&lt;p&gt;Whenever you come across database table schema design do you think through all the aspects like&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The table which is being designed where its going to be used? How much it might grow in terms of the data size? (Imagine the worst future of your design)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Have I kept correct data types, defaults, constraints if any? Most of the times we really don’t need integer columns, We can use &lt;code&gt;smallint&lt;/code&gt; instead for smaller set of &lt;code&gt;integers&lt;/code&gt;, similarly &lt;code&gt;varchar(10)&lt;/code&gt; vs &lt;code&gt;varchar(255)&lt;/code&gt; vs &lt;code&gt;text&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Have I added indexes wherever necessary? Thinking through What kind of the queries this table is going to handle?&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;A special point&lt;/strong&gt;…Do you write multiple migrations for same table? if yes, it's a bad habit.&lt;/p&gt;

&lt;p&gt;Often we don’t think through all the points mentioned above and end up creating multiple migrations for same table which causes codebase to look scary.&lt;/p&gt;

&lt;p&gt;Instead you should use &lt;code&gt;up&lt;/code&gt; and &lt;code&gt;down&lt;/code&gt; on the migration to fix or alter the table, change in the requirement is an exception to this.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-you-always-follow-the-single-responsibility-principle"&gt;
  &lt;/a&gt;
  2. You always follow the single responsibility principle
&lt;/h2&gt;

&lt;p&gt;We all know a convention of “&lt;strong&gt;&lt;em&gt;skinny controller and fat model&lt;/em&gt;&lt;/strong&gt;”, some of us already follow this but do we follow it wisely.&lt;/p&gt;

&lt;p&gt;We are living in the Rails 5 era, so Why overload models?&lt;/p&gt;

&lt;p&gt;Why not to follow “&lt;strong&gt;&lt;em&gt;keep everything skinny move extra fat to concerns or service objects from the models&lt;/em&gt;&lt;/strong&gt;”, the classes in the codebase should be designed to handle single responsibility.&lt;/p&gt;

&lt;p&gt;I came across the following posts about how to organise controllers and using service objects in Rails.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="http://jeromedalbert.com/how-dhh-organizes-his-rails-controllers/"&gt;How DHH Organizes His Rails Controllers&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.netguru.co/blog/service-objects-in-rails-will-help"&gt;Service objects in Rails&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#3-you-write-test-cases-to-test-the-code"&gt;
  &lt;/a&gt;
  3. You write test cases to test the “code”
&lt;/h2&gt;

&lt;p&gt;I have seen many applications whose CI builds takes ages to finish, &lt;em&gt;What exactly they are testing&lt;/em&gt;?&lt;/p&gt;

&lt;p&gt;Your test cases should be testing the “code” not the machine performance, better test suits&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Share objects between different examples.&lt;/li&gt;
&lt;li&gt;Uses method stubs and avoid the repetitive calls to the methods.&lt;/li&gt;
&lt;li&gt;Don’t test same code twice, if you have sharable piece of code and used at multiple places then don’t write test cases in multiple places.&lt;/li&gt;
&lt;li&gt;Does not creates unnecessary test records, unknowingly many developers end up creating unnecessary test records.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If your are using gems like  &lt;a href="https://github.com/stympy/faker"&gt;faker&lt;/a&gt; ,  &lt;a href="https://github.com/thoughtbot/factory_bot_rails"&gt;factory_bot_rails&lt;/a&gt;  and &lt;a href="https://github.com/DatabaseCleaner/database_cleaner"&gt;database_cleaner&lt;/a&gt; to create and clean test records then creating unnecessary records can cost you time and speed.&lt;/p&gt;

&lt;p&gt;Simple example,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  create_list(:user, 10)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Much better will be reduce the list size, if you are not doing anything special with 10 users.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  create_list(:user, 2)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#4-you-keep-production-environment-healthy"&gt;
  &lt;/a&gt;
  4. You keep production environment healthy
&lt;/h2&gt;

&lt;p&gt;If you are an engineer and reduce efforts of others, then you use the utilities of other engineers to reduce your efforts.&lt;/p&gt;

&lt;p&gt;A healthy Rails production environment always have&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://mmonit.com/monit/"&gt;Monit&lt;/a&gt;  – Is everything up and running? if not get notified.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.systutorials.com/docs/linux/man/5-logrotate.conf/"&gt;logrotate&lt;/a&gt; – rotates, compresses, and mails system logs.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://crontab.guru/"&gt;crontabs&lt;/a&gt; with &lt;a href="https://github.com/javan/whenever"&gt;whenever&lt;/a&gt;, schedules work for you.&lt;/li&gt;
&lt;li&gt;Database backup scripts running in maintenance window.&lt;/li&gt;
&lt;li&gt;Exception notifiers like &lt;a href="https://sentry.io/welcome/"&gt;Sentry&lt;/a&gt; or &lt;a href="http://rollbar.com/"&gt;Rollbar&lt;/a&gt; or ‘anything that suits you’.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#5-you-follow-basic-git-etiquettes"&gt;
  &lt;/a&gt;
  5. You follow basic git etiquettes
&lt;/h2&gt;

&lt;p&gt;If you are working in a team and using git then you follow the git etiquettes like&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Don’t commit untracked files – we often keep git untracked files like &lt;code&gt;something.swp&lt;/code&gt;, &lt;code&gt;backup.sql&lt;/code&gt;, ‘schema.rb&lt;code&gt;or&lt;/code&gt;structure.sql backups&lt;code&gt;,&lt;/code&gt;some.test.script`, you should not commit such files.&lt;/li&gt;
&lt;li&gt;Branch naming – naming something is always difficult but you have to do it, the feature branches should have sensible names, don’t use names like &lt;code&gt;something-wip&lt;/code&gt;, &lt;code&gt;somthing-test&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Delete the feature branches after merge – no explanation required.&lt;/li&gt;
&lt;li&gt;Commit messages – your commit messages must have &lt;code&gt;Github issue number&lt;/code&gt; or &lt;code&gt;any project management story number/link&lt;/code&gt;,  &lt;code&gt;brief description about feature/task&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#6-you-dont-ignore-readmemd"&gt;
  &lt;/a&gt;
  6. You don’t ignore README.md
&lt;/h2&gt;

&lt;p&gt;Remember you are not the only one who is going to work on particular application for your lifetime. Someone will takeover you and he should not waste his time in figuring out that how to setup things.&lt;/p&gt;

&lt;p&gt;Your application repository must have updated &lt;code&gt;README.md&lt;/code&gt; with detail steps about setting up an application for the first time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-secrets-are-really-secrets-for-you"&gt;
  &lt;/a&gt;
  7. Secrets are “really” secrets for you
&lt;/h2&gt;

&lt;p&gt;We often use credentials for database configs, secrets.yml, third party api’s like AWS, payment gateway, sentry etc.&lt;/p&gt;

&lt;p&gt;You should not commit such credentials/secrets/environment variables to the Github instead you keep them secure with gems like &lt;a href="https://github.com/bkeepers/dotenv"&gt;dotenv-rails&lt;/a&gt;, &lt;a href="https://github.com/laserlemon/figaro"&gt;figaro&lt;/a&gt; or simple dot files that are not committed to the repository.&lt;/p&gt;

&lt;p&gt;A sample file of such credentials should be committed and updated regularly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-you-do-code-reviews-and-discuss-feature-with-team"&gt;
  &lt;/a&gt;
  8. You do code reviews and discuss feature with team
&lt;/h2&gt;

&lt;p&gt;While working in a team you should get your feature reviewed from another team mate or before starting on any feature discuss it with the team thoroughly, advantages of the code reviews or feature discussion are you will come across many scenarios that are not thought of.&lt;/p&gt;

&lt;p&gt;If you are the only one who is working on a application then you must criticise your own code and cover all the scenarios in test cases.   &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-you-are-uptodate-and-keep-updating"&gt;
  &lt;/a&gt;
  9. You are up-to-date and keep updating
&lt;/h2&gt;

&lt;p&gt;In open source community we get frequent updates or releases for ruby, rails and gems, you must keep yourself aware and informed by subscribing to the repositories or mailing lists and update your application libraries.&lt;/p&gt;

&lt;p&gt;Also you should stay alert on security fixes about the production operating system, database so you can take necessary action on time.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Need not to say…&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You write clean and maintainable code and your codebase is&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Properly indented&lt;/li&gt;
&lt;li&gt;Only 80 columns wide&lt;/li&gt;
&lt;li&gt;Maintainable with smaller methods, less complexity – To know more on this make a habit of using code analyzer like &lt;a href="https://github.com/bbatsov/rubocop"&gt;rubocop&lt;/a&gt;, &lt;a href="https://codeclimate.com/"&gt;Code Climate&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Codebase follows &lt;a href="https://github.com/bbatsov/ruby-style-guide"&gt;Ruby best practices and style guide&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Well there are many more points that can be included in this list but I feel these are the most important to fill in first into this list, If you find that I have missed anything more important then you can comment on this post.&lt;/p&gt;

&lt;p&gt;Thanks for the reading upto here, hope this will help you to become a ‘Good’ developer.&lt;/p&gt;

&lt;p&gt;PS: I am moving out of wordpress this is a cross post. &lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Alerta – Alert Monitoring Tool</title>
      <author>kalilinux</author>
      <pubDate>Thu, 15 Apr 2021 07:58:58 +0000</pubDate>
      <link>https://dev.to/kalilinux/alerta-alert-monitoring-tool-2bi</link>
      <guid>https://dev.to/kalilinux/alerta-alert-monitoring-tool-2bi</guid>
      <description>&lt;p&gt;The Alerta monitoring tool was developed with the following aims in mind:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;distributed and de-coupled so that it is SCALABLE
minimal CONFIGURATION that easily accepts alerts from any source
quick at-a-glance VISUALISATION with drill-down to detail
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;a href="https://kali-linuxtr.net/alerta-alert-monitoring-tool"&gt;Alert Monitoring Tool&lt;/a&gt;&lt;/p&gt;

</description>
      <category>monitoring</category>
      <category>security</category>
      <category>prometheus</category>
      <category>alert</category>
    </item>
    <item>
      <title>How To Create A Kickass GitHub Profile Page</title>
      <author>The Code Lounge</author>
      <pubDate>Thu, 15 Apr 2021 07:47:22 +0000</pubDate>
      <link>https://dev.to/codeloungedev/how-to-create-a-kickass-github-profile-page-408a</link>
      <guid>https://dev.to/codeloungedev/how-to-create-a-kickass-github-profile-page-408a</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This tutorial is also available as a video. Click on the video below or &lt;a href="https://catalins.tech/youtube"&gt;click this link&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://codelounge.dev"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oZGLRauQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617198357271/uoNdlXnwM.png" alt="cover (1).png"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;In this article, you'll see how to create a catchy, good-looking Github profile page. By the end of the tutorial, your README will:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;update automatically with your latest blog articles/YouTube videos&lt;/li&gt;
&lt;li&gt;show your GitHub stats&lt;/li&gt;
&lt;li&gt;display the icons of your tech stack&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can look at &lt;a href="https://github.com/catalinpit"&gt;my GitHub profile&lt;/a&gt; to see how your profile might look after the tutorial.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Pre-requisites
&lt;/h1&gt;

&lt;p&gt;Before going further, there are some pre-requisites for this tutorial:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You should have a GitHub account&lt;/li&gt;
&lt;li&gt;You should be familiar with markdown&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are the only two pre-requisites for this tutorial.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#1-create-a-special-readme"&gt;
  &lt;/a&gt;
  1. Create a special README
&lt;/h1&gt;

&lt;p&gt;The first step is to go to your GitHub page and then to the repositories tab. After that, click on the green button saying "New" so you create a new repository. Alternatively, use &lt;a href="https://github.com/new"&gt;this link&lt;/a&gt; to create a new repository.&lt;/p&gt;

&lt;p&gt;For the new repository, you need to use the same name as your GitHub username. For instance, my GitHub username is &lt;code&gt;catalinpit&lt;/code&gt;, so the repository name is the same - &lt;code&gt;catalinpit&lt;/code&gt;. In the figure below, you can see that you get a message automatically saying that it's a special repository.&lt;/p&gt;

&lt;p&gt;When it comes to the description, add something that describes the repository. Also, make sure the repository is public and not private.&lt;/p&gt;

&lt;p&gt;Lastly, click on the checkbox saying &lt;code&gt;Add a README file&lt;/code&gt; to initialize your project with an empty README file. The reason is so you can create and customize the profile in the browser rather than downloading it on your machine.&lt;/p&gt;

&lt;p&gt;After that, click on the green button saying "&lt;strong&gt;Create repository&lt;/strong&gt;". In the figure below, you can see what I did to create my GitHub profile.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HgYTjYqL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618375525250/IYwIc8X9Z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HgYTjYqL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618375525250/IYwIc8X9Z.png" alt="Screenshot 2021-04-14 at 07.45.14.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: In the image, you can see an error because I already have the repository, so I cannot create it twice. But if you do it for the first time, it will work properly!&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#2-add-the-heading"&gt;
  &lt;/a&gt;
  2. Add the heading
&lt;/h1&gt;

&lt;p&gt;Now that you have the special repository set up, you can start customizing it. The first step is to add a header to the profile. In my case, I use the following title:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;### Hi there &amp;lt;img src="https://raw.githubusercontent.com/MartinHeinz/MartinHeinz/master/wave.gif" width="30px"&amp;gt;, I am Catalin Pit!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The image is a hand that waves. The screenshot below illustrates how the above line looks in action.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aU8WYbCP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618375178658/ZPJMghPWn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aU8WYbCP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618375178658/ZPJMghPWn.png" alt="Screenshot 2021-04-14 at 07.39.18.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is just an example, and that's what I use on my profile. However, you are not limited to it, and you can create a better headline.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#3-add-social-media-badges"&gt;
  &lt;/a&gt;
  3. Add social media badges
&lt;/h1&gt;

&lt;p&gt;The next step is to add social media badges to your profile, like the ones in the figure below.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G6x7O2pA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618376203077/Ob8tTzBDV.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G6x7O2pA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618376203077/Ob8tTzBDV.png" alt="Screenshot 2021-04-14 at 07.56.26.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There is a particular site that generates these called &lt;a href="https://shields.io/category/social"&gt;shields.io&lt;/a&gt;. On this website, you can generate such informative badges for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Twitter&lt;/li&gt;
&lt;li&gt;GitHub&lt;/li&gt;
&lt;li&gt;YouTube&lt;/li&gt;
&lt;li&gt;Twitch&lt;/li&gt;
&lt;li&gt;Reddit&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's say you want to add your Twitter follower count. Go to the &lt;a href="https://shields.io/category/social"&gt;shields.io&lt;/a&gt; website and click on the "Twitter follow" button, as shown in the image below.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QMaDOPXN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618376560365/dTfvUF2Wg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QMaDOPXN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618376560365/dTfvUF2Wg.png" alt="Screenshot 2021-04-14 at 08.01.55.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After you click on that button, you get a pop-up where you can customize the button and add your details. In the first field, you need to add your Twitter username.&lt;/p&gt;

&lt;p&gt;However, you can leave the other fields blank. Their purpose is to allow you to customize the badge. For instance, you can replace the default text by entering a value in the field &lt;code&gt;override label&lt;/code&gt;. Similarly, you can use other logos and colours by specifying them. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lMqIWO3R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618376723360/tdfvLxtdU.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lMqIWO3R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618376723360/tdfvLxtdU.png" alt="Screenshot 2021-04-14 at 08.04.55.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Once you are done with the badge, click on &lt;code&gt;Copy Badge URL&lt;/code&gt; and then choose the option saying &lt;code&gt;Copy Markdown&lt;/code&gt;. Once the badge code is copied to your clipboard, you can add it to your GitHub profile.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#4-add-bio"&gt;
  &lt;/a&gt;
  4. Add bio
&lt;/h1&gt;

&lt;p&gt;The fourth step is to add your bio. In this step, there is not much I can advise you. I embedded a screenshot of my GitHub profile so you can see an example.&lt;/p&gt;

&lt;p&gt;However, you should add something unique, and that describes yourself the best. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Qbn7YzQC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618377273359/U6NogXiGC.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qbn7YzQC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618377273359/U6NogXiGC.png" alt="Screenshot 2021-04-14 at 08.14.18.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h1&gt;
  &lt;a href="#progress-check"&gt;
  &lt;/a&gt;
  Progress check
&lt;/h1&gt;

&lt;p&gt;Before moving onto the following steps, let's make sure you managed to get up to this point. By this point, your GitHub profile should look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;### Hi there &amp;lt;img src="https://raw.githubusercontent.com/MartinHeinz/MartinHeinz/master/wave.gif" width="30px"&amp;gt;, I am &amp;lt;enter your name&amp;gt;!

![Twitter Follow](https://img.shields.io/twitter/follow/&amp;lt;your_twitter_username&amp;gt;?style=social)

&amp;lt;your_bio&amp;gt;

--------
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above markdown snippet:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The first line is your heading&lt;/li&gt;
&lt;li&gt;The second line is the badge you generated on the &lt;code&gt;shields.io&lt;/code&gt; website&lt;/li&gt;
&lt;li&gt;The third line is your bio&lt;/li&gt;
&lt;li&gt;The three dashes &lt;code&gt;---&lt;/code&gt; are a section separator&lt;/li&gt;
&lt;/ol&gt;




&lt;h1&gt;
  &lt;a href="#5-add-the-toolbox-icons"&gt;
  &lt;/a&gt;
  5. Add the toolbox icons
&lt;/h1&gt;

&lt;p&gt;The fifth step is about adding icons of your tech stack. The image below illustrates the technologies I use and their logos.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LSsMtnf6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618378006466/08LqTPswS.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LSsMtnf6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618378006466/08LqTPswS.png" alt="download.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are two websites you can use to find the logos of almost any technology. They are as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/devicons/devicon/tree/master/icons"&gt;Devicons&lt;/a&gt; - "devicon" is a GitHub repository, and it aims to store all logos representing development languages and tools.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://worldvectorlogo.com/"&gt;WorldVectorLogo&lt;/a&gt; - The "WorldVectorLogo" website has SVG logos for almost any brand you can think of.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After your bio, add the following markdown snippet:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;--------

🧰 Toolbox

--------
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now find the icons you need on the websites mentioned above. Once you have them, copy the SVG URL, and add it under the "Toolbox" heading.&lt;/p&gt;

&lt;p&gt;Let's say you found the JavaScript and CSS SVGs on the "WorldVectorLogo" website. You simply add the logo by using the &lt;code&gt;img&lt;/code&gt; HTML tag, as shown in the snippet below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;--------

🧰 Toolbox

&amp;lt;img src="https://cdn.worldvectorlogo.com/logos/javascript.svg" alt="JavaScript Logo" width="50" height="50"/&amp;gt; &amp;lt;img src="https://cdn.worldvectorlogo.com/logos/css3.svg" alt="CSS Logo" width="50" height="50"/&amp;gt;

--------
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The figure below illustrates how your Toolbox looks after adding the icons. From here, you can add as many you want or the ones that represent your tech stack. The purpose of this section was to get you started.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SpK6mqUX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618378821731/fZWKwuR-J.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SpK6mqUX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618378821731/fZWKwuR-J.png" alt="Screenshot 2021-04-14 at 08.40.11.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h1&gt;
  &lt;a href="#6-how-to-create-github-actions"&gt;
  &lt;/a&gt;
  6. How to create GitHub actions
&lt;/h1&gt;

&lt;p&gt;Before fetching the latest videos and blog articles, you need to set up two GitHub actions. Thus, in this section, you'll see how to do that.&lt;/p&gt;

&lt;p&gt;The first step is to go to your special repository (the one you created in step 1) and click on the &lt;code&gt;Actions&lt;/code&gt; tab. After that, click on the button saying &lt;code&gt;New workflow&lt;/code&gt;. The image below shows what you should see.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S1B8LDWh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618378968660/I7NrLpe1u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S1B8LDWh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618378968660/I7NrLpe1u.png" alt="Screenshot 2021-04-14 at 08.42.21.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After you click on the button saying "new workflow", you are taken to the "Actions" page. There, you can see workflow templates you can use in your repository.&lt;/p&gt;

&lt;p&gt;There is also a suggestion for your repository - "Workflows made for your repository". Choose the "Simple workflow" and click on the button saying &lt;code&gt;Set up this workflow&lt;/code&gt;. The image below illustrates what you should see.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nU80QqK1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618378978298/Jh73kwY6u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nU80QqK1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618378978298/Jh73kwY6u.png" alt="Screenshot 2021-04-14 at 08.42.31.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That's all you need to know to follow this tutorial. You'll use the same steps to create the necessary workflows to fetch both the articles and videos.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#7-fetch-videos-and-articles"&gt;
  &lt;/a&gt;
  7. Fetch videos and articles
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kzqAHGSz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618379456758/ra7YzSI4c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kzqAHGSz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618379456758/ra7YzSI4c.png" alt="Screenshot 2021-04-14 at 08.50.45.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The above image shows what you see when you set up a new workflow. It comes with a bunch of code you do not need. &lt;/p&gt;

&lt;p&gt;First of all, change the file name at the top (where it says &lt;code&gt;blank&lt;/code&gt;). After that, delete all the code from the file.&lt;/p&gt;

&lt;p&gt;You can find the workflows you need here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/catalinpit/catalinpit/blob/main/.github/workflows/fetch-blog-articles.yml"&gt;fetch blog articles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/catalinpit/catalinpit/blob/main/.github/workflows/fetch-youtube-videos.yml"&gt;fetch YouTube videos&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: You do not need to create the folders &lt;code&gt;.github/workflows/&lt;/code&gt; in your repository. They are created automatically when you set up the GitHub actions. However, because I set up everything before the tutorial, I already have them in place. As a result, you can use them to copy the code needed for your GitHub actions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fetch-youtube-videos"&gt;
  &lt;/a&gt;
  Fetch YouTube videos
&lt;/h3&gt;

&lt;p&gt;For this tutorial, I will show you how to create a workflow to fetch your latest YouTube videos. However, the process for fetching the latest blog articles is similar.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TfKjHw75--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618380365799/9dxcwFDqv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TfKjHw75--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618380365799/9dxcwFDqv.png" alt="Screenshot 2021-04-14 at 09.03.56.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The image above shows how to create the YouTube fetching workflow. The blue rectangles show what I modified and where you have to click to start the workflow. The steps are as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Name the workflow&lt;/li&gt;
&lt;li&gt;Add the code - &lt;a href="https://github.com/catalinpit/catalinpit/blob/main/.github/workflows/fetch-youtube-videos.yml"&gt;get it from here&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Click on &lt;code&gt;Start commit&lt;/code&gt; and then on &lt;code&gt;Commit new file&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After you commit the new file, the workflow runs automatically. Additionally, it will run daily to fetch your new videos.&lt;/p&gt;

&lt;p&gt;To fetch the blog articles, follow the same process but use this &lt;a href="https://github.com/catalinpit/catalinpit/blob/main/.github/workflows/fetch-blog-articles.yml"&gt;code&lt;/a&gt;.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#8-set-up-the-template"&gt;
  &lt;/a&gt;
  8. Set up the template
&lt;/h1&gt;

&lt;p&gt;The last step you have to do to display the latest articles/videos is to go to the README and add the following code snippet:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;--------

📺 Latest YouTube Videos

&amp;lt;!-- YOUTUBE-VIDEOS-LIST:START --&amp;gt;
&amp;lt;!-- YOUTUBE-VIDEOS-LIST:END --&amp;gt;


▶ [...more YouTube videos](https://www.youtube.com/channel/UCl1IRCSmm74qhcFNPTHcbMg?sub_confirmation=1)

--------

📘 Latest Blog Articles

&amp;lt;!-- BLOG-POST-LIST:START --&amp;gt;
&amp;lt;!-- BLOG-POST-LIST:END --&amp;gt;

▶ [...more blog articles](https://catalins.tech)

--------
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above snippet is a simple markdown code with one exception. You can see the tags &lt;code&gt;youtube-videos-list&lt;/code&gt; and &lt;code&gt;blog-post-list&lt;/code&gt;, which are used in the GitHub actions. They tell the actions where the new videos/articles should be added. If you remove them, your README will not be updated anymore. Other than that, the code is self-explanatory.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DGNnE3Wb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618384206031/X_vZXMSxL.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DGNnE3Wb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618384206031/X_vZXMSxL.png" alt="Screenshot 2021-04-14 at 10.09.51.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The image above illustrates how the profile page looks after setting up the GitHub actions. It displays your latest blog articles and/or YouTube videos automatically. &lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#9-github-stats"&gt;
  &lt;/a&gt;
  9. GitHub stats
&lt;/h1&gt;

&lt;p&gt;The next and last step is to add GitHub statistics to your profile. You can see below how they look like on my profile.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DbF4T4OA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618380743332/7tEMmVflT.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DbF4T4OA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618380743332/7tEMmVflT.png" alt="Screenshot 2021-04-14 at 09.12.08.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Add the following snippet to your README.md, but make sure that you change &lt;code&gt;&amp;lt;your_GitHub_username&amp;gt;&lt;/code&gt; to your GitHub username.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;--------

## &amp;amp;#x1f4c8; My GitHub Stats

[![Top Langs](https://github-readme-stats.vercel.app/api/top-langs/?username=&amp;lt;your_GitHub_username&amp;gt;&amp;amp;hide=java,html,css&amp;amp;theme=radical)](https://github.com/anuraghazra/github-readme-stats)

[![Catalin's GitHub stats](https://github-readme-stats.vercel.app/api?username=&amp;lt;your_GitHub_username&amp;gt;&amp;amp;theme=radical)](https://github.com/anuraghazra/github-readme-stats)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you look closely at the links, you can see that they have query parameters. They allow you to customize the stats. &lt;/p&gt;

&lt;p&gt;For instance, in the above link, you can see &lt;code&gt;hide=java,html,css&lt;/code&gt;, which hides those programming languages from the stats. Also, you can see &lt;code&gt;theme=radical&lt;/code&gt;, which changes the theme of the images. You can use the following themes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;dark&lt;/li&gt;
&lt;li&gt;radical&lt;/li&gt;
&lt;li&gt;merko&lt;/li&gt;
&lt;li&gt;gruvbox&lt;/li&gt;
&lt;li&gt;tokyonight&lt;/li&gt;
&lt;li&gt;onedark&lt;/li&gt;
&lt;li&gt;cobalt&lt;/li&gt;
&lt;li&gt;synthwave&lt;/li&gt;
&lt;li&gt;highcontrast&lt;/li&gt;
&lt;li&gt;dracula&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Besides hiding programming languages and using custom themes, you can also toggle options on/off, and you can customize other things such as the line height, custom title, and so on. However, for more GitHub stats or customizations, I recommend you to check the &lt;a href="https://github.com/anuraghazra/github-readme-stats"&gt;official repository&lt;/a&gt;.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Well done for creating an awesome GitHub profile! If you want to see other great GitHub profiles and inspire, you can check the website &lt;a href="https://awesomegithubprofile.tech/?ref=producthunt"&gt;Awesome Github Profile&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you are interested in JavaScript tutorials, I recommend &lt;a href="https://catalins.tech/frontend-masters-membership-is-it-worth-it"&gt;Frontend Masters&lt;/a&gt;!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you want to make money with technical writing, check &lt;a href="https://catalins.tech/websites-that-pay-you-to-write-technical-articles"&gt;websites that pay you to write&lt;/a&gt; technical articles!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>github</category>
      <category>beginners</category>
    </item>
    <item>
      <title>A quick dive into generators</title>
      <author>Stephan Meijer</author>
      <pubDate>Thu, 15 Apr 2021 07:36:25 +0000</pubDate>
      <link>https://dev.to/smeijer/a-quick-dive-into-generators-o0l</link>
      <guid>https://dev.to/smeijer/a-quick-dive-into-generators-o0l</guid>
      <description>&lt;p&gt;I've briefly mentioned generators earlier in my &lt;a href="https://dev.to/smeijer/three-ways-to-handle-recursion-5g2l"&gt;article about recursion&lt;/a&gt;. Today, I'm going to explain the concept of generators to you, and why I believe that they are an important thing to know. If you haven't read that article, I'd recommend doing so, as this explanation builds upon that one.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;Let's take the recursive function and the recursive generator function from the earlier article. Both these functions convert a tree-like structure to a flat list where each item has an &lt;code&gt;id&lt;/code&gt; and a &lt;code&gt;parent&lt;/code&gt; property:&lt;/p&gt;

&lt;p&gt;The recursive function looked like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;flatten&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;FlatNode&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;FlatNode&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;}];&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;child&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;flatten&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;object&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;flatten&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;While it's generator variant looked like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;flatten&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;Generator&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;FlatNode&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;child&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;yield&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;flatten&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;object&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;flatten&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, most of my projects have an utility that I named &lt;code&gt;ensureArray&lt;/code&gt;. It's a nifty little helper that wraps values in an array, unless it already is an array. Something like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ensureArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;undefined&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I share this because this little utility lets me clean up these functions and make the similarities more obvious. I'll also stop annotating the examples with types, to further reduce the noise.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#recursive-generators"&gt;
  &lt;/a&gt;
  Recursive generators
&lt;/h1&gt;

&lt;p&gt;In case you've never seen generators before, (overly simplified), generators are functions decorated with an &lt;code&gt;*&lt;/code&gt; and using the &lt;code&gt;yield&lt;/code&gt; keyword to return values. There is a lot to read about them, but the nice thing is that they are executed lazily. Meaning, when we call &lt;code&gt;flatten&lt;/code&gt; here, it's possible to only process the first &lt;code&gt;n&lt;/code&gt; nodes, and ignore the rest. Where the non-generator variant would first process the entire tree, only to discard everything afterward, generators allow us to only process the absolute minimum of what's required for the task at hand. &lt;/p&gt;

&lt;p&gt;We'll come back to that. Let's take a look at the implementation first. I've simplified the examples from above using the &lt;code&gt;ensureArray&lt;/code&gt; helper, and I've added a log statement:&lt;/p&gt;

&lt;p&gt;Recursive function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;flatten&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;flatten&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nodes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;}];&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;child&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;ensureArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;flatten&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Recursive generator:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;flatten&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;flatten&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;child&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;ensureArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;flatten&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You see the similarities, right? I hope that makes it less daunting.&lt;/p&gt;

&lt;p&gt;Instead of adding the node to an array, we directly &lt;code&gt;yield&lt;/code&gt; (return) it, and instead of pushing nested nodes to that same array, we also &lt;code&gt;yield&lt;/code&gt; those. The &lt;code&gt;*&lt;/code&gt; that you'll see behind that second and third yield, is syntactic sugar to &lt;code&gt;yield&lt;/code&gt; all results in an array/iterator individually.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;yield&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;flatten&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;could just as well be written as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;flatten&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#lazy-evaluation"&gt;
  &lt;/a&gt;
  Lazy evaluation
&lt;/h1&gt;

&lt;p&gt;So the thing I mentioned earlier about the lazy behavior? Imagine we need to do something only for the first three nodes in that tree. We would write something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nodes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;flatten&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tree&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;idx&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;handle&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using the traditional, non-generator approach, this would result in the following log:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;flatten 1
flatten 2
flatten 3
flatten 4
flatten 5
flatten 6
flatten 7
flatten 8
flatten 9
flatten 10
flatten 11
handle 1
handle 2
handle 3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That log tells us that the entire tree is processed and converted to the flat array before we can handle the 3 nodes that we need. The processing time that we used for those other 8 nodes, is wasted.&lt;/p&gt;

&lt;p&gt;Now, if we'd do the same with that generator function, we'd need to change the syntax a bit:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nodes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;flatten&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tree&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;idx&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;handle&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We no longer use the &lt;code&gt;idx&lt;/code&gt; property, but instead, call the &lt;code&gt;next&lt;/code&gt; function from the &lt;code&gt;nodes&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;The &lt;code&gt;flatten&lt;/code&gt; call itself doesn't do much there. It does not invoke the &lt;code&gt;flatten&lt;/code&gt; function. The log on that first line? It's not printed. Instead, the call prepares the generator and returns an object with a &lt;code&gt;next&lt;/code&gt; method. When we call the &lt;code&gt;next&lt;/code&gt; method, the generator will run till the next &lt;code&gt;yield&lt;/code&gt; inside that function. When it meets that &lt;code&gt;yield&lt;/code&gt;, it will return the value that's being yielded.&lt;/p&gt;

&lt;p&gt;The return value of &lt;code&gt;next&lt;/code&gt; is not just that yielded value. It's an object with a &lt;code&gt;value&lt;/code&gt; prop, holding your yielded value, and a &lt;code&gt;done&lt;/code&gt; property, holding a boolean that will tell you if this generator is done generating values.&lt;/p&gt;

&lt;p&gt;So the output from that last loop?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;flatten 1
handle 1
flatten 2
handle 2
flatten 3
handle 3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's important to understand that the output order has changed. We can handle the node, as soon as the generator yields one. It doesn't yield all nodes at once, it yields every node individually, as soon as it has it. We don't need to wait for the entire tree to be processed. In fact, the processing won't continue, until we explicitly ask for the next node.&lt;/p&gt;

&lt;p&gt;Once we've handled our three nodes, we stop our loop, and the tree is not further processed. We haven't wasted any processing time using the generator approach.&lt;/p&gt;

&lt;p&gt;You probably don't always need loops, and sometimes you do want to process all or nothing. In those cases, it's trivial to wrap the call in &lt;code&gt;Array.from&lt;/code&gt;, to get all nodes at once. Just like you would have with the non-generator approach:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nodes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;flatten&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tree&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// [{ id:  … }]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We've used a simple loop in this example, but you can imagine that this is quite powerful. Without changes to the generator itself, it can be wrapped with logic to only handle the first &lt;code&gt;n&lt;/code&gt; results, or only process until a certain condition is met.&lt;/p&gt;

&lt;p&gt;Also, isn't it just beautiful, how easy it is to write recursive functions this way? No intermediate arrays. No return complexity. Recursive tree parsing, in 3 lines. All it asks is to get familiar with &lt;code&gt;yield&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;flatten&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;child&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;ensureArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;flatten&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#final-word"&gt;
  &lt;/a&gt;
  Final word
&lt;/h1&gt;

&lt;p&gt;Generators might look a bit scary at first, but they come with a lot of flexibility and power. I can imagine that they look daunting, especially for inexperienced developers. But I would really recommend getting familiar with them. They make a great asset to your utility belt.&lt;/p&gt;

&lt;p&gt;If you have questions related to this subject, please let me know in the comments. I'm happy to explain things in more detail.&lt;/p&gt;




&lt;p&gt;&lt;em&gt;👋 I'm Stephan, and I'm building &lt;a href="http://rake.red"&gt;rake.red&lt;/a&gt;. If you wish to read more of mine, follow me on &lt;a href="https://twitter.com/meijer_s"&gt;Twitter&lt;/a&gt; or check my work at &lt;a href="https://meijer.ws"&gt;meijer.ws&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>typescript</category>
      <category>javascript</category>
    </item>
    <item>
      <title>I'm An Impostor</title>
      <author>Adam Nathaniel Davis</author>
      <pubDate>Thu, 15 Apr 2021 07:19:51 +0000</pubDate>
      <link>https://dev.to/bytebodger/i-m-an-impostor-5f7f</link>
      <guid>https://dev.to/bytebodger/i-m-an-impostor-5f7f</guid>
      <description>&lt;p&gt;I wanted to write this article because I'm routinely frustrated by (what I perceive to be) the continual arrogance of "tech types" and "fanboys" who vomit opinions over their coworkers, or over the interwebs, as though they are the Arbiters of Programming Truth.  And yet... here &lt;em&gt;I&lt;/em&gt; am.  Cranking out my blogs.  Spewing my opinion.  And ultimately, I probably give the impression that I &lt;em&gt;think&lt;/em&gt; I know what I'm talking about.&lt;/p&gt;

&lt;p&gt;This hits home for me occasionally when someone pings me for advice.  They seek my input - as though I can really provide any "answers".  Some of these people are friends or colleagues.  But since I started this little Dev.to thing, I've actually had several folks reach out to me on email. With no prior introduction.  And while I'm truly &lt;em&gt;flattered&lt;/em&gt;, I also can't help but think, "You have no idea just how much I &lt;em&gt;don't&lt;/em&gt; know." &lt;/p&gt;

&lt;p&gt;This also hits home for me when I hear others talk about "impostor syndrome".  And it'd be hard for me to truly communicate how much I &lt;em&gt;hate&lt;/em&gt; that concept.  &lt;/p&gt;

&lt;p&gt;I mean, sure, I understand that, at times, we &lt;em&gt;all&lt;/em&gt; have doubts.  But it really &lt;em&gt;bothers&lt;/em&gt; me to think that anyone sees themselves as not "worthy" enough or "knowledgeable" enough or "experienced" enough.  It bothers me because, for most of my career, I've flaunted these norms. &lt;/p&gt;

&lt;p&gt;I'm completely self-taught.  I don't have a computer science degree (or a bachelors degree of &lt;em&gt;any&lt;/em&gt; kind).  At times, I've had to, umm... &lt;em&gt;embellish&lt;/em&gt; my resume.  I've frequently acquired skills that, &lt;em&gt;for years&lt;/em&gt;, no one would pay me for.  Many of the "fanboys" that I so-frequently deride look at me, or my code, or my "style" - and they &lt;em&gt;dismiss&lt;/em&gt; me.  &lt;/p&gt;

&lt;p&gt;Despite all this, there are still those who think that I've somehow "arrived" - and that they are somehow "impostors".  So I'm gonna try to blow that up.  Right here.  Right now.&lt;/p&gt;

&lt;p&gt;I'm gonna spell out, in plain detail, the stuff that's given me &lt;em&gt;fits&lt;/em&gt; throughout my career.  I'm gonna explain the stuff that &lt;em&gt;still&lt;/em&gt; confuses me.  I'm gonna try to admit the deficiencies that a lot of other tech bloggers like myself probably don't want to admit at all.&lt;/p&gt;

&lt;p&gt;My hope is that you'll realize that if someone like &lt;em&gt;me&lt;/em&gt; - a dude with a quarter-century of professional experience, still has these "shortcomings", then you're probably not as much of an "impostor" as you fear.  So... here goes.&lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E_529RQ3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k5zgoddv6pkqd9pasggg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E_529RQ3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k5zgoddv6pkqd9pasggg.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#regex-syntax"&gt;
  &lt;/a&gt;
  Regex Syntax
&lt;/h2&gt;

&lt;p&gt;Regular Expressions are one of the oldest - and most &lt;em&gt;powerful&lt;/em&gt; - tools in a programmer's toolbelt.  And you absolutely need to understand the &lt;em&gt;concept&lt;/em&gt; of regular expressions.  And you need to know the use-cases where they excel.&lt;/p&gt;

&lt;p&gt;But &lt;em&gt;syntax&lt;/em&gt;...???&lt;/p&gt;

&lt;p&gt;Well, listen...&lt;/p&gt;

&lt;p&gt;Regex's are less readable than hieroglyphs.  Sometimes, I find myself in a scenario where I'm writing regular expressions all the time.  And I transform into Regex Man (it even comes with a cape).  &lt;/p&gt;

&lt;p&gt;But then... I might go 12-18 months without writing anything more complex than a simple &lt;code&gt;[0-9]&lt;/code&gt; match.  When I go through periods like that, and then I have to dive deeply back &lt;em&gt;into&lt;/em&gt; the regex universe? Well... I start googling.&lt;/p&gt;

&lt;p&gt;I have friends that have permanently memorized all of the intricate details of regex syntax.  I am &lt;em&gt;not&lt;/em&gt; that guy.  And I have no problem admitting it.&lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MDtRRvA5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yc43bxj0g58ilh65vvjw.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MDtRRvA5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yc43bxj0g58ilh65vvjw.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#college-stuff"&gt;
  &lt;/a&gt;
  "College Stuff"
&lt;/h2&gt;

&lt;p&gt;I understand the &lt;em&gt;concept&lt;/em&gt; of Big-O notation.  But I couldn't honestly care less about the nitty-gritty details.  Because I basically don't use it.  &lt;em&gt;EVER.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Look, I understand that any "senior" dev needs to grok the intrinsic complexity of his algorithms.  And I fully understand that this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;someLimit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;someOtherLimit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// do some nested logic&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Already starts to feel "problematic" because of the nested (i.e., &lt;em&gt;exponential&lt;/em&gt;) nature of the loops.  But if you want me to stand at a whiteboard and slap detailed Big-O notation on a long series of algorithms?  Well... yeah, good luck with that.  I'll be off in the corner writing &lt;em&gt;functional code&lt;/em&gt; while you fret over the theory.&lt;/p&gt;

&lt;p&gt;On a similar note, it seems that every Computer Science major drops into the workplace with a ridiculous familiarity with binary tree searches.  And that's... &lt;em&gt;great&lt;/em&gt;?  I mean, yeah... binary tree searches are "a thing".  And sometimes they can absolutely be the "right tool for the job".  But in a quarter century in this career, I've had to dive deeply into binary tree searches... &lt;strong&gt;&lt;em&gt;ONCE&lt;/em&gt;&lt;/strong&gt;.  And the &lt;em&gt;next&lt;/em&gt; time I need to use them - I'll google that shizz.&lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--poHrEapg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y25oihsdsocjzejr8qgc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--poHrEapg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y25oihsdsocjzejr8qgc.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#native-language-functions"&gt;
  &lt;/a&gt;
  Native Language Functions
&lt;/h2&gt;

&lt;p&gt;This is one of my most-visited URLs:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array"&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I probably hit this page several times every single day.  It's not that I don't already "know" about &lt;code&gt;Array.prototype&lt;/code&gt; functions.  It's just that I still, to this day, can find it hard to grab the "right" &lt;code&gt;Array.prototype&lt;/code&gt; function right off the top of my head.  So I frequently find myself, with an array "in hand", knowing that I need to transform it in some way, and browsing over that page like it's a menu at a fine restaurant. &lt;/p&gt;

&lt;p&gt;I also &lt;em&gt;refactor&lt;/em&gt; my code frequently.  Not, like... &lt;em&gt;months&lt;/em&gt; or weeks or even days later.  I'll often write something with say, a plain ol' &lt;code&gt;.forEach()&lt;/code&gt; because, quite frankly, that's just the way my brain &lt;em&gt;works&lt;/em&gt;.  Then, when I have the logic working properly, I'll kinda step back and look at it and think, "Yeah... this should &lt;em&gt;really&lt;/em&gt; be using &lt;code&gt;.reduce()&lt;/code&gt;."  And then I'll spend a few minutes refactoring it into it's "optimal" prototype function.&lt;/p&gt;

&lt;p&gt;This trend isn't limited to JavaScript.  For years I was writing a metric butt-ton (technical term) of PHP.  And PHP has, approximately... 3,842 native functions.  All of them have different syntaxes.  Different behaviors.  Different patterns.  Different expected arguments.  And I could write every single one of those native functions from memory.  (As long as by, "from memory", you mean, "by googling that shizz".)  &lt;/p&gt;

&lt;p&gt;I've never been impressed with anyone who has memorized a particular language like the back of their hand.  Good for you.  You're a dictionary.  That doesn't make you a &lt;em&gt;problem solver&lt;/em&gt;.&lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BLlE5hOm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/84amgjyf25ea916c5al5.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BLlE5hOm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/84amgjyf25ea916c5al5.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#timed-exercises"&gt;
  &lt;/a&gt;
  Timed Exercises
&lt;/h2&gt;

&lt;p&gt;Of course, (almost) the only time that you'll experience a timed exercise is in a job interview.  And my brain has some kinda deep primeval resistance to these types of artificial hurdles.  When you give me your silly little demo task, I'm almost certain that I can crush it.  But then, when you give me a visual 15-minute timer, counting down in front of my face, it triggers some kinda internal meltdown in me.&lt;/p&gt;

&lt;p&gt;The funny thing is that I'm pretty dang effective working under &lt;em&gt;real-world&lt;/em&gt; time constraints.  In rare moments, I've been "The Guy" working on a live production issue that was costing the company tens of thousands of dollars per minute.  And in those scenarios... I slayed that shizz.  I literally had execs looking at me in awe as my fingers flew over the keyboard.&lt;/p&gt;

&lt;p&gt;But when you put that stupid artificial timer on me?  I dunno man... my brain just kinda - rebels.  And shuts down.  Cuz I know that the whole exercise is just so &lt;em&gt;fake&lt;/em&gt;.&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aDdOKBWe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rrt1g9ke6eongy9h0pxr.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aDdOKBWe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rrt1g9ke6eongy9h0pxr.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nomenclature-mismatches"&gt;
  &lt;/a&gt;
  Nomenclature Mismatches
&lt;/h2&gt;

&lt;p&gt;At multiple points in my career, I've struggled with concepts that all of my colleagues had supposedly mastered.  And then, after struggling with the academic concept - sometimes, &lt;em&gt;for years&lt;/em&gt; - I finally realized &lt;em&gt;that I was already doing that concept&lt;/em&gt;!  I just didn't "grok" the terminology being used.&lt;/p&gt;

&lt;p&gt;A great example of this is &lt;em&gt;dependency injection&lt;/em&gt;.  I dunno why, but for some reason, that term is so dang... &lt;em&gt;obtuse&lt;/em&gt; to me.  It just doesn't seem to mean, in my mind, what it actually means in the IDE.  &lt;/p&gt;

&lt;p&gt;So for a number of years, my colleagues would talk in haughty terms about &lt;em&gt;dependency injection&lt;/em&gt;.  And I'd just nod.  And smile.  And give them that knowing look of, "Oh, yeah!  Dependency injection.  I'm &lt;em&gt;all about&lt;/em&gt; dependency injection!!"  Then I'd go back and read the definition of &lt;em&gt;dependency injection&lt;/em&gt; for the 100th time - desperately trying to &lt;code&gt;import&lt;/code&gt; it into my brain.&lt;/p&gt;

&lt;p&gt;The irony of this is that I'd already been doing dependency injection.  &lt;em&gt;For years.&lt;/em&gt;  I just didn't realize it.  What others were calling "dependency injection", I was just calling... "code".  And maybe that's why I had such a hard time internalizing the concept?&lt;/p&gt;

&lt;p&gt;Another example is &lt;em&gt;closures&lt;/em&gt;.  I even wrote, a few months ago, in response to one of my readers, that I rarely-if-ever use closures.  But that statement was wrong.  &lt;em&gt;Very&lt;/em&gt; wrong.  Because the simple fact is that, as a React dev, I write closure pretty much every dang day.  But &lt;em&gt;my&lt;/em&gt; definition of "closures" wasn't compatible with all of the code I was cranking out.  And then I realized, "Wait... I write closure &lt;em&gt;all the friggin time&lt;/em&gt;."&lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KOPOfuPA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kqvbhuxduzfk9jk7tbcq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KOPOfuPA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kqvbhuxduzfk9jk7tbcq.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#devops"&gt;
  &lt;/a&gt;
  Dev-ops
&lt;/h2&gt;

&lt;p&gt;I often feel like I'm alone with this.  Because I have many programmer-type friends who seem to genuinely &lt;em&gt;enjoy&lt;/em&gt; getting into all of the ancillary stuff "around" programming.  They like configuring routers/servers/build-pipelines/etc.  They get excited by hardware.  They're very happy dealing with Linux kernels and Docker containers.&lt;/p&gt;

&lt;p&gt;I'm incredibly... &lt;em&gt;specialized&lt;/em&gt; in what I really &lt;em&gt;want&lt;/em&gt; to do.  I write code.  I &lt;em&gt;like&lt;/em&gt; to write code.  It's not that I'm &lt;em&gt;incapable&lt;/em&gt; of setting up your email server.  But I have absolutely no desire to do it.  In fact, if it's not a quick-and-dirty process that I can wrap up in a half-hour-or-so, getting everything hooked up will eventually make me &lt;em&gt;annoyed&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I just wanna write my dang code.  Show me where my environments are.  Give me access to the required repos.  And then leave me the heck alone.&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L9_C-UaL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jywj51uqgbzr4uy8c41v.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L9_C-UaL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jywj51uqgbzr4uy8c41v.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#git"&gt;
  &lt;/a&gt;
  Git
&lt;/h2&gt;

&lt;p&gt;I've met many devs who wield their prodigious Git skills like a bludgeon.  They throw around all these command-line keywords and flags, and they're not very subtle about implying that, "I'm a &lt;em&gt;real&lt;/em&gt; developer cuz I've mastered every possible command-line Git operation."&lt;/p&gt;

&lt;p&gt;I love Git.  I don't know if you can really be a "modern" dev without at least being comfortable with Git.  I can happily sit at the command line and create new branches, commits, pushes, merges, etc.  But Git is an intricate beast.  And when I need to venture outside of the "normal", day-to-day, code-management stuff - I go back to my own &lt;em&gt;cheat sheet&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I've been working on this Git cheat sheet for, oh... about five years.  And it has little helper examples of all the "2nd-level" kinda operations that I typically only perform every few months or so.  I know... that probably means that I'm somehow "lesser" as a dev.  I don't friggin care.&lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cZa7bPpj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ju0lctwxquwtily9vqzs.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cZa7bPpj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ju0lctwxquwtily9vqzs.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#command-line-terminal"&gt;
  &lt;/a&gt;
  Command Line / Terminal
&lt;/h2&gt;

&lt;p&gt;While we're talking about command lines, there are many devs who seem to get offended at the idea of a GUI.  I am &lt;em&gt;not&lt;/em&gt; that guy.  It's not that I'm impotent in a terminal, but I've never felt that my worth as a developer is tied to my knowledge of every possible &lt;code&gt;grep&lt;/code&gt; option.&lt;/p&gt;

&lt;p&gt;I can &lt;em&gt;git&lt;/em&gt; pretty dang well.  I can &lt;em&gt;npm&lt;/em&gt; like a pro.  I'm really comfortable in PowerShell and slightly-less-so with bash.  But there are limits.  And I've never felt bad because I couldn't regurgitate, from memory, a complex command line directive, with piping and flags and switches.  You can master every possible command-line utility.  And you'll get a free cookie.  I'll spend my time mastering... &lt;em&gt;code&lt;/em&gt;.&lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LiWq24sd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f4fyl5tk9rf2m5jpgtnb.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LiWq24sd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f4fyl5tk9rf2m5jpgtnb.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tip-of-the-iceberg"&gt;
  &lt;/a&gt;
  Tip of the Iceberg
&lt;/h2&gt;

&lt;p&gt;This list isn't even &lt;em&gt;close&lt;/em&gt; to comprehensive.  If I spent another few hours thinking about it, I could easily come up with another dozen issues that have caused me fits.  (Or are &lt;em&gt;still&lt;/em&gt; causing me fits.)&lt;/p&gt;

&lt;p&gt;My point here isn't to catalog every single one of my shortcomings as a programmer.  My point is to illustrate that there's not a single person in tech who doesn't have at least some of these same handicaps.  &lt;/p&gt;

&lt;p&gt;That tech blogger you read regularly doesn't magically spit out every line of his-or-her code.  They have hangups.  Just like the rest of us.  &lt;/p&gt;

&lt;p&gt;I don't care if they've been coding for 50 years.  There's still &lt;em&gt;something&lt;/em&gt; that, occasionally, makes them feel like an "impostor".  Which is really the just the best evidence for why &lt;em&gt;none of us&lt;/em&gt; should &lt;em&gt;ever&lt;/em&gt; truly feel like an "impostor".&lt;/p&gt;

&lt;p&gt;There's more in this career field than any one person can &lt;em&gt;ever&lt;/em&gt; learn.  That's not a "fault" of the career field.  It's what makes this career field absolutely friggin &lt;em&gt;gorgeous&lt;/em&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>career</category>
      <category>programming</category>
    </item>
    <item>
      <title>Some console command you might not know</title>
      <author>Chris Bongers</author>
      <pubDate>Thu, 15 Apr 2021 06:56:52 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/some-console-command-you-might-not-know-172d</link>
      <guid>https://dev.to/dailydevtips1/some-console-command-you-might-not-know-172d</guid>
      <description>&lt;p&gt;When it comes to debugging code, there are many options, but I find myself relying on console.logs quite often.&lt;/p&gt;

&lt;p&gt;It's a quick and complete way to log a data set at a certain point or see where the code returns.&lt;/p&gt;

&lt;p&gt;By all means, it may not be the best way, but it's widely used.&lt;/p&gt;

&lt;p&gt;Did you know you can do more than a plain console.log?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#grouping-console-logs"&gt;
  &lt;/a&gt;
  Grouping console logs
&lt;/h2&gt;

&lt;p&gt;A super handy console command is to group-specific logs.&lt;br&gt;
You can easily start a new group with &lt;code&gt;console.group('name')&lt;/code&gt; and end it with &lt;code&gt;console.groupEnd('name')&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The name of the group can be any string you would like it to be.&lt;/p&gt;

&lt;p&gt;An example can look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;test group&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;log line 1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Something went wrong in the group&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;groupEnd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;test group&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will show up as:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DFr3bGsP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618208772690/wSDFD0jbh.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DFr3bGsP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618208772690/wSDFD0jbh.gif" alt="Console group commands"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#console-log-a-table"&gt;
  &lt;/a&gt;
  Console log a table
&lt;/h2&gt;

&lt;p&gt;Ever needed to display a giant JSON array?&lt;br&gt;
It can be tedious the show a larger array in the console.&lt;/p&gt;

&lt;p&gt;But there is an option to display this as a table.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Article 1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;views&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://daily-dev-tips.com/article-1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Article 2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;views&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6500&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://daily-dev-tips.com/article-2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myArray&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LM8t-BOz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618209008429/Kl9LPZkNq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LM8t-BOz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618209008429/Kl9LPZkNq.png" alt="Console table command"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#console-count"&gt;
  &lt;/a&gt;
  Console count
&lt;/h2&gt;

&lt;p&gt;Another super useful command is the &lt;code&gt;console.count&lt;/code&gt; command.&lt;br&gt;
It can be used to count how often a loop is run, for instance.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Do something&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;loop one&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can provide a label as we did above.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iyRLwi9G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618209164928/vouJHkV2U.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iyRLwi9G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618209164928/vouJHkV2U.png" alt="Console loops"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#console-loginfodebugwarnerror"&gt;
  &lt;/a&gt;
  Console log/info/debug/warn/error
&lt;/h2&gt;

&lt;p&gt;Besides your default console.log, you might want to show data a little differently. Hence you can use one of the following to make it appear so:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;console.info&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;console.debug&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;console.warn&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;console.error&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;They will show up like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QrNYOmPv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618208439231/SXACCTn7W.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QrNYOmPv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618208439231/SXACCTn7W.png" alt="Different log levels"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: The info used to have its own icon but seems to be mixed with a regular log now.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With these, you can easily filter on the different levels.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--61cZHQFX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618208553321/R6Qgmcz7t.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--61cZHQFX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618208553321/R6Qgmcz7t.gif" alt="Console log levels"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#other-console-commands"&gt;
  &lt;/a&gt;
  Other console commands
&lt;/h2&gt;

&lt;p&gt;There are some other console commands that can be useful.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://daily-dev-tips.com/posts/vanilla-javascript-timing-functions/"&gt;Timing functions with console.time&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://daily-dev-tips.com/posts/spice-up-your-console-logs-with-styling/"&gt;Style your console.logs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://daily-dev-tips.com/posts/console-log-with-params/"&gt;Console.log with params&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And some we might cover in a later stage:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;console.assert&lt;/li&gt;
&lt;li&gt;console.dir&lt;/li&gt;
&lt;li&gt;console.trace&lt;/li&gt;
&lt;li&gt;console.clear&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>testing</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Machine Learning on a Raspberry Pi with Python or Node.js</title>
      <author>Joseph Maurer</author>
      <pubDate>Thu, 15 Apr 2021 06:16:00 +0000</pubDate>
      <link>https://dev.to/mwrpwr/machine-learning-on-a-raspberry-pi-with-python-or-node-js-2aho</link>
      <guid>https://dev.to/mwrpwr/machine-learning-on-a-raspberry-pi-with-python-or-node-js-2aho</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AHGw89dT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1024/1%2ATTOmixyGv8TWcZllggp2lQ.png" class="article-body-image-wrapper"&gt;&lt;img alt="" src="https://res.cloudinary.com/practicaldev/image/fetch/s--AHGw89dT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1024/1%2ATTOmixyGv8TWcZllggp2lQ.png"&gt;&lt;/a&gt;Source: &lt;a href="https://www.edgeimpulse.com/blog/ei-extends-the-edge-to-embedded-linux-with-official-support-for-raspberry-pi-4"&gt;Edge Impulse&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Typically, when you think about having to train a model for machine learning you think about needing a vast amount of processing power needed to perform the necessary operations. But small microcontroller’s like Raspberry Pi’s are becoming really popular and common in the classroom. Being able to use such a small device for machine learning gets the technologies in the hands of more people that could potentially do amazing things with it. Until now there haven’t been any options that target the Raspberry Pi. Owners of a raspberry Pi 4 can now use their device to train their own customer models using &lt;a href="https://www.edgeimpulse.com/"&gt;Edge Impulse’s cloud development platform&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are four new machine-learning SDKs (Software development kits) for Raspberry Pi including support for &lt;strong&gt;C++, Go, Node.js, and Python&lt;/strong&gt;. The benefit of this that because of the wide array of languages supported, most users won’t have to learn a new language just to learn how to program a ML. While learning and working with a new SDK can be daunting at first, Edge Impulse have good documentation that can help you get started fast, and getting your project compete before you realize it.&lt;/p&gt;

&lt;p&gt;One of the applications of this technology is computer vision by connection a webcam to the Raspberry Pi. This can be accomplished by two ways: the first is to connect the camera directly into one of the USB ports. If you’re anything like you tend to keep these ports free if possible, for other peripherals. The second option is that attach the camera through the GPIO header pins that are soldered to the board.&lt;/p&gt;

&lt;p&gt;With the computer vision system, that an engineer’s demonstrates in &lt;a href="https://www.youtube.com/watch?v=dY3OSiJyne0"&gt;this video&lt;/a&gt;, you can see that it is quite easy to get the system up and going. There looks to be a deploy process where you are building the ML pipeline through the web interface and then pushing the content to the Pi. In the video you can see that the machine vision system is capable of recognizing multiple objects through the web camera.&lt;/p&gt;

&lt;p&gt;There are a variety of sensors that the SDK supports for &lt;strong&gt;collecting data including, accelerometers, magnetometers, motion sensors, humidity and temperature sensors&lt;/strong&gt;. Really any sensor that provides a stream of data, you could input into the ML that you build.&lt;/p&gt;

&lt;p&gt;The Raspberry Pi’s small form factor and affordability makes it a prime option for many engineering and DIY projects. Being able to apply the vast amount of use cases that machine learning is applicable to continues to make developing with a Pi the Jack of all trades.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thank you for reading this far. If you enjoyed this post, please share, comment, and press that ♥️ !&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Follow me on &lt;/strong&gt;&lt;a href="https://twitter.com/maurerpwer"&gt;&lt;strong&gt;Twitter&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt; and DEV for more developer related content content!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--evMqKe5O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://medium.com/_/stat%3Fevent%3Dpost.clientViewed%26referrerSource%3Dfull_rss%26postId%3D1fb2df3fd8a7" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--evMqKe5O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://medium.com/_/stat%3Fevent%3Dpost.clientViewed%26referrerSource%3Dfull_rss%26postId%3D1fb2df3fd8a7" width="1" height="1" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>node</category>
      <category>machinelearning</category>
      <category>programming</category>
      <category>python</category>
    </item>
  </channel>
</rss>
