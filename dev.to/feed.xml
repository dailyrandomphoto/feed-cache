<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How Hoppscotch is building an open source "API development ecosystem"</title>
      <author>Liyas Thomas</author>
      <pubDate>Tue, 14 Dec 2021 18:09:02 +0000</pubDate>
      <link>https://dev.to/liyasthomas/how-hoppscotch-is-building-an-open-source-api-development-ecosystem-5cl7</link>
      <guid>https://dev.to/liyasthomas/how-hoppscotch-is-building-an-open-source-api-development-ecosystem-5cl7</guid>
      <description>&lt;p&gt;At &lt;a href="https://hoppscotch.io/"&gt;&lt;strong&gt;Hoppscotch&lt;/strong&gt;&lt;/a&gt;, our focus has been on empowering developers to focus on their work of building and testing Application Programming Interfaces (APIs). In the past year, we have come a long way and we are excited to share the latest milestones in our journey.&lt;/p&gt;

&lt;p&gt;Today, we’re announcing that &lt;strong&gt;we’ve raised $3M in seed funding led by &lt;a href="https://oss.capital/"&gt;OSS Capital&lt;/a&gt;&lt;/strong&gt;! Additionally, we are excited to share a slew of new product updates aimed at re-envisioning the principles and practices to continue developing the best-in-class tool for developers to create APIs.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#nextgeneration-companies-are-built-with-hoppscotch"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Next-generation companies are built with Hoppscotch&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Thousands of companies –from early teams to growth-stage –use Hoppscotch to develop and test APIs. Employees from &lt;strong&gt;Google, Microsoft, Salesforce, IBM, Cisco, RedHat, Verizon, Emirates, OLX&lt;/strong&gt; are just a few examples.&lt;/p&gt;

&lt;p&gt;Hoppscotch’s tools and API development methodologies are becoming the standard for high-performing teams, and the &lt;strong&gt;500,000+ people-strong Hoppscotch community&lt;/strong&gt; represents a welcoming and fast-growing hub of globally productive developers. Tools like Hoppscotch have become even more critical as companies operate on headless API-driven methodologies. APIs represent the future of making software and communicating data.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#partnering-with-oss-capital"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Partnering with OSS Capital&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Following our progress, and to accelerate and to continue taking Hoppscotch to the next level, we’ve partnered with &lt;strong&gt;OSS Capital&lt;/strong&gt; for our Seed. &lt;strong&gt;Joseph Jacks&lt;/strong&gt; (general partner, OSS Capital) led our seed round and joins our board. We admire and resonate with OSS Capital’s and Joseph’s long-term approach to company building and respect their exceptional track record of backing next-generation, category-defining COSS companies.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“OSS Capital is honored to partner with Liyas Thomas in leading the seed round for Hoppscotch, alongside Automattic — the creators of WordPress. Since first learning about Liyas and his work through the &lt;a href="http://dev.to/"&gt;DEV.to&lt;/a&gt; community, our first seed investment, we quickly developed a strong sense of the passion, authenticity, and exceptional vibrancy exhibited in the Hoppscotch community. As API-driven development continues to become a fundamental driver of digital innovation and transformation, we believe Hoppscotch will shape and further evolve the cutting edge of API tooling for developers everywhere. In a short period since launching, Hoppscotch has captured the adoption and loyalty of 500,000+ developers globally, and established itself as &lt;strong&gt;the fastest-growing open-source ecosystem in India&lt;/strong&gt;, and globally in its category. Congratulations to Liyas and team on their success so far!”&lt;/p&gt;

&lt;p&gt;— Joseph Jacks&lt;/p&gt;

&lt;p&gt;Founder and General Partner, OSS Capital&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In addition, several industry leaders are participating in this round and bringing on their insights and networks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Austen Allred, co-founder &amp;amp; CEO of Bloom Institute of Technology (formerly Lambda School)&lt;/li&gt;
&lt;li&gt;Paul Sieminski, chief legal officer of Automattic&lt;/li&gt;
&lt;li&gt;Clint Smith, chief legal officer of Discord&lt;/li&gt;
&lt;li&gt;Tod Sacerdoti, founder &amp;amp; CEO of PipeDream&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This funding, along with the support from our investors, gives us the resources to really accelerate and go after defining the new standard for software development.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#looking-ahead"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Looking ahead&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;We started Hoppscotch in August of 2019, with a simple insight: building and testing APIs has increasingly grown in complexity. The current approach is to layer on more processes and cumbersome tools. We want to see a world that unwinds all of this complexity by providing the practices and tools that fit the developers' workflow, empowering teams to focus on the act of building.&lt;/p&gt;

&lt;p&gt;We are grateful for all the support we have received from our customers, partners, and investors. Let’s make software as a craft feel magical again.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#join-us-were-hiring"&gt;
  &lt;/a&gt;
  Join us - we're hiring!
&lt;/h3&gt;

&lt;p&gt;Join our journey to build Hoppscotch for an API-first software era.&lt;/p&gt;

&lt;p&gt;We're hiring in product, engineering, and design.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://hoppscotch.io/careers"&gt;Apply now ✨&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Liyas Thomas&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Founder &amp;amp; CEO, Hoppscotch&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>testing</category>
      <category>webdev</category>
      <category>productivity</category>
    </item>
    <item>
      <title>How I code signed an Electron app on Windows</title>
      <author>Ayron Wohletz</author>
      <pubDate>Tue, 14 Dec 2021 17:33:17 +0000</pubDate>
      <link>https://dev.to/awohletz/how-i-code-signed-an-electron-app-on-windows-30k5</link>
      <guid>https://dev.to/awohletz/how-i-code-signed-an-electron-app-on-windows-30k5</guid>
      <description>&lt;p&gt;So you want to distribute your Electron app to Windows users, but when people run it they get a nasty warning “Microsoft Defender SmartScreen prevented an unrecognized app from running” and it shows “Unknown publisher.”&lt;/p&gt;

&lt;p&gt;&lt;a href="https://stackoverflow.com/a/66582477/1917537"&gt;One way to immediately get rid of this warning is to purchase an Extended Validation (EV) Code Signing certificate&lt;/a&gt;. I opted instead for a normal, non-EV Code Signing certificate. A normal Code Signing cert will show the publisher name in the warning instead of “unknown publisher.” However, SmartScreen will still need time to begin trusting my app before it will stop showing the warning altogether. I made that tradeoff to reduce the cost and validation time for my small app.&lt;/p&gt;

&lt;p&gt;So here’s how I used electron-builder to sign my Electron app on Windows with a Code Signing certificate. It took three steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Obtain the certificate&lt;/li&gt;
&lt;li&gt;Download the certificate&lt;/li&gt;
&lt;li&gt;Configure electron-builder&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#1-obtain-the-certificate"&gt;
  &lt;/a&gt;
  1. Obtain the certificate
&lt;/h2&gt;

&lt;p&gt;I purchased a Microsoft Authenticode Code Signing Certificate from Sectigo on this website: &lt;a href="https://codesigncert.com/codesigning/authenti-codesigning"&gt;https://codesigncert.com/codesigning/authenti-codesigning&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To issue the certificate, the certificate vendor needs to either validate you as an individual or validate your business. I opted for business validation. For business validation, your business must be listed in public records that the vendor can look up. Your business phone number has to be listed as well. If the info is not listed, the validation process gets longer and more complicated.&lt;/p&gt;

&lt;p&gt;After I purchased the certificate, &lt;a href="http://codesigncert.com/"&gt;codesigncert.com&lt;/a&gt; gave me some instructions to kick off the validation process.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;It had me create a Certificate Signing Request (CSR) with &lt;a href="https://www.digicert.com/support/tools/certificate-utility-for-windows"&gt;DigiCert Certificate Utility&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;I uploaded that CSR (which is just a bunch of text) to the &lt;a href="http://codesigncert.com/"&gt;codesigncert.com&lt;/a&gt; website. The info entered into the form on the website has to match what you inputted in the DigiCert tool.&lt;/li&gt;
&lt;li&gt;Now the certificate vendor will begin the validation process. In my case, it was Sectigo.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="http://codesigncert.com/"&gt;Codesigncert.com&lt;/a&gt; provides some info on the validation requirements — address, phone number, public listing, etc. To make my business info plus phone number visible before starting validation, I updated my business profile on &lt;a href="http://dnb.com/"&gt;dnb.com&lt;/a&gt;. Their customer support crew sent me a couple messages during validation that they needed to validate my business phone number. I called them and directed the operator to my &lt;a href="http://dnb.com/"&gt;dnb.com&lt;/a&gt; listing. The operator was then able to validate and issue the certificate. All-in-all the purchase and validation process took a couple weeks.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-download-the-certificate"&gt;
  &lt;/a&gt;
  2. Download the certificate
&lt;/h2&gt;

&lt;p&gt;After the certificate is issued, I had to download it &lt;em&gt;with Internet Explorer&lt;/em&gt; (IE11). Yes, it’s strange, but the certificate only downloads in the correct form with IE. At first I downloaded it with Chrome (my usual browser) but the downloaded file didn’t contain the private key. That tripped me up for a couple hours. Eventually I found that IE is a requirement. Then I followed &lt;a href="https://sectigo.com/knowledge-base/detail/How-to-Export-Your-Code-Signing-Certificate-Windows/kA01N000000zFK0"&gt;the Sectigo tutorial to export the certificate to pfx&lt;/a&gt;, which electron-builder needs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-configure-electronbuilder"&gt;
  &lt;/a&gt;
  3. Configure electron-builder
&lt;/h2&gt;

&lt;p&gt;First set the environment variables CSC_LINK and CSC_KEY_PASSWORD.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CSC_LINK — This should contain the path of the .pfx file you downloaded.&lt;/li&gt;
&lt;li&gt;CSC_PASSWORD — This should have the .pfx password you configured while downloading from IE.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Electron builder will pick those env vars up and sign all the executables in your bundle (including third-part executables in asar.unpacked). I set those in my dot-env file (&lt;code&gt;.env&lt;/code&gt;) and used the package &lt;a href="https://github.com/entropitor/dotenv-cli"&gt;dotenv-cli&lt;/a&gt; to load them in package.json scripts. Here is the package.json script that builds and signs: &lt;code&gt;dotenv -- cross-env NODE_ENV=production npm run test &amp;amp;&amp;amp; npm run prod-build &amp;amp;&amp;amp; electron-builder&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And this script builds, signs, and publishes to my Github releases: &lt;code&gt;dotenv -- electron-builder -p always&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here’s the relevant electron-builder config that I used:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;win:
  target:
    - nsis
  signingHashAlgorithms: [ 'sha256' ]
  publisherName: (YOUR BUSINESS NAME HERE)
  signAndEditExecutable: true
  verifyUpdateCodeSignature: true
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After electron-builder has built and signed your executable, you can verify the signing with DigiCert Util if you want (press the “Check Signature” button).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;Windows now shows my business name as the publisher in the SmartScreen warning when users run the app. It’s nice to know that my app cannot be tampered with and faulty copies sent to users. According to online materials I’ve seen, the warning should go away altogether once enough people download and run it.&lt;/p&gt;

&lt;p&gt;I also code signed the app for MacOS. That was a separate process, and I couldn’t use the cert I bought for Windows. That could be the subject of a future post.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>How To Install Git And Push Codes To Github</title>
      <author>Devtonight</author>
      <pubDate>Tue, 14 Dec 2021 17:22:32 +0000</pubDate>
      <link>https://dev.to/devtonight/how-to-install-git-and-push-codes-to-github-384m</link>
      <guid>https://dev.to/devtonight/how-to-install-git-and-push-codes-to-github-384m</guid>
      <description>&lt;p&gt;This question explains how to set up a local Git repository and push it to Github.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#git-installation"&gt;
  &lt;/a&gt;
  Git Installation
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#windows-installation"&gt;
  &lt;/a&gt;
  Windows Installation
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Go to &lt;a href="https://git-scm.com/downloads"&gt;https://git-scm.com/downloads&lt;/a&gt; and click “Download For Windows”.&lt;/li&gt;
&lt;li&gt;Select 32 bit or 64 bit according to your PC architecture.&lt;/li&gt;
&lt;li&gt;Open the downloaded &lt;code&gt;exe&lt;/code&gt; file.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The installation wizard will ask for basic information like the installation path, whether create desktop icons or not etc. You can leave them all in their default settings or make necessary changes and press “Next”. Ultimately, you will see the “Install” button at the end and it will begin the installation process.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#linux-installation"&gt;
  &lt;/a&gt;
  Linux Installation
&lt;/h3&gt;

&lt;p&gt;Open a terminal window and enter the following command, it will update the local software repository.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt-get update
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then install Git using the following command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt-get install git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#mac-installation"&gt;
  &lt;/a&gt;
  Mac Installation
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Install &lt;code&gt;Homebrew&lt;/code&gt; if not already installed&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install Git&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;brew install git
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Visit &lt;a href="https://git-scm.com/downloads"&gt;https://git-scm.com/downloads&lt;/a&gt; and click “Download for Mac” for more information and alternative installation methods.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#check-the-installation"&gt;
  &lt;/a&gt;
  Check The Installation
&lt;/h3&gt;

&lt;p&gt;Run the following command, it should display the installed Git version.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git --version
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#create-your-first-git-repository"&gt;
  &lt;/a&gt;
  Create Your First Git Repository
&lt;/h2&gt;

&lt;p&gt;First, create a new directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir hello-git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Go into that directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd hello-git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Initialize a new local Git repository&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create a file called &lt;code&gt;hello-git.html&lt;/code&gt; or otherwise, you can add your code files.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;touch hello-git.html
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add some content into &lt;code&gt;hello-git.html&lt;/code&gt; file and check the status of the repository. It will display the changed files.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git status
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add &lt;code&gt;hello-git.html&lt;/code&gt; to the repository.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git add hello-git.html
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you have multiple files, you can add them all by using &lt;code&gt;-A&lt;/code&gt; flag.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git add -A
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Commit changes with a short and meaningful message like what you did in the commit.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git commit -m "hello-git.txt added"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#push-to-github"&gt;
  &lt;/a&gt;
  Push To Github
&lt;/h2&gt;

&lt;p&gt;Set the Github username. Your username is the part after the 3rd forward-slash (&lt;code&gt;/&lt;/code&gt;) of your profile URL. For example, in &lt;code&gt;https://github.com/bitcoin&lt;/code&gt;, &lt;code&gt;bitcoin&lt;/code&gt; is the username.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git config --global user.username your_github_username
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create a new repository in Github by visiting &lt;a href="https://github.com/new"&gt;https://github.com/new&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Link the Github remote repository to the local repository.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git remote add origin https://github.com/your_github_username/hello-git.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Push local repository to Github repository.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git push origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Feel free to visit &lt;a href="https://devtonight.com?utm_source=dev&amp;amp;utm_medium=questions&amp;amp;utm_campaign=how-to-install-git-and-push-codes-to-github"&gt;devtonight.com&lt;/a&gt; for more related content.&lt;/p&gt;

</description>
      <category>git</category>
      <category>github</category>
      <category>beginners</category>
      <category>howto</category>
    </item>
    <item>
      <title>How To Build A React App Using React Router v6 Without create-react-app</title>
      <author>Jordan Smith</author>
      <pubDate>Tue, 14 Dec 2021 17:10:33 +0000</pubDate>
      <link>https://dev.to/jordan_smith/how-to-build-a-react-app-using-react-router-v6-without-create-react-app-4fe3</link>
      <guid>https://dev.to/jordan_smith/how-to-build-a-react-app-using-react-router-v6-without-create-react-app-4fe3</guid>
      <description>&lt;p&gt;Recently I found myself in the position of needing to start a new React app from scratch, but due to anticipation for future needs of the app it was decided that we wouldn't be using create-react-app. But unfortunately, create-react-app is the only way I knew how to get a React project started. I also knew that we needed to use React Router in the app, and it just so happened that a new version was just released. So off to the internet I went, looking for a tutorial on getting started. I found some helpful links and articles, but I also found that I had to pull different steps from different areas in order to get a process that actually worked together with my setup and versioning. So in the interest of helping the next dev in my position, I decided to document the process I used. Hopefully this will make it much quicker and easier for whoever is reading this today.&lt;/p&gt;

&lt;p&gt;To start off, create a new folder and give it a name (this will end up being the name of the app). Open up the folder and in a terminal type the following command:&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm init -y&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;You should see something similar to the following output&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XMHyNM86--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639011959135/OHrqfeN-V.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XMHyNM86--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639011959135/OHrqfeN-V.png" alt="Screen Shot 2021-12-08 at 4.28.45 PM.png" width="834" height="360"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next you'll create a "dist" folder at the root of your application. In that folder, create a file called index.html. This will be the initial starting HTML file for your application. Copy the following boilerplate into that file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en"&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset="UTF-8"&amp;gt;
    &amp;lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&amp;gt;
    &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&amp;gt;
    &amp;lt;title&amp;gt;Sample React App&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;div id="app"&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;script src="bundle.js"&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You'll notice that inside the body tags there is a div with an id of "app." This is the div that you will eventually reference when telling React where to render everything. You can name it whatever you want, just make sure when you are referencing later on you use the same id the one you specify here.&lt;/p&gt;

&lt;p&gt;Next, we'll install the React dependencies, Webpack and Babel. These are the core dependencies you'll need for a basic React app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i react react dom
npm i --save-dev @babel/preset-env react-hot-loader webpack webpack-cli webpack-dev-server @babel/core @babel/preset-react babel-loader
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we'll install React Router at version 6.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i react-router-dom@6
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that everything is installed, we'll add a script allowing us to start the application from the terminal. In package.json, add the following code to the "scripts" section.&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;"start": "webpack serve --config ./webpack.config.js --mode development --port 3000"&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;Your package.json should now look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "name": "sample-react-app",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "start": "webpack serve --config ./webpack.config.js --mode development --port 3000"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "dom": "^0.0.3",
    "react": "^17.0.2"
  },
  "devDependencies": {
    "@babel/core": "^7.16.0",
    "@babel/preset-env": "^7.16.4",
    "@babel/preset-react": "^7.16.0",
    "babel-loader": "^8.2.3",
    "react-hot-loader": "^4.13.0",
    "webpack": "^5.65.0",
    "webpack-cli": "^4.9.1",
    "webpack-dev-server": "^4.6.0"
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next we need to set some Babel presets. In your root directory create a file called .babelrc and put in the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "presets": ["@babel/preset-env", "@babel/preset-react"]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we'll specify our Webpack presets. Create another file in the root directory called webpack.config.js and put in the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const webpack = require("webpack");
const path = require("path");

module.exports = {
  entry: path.resolve(__dirname, "./src/index.js"),
  module: {
    rules: [
      {
        test: /\.(js|jsx|ts|tsx)$/,
        exclude: /node_modules/,
        use: ["babel-loader"],
      },
    ],
  },
  resolve: {
    extensions: ["*", ".js", ".jsx", ".ts", ".tsx"],
  },
  output: {
    path: path.resolve(__dirname, "./dist"),
    filename: "bundle.js",
  },
  plugins: [new webpack.HotModuleReplacementPlugin()],
  devServer: {
    static: path.resolve(__dirname, "./dist"),
    hot: true,
    historyApiFallback: true,

  },
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note: if you are not using typescript in your app you can omit the all references to "ts" and "tsx" (found under &lt;em&gt;resolve.extensions&lt;/em&gt; and &lt;em&gt;module.rules.test&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;Now we'll create our root React app file. Create a src folder at your root directory and inside make a new file called app.jsx. This will contain the following (I'll explain what all of this is below):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from "react";
import { BrowserRouter, Routes, Route, Outlet } from "react-router-dom";

const App = () =&amp;gt; {
  return (
    &amp;lt;BrowserRouter&amp;gt;
      &amp;lt;Routes&amp;gt;
        &amp;lt;Route path="/" element={&amp;lt;Layout /&amp;gt;}&amp;gt;
          &amp;lt;Route index element={&amp;lt;Home /&amp;gt;} /&amp;gt;
          &amp;lt;Route path="about" element={&amp;lt;About /&amp;gt;} /&amp;gt;
          &amp;lt;Route path="contact" element={&amp;lt;Contact /&amp;gt;} /&amp;gt;
          &amp;lt;Route path="*" element={&amp;lt;h2&amp;gt;Page Not Found&amp;lt;/h2&amp;gt;} /&amp;gt;
        &amp;lt;/Route&amp;gt;
      &amp;lt;/Routes&amp;gt;
    &amp;lt;/BrowserRouter&amp;gt;
  );
};

export default App;

const Layout = () =&amp;gt; {
  return (
    &amp;lt;&amp;gt;
      &amp;lt;h1&amp;gt;Welcome to the app&amp;lt;/h1&amp;gt;
      &amp;lt;Outlet /&amp;gt;
    &amp;lt;/&amp;gt;
  );
};

const Home = () =&amp;gt; {
  return &amp;lt;h2&amp;gt;Home&amp;lt;/h2&amp;gt;;
};

const About = () =&amp;gt; {
  return &amp;lt;h2&amp;gt;About&amp;lt;/h2&amp;gt;;
};

const Contact = () =&amp;gt; {
  return &amp;lt;h2&amp;gt;Contact&amp;lt;/h2&amp;gt;;
};

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At first glance, it looks like I just threw a massive code block at you just now. But if you break it down, it's simply a component that holds a router with a couple dummy components to get started. You can see that the component is called App and in this component we return a &lt;code&gt;&amp;lt;BrowserRouter&amp;gt;&lt;/code&gt;. This is the built in React Router component that will wrap around whatever routes you add to your app in the future.&lt;/p&gt;

&lt;p&gt;Inside the &lt;code&gt;&amp;lt;BrowserRouter&amp;gt;&lt;/code&gt; tag is where we will place all of our Routes. We start with a &lt;code&gt;&amp;lt;Routes&amp;gt;&lt;/code&gt; (note the "s") tag, another React Router component, basically saying "Hey here's a bunch of different routes to look for." Then of course is the &lt;code&gt;&amp;lt;Route&amp;gt;&lt;/code&gt; component, which is where you'll put the actual path and the component to be rendered when that path is hit. I won't go into anymore detail on how these React Router components work. Instead if you want to see a more in depth explanation on how they all work I'd recommend checking out their documentation  &lt;a href="https://reactrouter.com/docs/en/v6"&gt;here&lt;/a&gt;. Their docs are really clear and they explain things much better than I ever could.&lt;/p&gt;

&lt;p&gt;Below that is just a couple simple dummy components, so that something will actually render when you hit each route. You'll notice that layout is the parent route, and it contains an &lt;code&gt;&amp;lt;Outlet&amp;gt;&lt;/code&gt; that renders any children elements (again - see the official documentation for a much better explanation). These of course should be replaced once you start building out your application, and they should probably be split into their own separate files. But for ease of this tutorial I decided to put them all together so you can clearly see what's being rendered and when.&lt;/p&gt;

&lt;p&gt;Finally you'll need to write your ReactDOM renderer component. In your src folder, create a file called index.js. Inside that you'll place the code below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from "react";
import ReactDOM from "react-dom";
import App from "./app";

ReactDOM.render(&amp;lt;App /&amp;gt;, document.getElementById("app"));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This code is what React uses to actually render your entire app. Notice in the document.getElementbyId,  you are using the id "app" that you created in your index.html file at the beginning.&lt;/p&gt;

&lt;p&gt;Now time to check everything out! Run the app using &lt;code&gt;npm start&lt;/code&gt; and then in your browser navigate to &lt;em&gt;localhost:3000&lt;/em&gt;. You should see the &lt;em&gt;home&lt;/em&gt; screen rendered on the page. In the URL bar, add "/about" to the end of the current URL and you'll see the &lt;em&gt;about&lt;/em&gt; page rendered. Switch that to "/contact" for the &lt;em&gt;contact&lt;/em&gt; page. The header from &lt;em&gt;layout&lt;/em&gt; should be shown for all routes.&lt;/p&gt;

&lt;p&gt;And that's it! You now have a basic React app with React Router v6. This is of course only one way to do it, and I'm sure others have other methods, but this is what I've found to be simple and effective to get everything going. &lt;/p&gt;

&lt;p&gt;I hope this helped, and saved you some time in the process! If you want to save even more time and not read through everything - although I do recommend going through the steps and typing everything yourself so you can have a good idea of what's going on - you can go to the GitHub repo  &lt;a href="https://github.com/TechWithJordan/react-app-with-router-quickstart"&gt;here&lt;/a&gt; to get everything in one go.&lt;/p&gt;

&lt;p&gt;Thanks for reading! If this article was helpful, or you have any questions or feedback, feel free to leave a comment!&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>How to create Responsive Shopping cart for eCommerce website HTML CSS JS</title>
      <author>Sadee</author>
      <pubDate>Tue, 14 Dec 2021 17:01:51 +0000</pubDate>
      <link>https://dev.to/codewithsadee/responsive-shopping-cart-for-ecommerce-website-html-css-js-383g</link>
      <guid>https://dev.to/codewithsadee/responsive-shopping-cart-for-ecommerce-website-html-css-js-383g</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/-gEV3znqu8E"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;How to make responsive shopping cart for eCommerce website html css javascript.&lt;br&gt;
create a shopping cart page using javascript functionalities.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#recommended-videos"&gt;
  &lt;/a&gt;
  📹 Recommended Videos
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://youtu.be/TTrYjLOJeKs"&gt;How to use ionicon&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#essential-links"&gt;
  &lt;/a&gt;
  🔗 Essential links
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://drive.google.com/file/d/10cLnh0ECCAoxifoFGObLFQVNxSdHdNm7/view?usp=sharing"&gt;All Images&lt;/a&gt;&lt;br&gt;
&lt;a href="https://fonts.google.com/specimen/Source+Sans+3"&gt;Font - Source Sans 3&lt;/a&gt;&lt;br&gt;
&lt;a href="https://ionic.io/ionicons"&gt;Ionicon&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.patreon.com/posts/source-code-cart-59909583?utm_medium=clipboard_copy&amp;amp;utm_source=copy_to_clipboard&amp;amp;utm_campaign=postshare"&gt;Source Code&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#like-follow-amp-subscribe-me"&gt;
  &lt;/a&gt;
  👤 Like - Follow &amp;amp; Subscribe Me
&lt;/h2&gt;

&lt;p&gt;Twitter : &lt;a href="https://twitter.com/codewithsadee"&gt;https://twitter.com/codewithsadee&lt;/a&gt;&lt;br&gt;
Github : &lt;a href="https://github.com/codewithsadee"&gt;https://github.com/codewithsadee&lt;/a&gt;&lt;br&gt;
YouTube : &lt;a href="https://www.youtube.com/channel/UC1PZHWV6VvICTL1LgFUZq6g"&gt;codewithsadee&lt;/a&gt;&lt;br&gt;
Patreon : &lt;a href="https://www.patreon.com/codewithsadee"&gt;https://www.patreon.com/codewithsadee&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/codewithsadee"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qhS87mRW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9kn6vwn4mulhsx6o69is.png" alt="Buy Me A Coffee" width="225" height="51"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>tutorial</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Various Types of Angular Component Selectors</title>
      <author>Anubhab Mukherjee</author>
      <pubDate>Tue, 14 Dec 2021 16:59:06 +0000</pubDate>
      <link>https://dev.to/anubhab5/various-types-of-angular-component-selectors-1ec</link>
      <guid>https://dev.to/anubhab5/various-types-of-angular-component-selectors-1ec</guid>
      <description>&lt;p&gt;Today we will be learning the various ways of using the component selector in Angular. &lt;br&gt;
If you are unaware of what is a component in Angular or what are the different parts of it I would recommend you to have a quick read on the following article - &lt;a href="https://dev.to/anubhab5/understanding-angular-component-2bpa"&gt;Understanding-Components&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are mainly four different ways you can define a selector in Angular component.&lt;/p&gt;

&lt;p&gt;i. &lt;strong&gt;Tag Selector&lt;/strong&gt; &lt;br&gt;
When a component is created by default it is provided with a tag selector.&lt;br&gt;
&lt;u&gt;app.component.ts&lt;/u&gt; file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  title = 'MyFirstProject';
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lets use the selector in our index.html file in the following way-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en"&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset="utf-8" /&amp;gt;
    &amp;lt;title&amp;gt;MyFirstProject&amp;lt;/title&amp;gt;
    &amp;lt;base href="/" /&amp;gt;
    &amp;lt;meta name="viewport" content="width=device-width,
     initial-scale=1" /&amp;gt;
    &amp;lt;link rel="icon" type="image/x-icon" href="favicon.ico" /&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;app-root&amp;gt;&amp;lt;/app-root&amp;gt;
  &amp;lt;/body&amp;gt;
  &amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;ii. &lt;strong&gt;Class Selector&lt;/strong&gt; &lt;br&gt;
The class selector syntax is similar to the CSS class .&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { Component } from '@angular/core';

@Component({
  selector: '.app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  title = 'MyFirstProject';
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the index file we can use the selector in the below way&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  &amp;lt;body&amp;gt;
    &amp;lt;div class="app-root"&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;iii. &lt;strong&gt;ID Selector&lt;/strong&gt;&lt;br&gt;
The id selector syntax also resemble like the CSS id selector.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#"&gt;
  &lt;/a&gt;
  
&lt;/h1&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { Component } from '@angular/core';

@Component({
  selector: '#app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  title = 'MyFirstProject';
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;In the index.html file lets see how the selector has been used.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; &amp;lt;body&amp;gt;
    &amp;lt;div id="app-root"&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;iv. &lt;strong&gt;Attribute Selector&lt;/strong&gt;&lt;br&gt;
The attribute selector syntax in the component decorator selector metadata looks like [app-name]&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { Component } from '@angular/core';

@Component({
  selector: '[app-root]',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  title = 'MyFirstProject';
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the index.html it will be used as any other attribute inside a html element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div app-root&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So now we completed learning the different ways we can write and use the selectors in Angular. &lt;/p&gt;

&lt;p&gt;Hope you enjoyed the post, if you enjoyed it do like and comment.&lt;br&gt;
Also if you want any specific topic please write it in the comment section.&lt;/p&gt;

&lt;p&gt;Coming up next some more advanced features on Angular Component and more Angular topics. So stay tuned.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cheers&lt;/strong&gt;!!!&lt;br&gt;
&lt;em&gt;Happy Coding&lt;/em&gt;&lt;/p&gt;

</description>
      <category>angular</category>
      <category>intermediate</category>
      <category>component</category>
      <category>selector</category>
    </item>
    <item>
      <title>Route Model binding in Laravel</title>
      <author>Arif Iqbal</author>
      <pubDate>Tue, 14 Dec 2021 16:47:57 +0000</pubDate>
      <link>https://dev.to/arifiqbal/route-model-binding-in-laravel-4amk</link>
      <guid>https://dev.to/arifiqbal/route-model-binding-in-laravel-4amk</guid>
      <description>&lt;h3&gt;
  &lt;a href="#what-is-routemodel-binding"&gt;
  &lt;/a&gt;
  What is &lt;em&gt;Route-Model Binding&lt;/em&gt;?
&lt;/h3&gt;

&lt;p&gt;As the name tells, to bind an Eloquent Model instance to a route (wildcard).&lt;/p&gt;

&lt;p&gt;At this point in our &lt;a href="https://github.com/arifktk32/Laravel-From-Scratch-Blog-Project/commits/main"&gt;Blog Project&lt;/a&gt;, we capture the post ID in the route definition for a single post, pass it to the callback function as paramere, and then send it to the &lt;code&gt;findOrFail()&lt;/code&gt; method of our &lt;code&gt;Post&lt;/code&gt; model.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nc"&gt;Route&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/posts/{post}'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'post'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'post'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Post&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;findOrFail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Would it not be nicer to send the &lt;code&gt;Post&lt;/code&gt; model instance directly to the callback function?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nc"&gt;Route&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/posts/{post}'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Post&lt;/span&gt; &lt;span class="nv"&gt;$post&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'post'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'post'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$post&lt;/span&gt;
    &lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It means we bound the &lt;code&gt;Post&lt;/code&gt; model to the route &lt;code&gt;/posts/{post}&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#things-to-remember-about-the-routemodel-binding"&gt;
  &lt;/a&gt;
  Things to remember about the &lt;em&gt;Route-Model Binding&lt;/em&gt;:
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The Model type-hinted variable name in the route callback function should be the same as the route wildcard name. It means if your wildcard is &lt;code&gt;{post}&lt;/code&gt; then callback variable name must be &lt;code&gt;$post&lt;/code&gt;, otherwise it would not work.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The default key that represents a Model is &lt;code&gt;ID&lt;/code&gt;. It means, Laravel by default will assume the wildcard value to be the &lt;code&gt;ID&lt;/code&gt; attribute of the Model instance. You can change it to any other unique key in the following two ways:&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;a) Update your route definition to mention the key with the wildcard as &lt;code&gt;{post:slug}&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nc"&gt;Route&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/posts/{post:slug}'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Post&lt;/span&gt; &lt;span class="nv"&gt;$post&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'post'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'post'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$post&lt;/span&gt;
    &lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is a relatively newer approach introduced in some recent version of Laravel.&lt;/p&gt;

&lt;p&gt;b) Add a public function to your Model &lt;code&gt;getRouteKeyName()&lt;/code&gt; and return the field name from it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;getRouteKeyName&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'slug'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This was the old way of changing the default key which still works.&lt;/p&gt;

&lt;p&gt;Update you view files accordingly based on what key represents your Model. For example, if you changed it from &lt;code&gt;id&lt;/code&gt; to &lt;code&gt;slug&lt;/code&gt;, update your &lt;code&gt;posts.blade.php&lt;/code&gt; as in the image&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oJ6Piu3i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o7tawzeg7ofyu6n7o7l6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oJ6Piu3i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o7tawzeg7ofyu6n7o7l6.png" alt="Route-Model Binding" width="765" height="236"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>laravel</category>
      <category>php</category>
      <category>programming</category>
      <category>100daysofcode</category>
    </item>
    <item>
      <title>Save Textbox Value to File using JavaScript</title>
      <author>Shantanu Jana</author>
      <pubDate>Tue, 14 Dec 2021 16:26:26 +0000</pubDate>
      <link>https://dev.to/shantanu_jana/save-textbox-value-to-file-using-javascript-2ljp</link>
      <guid>https://dev.to/shantanu_jana/save-textbox-value-to-file-using-javascript-2ljp</guid>
      <description>&lt;p&gt;In this article you will learn how to convert textbox value to files using JavaScript. If we want to create any type of file such as HTML, CSS, text etc., we manually use it with the help of different types of text editors. However, this type of project can make this work easier. With this project you can easily save any text content as any file.&lt;/p&gt;

&lt;p&gt;You can &lt;a href="https://www.foolishdeveloper.com/2021/12/save-textarea-text-to-file.html"&gt;watch the live demo&lt;/a&gt; to see how it works. First we have created a box in which different types of text or information can be input. Text area has been used to create this box. Then there is the input space that we created using the input function of HTML.&lt;/p&gt;

&lt;p&gt;In the input box you can add the name of the file of your choice and add to it any file you want to convert. Then when you click on the download button, the texts in that text area will be converted to a file and saved. I used HTML CSS and JavaScript to create this project.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/iDtWDU6ajyA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Hope the above video has helped you a bit. However, below I have shared the step-by-step tutorial. If you want, you can &lt;a href="https://www.foolishdeveloper.com/2021/12/save-textarea-text-to-file.html"&gt;download the source code&lt;/a&gt; of this project (Textarea Text to a File using JavaScript).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-create-a-box-on-the-webpage"&gt;
  &lt;/a&gt;
  1. Create a box on the webpage
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#044b82&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"Kanit"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Verdana&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Arial&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;#container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;430px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zBTz82fG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u4ytqn7ernwlgva697yc.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zBTz82fG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u4ytqn7ernwlgva697yc.jpg" alt="Create a box on the webpage" width="880" height="442"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-add-a-heading"&gt;
  &lt;/a&gt;
  2. Add a heading
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Save the text to a file&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#0773d7&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;uppercase&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hYDFnVh---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ln79vmss2t5xgk1msecv.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hYDFnVh---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ln79vmss2t5xgk1msecv.jpg" alt="Add a heading" width="880" height="442"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-create-a-text-input-box"&gt;
  &lt;/a&gt;
  3. Create a text input box
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;textarea&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"Type your text here..."&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/textarea&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nf"&gt;#text&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#021652&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#3ba9f4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;35px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Nwi78bWU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uashgwx20gp4de6zw9tg.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Nwi78bWU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uashgwx20gp4de6zw9tg.jpg" alt="Create a text input box" width="880" height="442"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-create-a-box-to-input-the-file-name"&gt;
  &lt;/a&gt;
  4. Create a box to input the file name
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"filename"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"Specify a filename..."&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nf"&gt;#filename&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="m"&gt;200px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#3ba9f4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#052a53&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;line-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gSga5vfh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dxt8fnejrybn4xye7j9s.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gSga5vfh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dxt8fnejrybn4xye7j9s.jpg" alt="Image description" width="880" height="442"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-create-file-download-button"&gt;
  &lt;/a&gt;
  5. Create file download button
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"download"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Download file&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nf"&gt;#download&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#3ba9f4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;174px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3P05GnCp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c6rqguk1n9yu1n6u8q87.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3P05GnCp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c6rqguk1n9yu1n6u8q87.jpg" alt="Image description" width="880" height="443"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-save-text-to-file-with-javascript"&gt;
  &lt;/a&gt;
  6. Save Text to File with JavaScript
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;downloadFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// It works on all HTML5 Ready browsers as it uses the download attribute of the &amp;lt;a&amp;gt; element:&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;//A blob is a data type that can store binary data&lt;/span&gt;
  &lt;span class="c1"&gt;// "type" is a MIME type&lt;/span&gt;
  &lt;span class="c1"&gt;// It can have a different value, based on a file you want to save&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;blob&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Blob&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;plain/text&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="c1"&gt;//createObjectURL() static method creates a DOMString containing a URL representing the object given in the parameter.&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fileUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createObjectURL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;blob&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;//setAttribute() Sets the value of an attribute on the specified element.&lt;/span&gt;
  &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;href&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fileUrl&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//file location&lt;/span&gt;
  &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;download&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// file name&lt;/span&gt;
  &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;//use appendChild() method to move an element from one element to another&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="c1"&gt;//The removeChild() method of the Node interface removes a child node from the DOM and returns the removed node&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;download&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
  &lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="c1"&gt;//The value of the file name input box&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;filename&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;//The value of what has been input in the textarea&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// The &amp;amp;&amp;amp; (logical AND) operator indicates whether both operands are true. If both operands have nonzero values, the result has the value 1 . Otherwise, the result has the value 0.&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;downloadFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--49X_Nlqj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yxxusk7chlorz0khis6g.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--49X_Nlqj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yxxusk7chlorz0khis6g.jpg" alt="Save Text to File with JavaScript" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
Hopefully the above tutorial has helped you to know how I created this Save textbox value to file using JavaScript. You must comment on how you like this design.&lt;/p&gt;

&lt;p&gt;You can visit my blog for more tutorials like this.&lt;br&gt;
&lt;a href="https://www.foolishdeveloper.com/"&gt;https://www.foolishdeveloper.com/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Convertendo AND para OR em JavaScript</title>
      <author>Beatriz Oliveira</author>
      <pubDate>Tue, 14 Dec 2021 16:26:21 +0000</pubDate>
      <link>https://dev.to/beatrizoliveira/convertendo-and-para-or-em-javascript-4ohd</link>
      <guid>https://dev.to/beatrizoliveira/convertendo-and-para-or-em-javascript-4ohd</guid>
      <description>&lt;h3&gt;
  &lt;a href="#tabela-verdade"&gt;
  &lt;/a&gt;
  Tabela Verdade
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Primeiramente é bom dá uma revisada nos conceitos de tabela verdade, para entender como valores de entrada e booleanos funcionam.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A Tabela verdade nada mais é que um mecanismo de lógica que para determinada entrada ou valor e é calculado sua saída de acordo com predeterminações lógicas, funcionais e booleanas&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KoEzUD4_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yym18z269wupq9q7nbyo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KoEzUD4_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yym18z269wupq9q7nbyo.png" alt="Tabela Verdade" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#and-e-or"&gt;
  &lt;/a&gt;
  AND e OR
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Recentemente me deparei com uma falta de conhecimento em relação a booleanos eu não sabia como converter um &lt;strong&gt;&amp;amp;&amp;amp;(AND)&lt;/strong&gt; para &lt;strong&gt;||(OR)&lt;/strong&gt; na linguagem que estava utilizando (JavaScript), teria que fazer uma validação convertendo AND para OR por isso o foco nesses dois operadores lógicos nesse post.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Operadores lógicos são nada a menos que funções e expressões matemáticas, sim aquelas que você estudou provavelmente na escola.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H70oBvPc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a17pmq6jeleruwpat0b7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H70oBvPc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a17pmq6jeleruwpat0b7.png" alt="Tabela Verdade" width="405" height="210"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;O Operador lógico AND&lt;/strong&gt; também chamado de &lt;strong&gt;Conjunção lógica&lt;/strong&gt;, ele é utilizado para dados dois inputs de valores
onde produz um valor verdadeiro se &lt;em&gt;ambos os operandos forem verdadeiros&lt;/em&gt;. Em lógica de programação existem dois valores em bits que representam verdadeiro ou falso que são: 1 e 0&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f9ULdgv5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hbiiqapo8ikx8e77no7x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f9ULdgv5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hbiiqapo8ikx8e77no7x.png" alt="Tabela AND" width="475" height="303"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Operador lógico OR&lt;/strong&gt; também chamado de &lt;strong&gt;Disjunção lógica&lt;/strong&gt;, dado dois inputs com valores ele produz um valor verdadeiro &lt;em&gt;se pelo menos um de seus operandos for verdadeiro&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LBnmL5LV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1m1uhugunlvmrgaxluk7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LBnmL5LV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1m1uhugunlvmrgaxluk7.png" alt="Tabela OR" width="550" height="306"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#operador-l%C3%B3gico-xor"&gt;
  &lt;/a&gt;
  Operador Lógico XOR
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;O operador lógico XOR ele representa a função de desigualdade ou seja se ambas as entradas forem verdadeiras ou falsas a saída será falsa (0) se ambas entradas se distinguirem ele retornará verdadeiro. Uma frase legal para lembrar a lógica do XOR é : &lt;br&gt;
&lt;em&gt;"deve ter um ou outro, mas não ambos"&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A apresentação analítica desse operador lógico se dar pela expressão:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;f(a,b)=a+b-2ab
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2PZFgy0V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mdr6h1tutqm8u4r84duy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2PZFgy0V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mdr6h1tutqm8u4r84duy.png" alt="Tabela XOR" width="503" height="356"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Uma curiosidade interessante que você deve ainda não ter percebido é que o operador lógico XOR é a conversão dos operadores AND e OR, e assim quando você tiver uma lógica AND e quiser transformá-la em uma lógica OR usará o XOR.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LMtUsFeM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hi1ydfqbl9vnnrdb4y8p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LMtUsFeM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hi1ydfqbl9vnnrdb4y8p.png" alt="Tabela XOR Gate" width="880" height="521"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#operador-l%C3%B3gico-xor-em-javascript"&gt;
  &lt;/a&gt;
  Operador lógico XOR em JavaScript
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Depois de um breve resumo sobre operadores lógicos e tabela verdade agora podemos voltar a resolução do problema que desencadeou esse post.&lt;/li&gt;
&lt;li&gt;Assim como na tabela verdade também existem nas linguagens de programação operadores lógicos, e como seria o operador XOR em JavaScript?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Simples, já que não temos um símbolo de fato desse operador podemos representá-lo com a conversão dos operadores AND para OR que ficaria desde modo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;bCondition1 &amp;amp;&amp;amp; bCondition2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;para&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;!(!bCondition1 || !bCondition2)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Espero que esse post tenha lhe ajudado ou agregado em algo \o/&lt;/p&gt;

&lt;p&gt;Para feedbacks sobre fale comigo pelo &lt;a href="https://twitter.com/biantris_"&gt;Twitter&lt;/a&gt;&lt;br&gt;
Se quiser continuar apoiando meus conteúdos &lt;a href="https://www.patreon.com/beatrizoliveira"&gt;Patreon&lt;/a&gt;&lt;br&gt;
Meu GitHub &lt;a href="https://github.com/beatrizoliveiira"&gt;https://github.com/beatrizoliveiira&lt;/a&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>javascript</category>
      <category>computerscience</category>
      <category>algorithms</category>
    </item>
    <item>
      <title>Responsive Navbar using HTML, CSS, and Javascript</title>
      <author>Amrin</author>
      <pubDate>Tue, 14 Dec 2021 16:14:24 +0000</pubDate>
      <link>https://dev.to/coderamrin/responsive-navbar-using-html-css-and-javascript-1jo4</link>
      <guid>https://dev.to/coderamrin/responsive-navbar-using-html-css-and-javascript-1jo4</guid>
      <description>&lt;p&gt;For every CSS project we build, a responsive navigation bar is a must-have.&lt;/p&gt;

&lt;p&gt;So, today we are going to build a responsive navigation bar using HTML CSS and vanilla javascript.&lt;/p&gt;

&lt;p&gt;** Note: It's a Mobile-First design **&lt;/p&gt;

&lt;p&gt;** If you prefer video. I also created a video. You can watch it here **&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=nR6IQad9PEg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e6Sk3Rlg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e1xr4pti5qn49uwq7jv9.png" alt="IMAGE ALT TEXT HERE" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's get started 🎉🎉&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#part-1-html"&gt;
  &lt;/a&gt;
  Part 1: HTML
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"styles.css"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;responsive navbar&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;header&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;nav&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"nav"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"logo"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;logo&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"hamburger"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"line"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"line"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"line"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"nav__link hide"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;home&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;about&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;contact&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;blog&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/nav&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./script.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Above we got our navbar's markup with a hamburger. &lt;/p&gt;

&lt;p&gt;I linked the CSS and javascript files too. &lt;/p&gt;

&lt;p&gt;Let's see how we can style this markup with CSS&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#part-2-css"&gt;
  &lt;/a&gt;
  Part: 2 CSS
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bold&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;uppercase&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we removed some of the default styles and added some styles to the ** a ** tag.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* nav styles */&lt;/span&gt;

&lt;span class="nc"&gt;.nav&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;space-between&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.logo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.8rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;116&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;padding-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.hamburger&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.hamburger&lt;/span&gt; &lt;span class="nc"&gt;.line&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.nav__link&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;94%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;18px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;lightblue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.nav__link&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.nav__link&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;lightcoral&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.hide&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the main design. Here we styled our navbar the hamburger and the logo.&lt;/p&gt;

&lt;p&gt;The mobile design is done. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gmIq19GM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639497326382/5DA8lPM9X.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gmIq19GM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639497326382/5DA8lPM9X.png" alt="screencapture-127-0-0-1-5500-index-html-2021-12-14-21_54_51.png" width="500" height="645"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We are going to look at the desktop design now.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="n"&gt;screen&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;600px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.nav__link&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;static&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nc"&gt;.nav__link&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inline-block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nc"&gt;.hamburger&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the desktop design, we removed the absolute position and made it a display block.&lt;br&gt;
And to the nav__link's we added display inline-block so that the links say next to each other.&lt;br&gt;
Lastly, added display none to the .hamburger &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G9Uwm_di--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639497595439/3-MnZjkLX.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G9Uwm_di--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639497595439/3-MnZjkLX.png" alt="screencapture-127-0-0-1-5500-index-html-2021-12-14-21_59_21.png" width="880" height="633"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One last thing is left. Now we need to make our hamburger clickable.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#part-3-javascript"&gt;
  &lt;/a&gt;
  Part 3 : Javascript
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hamburger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.hamburger&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;navLink&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.nav__link&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;hamburger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;navLink&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hide&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Here we added a click event to the hamburger and added the classList.toggle to the navLink.&lt;/p&gt;

&lt;p&gt;What the classList.toggle does is, it removes the class if the given class is available and add's if it's not available.&lt;/p&gt;

&lt;p&gt;source code:  &lt;a href="https://github.com/Coderamrin/respons"&gt;https://github.com/Coderamrin/respons&lt;/a&gt;...&lt;/p&gt;

&lt;p&gt;Live preview:  &lt;a href="https://coderamrin.github.io/responsi"&gt;https://coderamrin.github.io/responsi&lt;/a&gt;...&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Thanks for reading.&lt;/p&gt;

&lt;p&gt;If you liked it don't forget to follow me @&lt;a href="https://dev.to@coderamrin"&gt;amrin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;also, I've started a YouTube channel where I share programming tutorials and videos. If that sounds great check it out: &lt;a href="https://www.youtube.com/channel/UCiHUi4wJ6rkPSQ5n4bxKU1A"&gt;https://www.youtube.com/channel/UCiHUi4wJ6rkPSQ5n4bxKU1A&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Have a good one :D&lt;br&gt;
For every CSS project we build, a responsive navigation bar is a must-have.&lt;/p&gt;

&lt;p&gt;So, today we are going to build a responsive navigation bar using HTML CSS and vanilla javascript.&lt;/p&gt;

&lt;p&gt;** Note: It's a Mobile-First design **&lt;/p&gt;

&lt;p&gt;** If you prefer video. I also created a video. You can watch it here **&lt;/p&gt;

&lt;p&gt;%[&lt;a href="https://www.youtube.com/watch?v=nR6IQad9PEg"&gt;https://www.youtube.com/watch?v=nR6IQad9PEg&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;Let's get started 🎉🎉&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#part-1-html"&gt;
  &lt;/a&gt;
  Part 1: HTML
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"styles.css"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;responsive navbar&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;header&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;nav&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"nav"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"logo"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;logo&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"hamburger"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"line"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"line"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"line"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"nav__link hide"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;home&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;about&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;contact&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;blog&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/nav&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./script.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Above we got our navbar's markup with a hamburger. &lt;/p&gt;

&lt;p&gt;I linked the CSS and javascript files too. &lt;/p&gt;

&lt;p&gt;Let's see how we can style this markup with CSS&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#part-2-css"&gt;
  &lt;/a&gt;
  Part: 2 CSS
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bold&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;uppercase&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Here, we removed some of the default styles and added some styles to the ** a ** tag.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* nav styles */&lt;/span&gt;

&lt;span class="nc"&gt;.nav&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;space-between&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.logo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.8rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;116&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;padding-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.hamburger&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.hamburger&lt;/span&gt; &lt;span class="nc"&gt;.line&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.nav__link&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;94%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;18px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;lightblue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.nav__link&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.nav__link&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;lightcoral&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.hide&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the main design. Here we styled our navbar the hamburger and the logo.&lt;/p&gt;

&lt;p&gt;The mobile design is done. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gmIq19GM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639497326382/5DA8lPM9X.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gmIq19GM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639497326382/5DA8lPM9X.png" alt="screencapture-127-0-0-1-5500-index-html-2021-12-14-21_54_51.png" width="500" height="645"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We are going to look at the desktop design now.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="n"&gt;screen&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;600px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.nav__link&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;static&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nc"&gt;.nav__link&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inline-block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nc"&gt;.hamburger&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the desktop design, we removed the absolute position and made it a display block.&lt;br&gt;
And to the nav__link's we added display inline-block so that the links say next to each other.&lt;br&gt;
Lastly, added display none to the .hamburger &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G9Uwm_di--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639497595439/3-MnZjkLX.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G9Uwm_di--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639497595439/3-MnZjkLX.png" alt="screencapture-127-0-0-1-5500-index-html-2021-12-14-21_59_21.png" width="880" height="633"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One last thing is left. Now we need to make our hamburger clickable.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#part-3-javascript"&gt;
  &lt;/a&gt;
  Part 3 : Javascript
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hamburger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.hamburger&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;navLink&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.nav__link&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;hamburger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;navLink&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hide&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we added a click event to the hamburger and added the classList.toggle to the navLink.&lt;/p&gt;

&lt;p&gt;What the classList.toggle does is, it removes the class if the given class is available and add's if it's not available.&lt;/p&gt;

&lt;p&gt;source code:  &lt;a href="https://github.com/Coderamrin/responsive-navbar-css-js"&gt;https://github.com/Coderamrin/responsive-navbar-css-js&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Live preview:  &lt;a href="https://coderamrin.github.io/responsive-navbar-css-js/"&gt;https://coderamrin.github.io/responsive-navbar-css-js/&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Thanks for reading.&lt;/p&gt;

&lt;p&gt;If you liked it don't forget to follow me @&lt;a href="https://dev.to@coderamrin"&gt;amrin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;also, I've started a YouTube channel where I share programming tutorials and videos. If that sounds great check it out: &lt;a href="https://www.youtube.com/channel/UCiHUi4wJ6rkPSQ5n4bxKU1A"&gt;https://www.youtube.com/channel/UCiHUi4wJ6rkPSQ5n4bxKU1A&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Have a good one :D&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>css</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>A Comparison of WYSIWYG HTML Editors: Froala vs. QuillJS</title>
      <author>Kegan Blumenthal</author>
      <pubDate>Tue, 14 Dec 2021 16:02:43 +0000</pubDate>
      <link>https://dev.to/keganblumenthal/a-comparison-of-wysiwyg-html-editors-froala-vs-quilljs-5410</link>
      <guid>https://dev.to/keganblumenthal/a-comparison-of-wysiwyg-html-editors-froala-vs-quilljs-5410</guid>
      <description>&lt;p&gt;Coding is a must when it comes to web development. Does this rule apply today also? Not necessarily if you are aware of HTML WYSIWYG editor. A quick fix for those having coding phobia to easily play with the web content. Do you know what the scary-looking abbreviation WYSIWYG means?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What You See Is What You Get 👀&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;WYSIWYG editor has expanded the scope of web content editing and formatting for a much faster and easier experience. Whether it’s spell-checking, auto-completion or syntax highlighting, you can have it all. Moreover, the tool instantly displays the content live on the web in the exact same way as in the preview.  &lt;/p&gt;

&lt;p&gt;Indeed, there are multiple featured-packed HTML editors to choose from. To help you accomplish more in less time, we have analyzed the marketplace trends and compared the two of the most popular WYSIWYG editors - &lt;strong&gt;Froala&lt;/strong&gt; and &lt;strong&gt;Quill&lt;/strong&gt;.  &lt;/p&gt;

&lt;p&gt;Let’s dig in!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#market-trends"&gt;
  &lt;/a&gt;
  Market trends
&lt;/h2&gt;

&lt;p&gt;As per the &lt;a href="https://www.g2.com/compare/froala-editor-vs-quill-1a2d7035-0d86-4646-9a37-5a04a2adbae6?utm_source=Dev.to&amp;amp;utm_medium=Leads%20Acquisition&amp;amp;utm_content=3rdParty%20-%20APPWRKIT%2B12%2F14%2F2021%2BFroala%20vs.Quill&amp;amp;utm_campaign=APPWRKSIT%202nd%20ARTICLE"&gt;report released by G2 comparison&lt;/a&gt;, the customer review rate for Froala and QuillJS editor is 4.5/5 and 3.9/5, respectively. The product's score at G2 is estimated based on real-time data collected from verified user reviews.&lt;/p&gt;

&lt;p&gt;What’s more? &lt;a href="https://www.g2.com/categories/wysiwyg-editors#grid&amp;amp;utm_source=Dev.to&amp;amp;utm_medium=Leads%20Acquisition&amp;amp;utm_content=3rdParty%20-%20APPWRKIT%2B12%2F14%2F2021%2BFroala%20vs.Quill&amp;amp;utm_campaign=APPWRKSIT%202nd%20ARTICLE"&gt;G2 Grid for WYSIWYG Editors&lt;/a&gt; has crowned Froala as one of the top-performing leaders while QuillJS holds a strong position among the contenders in terms of market presence and customer satisfaction that set Froala ahead in the race as shown below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--drG4BT43--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oytbb6epnof3f78q3wm5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--drG4BT43--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oytbb6epnof3f78q3wm5.png" alt="Image description" width="880" height="634"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While assessing the two solutions, reviewers felt that Froala editor has better ongoing product support, updates, roadmaps and meets the needs of their business better than Quill. Along the way, Froala also offers over 170 responsive &lt;a href="https://froala.com/design-blocks/?utm_source=Dev.to&amp;amp;utm_medium=Leads%20Acquisition&amp;amp;utm_content=3rdParty%20-%20APPWRKIT%2B12%2F14%2F2021%2BFroala%20vs.Quill&amp;amp;utm_campaign=APPWRKSIT%202nd%20ARTICLE"&gt;design blocks&lt;/a&gt; ready to be used in websites or applications. These building blocks are based on the Bootstrap library and help to frame beautiful web content. It’s a modern design framework that combines HTML5 and CSS3 design blocks together to build responsive websites and applications.&lt;/p&gt;

&lt;p&gt;In Github, Froala design blocks is one of the top starred modern web development frameworks with &lt;a href="https://github.com/froala/design-blocks?utm_source=Dev.to&amp;amp;utm_medium=Leads%20Acquisition&amp;amp;utm_content=3rdParty%20-%20APPWRKIT%2B12%2F14%2F2021%2BFroala%20vs.Quill&amp;amp;utm_campaign=APPWRKSIT%202nd%20ARTICLE"&gt;13.3k stars and 1.2k forks&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Ahead, we’ll see powerful features of the two intuitive and overwhelming WYSIWYG text editors.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#froala"&gt;
  &lt;/a&gt;
  Froala
&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://https://froala.com/?utm_source=Dev.to&amp;amp;utm_medium=Leads%20Acquisition&amp;amp;utm_content=3rdParty%20-%20APPWRKIT%2B12%2F14%2F2021%2BFroala%20vs.Quill&amp;amp;utm_campaign=APPWRKSIT%202nd%20ARTICLE"&gt;Froala&lt;/a&gt; is the all-in-one visual development tool for editing and formatting web apps and websites. It is one of the few text editors featuring a modern and retina-ready design. Froala provides a visual text editor and a code editor with standard features such as code completion, syntax highlighting, and code collapsing.&lt;/p&gt;

&lt;p&gt;More advanced features such as dynamic code introspection for generating code hints assist the user in writing code. Furthermore, the user-friendly interface is based on the latest web design trend, and it is compatible with any web page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M7a6ik-b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xt7uaetbqgbqvt6neq47.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M7a6ik-b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xt7uaetbqgbqvt6neq47.png" alt="Image description" width="750" height="565"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#key-features"&gt;
  &lt;/a&gt;
  Key Features
&lt;/h2&gt;

&lt;p&gt;Froala is loaded with a tonne of powerful features that help you to stand out in the crowd. The platform offers an all-in-one rich text-editing package for optimizing any web application or website. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;To get a better feel of how far things have come, let’s take a look at a few of the noteworthy features.&lt;/em&gt;&lt;/strong&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-compatibility"&gt;
  &lt;/a&gt;
  1 - Compatibility
&lt;/h3&gt;

&lt;p&gt;From Safari to Chrome, Froala &lt;a href="http://https://froala.com/wysiwyg-editor/?utm_source=Dev.to&amp;amp;utm_medium=Leads%20Acquisition&amp;amp;utm_content=3rdParty%20-%20APPWRKIT%2B12%2F14%2F2021%2BFroala%20vs.Quill&amp;amp;utm_campaign=APPWRKSIT%202nd%20ARTICLE"&gt;WYSIWYG editor&lt;/a&gt; runs seamlessly across all major web browsers, including Firefox, Chrome, Opera, Safari, and Microsoft Edge.&lt;/p&gt;

&lt;p&gt;Not only browsers, but Froala is accessible across multiple operating systems and devices, thus it guarantees a wonderful user experience every time to users.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;The true editor without any compatibility limitations! Now we are talking.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-customization"&gt;
  &lt;/a&gt;
  2 - Customization
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;In today’s world, users expect more control over the content they are producing without putting coding skills into action or hiring somebody else for it.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Froala understands this trend very well and hence, the editor has been designed to offer comprehensive customization features to make editing a convenient job. Using custom plugins you can extend the functionalities and customize the existing features. Also, the user has complete access over the toolbar to select the layout, content, design, or functionality that appeals to them.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2ABPWjG2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j5tivv61w3l941gk3aip.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2ABPWjG2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j5tivv61w3l941gk3aip.png" alt="Image description" width="880" height="519"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-markdown-support"&gt;
  &lt;/a&gt;
  3 - Markdown Support
&lt;/h3&gt;

&lt;p&gt;Froala editor enables you to format text content using prebuilt markdown commands via the &lt;a href="http://https://froala.com/wysiwyg-editor/docs/plugins/?utm_source=Dev.to&amp;amp;utm_medium=Leads%20Acquisition&amp;amp;utm_content=3rdParty%20-%20APPWRKIT%2B12%2F14%2F2021%2BFroala%20vs.Quill&amp;amp;utm_campaign=APPWRKSIT%202nd%20ARTICLE"&gt;Markdown plugin&lt;/a&gt;. The plugin can be used to mark down the Image, heading, list, code block, table, and many more. &lt;/p&gt;

&lt;p&gt;Besides, traditional users can get a clearer sense of what they are creating!&lt;/p&gt;

&lt;p&gt;All a user has to do is - &lt;strong&gt;&lt;em&gt;switch to markdown mode, split the screen to view the real-time changes, and start rolling!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Rg8QSDj---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yjnmns8776sx82woebhe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rg8QSDj---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yjnmns8776sx82woebhe.png" alt="Image description" width="880" height="457"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-autosave-amp-autocorrect"&gt;
  &lt;/a&gt;
  4 - Autosave &amp;amp; Autocorrect
&lt;/h3&gt;

&lt;p&gt;We introduced this feature to simplify the way you optimize content!&lt;/p&gt;

&lt;p&gt;The Autosave plugin has a built-in feature that automatically hits HTTP requests from JS to the server, which handles the requests and saves the data automatically.&lt;/p&gt;

&lt;p&gt;The autocorrect feature turns predefined snippets into special symbols and characters. Users can write complex characters such as ½ becomes as easy as writing 1/2. What’s more? The feature also allows you to frame your own editing rules!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-realtime-collaboration"&gt;
  &lt;/a&gt;
  5 - Real-time collaboration
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;“Talent wins games, but teamwork and intelligence win championships.” - Michael Jordan.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Froala implemented this principle to offer the users a real-time collaboration for synchronized content creation and instant cooperation with colleagues. You can track changes through dynamic editing features for an asynchronous and co-authoring experience.&lt;/p&gt;

&lt;p&gt;With real-time collaboration, users can instantly see content changes with the name of the editor. In real-time collaboration, you can view the list of active users you are collaborating with at the top-right corner of the editor window.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6sSq8Btr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r3gssj8ybtnj38mpocga.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6sSq8Btr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r3gssj8ybtnj38mpocga.png" alt="Image description" width="880" height="249"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For more information, you can check the documentation - &lt;a href="https://froala.com/wysiwyg-editor/examples/codox-real-time-editing/?utm_source=Dev.to&amp;amp;utm_medium=Leads%20Acquisition&amp;amp;utm_content=3rdParty%20-%20APPWRKIT%2B12%2F14%2F2021%2BFroala%20vs.Quill&amp;amp;utm_campaign=APPWRKSIT%202nd%20ARTICLE"&gt;how to install plugin for real-time collaboration&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-track-changes"&gt;
  &lt;/a&gt;
  6 - Track Changes
&lt;/h3&gt;

&lt;p&gt;The &lt;a href="http://https://froala.com/track-changes-plugin/?utm_source=Dev.to&amp;amp;utm_medium=Leads%20Acquisition&amp;amp;utm_content=3rdParty%20-%20APPWRKIT%2B12%2F14%2F2021%2BFroala%20vs.Quill&amp;amp;utm_campaign=APPWRKSIT%202nd%20ARTICLE"&gt;track changes&lt;/a&gt; plugin allows users to keep the track of all changes users make to the text, format, tables, styles, tables, and more. You can easily accept or decline the introduced changes in the content. It enables users to collaborate on documents while maintaining complete control over the content creation process. It is fully compatible with real-time collaboration.&lt;/p&gt;

&lt;p&gt;For example, some users can operate in the editing mode while others can operate in suggestion mode by enabling track changes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-froala"&gt;
  &lt;/a&gt;
  Why Froala?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Why not?&lt;/strong&gt; Froala is a perfect editor choice if you are looking for diverse functionalities, customization features, extensive documentation, and reliable support. Besides, there's no need to reinvent the wheel to integrate additional features; the rich text editor comes with over 30 out-of-the-box plugins to choose from.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Without any extra steps, it provides:&lt;/strong&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-high-performance"&gt;
  &lt;/a&gt;
  1 - High Performance
&lt;/h3&gt;

&lt;p&gt;Froala is faster than the blink of an eye; the rich editor initiates under 40ms while providing an amazing editing experience. It is carefully designed with high performance in mind and can withstand the most rigorous tests. The lightweight and well-structured architecture make it the best Javascript-rich text editor in every single aspect.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-security"&gt;
  &lt;/a&gt;
  2 - Security
&lt;/h3&gt;

&lt;p&gt;Froala WYSIWYG HTML editor has a robust defense mechanism against XSS attacks. It is regularly updated, which significantly reduces vulnerabilities. The input data is screened and validated on both the client-side to protect against cross-site scripting attacks.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-extend-functionality"&gt;
  &lt;/a&gt;
  3 - Extend Functionality
&lt;/h3&gt;

&lt;p&gt;The plugins help to manage and extend the functionalities of the editor. You can use multiple built-in plugins or you can also build your own custom plugins as per your requirements to extend the editor functionality.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wPFs8ouE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/54kra3lih71ppqm5g80c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wPFs8ouE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/54kra3lih71ppqm5g80c.png" alt="Image description" width="880" height="449"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Follow the steps below for downloading Froala plugins.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 1:&lt;/strong&gt; Launch the &lt;a href="https://froala.com/wysiwyg-editor/docs/plugins/?utm_source=Dev.to&amp;amp;utm_medium=Leads%20Acquisition&amp;amp;utm_content=3rdParty%20-%20APPWRKIT%2B12%2F14%2F2021%2BFroala%20vs.Quill&amp;amp;utm_campaign=APPWRKSIT%202nd%20ARTICLE"&gt;Froala Plugins&lt;/a&gt; documentation on your browser.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wiB9Wtrs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r00hm1oepq0tvc448xpm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wiB9Wtrs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r00hm1oepq0tvc448xpm.png" alt="Image description" width="880" height="468"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2:&lt;/strong&gt; Click on the icon of the required &lt;strong&gt;plugin&lt;/strong&gt; you want to download. For example, Align.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tOYJOoP9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wbwv7ctti6j0z9rd22cx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tOYJOoP9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wbwv7ctti6j0z9rd22cx.png" alt="Image description" width="880" height="523"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3:&lt;/strong&gt; Click on the &lt;strong&gt;Download&lt;/strong&gt; button to download the plugin.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pcXk11Hk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w38n1p82ds3rbr3os0kq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pcXk11Hk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w38n1p82ds3rbr3os0kq.png" alt="Image description" width="880" height="420"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 4:&lt;/strong&gt; Enter the required details and click on the download button to &lt;strong&gt;download&lt;/strong&gt; the plugin.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D7Fe3N-0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x12oniqly917lx0fsv1v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D7Fe3N-0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x12oniqly917lx0fsv1v.png" alt="Image description" width="880" height="528"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Alternatively, for faster plugin integration, you also use a CDN link for each plugin; for example, you can check the CDN link for &lt;a href="https://froala.com/wysiwyg-editor/?utm_source=Dev.to&amp;amp;utm_medium=Leads%20Acquisition&amp;amp;utm_content=3rdParty%20-%20APPWRKIT%2B12%2F14%2F2021%2BFroala%20vs.Quill&amp;amp;utm_campaign=APPWRKSIT%202nd%20ARTICLE"&gt;Align plugin&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9AjXjHSV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/39zhh63q2wvt8he7avyx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9AjXjHSV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/39zhh63q2wvt8he7avyx.png" alt="Image description" width="880" height="541"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Simple, Right? Let’s move to the next section and take a look at QuillJS and its features.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quilljs"&gt;
  &lt;/a&gt;
  QuillJS
&lt;/h2&gt;

&lt;p&gt;Quill is an open-source WYSIWYG editor built for the modern web. It is designed as an easy-to-use editor that helps create and format content across the web. It is built on top of consistent and predictable constructs. With its extensible architecture and an expressive API, you can completely customize the editor to fulfill your needs.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dtVxzXSh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rqzgosyt65tl6f0dslwk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dtVxzXSh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rqzgosyt65tl6f0dslwk.png" alt="Image description" width="880" height="441"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#key-features"&gt;
  &lt;/a&gt;
  Key Features
&lt;/h2&gt;

&lt;p&gt;QuillJS is designed with numerous features to make it an easy-to-use editor for creating content across the web.&lt;/p&gt;

&lt;p&gt;Let’s see what this editor has got in its bucket list that can break the wall of code in the web development space.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-api-driven"&gt;
  &lt;/a&gt;
  1 - API Driven
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.google.com/url?q=https://quilljs.com/&amp;amp;sa=D&amp;amp;source=editors&amp;amp;ust=1639491435337000&amp;amp;usg=AOvVaw0Bm6T6EAdxFXr4mmGgmnri"&gt;Quill&lt;/a&gt; is an API-driven platform that makes editing and formatting easy. You can call core API calls to create arbitrary indexes, modify content, extend functionalities, and more. Users don’t need to traverse the DOM to change the font-weight style attributes; instead, call API. Its event API also reports changes in an intuitive JSON format - no need to parse HTML or diff DOM trees.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-deltas"&gt;
  &lt;/a&gt;
  2 - Deltas
&lt;/h3&gt;

&lt;p&gt;QuillJS has its separate standalone library - &lt;a href="https://www.google.com/url?q=https://github.com/quilljs/delta/&amp;amp;sa=D&amp;amp;source=editors&amp;amp;ust=1639491435340000&amp;amp;usg=AOvVaw0vdoSDDrVeSp0WLekZUTtl"&gt;Deltas&lt;/a&gt;. The Deltas are the simple and expressive format used in interpreting Quill’s content modifications for formatting. It’s a strict subset of JSON and can be easily parsed. This library can help in describing text and formatting information of any Quill document.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-parchment"&gt;
  &lt;/a&gt;
  3 - Parchment
&lt;/h3&gt;

&lt;p&gt;To provide users with a consistent editing experience, Quill offers a document model - &lt;a href="https://www.google.com/url?q=https://github.com/quilljs/parchment/&amp;amp;sa=D&amp;amp;source=editors&amp;amp;ust=1639491435341000&amp;amp;usg=AOvVaw3qW2Mb6cu1VE73AaOm5GG0"&gt;Parchment&lt;/a&gt;. Parchment provides a powerful abstraction over the DOM to enable custom formats over the content in Quill. With Parchment, you can now enhance or customize existing Quill formats or add entirely new ones in your application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-quilljs"&gt;
  &lt;/a&gt;
  Why QuillJS
&lt;/h2&gt;

&lt;p&gt;Quill editor offers multiple customization features to suit your needs. You can easily extend existing functionality and change styling themes using the APIs. Also, you can strikingly customize the editor by simply adding features and functionalities using individual modules.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here are some of the reasons how QuillJS features can make your life easier.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-easy-to-use"&gt;
  &lt;/a&gt;
  1 - Easy to use
&lt;/h3&gt;

&lt;p&gt;Quill offers the features in an easy-to-use package format. You can configure logical default settings immediately using a few lines of Javascript command. For easy editing, the syntax module detects and highlights syntax to format code blocks automatically. With API and modular architecture, it can be customized to suit your needs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-customization"&gt;
  &lt;/a&gt;
  2 - Customization
&lt;/h3&gt;

&lt;p&gt;Themes of the CSS stylesheet primarily control Quill visuals, and other changes can be easily made by overriding the existing codebase. Overriding makes customization simple with any web application. For this purpose, you can use a browser console to inspect the elements, which will allow you to view and modify them. For example, the toolbar in the user interface can be customized through the toolbar module.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DKoNV2nQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ka0zx7oa5bvw18utf66h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DKoNV2nQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ka0zx7oa5bvw18utf66h.png" alt="Image description" width="880" height="236"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-crossplatform"&gt;
  &lt;/a&gt;
  3 - Cross-Platform
&lt;/h3&gt;

&lt;p&gt;Cross-platform support is not a bar for QuillJS; it runs or works the same way across all browsers, devices, and operating systems. It’s not only equally functional but also strikes the same user experience across all browsers and devices. If some content produces a particular markup in Chrome on OSX, it will also make the same markup on Mozilla Firefox. If hitting enter preserves bold format state in Firefox on Windows, it will be kept on mobile Safari.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#feature-comparison-table-froala-vs-quilljs"&gt;
  &lt;/a&gt;
  Feature Comparison Table: Froala Vs. QuillJS
&lt;/h2&gt;

&lt;p&gt;After, evaluating these two text editors, it is fair to say that Froala has an edge over QuillJS with over 100 features to help users to construct quality content. However, let’s check the feature comparison table.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xzz55zVE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vfr78yr3ehvysfl1t9vh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xzz55zVE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vfr78yr3ehvysfl1t9vh.png" alt="Image description" width="850" height="900"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrap-up"&gt;
  &lt;/a&gt;
  Wrap Up
&lt;/h2&gt;

&lt;p&gt;A WYSIWYG editor not only gifts editing powers to the users but also simplifies the whole content development process without investing in coding skills. Above, we have rolled down the features of the top picks in the market but the only catch is to go for the option that aligns with your needs.&lt;/p&gt;

&lt;p&gt;Quill is quite right with the price, but “free” comes with its costs. On this basis, Quill deficit of the most powerful content editing features that set Froala apart. If you are looking for a more sophisticated WYSIWYG editor, go with Froala. The flexibility, easy-to-understand documentation, and more than 100 features alone are great assets.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#takeaway"&gt;
  &lt;/a&gt;
  Takeaway
&lt;/h2&gt;

&lt;p&gt;Before you jump into optimizing your web content, make sure you pick the right text editor. There are tons of different WYSIWYG editors available on the market today but what matters the most is whether the editor makes your content optimization process easy and emphatic?&lt;/p&gt;

&lt;p&gt;Froala WYSIWYG editor offers a striking collaborative platform to optimize and publish content on the web. Whether you are dealing with an enterprise website or just want to customize the user interface designs of your blog site - Froala editor is ready to serve you all.  &lt;/p&gt;

</description>
      <category>html</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>github</category>
    </item>
    <item>
      <title>How to Measure JavaScript Execution Time</title>
      <author>saransh kataria</author>
      <pubDate>Tue, 14 Dec 2021 15:53:51 +0000</pubDate>
      <link>https://dev.to/saranshk/how-to-measure-javascript-execution-time-5h2</link>
      <guid>https://dev.to/saranshk/how-to-measure-javascript-execution-time-5h2</guid>
      <description>&lt;p&gt;When it comes to the performance of applications, measuring performance becomes important. For anything to be optimized, it must be measured first, optimized, and measured again to capture gains. Measuring JavaScript execution time thus becomes one of these steps.&lt;/p&gt;

&lt;p&gt;Modern browsers and the Node.js platform provide various APIs to measure code execution time.&lt;/p&gt;

&lt;p&gt;We will be discussing a few ways of measuring JavaScript execution time in this post.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-date-object"&gt;
  &lt;/a&gt;
  1. Date object
&lt;/h2&gt;

&lt;p&gt;The easiest way to track execution time is to use a date object. Using Date.now() that returns the total number of milliseconds elapsed since the Unix epoch, we can store the value before and after the execution of the function to be measured and then get the difference of the two.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const start = Date.now();

await functionToBeMeasured();

const end = Date.now();
console.log(`Execution time: ${end - start} ms`);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#2-console-time"&gt;
  &lt;/a&gt;
  2. Console time
&lt;/h2&gt;

&lt;p&gt;Another easy solution is to use a console timer. The console.time() method starts a timer with a label. And a subsequent call to the console.timeEnd() method with the same label will output the time elapsed since the method was started.&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.time('Execution Time');

await functionToBeMeasured();

console.timeEnd('Execution Time');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#3-performance-timers"&gt;
  &lt;/a&gt;
  3. Performance timers
&lt;/h2&gt;

&lt;p&gt;Console timers do not provide high accuracy. If we want accuracy in 1-millisecond increments, we can use high-resolution timers like performance.now(). It also avoids some synchronization issues with the system clock.&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const start = performance.now();

await functionToBeMeasured();

const end = performance.now();
console.log(`Execution time: ${end - start} ms`);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If measuring in Node, process.hrtime.bigint() returns accuracy in nanoseconds.&lt;/p&gt;

&lt;p&gt;This covers the ways of measuring JavaScript execution time. If we run into a scenario wherein we want to start measuring JavaScript execution time for multiple functions, we can make use of the Performance API and &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/PerformanceObserver"&gt;Performance Observer&lt;/a&gt;. They provide markers to track multiple entries and measure them independently.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#measuring-javascript-execution-time-in-unit-tests"&gt;
  &lt;/a&gt;
  Measuring JavaScript execution time in Unit tests
&lt;/h2&gt;

&lt;p&gt;For ensuring the execution of functions is fast enough, it can be made a part of our unit tests. Many frameworks (Jest, Jasmine, etc.) allow setting of a timeout for the execution of a test. The timeout feature can then be used to fail a test if the method takes longer to execute.&lt;/p&gt;

&lt;p&gt;With Jasmine:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;describe('testing time duration', () =&amp;gt; {
  it('does not take longer than 5 seconds', async () =&amp;gt; {
    await functionToBeMeasured();
  }, 5000);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Originally published at &lt;a href="https://www.wisdomgeek.com/development/web-development/javascript/measuring-javascript-execution-time/"&gt;https://www.wisdomgeek.com&lt;/a&gt; on July 1, 2021.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
