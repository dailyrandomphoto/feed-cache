<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>A Developer Community Encouraging Active Coding Practice üèÅ </title>
      <author>Fum</author>
      <pubDate>Sat, 24 Apr 2021 17:39:42 +0000</pubDate>
      <link>https://dev.to/inspirezone/a-developer-community-encouraging-active-coding-practice-4koh</link>
      <guid>https://dev.to/inspirezone/a-developer-community-encouraging-active-coding-practice-4koh</guid>
      <description>&lt;h1&gt;
  &lt;a href="#what-is-inspirezone"&gt;
  &lt;/a&gt;
  What is inspirezone?
&lt;/h1&gt;

&lt;p&gt;Inspirezone is a &lt;a href="https://community.inspirezone.tech/"&gt;community for developers&lt;/a&gt; and we are working on building an environment that will inspire developers of all levels of experience to reach their highest potential.&lt;/p&gt;

&lt;p&gt;We are all about encouraging you to accelerate your programming skills through &lt;strong&gt;collaboration, active practice and group accountability.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We are also a &lt;a href="https://inspirezone.tech/blog/"&gt;developer blog&lt;/a&gt; covering topics on programming practice, productivity, tools and tips on increasing your proficiency as a developer.&lt;/p&gt;

&lt;p&gt;Our community is now beginning a series of coding challenges to encourage active participation from members. Use these challenges to refresh or develop your knowledge of various programming languages.&lt;/p&gt;

&lt;p&gt;We are launching the first coding challenge. It‚Äôs a relatively simple one as we‚Äôll use this to plan out improvements and ideas for future challenges.&lt;/p&gt;

&lt;p&gt;We are seeking developers who are &lt;strong&gt;dedicated&lt;/strong&gt; and &lt;strong&gt;motivated&lt;/strong&gt; in accelerating their growth and are willing to &lt;strong&gt;actively participate&lt;/strong&gt; in collaboration activities like our challenges. &lt;/p&gt;

&lt;p&gt;If you‚Äôre not a member yet, consider &lt;a href="https://community.inspirezone.tech/"&gt;joining us&lt;/a&gt; and become a part of our influential community!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-first-challenge-develop-a-simple-calculator-using-any-programming-language-of-your-choice"&gt;
  &lt;/a&gt;
  ‚öîÔ∏è The First Challenge - Develop a simple calculator using any programming language of your choice
&lt;/h2&gt;

&lt;p&gt;The full details and rules of this challenge are listed on the &lt;a href="https://github.com/inspirezonetech/Calculator-Challenge-Inspirezone"&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/inspirezonetech"&gt;
        inspirezonetech
      &lt;/a&gt; / &lt;a href="https://github.com/inspirezonetech/Calculator-Challenge-Inspirezone"&gt;
        Calculator-Challenge-Inspirezone
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Calculator challenge hosted by the inspirezone.tech dev community
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
üèÅ Calculator Coding Challenge üèÅ | Hosted by the &lt;a href="https://community.inspirezone.tech/" rel="nofollow"&gt;Inspirezone Dev Community&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/7cf7a7636243f21bf784888bc9631e244622fe49e19957242f2f8f37c19d1242/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f496e73706972657a6f6e65253230446576253230436f6d6d756e6974792d436f64696e672532304368616c6c656e67652d2532336361656663633f7374796c653d666f722d7468652d6261646765266c6f676f3d676974687562"&gt;&lt;img src="https://camo.githubusercontent.com/7cf7a7636243f21bf784888bc9631e244622fe49e19957242f2f8f37c19d1242/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f496e73706972657a6f6e65253230446576253230436f6d6d756e6974792d436f64696e672532304368616c6c656e67652d2532336361656663633f7374796c653d666f722d7468652d6261646765266c6f676f3d676974687562" alt="Inspirezone calculator challenge badge"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/9c0d0763c4ad5fc2f7dd6f9e68c67524c5fc8c2c54e84248fa459523203888e9/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f557365253230416e792532304c616e67756167652d6666363337623f7374796c653d666f722d7468652d6261646765266c6f676f3d646174613a696d6167652f7376672b786d6c3b6261736536342c5044393462577767646d567963326c76626a30694d5334774969426c626d4e765a476c755a7a30696458526d4c546769507a343863335a6e49485a6c636e4e7062323439496a45754d53496761575139496b786865575679587a4569494868746247357a50534a6f644852774f693876643364334c6e637a4c6d39795a7938794d4441774c334e325a79496765473173626e4d3665477870626d7339496d6830644841364c79393364336375647a4d7562334a6e4c7a45354f546b7665477870626d736949486739496a427765434967655430694d4842344969423261575633516d393450534977494441674d5449794c6a6734494445774d5334314e7949676333523562475539496d567559574a735a53316959574e725a334a766457356b4f6d356c64794177494441674d5449794c6a6734494445774d5334314e794967654731734f6e4e7759574e6c50534a77636d567a5a584a325a53492b5047632b50484268644767675a443069545451304c6a6b334c4445794c6a6730614330784e793479544441734e446b754d7a644d4d6a63754e7a63734f4455754f5767784e793479544445334c6a49734e446b754d7a644d4e4451754f5463734d5449754f44524d4e4451754f5463734d5449754f445236494530334e7934354d5377784d6934344e4767784e793479624449334c6a63334c444d324c6a557a494577354e5334784d5377344e533435614330784e793479624449334c6a63334c544d324c6a557a544463334c6a6b784c4445794c6a6730544463334c6a6b784c4445794c6a67306569424e4e7a41754d5463734d4334774e4777314c6a6b324c4445754d7a6c6a4d4334354e4377774c6a49794c4445754e5449734d5334784e6977784c6a4d784c4449754d5777744d6a49754e5377354e6934324f53426a4c5441754d6a49734d4334354d7930784c6a45324c4445754e5449744d6934784c4445754d7a46734c5455754f5455744d53347a4f574d744d4334354e4330774c6a49794c5445754e5449744d5334784e6930784c6a4d784c5449754d5777794d6934314c546b324c6a5935517a59344c6a4d734d4334304d6977324f5334794e4330774c6a45334c4463774c6a45334c4441754d44524d4e7a41754d5463734d4334774e43424d4e7a41754d5463734d4334774e486f694c7a34384c32632b5043397a646d632b"&gt;&lt;img src="https://camo.githubusercontent.com/9c0d0763c4ad5fc2f7dd6f9e68c67524c5fc8c2c54e84248fa459523203888e9/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f557365253230416e792532304c616e67756167652d6666363337623f7374796c653d666f722d7468652d6261646765266c6f676f3d646174613a696d6167652f7376672b786d6c3b6261736536342c5044393462577767646d567963326c76626a30694d5334774969426c626d4e765a476c755a7a30696458526d4c546769507a343863335a6e49485a6c636e4e7062323439496a45754d53496761575139496b786865575679587a4569494868746247357a50534a6f644852774f693876643364334c6e637a4c6d39795a7938794d4441774c334e325a79496765473173626e4d3665477870626d7339496d6830644841364c79393364336375647a4d7562334a6e4c7a45354f546b7665477870626d736949486739496a427765434967655430694d4842344969423261575633516d393450534977494441674d5449794c6a6734494445774d5334314e7949676333523562475539496d567559574a735a53316959574e725a334a766457356b4f6d356c64794177494441674d5449794c6a6734494445774d5334314e794967654731734f6e4e7759574e6c50534a77636d567a5a584a325a53492b5047632b50484268644767675a443069545451304c6a6b334c4445794c6a6730614330784e793479544441734e446b754d7a644d4d6a63754e7a63734f4455754f5767784e793479544445334c6a49734e446b754d7a644d4e4451754f5463734d5449754f44524d4e4451754f5463734d5449754f445236494530334e7934354d5377784d6934344e4767784e793479624449334c6a63334c444d324c6a557a494577354e5334784d5377344e533435614330784e793479624449334c6a63334c544d324c6a557a544463334c6a6b784c4445794c6a6730544463334c6a6b784c4445794c6a67306569424e4e7a41754d5463734d4334774e4777314c6a6b324c4445754d7a6c6a4d4334354e4377774c6a49794c4445754e5449734d5334784e6977784c6a4d784c4449754d5777744d6a49754e5377354e6934324f53426a4c5441754d6a49734d4334354d7930784c6a45324c4445754e5449744d6934784c4445754d7a46734c5455754f5455744d53347a4f574d744d4334354e4330774c6a49794c5445754e5449744d5334784e6930784c6a4d784c5449754d5777794d6934314c546b324c6a5935517a59344c6a4d734d4334304d6977324f5334794e4330774c6a45334c4463774c6a45334c4441754d44524d4e7a41754d5463734d4334774e43424d4e7a41754d5463734d4334774e486f694c7a34384c32632b5043397a646d632b" alt="Any programming language welcome"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/ba4442afc78f69c6476cde1052319f291542af2413ed2f66ae29ac6068d05c66/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f57652532304172652532304f6e253230446973636f72642d3732383944413f7374796c653d666f722d7468652d6261646765266c6f676f3d646973636f7264266c6f676f436f6c6f723d7768697465"&gt;&lt;img src="https://camo.githubusercontent.com/ba4442afc78f69c6476cde1052319f291542af2413ed2f66ae29ac6068d05c66/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f57652532304172652532304f6e253230446973636f72642d3732383944413f7374796c653d666f722d7468652d6261646765266c6f676f3d646973636f7264266c6f676f436f6c6f723d7768697465" alt="We are on Discord"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/83265dcd64f7e5f49aef61167a70c0115b6ec430c506279e6840a92fac1bcc32/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f436f6e747269627574696f6e7325323057656c636f6d652d6631396366373f7374796c653d666f722d7468652d6261646765266c6f676f3d646174613a696d6167652f7376672b786d6c3b6261736536342c5044393462577767646d567963326c76626a30694d5334774969426c626d4e765a476c755a7a30696458526d4c546769507a343863335a6e49485a6c636e4e7062323439496a45754d53496761575139496b786865575679587a4569494868746247357a50534a6f644852774f693876643364334c6e637a4c6d39795a7938794d4441774c334e325a79496765473173626e4d3665477870626d7339496d6830644841364c79393364336375647a4d7562334a6e4c7a45354f546b7665477870626d736949486739496a427765434967655430694d4842344969423261575633516d393450534977494441674d5449794c6a6734494445774e7934304d5349676333523562475539496d567559574a735a53316959574e725a334a766457356b4f6d356c64794177494441674d5449794c6a6734494445774e7934304d534967654731734f6e4e7759574e6c50534a77636d567a5a584a325a53492b50484e306557786c4948523563475539496e526c6548517659334e7a496a34756333517765325a7062477774636e56735a54706c646d56756232526b4f324e7361584174636e56735a54706c646d56756232526b4f3330384c334e306557786c506a786e506a78775958526f49474e7359584e7a50534a7a6444416949475139496b30324d4334344d7977784e7934784f554d324f4334344e4377344c6a67304c4463304c6a51314c4445754e6a49734f4459754e7a6b734d4334794d574d794d7934784e7930794c6a59324c4451304c6a51344c4449784c6a41324c444d794c6a63344c4451304c6a517849474d744d79347a4d7977324c6a59314c5445774c6a45784c4445304c6a55324c5445334c6a59784c4449794c6a4d79597930344c6a497a4c4467754e5449744d5463754d7a51734d5459754f4463744d6a4d754e7a49734d6a4d754d6d77744d5463754e4377784e7934794e6b77304e6934304e6977354d7934314e6b4d794f5334784e6977334e6934354c4441754f5455734e5455754f544d734d4334774d6977794f5334354e5342444c5441754e6a4d734d5445754e7a55734d544d754e7a4d734d4334774f53777a4d4334794e5377774c6a4e444e4455754d4445734d4334314c4455784c6a49794c4463754f4451734e6a41754f444d734d5463754d546c4d4e6a41754f444d734d5463754d546c4d4e6a41754f444d734d5463754d546c364969382b5043396e506a777663335a6e50673d3d"&gt;&lt;img src="https://camo.githubusercontent.com/83265dcd64f7e5f49aef61167a70c0115b6ec430c506279e6840a92fac1bcc32/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f436f6e747269627574696f6e7325323057656c636f6d652d6631396366373f7374796c653d666f722d7468652d6261646765266c6f676f3d646174613a696d6167652f7376672b786d6c3b6261736536342c5044393462577767646d567963326c76626a30694d5334774969426c626d4e765a476c755a7a30696458526d4c546769507a343863335a6e49485a6c636e4e7062323439496a45754d53496761575139496b786865575679587a4569494868746247357a50534a6f644852774f693876643364334c6e637a4c6d39795a7938794d4441774c334e325a79496765473173626e4d3665477870626d7339496d6830644841364c79393364336375647a4d7562334a6e4c7a45354f546b7665477870626d736949486739496a427765434967655430694d4842344969423261575633516d393450534977494441674d5449794c6a6734494445774e7934304d5349676333523562475539496d567559574a735a53316959574e725a334a766457356b4f6d356c64794177494441674d5449794c6a6734494445774e7934304d534967654731734f6e4e7759574e6c50534a77636d567a5a584a325a53492b50484e306557786c4948523563475539496e526c6548517659334e7a496a34756333517765325a7062477774636e56735a54706c646d56756232526b4f324e7361584174636e56735a54706c646d56756232526b4f3330384c334e306557786c506a786e506a78775958526f49474e7359584e7a50534a7a6444416949475139496b30324d4334344d7977784e7934784f554d324f4334344e4377344c6a67304c4463304c6a51314c4445754e6a49734f4459754e7a6b734d4334794d574d794d7934784e7930794c6a59324c4451304c6a51344c4449784c6a41324c444d794c6a63344c4451304c6a517849474d744d79347a4d7977324c6a59314c5445774c6a45784c4445304c6a55324c5445334c6a59784c4449794c6a4d79597930344c6a497a4c4467754e5449744d5463754d7a51734d5459754f4463744d6a4d754e7a49734d6a4d754d6d77744d5463754e4377784e7934794e6b77304e6934304e6977354d7934314e6b4d794f5334784e6977334e6934354c4441754f5455734e5455754f544d734d4334774d6977794f5334354e5342444c5441754e6a4d734d5445754e7a55734d544d754e7a4d734d4334774f53777a4d4334794e5377774c6a4e444e4455754d4445734d4334314c4455784c6a49794c4463754f4451734e6a41754f444d734d5463754d546c4d4e6a41754f444d734d5463754d546c4d4e6a41754f444d734d5463754d546c364969382b5043396e506a777663335a6e50673d3d" alt="Contributions welcome"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://inspirezone.tech" rel="nofollow"&gt; &lt;img src="https://camo.githubusercontent.com/c568bfb9e1995eb3a26be19be13ce0de914c75070b33b3c97a952ad1b14ca725/68747470733a2f2f696e73706972657a6f6e652e746563682f77702d636f6e74656e742f75706c6f6164732f323032312f30342f63616c63756c61746f722d6368616c6c656e67652d62616e6e65722e706e67" alt="inspirezone calculator challenge banner"&gt; &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This Repo is part of the inspirezone Dev Community Coding Challenges. Please read challenge details below.&lt;br&gt;
&lt;a href="https://community.inspirezone.tech/" rel="nofollow"&gt;JOIN THE COMMUNITY HERE&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;You are welcome to contribute to this repo. If you want to contribute please read the &lt;a href="https://raw.githubusercontent.com/inspirezonetech/Calculator-Challenge-Inspirezone/main/./CONTRIBUTING.md"&gt;&lt;strong&gt;CONTRIBUTING.md&lt;/strong&gt;&lt;/a&gt; for step by step details of how to submit an entry.&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;
üìú Rules of this challenge üìú
&lt;/h2&gt;
&lt;h3&gt;
Guidelines in making an entry for this challenge&lt;/h3&gt;
&lt;p&gt;‚úîÔ∏è Use any language of your choice.&lt;/p&gt;
&lt;p&gt;‚úîÔ∏è Solution should at minimum ask for user input of 2 numbers.&lt;/p&gt;
&lt;p&gt;‚úîÔ∏è Solution should at minimum be able to add, subtract, multiply, divide.&lt;/p&gt;
&lt;p&gt;‚úîÔ∏è Can be command line based or GUI based.&lt;/p&gt;
&lt;p&gt;‚úîÔ∏è Create a README.md with instructions for how to run your code.&lt;/p&gt;
&lt;h2&gt;
üíª How to Join in üíª
&lt;/h2&gt;
&lt;p&gt;The inspirezone dev community is on Discord and this challenge is managed through there. If you are‚Ä¶&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/inspirezonetech/Calculator-Challenge-Inspirezone"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;This first challenge will get you refreshing basic arithmetic operators using any language you choose. &lt;/p&gt;

&lt;p&gt;Or due to the simplicity of this challenge, use this opportunity to pick up a language completely new to you and code up your first application!&lt;/p&gt;

&lt;p&gt;Whatever language you use to develop this application, by participating in this challenge you‚Äôll be able to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Learn / refresh use of basic arithmetic operators in a programming language&lt;/li&gt;
&lt;li&gt;Learn / refresh how to handle user inputs&lt;/li&gt;
&lt;li&gt;If you‚Äôre new to GUI development, this is an opportunity to develop your first GUI application!&lt;/li&gt;
&lt;li&gt;An opportunity to contribute to an open source project&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;üèÖ We‚Äôll also be awarding badges to all members that submit a working entry for every challenge we run. Each badge earned counts and we‚Äôll reveal why over time üòâ&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-should-you-join-these-challenges-and-participate-in-our-community"&gt;
  &lt;/a&gt;
  Why should you join these challenges and participate in our community? ü§î
&lt;/h2&gt;

&lt;p&gt;Our on-going coding challenges is just one method we‚Äôll use to keep members active in their coding practice. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Accountability&lt;/strong&gt; is a huge focus of our community. We encourage you to join in these challenges if you‚Äôre open to receiving a regular but gentle push to ensure you‚Äôre on track with your goals. These challenges are just one way we‚Äôll be using to push you further üî•&lt;/p&gt;

&lt;p&gt;We manage our community through Discord and we encourage you to join the server if you want closer accountability. On Discord there will be an option to register your participation in challenges and we use this to keep track of everyone committed to completing a challenge. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://community.inspirezone.tech/"&gt;Join the community&lt;/a&gt; to receive full member access to the Discord server. Or you can &lt;a href="https://discord.gg/EwwBgXkh5a"&gt;join the server as a guest&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;These challenges are a great way to receive an external push and some accountability in keeping up with a regular coding habit.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you‚Äôre a developer seeking unique ways to accelerate your coding skills to the next level we more than welcome you to &lt;a href="https://community.inspirezone.tech/"&gt;join us&lt;/a&gt;!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Leave a comment or &lt;a href="https://dev.to/funbeedev"&gt;message me directly&lt;/a&gt; if you have any questions about this challenge or the inspirezone community üòÄ&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>productivity</category>
      <category>programming</category>
      <category>github</category>
    </item>
    <item>
      <title>QR Codes for Scheduling and Bookings</title>
      <author>Spurwing</author>
      <pubDate>Sat, 24 Apr 2021 17:39:41 +0000</pubDate>
      <link>https://dev.to/spurwing/qr-codes-for-scheduling-and-bookings-188a</link>
      <guid>https://dev.to/spurwing/qr-codes-for-scheduling-and-bookings-188a</guid>
      <description>&lt;p&gt;QR codes allow us to embed/encode information as an image, which we all know as this large square filled with smaller black and white squares. The science and math behind QR codes isn't very easy, but there are a ton of articles and videos on YouTube that explain the process.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IBDrMSfw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vmtim1413tdh3oby2tsp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IBDrMSfw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vmtim1413tdh3oby2tsp.png" alt="business card qr code generator"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;All modern phones have a built-in QR Code Scanner which decodes the information. If the encoded data was just text, your phone will show the message, but if it's an URL then it will prompt you to open it in the browser. It's a great way to promote your website or project. But we can also use it for embedding email addresses or special app events.&lt;/p&gt;

&lt;p&gt;You can use our open source &lt;a href="https://github.com/Spurwing/Appointment-Scheduling-Widgets/blob/main/QRCode/"&gt;GitHub repository&lt;/a&gt; which allows you to generate QR codes using various parameters, &lt;a href="https://spurwing.github.io/Appointment-Scheduling-Widgets/QRCode/"&gt;Live demo here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xRXt7_ox--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k40jtpaxp8cc08rb4fmu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xRXt7_ox--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k40jtpaxp8cc08rb4fmu.png" alt="QR code website javascript"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;The file &lt;code&gt;index.html&lt;/code&gt; contains the JavaScript code for encoding plain text to a QR code image.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;update_qrcode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/^&lt;/span&gt;&lt;span class="se"&gt;[\s\u&lt;/span&gt;&lt;span class="sr"&gt;3000&lt;/span&gt;&lt;span class="se"&gt;]&lt;/span&gt;&lt;span class="sr"&gt;+|&lt;/span&gt;&lt;span class="se"&gt;[\s\u&lt;/span&gt;&lt;span class="sr"&gt;3000&lt;/span&gt;&lt;span class="se"&gt;]&lt;/span&gt;&lt;span class="sr"&gt;+$/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;qr&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="nx"&gt;create_qrcode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;M&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Byte&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;UTF-8&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;create_qrcode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;version&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ECL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;mb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;qrcode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringToBytes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;qrcode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringToBytesFuncs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;mb&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;qr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;qrcode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;version&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ECL&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;M&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;qr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;qr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;make&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="c1"&gt;// return qr.createImgTag();&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;qr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createSvgTag&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The default settings allow you to encode 62 characters, which is usally enough for a simple URL or message. If you need to encode longer texts you can tweek the settings (&lt;code&gt;version&lt;/code&gt; and &lt;code&gt;ECL&lt;/code&gt;) using this &lt;a href="https://www.qrcode.com/en/about/version.html"&gt;reference sheet&lt;/a&gt;. The library we used for QR code generation is &lt;a href="https://github.com/kazuhikoarase/qrcode-generator"&gt;this one&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Since QR codes can encode URLs, we can encode a link pointing to our Appointment Scheduling or Availability Page. For instance our page on Spurwing which allows users to book a demo call: &lt;a href="https://www.spurwing.io/learn-more"&gt;https://www.spurwing.io/learn-more&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Similarly you can encode your email address as such &lt;code&gt;mailto:ilya@spurwing.io&lt;/code&gt; When scanning that QR code your device will prompt you to open the Email app with your email in the recipient field.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;QR codes are a wonderful technological invention. Unfortunately they are not (yet) very common in the west, but in Asia they are used like crazy.&lt;/p&gt;

</description>
      <category>algorithms</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>useReducer Hook for functional components.</title>
      <author>Gilbish</author>
      <pubDate>Sat, 24 Apr 2021 17:36:14 +0000</pubDate>
      <link>https://dev.to/gilbishkosma/usereducer-hook-for-functional-components-3lo2</link>
      <guid>https://dev.to/gilbishkosma/usereducer-hook-for-functional-components-3lo2</guid>
      <description>&lt;p&gt;The &lt;code&gt;useReducer&lt;/code&gt; hook comes in handy when you want to separate the state logic from the components. In the official doc of React, they have written it as an alternative to &lt;code&gt;useState&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;useReducer&lt;/code&gt; hook is usually preferable to &lt;code&gt;useState&lt;/code&gt; when you have a complex state.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reducer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;initialArg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;arguments of &lt;code&gt;useReducer&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;1) &lt;strong&gt;reducer&lt;/strong&gt;&lt;br&gt;
   A reducer will be a function that takes two arguments.&lt;br&gt;
   the first argument is the &lt;strong&gt;initialState&lt;/strong&gt; and the second will be the &lt;strong&gt;action&lt;/strong&gt;. It will return the new state based on the action provided.&lt;/p&gt;

&lt;p&gt;2) &lt;strong&gt;initialArg&lt;/strong&gt;&lt;br&gt;
   initialArg is the initial state which is passed to the reducer.&lt;/p&gt;

&lt;p&gt;3) &lt;strong&gt;init&lt;/strong&gt; (optional)&lt;br&gt;
   It's a function that is used to create the initial state lazily. If you pass a third function argument to the &lt;code&gt;useReducer&lt;/code&gt; hook, it passes the second argument to that function and uses the return value for the initial state.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h2&gt;

&lt;p&gt;Let's create a counter app, in which the count will increase or decrease based on the button we click.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step1-create-the-component"&gt;
  &lt;/a&gt;
  Step1 (create the component)
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;CounterApp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;initialCount&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;step&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;initialCount&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;add&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;subtract&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;subtract&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Add&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;subtract&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Subtract&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step2-create-the-reducer-function"&gt;
  &lt;/a&gt;
  Step2 (create the reducer function)
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;countReducer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;step&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ADD&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;step&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SUBTRACt&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;step&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;here the &lt;strong&gt;state&lt;/strong&gt; is the current state and &lt;strong&gt;dispatch&lt;/strong&gt; (can also be said as action) is the argument that is passed in the &lt;strong&gt;setState&lt;/strong&gt;. We are checking the type of action passed by the user and based on that we will set the new value. It works same as the reducer of Redux.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step3-use-the-reducer-with-our-component"&gt;
  &lt;/a&gt;
  Step3 (use the Reducer with our component)
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;useReducer&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;countReducer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;step&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ADD&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;step&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SUBTRACt&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;step&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;CounterApp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;initialCount&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;step&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;countReducer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;initialCount&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ADD&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;step&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;subtract&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SUBTRACT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;step&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Add&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;subtract&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Subtract&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;CounterApp&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Out CounterApp is ready. üéâ&lt;/p&gt;

&lt;p&gt;We have used the useReducer hook for a simple counter app. I will suggest using the useState hook for simple cases and the useReducer hook for complex cases. &lt;br&gt;
One of the examples for the complex case is if you have more than one state in your app and you have to change all the states at the same time, then, in that case, we can save all the states in an object using the useReducer hook.&lt;/p&gt;

&lt;p&gt;Thanks for reading my post. üòÑ&lt;br&gt;
Let me know if you have any queries.&lt;/p&gt;

</description>
      <category>react</category>
      <category>redux</category>
      <category>tutorial</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Web Components using UnknownHTMLElements for better semantic HTML</title>
      <author>Danny Engelman</author>
      <pubDate>Sat, 24 Apr 2021 16:25:29 +0000</pubDate>
      <link>https://dev.to/dannyengelman/web-components-using-unknownhtmlelements-for-better-semantic-html-5d8c</link>
      <guid>https://dev.to/dannyengelman/web-components-using-unknownhtmlelements-for-better-semantic-html-5d8c</guid>
      <description>&lt;h3&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  ü•ß TL;DR;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;UnknownHTMLElement&lt;/code&gt; elements &lt;strong&gt;can&lt;/strong&gt; be used as Web Component building blocks&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;&amp;lt;pie-chart&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;progress-circle&amp;gt;&lt;/code&gt; Web Components, used in this post are available on &lt;a href="https://pie-meister.github.io"&gt;https://pie-meister.github.io&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;



&lt;h2&gt;
  &lt;a href="#-raw-ltslicegt-endraw-is-an-unknownhtmlelement"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;lt;slice&amp;gt;&lt;/code&gt; is an &lt;strong&gt;UnknownHTMLElement&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;In &lt;a href="https://dev.to/dannyengelman/what-web-technologies-are-required-to-draw-a-pie-chart-in-2021-spoiler-alert-a-standard-web-component-will-do-1j56"&gt;my previous post&lt;/a&gt; &lt;br&gt;
I explained how to build a &lt;em&gt;vanilla JavaScript&lt;/em&gt; &lt;code&gt;&amp;lt;pie-chart&amp;gt;&lt;/code&gt; Web Component.&lt;/p&gt;

&lt;p&gt;With &lt;strong&gt;semantic HTML&lt;/strong&gt; creating a Pie Chart:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;pie-chart&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;slice&lt;/span&gt; &lt;span class="na"&gt;size=&lt;/span&gt;&lt;span class="s"&gt;"90"&lt;/span&gt; &lt;span class="na"&gt;stroke=&lt;/span&gt;&lt;span class="s"&gt;"green"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;HTML&lt;span class="nt"&gt;&amp;lt;/slice&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;slice&lt;/span&gt; &lt;span class="na"&gt;size=&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt;  &lt;span class="na"&gt;stroke=&lt;/span&gt;&lt;span class="s"&gt;"red"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;JavaScript&lt;span class="nt"&gt;&amp;lt;/slice&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;slice&lt;/span&gt; &lt;span class="na"&gt;size=&lt;/span&gt;&lt;span class="s"&gt;"9"&lt;/span&gt;  &lt;span class="na"&gt;stroke=&lt;/span&gt;&lt;span class="s"&gt;"blue"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;CSS&lt;span class="nt"&gt;&amp;lt;/slice&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/pie-chart&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N-glI370--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/MWUIQVe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N-glI370--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/MWUIQVe.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Experienced Web Developers commented &lt;code&gt;&amp;lt;slice&amp;gt;&lt;/code&gt; is &lt;strong&gt;not a valid HTML Element&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;slice&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;HTMLUnknownElement&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Neither is it a valid &lt;strong&gt;Custom Element&lt;/strong&gt;, because those always require &lt;strong&gt;at least one hyphen&lt;/strong&gt; in the tagname.&lt;/p&gt;

&lt;p&gt;That hyphen restriction is to prevent conflicts with any HTML tags the WHATWG might add &lt;em&gt;&lt;strong&gt;in the future&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Custom Element tag names:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;have to &lt;strong&gt;start with&lt;/strong&gt; a lowercase ASCII character&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;can't have uppercase&lt;/strong&gt; characters anywhere&lt;/li&gt;
&lt;li&gt;must contain at least one &lt;strong&gt;hyphen&lt;/strong&gt; - character&lt;/li&gt;
&lt;li&gt;UTF-8 characters, &lt;strong&gt;emojis&lt;/strong&gt; are allowed: &lt;code&gt;&amp;lt;a-ü•ß-chart&amp;gt;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;cannot be self closing: &lt;code&gt;&amp;lt;pie-chart/&amp;gt;&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;



&lt;h2&gt;
  &lt;a href="#what-is-the-value-of-using-raw-ltslicegt-endraw-"&gt;
  &lt;/a&gt;
  What is the value of using &lt;code&gt;&amp;lt;slice&amp;gt;&lt;/code&gt; ?
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#-raw-ltpiechartgt-endraw-must-be-a-unique-custom-element-extended-from-htmlelement"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;lt;pie-chart&amp;gt;&lt;/code&gt; must be a &lt;strong&gt;unique&lt;/strong&gt; Custom Element (extended from HTMLElement)
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Scoped registries have been &lt;a href="https://github.com/WICG/webcomponents/issues/716"&gt;on the agenda for 4 years now&lt;/a&gt;. &lt;br&gt;
For now &lt;strong&gt;all&lt;/strong&gt; Custom Elements go into the same &lt;strong&gt;global &lt;em&gt;customElementsRegistry&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;That means &lt;code&gt;customElements.define("pie-chart")&lt;/code&gt; can only be called &lt;strong&gt;once&lt;/strong&gt;. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If an element &lt;strong&gt;with the same tag name&lt;/strong&gt; was already created, &lt;br&gt;
my &lt;code&gt;&amp;lt;pie-chart&amp;gt;&lt;/code&gt; element will throw an error:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aw_D0eJ0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/ICumcGD.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aw_D0eJ0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/ICumcGD.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For a good UX (User eXperience) &lt;strong&gt;and&lt;/strong&gt; DX (Developer eXperience) 
my &lt;code&gt;&amp;lt;pie-chart&amp;gt;&lt;/code&gt; Web Component should test if it can be defined:
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;customElements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pie-chart&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// warn the user "my" Web Component doesn't work; another definition exists&lt;/span&gt;
    &lt;span class="c1"&gt;// warn the developer another Web Component with the same name exists&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;customElements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pie-chart&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;h2&gt;
  &lt;a href="#to-raw-ltslicegt-endraw-or-to-raw-ltpieslicegt-endraw-that-is-the-question"&gt;
  &lt;/a&gt;
  To &lt;code&gt;&amp;lt;slice&amp;gt;&lt;/code&gt; or to &lt;code&gt;&amp;lt;pie-slice&amp;gt;&lt;/code&gt;, that is the question
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#-raw-ltslicegt-endraw-has-less-restrictions"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;lt;slice&amp;gt;&lt;/code&gt; has less restrictions
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A &lt;strong&gt;duplicate&lt;/strong&gt; &lt;code&gt;&amp;lt;slice&amp;gt;&lt;/code&gt; can only be created by the WHATWG &lt;strong&gt;adding&lt;/strong&gt; &lt;code&gt;&amp;lt;slice&amp;gt;&lt;/code&gt; as standard HTML tag.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Till then. I know &lt;strong&gt;with 100% certainty&lt;/strong&gt; there will not be a naming conflict. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Because &lt;strong&gt;no 3rd party Developer&lt;/strong&gt; can create a valid &lt;code&gt;&amp;lt;slice&amp;gt;&lt;/code&gt; element:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eez5P-h5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/2s9uAII.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eez5P-h5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/2s9uAII.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Had I used a &lt;code&gt;&amp;lt;pie-slice&amp;gt;&lt;/code&gt; &lt;strong&gt;Custom Element&lt;/strong&gt;, &lt;br&gt;
it would have been an additional point of failure. &lt;br&gt;
I would have to add extra code to check if &lt;code&gt;&amp;lt;pie-slice&amp;gt;&lt;/code&gt; was defined &lt;strong&gt;by another developer&lt;/strong&gt;; like required for &lt;code&gt;&amp;lt;pie-chart&amp;gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#-raw-ltpieslicegt-endraw-versus-raw-ltslicegt-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;lt;pie-slice&amp;gt;&lt;/code&gt; versus &lt;code&gt;&amp;lt;slice&amp;gt;&lt;/code&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;&amp;lt;pie-slice&amp;gt;&lt;/code&gt; can have all the &lt;strong&gt;Web Components goodies&lt;/strong&gt;: &lt;code&gt;observedAttributes&lt;/code&gt; , &lt;code&gt;attributeChangedCallback&lt;/code&gt; etc.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;&amp;lt;slice&amp;gt;&lt;/code&gt; will always be an UnknownHTMLElement. &lt;br&gt;
&lt;code&gt;observedAttributes&lt;/code&gt;-like behaviour can only be created by adding a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver"&gt;MutationObserver&lt;/a&gt; (&lt;em&gt;yes, works on Unknown Elements&lt;/em&gt;)&lt;br&gt;
You then get an extra bonus; because a MutationObserver can observe &lt;strong&gt;text Node&lt;/strong&gt; changes. &lt;br&gt;
A &lt;strong&gt;Custom Element&lt;/strong&gt; can not monitor the &lt;code&gt;innerHTML&lt;/code&gt; label.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;h2&gt;
  &lt;a href="#abusing-existing-html-tags"&gt;
  &lt;/a&gt;
  (ab)using &lt;strong&gt;existing&lt;/strong&gt; HTML tags
&lt;/h2&gt;

&lt;p&gt;We can test the "&lt;em&gt;WHATWG created a new HTML tag&lt;/em&gt;" scenario.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;progress&amp;gt;&lt;/code&gt; is an &lt;strong&gt;existing&lt;/strong&gt; HTML tag &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;And for those who don't know. &lt;br&gt;
Many standard HTML elements, &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; , &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt;, &lt;strong&gt;&lt;em&gt;are&lt;/em&gt; Web Components&lt;/strong&gt; &lt;br&gt;
Browsers have different implementations; &lt;br&gt;
check out &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/progress"&gt;the &lt;code&gt;&amp;lt;progress&amp;gt;&lt;/code&gt; documentation page&lt;/a&gt; in Chrome, Firefox or Safari&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Similar to &lt;code&gt;&amp;lt;pie-chart&amp;gt;&lt;/code&gt; (and using the same Base Class, available on &lt;a href="https://pie-meister.github.io"&gt;https://pie-meister.github.io&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;This chart (modelled after a Google Analytics chart):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vC-CgDup--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/K8mAUHM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vC-CgDup--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/K8mAUHM.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;is created by the &lt;code&gt;&amp;lt;progress-circle&amp;gt;&lt;/code&gt; Web Component, from &lt;strong&gt;semantic HTML&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;progress-circle&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;progress&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"75%"&lt;/span&gt; &lt;span class="na"&gt;stroke=&lt;/span&gt;&lt;span class="s"&gt;"green"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;SEO&lt;span class="nt"&gt;&amp;lt;/progress&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;progress&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"60%"&lt;/span&gt; &lt;span class="na"&gt;stroke=&lt;/span&gt;&lt;span class="s"&gt;"orange"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Social&lt;span class="nt"&gt;&amp;lt;/progress&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;progress&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"65%"&lt;/span&gt; &lt;span class="na"&gt;stroke=&lt;/span&gt;&lt;span class="s"&gt;"teal"&lt;/span&gt; &lt;span class="na"&gt;edge=&lt;/span&gt;&lt;span class="s"&gt;"black"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Maps&lt;span class="nt"&gt;&amp;lt;/progress&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;progress&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"50%"&lt;/span&gt; &lt;span class="na"&gt;stroke=&lt;/span&gt;&lt;span class="s"&gt;"orangered"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Traffic&lt;span class="nt"&gt;&amp;lt;/progress&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/progress-circle&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;This Web Component uses shadowDOM to display the chart, the semantic HTML remains &lt;strong&gt;invisible&lt;/strong&gt; in &lt;strong&gt;lightDOM&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Thus you do not see the &lt;code&gt;&amp;lt;progress&amp;gt;&lt;/code&gt; default behaviour&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you really, &lt;em&gt;really&lt;/em&gt; want a "NO JavaScript!" version, you have to change the HTML, CSS (and Web Component code) a bit to work with &lt;em&gt;something like&lt;/em&gt; this:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;progress&lt;/span&gt; &lt;span class="na"&gt;max=&lt;/span&gt;&lt;span class="s"&gt;"100"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"75"&lt;/span&gt; &lt;span class="na"&gt;stroke=&lt;/span&gt;&lt;span class="s"&gt;"green"&lt;/span&gt; &lt;span class="na"&gt;label=&lt;/span&gt;&lt;span class="s"&gt;"SEO"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/progress&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;progress&lt;/span&gt; &lt;span class="na"&gt;max=&lt;/span&gt;&lt;span class="s"&gt;"100"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"60"&lt;/span&gt; &lt;span class="na"&gt;stroke=&lt;/span&gt;&lt;span class="s"&gt;"orange"&lt;/span&gt; &lt;span class="na"&gt;label=&lt;/span&gt;&lt;span class="s"&gt;"Social"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/progress&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;progress&lt;/span&gt; &lt;span class="na"&gt;max=&lt;/span&gt;&lt;span class="s"&gt;"100"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"65"&lt;/span&gt; &lt;span class="na"&gt;stroke=&lt;/span&gt;&lt;span class="s"&gt;"teal"&lt;/span&gt; &lt;span class="na"&gt;label=&lt;/span&gt;&lt;span class="s"&gt;"Maps"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/progress&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;progress&lt;/span&gt; &lt;span class="na"&gt;max=&lt;/span&gt;&lt;span class="s"&gt;"100"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"50"&lt;/span&gt; &lt;span class="na"&gt;stroke=&lt;/span&gt;&lt;span class="s"&gt;"orangered"&lt;/span&gt; &lt;span class="na"&gt;label=&lt;/span&gt;&lt;span class="s"&gt;"Traffic"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Traffic&lt;span class="nt"&gt;&amp;lt;/progress&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;again, the &lt;code&gt;&amp;lt;progress&amp;gt;&lt;/code&gt; elements remains &lt;strong&gt;invisible&lt;/strong&gt; in lightDOM&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the resulting chart is displayed &lt;strong&gt;in shadowDOM&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I only have to safeguard a duplicate naming conflict for the &lt;code&gt;&amp;lt;progress-circle&amp;gt;&lt;/code&gt; Web Component.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;As long as you can keep the output in &lt;strong&gt;invisible lightDOM&lt;/strong&gt;, &lt;br&gt;
you can (ab)use any &lt;strong&gt;existing HTML tag&lt;/strong&gt; for other purposes.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;h2&gt;
  &lt;a href="#piemeistergithubio"&gt;
  &lt;/a&gt;
  &lt;a href="https://Pie-Meister.github.io"&gt;Pie-Meister.github.io&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;pie-chart&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;progress-circle&amp;gt;&lt;/code&gt; Web Components are available, as &lt;em&gt;unlicensed&lt;/em&gt; source code, on &lt;a href="https://pie-meister.github.io"&gt;https://pie-meister.github.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BakCPGiO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/F6MSps6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BakCPGiO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/F6MSps6.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The code is an enhanced version of &lt;a href="https://dev.to/dannyengelman/what-web-technologies-are-required-to-draw-a-pie-chart-in-2021-spoiler-alert-a-standard-web-component-will-do-1j56"&gt;my previous &lt;code&gt;&amp;lt;pie-chart&amp;gt;&lt;/code&gt; post&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;instead of a SVG &lt;code&gt;&amp;lt;circle&amp;gt;&lt;/code&gt; Element, a &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; Element is used to draw slices. The &lt;code&gt;&amp;lt;progress-circle&amp;gt;&lt;/code&gt; can &lt;strong&gt;not&lt;/strong&gt; be created with &lt;code&gt;&amp;lt;circle&amp;gt;&lt;/code&gt; elements.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Uses shadowDOM &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;uses ::part shadowParts for optional global styling&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;all in vanilla JavaScript, (way) &lt;strong&gt;under 2 kB&lt;/strong&gt; GZipped&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;a &lt;strong&gt;starting point&lt;/strong&gt; for you own Web Components&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webcomponents</category>
      <category>webdev</category>
      <category>productivity</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Build Your First Reusable Components Using React</title>
      <author>Dimer</author>
      <pubDate>Sat, 24 Apr 2021 16:20:25 +0000</pubDate>
      <link>https://dev.to/dimer191996/build-your-first-reusable-components-using-react-41mg</link>
      <guid>https://dev.to/dimer191996/build-your-first-reusable-components-using-react-41mg</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0-JrczDS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ylogg4c1gmih190jrpg0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0-JrczDS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ylogg4c1gmih190jrpg0.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of contents
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;1.What are reusable components?&lt;br&gt;
2.Making a React component reusable&lt;br&gt;
4.Conclusion&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#what-are-reusable-components"&gt;
  &lt;/a&gt;
  What are reusable components?
&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Reusable components are those React components that can be used multiple times in your application&lt;/strong&gt;&lt;/em&gt;. As a result, they need to be generic enough so that it‚Äôs free from complex business logic. If a component contains any complex logic inside it, not only does it become difficult to reuse, it also becomes less maintainable. &lt;a href="https://reactjs.org/docs/hooks-intro.html"&gt;React Hooks&lt;/a&gt; are the perfect fit for reusable component logic.&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;I'm straight up beginner , So if am lying on this `article` feel free to tell me üòÉ&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;Let Goooo!ü¶∏‚Äç‚ôÇÔ∏è&lt;/p&gt;

&lt;p&gt;=&amp;gt; For example, the App component below has a button which can‚Äôt be reused since it has the onClick prop hardcoded in it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function handleClick(e) {
 // Some function which does fake API call
 fakeApiCall(e.target.value);
}

function App() {
 return (
   &amp;lt;div className="app"&amp;gt;
     &amp;lt;button className="button" onClick={handleClick}&amp;gt;
       Submit
     &amp;lt;/button&amp;gt;
   &amp;lt;/div&amp;gt;
 );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;üòû Here, there is no way in which we can modify the text Submit which is rendered on the button.&lt;/p&gt;

&lt;p&gt;üòäBuuut Iiiif we want to make the above component reusable, we need to make it more generic. First, we can make a separate Button function which can be imported and reused multiple times in our application:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function handleClick(e) {
 // Some function which does fake API call
 fakeApiCall(e.target.value);
}

function Button() {
 return (
   &amp;lt;button className="button" onClick={handleClick}&amp;gt;
     Submit
   &amp;lt;/button&amp;gt;
 );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, we can reuse that Button component multiple times inside our App function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function App() {
 return (
   &amp;lt;div className="app"&amp;gt;
     &amp;lt;Button /&amp;gt;
     &amp;lt;Button /&amp;gt;
   &amp;lt;/div&amp;gt;
 );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code renders the following user interface like:&lt;/p&gt;




&lt;p&gt;|Submit | |Submit |&lt;/p&gt;




&lt;p&gt;ü§î As you can see  ladyzz and gentlemanzz , we are already reusing one component multiple times. But, we still need to make it more generic because we might want to do different tasks with one click of a button. We can do a form submit, form reset or do another API call to fetch some sh** tone of data, for example.&lt;/p&gt;

&lt;p&gt;Let‚Äôs extract the handleClick function from our Button component and pass it as a prop. Our Button component will now look like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function Button(props) {
 return (
   &amp;lt;button className="button" onClick={props.handleClick}&amp;gt;
     Submit
   &amp;lt;/button&amp;gt;
 );
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And our App component will look like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function handleClick(e) {
 // Some function which does fake API call
 fakeApiCall(e.target.value);
}

function App() {
 return (
   &amp;lt;div className="app"&amp;gt;
     &amp;lt;Button handleClick={handleClick} /&amp;gt;
   &amp;lt;/div&amp;gt;
 );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, we can pass any function to the Button component through the handleClick prop. I highly suggest that you check your props using PropTypes.&lt;/p&gt;

&lt;p&gt;We can also use multiple Button components inside our App component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function handleAPICall(e) {
 // Do some API call
}

function handleFormReset(e) {
 // Reset some form data
}

function App() {
 return (
   &amp;lt;div className="app"&amp;gt;
     &amp;lt;Button handleClick={handleAPICall} /&amp;gt;
     &amp;lt;Button handleClick={handleFormReset} /&amp;gt;
   &amp;lt;/div&amp;gt;
 );
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Alright, alright, alright üòé! As you can see, we have made our Button component even more flexible. We can also pass the text which is rendered on the button as a prop.&lt;/p&gt;

&lt;p&gt;Our Button component will now look like the following:&lt;br&gt;
üé∂üé∂Tanrara rara üé∂üé∂ üòé&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function Button(props) {
 return (
   &amp;lt;button className="button" onClick={props.handleClick}&amp;gt;
     {props.label}
   &amp;lt;/button&amp;gt;
 );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;üòé And our App component will look like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function handleAPICall(e) {
 // Do some API call
}

function handleFormReset(e) {
 // Reset some form data
}

function App() {
 return (
   &amp;lt;div className="app"&amp;gt;
     &amp;lt;Button handleClick={handleAPICall} label="Submit"/&amp;gt;
     &amp;lt;Button handleClick={handleFormReset} label="Reset"/&amp;gt;
   &amp;lt;/div&amp;gt;
 );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It renders the following user interface like:&lt;/p&gt;




&lt;p&gt;|Submit | |Reset |&lt;/p&gt;




&lt;p&gt;It‚Äôs already very reusable. &lt;br&gt;
But üñêÔ∏èüîä "hold on wait a minute "üîä‚õî, we can also add certain additional props like whether to render an icon before the label of the button as well.&lt;/p&gt;

&lt;p&gt;To do that, we can change our Button component to the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function Button(props) {
  return (
    &amp;lt;button className="button" onClick={props.handleClick}&amp;gt;
      {props.icon} {props.label}
    &amp;lt;/button&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And, we need to pass that icon prop from our App component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;Button
   handleClick={handleAPICall}
   label="Submit"
   icon={&amp;lt;i className="fas fa-arrow-alt-circle-right" /&amp;gt;}
 /&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above example uses &lt;a href="https://fontawesome.com/how-to-use/on-the-web/using-with/react"&gt;font-awesome&lt;/a&gt; but you can use any font you want zaddy.&lt;/p&gt;

&lt;p&gt;üëá&lt;br&gt;
Also, it‚Äôs a good idea to render the icon prop only if it‚Äôs present. To do that, we just need to make the following changes to our Button component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function Button(props) {
 return (
   &amp;lt;button className="button" onClick={props.handleClick}&amp;gt;
     {props.icon &amp;amp;&amp;amp; props.icon} {props.label}
   &amp;lt;/button&amp;gt;
 );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#our-component-is-very-much-reusable-at-this-moment-we-can-also-pass-another-additional-prop-called-type-which-can-control-whether-the-button-will-be-primary-or-secondary"&gt;
  &lt;/a&gt;
  üòé Our component is very much reusable at this moment. We can also pass another additional prop called type which can control whether the button will be primary or secondary.
&lt;/h2&gt;

&lt;p&gt;We need to make the following changes to our Button component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function Button(props) {
 const className = `button ${props.type}`

 return (
   &amp;lt;button className={className} onClick={props.handleClick}&amp;gt;
     {props.icon &amp;amp;&amp;amp; props.icon} {props.label}
   &amp;lt;/button&amp;gt;
 );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we will be passing a type prop from our App component which will be passed to the className of the button.&lt;/p&gt;

&lt;p&gt;Our App component will now look like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function handleAPICall(e) {
 // Do some API call
}

function handleFormReset(e) {
 // Reset some form data
}

function App() {
 return (
   &amp;lt;div className="app"&amp;gt;
     &amp;lt;Button
       handleClick={handleAPICall}
       label="Submit"
       icon={&amp;lt;i className="fas fa-arrow-alt-circle-right" /&amp;gt;}
       type="primary"
     /&amp;gt;
     &amp;lt;Button handleClick={handleFormReset} label="Reset" type="secondary" /&amp;gt;
   &amp;lt;/div&amp;gt;
 );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We would also need to add a few lines of CSS to our application:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.button.primary {
 background-color: #0886ff;
}

.button.secondary {
 background-color: #73a800;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, we can distinguish between our #primary and #secondary buttons. It‚Äôs also a good idea now to add a #default #prop to our Button component so that it #renders #secondary buttons by #default. This is really helpful if we #forget to pass the #type #prop to our Button component. We need to make the following changes to our Button component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function Button(props) {
 const className = `button ${props.type}`

 return (
   &amp;lt;button className={className} onClick={props.handleClick}&amp;gt;
     {props.icon &amp;amp;&amp;amp; props.icon} {props.label}
   &amp;lt;/button&amp;gt;
 );
}

Button.defaultProps = {
 type: "secondary"
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, if we have another Button component which doesn‚Äôt have the type prop, it will be a secondary button:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div className="app"&amp;gt;
 &amp;lt;Button
   handleClick={handleAPICall}
   label="Submit"
   icon={&amp;lt;i className="fas fa-arrow-alt-circle-right" /&amp;gt;}
   type="primary"
 /&amp;gt;
 &amp;lt;Button handleClick={handleFormReset} label="Reset" type="secondary" /&amp;gt;
 &amp;lt;Button handleClick={handleFormReset} label="Click" /&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#i-will-be-back-"&gt;
  &lt;/a&gt;
  ü§ñ "I will be back "
&lt;/h6&gt;

&lt;p&gt;Follow me For Part II Tommmorrrrow , Honestly I just need a friends , but i will be back tho...&lt;/p&gt;

</description>
      <category>react</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Professionals never return React.Fragment. Coders do.</title>
      <author>Coding Bugs</author>
      <pubDate>Sat, 24 Apr 2021 16:16:08 +0000</pubDate>
      <link>https://dev.to/codbugs/professionals-never-return-react-fragment-coders-do-4kim</link>
      <guid>https://dev.to/codbugs/professionals-never-return-react-fragment-coders-do-4kim</guid>
      <description>&lt;p&gt;In my experience, more than 15 years of coding, programming, architecting, I've found people implementing code with &lt;strong&gt;no rules or standards&lt;/strong&gt; and, sometimes, people believing they follow some rules but, in reality, they are not applying by themselves. I was in that situation a lot of times and keep being sometimes as well. I've written this article to show what I think is a &lt;strong&gt;good practice&lt;/strong&gt; and makes us being &lt;strong&gt;good professionals&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The issue&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The following &lt;em&gt;React&lt;/em&gt; code renders a list of items in case of the array passed has them.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;List&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;collection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;List&lt;/span&gt; &lt;span class="na"&gt;items&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;collection&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Do you think there is something wrong with the code? This code works perfectly fine, it creates a &lt;code&gt;li&lt;/code&gt; node with the number as the value. &lt;/p&gt;

&lt;p&gt;What happens if the array has no items in it? The &lt;code&gt;ul&lt;/code&gt; node &lt;strong&gt;will be rendered&lt;/strong&gt; as well but there won't be any &lt;code&gt;li&lt;/code&gt; node and &lt;strong&gt;no items in there&lt;/strong&gt;. This is not a big issue but something not completely well. &lt;/p&gt;

&lt;p&gt;We can modify the code in this way:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;List&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// *** notice how the code is modified and complex increases&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; 
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;)&lt;/span&gt; &lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;collection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;List&lt;/span&gt; &lt;span class="na"&gt;items&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;collection&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Like the previous case, this code is working fine, it does what it is supposed to do. &lt;/p&gt;

&lt;p&gt;So, let me ask the same question as before, what happens if the array has no items in it? &lt;/p&gt;

&lt;p&gt;In this case, a &lt;code&gt;false&lt;/code&gt; value and no HTML node are returned. The issue here is that we return &lt;strong&gt;different kinds of items&lt;/strong&gt; depending on the &lt;code&gt;items&lt;/code&gt; property passed.&lt;/p&gt;

&lt;p&gt;Why is this an issue? In fact, this is just a &lt;strong&gt;concept issue&lt;/strong&gt; more than a coding issue. Returning the same kind of item in this function will make it easier for testing, make it easier to maintain, make it easier to read because it will be &lt;strong&gt;consistent&lt;/strong&gt; and other methods calling this one will receive exactly what they expect and won't have the necessity to check if retrieves a boolean or a component.&lt;/p&gt;

&lt;p&gt;The next code modification must have in mind this premise so it'll be like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;List&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// check if items is not empty&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isEmpty&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// always return a React component&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;isEmpty&lt;/span&gt;
    &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Fragment&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;)&lt;/span&gt; &lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;collection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;List&lt;/span&gt; &lt;span class="na"&gt;items&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;collection&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It seems that our code makes more sense now, doesn't it? We always return a component for any of the options or paths our code takes. If items is not empty, a &lt;code&gt;ul&lt;/code&gt; node is returned plus a &lt;code&gt;li&lt;/code&gt; node per item inside, a React component in fact. &lt;/p&gt;

&lt;p&gt;If there is no items, a &lt;code&gt;React.Fragment&lt;/code&gt; component is returned. Both of them are &lt;strong&gt;React components&lt;/strong&gt;, no need for callers to check it.&lt;/p&gt;

&lt;p&gt;As a &lt;strong&gt;professional programmers&lt;/strong&gt; that we are, we must &lt;em&gt;give meaning and name our objects&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;You may noticed we have few objects here in our code, an &lt;strong&gt;empty list&lt;/strong&gt; component, an &lt;strong&gt;item list&lt;/strong&gt; component, an &lt;strong&gt;item&lt;/strong&gt; component and a &lt;strong&gt;manager&lt;/strong&gt; component. Each of them with a &lt;strong&gt;unique responsibility&lt;/strong&gt; (following the &lt;em&gt;Single Responsibility&lt;/em&gt; principle that I'll talk in a future article) and a simple code easy to understand, to maintain and to test.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ListItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ItemList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="si"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ListItem&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;)&lt;/span&gt; &lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;EmptyList&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;No items in the list&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt; &lt;span class="c1"&gt;// or &amp;lt;React.Fragment /&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ListManager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isEmpty&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;isEmpty&lt;/span&gt; 
    &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;EmptyList&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ItemList&lt;/span&gt; &lt;span class="na"&gt;items&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;collection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ListManager&lt;/span&gt; &lt;span class="na"&gt;items&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;collection&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I think this code looks like much better than the first one. Reviewers'll see the person behind the code thought how to face the problem, the constraints, and the paths to take around of it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Wrapping up&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As I wrote some paragraphs above, &lt;strong&gt;professional programmers&lt;/strong&gt; must give meaning to the code. Coding can be done by anyone, programming in a good way with sense are just a subject of professionals.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;What do you think about the exercise made in this article? &lt;br&gt;
Hope this can be useful to you or just have fun reading it.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>3 use cases for ES6 generators</title>
      <author>Aleksei Berezkin</author>
      <pubDate>Sat, 24 Apr 2021 16:10:29 +0000</pubDate>
      <link>https://dev.to/alekseiberezkin/3-use-cases-for-es6-generators-3375</link>
      <guid>https://dev.to/alekseiberezkin/3-use-cases-for-es6-generators-3375</guid>
      <description>&lt;p&gt;Generators is a feature you probably won't need every day. Does it mean you may ignore them completely? Not at all! There are code patterns that literally call for generators. Let's look at some examples where generators shine!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-traversing-nested-structures"&gt;
  &lt;/a&gt;
  1. Traversing nested structures
&lt;/h1&gt;

&lt;p&gt;Thanks to &lt;code&gt;yield*&lt;/code&gt; statement generators are friends with recursion and recursive data structures. Traversing trees with generators looks very natural:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;TreeNode&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;TreeNode&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;TreeNode&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;traverse&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;TreeNode&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;Generator&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;traverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;traverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yes, it's that simple! Let's test it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;([...&lt;/span&gt;&lt;span class="nx"&gt;traverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
&lt;span class="c1"&gt;// =&amp;gt; [ 0, 1, 2, 3 ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#2-true-coroutines"&gt;
  &lt;/a&gt;
  2. ‚ÄúTrue‚Äù coroutines
&lt;/h1&gt;

&lt;p&gt;Why quotes around ‚Äútrue‚Äù? Because technically any generator &lt;strong&gt;is&lt;/strong&gt; a coroutine: it forks current execution stack. However, when speaking of coroutines devs usually mean something asynchronous, for example, nonblocking IO. So let's write the ‚Äúreal‚Äù coroutine that reads files in a dir:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;readFiles&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;promises&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;promises&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;promises&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;promises&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What a short and simple code! Let's run it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;readFiles&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// =&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;// const connections: A&lt;/span&gt;
&lt;span class="c1"&gt;// const d = new Date(1&lt;/span&gt;
&lt;span class="c1"&gt;// type TreeNode&amp;lt;T&amp;gt; = {&lt;/span&gt;
&lt;span class="c1"&gt;// const iterable = (()&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As seen, in my case current dir is full of source code. Not a surprise üòâ&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-tokenizing"&gt;
  &lt;/a&gt;
  3. Tokenizing
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#or-any-other-code-with-a-lot-of-nested-raw-if-endraw-s"&gt;
  &lt;/a&gt;
  or any other code with a lot of nested &lt;code&gt;if&lt;/code&gt;s
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;yield&lt;/code&gt; and &lt;code&gt;yield*&lt;/code&gt; allow easily forwarding items optionally produced in nested functions up the stack without writing a lot of conditionals, making your code more declarative. This example is a very simple tokenizer which processes integer sums like &lt;code&gt;1+44-2&lt;/code&gt;. Let's start with types:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;IntegerToken&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;OperatorToken&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;IntegerToken&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;integer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;val&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;OperatorToken&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;-&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Helper abstraction over input string&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Yields no more than one token&lt;/span&gt;
    &lt;span class="na"&gt;take&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="na"&gt;regexp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;RegExp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;toToken&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Generator&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Token&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;didProgress&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;tokenize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;Generator&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Token&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's implement &lt;code&gt;tokenize&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;tokenize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;Generator&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Token&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;operator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;space&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;didProgress&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;take&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="sr"&gt;/^&lt;/span&gt;&lt;span class="se"&gt;[&lt;/span&gt;&lt;span class="sr"&gt;0-9&lt;/span&gt;&lt;span class="se"&gt;]&lt;/span&gt;&lt;span class="sr"&gt;+/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;integer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;val&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;}),&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;operator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;take&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="sr"&gt;/^&lt;/span&gt;&lt;span class="se"&gt;[&lt;/span&gt;&lt;span class="sr"&gt;+-&lt;/span&gt;&lt;span class="se"&gt;]&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;-&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;}),&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;space&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;take&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/^&lt;/span&gt;&lt;span class="se"&gt;\s&lt;/span&gt;&lt;span class="sr"&gt;+/&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And, to see the whole picture, let's implement &lt;code&gt;Input&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;InputImpl&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;Input&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
    &lt;span class="nx"&gt;pos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="nx"&gt;lastCheckedPos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;take&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;regexp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;RegExp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;toToken&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;regexp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pos&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;toToken&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="nx"&gt;toToken&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;didProgress&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pos&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastCheckedPos&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastCheckedPos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pos&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Phew! We are finally ready to test it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;([...&lt;/span&gt;&lt;span class="nx"&gt;tokenize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;InputImpl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1+44-2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))])&lt;/span&gt;
&lt;span class="c1"&gt;// =&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;// [&lt;/span&gt;
&lt;span class="c1"&gt;//   { type: 'integer', val: 1 },&lt;/span&gt;
&lt;span class="c1"&gt;//   { type: '+' },&lt;/span&gt;
&lt;span class="c1"&gt;//   { type: 'integer', val: 44 },&lt;/span&gt;
&lt;span class="c1"&gt;//   { type: '-' },&lt;/span&gt;
&lt;span class="c1"&gt;//   { type: 'integer', val: 2 }&lt;/span&gt;
&lt;span class="c1"&gt;// ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#is-it-for-free"&gt;
  &lt;/a&gt;
  Is it for free?
&lt;/h1&gt;

&lt;p&gt;Unfortunately, not. Shorter code may reduce bundle size, however, if you have to transpile it to ES5, it will &lt;a href="https://dev.to/alekseiberezkin/3-javascript-features-that-bloat-your-es5-bundle-3aoa"&gt;work the other way&lt;/a&gt;. If you are of those happy devs who may ship untranspiled ES6+, you may face &lt;a href="https://dev.to/alekseiberezkin/es6-generators-vs-iterators-performance-1p7"&gt;performance penalties&lt;/a&gt;. But again, this doesn't mean you should stay away from the feature! Having clean and simple code may overweight disadvantages. Just be informed.&lt;/p&gt;




&lt;p&gt;&lt;em&gt;Thanks for reading this. Do you know other patterns benefitting from generators?&lt;/em&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>typescript</category>
      <category>generators</category>
    </item>
    <item>
      <title>Boas pr√°ticas de PEP 8</title>
      <author>Luciano-Rangel-Aguiar</author>
      <pubDate>Sat, 24 Apr 2021 15:59:53 +0000</pubDate>
      <link>https://dev.to/lucianorangelaguiar/boas-praticas-de-pep-8-5ccl</link>
      <guid>https://dev.to/lucianorangelaguiar/boas-praticas-de-pep-8-5ccl</guid>
      <description>&lt;p&gt;PEP (Python Enhancement Proposals) 8 √© um conjunto de conven√ß√µes e pr√°ticas para a linguagem de c√≥digo Python, essas pr√°ticas tem uso difundido na comunidade Python e facilitam a compreens√£o e edi√ß√£o do seu c√≥digo. A PEP 8 foi publicada em 2001 e escrita por Guido Van Rossum, Barry Warsaw e Nick Coghlan, a proposta deste documento foi estabelecer um guia de estilo para a linguagem. &lt;/p&gt;

&lt;p&gt;Eu decidi escrever esse artigo com a inten√ß√£o de consolidar meus conhecimentos sobre o assunto e facilitar a consulta do material, n√£o s√≥ para mim, mas tamb√©m para todos aqueles que est√£o iniciando o aprendizado da linguagem Python. &lt;/p&gt;

&lt;p&gt;Tamb√©m elaborei os seguintes t√≥picos com base na aula de PEP8 do &lt;a href="https://www.udemy.com/course/curso-de-programacao-em-python-do-basico-ao-avancado/"&gt;curso Programa√ß√£o em Python do b√°sico ao avan√ßado da Geek University&lt;/a&gt;. Esses t√≥picos abordam as principais ideias de boas praticas da PEP 8.&lt;/p&gt;

&lt;p&gt;Sintam-se √† vontade para utilizar esse material e bons estudos! &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#1-nomeando-clases-vari%C3%A1veis-e-fun%C3%A7%C3%B5es"&gt;
  &lt;/a&gt;
  1. Nomeando clases, vari√°veis e fun√ß√µes:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Clases:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Classes utilizam CamelCase para diferenciar palavras de um nome composto, o que consiste de capitalizar as primeiras letras de cada palavra.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Clase&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
    &lt;span class="k"&gt;pass&lt;/span&gt; 

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ClaseComposta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Fun√ß√µes e vari√°veis:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Para nomear fun√ß√µes ou vari√°veis, utilize nomes em min√∫sculo, separando as palavras com underline.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;soma&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; 
    &lt;span class="k"&gt;pass&lt;/span&gt; 

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;soma_dois&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; 
    &lt;span class="k"&gt;pass&lt;/span&gt; 

&lt;span class="n"&gt;numero&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; 

&lt;span class="n"&gt;numero_impar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; 

&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#2-indenta%C3%A7%C3%A3o"&gt;
  &lt;/a&gt;
  2. Indenta√ß√£o:
&lt;/h2&gt;

&lt;p&gt;A indenta√ß√£o √© utilizada para indicar que um bloco de c√≥digo se encontra dentro de outro. Em Python, para realizar uma indenta√ß√£o s√£o utilizados 4 espa√ßos ao inv√©s de tab pois a tecla tab pode ser reconfigurada em sistemas diferentes podendo gerar conflito no c√≥digo, enquanto espa√ßos s√£o padr√£o em todos os sistemas. Essa pratica no entanto n√£o √© universal e caso voc√™ decida utilizar o tab √© aconselhado n√£o misturar os m√©todos de indenta√ß√£o. Utilize um ou outro.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s"&gt;"a"&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="s"&gt;"banana"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'tem'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-espa%C3%A7amento-entre-linhas"&gt;
  &lt;/a&gt;
  3. Espa√ßamento entre linhas:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Separar fun√ß√µes e defini√ß√µes de classe com duas linhas em branco:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Clase1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
    &lt;span class="k"&gt;pass&lt;/span&gt; 

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Clase2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;M√©todos dentro de uma classe devem ser separados com uma √∫nica linha em branco:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;metodo1&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; 
    &lt;span class="k"&gt;pass&lt;/span&gt; 

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;metodo2&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; 
    &lt;span class="k"&gt;pass&lt;/span&gt; 

&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#4-imports"&gt;
  &lt;/a&gt;
  4. Imports:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Imports de pacotes completos devem ser sempre feitos em linhas separadas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Errado:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Correto:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;immport&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt; 
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt; 

&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Imports de partes espec√≠ficas de um pacote devem ser retirados com um mesmo comando podendo ser dividindo em m√∫ltiplas linhas quando forem muitas partes.  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Poucas partes:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;Types&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;StringTypes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ListTypes&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Muitas partes:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;types&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; 
    &lt;span class="n"&gt;StringType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="n"&gt;ListType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="n"&gt;SetType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="n"&gt;OutroType&lt;/span&gt; 
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#5-espa%C3%A7os-em-express%C3%B5es-e-instru%C3%A7%C3%B5es"&gt;
  &lt;/a&gt;
  5. Espa√ßos em express√µes e instru√ß√µes:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Tome cuidado com a utilizacao de espacos excessivos em Python. O PEP 8 defende a utilizcao minima deles nas express√µes e instru√ß√µes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Errado:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;fun√ß√£o&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;algo&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;outro&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Correto:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;fun√ß√£o&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;algo&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;outro&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Errado:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;x&lt;/span&gt;              &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; 
&lt;span class="n"&gt;y&lt;/span&gt;              &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; 
&lt;span class="n"&gt;variavel_longa&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; 

&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Correto:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; 
&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; 
&lt;span class="n"&gt;variavel_longa&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; 

&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#6-finaliza%C3%A7%C3%A3o-de-logica"&gt;
  &lt;/a&gt;
  6. Finaliza√ß√£o de logica:
&lt;/h2&gt;

&lt;p&gt;√â muito importante que ao finalizar um bloco de l√≥gica se use um espa√ßamento de uma linha em branco (tecla enter) para determinar seu enceramento. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclus%C3%B5es"&gt;
  &lt;/a&gt;
  Conclus√µes:
&lt;/h2&gt;

&lt;p&gt;Seguindo esses princ√≠pios voc√™ pode garantir que seu c√≥digo Python ser√° leg√≠vel e organizado n√£o s√≥ para voc√™, mas tamb√©m para todos aqueles que vir√£o a ler e contribuir para seu c√≥digo, tamb√©m recomendo que leiam a &lt;a href="https://www.python.org/dev/peps/pep-0008/"&gt;documenta√ß√£o oficial da PEP 8&lt;/a&gt; para melhor compreens√£o do assunto. &lt;/p&gt;




&lt;p&gt;Teve algum problema? Comente neste artigo!&lt;/p&gt;

&lt;p&gt;Se este link foi √∫til pra voc√™ ou voc√™ quer apoiar os meus estudos,&lt;br&gt;
deixe seu ‚ù§Ô∏è&lt;/p&gt;

&lt;p&gt;At√© a pr√≥xima!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/M9NbzZjAcxq9jS9LZJ/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/M9NbzZjAcxq9jS9LZJ/giphy.gif" alt="Obrigado!"&gt;&lt;/a&gt; &lt;/p&gt;

</description>
      <category>python</category>
      <category>beginners</category>
    </item>
    <item>
      <title>JAVA Semester Project | Review Plsss! |  GN Tours and Services</title>
      <author>Gaurav Singh</author>
      <pubDate>Sat, 24 Apr 2021 15:51:56 +0000</pubDate>
      <link>https://dev.to/gauravsingh9356/java-semester-project-review-plsss-gn-tours-and-services-4fm7</link>
      <guid>https://dev.to/gauravsingh9356/java-semester-project-review-plsss-gn-tours-and-services-4fm7</guid>
      <description>&lt;p&gt;Finally, I have completed our project. This was my first Java project on this scale. Seriously, I had no idea about how far I will make it after I decided on this idea to implement. But at last, I am happy to share that I implemented more utilities than I initially thought!&lt;/p&gt;

&lt;p&gt;ùìñùìù ùì£ùì∏ùìæùìªùìº ùì™ùì∑ùì≠ ùì¢ùìÆùìªùìøùì≤ùì¨ùìÆùìº&lt;/p&gt;

&lt;p&gt;ùêÖùêÆùê•ùê•ùê≤ ùêãùê®ùêöùêùùêûùêù ùêëùêûùêöùê• ùêñùê®ùê´ùê•ùêù ùêÄùê©ùê©ùê•ùê¢ùêúùêöùê≠ùê¢ùê®ùêß ùê≠ùê® ùêùùêûùêØùêûùê•ùê®ùê© ùêö ùê¨ùê≤ùê¨ùê≠ùêûùê¶ ùê≠ùê°ùêöùê≠ ùêöùêÆùê≠ùê®ùê¶ùêöùê≠ùêûùê¨ ùê≠ùê°ùêû ùê©ùê´ùê®ùêúùêûùê¨ùê¨ùêûùê¨ ùêöùêßùêù ùêöùêúùê≠ùê¢ùêØùê¢ùê≠ùê¢ùêûùê¨ ùê®ùêü ùêö ùê≠ùê´ùêöùêØùêûùê•.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#functionalities"&gt;
  &lt;/a&gt;
  Functionalities:
&lt;/h2&gt;


&lt;li&gt;Fully Secured Authentication i.e. SignUp, Login, logout,Forget Password utilities. Encryption and Decryption of user passwords&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;Loading Welcome Screen to user&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;Registration&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;OTP Email Sending utility.&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;Confimation Email Sending utility after successfull registration&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;Update Details if user wants to update&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;View User Details&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;Different Packages with different prices and offerings&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;View Hotels&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;Book Package Utility&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;Dynamic Hotels Integration with Database&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;Book Hotel Utility&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;View booked Package and Hotel&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;No of person, AC/Non AC room, food/No food etc all utilities offerings and then dynamically calculation of prices&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;View Destination&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;Payment with Stripe&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;Chat Bot for answering FAQs&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;Review Us utility includes user rating out of 5 and their comments about our services&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;About Us&lt;/li&gt;
&lt;h2&gt;
  &lt;a href="#used-tech"&gt;
  &lt;/a&gt;
  Used Tech:
&lt;/h2&gt;


&lt;li&gt;Java Swing for UI&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;MySQL for Database&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;AES Algorithm for encryption/decryption of passwords&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;JavaMail for sending email OTP&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;Stripe API Payment Gateway &lt;/li&gt;
&lt;h2&gt;
  &lt;a href="#database-records"&gt;
  &lt;/a&gt;
  Database Records
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#database-travel"&gt;
  &lt;/a&gt;
  Database == Travel
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#tables"&gt;
  &lt;/a&gt;
  Tables:
&lt;/h4&gt;


&lt;li&gt;account for auth&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;customer for registration&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;bookpackage for booking of package&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;hotel for adding hotels in table and dynamically fetching them in UI&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;bookhotel for booking hotels&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;review for reviewing our services&lt;/li&gt;
&lt;h4&gt;
  &lt;a href="#if-liked-feel-free-to-star-itstarstruck"&gt;
  &lt;/a&gt;
  If liked feel free to star it!ü§©
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://github.com/GauravSingh9356/GN_Tours_Services/tree/master"&gt;Github Code Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.linkedin.com/feed/update/urn:li:activity:6785495647555469314/"&gt;LinkedIn&lt;/a&gt;&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>devops</category>
      <category>showdev</category>
      <category>devjournal</category>
    </item>
    <item>
      <title>10 Awesome 404 Page Not Found Page Designs</title>
      <author>Pawan Bhayde</author>
      <pubDate>Sat, 24 Apr 2021 15:43:27 +0000</pubDate>
      <link>https://dev.to/pawanbhayde/10-awesome-404-page-not-found-page-designs-5ig</link>
      <guid>https://dev.to/pawanbhayde/10-awesome-404-page-not-found-page-designs-5ig</guid>
      <description>&lt;h1&gt;
  &lt;a href="#fargo-404"&gt;
  &lt;/a&gt;
  Fargo 404
&lt;/h1&gt;

&lt;p&gt;Fargo-inspired 404 page for DailyUI #008&lt;/p&gt;

&lt;p&gt;Snow loosely based on &lt;a href="http://codepen.io/loktar00/pen/CHpGo"&gt;http://codepen.io/loktar00/pen/CHpGo&lt;/a&gt; and &lt;a href="http://php.quicoto.com/snow-html-canvas/"&gt;http://php.quicoto.com/snow-html-canvas/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/nw/embed/WQmxYY?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#404-page-lost-in-space"&gt;
  &lt;/a&gt;
  404 Page - Lost In Space
&lt;/h1&gt;

&lt;p&gt;Coded my dribbble shot: &lt;a href="https://dribbble.com/shots/4330167-404-Page-Lost-In-Space"&gt;https://dribbble.com/shots/4330167-404-Page-Lost-In-Space&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Animated 404 Lost in Space Page.
CSS3 Keyframe animations used.
All the illustrations are hand-crafted in Adobe Illustrator.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/salehriaz/embed/erJrZM?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#404-error-page"&gt;
  &lt;/a&gt;
  404 error page
&lt;/h1&gt;

&lt;p&gt;404 error SVG animation page&lt;br&gt;
anime.js&lt;/p&gt;

&lt;p&gt;error 404&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/uiswarup/embed/dyoyLOp?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#yeti-404-page"&gt;
  &lt;/a&gt;
  Yeti 404 Page
&lt;/h1&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/dsenneff/embed/mjZgmN?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#daily-ui-008-404-page"&gt;
  &lt;/a&gt;
  Daily UI #008 - 404 Page
&lt;/h1&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/rafaelavlucas/embed/NWWQNjZ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#404-page"&gt;
  &lt;/a&gt;
  404 Page
&lt;/h1&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/andrew-lawendy/embed/deOpMZ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#404-page"&gt;
  &lt;/a&gt;
  404 page
&lt;/h1&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/Navedkhan012/embed/vrWQMY?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#cyberpunk-error-page"&gt;
  &lt;/a&gt;
  Cyberpunk Error page
&lt;/h1&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/ltrademark/embed/xpgprZ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#404"&gt;
  &lt;/a&gt;
  404
&lt;/h1&gt;

&lt;p&gt;Page not found &lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/vineethtrv/embed/ZbKLmq?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#404-error-example"&gt;
  &lt;/a&gt;
  404 Error Example
&lt;/h1&gt;

&lt;p&gt;From graphic design to web design. This 404 error example was designed by Yoga Perdana and we have converted into web with pure CSS and minimal HTML using CSS3 gradients and shadows. See more creative examples in the related pens.&lt;/p&gt;

&lt;p&gt;Hope you like it :)&lt;/p&gt;

&lt;p&gt;Read the full article &lt;a href="https://www.silocreativo.com/en/creative-examples-404-error-css/"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/ricardpriet/embed/qVZxNo?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:-&lt;/strong&gt; visit my youtube channel for frontend tutorials&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;subscribe to my youtube channel :-&lt;/strong&gt; &lt;a href="https://www.youtube.com/channel/UCR64vQptythbJ1SmI-ub0Rg"&gt;https://www.youtube.com/channel/UCR64vQptythbJ1SmI-ub0Rg&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resent post :-&lt;/strong&gt; &lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/pawanbhayde" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bpN1Nik7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--9JCEgIY5--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/619463/7a66f3fc-82cb-499b-a22b-9b346123f937.png" alt="pawanbhayde image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/pawanbhayde/7-way-to-find-in-array-using-javascript-4lhf" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;7 Way To Find In Array Using Javascript&lt;/h2&gt;
      &lt;h3&gt;Pawan Bhayde „Éª Apr 24 „Éª 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#devops&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#discuss&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>codepen</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>html</category>
    </item>
    <item>
      <title>Notus React - Free Tailwind UI Kit</title>
      <author>Sm0ke</author>
      <pubDate>Sat, 24 Apr 2021 15:43:04 +0000</pubDate>
      <link>https://dev.to/sm0ke/notus-react-free-tailwind-ui-kit-2fn9</link>
      <guid>https://dev.to/sm0ke/notus-react-free-tailwind-ui-kit-2fn9</guid>
      <description>&lt;p&gt;This article presents an open-source UI Kit crafted with &lt;strong&gt;React and Tailwind&lt;/strong&gt;: &lt;em&gt;Notus React&lt;/em&gt;. The project is released under the MIT License on Github and curious minds can download and see this project in action with a few commands typed in the terminal. For newcomers, &lt;strong&gt;React&lt;/strong&gt; is an open-source library, probably the most popular one at the moment we speak, actively supported by the Facebook tech giant. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thanks for reading!&lt;/strong&gt; TL;DR;&lt;/p&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.creative-tim.com/product/notus-react"&gt;Notus React&lt;/a&gt; - product page&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://demos.creative-tim.com/notus-react/"&gt;Notus React&lt;/a&gt; - LIVE Demo&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to/sm0ke/react-dashboards-open-source-apps-1c7j"&gt;Free React Dashboards&lt;/a&gt; - a curated list | Dev.to&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g5b2ffUv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/admin-dashboards/react-dashboards/master/media/notus-react-tailwind-intro.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g5b2ffUv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/admin-dashboards/react-dashboards/master/media/notus-react-tailwind-intro.gif" alt="Notus React - Free Tailwind UI Kit, animated presentation."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Notus React is Free and Open Source. It features multiple HTML and React elements and it comes with dynamic components for React. By using the components and pages provided by this open-source React UI Kit, any developer with basic knowledge can code a new website quite fast.&lt;/p&gt;

&lt;p&gt;To compile and execute the project in a local environment, all we need is a decent NodeJS version plus Git, the popular versioning command tool to pull the sources directly from Github.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://github.com/creativetimofficial/notus-react/blob/main/README.md"&gt;README&lt;/a&gt; file provided in the source directory comes with a comprehensive setup regarding the build and kit execution.    &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fully Coded Components&lt;/strong&gt; - Notus React is built with over frontend 100 individual components, giving you the freedom to choose and combine. All components can take variations in colors that you can easily modify using Tailwind CSS classes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example Pages&lt;/strong&gt; - If you want to get inspiration or just show something directly to your clients, you can jump-start your development with our pre-built example pages. You will be able to quickly set up the basic structure for your web project.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Notus React&lt;/strong&gt; - Components&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8wg3gFeA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zkf9plgsj92qjbef3o7t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8wg3gFeA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zkf9plgsj92qjbef3o7t.png" alt="Notus React - Components."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Notus React&lt;/strong&gt; - Dashboard Page&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yzCaNq81--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zyn0a26jfl8sxse2gait.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yzCaNq81--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zyn0a26jfl8sxse2gait.png" alt="Notus React - Dashboard Page."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Notus React&lt;/strong&gt; - Profile Page&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jhHBPXl_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vqxxqetxgsmniphikuqa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jhHBPXl_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vqxxqetxgsmniphikuqa.png" alt="Notus React - Profile Page."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Thanks for reading! For more resources, please access:&lt;/p&gt;
&lt;/blockquote&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/creativetimofficial/notus-react"&gt;Notus React&lt;/a&gt; - Source Code (MIT License) published on Github&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://appseed.us/admin-dashboards/open-source"&gt;Open-source Admin Dashboards&lt;/a&gt; - index provided by AppSeed &lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>react</category>
      <category>tailwindcss</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Ruby 101: Variables, puts and gets</title>
      <author>Eric Chapman</author>
      <pubDate>Sat, 24 Apr 2021 15:15:37 +0000</pubDate>
      <link>https://dev.to/ericchapman/learn-ruby-101-variables-puts-and-gets-3k63</link>
      <guid>https://dev.to/ericchapman/learn-ruby-101-variables-puts-and-gets-3k63</guid>
      <description>&lt;p&gt;I develop in Javascript, Python, PHP and Ruby. By far Ruby is my favorite programming language. Together let start a journey and revisit our Ruby foundations. &lt;/p&gt;

&lt;h2&gt;You want to learn Ruby or your Ruby is a bit rusty?&lt;/h2&gt; 

&lt;p&gt;In this series we will start from the beginning and will learn every aspect of Ruby one step at a time. &lt;/p&gt;

&lt;p&gt;Each post will include some theory but also exercise and solution.&lt;/p&gt;

&lt;p&gt;If you have any questions/comments or your are new and need help, you can comment below or send me a message.&lt;/p&gt;

&lt;h2&gt;Run your Ruby code&lt;/h2&gt;

&lt;p&gt;No need to go through a complete install. Just go to this web site &lt;a href="https://replit.com/languages/ruby"&gt;https://replit.com/languages/ruby&lt;/a&gt; and start learning right now. You will have plenty of time to figure out the Ruby installation on your local machine later on...&lt;/p&gt;

&lt;h1&gt;Ruby Variables&lt;/h1&gt;

&lt;p&gt;If you‚Äôre new to programming, variables are the fundamental building blocks of a programming language as they are used to store different values that you want to process in your code.&lt;/p&gt;

&lt;p&gt;Once the variable is store in program memory, it can be use later on.&lt;/p&gt;

&lt;p&gt;For example let say you want to store the user name you can use a variable call name and set is value to Mike Taylor.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Mike Taylor'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In Ruby string is enclosed with quotation marks.&lt;/p&gt;

&lt;p&gt;The variable name we just created is a string variable. In Ruby we don't have to specified the variable type. &lt;/p&gt;

&lt;p&gt;Ruby is a Just-in-time (JIT) interpreted language. Which automatically recognizes the data type based on what variables are stored.&lt;/p&gt;

&lt;p&gt;Here are some Ruby basic variables type and how to create them&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# string&lt;/span&gt;
&lt;span class="n"&gt;full_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Mike Taylor'&lt;/span&gt;

&lt;span class="c1"&gt;# integer number&lt;/span&gt;
&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;

&lt;span class="c1"&gt;# float number&lt;/span&gt;
&lt;span class="n"&gt;book_price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;15.80&lt;/span&gt;

&lt;span class="c1"&gt;# booleans&lt;/span&gt;
&lt;span class="n"&gt;active?&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
&lt;span class="n"&gt;admin_user?&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ruby also have more advance variables type like array, hash, structure and class. We will cover all of those in details later.&lt;/p&gt;

&lt;h1&gt;Output&lt;/h1&gt;

&lt;p&gt;In Ruby it is possible to output information to the console/terminal.&lt;/p&gt;

&lt;p&gt;For example let's send our name variable to the console&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Mike Taylor'&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The puts method will take any value we give him and print it to the console...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Mike Taylor
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Others example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Mike Taylor'&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;'Hello World'&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;'Hello'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Hello World
Hello
Mike Taylor
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see we can send multiple value to puts method      and he will display all of them.&lt;/p&gt;

&lt;p&gt;Another Ruby method very similar to puts is the method print. Print can display something to the console but will not send the line break after each print. Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Mike Taylor'&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'Hello '&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Hello Mike Taylor
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;Input&lt;/h1&gt;

&lt;p&gt;How about getting info from user. In Ruby we use the method gets to do just that&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'Enter user name: '&lt;/span&gt;
&lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;gets&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The console will then wait for user input:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Enter user name: _
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The gets method will return everything you type plus a line break characters. If you don't want to read the line break characters use the chomp method to remove that last character&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;print 'Enter user name: '
name = gets.chomp
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;Exercice&lt;/h1&gt;

&lt;p&gt;Create a little program that ask for user name and user age and save the result in name and age variable. &lt;/p&gt;

&lt;p&gt;Then display name and age variable in the console&lt;/p&gt;

&lt;p&gt;Solution&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'Enter user name: '&lt;/span&gt;
&lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;gets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;chomp&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'Enter user age: '&lt;/span&gt;
&lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;gets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;chomp&lt;/span&gt;

&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;'The user name is: '&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;'The user age is: '&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;That's it for today. The journey just started, stay tune for the next post very soon. (later today or tomorrow)&lt;/p&gt;

&lt;p&gt;If you have any comments or questions please do so here or send me a message on twitter. &lt;/p&gt;

&lt;p&gt;I am new on twitter so if you want to make me happy&lt;br&gt;
Follow me: &lt;a href="https://twitter.com/justericchapman?ref_src=twsrc%5Etfw"&gt;Follow @justericchapman&lt;/a&gt;&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
