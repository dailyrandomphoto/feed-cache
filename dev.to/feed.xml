<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Programmer Imposter Syndrome: 5 Ways to Get Over Yours</title>
      <author>sumit mehra</author>
      <pubDate>Sun, 26 Sep 2021 10:48:35 +0000</pubDate>
      <link>https://dev.to/sumit134coder/programmer-imposter-syndrome-5-ways-to-get-over-yours-o3i</link>
      <guid>https://dev.to/sumit134coder/programmer-imposter-syndrome-5-ways-to-get-over-yours-o3i</guid>
      <description>&lt;h3&gt;
  &lt;a href="#think-youre-unqualified-for-the-work-you-do-its-called-imposter-syndrome-and-heres-how-to-handle-it"&gt;
  &lt;/a&gt;
  Think you’re unqualified for the work you do? It’s called imposter syndrome and here’s how to handle it.
&lt;/h3&gt;

&lt;p&gt;Do you beat yourself up for making simple mistakes? Or maybe you get completely lost in a meeting about a new project because you don’t know half the technologies the other devs are talking about. And to make matters worse, you constantly feel like you’re falling farther and farther behind the next, hot framework or language.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#if-so-welcome-to-the-coders-club"&gt;
  &lt;/a&gt;
  &lt;em&gt;If so welcome to the Coders club...&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;Kidding aside, these negative emotions are very common (you’re not alone!). It’s called imposter syndrome: the constant feeling of not being good enough or knowing enough to do your job well. Everyone has experienced these emotions at some point in their life, whether personal or professional—and not just within software development. It’s human nature. The most successful and productive people are often very effective at minimizing the occurrences of imposter syndrome in their lives.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-you-feel-like-a-fraud"&gt;
  &lt;/a&gt;
  Why you feel like a fraud
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#-software-development-never-stops-evolving"&gt;
  &lt;/a&gt;
  * Software development never stops evolving.
&lt;/h3&gt;

&lt;p&gt;It’s a large field and it’s only getting bigger. Not only are there more people entering as new developers, but the use of software is expanding, which means the demand for devs is going up. This encourages the frequent creation of new languages, frameworks, and tools. This means there’s more to learn and it’s only going to get more complex as the industry matures. With this mind, you may feel overwhelmed at times as a developer.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-furthermore-the-media-creates-unrealistic-perceptions-around-the-tech-industry"&gt;
  &lt;/a&gt;
  * Furthermore, the media creates unrealistic perceptions around the tech industry.
&lt;/h3&gt;

&lt;p&gt;Software specifically, gets a lot of attention and glory in the media. Given how often new tech startups get covered in the media and how their founders are portrayed as brilliant and uniquely creative, it’s no wonder that so many people feel that they can never make it as a top-tier developer. Software development also has a mythos that’s grown up around it that says only the super-smart people are able to grasp it. While that may have been true once, programming languages and tools have come a long way and made programming a lot easier and more approachable.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#here-are-some-tips-which-can-help-you-fight-your-programmers-imposter-syndrome-"&gt;
  &lt;/a&gt;
  Here are some tips which can help you fight your programmers imposter syndrome -
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-get-comfortable-with-being-uncomfortable"&gt;
  &lt;/a&gt;
  &lt;em&gt;1. Get comfortable with being uncomfortable&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;You need to realize and accept that imposter syndrome never truly goes away. The crux of imposter syndrome is that you’re comparing what you know to what you think other people know. You don’t see other people struggling and you don’t know what they don’t know. &lt;/p&gt;

&lt;p&gt;This is the essence of imposter syndrome. You see everyone else’s success and intelligence, and then you fear that you don’t have that or know that concept or technology. The focus on your own weaknesses is understandable and natural. None of us want to be the worst developer in a company. Most developers love to learn and there’s so much to learn in development. So it’s natural to look at what you still have yet to learn, compare yourself to people who already know all of it, and feel inferior and that you’ll never be an expert.&lt;/p&gt;

&lt;p&gt;To be honest, you never really will be an expert in software development. There will always be more to learn. There will always be new languages, or processes, or technologies to learn. There will always be someone who knows something you don’t. There will always be someone who knows more than you do. There will always be someone who’s a better developer.&lt;/p&gt;

&lt;p&gt;That thought may be depressing right now, but I feel it’s actually liberating. You can focus on getting better and growing. Focus on what you can control: your skills and your knowledge. Accept that there will never be a point where you’ll feel completely knowledgeable and completely comfortable.&lt;/p&gt;

&lt;p&gt;In short, as one developer I talked with said: get comfortable with being uncomfortable. Embrace your ignorance and use that to fuel your growth, not your self-doubt.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-adopt-the-growth-mindset"&gt;
  &lt;/a&gt;
  &lt;em&gt;2. Adopt the growth mindset&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;People with the fixed mindset have a constant need to prove their competence and intelligence. They have a deep need to be perfect at everything and to be perfect immediately. Because these people view their intelligence as fixed, failures are a reflection of their lack of intelligence and so they seek to blame circumstances or other people for their failures.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Intelligence is not fixed, and in fact, it is directly tied to effort and challenge&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Essentially, your feeling of inadequacy is a signal that you’re being challenged. To really become a great developer, you need to embrace that challenge and actually seek it out. View it as an opportunity to learn, to become better, and to grow.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-keep-track-of-your-accomplishments"&gt;
  &lt;/a&gt;
  &lt;em&gt;3. Keep track of your accomplishments&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;Regularly reflecting on your successes can help remind you of how far you’ve come and how good you really are. This will help balance the scales of positive vs negative self-talk that is at the heart of imposter syndrome.&lt;/p&gt;

&lt;p&gt;One good way to do that is to make a recurring calendar appointment for the end of every month to add all accomplishments from that month to a “portfolio” of accomplishments. Even if something eventually failed, if you attempted something outside your comfort zone, write it down. It was a growth experience.&lt;/p&gt;

&lt;p&gt;In addition to capturing your monthly accomplishments, you should also take a few minutes to reflect on past accomplishments and add any to previous months that you forgot. Also, don’t just write them down and read them. You need to truly reflect on what went into that accomplishment and how you felt about it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-figure-out-how-you-learn-the-best"&gt;
  &lt;/a&gt;
  &lt;em&gt;4. Figure out how you learn the best&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;While there is now data showing that learning styles aren’t really a thing, everyone has ways that they prefer to learn. Using your preferred learning style can help instill confidence and push you further away from your imposter syndrome. Think back on what you’ve tried to learn in the past and what worked best. Think about which resources (books, videos, courses) seemed to make things clearer or what seemed to help you get to that “Ah ha!” moment.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-plan-your-career-goals-to-reduce-doubt"&gt;
  &lt;/a&gt;
  &lt;em&gt;5. Plan your career goals to reduce doubt&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;A lot of self-induced impostor syndrome can be due to the unknown when looking ahead. To combat this, you should set goals and plan your career path. This will provide you confidence when making career decisions and deciding what skills to learn and focus on.&lt;/p&gt;

&lt;p&gt;Instead of looking at how you learn, you need to look at what you want to do eventually — what industry, technology, language, company you want to work in or for. Then, using that information you find out what you need to learn.&lt;/p&gt;

&lt;p&gt;You can find the required skills by viewing job requirements for the job you want to have. You can also find out what skills are necessary by finding developers who have your desired job on LinkedIn or via Meetups. Contact them and meet them for coffee, or lunch and talk to them about their job and what skills they use regularly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#it-never-ends-handling-imposter-syndrome-as-you-progress"&gt;
  &lt;/a&gt;
  It never ends: handling imposter syndrome as you progress
&lt;/h2&gt;

&lt;p&gt;One unfortunate aspect of imposter syndrome is that you never really get away from it. I know other good, experienced developers who fight and experience the imposter syndrome at work too but only advice i been hearing is to starting to control it early in your career and taking steps to weaken its hold on you is one of the best ways to reduce it’s impact on you in the future.&lt;/p&gt;

&lt;p&gt;In my case, Whenever I start to feel like I’m not productive enough, or not moving forward fast enough, I reflect on why I feel that way. I think about all the possible reasons I might not be as productive as I think I should, and evaluate whether I think they’re valid. Most of the time they are.&lt;/p&gt;

&lt;p&gt;I also reflect on my situation to see if I’m doing the best job of learning. Am I optimizing for learning or just trying to look busy and productive? If I’m not optimizing for learning, I change my mindset and slow down. If I’m working in a new codebase, I try to find that I have to constantly adjust my mindset to view the task as an opportunity to grow and get better.&lt;/p&gt;

&lt;p&gt;Hope this article will be helpful to all the developers feeling the same at their job.....&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Make Todo App with Flutter and Firebase </title>
      <author>Balram Rathore</author>
      <pubDate>Sun, 26 Sep 2021 10:41:11 +0000</pubDate>
      <link>https://dev.to/devstack06/make-todo-app-with-flutter-and-firebase-45lg</link>
      <guid>https://dev.to/devstack06/make-todo-app-with-flutter-and-firebase-45lg</guid>
      <description>&lt;p&gt;Hey All,&lt;br&gt;
All four videos of Cloud Firestore CRUD Operation is now uploaded 🥳🥳🥳, find the link below 👇👇👇👇&lt;br&gt;
Link: &lt;a href="https://lnkd.in/eXaush4J"&gt;https://lnkd.in/eXaush4J&lt;/a&gt; ( Final CRUD Video)&lt;/p&gt;

&lt;p&gt;This playlist will help you to understand the below topics:&lt;br&gt;
📌📌 Google Auth&lt;br&gt;
📌📌 Phone Auth&lt;br&gt;
📌📌 Email Auth&lt;br&gt;
📌📌 CRUD Operation ( Creating a Todo, Reading, Editing and deleting the todo) Along with respective screens&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qkyW8KHY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9bdt3wsqnonz6yp71bt5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qkyW8KHY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9bdt3wsqnonz6yp71bt5.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1b1E5vNW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nu8dj8j3oapzhig5pcy2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1b1E5vNW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nu8dj8j3oapzhig5pcy2.png" alt="Alt Text"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Have a look at the playlist link on the first comment 👇👇👇👇&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#flutterdev-flutterappdevelopment-fluttercommunity-flutterapp-flutterdevelopment-flutterdeveloper-flutterdevelopers-firebase-flutterbygoogle"&gt;
  &lt;/a&gt;
  flutterdev #flutterappdevelopment #fluttercommunity #flutterapp #flutterdevelopment #flutterdeveloper #flutterdevelopers #firebase #flutterbygoogle
&lt;/h1&gt;

</description>
      <category>flutter</category>
      <category>firebase</category>
    </item>
    <item>
      <title>10k+ views on my Full React Project Video</title>
      <author>The Nerdy Dev</author>
      <pubDate>Sun, 26 Sep 2021 10:29:31 +0000</pubDate>
      <link>https://dev.to/thenerdydev/10k-views-on-my-full-react-project-video-51p9</link>
      <guid>https://dev.to/thenerdydev/10k-views-on-my-full-react-project-video-51p9</guid>
      <description>&lt;p&gt;Recently, I released a video on making an &lt;strong&gt;Exercise Tracker Application&lt;/strong&gt; using React.js. Today at the time of writing this article, it has crossed &lt;strong&gt;10k+ views&lt;/strong&gt; on YouTube. &lt;/p&gt;

&lt;p&gt;Here is the link for the same if you want to get started with React but you are confused as to where to start from. &lt;/p&gt;

&lt;p&gt;So check this out : &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/iqewbHLKkQk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;The features that we build in this course are : &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Fetching the list of exercises from a local JSON Server&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;2. Create a New Exercise&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;3. Update an already existing exercise&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;4. Delete an existing exercise&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;5. Toggling the completion status of an exercise and showing it in visually.&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;6. Creating a filter component to filter the exercises based on the completion status - pending, all, completed. &lt;br&gt;
and more.&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#%E2%8F%B1-timestamps-%E2%8F%B1"&gt;
  &lt;/a&gt;
  ⏱ Timestamps ⏱
&lt;/h2&gt;

&lt;p&gt;📌 let's start (0:00)&lt;br&gt;
📌 demo of our exercise tracker project (0:20)&lt;br&gt;
📌 a quick glance over the starter files (1:37)&lt;br&gt;
📌 setting up our starter project and installation (2:00)&lt;br&gt;
📌 whiteboard : deciding about the components for our project (2:15)&lt;br&gt;
📌 starting the project (7:20)&lt;br&gt;
📌 installation of json-server package &amp;amp; running it (7:36)&lt;br&gt;
📌 creating our first page component - homepage (9:05)&lt;br&gt;
📌 bringing our first hook into action - useState (9:23)&lt;br&gt;
📌 fetching data from our data source using another hook - useEffect  (10:25)&lt;br&gt;
📌 installation and setting up react-router (13:50)&lt;br&gt;
📌 defining our first route : home page route(14:57)&lt;br&gt;
📌 seeing our fetched exercises in react-dev-tools extension (17:16)&lt;br&gt;
📌 starting with exercise list component (18:00)&lt;br&gt;
📌 passing our fetched exercises to the exercises list component as a prop (21:10)&lt;br&gt;
📌 creating an exercise item component (22:16)&lt;br&gt;
📌 using the exercise item in exercises list and passing exercise as a prop (25:15)&lt;br&gt;
📌 starting with delete exercise functionality (28:28)&lt;br&gt;
📌 whiteboard: understanding the process for deletion of item (29:35)&lt;br&gt;
📌 defining our delete exercise handler in home page component (32:16)&lt;br&gt;
📌 passing a pointer to our delete exercise handler as a prop to exercises list component (33:29)&lt;br&gt;
📌 forwarding the pointer to delete exercise handler as a prop further down to exercise item component (33:29)&lt;br&gt;
📌 ensuring the deletion of item gets reflected in our local JSON store (35:20)&lt;br&gt;
📌 starting with toggling the exercise completion status functionality (37:10)&lt;br&gt;
📌  defining our toggle exercise completion handler in home page component (38:29)&lt;br&gt;
📌  forwarding a pointer to our toggle exercise handler as a prop to exercises list component (41:45)&lt;br&gt;
📌  forwarding the pointer to our toggle exercise handler further down to our exercise item component (42:57)&lt;br&gt;
📌  invoking our toggle exercise completion handler via the on toggle exercise prop (43:08)&lt;br&gt;
📌  ensuring the toggling of the completion status gets reflected in our local JSON store (45:34)&lt;br&gt;
📌  laying out our create exercise form (49:44)&lt;br&gt;
📌  handling form submission for creating a new exercise (58:07)&lt;br&gt;
📌  using the useHistory hook to push the user back to home page on exercise creation (1:02:50)&lt;br&gt;
📌  creating the navbar component (1:04:37)&lt;br&gt;
📌  starting with edit exercise component (1:07:50)&lt;br&gt;
📌  creating a route for the edit exercise component using dynamic segment (1:09:20)&lt;br&gt;
📌 adding a router link for editing an exercise for an exercise item (1:09:53)&lt;br&gt;
📌 extracting the id of an exercise from the router params using the useParams hook (1:11:30)&lt;br&gt;
📌 using the id that we get from router params to load the exercise in our edit exercise component (1:13:19)&lt;br&gt;
📌 handling form submission for updating the populated exercise (1:16:41)&lt;br&gt;
📌 filtering the exercises based on their completion status (1:20:57)&lt;br&gt;
📌 creating our base filter component (1:21:40)&lt;br&gt;
📌 setting up a current filter state in our home page component (1:25:20)&lt;br&gt;
📌 creating an update exercise handler in our home page component (1:25:55)&lt;br&gt;
📌 passing a pointer to our update exercise handler down to base filter (1:26:56)&lt;br&gt;
📌 passing the current filter down to base filter (1:27:42)&lt;br&gt;
📌 using the current filter prop in base filter component to give extra styles to our navlinks (1:28:26)&lt;br&gt;
📌 using the filter to show exercises based on their completion status on home page (1:29:32)&lt;br&gt;
📌 end of the project (1:31:20)&lt;/p&gt;

&lt;p&gt;So this is it for this article. Thanks for reading. &lt;br&gt;
&lt;strong&gt;Don't forget to leave a like if you loved the article. Also share it with your friends and colleagues.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MGpya8n1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3qpl01uwp1qlmbqkhfpm.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MGpya8n1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3qpl01uwp1qlmbqkhfpm.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PS&lt;/strong&gt; - If you are looking to learn Web Development, I have curated a &lt;strong&gt;FREE&lt;/strong&gt; course for you on my YouTube Channel, check the below article :&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/thenerdydev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dvgjnxQX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j2i8W0Wf--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/297820/e861379b-e75a-48e5-bc39-44b3e940c086.png" alt="thenerdydev"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/thenerdydev/2021-web-developer-full-course-html-css-javascript-node-js-and-mongodb-27pb" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;(2021) - Web Developer Full Course : HTML, CSS, JavaScript, Node.js and MongoDB&lt;/h2&gt;
      &lt;h3&gt;The Nerdy Dev ・ Apr 28 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#node&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;Looking to learn React.js with one Full &lt;strong&gt;Project&lt;/strong&gt;, check this out : &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/thenerdydev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dvgjnxQX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j2i8W0Wf--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/297820/e861379b-e75a-48e5-bc39-44b3e940c086.png" alt="thenerdydev"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/thenerdydev/learn-react-with-one-big-project-notes-included-demo-and-video-link-4fe5" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Learn React with one BIG Project [NOTES included] - Demo and Video Link&lt;/h2&gt;
      &lt;h3&gt;The Nerdy Dev ・ Jun 10 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#100daysofcode&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#support-my-channel"&gt;
  &lt;/a&gt;
  Support my channel:
&lt;/h2&gt;

&lt;p&gt;💜 Join the Discord community 👨‍👩‍👧‍👦: &lt;a href="https://discord.gg/fgbtN2a"&gt;https://discord.gg/fgbtN2a&lt;/a&gt; &lt;br&gt;
Thank you! 🙏&lt;/p&gt;




&lt;p&gt;Follow me on:&lt;br&gt;
👉 Twitter: &lt;a href="https://twitter.com/The_Nerdy_Dev"&gt;https://twitter.com/The_Nerdy_Dev&lt;/a&gt;&lt;br&gt;
👉 Instagram: &lt;a href="https://instagram.com/thenerdydev"&gt;https://instagram.com/thenerdydev&lt;/a&gt;&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>react</category>
      <category>javascript</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>TechLead or DevLead ?</title>
      <author>Laurent Dumas</author>
      <pubDate>Sun, 26 Sep 2021 10:25:50 +0000</pubDate>
      <link>https://dev.to/laurentld79/techlead-or-devlead-369c</link>
      <guid>https://dev.to/laurentld79/techlead-or-devlead-369c</guid>
      <description>&lt;p&gt;Hi,&lt;/p&gt;

&lt;p&gt;Sometimes i read post about techlead but often oriented to the technical stuff, best practice etc. I think that Leading role can be separate in 2, the tech for one et and well "dev" for the other. In fact, i think the other is more about soft skill. Because being a great developer tech-wise doesn't not necessarily means that you can teach, give some advice with the right word.&lt;br&gt;
I think that Leading demands skill like Patience, Empathy, because you need to deal with different personnalities, and it's not always easy.&lt;/p&gt;

&lt;p&gt;What do you think? Do you make that difference, or see that Leading is like 2 jobs in one ?&lt;/p&gt;

</description>
      <category>leadership</category>
      <category>career</category>
      <category>discuss</category>
      <category>softskill</category>
    </item>
    <item>
      <title>What kind of sorting method it is?</title>
      <author>Riaj Ahmed</author>
      <pubDate>Sun, 26 Sep 2021 10:06:46 +0000</pubDate>
      <link>https://dev.to/riajahmed19/what-kind-of-sorting-method-it-is-lgi</link>
      <guid>https://dev.to/riajahmed19/what-kind-of-sorting-method-it-is-lgi</guid>
      <description>&lt;p&gt;let arr=[57,2,3,12,43,23,23,43,56,98,03,77,23]&lt;br&gt;
let insertion= a=&amp;gt;{&lt;br&gt;
    if(a.length&amp;lt;2){return a}&lt;br&gt;
    for(var i=0; i&amp;lt;a.length; i++){&lt;br&gt;
        //console.log(" value of i=",i, "move to ", a[i])&lt;br&gt;
        let temp&lt;br&gt;
        if(a[i]&amp;lt;a[i+1]){&lt;br&gt;
            //console.log( a[i], a[i+1])&lt;br&gt;
            temp=a[i]&lt;br&gt;
            a[i]=a[i+1]&lt;br&gt;
            a[i+1]=temp&lt;br&gt;
            i=i-2&lt;br&gt;
        }//else{console.log("nothing to do")}&lt;br&gt;
    }&lt;br&gt;
    return arr&lt;br&gt;
}&lt;br&gt;
console.log(insertion(arr))&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Task Force 3.0 Week 4</title>
      <author>Richard Munyemana</author>
      <pubDate>Sun, 26 Sep 2021 10:05:30 +0000</pubDate>
      <link>https://dev.to/code250/task-force-3-0-week-4-3c01</link>
      <guid>https://dev.to/code250/task-force-3-0-week-4-3c01</guid>
      <description>&lt;p&gt;This is the end of week 4 of our task Force and it is amazing to realize how you can accomplish many things with a small period of time.&lt;br&gt;
Good developers are not those who can code and develop a site in one or two days but those who also knows how to communicate to outside world of his/her field.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Agile communication World&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;communication in agile world we have seen different ways agile  methodology uses to convey message&lt;br&gt;
we have looked into 2 methodologies and compared them.&lt;br&gt;
    1.&lt;strong&gt;Scrum&lt;/strong&gt;&lt;br&gt;
    2.&lt;strong&gt;Kanban&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Scrum&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;scrum is method a where we have sprint depending on your team you decide how long the sprint would take and each sprint should have a scrum master scrum master is responsible to know that team mates are working on their tasks and he/ is supposed to review his/ her teammates codes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cc-fPufP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0mlfjxaqxotl6aklwz4v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cc-fPufP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0mlfjxaqxotl6aklwz4v.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Kanban&lt;/strong&gt;&lt;br&gt;
  on the other hand there is kanban it is also an agile methodology where we have boards with tickets.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vZ73MCNO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uy920keajube1aw1oovy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vZ73MCNO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uy920keajube1aw1oovy.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;most of the time taking advantage of both scrum and kanban methodology is very efficient. &lt;br&gt;
For the boards you can use trello board,&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8z98-EbA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.trello.com" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8z98-EbA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.trello.com" alt="trello  board"&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time Management&lt;/strong&gt;&lt;br&gt;
Managing your time helps you understand well the priority matrix&lt;br&gt;
and when you manage your time well you get to do all your tasks on planned time deadlines are no longer problems and you can not take a lot of tasks since you have a routine of how your day starts and ends,&lt;br&gt;
I also helps to avoid procrastination and imposter syndrome.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---bxvgEV8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hhqph6pi572deb3ur0nt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---bxvgEV8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hhqph6pi572deb3ur0nt.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;complex UIs&lt;/strong&gt;&lt;br&gt;
complex UIs sharpening skills is something you got do a lot if you want to grow that why in this week we have been introduced to another complex UIs to build.&lt;br&gt;
It is amazing to have great team around you to review your codes and give you feedback to help you grow your skills and think out of the box to accomplish the challenge.&lt;/p&gt;

&lt;p&gt;Communication skills is always the first thing you need to be notice in the community and when combined with better time management you can achieve a lot.&lt;/p&gt;

&lt;p&gt;thanks next week it is.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Execution Model of JavaScript</title>
      <author>Dharmarajsinh Jethva </author>
      <pubDate>Sun, 26 Sep 2021 09:53:18 +0000</pubDate>
      <link>https://dev.to/gokukun/execution-model-of-javascript-3hko</link>
      <guid>https://dev.to/gokukun/execution-model-of-javascript-3hko</guid>
      <description>&lt;p&gt;JS has been often classified as a scripting interpreted language. However, the truth to this matter is that there are more than one ways of interpreting (pun intended &amp;amp; left to your interpretation).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#models-of-execution"&gt;
  &lt;/a&gt;
  Models of Execution
&lt;/h2&gt;

&lt;p&gt;The usual method that we think of, when the phrase &lt;em&gt;interpreted language&lt;/em&gt; is mentioned, is the line by line execution of the source code. In this processing model, each line is transformed into machine code, the transformed line of code is executed and only after that does the processing model continue to the next line.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oGSNJoNJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z6nt4eemvogzlko2pisj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oGSNJoNJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z6nt4eemvogzlko2pisj.png" alt="interpreted execution model"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There is another processing model called &lt;em&gt;compilation&lt;/em&gt; where the entire source code is taken and transformed at once into machine instructions and these instructions are saved into another file. Once the compiled machine instructions file is created, executing this file will run the output of original code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cVzeN2sS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l7ijg2bixh27zkc4z3d9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cVzeN2sS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l7ijg2bixh27zkc4z3d9.png" alt="compiled execution model"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#is-js-interpreted-a-prologue-to-js-execution"&gt;
  &lt;/a&gt;
  Is JS interpreted? A prologue to JS execution
&lt;/h2&gt;

&lt;p&gt;The question still remains that whether JS employs this method of line by line conversion of code, followed by execution, we commonly refer to as 'interpretation'? Well, the answer is little more subtle than a yes or a no answer. JavaScript engines have amalgamated both of these above mentioned processing models into how they execute JS. Even though, these engines don't generate a compiled machine instruction file, JS is still compiled before it starts executing. I know. I know. That was a lot to take in just one sentence but just give this idea &lt;a href="https://signalvnoise.com/posts/3124-give-it-five-minutes"&gt;five minutes&lt;/a&gt; and the pieces to the puzzle of JS's execution mechanism will suddenly start to fit. Keeping this idea in mind that JS first compiles the entire code, let's continue ahead.&lt;/p&gt;

&lt;p&gt;The behavior that JS compiles it's code first, is noticeable through something as plain as 'syntax errors' and 'hoisting'.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#making-a-syntactical-error"&gt;
  &lt;/a&gt;
  Making a Syntactical Error
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello World&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// this won't be printed&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;wrongJS&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;this will throw an error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If JS was interpreted, transformed, and executed line by line without moving to the next line before completing this process, the first line would've printed "Hello World" to the console because the error lies on line 2. But, it doesn't get executed line by line without getting compiled first and it didn't print to the console because of the syntax error. This is one such example portraying that there are certain elements of compilation at play here.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hoisting-a-function-declaration"&gt;
  &lt;/a&gt;
  Hoisting a Function Declaration
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;print_hello&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;print_hello&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Again, if JS was interpreted line by line, it couldn't have looked ahead on line 3 without executing line 1. That would mean that JS didn't know what &lt;code&gt;print_hello()&lt;/code&gt; is on line 1 and it should've rightfully thrown a reference error. But, it didn't throw an error and instead, it successfully executed the function and printed to the console. &lt;/p&gt;

&lt;p&gt;These examples clearly poke some holes in the theory that JS is a strictly interpreted language. So, does that mean JS is entirely a compiled language? Hold your horses. As I said, JS engines implement a mixture of both these methods. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;From the evidence of the above give peculiar cases, it should suffice to say that JS engines have a compiler which compiles the code into a byte code and this byte code is then fed into an interpreter which generates a machine code to be executed. This is a high level explanation of how JS code gets run without getting into the details of the baseline compilers, JIT compilers, interpreters and what not.&lt;/p&gt;

&lt;p&gt;Fun fact: As JS engines don't have typical compilation step of being compiled ahead of time, the compiled code isn't always optimized because they don't always have as much time to optimize it. Hence, they use optimizing compilers to optimize the repeated pieces of code during the execution by keeping a track of executed code and the data that's used for execution.&lt;/p&gt;

&lt;p&gt;Hopefully, the idea about how JS engines execute code has started to make more sense. We'll explore this concept more in future post of scoping mechanisms.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>intepreted</category>
      <category>compiled</category>
    </item>
    <item>
      <title>How to ensure the highest quality of Software code</title>
      <author>Somesh Thakur</author>
      <pubDate>Sun, 26 Sep 2021 09:20:36 +0000</pubDate>
      <link>https://dev.to/someshthakur/how-to-ensures-highest-quality-of-software-4917</link>
      <guid>https://dev.to/someshthakur/how-to-ensures-highest-quality-of-software-4917</guid>
      <description>&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; By following best industry practices like linting, unit testing, static code analysis and continuous monitoring of the software.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#modern-software-development"&gt;
  &lt;/a&gt;
  Modern Software Development
&lt;/h2&gt;

&lt;p&gt;The software development process has changed a lot in last few years. Many of the modern tools &amp;amp; frameworks has built-in support to ensure that the code is clean, maintainable and readable. But any developer can make mistakes while coding a feature on mind and that's totally fine. We all have gone through that stage &amp;amp; we learnt through making mistakes.&lt;/p&gt;

&lt;p&gt;In this article I am going to share some of the basic to advanced levels of checks which I learnt through working on Enterprise software applications. These are some of the best practices that you can follow or explore.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-code-linting"&gt;
  &lt;/a&gt;
  1. Code Linting
&lt;/h3&gt;

&lt;p&gt;One of the basic setup that gives many advantages in long run is code linting. It leaves very minimal space to a developer to write unconventional or unreadable code. You can also ensure the rules of your coding conventions that your team might have agreed upon.&lt;/p&gt;

&lt;p&gt;My team uses &lt;strong&gt;TSLint&lt;/strong&gt; on our Angular project (that comes by default with the framework) to have standard clean coding conventions. The typical TSLint config of our project might look something like below image.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--amqoLOsZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nsuyfc175cavdpbz912o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--amqoLOsZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nsuyfc175cavdpbz912o.png" alt="TSLint config"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-unit-testing"&gt;
  &lt;/a&gt;
  2. Unit Testing
&lt;/h3&gt;

&lt;p&gt;The biggest layer in the testing pyramid which tells us to test every unit of your code. If you spend enough time writing meaningful &amp;amp; good quality unit testing logic, it will give you sweet fruitful results that can lead to bug free development experience.&lt;/p&gt;

&lt;p&gt;We use &lt;a href="https://github.com/istanbuljs/nyc"&gt;Istanbul&lt;/a&gt; tool's code coverage thresholds with lines rule of &amp;gt; 85%. We also make sure that any new code addition through merge requests should also match up to the expectations. (How? Read the next parts.)&lt;/p&gt;

&lt;p&gt;Istanbuls config file:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EX5L1mZs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uxj2lusg547wktjnjg3n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EX5L1mZs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uxj2lusg547wktjnjg3n.png" alt="nyrc config"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-husky-hooks"&gt;
  &lt;/a&gt;
  3. Husky hooks
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://typicode.github.io/husky/"&gt;Husky&lt;/a&gt; 🐶 is one of the best git hook tool that you can add to your project. It gives you ability to fail first i.e., fail in your development environment. You can add many kind of hooks some of them which we use are&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Checking commit messages to follow specific format set by team&lt;/li&gt;
&lt;li&gt;Checking lint/format issues&lt;/li&gt;
&lt;li&gt;Running unit test cases when pushing code to remote repository&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hooks configurations: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zPgQA3e0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vf2vgvhwulhryf3skjob.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zPgQA3e0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vf2vgvhwulhryf3skjob.PNG" alt="Husky hooks"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-cicd-pipeline"&gt;
  &lt;/a&gt;
  4. CI/CD Pipeline
&lt;/h3&gt;

&lt;p&gt;On every merge request, a CI/CD pipeline triggers to check code's overall linting, formatting &amp;amp; running unit test cases. This ensures the integrity is maintained while adding a new component/feature. There are other pipelines scheduled like deployment on merge, weekly sonarqube checks (read more below), monthly vulnerblity test through Veeracode etc.&lt;/p&gt;

&lt;p&gt;The Jenkins pipeline runs through groovy scripts and send out the result reports to team's mailing list. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GeGm4HfV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4cbw05mnhrq6iadx2cmi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GeGm4HfV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4cbw05mnhrq6iadx2cmi.png" alt="Jenkins pipelines"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-static-code-analysis"&gt;
  &lt;/a&gt;
  5. Static Code analysis
&lt;/h3&gt;

&lt;p&gt;The &lt;a href="https://www.sonarqube.org/"&gt;Sonarqube&lt;/a&gt; platform gives a continuous static code analysis quality assurance. Any technical or non technical person can go through various reports of Sonarqube like app security, code smells, tech debts, etc and get a overview of the current state of code.&lt;/p&gt;

&lt;p&gt;It also helps to detect the missed Test coverages, Duplications, Cyclomatic complexity on the go. The weekly Sonarqube pipeline  helps us to have quality gate which needs to be cleared before going to production live.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DsyEWsdS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gws12yu6d6noasmxvz5q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DsyEWsdS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gws12yu6d6noasmxvz5q.png" alt="Sonarqube dashboard"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-optional-in-depth-security-scan"&gt;
  &lt;/a&gt;
  6. [Optional] In depth Security Scan
&lt;/h3&gt;

&lt;p&gt;Well this might be optional for many but for the enterprise level scaled applications, it needs to be shielded with all levels of securities in place. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.veracode.com/"&gt;Veracode&lt;/a&gt; security inspections is a must to have for us. We have monthly pipeline which uploads zipped version of code and runs the scan in veracode platform. &lt;/p&gt;

&lt;p&gt;We also use BlackDuck, WhiteHat for more in-depth testing of our applications that determines every layer is covered with all the best protocols that are followed. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lj1f6l63--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b4fug0ifwpq3h6nt8cbz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lj1f6l63--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b4fug0ifwpq3h6nt8cbz.png" alt="Veeracode Dashboard"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's all folks, thanks for reading. Do leave your comments below :) &lt;/p&gt;

</description>
      <category>software</category>
      <category>development</category>
      <category>security</category>
      <category>bestpractices</category>
    </item>
    <item>
      <title>Skeleton Loading for Social Media Embeds using CSS and JavaScript 🔥</title>
      <author>murtuza</author>
      <pubDate>Sun, 26 Sep 2021 08:56:15 +0000</pubDate>
      <link>https://dev.to/murtuzaalisurti/skeleton-loading-for-social-media-embeds-using-css-and-javascript-4njb</link>
      <guid>https://dev.to/murtuzaalisurti/skeleton-loading-for-social-media-embeds-using-css-and-javascript-4njb</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Note: This post is inspired by &lt;a href="https://youtu.be/ZVug65gW-fc"&gt;Web Dev Simplified&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Social media embeds take some time to load and render, hence the user experience is not so good! Here's an example of twitter embeds:&lt;/p&gt;

&lt;p&gt;Without applying skeleton loading:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uNRHgYU1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6fi3mvfp595v20gx5oqm.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uNRHgYU1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6fi3mvfp595v20gx5oqm.gif" alt="Without skeleton loading"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After applying skeleton loading:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PcWjfzxN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fqcsp8h77v63c9bsn9ny.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PcWjfzxN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fqcsp8h77v63c9bsn9ny.gif" alt="after applying skeleton loading"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you might have noticed, the user experience without skeleton loading is not so good! So, let's see how can we implement skeleton loading on twitter embeds!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#embedding-tweets"&gt;
  &lt;/a&gt;
  Embedding Tweets
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"tweets"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    //tweets
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we have created a container which will contain all our twitter embeds.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"tweets"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"tweet"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        //tweet 1 (paste the twitter embed code here without the script tag)
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"tweet"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        //tweet 2 (paste the twitter embed code here without the script tag)
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    .
    .
    .
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Paste the embed code of your tweet as shown above. Here's how you can get the embed code:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Go to your tweet&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click on the more menu&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iBa55kAD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/doopwfm8w7jwev3mwhe3.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iBa55kAD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/doopwfm8w7jwev3mwhe3.jpg" alt="more_menu"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Select the 'Embed Tweet' option&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--os0nfxko--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x5yb2cka8ac8bl65ujr1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--os0nfxko--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x5yb2cka8ac8bl65ujr1.jpg" alt="embed tweet option"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You will be redirected to a new tab and you can copy the embed code from there itself.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r7tKaKt8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r1wz3f3cbcpsn5q2ka1k.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r7tKaKt8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r1wz3f3cbcpsn5q2ka1k.jpg" alt="twitter embed code"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Note that you don't need to add multiple script tags for different tweets. You can add just one script tag at the bottom of the body element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="c1"&gt;//add this just before the &amp;lt;/body&amp;gt; tag.&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://platform.twitter.com/widgets.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;utf-8&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that you have done that, it's time to style the embeds using CSS!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#styling-the-embeds-using-css"&gt;
  &lt;/a&gt;
  Styling the embeds using CSS!
&lt;/h3&gt;

&lt;p&gt;You can do that by applying Flexbox properties to the container just like this!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.tweets&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;flex-flow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="n"&gt;wrap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;3rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also customize the width of the embed! But note that the tweet embed can only shrink upto a certain limit. If you go beyond that threshold, the embed will overflow, so keep that in mind.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.tweet&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;1.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, it's time to create a skeleton for these tweets!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-skeleton-for-embeds"&gt;
  &lt;/a&gt;
  Creating Skeleton for Embeds
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"tweets-skeleton"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"tweet-skeleton"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"img"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"content-1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"line"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"line"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"line"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"content-2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"line"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"line"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, let's style this skeleton using CSS.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.tweets&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;.tweets-skeleton&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;flex-flow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="n"&gt;wrap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;3rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.tweet&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;.tweet-skeleton&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;1.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.tweet-skeleton&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.05rem&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;190&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;190&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;190&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.tweet-skeleton&lt;/span&gt; &lt;span class="nc"&gt;.img&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;209&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;209&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;209&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.tweet-skeleton&lt;/span&gt; &lt;span class="nc"&gt;.content-1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;.tweet-skeleton&lt;/span&gt; &lt;span class="nc"&gt;.content-2&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;25%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.tweet-skeleton&lt;/span&gt; &lt;span class="nc"&gt;.line&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.5rem&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.3rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;209&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;209&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;209&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.tweet-skeleton&lt;/span&gt; &lt;span class="nc"&gt;.line&lt;/span&gt;&lt;span class="nd"&gt;:last-child&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;75%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Your tweet skeleton should look something like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gFTsqJzH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qq03683q9ebguv8jxmxk.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gFTsqJzH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qq03683q9ebguv8jxmxk.jpg" alt="tweet skeleton"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's animate this skeleton to make it look like something is loading in the background! We will do that by using the concept of 'keyframes' in CSS and animating the background color of the lines of text as well as the image!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;tweet-skeleton&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;209&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;209&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;209&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;243&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;243&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;243&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then, we will define the animation properties for the same.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.tweet-skeleton&lt;/span&gt; &lt;span class="nc"&gt;.img&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;209&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;209&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;209&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;tweet-skeleton&lt;/span&gt; &lt;span class="m"&gt;1s&lt;/span&gt; &lt;span class="n"&gt;linear&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt; &lt;span class="n"&gt;alternate&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.tweet-skeleton&lt;/span&gt; &lt;span class="nc"&gt;.line&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.5rem&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.3rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;209&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;209&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;209&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;tweet-skeleton&lt;/span&gt; &lt;span class="m"&gt;1s&lt;/span&gt; &lt;span class="n"&gt;linear&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt; &lt;span class="n"&gt;alternate&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's the output:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nchWgCbr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/giw4zssl4g30gul8yz6m.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nchWgCbr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/giw4zssl4g30gul8yz6m.gif" alt="skeleton loading animation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As Kyle Cook wonderfully explains in his video, here's how you can create multiple skeleton templates based on your requirement using JavaScript!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tweets_skeleton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.tweets-skeleton&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tweet_skeleton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.tweet-skeleton&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;tweets_skeleton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tweet_skeleton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cloneNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here comes the fun part! How to show the skeleton while the tweet embed is rendering? We are going to do that by using the &lt;code&gt;setTimeout&lt;/code&gt; function in JavaScript. &lt;/p&gt;

&lt;p&gt;The idea is to hide the tweet embeds for a certain time until they are rendered as &lt;code&gt;iframes&lt;/code&gt; and showing the skeleton instead. After the specified time, the skeleton will hide itself and the tweet embeds will be shown. This is certainly not the best way to do this. Another approach is to &lt;a href="https://stackoverflow.com/a/5529841"&gt;detect the network speed&lt;/a&gt; of the client and accordingly decide the timing.&lt;/p&gt;

&lt;p&gt;But to make things simple, we are going to use the &lt;code&gt;setTimeout&lt;/code&gt; function which will be executed after 4 seconds.&lt;/p&gt;

&lt;p&gt;Add these styles to the tweets container.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"tweets"&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"visibility: hidden; display: none;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.tweets&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;visibility: hidden;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;tweets_skeleton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;display: none;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;4000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;If there are large number of tweets, the loading time may increase.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here's the final output:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/seekertruth/embed/ExXWXjZ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;That's all for now! I'm on twitter as &lt;a href="https://twitter.com/murtuza_surti"&gt;murtuza_surti&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>tutorial</category>
      <category>css</category>
    </item>
    <item>
      <title>Linux, Should you use it? Can you use it?</title>
      <author>Rachit Khurana</author>
      <pubDate>Sun, 26 Sep 2021 08:30:43 +0000</pubDate>
      <link>https://dev.to/dilutewater/linux-should-you-use-it-can-you-use-it-4aeo</link>
      <guid>https://dev.to/dilutewater/linux-should-you-use-it-can-you-use-it-4aeo</guid>
      <description>&lt;h3&gt;
  &lt;a href="#some-context"&gt;
  &lt;/a&gt;
  Some context:
&lt;/h3&gt;

&lt;p&gt;I'm just a student and I have been using windows from my childhood, but I switched  to linux about a month ago. I install ubuntu on my main PC as windows was lagging a lot. My PC is a very low end PC so I taught to give linux a try. I then installed kde plasma environment on my ubuntu. And I am so happy with it that I would never switch to windows again.&lt;br&gt;
P.S. I'm not a die-hard programmer or a hacker, I am just a common user with some python knowledge.&lt;/p&gt;

&lt;p&gt;Linux has a lot of awesome features. Lemme list few of the notable ones. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Completely Free :&lt;/strong&gt;&lt;br&gt;
Unlike windows, Linux has  multiple distros that are completely free. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Customisation :&lt;/strong&gt;&lt;br&gt;
Believe me when I say that Linux can customised to the fullest. You can customise every element of the operating system. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Flexibility :&lt;/strong&gt;&lt;br&gt;
If you don't like something in your Linux operating system , you can change it according to your preferences. You are not bonded to use the default softwares/packages.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Runs better on low end hardware :&lt;/strong&gt;&lt;br&gt;
Some linux distros have very low system requirements and can run perfectly on lowend hardware. &lt;br&gt;
I have a low end PC and windows used to lag a lot but linux doesn't. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and many other features...&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#who-should-use-linux-instead-of-windows"&gt;
  &lt;/a&gt;
  Who should use Linux instead of Windows?
&lt;/h1&gt;

&lt;p&gt;If you are a developer, there is a high chance you are already using linux, but if you are not, then you can give it a try. &lt;br&gt;
Installing linux &amp;amp; other softwares can something cause some issues, so if you are good at troubleshooting or googling then you can give it a try. &lt;br&gt;
Or you are just bored of Windows and like to tinker around with your computer. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#which-are-the-most-user-friendly-linux-distros"&gt;
  &lt;/a&gt;
  Which are the most user friendly Linux Distros?
&lt;/h1&gt;

&lt;p&gt;I haven't tried many distros but according to me , you can try Ubuntu for basic users. Or you can try Kubuntu, it has KDE environment &amp;amp; has a lot of customisation features while is still very user friendly. &lt;/p&gt;

&lt;p&gt;After all linux is used everywhere from the high end servers to your android smartphones, so why not give it a try on your desktop computer as well. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;TL;DR - Give Linux a try, especially KDE plasma environment (Kubuntu)&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>linux</category>
      <category>ubuntu</category>
    </item>
    <item>
      <title>Clean Code In few lines</title>
      <author>Taslim Arif</author>
      <pubDate>Sun, 26 Sep 2021 08:24:15 +0000</pubDate>
      <link>https://dev.to/tastaslim/clean-code-1ce</link>
      <guid>https://dev.to/tastaslim/clean-code-1ce</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Any fool can write code that a computer can understand. Good programmers write code that humans can understand.&lt;br&gt;&lt;br&gt;
                                  &lt;strong&gt;– Martin Fowler&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Writing clean, understandable, and maintainable code is a skill that is crucial for every developer to master.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;When I say clean code I mean:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Proper variable name, function name, class name, Proper indentation, Proper spacing, Proper comment and Proper/Unique code style throughout the team.&lt;/li&gt;
&lt;li&gt;Minimal number of lines of code, classes, functions etc. Less code means less headache, less bugs and less maintenance cost.&lt;/li&gt;
&lt;li&gt;No duplication of code. Duplication in your software shows bad software, lack of knowledge and how bad developer you are.&lt;/li&gt;
&lt;li&gt;No magic numbers. Magic numbers are bad, they are not readable, they are hard to maintain and they are not reusable.&lt;/li&gt;
&lt;li&gt;Minimum/No hard coding. It is bad, not reusable, not testable and not maintainable. &lt;/li&gt;
&lt;li&gt;Code should pass 100% test cases(even 99% shows that you are screwed). &lt;/li&gt;
&lt;li&gt;Code is easy and cheap to maintain.&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#tips-to-write-clean-code"&gt;
  &lt;/a&gt;
  Tips to write clean code
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Varibale, function or class names should be descriptive. If it requires a comment to describe what the name does, it's bad naming convention.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let s; // number of seconds ---&amp;gt; Bad naming convention

Good naming convention:
let numberOfSeconds, customerName, employeeName, mailMessage, mailFolder
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Do not include any redundent information/ noise words in naming. Some of noise words:

&lt;ul&gt;
&lt;li&gt;Data&lt;/li&gt;
&lt;li&gt;Object&lt;/li&gt;
&lt;li&gt;Info&lt;/li&gt;
&lt;li&gt;Information&lt;/li&gt;
&lt;li&gt;Varibale&lt;/li&gt;
&lt;li&gt;String
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Bad naming convention:

userInfo, userData, userVaribale, userObject, accountInformation, employeeString etc.

Good naming convention:
user, employee, account etc. 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Be consistant&lt;/strong&gt; while naming varibales of similar tasks. For example while naming any varibale which stores fetched data from say API call or Database use only one of these:
get, retrieve, fetch. Don't use more than one as they do same task.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; Say you decide to follow get convention:
getUser, getName, getFile, getAccount etc.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Don't use magic words:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Bad convention:
   if(age&amp;gt; 18) "eligible for voting"

Good Convention:
   MINIMUM_AGE_FOR_VOTING=18;
   if(age &amp;gt; MINIMUM_AGE_FOR_VOTING) "eligible for voting"

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Never leave code inside comments because it makes other developers scary to remove them because they don't know whether it is for comment purpose or left to use for later.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Always for coding style defined by the programming language which you are using. Few conventions in Typescript:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Varibale name should be in camel case.&lt;/li&gt;
&lt;li&gt;Function name should be in camel case.&lt;/li&gt;
&lt;li&gt;Class name should be in pascal case.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Always follow DRY (Don't Repeat Yourself) principle.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Function name should be a verb, class and varibale name should be a noun.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Skill of writing clean code comes from using it again and again in software development. It is least you should follow while writing a software code.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>productivity</category>
      <category>codequality</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>What is a developer advocate? [TL;DR version]</title>
      <author>Mary Grygleski</author>
      <pubDate>Sun, 26 Sep 2021 08:20:42 +0000</pubDate>
      <link>https://dev.to/mgrygles/what-is-a-developer-advocate-tl-dr-version-24o8</link>
      <guid>https://dev.to/mgrygles/what-is-a-developer-advocate-tl-dr-version-24o8</guid>
      <description>&lt;p&gt;Time seems to have sped up for me after becoming a developer advocate a little over 3 years ago.  Interestingly, I have been asked quite a few times about what a developer advocate is and what s/he does.  Last time I got asked this question was right after I got home from &lt;a href="https://kcdc.info"&gt;the wonderful conference in Kansas City&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://twitter.com/mgrygles?ref_src=twsrc%5Etfw"&gt;@mgrygles&lt;/a&gt; don’t know if you remember me from the lunch talk we had at kcdc. &lt;br&gt;&lt;br&gt;What is a developer advocate??&lt;/p&gt;— Cameron Young (&lt;a class="mentioned-user" href="https://dev.to/sigfualt"&gt;@sigfualt&lt;/a&gt;
) &lt;a href="https://twitter.com/sigfualt/status/1441102887619219462?ref_src=twsrc%5Etfw"&gt;September 23, 2021&lt;/a&gt;
&lt;/blockquote&gt; 

&lt;p&gt;I will definitely share with you a longer version of what I believe a developer advocate is, but for now, here's [my TL;DR response] &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hi &lt;a href="https://twitter.com/sigfualt?ref_src=twsrc%5Etfw"&gt;@sigfualt&lt;/a&gt; - Of course I remember you and our very enjoyable conversation over lunch at KCDC! You've asked a great question. I'd say, a developer advocate🥑 is &lt;strong&gt;&lt;em&gt;a combination of a teacher, developer/ technologist, speaker, entertainer, writer, media producer/travel agent 😄...&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;— Mary Grygleski (&lt;a class="mentioned-user" href="https://dev.to/mgrygles"&gt;@mgrygles&lt;/a&gt;
) &lt;a href="https://twitter.com/mgrygles/status/1441133571087892484?ref_src=twsrc%5Etfw"&gt;September 23, 2021&lt;/a&gt;
&lt;/blockquote&gt; &lt;br&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;...more, an event organizer, and a juggler 🤹‍♀️🤹‍♂️🤹&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;— Mary Grygleski (&lt;a class="mentioned-user" href="https://dev.to/mgrygles"&gt;@mgrygles&lt;/a&gt;
) &lt;a href="https://twitter.com/mgrygles/status/1441135174373105675?ref_src=twsrc%5Etfw"&gt;September 23, 2021&lt;/a&gt;
&lt;/blockquote&gt; 

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/sigfualt"&gt;@sigfualt&lt;/a&gt;
: Thanks for the great question!&lt;/p&gt;

</description>
      <category>devrel</category>
      <category>devadvocacy</category>
      <category>community</category>
      <category>techevangelization</category>
    </item>
  </channel>
</rss>
