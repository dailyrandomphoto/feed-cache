<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Building a Tailwind CSS breadcrumb component</title>
      <author>Zoltán Szőgyényi</author>
      <pubDate>Wed, 29 Sep 2021 10:06:07 +0000</pubDate>
      <link>https://dev.to/themesberg/building-a-tailwind-css-breadcrumb-components-nl8</link>
      <guid>https://dev.to/themesberg/building-a-tailwind-css-breadcrumb-components-nl8</guid>
      <description>&lt;p&gt;Tailwind CSS is a framework that I've been using for quite some time and I must say that I've completely discarded the possibility to work with any other framework in the near future.&lt;/p&gt;

&lt;p&gt;However, there is one particular thing that I feel lacking when building new projects: the necessity to build the web components over and over such as buttons, dropdowns, navigation bars, and more.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o40SgiQr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2mlhb5gd3ct8bn211d54.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o40SgiQr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2mlhb5gd3ct8bn211d54.png" alt="Tailwind CSS breadcrumb component"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have started a series of tutorials where I show you how to build the most commonly used web components on the web and today I want to show you how you can build a breadcrumb component using the utility classes from Tailwind.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tailwind-css-breadcrumb-component"&gt;
  &lt;/a&gt;
  Tailwind CSS breadcrumb component
&lt;/h2&gt;

&lt;p&gt;The breadcrumb component is a commonly used element for websites to show the current location of a page in a hierarchical structure.&lt;/p&gt;

&lt;p&gt;In terms of semantics we should use a nav element and an order list element with links.&lt;/p&gt;

&lt;p&gt;Let's first code the HTML only.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;nav aria-label="Breadcrumb"&amp;gt;
  &amp;lt;ol&amp;gt;
    &amp;lt;li&amp;gt;
      &amp;lt;a href="#"&amp;gt;Home&amp;lt;/a&amp;gt;
    &amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;
      &amp;lt;div&amp;gt;
        &amp;lt;a href="#"&amp;gt;Projects&amp;lt;/a&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/li&amp;gt;
    &amp;lt;li aria-current="page"&amp;gt;FlowBite&amp;lt;/li&amp;gt;
  &amp;lt;/ol&amp;gt;
&amp;lt;/nav&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, we also used the &lt;code&gt;aria-*&lt;/code&gt; attributes to also make the component accessible.&lt;/p&gt;

&lt;p&gt;You should use the &lt;code&gt;aria-current="page"&lt;/code&gt; attribute on the currently active page.&lt;/p&gt;

&lt;p&gt;Now that we have the HTML ready we should start styling the breadcrumb component. Let's start with the &lt;code&gt;nav&lt;/code&gt; and &lt;code&gt;ol&lt;/code&gt; elements.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;nav class="flex" aria-label="Breadcrumb"&amp;gt;
  &amp;lt;ol class="inline-flex items-center space-x-1 md:space-x-3"&amp;gt;
    &amp;lt;li&amp;gt;
      &amp;lt;a href="#"&amp;gt;Home&amp;lt;/a&amp;gt;
    &amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;
        &amp;lt;a href="#"&amp;gt;Projects&amp;lt;/a&amp;gt;
    &amp;lt;/li&amp;gt;
    &amp;lt;li aria-current="page"&amp;gt;FlowBite&amp;lt;/li&amp;gt;
  &amp;lt;/ol&amp;gt;
&amp;lt;/nav&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Great, now let's start styling each of the &lt;code&gt;li&lt;/code&gt; elements inside the list.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;nav class="flex" aria-label="Breadcrumb"&amp;gt;
  &amp;lt;ol class="inline-flex items-center space-x-1 md:space-x-3"&amp;gt;
    &amp;lt;li class="inline-flex items-center"&amp;gt;
      &amp;lt;a href="#"&amp;gt;Home&amp;lt;/a&amp;gt;
    &amp;lt;/li&amp;gt;
    &amp;lt;li class="inline-flex items-center"&amp;gt;
        &amp;lt;a href="#"&amp;gt;Projects&amp;lt;/a&amp;gt;
    &amp;lt;/li&amp;gt;
    &amp;lt;li class="inline-flex items-center" aria-current="page"&amp;gt;FlowBite&amp;lt;/li&amp;gt;
  &amp;lt;/ol&amp;gt;
&amp;lt;/nav&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Awesome! Now let's style the link elements.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;ol&gt;
    &lt;li&gt;
      &lt;a href="#"&gt;Home&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
        &lt;a href="#"&gt;Projects&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;FlowBite&lt;/li&gt;
  &lt;/ol&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
Now let's finally also add the SVG arrows so that the component gets it final form.

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;ol&gt;
    &lt;li&gt;
      &lt;a href="#"&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    Home
  &amp;lt;/a&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;


    &amp;lt;a href="#"&amp;gt;Projects&amp;lt;/a&amp;gt;

&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;


    &amp;lt;span&amp;gt;FlowBite&amp;lt;/span&amp;gt;

&amp;lt;/li&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
The result should look like this:

![Tailwind CSS Breadcrumb](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xpc453tzwwf63kb0piq7.png)

## Breadcrumb with colorful backgrounds

You can also use this example to build a breadcrumb element using a colored background:

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;ol&gt;
    &lt;li&gt;
      &lt;a href="#"&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    Home
  &amp;lt;/a&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;


    &amp;lt;a href="#"&amp;gt;Templates&amp;lt;/a&amp;gt;

&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;


    &amp;lt;span&amp;gt;FlowBite&amp;lt;/span&amp;gt;

&amp;lt;/li&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;


That's it! I hope that this tutorial helps you with your Tailwind CSS journey and your project.

## Flowbite - Tailwind CSS Component Library

This breadcrumb component is part of a larger open source library of [Tailwind CSS components](http://localhost:1313/docs/getting-started/introduction/) that you can use right away to build projects faster with Tailwind.

It is also available to clone on the [official Github repository](https://github.com/themesberg/flowbite) or require via NPM.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

</description>
      <category>tailwindcss</category>
      <category>opensource</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>For a Newbie, by a Veteran Newbie</title>
      <author>Shruti Santosh</author>
      <pubDate>Wed, 29 Sep 2021 09:54:46 +0000</pubDate>
      <link>https://dev.to/shrutisantosh/for-a-newbie-by-a-veteran-newbie-2bip</link>
      <guid>https://dev.to/shrutisantosh/for-a-newbie-by-a-veteran-newbie-2bip</guid>
      <description>&lt;p&gt;This is more like a letter to my freshman self. I am a computer science senior now. And I have made a thousand mistakes that I would love to tell other freshmen and sophomore from not very great colleges (probably the tier II and tier III) in India. &lt;br&gt;
(This blog is assuming you know how to print hello world in some programming language)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-start"&gt;
  &lt;/a&gt;
  How to start?
&lt;/h3&gt;

&lt;p&gt;If you are from a not-so-famous university or college, have not taken computer science as major, or don't even attend college, you might feel like getting a good SDE job (because that is what you are studying for, right?) is a hard thing. Well, it depends. &lt;br&gt;
You are among the 1000s of people like you, who are fighting the similar battles like you are. Even though you are the main character of your life, there are other main characters in their own story, which you share too. So it is all intermixed. How do you differentiate from them? How do you not be a part of the herd, and set yourself apart, and noticeable?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Learn&lt;/em&gt;. It is the mantra. Start learning, something, anything, right now. When you are given an opportunity, to attend a hackathon, a workshop, a seminar... grab it. If you learn something new from it, do it. Since you are a newbie, no one is expecting you to have an in depth knowledge about everything. But it is always good to know something rather than nothing. Anything is intimidating? Watch YouTube videos of it. &lt;br&gt;
What to learn? Well, now asking the right questions. So you have observed enough, looked around. Emerging and developing technologies like ML, AI, BlockChain, Cloud computing, yada yada yada, nothing felt like striking a cord? Though it is always good to have a little experience in these emerging technologies, it is not necessary to start with them. They are interesting, but hard to grasp without strong fundamentals, and dedication. So if you didn't feel like they are your cup of tea, let me tell you about a few domains you can actually dig in, and will prove helpful in the future. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Competitive Coding / DSA&lt;br&gt;
So you wanna be a software engineer at Google? Go to AlgoExpert- just kidding. &lt;br&gt;
So competitive programming is a mind sport according to a lot of the top coders. It is basically solving a given problem using code, within the given time period. &lt;br&gt;
Now don't get me wrong. CP is hard, but it is worth knowing and practicing if you are aiming those FAANG companies. (Facebook, Apple, Amazon, Netflix and Google).&lt;br&gt;
Most competitive programmers got good at it after years of practice, so don't feel sad if you weren't able to solve a few questions. What matters in CP is that you try try try. &lt;br&gt;
The interesting thing about CP is, even if you are not a particularly excellent competitive programmer, the experience in CP will give you an upper hand in most interviews you are gonna face in your life. Interviews are not as hard as CP (generally) so if you practice for CP, interviews are gonna be a piece of cake for you. &lt;br&gt;
This is where I made the mistake. I didn't learn competitive programming and stuff, in my first and second years, thinking I would need the basics, namely trees, graphs, linked lists, and so on, under my belt. I waited for the semesters where these data structures were taught, and by then most of my friends were already good coders. This is because they practiced from youtube, leetcode, geeksforgeeks. They also got placed even before the 4th year started. I would attribute it to their practice of CP and problem solving. There are thousands of easily understandable videos on youtube, books on the internet, and courses on udemy. It all just needs a google search. To start with, you can see videos by William Lin or Nick White, among many, many others. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Front end Development&lt;br&gt;
This is another interesting domain, and was the first thing I started with. Developing is really cool if you love to build things from scratch.&lt;br&gt;
Front end, I wouldn't say is the easiest, but is the relatively easiest among all the forms of development. It will give you a head start on what development really is. But beaware, don't be fooled by the instant results of it. The thing about of front end is that there are n number of frameworks and languages you can work on. The mistake I did was to learn one, and then be done with it. No! The key to surviving in Tech Industry is to be updated about technologies you like. &lt;br&gt;
To begin with, you can start learning HTML, CSS and JS (a little bit at least) and start making static websites. Static, because it doesn't change, and there is no need of input or dynamic changes in it. There are people like &lt;a href="https://twitter.com/Prathkum"&gt;Pratham&lt;/a&gt;, &lt;a href="https://twitter.com/jh3yy"&gt;Jhey&lt;/a&gt;, and countless amazing people (you can find on twitter just by searching #css) who make magic with just pure CSS. So front end is amazing to start with, and even expertise in, because you can do freelancing and even earn money. There are many other front end frameworks like react.js and svelte and all that makes your life easier. It is good to have a hold of the basics (HTML, CSS, JS) before jumping into these biggies. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Backend Development&lt;br&gt;
So if you are the stereotypical guy/girl who doesn't like to decorate stuff and come to the logical and nitty gritty of the working of a website, this is for you. Since I am not the said person, backend development is the least ventured domain by me. So my knowledge in it is limited. All I know that, backend is everything that is working behind your website or application. Everything from fetching your data from the server to inputting it to store to server to play a video, backend is a huge task, but highly satisfying too. You do need to know a little bit of front end so as to know how to actually display your work, but otherwise backend is mainly invisible, but essential. There are a thousand of videos on YouTube for the same. I have tried my hand in Django, which is also a great place to start with. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Full Stack Developer&lt;br&gt;
Wow! so you want to make a complete website yourself rather than employing a different developer for front end or backend, then this is your call. A full stack web developer is one who has expertise in both front and back end technologies. It is always good to know more, and full stack developer means a lot of opportunities. There are various technology stacks and you can chose among them, after ample research. &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Even though I have not mentioned it exclusively above, you have to learn git and learn how to use GitHub, so that you can harness the power of version control and also contribute to open source. It is a wonderful field with a vibrant community, where everyone, from newbies to veterans, are accepted to contribute. You can also push the projects you make to GitHub, so that people can view it, and work on it if they like. Git is essential for developers, so try to learn it ASAP, obviously, while developing projects. &lt;/p&gt;

&lt;p&gt;The list is not obviously over. There are domains like application development (android or iOS) which also has a lot of scope. The benefit of learning development is to get into start-ups and product companies, which usually don't care about your algorithms, but rather your experience. So that brings me to the next point,&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Work&lt;/em&gt; &lt;br&gt;
Because learning is not enough. Your resume, needs to be attractive, to differentiate yourself from others. In today's world, Certificates of completion of a course has very less value. It will give the interviewer an idea that you know about such technology, but not how much. The how much comes from working on projects. These are the most important aspects of a techie's journey, to have a project. Many better than one. A project proves that you have done something in the respective technology. Even if you have no original idea, do something generic. &lt;br&gt;
[&lt;a href="https://workshops.hackclub.com/"&gt;https://workshops.hackclub.com/&lt;/a&gt;] here is a list of projects you can start from. &lt;br&gt;
As you do, so you reap. The more you do projects, the more you get to know about the language. Soon you will be able to think of an original idea. And by that time, you will be capable enough to make it from scratch. But till then, work.&lt;br&gt;
There are numerous tutorials on YouTube to start with one along with your studies of these technologies. After deciding what you like, start doing it. Trust me, the gratification of completing a project is worth it. &lt;/p&gt;

&lt;p&gt;Other than projects, one important thing is to have an internship. If you are anything like me, finding an internship is hard. Which is why you always have to sharp in terms of time taken to apply, and your resume should be perfect. Since you are a newbie and your resume has nothing, DO PROJECTS. They attract the interviewer, and they might hire you. From an internship, you get unparalleled industry experience before getting a job. This will make you even more suited for a full time job, because you already have some experience in the industry. It is fine if you have no prior experience, apply to 50 internships, and you will surely get at least one. When you get one experience, it adds up with others to increase your chances to getting better and better internships. Never miss an opportunity, apply to Google, Facebook, Amazon even if you have no hope. Better try and fail that regret not trying at all. &lt;/p&gt;




&lt;p&gt;Overwhelmed? Don't be. Because you don't have to do it alone. There are many many tech communities having people who are experts in what they do, to people like us. Join one, or two, or all, and try to contact them if you ever feel stuck. The thing about developers is that they are very happy to help, and are always ready to ask clarify your doubts. You don't have to do all this alone, since in a community, you can find people like you, collaborate, and do something together. You can ask around your college, google search, join some discord community, and voila, you are never alone.&lt;/p&gt;

&lt;p&gt;But yes, an essential skill, and probably the only one you need to start off, is to, yes, GOOGLE. Try to google everything when you are stuck. Most times, stack-overflow will be there to save you. When not, some other forum. But in the end, you have to try your best to extract the cause of error from google. And only then ask a developer. Because most times, they are also googling their errors :P&lt;/p&gt;

&lt;p&gt;Internet is your weapon. Everything is available on internet. If you are overwhelmed by the amount of resources, start with freeCodeCamp. It is a good place to start with, the generous people there are constantly giving knowledge for free. I also bought a course on Udemy by Angela Yu, called Web development bootcamp, to learn full stack web development. It was also worth it so far. &lt;/p&gt;

&lt;p&gt;I have said a lot now. There are a lot more that I want to say. These things are probably what you have already heard from a lot of places. But I feel like it is my duty to guide my dear freshmen and newbies to help them not repeat the mistakes I did. I am obviously not a better developer than you are, but I guess at this point of time, I just learnt what not to do. &lt;/p&gt;

&lt;p&gt;All the best, and thanks for reading till the end :)&lt;/p&gt;

</description>
      <category>rant</category>
      <category>computerscience</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>7 useful HTML attributes you may not know</title>
      <author>Tous</author>
      <pubDate>Wed, 29 Sep 2021 09:52:09 +0000</pubDate>
      <link>https://dev.to/hyshah/7-useful-html-attributes-you-may-not-know-49nk</link>
      <guid>https://dev.to/hyshah/7-useful-html-attributes-you-may-not-know-49nk</guid>
      <description>&lt;p&gt;HTML is the cornerstone of web development. Yet, many aspiring programmers merely skim the surface and move on to CSS, JS, etc, missing its entire potential.&lt;/p&gt;
&lt;p&gt;This is a list of HTML attributes that many beginners don't know, but that can be helpful.&lt;/p&gt;
&lt;p&gt;Please, let me know in the comments if you would like to add any other attribute to the list and I'll check it out ;) &lt;/p&gt;

&lt;p&gt;Read More:&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/&amp;amp;ved=2ahUKEwj3kKux9KPzAhVExTgGHRnbAI0QFnoECAgQAg&amp;amp;usg=AOvVaw1PUPii-XosNgl1ZTInOseb"&gt; &lt;b&gt;7 useful HTML attributes you may not know&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
    </item>
    <item>
      <title>My Journey into Development</title>
      <author>Anish De</author>
      <pubDate>Wed, 29 Sep 2021 09:44:57 +0000</pubDate>
      <link>https://dev.to/anishde12020/my-journey-into-development-5ec3</link>
      <guid>https://dev.to/anishde12020/my-journey-into-development-5ec3</guid>
      <description>&lt;h1&gt;
  &lt;a href="#early-years"&gt;
  &lt;/a&gt;
  Early Years
&lt;/h1&gt;

&lt;p&gt;Technology was something I was interested in since a very young age. At first, I was mainly interested in electronics and robotics. I didn't make anything at the age of 5 or 6 but I would play around with whatever I would find at home. Then, I started getting interested in cars at the age of 7 and used to keep up with the latest news. This was also the time I started getting interested in gadgets likes phones. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#lego"&gt;
  &lt;/a&gt;
  Lego
&lt;/h1&gt;

&lt;p&gt;I was interested in playing with Lego from a very young age and every time I got a new set, I would try to make as many models as possible from that. I got a Lego Mindstorm (it is a robot that can be programmed) and many models can be built out of it. I would be making a new model every week and spending a lot of time doing that.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#starting-with-coding"&gt;
  &lt;/a&gt;
  Starting with coding
&lt;/h1&gt;

&lt;p&gt;I was about 9 or 10 when I started some real coding. I started working with some Arduino stuff and then learned the C programming language. I learned Java when I was 11 and started some Android Development but I lost interest in it after some time. I didn't do much for the next one year. Then I started working on an Arduino project and then another but didn't succeed with any of them. I started learning Python a few months later and then started working on some small projects. I also tried to learn machine learning but realized that I needed to learn more maths to understand the theory behind all the algorithms and things.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#youtube"&gt;
  &lt;/a&gt;
  YouTube
&lt;/h1&gt;

&lt;p&gt;I used to watch a lot of tech YouTubers upload content on YouTube and I was fascinated by it. I decided to make my &lt;a href="https://www.youtube.com/channel/UCY-rVWTIsN-G7s81C89SzkA"&gt;own channel&lt;/a&gt; last year and started uploading a lot of videos. Now I have over 450 subscribers and over 90000 views. I haven't uploaded there for a while but I plan on getting my channel out of the grave with development-related videos.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#web-development"&gt;
  &lt;/a&gt;
  Web Development
&lt;/h1&gt;

&lt;p&gt;I started learning Javascript earlier this year and then learned React. Next, I learn NextJS and then made my first proper application, &lt;a href="https://easycomments.anishde.dev/"&gt;EasyComments&lt;/a&gt;, as a part of the &lt;a href="https://townhall.hashnode.com/auth0-hackathon"&gt;Hashnode x Auth0 Hackathon&lt;/a&gt; which was conducted back in August. &lt;/p&gt;

&lt;p&gt;That is my journey into development so far and I aim to learn more, build more applications and contribute to open-source.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Hactoberfest2k21 </title>
      <author>Kshitij Bansod (Danny)</author>
      <pubDate>Wed, 29 Sep 2021 09:29:09 +0000</pubDate>
      <link>https://dev.to/kshitij9896/hactoberfest2k21-2jb8</link>
      <guid>https://dev.to/kshitij9896/hactoberfest2k21-2jb8</guid>
      <description>&lt;p&gt;✅ Here it comes!!!! &lt;br&gt;
👨‍💻 #Hacktoberfest 2021. Have you registered? &lt;br&gt;
👨‍💻 Registration 🔗 is in the 💬 section 🌐 &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#hacktoberfest2k21-hacktoberfest-opensourcecontribution-kshitijsays-learningeveryday-applyhere"&gt;
  &lt;/a&gt;
  hacktoberfest2k21 #hacktoberfest #opensourcecontribution #kshitijsays #learningeveryday #applyhere
&lt;/h1&gt;

</description>
    </item>
    <item>
      <title>What are your favorite VS Code productivity extensions? </title>
      <author>Madza</author>
      <pubDate>Wed, 29 Sep 2021 09:17:38 +0000</pubDate>
      <link>https://dev.to/madza/what-are-your-favorite-vs-code-productivity-extensions-1cng</link>
      <guid>https://dev.to/madza/what-are-your-favorite-vs-code-productivity-extensions-1cng</guid>
      <description>&lt;p&gt;&lt;a href="https://code.visualstudio.com/"&gt;VS code&lt;/a&gt; has become so feature-rich in built-in settings, you should always double check if you really need the extension you have in mind: &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/robole" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Wt3nseC2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--CSYlAzie--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/361098/c72054fa-7e10-4e56-8abe-40906f536dfb.png" alt="robole"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/robole/vs-code-you-don-t-need-that-extension-18d7" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;VS Code: You don't need that extension&lt;/h2&gt;
      &lt;h3&gt;Rob OLeary ・ Aug 5 '20 ・ 7 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#vscode&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tips&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;We have also witnessed the features of many great extensions being baked in, like &lt;a href="https://code.visualstudio.com/docs/editor/emmet"&gt;Emmet&lt;/a&gt;, for example.&lt;/p&gt;

&lt;p&gt;Some of the best extensions I use to increase productivity include: &lt;a href="https://www.tabnine.com/"&gt;TabNine&lt;/a&gt;, &lt;a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode"&gt;Prettier&lt;/a&gt; and &lt;a href="https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer"&gt;Bracket Pair Colorizer&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Share you favorite productivity extensions below 👇&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>productivity</category>
      <category>vscode</category>
    </item>
    <item>
      <title>15 Developer Tools to Make You Super Productive</title>
      <author>Tous</author>
      <pubDate>Wed, 29 Sep 2021 09:06:16 +0000</pubDate>
      <link>https://dev.to/hyshah/15-developer-tools-to-make-you-super-productive-405o</link>
      <guid>https://dev.to/hyshah/15-developer-tools-to-make-you-super-productive-405o</guid>
      <description>&lt;p&gt;&lt;span&gt;The best software developers arm themselves with superior knowledge of specific tools that get the job done.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Pairing with experienced developers leaves you with many tips, tricks, shortcuts, and tools that they have access to and mastered to help them focus on a product’s business logic.&lt;/p&gt;
&lt;p&gt;Today, I’ll show you 15 developer tools that’ll improve your productivity immensely.&lt;/p&gt;
&lt;p&gt;Let’s go! &lt;/p&gt;

&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/top-20-javascript-tips-and-tricks/&amp;amp;ved=2ahUKEwj2rdjc6aPzAhWZyzgGHZ1eCK8QFnoECAcQAQ&amp;amp;usg=AOvVaw1awQy5HljCwnBYNzCuNPb1"&gt;15 Developer Tools to Make You Super Productive&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
      <category>devops</category>
    </item>
    <item>
      <title>Google Auth Firebase</title>
      <author>fireninja333</author>
      <pubDate>Wed, 29 Sep 2021 08:58:35 +0000</pubDate>
      <link>https://dev.to/fireninja333/google-auth-firebase-356c</link>
      <guid>https://dev.to/fireninja333/google-auth-firebase-356c</guid>
      <description>&lt;p&gt;In this blog I am going to cover some basic concepts about the Firebase Authentication with google-auth. So lets zoom in and write some code.&lt;/p&gt;

&lt;p&gt;First off all lets create a login and dashboard screen.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QYbhrzLQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8jyvegvdyke1b97a3kwf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QYbhrzLQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8jyvegvdyke1b97a3kwf.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Here in login screen div we have a button and then when we click on that button a pop up window will open and after selecting/creating/logging in with our google account it will redirect to our dashboard and show us our profile details like profile-picture, email and username. We will display it using the innerhtml method. Now lets create a firebase project&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qhgiym19--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3h7091miv2idx8ecql8j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qhgiym19--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3h7091miv2idx8ecql8j.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n8iFsSaC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6gcl30q7wjugdn0p0x34.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n8iFsSaC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6gcl30q7wjugdn0p0x34.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
After creating it lets create a web app&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Rx5tY_oF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mlgp9gp6qalq11ejvag5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rx5tY_oF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mlgp9gp6qalq11ejvag5.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nRdKa0Ad--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/07gaftp4xmkonrkef8ga.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nRdKa0Ad--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/07gaftp4xmkonrkef8ga.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Give it a name and click next.&lt;br&gt;
Now lets enable Authentication and authentication with google &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bKwlzzxp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4fdho9b4eodt5vw58nng.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bKwlzzxp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4fdho9b4eodt5vw58nng.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tTiYRQpo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ixsrfogvtojnco9trw9o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tTiYRQpo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ixsrfogvtojnco9trw9o.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Next: lets import authentication and our app&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script src="https://www.gstatic.com/firebasejs/8.2.7/firebase-app.js"&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src="https://www.gstatic.com/firebasejs/8.2.7/firebase-auth.js"&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Now lets create a javascript file and paste our config. You can find your config in project settings.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lOZS74qa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8w5o6mgz60zqgnul5xy8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lOZS74qa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8w5o6mgz60zqgnul5xy8.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then we will get the elements from the html file and add a event listener to render the function.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UF16gtb0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hc41tdqchwg9riiz1wv3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UF16gtb0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hc41tdqchwg9riiz1wv3.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Following: We will render the google sign in with pop up and tell it to show the user details and if there is a error just show it in the console.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NMviC0hr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jf6j8a0gnsniiw027lof.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NMviC0hr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jf6j8a0gnsniiw027lof.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Now we will show the user details from the console to innerhtml&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UWuJ2SoP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ujjqd4oikh2wag0y7ssp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UWuJ2SoP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ujjqd4oikh2wag0y7ssp.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b4haYnkJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hglkvandymetb43hc8be.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b4haYnkJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hglkvandymetb43hc8be.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
In the above picture we are telling it to see for login's and if there is a login from the device then render the &lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  showUserDetails  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;function or else let the user login. &lt;br&gt;
Finally lets give some functionality to the logout button.&lt;br&gt;
 &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AKaXsogE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3cz3werw6xgdwubvie1n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AKaXsogE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3cz3werw6xgdwubvie1n.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Here the logout button will render the LogoutUser function and tell it to log out using &lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  firebase.auth().signOut()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;then after logging out just show the LoginScreen and if there is a error just display it in the console.&lt;/p&gt;

&lt;p&gt;If you like this blog consider following me on github: &lt;a href="https://github.com/fireninja333"&gt;https://github.com/fireninja333&lt;/a&gt; and you can find the source code: &lt;a href="https://github.com/fireninja333/google-auth-blog"&gt;https://github.com/fireninja333/google-auth-blog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank you! For reading and I will see you in the next one.&lt;/p&gt;

</description>
      <category>firebase</category>
      <category>googleauth</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Understanding TypeScript decorators.</title>
      <author>Siddharth</author>
      <pubDate>Wed, 29 Sep 2021 08:57:44 +0000</pubDate>
      <link>https://dev.to/siddharthshyniben/understanding-typescript-decorators-3ifc</link>
      <guid>https://dev.to/siddharthshyniben/understanding-typescript-decorators-3ifc</guid>
      <description>&lt;p&gt;JavaScript is an awesome programming language. And TypeScript has done a great job at filling in the gaps of JavaScript. Not only does it add types, it also implements a few extra features which aren't there in JavaScript &lt;em&gt;yet&lt;/em&gt;. One of them are decorators.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-decorator"&gt;
  &lt;/a&gt;
  What is a decorator?
&lt;/h2&gt;

&lt;p&gt;Decorators have been there in programming languages for a long time. Definitions vary, but in short a decorator is a pattern in JavaScript which is used to wrap something to change it's behavior.&lt;/p&gt;

&lt;p&gt;In both JavaScript and TypeScript this is an experimental feature. In JavaScript, it's still a Stage 2 proposal and you can only use it via transpilers like Babel.&lt;/p&gt;

&lt;p&gt;I've decided to explain TypeScript decorators because in TypeScript it has been standardized, and both are basically the same anyways.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-decorators"&gt;
  &lt;/a&gt;
  Using Decorators
&lt;/h2&gt;

&lt;p&gt;This is a very simple example of how to use a decorator:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myDecorator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;thing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// return something&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;myDecorator&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Thing&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First we define a function &lt;code&gt;myDecorator&lt;/code&gt;, and then we "decorate" a variable (our class &lt;code&gt;Thing&lt;/code&gt; in this case) with the decorator. The decorator can return pretty much anything, but most of the time it used to set properties on the class, etc. Here's a real life sample:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;defaultGun&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gun&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;gun&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;ammo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;defaultGun&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Gun&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, &lt;code&gt;Gun&lt;/code&gt; will have a &lt;code&gt;ammo&lt;/code&gt; property by default.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;gun&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Gun&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;car&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ammo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; 10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#decorating-functions"&gt;
  &lt;/a&gt;
  Decorating functions
&lt;/h3&gt;

&lt;p&gt;Another place we can use decorators is in class methods. This time, the decorator gets three arguments.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myDecorator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;descriptor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PropertyDescriptor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// return something&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Gun&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;myDecorator&lt;/span&gt;
    &lt;span class="nx"&gt;fire&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Firing in 3... 2... 1... 🔫&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first param contains the class where the decorated thing exists (in our case &lt;code&gt;Gun&lt;/code&gt;). The second param is the name of the property decorated (in our case &lt;code&gt;fire&lt;/code&gt;). The last is the property descriptor, which is the output of &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor"&gt;&lt;code&gt;Object.getOwnPropertyDescriptor(parent[prop])&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#properties"&gt;
  &lt;/a&gt;
  Properties
&lt;/h3&gt;

&lt;p&gt;You can also decorate properties. It is pretty much the same as function decorators, except there is no third parameter:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myDecorator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// return something&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#more-places-to-decorate"&gt;
  &lt;/a&gt;
  More places to decorate
&lt;/h3&gt;

&lt;p&gt;You can also decorate in more places. Check out the &lt;a href="https://www.typescriptlang.org/docs/handbook/decorators.html"&gt;documentation&lt;/a&gt; to learn more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-cases"&gt;
  &lt;/a&gt;
  Use cases
&lt;/h2&gt;

&lt;p&gt;There are many uses for decorators. We'll go over some here.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#calculate-performance"&gt;
  &lt;/a&gt;
  Calculate performance
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Gun&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;time&lt;/span&gt;
    &lt;span class="nx"&gt;fire&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Firing in 3... 2... 1... 🔫&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;time&lt;/code&gt; could be a function which calculates the execution time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#decorator-factory"&gt;
  &lt;/a&gt;
  Decorator factory
&lt;/h3&gt;

&lt;p&gt;Decorators can also be factories, which returns a function which is the actual decorator. This can be useful when you want your decorators need any arguments.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// The decorator factory&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;change&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// The factory will return a new handler&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// We replace the old value with a new one&lt;/span&gt;
        &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defineProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then when "decorating" we just need to decorate like a function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Gun&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;change&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;ammo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;gun&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Gun&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gun&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ammo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; 20&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#a-practical-example-error-handling"&gt;
  &lt;/a&gt;
  A practical example: error handling
&lt;/h2&gt;

&lt;p&gt;Let's use what we have learned to solve a real world problem.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Gun&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;ammo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="nx"&gt;fire&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Firing in 3... 2... 1... 🔫&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's assume that to fire, we need at least 1 ammo. We can make a check for that using a decorator:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;minAmmo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ammo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;descriptor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PropertyDescriptor&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;original&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;descriptor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nx"&gt;descriptor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ammo&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="nx"&gt;ammo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;original&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Not enough ammo!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;descriptor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;minAmmo&lt;/code&gt; is a factory decorator which takes a parameter &lt;code&gt;ammo&lt;/code&gt; which is the minimum ammo needed.&lt;/p&gt;

&lt;p&gt;We can use implement it in our &lt;code&gt;Gun&lt;/code&gt; class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Gun&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;ammo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;minAmmo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;fireTwice&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Firing in 3... 2... 1... 🔫&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now if you run &lt;code&gt;fire()&lt;/code&gt;, it won't fire because we don't have enough ammo.&lt;/p&gt;

&lt;p&gt;The nice thing is that we can just reuse this without rewriting an if statement. Suppose we need a &lt;code&gt;fireOnce&lt;/code&gt; method. We can easily implement that.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Gun&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;ammo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;minAmmo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;fireTwice&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Firing twice in 3... 2... 1... 🔫&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;minAmmo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;fireOnce&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Firing once in 3... 2... 1... 🔫&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This kind of decorator can be really useful authentication. authorization, and all the other good stuff.&lt;/p&gt;




&lt;p&gt;Liked the post? ❤️ it. Loved it? 🦄 it.&lt;/p&gt;

&lt;p&gt;If you want more people to learn about this, &lt;a href="https://twitter.com/intent/tweet?text=Decorators%20are%20one%20confusing%20part%20of%20TypeScript%2C%20since%20it%20is%20something%20which%20doesn't%20exist%20yet%20in%20JavaScript.%20Sound%20Familiar%3F%20Read%20this%20post%20by%20%40SiddharthShyniben%20to%20learn%20more%20about%20Decorators&amp;amp;url=https%3A%2F%2Fdev.to%2Fsiddharthshyniben%2Funderstanding-typescript-decorators-3ifc"&gt;share this on Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Detect active links in Next.js</title>
      <author>Chris Bongers</author>
      <pubDate>Wed, 29 Sep 2021 08:22:21 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/detect-active-links-in-next-js-38gj</link>
      <guid>https://dev.to/dailydevtips1/detect-active-links-in-next-js-38gj</guid>
      <description>&lt;p&gt;Now that we have an almost complete Next.js website driven by WordPress let's see how we can detect the active links.&lt;/p&gt;

&lt;p&gt;Feel free to follow along by using this &lt;a href="https://github.com/rebelchris/next-tailwind/tree/layout"&gt;GitHub repo&lt;/a&gt; as your starting point.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#migrating-to-nextjs-links"&gt;
  &lt;/a&gt;
  Migrating to Next.js Links
&lt;/h2&gt;

&lt;p&gt;Before we can add our active link check we need to migrate our existing hrefs to the Next.js Link component.&lt;/p&gt;

&lt;p&gt;To do so, open up the &lt;code&gt;Header.js&lt;/code&gt; component and include the Link component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/link&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we need to wrap our href into this Link component like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connectedNode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cursor-pointer p-4 ml-2 text-white&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/a&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Link&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This doesn't change the effect we see on the frontend; however, it's the best way to navigate Next.js applications.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-the-active-route-check"&gt;
  &lt;/a&gt;
  Adding the active route check
&lt;/h2&gt;

&lt;p&gt;Ok, so now how do we check which is the active link?&lt;/p&gt;

&lt;p&gt;First of all, we need to introduce the &lt;code&gt;useRouter&lt;/code&gt; from the Next router.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;useRouter&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/router&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And inside our Header function define it like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we can use a dynamic className on our &lt;code&gt;a&lt;/code&gt; element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;
  &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`cursor-pointer p-4 ml-2 text-white &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;
    &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;asPath&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s2"&gt;`/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connectedNode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
      &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;underline&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
      &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; hover:underline&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/a&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We use the router &lt;code&gt;asPath&lt;/code&gt;, which returns something like &lt;code&gt;/sample-page&lt;/code&gt; to check against the slug we are setting.&lt;/p&gt;

&lt;p&gt;In my case, I have to include the &lt;code&gt;/&lt;/code&gt; in the beginning because it's not set on my slug object.&lt;/p&gt;

&lt;p&gt;And that's it. We now have styled our active pages with an underline.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NxYv9VJg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632325332369/7kZk7SdxT.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NxYv9VJg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632325332369/7kZk7SdxT.png" alt="Active link in Next.js"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And as usual, you can find the complete code on this &lt;a href="https://github.com/rebelchris/next-tailwind/tree/active-link"&gt;GitHub repo&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>react</category>
    </item>
    <item>
      <title>Using Doppler In a React-Firebase Application</title>
      <author>Melvin Kosisochukwu</author>
      <pubDate>Wed, 29 Sep 2021 08:20:18 +0000</pubDate>
      <link>https://dev.to/melvinmanni/using-doppler-in-a-react-firebase-application-4co6</link>
      <guid>https://dev.to/melvinmanni/using-doppler-in-a-react-firebase-application-4co6</guid>
      <description>&lt;p&gt;&lt;em&gt;Handling secrets/environment variables on a team/personal codebase can be very stressful. Doppler helps you scale through this problem by providing an environment to store your secrets that you and your team can use. You will like to keep most of these environment variables within the team; hence, it’s not best to push it to a GitHub repository to avoid vulnerability. In this article, we will look through how to implement Doppler with a React-firebase app.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://doppler.com/"&gt;Doppler&lt;/a&gt; is a universal secret manager; this means that you can use doppler to manage secrets across applications within groups with less risk of vulnerability and ease of work. Doppler makes it easy for you to share environment secrets for application and development with your team. It also eases integration with most of your cloud platforms.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why use Doppler ?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Scalability: It makes it easy to scale and make changes to environment variables in your application&lt;/li&gt;
&lt;li&gt;Ease of Work: Doppler allows you to focus on the core functionality of your application, removing the complications of sharing environment secrets across team members.&lt;/li&gt;
&lt;li&gt;Doppler supports integration with multiple cloud/hosting platforms for your application.
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-doppler"&gt;
  &lt;/a&gt;
  Setting up Doppler
&lt;/h2&gt;

&lt;p&gt;For this tutorial, we will be setting up doppler for a simple react-firebase application; we will look at how to fetch and read the secrets in our application. Before we get started, we need to set up the doppler CLI; I will be walking you through how to do this on a mac.&lt;br&gt;
Run the command below in your terminal to install doppler&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;brew &lt;span class="nb"&gt;install &lt;/span&gt;dopplerhq/cli/doppler
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once we have the doppler CLI installed you can run the &lt;code&gt;doppler&lt;/code&gt; command with the &lt;code&gt;--help&lt;/code&gt; flag to see a list of commands that are supported.&lt;br&gt;
To verify the doppler CLI version we run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;doppler &lt;span class="nt"&gt;--version&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I am currently working with v3.32.0. Next, I will need to login from my terminal; to do this you run the doppler login command below and select y&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;doppler login
? Open the authorization page &lt;span class="k"&gt;in &lt;/span&gt;your browser? &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt; y
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The command will open a browser window and prompt you to enter an auth code that will be made available on the terminal.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GgyZlMX1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fut19qwce657zf29yt4a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GgyZlMX1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fut19qwce657zf29yt4a.png" alt="Doppler Auth page"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;? Open the authorization page &lt;span class="k"&gt;in &lt;/span&gt;your browser? Yes
Your auth code is:
kansas_loganberry_jewelry_lime_walnut

Waiting...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once you enter the auth command, click next to navigate to the next screen and enter the token name. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a5UZ4gsf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r5ee6wvrd8pfi6nsn4ww.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a5UZ4gsf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r5ee6wvrd8pfi6nsn4ww.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on finish login, and &lt;em&gt;voila!&lt;/em&gt; CLI authentication to your Doppler account completed. &lt;br&gt;
&lt;strong&gt;Note&lt;/strong&gt;:  You will need to log in to your doppler account if you have not previously done this.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#setting-up-reactfirebase-application"&gt;
  &lt;/a&gt;
  Setting Up React-Firebase Application
&lt;/h2&gt;

&lt;p&gt;It's time to set up our application; we will have a simple React application that writes messages and reads all messages written to the firestore. We will also build a rest api with the firebase cloud functions, this will be hosted on firebase. While setting up a firebase application on the console, enable hosting. Once we have everything set up, it's now time to handle integrating the secrets to doppler. I will be setting up the API key for an ip details API on Doppler, thus&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Fca3LFg8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sl97wuezkm1g83m40k9n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Fca3LFg8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sl97wuezkm1g83m40k9n.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I will be using this API key later in the application. Next, we need to create the firebase functions;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;firebase init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then select functions, the language you want to write your functions in(I will be choosing JavaScript)  and the project to use. Select yes for the rest of the option to successfully create your cloud functions. Once you are done this will create a folder “functions”. Next up is to cd into the folder and install express.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;functions &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; npm &lt;span class="nb"&gt;install &lt;/span&gt;express
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#using-doppler-in-your-application"&gt;
  &lt;/a&gt;
  Using Doppler in your application
&lt;/h2&gt;

&lt;p&gt;In the root of the folder, create a file called environment.js, this will hold all the env configuration for firebase. In the environment.js file copy and paste in this code;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;functions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;firebase-functions&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// use firebase config when deployed to firebase&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;deployedToFirebase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NODE_ENV&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;production&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;deployedToFirebase&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;functions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The code block above will check if the app is in production and set the value of config to &lt;code&gt;functions.config().env&lt;/code&gt;. Go into the package.json and update the scripts to use the doppler environments on deploy.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"serve"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"doppler run -- firebase emulators:start --only functions"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"shell"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"doppler run -- firebase functions:shell"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"npm run shell"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"deploy"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"npm run update_config &amp;amp;&amp;amp; firebase deploy --only functions"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"update_config"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"firebase functions:config:unset env &amp;amp;&amp;amp; firebase functions:config:set env=&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;$(doppler secrets download --config prd --no-file --silent)&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"logs"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"firebase functions:log"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will set up our firebase api to use doppler environments locally and in production.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-secrets-in-firebase-application"&gt;
  &lt;/a&gt;
  Using secrets in firebase application
&lt;/h2&gt;

&lt;p&gt;To use the environment variable, we will need to bring in the config created in the environment.js file, and just like accessing key values pairs in object literals, we will access the API_KEY variable stored on doppler.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;environments&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./environment&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://ipgeolocation.abstractapi.com/v1/?api_key=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;environments&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;API_KEY&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the code block above, we import the environment file and use it to access the API_KEY variable, &lt;code&gt;environments.API_KEY&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Once done with building the API we can deploy it on firebase by running the deploy script;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In our react application we will be consuming the api deployed to firebase to write new messages and read all messages written to firestore.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this article, we looked at how to integrate doppler in managing secrets in our firebase application. We also looked at consuming the firebase API in our react application.To review full firebase functions and doppler configuration, you can find the source code in this &lt;a href="https://github.com/MelvinManni/doppler-firebase"&gt;GitHub repository&lt;/a&gt;. You can also find the complete frontend source code &lt;a href="https://github.com/MelvinManni/doppler_firebase-fe"&gt;here&lt;/a&gt;. For additional information on integrating Doppler with other applications/platforms, you can refer to the &lt;a href="https://docs.doppler.com/docs"&gt;official documentation&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>react</category>
      <category>firebase</category>
      <category>security</category>
      <category>productivity</category>
    </item>
    <item>
      <title>How to Reduce your Android release App size, up to 47% or even more — React Native</title>
      <author>Kyle Buntin</author>
      <pubDate>Wed, 29 Sep 2021 08:11:15 +0000</pubDate>
      <link>https://dev.to/kyle_buntin/how-to-reduce-your-android-release-app-size-up-to-47-or-even-more-react-native-h95</link>
      <guid>https://dev.to/kyle_buntin/how-to-reduce-your-android-release-app-size-up-to-47-or-even-more-react-native-h95</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a3cMTRm8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8siwjkp9eh7fqfobx74s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a3cMTRm8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8siwjkp9eh7fqfobx74s.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;After finished developing and building your app, you then realise that it is somewhat bigger than what you prefer. &lt;br&gt;
The first thought that comes to your mind is "how can this be reduced?"&lt;br&gt;
Consider using Hermes to achieve this.&lt;/p&gt;

&lt;p&gt;In one of our apps at &lt;a href="https://www.quickcomponent.com/"&gt;Quick Component&lt;/a&gt;, we experienced about 19.2 percent decrease in app size when building release with Hermes. See the image below.&lt;/p&gt;

&lt;p&gt;Without Hermes&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KRXHaUeP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rcbdsytzfloomhvigqtl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KRXHaUeP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rcbdsytzfloomhvigqtl.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With Hermes&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AZdwheTE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6q3df0l55fglxgh07jsv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AZdwheTE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6q3df0l55fglxgh07jsv.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also checkout another app where about 47% decrease in app size was experienced using Hermes.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WQrYGeRI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gvu8a5j5awtqldzjtz6z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WQrYGeRI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gvu8a5j5awtqldzjtz6z.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;How do we build with Hermes?&lt;br&gt;
You only need to edit one or two files.&lt;/p&gt;

&lt;p&gt;In android/app/build.gradle enable Hermes&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; project.ext.react = [     
    entryFile: "index.js",          
    enableHermes: true  // clean and rebuild if changing 
 ]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also, if you're using ProGuard, you will need to add this rule in proguard-rules.pro :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;-keep class com.facebook.hermes.unicode.** { *; }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, if you've already built your app at least once, clean the build:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cd android &amp;amp;&amp;amp; ./gradlew clean
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now you can build ur release as you would normally do  with&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;./gradlew bundleRelease
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also note that There are other benefits to using hermes like stated here: &lt;br&gt;
Hermes is an open-source JavaScript engine optimized for running React Native apps on Android. &lt;br&gt;
For many apps, enabling Hermes will result in improved start-up time, decreased memory usage, and smaller app size.&lt;/p&gt;

&lt;p&gt;Also, ensure you're using at least version 0.60.4 of React Native.&lt;/p&gt;

&lt;p&gt;Checkout a fully functioning templates with backend like the &lt;a href="https://www.quickcomponent.com/online-store/React-Native-Dating-App-p394398675"&gt;Dating app&lt;/a&gt;, &lt;a href="https://www.quickcomponent.com/online-store/React-Native-WhatsApp-clone-p262393451"&gt;Whatsapp clone&lt;/a&gt;(with audio and video calling), &lt;a href="https://www.quickcomponent.com/online-store/UberEats-Clone-p382990645"&gt;UberEats clone&lt;/a&gt; and more built with React Native.&lt;/p&gt;

</description>
    </item>
  </channel>
</rss>
